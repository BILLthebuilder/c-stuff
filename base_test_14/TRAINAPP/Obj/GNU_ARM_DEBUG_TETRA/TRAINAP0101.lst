
Obj/GNU_ARM_DEBUG_TETRA/TRAINAP0101.axf:     file format elf32-littlearm

SYMBOL TABLE:
00008134 l    d  .interp	00000000              .interp
00008148 l    d  .note.ABI-tag	00000000              .note.ABI-tag
00008168 l    d  .hash	00000000              .hash
000082e0 l    d  .dynsym	00000000              .dynsym
00008650 l    d  .dynstr	00000000              .dynstr
0000894a l    d  .gnu.version	00000000              .gnu.version
000089b8 l    d  .gnu.version_r	00000000              .gnu.version_r
00008a08 l    d  .rel.dyn	00000000              .rel.dyn
00008a30 l    d  .rel.plt	00000000              .rel.plt
00008b60 l    d  .init	00000000              .init
00008b6c l    d  .plt	00000000              .plt
00008d54 l    d  .text	00000000              .text
000223b8 l    d  .fini	00000000              .fini
000223c0 l    d  .rodata	00000000              .rodata
00026430 l    d  .ARM.exidx	00000000              .ARM.exidx
00026438 l    d  .eh_frame	00000000              .eh_frame
0002f000 l    d  .init_array	00000000              .init_array
0002f008 l    d  .fini_array	00000000              .fini_array
0002f014 l    d  .jcr	00000000              .jcr
0002f018 l    d  .dynamic	00000000              .dynamic
0002f118 l    d  .got	00000000              .got
0002f230 l    d  .data	00000000              .data
0002fed0 l    d  .bss	00000000              .bss
00000000 l    d  .comment	00000000              .comment
00000000 l    d  .ARM.attributes	00000000              .ARM.attributes
00000000 l    d  .debug_aranges	00000000              .debug_aranges
00000000 l    d  .debug_info	00000000              .debug_info
00000000 l    d  .debug_abbrev	00000000              .debug_abbrev
00000000 l    d  .debug_line	00000000              .debug_line
00000000 l    d  .debug_frame	00000000              .debug_frame
00000000 l    d  .debug_str	00000000              .debug_str
00000000 l    d  .debug_loc	00000000              .debug_loc
00000000 l    d  .debug_ranges	00000000              .debug_ranges
00008e6c l     F .text	00000000              call_gmon_start
00000000 l    df *ABS*	00000000              init.c
00000000 l    df *ABS*	00000000              stapp_legacyexitpoint.c
00026390 l     O .rodata	00000018              __FUNCTION__.7509
00000000 l    df *ABS*	00000000              startup_tplusentry.c
00000000 l    df *ABS*	00000000              crtstuff.c
0002f014 l     O .jcr	00000000              __JCR_LIST__
00008ecc l     F .text	00000000              deregister_tm_clones
00008f04 l     F .text	00000000              register_tm_clones
00008f48 l     F .text	00000000              __do_global_dtors_aux
0002fed4 l     O .bss	00000001              completed.9454
0002f010 l     O .fini_array	00000000              __do_global_dtors_aux_fini_array_entry
00008f70 l     F .text	00000000              frame_dummy
0002f004 l     O .init_array	00000000              __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000              Main.c
00000000 l    df *ABS*	00000000              Entry.c
0002fedc l     O .bss	00000020              xCfg
0002fefc l     O .bss	00000004              ulSize
0002f238 l     O .data	00000108              Services
0002ff00 l     O .bss	00000015              appName
0002ff18 l     O .bss	00000015              fileName
000223c4 l     O .rodata	00000013              timeToCall
000223d8 l     O .rodata	0000001f              idleMsg
000223f8 l     O .rodata	00000020              szDate
0000927c l     F .text	0000003e              Progress
00022418 l       .rodata	00000000              .LC0
00022424 l       .rodata	00000000              .LC1
00022428 l       .rodata	00000000              .LC2
00022448 l       .rodata	00000000              .LC3
00022460 l       .rodata	00000000              .LC4
00022484 l       .rodata	00000000              .LC5
000224a0 l       .rodata	00000000              .LC6
000224a8 l       .rodata	00000000              .LC7
000224ac l       .rodata	00000000              .LC8
000224b4 l       .rodata	00000000              .LC9
000224b8 l       .rodata	00000000              .LC10
000224c0 l       .rodata	00000000              .LC11
00022500 l       .rodata	00000000              .LC12
00022510 l       .rodata	00000000              .LC13
00022520 l       .rodata	00000000              .LC14
00022594 l       .rodata	00000000              .LC15
0002260c l       .rodata	00000000              .LC16
00022610 l       .rodata	00000000              .LC17
00022624 l       .rodata	00000000              .LC18
00022628 l       .rodata	00000000              .LC19
00022640 l       .rodata	00000000              .LC20
00022648 l       .rodata	00000000              .LC21
0002264c l       .rodata	00000000              .LC22
00022650 l       .rodata	00000000              .LC23
00022660 l       .rodata	00000000              .LC24
00022670 l       .rodata	00000000              .LC25
00022684 l       .rodata	00000000              .LC26
00022690 l       .rodata	00000000              .LC27
0002269c l       .rodata	00000000              .LC28
000226a4 l       .rodata	00000000              .LC29
000226ac l       .rodata	00000000              .LC30
000226c0 l       .rodata	00000000              .LC31
000226d0 l       .rodata	00000000              .LC32
000226d8 l       .rodata	00000000              .LC33
000226ec l       .rodata	00000000              .LC34
00000000 l    df *ABS*	00000000              Menu.c
0002ff38 l     O .bss	00000004              sKeyboard
0002ff3c l     O .bss	00000004              sDisplay
00022704 l       .rodata	00000000              .LC8
0002270c l       .rodata	00000000              .LC9
00022720 l       .rodata	00000000              .LC10
00022738 l       .rodata	00000000              .LC11
0002274c l       .rodata	00000000              .LC12
00022764 l       .rodata	00000000              .LC3
00022770 l       .rodata	00000000              .LC13
00022788 l       .rodata	00000000              .LC14
00022794 l       .rodata	00000000              .LC15
000227f8 l       .rodata	00000000              .LC7
00022814 l       .rodata	00000000              .LC16
0002281c l       .rodata	00000000              .LC17
00022820 l       .rodata	00000000              .LC18
0002282c l       .rodata	00000000              .LC19
00022830 l       .rodata	00000000              .LC20
00000000 l    df *ABS*	00000000              ComGPRS.c
00022838 l     O .rodata	0000035c              txGPRS
00022b94 l     O .rodata	00000050              xPrinter
0002f340 l     O .data	0000000c              tzRequirePin
00022bec l       .rodata	00000000              .LC2
00022c04 l       .rodata	00000000              .LC3
00022c10 l       .rodata	00000000              .LC4
00022c24 l       .rodata	00000000              .LC5
00022c3c l       .rodata	00000000              .LC6
00022c50 l       .rodata	00000000              .LC7
00022c64 l       .rodata	00000000              .LC8
00022c78 l       .rodata	00000000              .LC9
00022c90 l       .rodata	00000000              .LC10
00022c9c l       .rodata	00000000              .LC11
00022cb4 l       .rodata	00000000              .LC12
00022cc0 l       .rodata	00000000              .LC13
00022cd4 l       .rodata	00000000              .LC14
00022cd8 l       .rodata	00000000              .LC15
00022ce4 l       .rodata	00000000              .LC16
00022cf0 l       .rodata	00000000              .LC17
00022d00 l       .rodata	00000000              .LC18
00022d14 l       .rodata	00000000              .LC19
00022d2c l       .rodata	00000000              .LC20
00022d44 l       .rodata	00000000              .LC21
00022d5c l       .rodata	00000000              .LC22
00022d68 l       .rodata	00000000              .LC23
00022d74 l       .rodata	00000000              .LC24
00022d84 l       .rodata	00000000              .LC25
00022d94 l       .rodata	00000000              .LC26
00022da8 l       .rodata	00000000              .LC27
00022dbc l       .rodata	00000000              .LC28
00022dd0 l       .rodata	00000000              .LC29
0000aa3c l     F .text	00000b60              GprsReport
00022de4 l       .rodata	00000000              .LC30
0000b59c l     F .text	00000294              StartGPRS
0000b830 l     F .text	000001e8              OpenGPRS
0000ba18 l     F .text	0000003c              ConnectGPRS
0000ba54 l     F .text	0000005c              SendGPRS
0000bab0 l     F .text	00000160              ReceiveGPRS
0000bc10 l     F .text	0000003c              DisconnectGPRS
0000bc4c l     F .text	00000040              CloseGPRS
0000bc8c l     F .text	00000036              StopGPRS
00022df8 l       .rodata	00000000              .LC31
00022e08 l       .rodata	00000000              .LC32
00022e0c l       .rodata	00000000              .LC33
00022e18 l       .rodata	00000000              .LC34
00022e24 l       .rodata	00000000              .LC35
00022e38 l       .rodata	00000000              .LC36
00022e44 l       .rodata	00000000              .LC37
00022e58 l       .rodata	00000000              .LC38
00022e68 l       .rodata	00000000              .LC39
00022e84 l       .rodata	00000000              .LC40
00022e90 l       .rodata	00000000              .LC41
00022ea0 l       .rodata	00000000              .LC42
00022ea8 l       .rodata	00000000              .LC43
00022ec0 l       .rodata	00000000              .LC44
00022ed0 l       .rodata	00000000              .LC45
00022ee0 l       .rodata	00000000              .LC46
00022ee8 l       .rodata	00000000              .LC47
00022ef8 l       .rodata	00000000              .LC48
00022f08 l       .rodata	00000000              .LC49
00022f18 l       .rodata	00000000              .LC50
00022f28 l       .rodata	00000000              .LC51
00022f94 l       .rodata	00000000              .LC52
00022fa4 l       .rodata	00000000              .LC53
00022fb0 l       .rodata	00000000              .LC54
00022fc8 l       .rodata	00000000              .LC55
00022fd4 l       .rodata	00000000              .LC56
00022fe4 l       .rodata	00000000              .LC57
00022ff0 l       .rodata	00000000              .LC58
00022ffc l       .rodata	00000000              .LC59
00023008 l       .rodata	00000000              .LC60
00023010 l       .rodata	00000000              .LC61
00023024 l       .rodata	00000000              .LC62
00000000 l    df *ABS*	00000000              Goal.c
0000cef4 l     F .text	00000054              CallBackPressKey
0000cf48 l     F .text	0000003c              CallBackValidKey
0000cf84 l     F .text	0000003c              CallBackCancelKey
0000cfc0 l     F .text	0000003c              CallBackDownKey
0000cffc l     F .text	0000003c              CallBackUpKey
0000d038 l     F .text	0000004a              CallBackTimeout
00023028 l       .rodata	00000000              .LC0
00023044 l       .rodata	00000000              .LC1
00023060 l       .rodata	00000000              .LC2
0002307c l       .rodata	00000000              .LC3
0002309c l       .rodata	00000000              .LC4
000230a0 l       .rodata	00000000              .LC5
000230a8 l       .rodata	00000000              .LC6
00000000 l    df *ABS*	00000000              Mapapp.c
000230ac l       .rodata	00000000              .LC0
000230b8 l       .rodata	00000000              .LC1
00023158 l     O .rodata	000000f8              tzApp
00023250 l     O .rodata	0000000b              zAppTab
0002325c l       .rodata	00000000              .LC18
00000000 l    df *ABS*	00000000              FMG.c
00023268 l     O .rodata	000002b0              txBatch
00023518 l     O .rodata	000004b4              txTrans
000239cc l     O .rodata	00000284              zBatch
0002ff40 l     O .bss	0000002c              xFileInfo
00023c50 l       .rodata	00000000              .LC0
00023c60 l       .rodata	00000000              .LC1
00023c78 l       .rodata	00000000              .LC2
00023c88 l       .rodata	00000000              .LC3
0000f960 l     F .text	00000088              GetBatchIdx
0000f9e8 l     F .text	00000070              SetBatchIdx
00023ca0 l       .rodata	00000000              .LC4
00023cac l       .rodata	00000000              .LC5
00023cc0 l       .rodata	00000000              .LC6
00023cc4 l       .rodata	00000000              .LC7
00023cd4 l       .rodata	00000000              .LC8
00023ce4 l       .rodata	00000000              .LC9
00023cf0 l       .rodata	00000000              .LC10
00023d08 l       .rodata	00000000              .LC11
00023d20 l       .rodata	00000000              .LC12
00023d38 l       .rodata	00000000              .LC13
00023d4c l       .rodata	00000000              .LC14
00023d58 l       .rodata	00000000              .LC15
00023d64 l       .rodata	00000000              .LC16
00023d78 l       .rodata	00000000              .LC17
00023d84 l       .rodata	00000000              .LC18
00023d94 l       .rodata	00000000              .LC19
00023da0 l       .rodata	00000000              .LC20
00000000 l    df *ABS*	00000000              Utility.c
0002f34c l     O .data	00000014              tzConverter
0002ff6c l     O .bss	00000010              tcIp
00023ddc l       .rodata	00000000              .LC5
00023dec l       .rodata	00000000              .LC6
00023e04 l       .rodata	00000000              .LC7
00023e1c l       .rodata	00000000              .LC8
00023e2c l       .rodata	00000000              .LC9
00023e3c l       .rodata	00000000              .LC10
00023e54 l       .rodata	00000000              .LC11
00023e68 l       .rodata	00000000              .LC12
00023e7c l       .rodata	00000000              .LC13
00023e88 l       .rodata	00000000              .LC14
00023ea4 l       .rodata	00000000              .LC15
00023ec0 l       .rodata	00000000              .LC16
00023edc l       .rodata	00000000              .LC17
00023ef8 l       .rodata	00000000              .LC18
00023f0c l       .rodata	00000000              .LC19
00023f1c l       .rodata	00000000              .LC20
00023f2c l       .rodata	00000000              .LC21
00023f3c l       .rodata	00000000              .LC22
00023f4c l       .rodata	00000000              .LC23
00023f64 l       .rodata	00000000              .LC24
00023f78 l       .rodata	00000000              .LC25
00023f88 l       .rodata	00000000              .LC26
00023f98 l       .rodata	00000000              .LC27
00023f9c l       .rodata	00000000              .LC28
00023fa4 l       .rodata	00000000              .LC29
00023fb0 l       .rodata	00000000              .LC30
00023fc0 l       .rodata	00000000              .LC31
00023fd4 l       .rodata	00000000              .LC32
00023fe4 l       .rodata	00000000              .LC33
00023ff8 l       .rodata	00000000              .LC34
00024008 l       .rodata	00000000              .LC35
00024018 l       .rodata	00000000              .LC36
00024024 l       .rodata	00000000              .LC37
00024030 l       .rodata	00000000              .LC38
00024044 l       .rodata	00000000              .LC39
00024058 l       .rodata	00000000              .LC40
0002406c l       .rodata	00000000              .LC41
00024078 l       .rodata	00000000              .LC42
00024088 l       .rodata	00000000              .LC43
00024098 l       .rodata	00000000              .LC44
000240a8 l       .rodata	00000000              .LC45
000240b8 l       .rodata	00000000              .LC46
000240c8 l       .rodata	00000000              .LC47
000240d8 l       .rodata	00000000              .LC48
000240e8 l       .rodata	00000000              .LC49
000240f4 l       .rodata	00000000              .LC50
00024104 l       .rodata	00000000              .LC51
00024110 l       .rodata	00000000              .LC52
00024118 l       .rodata	00000000              .LC53
00024128 l       .rodata	00000000              .LC54
00024134 l       .rodata	00000000              .LC55
00024148 l       .rodata	00000000              .LC56
00024158 l       .rodata	00000000              .LC57
00024168 l       .rodata	00000000              .LC58
00024178 l       .rodata	00000000              .LC59
00024188 l       .rodata	00000000              .LC60
0002419c l       .rodata	00000000              .LC61
000241ac l       .rodata	00000000              .LC62
000241c0 l       .rodata	00000000              .LC63
000241d4 l       .rodata	00000000              .LC64
000241e8 l       .rodata	00000000              .LC65
000241f8 l       .rodata	00000000              .LC66
00024200 l       .rodata	00000000              .LC67
00024210 l       .rodata	00000000              .LC68
00024220 l       .rodata	00000000              .LC69
00024230 l       .rodata	00000000              .LC70
00024240 l       .rodata	00000000              .LC71
00024250 l       .rodata	00000000              .LC72
00024264 l       .rodata	00000000              .LC73
00024274 l       .rodata	00000000              .LC74
00024280 l       .rodata	00000000              .LC75
0002428c l       .rodata	00000000              .LC76
00024298 l       .rodata	00000000              .LC77
000242a4 l       .rodata	00000000              .LC78
000242b4 l       .rodata	00000000              .LC79
000242c4 l       .rodata	00000000              .LC80
000242d4 l       .rodata	00000000              .LC81
000242e4 l       .rodata	00000000              .LC82
000242f4 l       .rodata	00000000              .LC83
00024304 l       .rodata	00000000              .LC84
00024314 l       .rodata	00000000              .LC85
00024328 l       .rodata	00000000              .LC86
00024338 l       .rodata	00000000              .LC87
0002434c l       .rodata	00000000              .LC88
0002435c l       .rodata	00000000              .LC89
00024364 l       .rodata	00000000              .LC90
00024370 l       .rodata	00000000              .LC91
00024378 l       .rodata	00000000              .LC92
00024388 l       .rodata	00000000              .LC93
0002439c l       .rodata	00000000              .LC94
000243bc l       .rodata	00000000              .LC95
000243cc l       .rodata	00000000              .LC96
000243dc l       .rodata	00000000              .LC97
000243ec l       .rodata	00000000              .LC98
000243f8 l       .rodata	00000000              .LC99
00024408 l       .rodata	00000000              .LC100
00024418 l       .rodata	00000000              .LC101
00024428 l       .rodata	00000000              .LC102
00024438 l       .rodata	00000000              .LC103
00024448 l       .rodata	00000000              .LC104
00024454 l       .rodata	00000000              .LC105
00024464 l       .rodata	00000000              .LC106
00024474 l       .rodata	00000000              .LC107
00024484 l       .rodata	00000000              .LC108
00024494 l       .rodata	00000000              .LC109
000244a4 l       .rodata	00000000              .LC110
000244b8 l       .rodata	00000000              .LC111
000244c0 l       .rodata	00000000              .LC112
000244d4 l       .rodata	00000000              .LC113
000244e0 l       .rodata	00000000              .LC114
000244f0 l       .rodata	00000000              .LC115
000244fc l       .rodata	00000000              .LC116
0002450c l       .rodata	00000000              .LC117
0002451c l       .rodata	00000000              .LC118
0002452c l       .rodata	00000000              .LC119
0002453c l       .rodata	00000000              .LC120
0002454c l       .rodata	00000000              .LC121
0002455c l       .rodata	00000000              .LC122
00010e3c l     F .text	0000006c              BitOn
00010ea8 l     F .text	00000070              BitOff
00010f18 l     F .text	00000068              BitTest
00024560 l       .rodata	00000000              .LC123
00000000 l    df *ABS*	00000000              Timer.c
0002456c l     O .rodata	00000204              txCounter
0002ff80 l     O .bss	00000020              tllTimer
00024770 l       .rodata	00000000              .LC0
00024780 l       .rodata	00000000              .LC1
00024790 l       .rodata	00000000              .LC2
0002479c l       .rodata	00000000              .LC3
000247b0 l       .rodata	00000000              .LC4
00000000 l    df *ABS*	00000000              iso8583.c
0002f360 l     O .data	00000200              fmt
0002f560 l     O .data	00000200              fmt_Gateway
00000000 l    df *ABS*	00000000              transaction.c
0002ffa0 l     O .bss	00000001              LocationType
0002ffa4 l     O .bss	00000004              thereis_F
000117f0 l     F .text	000000f2              getPanVal
000118e4 l     F .text	0000009e              getAmt
00011984 l     F .text	00000066              getPIN
000247c4 l       .rodata	00000000              .LC0
000119ec l     F .text	0000009a              getPrcCod
00011a88 l     F .text	00000202              getTrack2
00011c8c l     F .text	00000152              getFld
00011ee4 l     F .text	000001fe              appFld
000247cc l       .rodata	00000000              .LC1
000247d4 l       .rodata	00000000              .LC2
00000000 l    df *ABS*	00000000              globals.c
0002ffa8 l     O .bss	00000020              timer
0002ffce l     O .bss	00000001              x.19529
0002ffcc l     O .bss	00000002              x.19533
0002ffc8 l     O .bss	00000004              x.19537
00012544 l     F .text	00000058              getNumLen
00012660 l     F .text	0000013a              chr2nib
0001279c l     F .text	00000048              nib2chr
000247e8 l       .rodata	00000000              .LC2
000247ec l       .rodata	00000000              .LC3
00014740 l     F .text	000000d8              negStr
00014818 l     F .text	00000048              neg2sup
00014860 l     F .text	000000ac              sup2neg
000247f8 l       .rodata	00000000              .LC4
0001490c l     F .text	00000168              addSup
000150d0 l     F .text	0000059e              justdes2
00024a74 l     O .rodata	00000100              s.20196
000157b0 l     F .text	00000084              hashJerkins
000247fc l       .rodata	00000000              .LC1
0002483c l       .rodata	00000000              .LC0
00015dc8 l     F .text	00000060              GetIndex
0002493c l       .rodata	00000000              .LC5
00024964 l       .rodata	00000000              .LC6
00024970 l       .rodata	00000000              .LC7
00015fa8 l     F .text	000000de              date_to_jdn
00016088 l     F .text	00000142              jdn_to_date
0002497c l       .rodata	00000000              .LC8
0001665c l     F .text	00000084              yisleap
000166e0 l     F .text	0000005e              get_yday
00024a0c l     O .rodata	00000068              days.20433
00024998 l       .rodata	00000000              .LC9
000249b4 l       .rodata	00000000              .LC10
000249b8 l       .rodata	00000000              .LC11
000249bc l       .rodata	00000000              .LC12
000249c0 l       .rodata	00000000              .LC13
000249c4 l       .rodata	00000000              .LC14
000249c8 l       .rodata	00000000              .LC15
000249cc l       .rodata	00000000              .LC16
000249d0 l       .rodata	00000000              .LC17
000249d4 l       .rodata	00000000              .LC18
000249d8 l       .rodata	00000000              .LC19
000249dc l       .rodata	00000000              .LC20
000249e0 l       .rodata	00000000              .LC21
00016894 l     F .text	00000130              getMonthName
000249e4 l       .rodata	00000000              .LC22
000249e8 l       .rodata	00000000              .LC23
000249f4 l       .rodata	00000000              .LC24
000249fc l       .rodata	00000000              .LC25
00024a00 l       .rodata	00000000              .LC26
00000000 l    df *ABS*	00000000              magnetic.c
00024b74 l     O .rodata	00000204              txMagnetic
00024d78 l     O .rodata	00000408              txTrack
00025180 l     O .rodata	00000050              xPrinter
000251d0 l       .rodata	00000000              .LC0
000251e0 l       .rodata	00000000              .LC1
000251f0 l       .rodata	00000000              .LC2
000251fc l       .rodata	00000000              .LC3
00025208 l       .rodata	00000000              .LC4
00025218 l       .rodata	00000000              .LC5
0002522c l       .rodata	00000000              .LC6
0002523c l       .rodata	00000000              .LC7
00025244 l       .rodata	00000000              .LC8
00025248 l       .rodata	00000000              .LC9
00025250 l       .rodata	00000000              .LC10
00025258 l       .rodata	00000000              .LC11
00025268 l       .rodata	00000000              .LC12
00025278 l       .rodata	00000000              .LC13
00000000 l    df *ABS*	00000000              schemes.c
0002528c l     O .rodata	00000408              txSec
00025694 l     O .rodata	00000204              txPin
00025898 l     O .rodata	00000158              txResult
000259f0 l     O .rodata	00000050              xPrinter
0002f760 l     O .data	0000000c              tzMenuChoice
00025a88 l       .rodata	00000000              .LC3
00025a90 l       .rodata	00000000              .LC4
00025a98 l       .rodata	00000000              .LC5
00025aa0 l       .rodata	00000000              .LC6
00025aa8 l       .rodata	00000000              .LC7
00025ab0 l       .rodata	00000000              .LC8
00025ab8 l       .rodata	00000000              .LC9
00025ac0 l       .rodata	00000000              .LC10
00025ad0 l       .rodata	00000000              .LC11
00025af8 l       .rodata	00000000              .LC12
00025b0c l       .rodata	00000000              .LC13
00017474 l     F .text	00000302              ChkPpdConfig
00025c2c l       .rodata	00000000              .LC14
00017804 l     F .text	00000082              IsPinOnPpd
00017888 l     F .text	000000d6              AreaId
00025c38 l       .rodata	00000000              .LC15
00025c5c l       .rodata	00000000              .LC16
00025c78 l       .rodata	00000000              .LC17
00017960 l     F .text	0000052c              PinEntry
00025c94 l       .rodata	00000000              .LC18
00025ca0 l       .rodata	00000000              .LC19
00025cac l       .rodata	00000000              .LC20
00025cbc l       .rodata	00000000              .LC21
00025cd0 l       .rodata	00000000              .LC22
00025cd8 l       .rodata	00000000              .LC23
00025cf8 l       .rodata	00000000              .LC24
00025d08 l       .rodata	00000000              .LC25
00025d1c l       .rodata	00000000              .LC26
00025d30 l       .rodata	00000000              .LC27
00025d4c l       .rodata	00000000              .LC28
00025d78 l       .rodata	00000000              .LC29
00025d88 l       .rodata	00000000              .LC30
00025d98 l       .rodata	00000000              .LC31
00025da8 l       .rodata	00000000              .LC32
00025db0 l       .rodata	00000000              .LC33
00025dbc l       .rodata	00000000              .LC34
00025dd0 l       .rodata	00000000              .LC35
00025de8 l       .rodata	00000000              .LC36
00025e00 l       .rodata	00000000              .LC37
00025e04 l       .rodata	00000000              .LC38
00025e1c l       .rodata	00000000              .LC39
00025e30 l       .rodata	00000000              .LC40
00025e48 l       .rodata	00000000              .LC41
00025e6c l       .rodata	00000000              .LC42
00025e98 l       .rodata	00000000              .LC43
00025eac l       .rodata	00000000              .LC44
00025ec0 l       .rodata	00000000              .LC45
00025ec4 l       .rodata	00000000              .LC46
00025ecc l       .rodata	00000000              .LC47
00025ed4 l       .rodata	00000000              .LC48
00025ee4 l       .rodata	00000000              .LC49
00025f0c l       .rodata	00000000              .LC50
00025f24 l       .rodata	00000000              .LC51
00025f3c l       .rodata	00000000              .LC52
00025f68 l       .rodata	00000000              .LC53
00019034 l     F .text	0000006c              Iso9564PinCiphering
00025f94 l       .rodata	00000000              .LC54
00025fa8 l       .rodata	00000000              .LC55
00025fb0 l       .rodata	00000000              .LC56
00025fc4 l       .rodata	00000000              .LC57
00025fd8 l       .rodata	00000000              .LC58
00025fe4 l       .rodata	00000000              .LC59
00025ff8 l       .rodata	00000000              .LC60
00026000 l       .rodata	00000000              .LC61
00026010 l       .rodata	00000000              .LC62
00026034 l       .rodata	00000000              .LC63
00026058 l       .rodata	00000000              .LC64
00026064 l       .rodata	00000000              .LC65
0002606c l       .rodata	00000000              .LC66
0002607c l       .rodata	00000000              .LC67
0002608c l       .rodata	00000000              .LC68
00026098 l       .rodata	00000000              .LC69
000260f0 l       .rodata	00000000              .LC70
00026114 l       .rodata	00000000              .LC71
00026128 l       .rodata	00000000              .LC0
00000000 l    df *ABS*	00000000              VGE_FMG.c
0002ffd0 l     O .bss	00000011              g_acDisKLabel
00000000 l    df *ABS*	00000000              md5.c
0001e28c l     F .text	00000d60              md5_process
000261ec l     O .rodata	00000004              w.5151
000261ac l     O .rodata	00000040              pad.5177
00000001 l       *ABS*	00000000              __TELIUM3__
0002f780 l       .data	00000000              gprs_GetInformation_Callback
0001f248 l     F .text	00000000              gprs_GetInformation_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f790 l       .data	00000000              gprs_SetPinModeFree_Callback
0001f26c l     F .text	00000000              gprs_SetPinModeFree_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f7a0 l       .data	00000000              gprs_SubmitPuk_Callback
0001f290 l     F .text	00000000              gprs_SubmitPuk_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002ffe4 l     O .bss	00000004              LIBGPRS_Dll
0002ffe8 l     O .bss	00000004              LIBGPRS_present
00000001 l       *ABS*	00000000              __TELIUM3__
0002f7b0 l       .data	00000000              LL_ClearReceiveBuffer_Callback
0001f35c l     F .text	00000000              LL_ClearReceiveBuffer_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f7c0 l       .data	00000000              LL_ClearSendBuffer_Callback
0001f380 l     F .text	00000000              LL_ClearSendBuffer_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f7d0 l       .data	00000000              LL_Configure_Callback
0001f3a4 l     F .text	00000000              LL_Configure_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f7e0 l       .data	00000000              LL_Connect_Callback
0001f3c8 l     F .text	00000000              LL_Connect_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f7f0 l       .data	00000000              LL_Disconnect_Callback
0001f3ec l     F .text	00000000              LL_Disconnect_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f800 l       .data	00000000              LL_GetLastError_Callback
0001f410 l     F .text	00000000              LL_GetLastError_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f810 l       .data	00000000              LL_GPRS_Connect_Callback
0001f434 l     F .text	00000000              LL_GPRS_Connect_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f820 l       .data	00000000              LL_GPRS_Start_Callback
0001f458 l     F .text	00000000              LL_GPRS_Start_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f830 l       .data	00000000              LL_GSM_Start_Callback
0001f47c l     F .text	00000000              LL_GSM_Start_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f840 l       .data	00000000              LL_Network_GetStatus_Callback
0001f4a0 l     F .text	00000000              LL_Network_GetStatus_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f850 l       .data	00000000              LL_Receive_Callback
0001f4c4 l     F .text	00000000              LL_Receive_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f860 l       .data	00000000              LL_Send_Callback
0001f4e8 l     F .text	00000000              LL_Send_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002ffec l     O .bss	00000004              LINKLAYER_Dll
0002fff0 l     O .bss	00000004              LINKLAYER_present
00000001 l       *ABS*	00000000              __TELIUM3__
0002f870 l       .data	00000000              TlvTree_AddChild_Callback
0001f5b4 l     F .text	00000000              TlvTree_AddChild_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f880 l       .data	00000000              TlvTree_AddChildInteger_Callback
0001f5d8 l     F .text	00000000              TlvTree_AddChildInteger_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f890 l       .data	00000000              TlvTree_AddChildString_Callback
0001f5fc l     F .text	00000000              TlvTree_AddChildString_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f8a0 l       .data	00000000              TlvTree_New_Callback
0001f620 l     F .text	00000000              TlvTree_New_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f8b0 l       .data	00000000              TlvTree_Release_Callback
0001f644 l     F .text	00000000              TlvTree_Release_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fff4 l     O .bss	00000004              TLV_TREE_DLL_Dll
0002fff8 l     O .bss	00000004              TLV_TREE_DLL_present
0002f8c0 l       .data	00000004              function_var
0001f710 l       .text	00000009              function_name
0001f75c l       .text	00000000              .direct_call
0001f748 l       .text	00000000              .bad_return
0001f75a l       .text	00000000              .call_function
0001f742 l       .text	00000000              .exit_return
0001f752 l       .text	00000000              .already_initialized
0002f8c4 l       .data	00000004              function_var
0001f770 l       .text	00000009              function_name
0001f7bc l       .text	00000000              .direct_call
0001f7a8 l       .text	00000000              .bad_return
0001f7ba l       .text	00000000              .call_function
0001f7a2 l       .text	00000000              .exit_return
0001f7b2 l       .text	00000000              .already_initialized
0002f8c8 l       .data	00000004              function_var
0001f7d0 l       .text	00000008              function_name
0001f818 l       .text	00000000              .direct_call
0001f804 l       .text	00000000              .bad_return
0001f816 l       .text	00000000              .call_function
0001f7fe l       .text	00000000              .exit_return
0001f80e l       .text	00000000              .already_initialized
00000000 l    df *ABS*	00000000              extenstp1.c
0002f8cc l       .data	00000004              function_var
0001f8a8 l       .text	0000000e              function_name
0001f8f8 l       .text	00000000              .direct_call
0001f8e4 l       .text	00000000              .bad_return
0001f8f6 l       .text	00000000              .call_function
0001f8de l       .text	00000000              .exit_return
0001f8ee l       .text	00000000              .already_initialized
0002f8d0 l       .data	00000004              function_var
0001f90c l       .text	0000000d              function_name
0001f95c l       .text	00000000              .direct_call
0001f948 l       .text	00000000              .bad_return
0001f95a l       .text	00000000              .call_function
0001f942 l       .text	00000000              .exit_return
0001f952 l       .text	00000000              .already_initialized
0002f8d4 l       .data	00000004              function_var
0001f970 l       .text	0000000c              function_name
0001f9bc l       .text	00000000              .direct_call
0001f9a8 l       .text	00000000              .bad_return
0001f9ba l       .text	00000000              .call_function
0001f9a2 l       .text	00000000              .exit_return
0001f9b2 l       .text	00000000              .already_initialized
0002f8d8 l       .data	00000004              function_var
0001f9d0 l       .text	0000000f              function_name
0001fa20 l       .text	00000000              .direct_call
0001fa0c l       .text	00000000              .bad_return
0001fa1e l       .text	00000000              .call_function
0001fa06 l       .text	00000000              .exit_return
0001fa16 l       .text	00000000              .already_initialized
0002f8dc l       .data	00000004              function_var
0001fa34 l       .text	0000000f              function_name
0001fa84 l       .text	00000000              .direct_call
0001fa70 l       .text	00000000              .bad_return
0001fa82 l       .text	00000000              .call_function
0001fa6a l       .text	00000000              .exit_return
0001fa7a l       .text	00000000              .already_initialized
0002f8e0 l       .data	00000004              function_var
0001fa98 l       .text	0000000f              function_name
0001fae8 l       .text	00000000              .direct_call
0001fad4 l       .text	00000000              .bad_return
0001fae6 l       .text	00000000              .call_function
0001face l       .text	00000000              .exit_return
0001fade l       .text	00000000              .already_initialized
0002f8e4 l       .data	00000004              function_var
0001fafc l       .text	00000011              function_name
0001fb4a l       .text	00000000              .direct_call
0001fb36 l       .text	00000000              .bad_return
0001fb48 l       .text	00000000              .call_function
0001fb40 l       .text	00000000              .already_initialized
0002f8e8 l       .data	00000004              function_var
0001fb5c l       .text	0000000e              function_name
0001fbaa l       .text	00000000              .direct_call
0001fb98 l       .text	00000000              .bad_return
0001fba8 l       .text	00000000              .call_function
0001fb92 l       .text	00000000              .exit_return
0001fba0 l       .text	00000000              .already_initialized
0002f8ec l       .data	00000004              function_var
0001fbbc l       .text	0000000d              function_name
0001fc0c l       .text	00000000              .direct_call
0001fbf8 l       .text	00000000              .bad_return
0001fc0a l       .text	00000000              .call_function
0001fbf2 l       .text	00000000              .exit_return
0001fc02 l       .text	00000000              .already_initialized
0002f8f0 l       .data	00000004              function_var
0001fc20 l       .text	0000000e              function_name
0001fc70 l       .text	00000000              .direct_call
0001fc5c l       .text	00000000              .bad_return
0001fc6e l       .text	00000000              .call_function
0001fc56 l       .text	00000000              .exit_return
0001fc66 l       .text	00000000              .already_initialized
0002f8f4 l       .data	00000004              function_var
0001fc84 l       .text	00000010              function_name
0001fcd4 l       .text	00000000              .direct_call
0001fcc0 l       .text	00000000              .bad_return
0001fcd2 l       .text	00000000              .call_function
0001fcba l       .text	00000000              .exit_return
0001fcca l       .text	00000000              .already_initialized
0002f8f8 l       .data	00000004              function_var
0001fce8 l       .text	00000010              function_name
0001fd38 l       .text	00000000              .direct_call
0001fd24 l       .text	00000000              .bad_return
0001fd36 l       .text	00000000              .call_function
0001fd1e l       .text	00000000              .exit_return
0001fd2e l       .text	00000000              .already_initialized
0002f8fc l       .data	00000004              function_var
0001fd4c l       .text	00000007              function_name
0001fd8c l       .text	00000000              .direct_call
0001fd7a l       .text	00000000              .bad_return
0001fd8a l       .text	00000000              .call_function
0001fd82 l       .text	00000000              .already_initialized
0002f900 l       .data	00000004              function_var
0001fd9c l       .text	00000013              function_name
0001fdee l       .text	00000000              .direct_call
0001fddc l       .text	00000000              .bad_return
0001fdec l       .text	00000000              .call_function
0001fdd6 l       .text	00000000              .exit_return
0001fde4 l       .text	00000000              .already_initialized
0002f904 l       .data	00000004              function_var
0001fe00 l       .text	00000016              function_name
0001fe4a l       .text	00000000              .direct_call
0001fe3e l       .text	00000000              .bad_return
0001fe48 l       .text	00000000              .call_function
0001fe40 l       .text	00000000              .already_initialized
0002f908 l       .data	00000004              function_var
0001fe5c l       .text	0000000e              function_name
0001fea4 l       .text	00000000              .direct_call
0001fe92 l       .text	00000000              .bad_return
0001fea2 l       .text	00000000              .call_function
0001fe9a l       .text	00000000              .already_initialized
0002f90c l       .data	00000004              function_var
0001feb4 l       .text	00000014              function_name
0001ff06 l       .text	00000000              .direct_call
0001fef4 l       .text	00000000              .bad_return
0001ff04 l       .text	00000000              .call_function
0001feee l       .text	00000000              .exit_return
0001fefc l       .text	00000000              .already_initialized
00000000 l    df *ABS*	00000000              libgrtp1.c
0002f910 l       .data	00000004              function_var
0001ff94 l       .text	0000000f              function_name
0001ffe4 l       .text	00000000              .direct_call
0001ffd0 l       .text	00000000              .bad_return
0001ffe2 l       .text	00000000              .call_function
0001ffca l       .text	00000000              .exit_return
0001ffda l       .text	00000000              .already_initialized
0002f914 l       .data	00000004              function_var
0001fff8 l       .text	00000017              function_name
00020050 l       .text	00000000              .direct_call
0002003c l       .text	00000000              .bad_return
0002004e l       .text	00000000              .call_function
00020036 l       .text	00000000              .exit_return
00020046 l       .text	00000000              .already_initialized
00000000 l    df *ABS*	00000000              paramtp1.c
0002f918 l       .data	00000004              function_var
000200e0 l       .text	0000000f              function_name
00020130 l       .text	00000000              .direct_call
0002011c l       .text	00000000              .bad_return
0002012e l       .text	00000000              .call_function
00020116 l       .text	00000000              .exit_return
00020126 l       .text	00000000              .already_initialized
0002f91c l       .data	00000004              function_var
00020144 l       .text	0000001e              function_name
000201a4 l       .text	00000000              .direct_call
00020190 l       .text	00000000              .bad_return
000201a2 l       .text	00000000              .call_function
0002018a l       .text	00000000              .exit_return
0002019a l       .text	00000000              .already_initialized
0002f920 l       .data	00000004              function_var
000201b8 l       .text	0000000e              function_name
00020206 l       .text	00000000              .direct_call
000201f4 l       .text	00000000              .bad_return
00020204 l       .text	00000000              .call_function
000201ee l       .text	00000000              .exit_return
000201fc l       .text	00000000              .already_initialized
0002f924 l       .data	00000004              function_var
00020218 l       .text	0000000c              function_name
00020262 l       .text	00000000              .direct_call
00020250 l       .text	00000000              .bad_return
00020260 l       .text	00000000              .call_function
0002024a l       .text	00000000              .exit_return
00020258 l       .text	00000000              .already_initialized
00000000 l    df *ABS*	00000000              pinpadtp1.c
0002f928 l       .data	00000004              function_var
000202f0 l       .text	0000000c              function_name
0002033c l       .text	00000000              .direct_call
00020328 l       .text	00000000              .bad_return
0002033a l       .text	00000000              .call_function
00020322 l       .text	00000000              .exit_return
00020332 l       .text	00000000              .already_initialized
0002f92c l       .data	00000004              function_var
00020350 l       .text	00000011              function_name
0002039e l       .text	00000000              .direct_call
0002038a l       .text	00000000              .bad_return
0002039c l       .text	00000000              .call_function
00020394 l       .text	00000000              .already_initialized
0002f930 l       .data	00000004              function_var
000203b0 l       .text	0000000c              function_name
000203fc l       .text	00000000              .direct_call
000203e8 l       .text	00000000              .bad_return
000203fa l       .text	00000000              .call_function
000203e2 l       .text	00000000              .exit_return
000203f2 l       .text	00000000              .already_initialized
0002f934 l       .data	00000004              function_var
00020410 l       .text	0000000f              function_name
00020460 l       .text	00000000              .direct_call
0002044c l       .text	00000000              .bad_return
0002045e l       .text	00000000              .call_function
00020446 l       .text	00000000              .exit_return
00020456 l       .text	00000000              .already_initialized
0002f938 l       .data	00000004              function_var
00020474 l       .text	00000007              function_name
000204bc l       .text	00000000              .direct_call
000204a8 l       .text	00000000              .bad_return
000204ba l       .text	00000000              .call_function
000204a2 l       .text	00000000              .exit_return
000204b2 l       .text	00000000              .already_initialized
0002f93c l       .data	00000004              function_var
000204d0 l       .text	00000007              function_name
00020518 l       .text	00000000              .direct_call
00020504 l       .text	00000000              .bad_return
00020516 l       .text	00000000              .call_function
000204fe l       .text	00000000              .exit_return
0002050e l       .text	00000000              .already_initialized
0002f940 l       .data	00000004              function_var
0002052c l       .text	00000007              function_name
00020574 l       .text	00000000              .direct_call
00020560 l       .text	00000000              .bad_return
00020572 l       .text	00000000              .call_function
0002055a l       .text	00000000              .exit_return
0002056a l       .text	00000000              .already_initialized
0002f944 l       .data	00000004              function_var
00020588 l       .text	0000000a              function_name
000205d4 l       .text	00000000              .direct_call
000205c0 l       .text	00000000              .bad_return
000205d2 l       .text	00000000              .call_function
000205ba l       .text	00000000              .exit_return
000205ca l       .text	00000000              .already_initialized
0002f948 l       .data	00000004              function_var
000205e8 l       .text	00000017              function_name
0002063a l       .text	00000000              .direct_call
00020626 l       .text	00000000              .bad_return
00020638 l       .text	00000000              .call_function
00020630 l       .text	00000000              .already_initialized
00000000 l    df *ABS*	00000000              Telium_Pprintf.c
00000000 l    df *ABS*	00000000              Telium_Printf.c
0002069c l       .text	00000008              periph_name
00000000 l    df *ABS*	00000000              Telium_Sprintf.c
0002f94c l       .data	00000004              function_var
000206dc l       .text	00000016              function_name
0002072e l       .text	00000000              .direct_call
0002071a l       .text	00000000              .bad_return
0002072c l       .text	00000000              .call_function
00020724 l       .text	00000000              .already_initialized
0002f950 l       .data	00000004              function_var
00020740 l       .text	00000009              function_name
00020786 l       .text	00000000              .direct_call
00020772 l       .text	00000000              .bad_return
00020784 l       .text	00000000              .call_function
0002077c l       .text	00000000              .already_initialized
0002f954 l       .data	00000004              function_var
00020798 l       .text	0000000d              function_name
000207e2 l       .text	00000000              .direct_call
000207ce l       .text	00000000              .bad_return
000207e0 l       .text	00000000              .call_function
000207d8 l       .text	00000000              .already_initialized
0002f958 l       .data	00000004              function_var
000207f4 l       .text	00000009              function_name
0002083a l       .text	00000000              .direct_call
00020826 l       .text	00000000              .bad_return
00020838 l       .text	00000000              .call_function
00020830 l       .text	00000000              .already_initialized
0002f95c l       .data	00000004              function_var
0002084c l       .text	0000000a              function_name
00020892 l       .text	00000000              .direct_call
0002087e l       .text	00000000              .bad_return
00020890 l       .text	00000000              .call_function
00020888 l       .text	00000000              .already_initialized
0002f960 l       .data	00000004              function_var
000208a4 l       .text	00000009              function_name
000208ea l       .text	00000000              .direct_call
000208d6 l       .text	00000000              .bad_return
000208e8 l       .text	00000000              .call_function
000208e0 l       .text	00000000              .already_initialized
0002f964 l       .data	00000004              function_var
000208fc l       .text	00000008              function_name
0002093e l       .text	00000000              .direct_call
0002092a l       .text	00000000              .bad_return
0002093c l       .text	00000000              .call_function
00020934 l       .text	00000000              .already_initialized
0002f968 l       .data	00000004              function_var
00020950 l       .text	00000008              function_name
00020992 l       .text	00000000              .direct_call
0002097e l       .text	00000000              .bad_return
00020990 l       .text	00000000              .call_function
00020988 l       .text	00000000              .already_initialized
0002f96c l       .data	00000004              function_var
000209a4 l       .text	0000000a              function_name
000209ea l       .text	00000000              .direct_call
000209d6 l       .text	00000000              .bad_return
000209e8 l       .text	00000000              .call_function
000209e0 l       .text	00000000              .already_initialized
0002f970 l       .data	00000004              function_var
000209fc l       .text	00000008              function_name
00020a3e l       .text	00000000              .direct_call
00020a2a l       .text	00000000              .bad_return
00020a3c l       .text	00000000              .call_function
00020a34 l       .text	00000000              .already_initialized
0002f974 l       .data	00000004              function_var
00020a4c l       .text	0000000a              function_name
00020a92 l       .text	00000000              .direct_call
00020a7e l       .text	00000000              .bad_return
00020a90 l       .text	00000000              .call_function
00020a88 l       .text	00000000              .already_initialized
0002f978 l       .data	00000004              function_var
00020aa4 l       .text	0000000b              function_name
00020aea l       .text	00000000              .direct_call
00020ad6 l       .text	00000000              .bad_return
00020ae8 l       .text	00000000              .call_function
00020ae0 l       .text	00000000              .already_initialized
0002f97c l       .data	00000004              function_var
00020afc l       .text	00000009              function_name
00020b42 l       .text	00000000              .direct_call
00020b2e l       .text	00000000              .bad_return
00020b40 l       .text	00000000              .call_function
00020b38 l       .text	00000000              .already_initialized
0002f980 l       .data	00000004              function_var
00020b54 l       .text	00000014              function_name
00020ba2 l       .text	00000000              .direct_call
00020b8e l       .text	00000000              .bad_return
00020ba0 l       .text	00000000              .call_function
00020b98 l       .text	00000000              .already_initialized
0002f984 l       .data	00000004              function_var
00020bb4 l       .text	0000000e              function_name
00020bfe l       .text	00000000              .direct_call
00020bea l       .text	00000000              .bad_return
00020bfc l       .text	00000000              .call_function
00020bf4 l       .text	00000000              .already_initialized
0002f988 l       .data	00000004              function_var
00020c10 l       .text	0000000a              function_name
00020c56 l       .text	00000000              .direct_call
00020c42 l       .text	00000000              .bad_return
00020c54 l       .text	00000000              .call_function
00020c4c l       .text	00000000              .already_initialized
0002f98c l       .data	00000004              function_var
00020c64 l       .text	00000009              function_name
00020caa l       .text	00000000              .direct_call
00020c96 l       .text	00000000              .bad_return
00020ca8 l       .text	00000000              .call_function
00020ca0 l       .text	00000000              .already_initialized
0002f990 l       .data	00000004              function_var
00020cbc l       .text	0000000b              function_name
00020d02 l       .text	00000000              .direct_call
00020cee l       .text	00000000              .bad_return
00020d00 l       .text	00000000              .call_function
00020cf8 l       .text	00000000              .already_initialized
0002f994 l       .data	00000004              function_var
00020d14 l       .text	00000009              function_name
00020d5a l       .text	00000000              .direct_call
00020d46 l       .text	00000000              .bad_return
00020d58 l       .text	00000000              .call_function
00020d50 l       .text	00000000              .already_initialized
0002f998 l       .data	00000004              function_var
00020d6c l       .text	00000012              function_name
00020dba l       .text	00000000              .direct_call
00020da6 l       .text	00000000              .bad_return
00020db8 l       .text	00000000              .call_function
00020db0 l       .text	00000000              .already_initialized
0002f99c l       .data	00000004              function_var
00020dcc l       .text	00000012              function_name
00020e1a l       .text	00000000              .direct_call
00020e06 l       .text	00000000              .bad_return
00020e18 l       .text	00000000              .call_function
00020e10 l       .text	00000000              .already_initialized
0002f9a0 l       .data	00000004              function_var
00020e2c l       .text	00000010              function_name
00020e76 l       .text	00000000              .direct_call
00020e62 l       .text	00000000              .bad_return
00020e74 l       .text	00000000              .call_function
00020e6c l       .text	00000000              .already_initialized
0002f9a4 l       .data	00000004              function_var
00020e88 l       .text	0000000d              function_name
00020ed2 l       .text	00000000              .direct_call
00020ebe l       .text	00000000              .bad_return
00020ed0 l       .text	00000000              .call_function
00020ec8 l       .text	00000000              .already_initialized
0002f9a8 l       .data	00000004              function_var
00020ee4 l       .text	00000016              function_name
00020f36 l       .text	00000000              .direct_call
00020f22 l       .text	00000000              .bad_return
00020f34 l       .text	00000000              .call_function
00020f2c l       .text	00000000              .already_initialized
0002f9ac l       .data	00000004              function_var
00020f48 l       .text	00000010              function_name
00020f92 l       .text	00000000              .direct_call
00020f7e l       .text	00000000              .bad_return
00020f90 l       .text	00000000              .call_function
00020f88 l       .text	00000000              .already_initialized
0002f9b0 l       .data	00000004              function_var
00020fa4 l       .text	0000001a              function_name
00020ffa l       .text	00000000              .direct_call
00020fe6 l       .text	00000000              .bad_return
00020ff8 l       .text	00000000              .call_function
00020ff0 l       .text	00000000              .already_initialized
00000000 l    df *ABS*	00000000              emulationtp1.c
0002f9b4 l       .data	00000004              function_var
0002107c l       .text	00000019              function_name
000210d8 l       .text	00000000              .direct_call
000210c4 l       .text	00000000              .bad_return
000210d6 l       .text	00000000              .call_function
000210be l       .text	00000000              .exit_return
000210ce l       .text	00000000              .already_initialized
00000000 l    df *ABS*	00000000              extensttrois9.c
00030024 l     O .bss	00000004              _Telium_VfprintfAddress
00000000 l    df *ABS*	00000000              toolstp1.c
00000000 l    df *ABS*	00000000              wrappertp1.c
00000001 l       *ABS*	00000000              __TELIUM3__
0002f9c0 l       .data	00000000              SEC_ComputeMAC_Callback
00021228 l     F .text	00000000              SEC_ComputeMAC_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f9d0 l       .data	00000000              SEC_GetConfig_Callback
0002124c l     F .text	00000000              SEC_GetConfig_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f9e0 l       .data	00000000              SEC_Iso9564_Callback
00021270 l     F .text	00000000              SEC_Iso9564_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f9f0 l       .data	00000000              SEC_isSecretArea_Callback
00021294 l     F .text	00000000              SEC_isSecretArea_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fa00 l       .data	00000000              SEC_KeyVerify_Callback
000212b8 l     F .text	00000000              SEC_KeyVerify_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fa10 l       .data	00000000              SEC_listSecureId_Callback
000212dc l     F .text	00000000              SEC_listSecureId_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fa20 l       .data	00000000              SEC_listTLVKeys_Callback
00021300 l     F .text	00000000              SEC_listTLVKeys_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fa30 l       .data	00000000              SEC_LoadKey_Callback
00021324 l     F .text	00000000              SEC_LoadKey_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fa40 l       .data	00000000              SEC_PinEntry_Callback
00021348 l     F .text	00000000              SEC_PinEntry_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fa50 l       .data	00000000              SEC_PinEntryInit_Callback
0002136c l     F .text	00000000              SEC_PinEntryInit_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fa60 l       .data	00000000              SEC_SetConfig_Callback
00021390 l     F .text	00000000              SEC_SetConfig_Init
00030038 l     O .bss	00000004              hSecDLL
00000001 l       *ABS*	00000000              __TELIUM3__
0003003c l     O .bss	00000004              LIBSECV2_Dll
00030040 l     O .bss	00000004              LIBSECV2_present
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Button_Create_FallBack_Present
0002fa70 l       .data	00000000              GL_Button_Create_Callback
000214ac l     F .text	00000000              GL_Button_Create_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Dialog_Choice_FallBack_Present
0002fa80 l       .data	00000000              GL_Dialog_Choice_Callback
000214d0 l     F .text	00000000              GL_Dialog_Choice_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Dialog_Menu_FallBack_Present
0002fa90 l       .data	00000000              GL_Dialog_Menu_Callback
000214f4 l     F .text	00000000              GL_Dialog_Menu_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Dialog_Message_FallBack_Present
0002faa0 l       .data	00000000              GL_Dialog_Message_Callback
00021518 l     F .text	00000000              GL_Dialog_Message_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Dialog_Password_FallBack_Present
0002fab0 l       .data	00000000              GL_Dialog_Password_Callback
0002153c l     F .text	00000000              GL_Dialog_Password_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Dialog_Progress_FallBack_Present
0002fac0 l       .data	00000000              GL_Dialog_Progress_Callback
00021560 l     F .text	00000000              GL_Dialog_Progress_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Dialog_Text_FallBack_Present
0002fad0 l       .data	00000000              GL_Dialog_Text_Callback
00021584 l     F .text	00000000              GL_Dialog_Text_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Dialog_VirtualKeyboard_FallBack_Present
0002fae0 l       .data	00000000              GL_Dialog_VirtualKeyboard_Callback
000215a8 l     F .text	00000000              GL_Dialog_VirtualKeyboard_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Document_Create_FallBack_Present
0002faf0 l       .data	00000000              GL_Document_Create_Callback
000215cc l     F .text	00000000              GL_Document_Create_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Document_Print_FallBack_Present
0002fb00 l       .data	00000000              GL_Document_Print_Callback
000215f0 l     F .text	00000000              GL_Document_Print_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Drawing_Clear_FallBack_Present
0002fb10 l       .data	00000000              GL_Drawing_Clear_Callback
00021614 l     F .text	00000000              GL_Drawing_Clear_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Drawing_Create_FallBack_Present
0002fb20 l       .data	00000000              GL_Drawing_Create_Callback
00021638 l     F .text	00000000              GL_Drawing_Create_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Drawing_DrawEllipse_FallBack_Present
0002fb30 l       .data	00000000              GL_Drawing_DrawEllipse_Callback
0002165c l     F .text	00000000              GL_Drawing_DrawEllipse_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Drawing_DrawLine_FallBack_Present
0002fb40 l       .data	00000000              GL_Drawing_DrawLine_Callback
00021680 l     F .text	00000000              GL_Drawing_DrawLine_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Drawing_DrawRect_FallBack_Present
0002fb50 l       .data	00000000              GL_Drawing_DrawRect_Callback
000216a4 l     F .text	00000000              GL_Drawing_DrawRect_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Drawing_DrawText_FallBack_Present
0002fb60 l       .data	00000000              GL_Drawing_DrawText_Callback
000216c8 l     F .text	00000000              GL_Drawing_DrawText_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Drawing_SetBrush_FallBack_Present
0002fb70 l       .data	00000000              GL_Drawing_SetBrush_Callback
000216ec l     F .text	00000000              GL_Drawing_SetBrush_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Drawing_SetFont_FallBack_Present
0002fb80 l       .data	00000000              GL_Drawing_SetFont_Callback
00021710 l     F .text	00000000              GL_Drawing_SetFont_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Drawing_SetPen_FallBack_Present
0002fb90 l       .data	00000000              GL_Drawing_SetPen_Callback
00021734 l     F .text	00000000              GL_Drawing_SetPen_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_GraphicLib_BindSingleKey_FallBack_Present
0002fba0 l       .data	00000000              GL_GraphicLib_BindSingleKey_Callback
00021758 l     F .text	00000000              GL_GraphicLib_BindSingleKey_Init
00030044 l     O .bss	00000004              setStubVersion.5010
0002fbb0 l     O .data	00000004              GL_callback
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_GraphicLib_IsTouchPresent_FallBack_Present
0002fbc0 l       .data	00000000              GL_GraphicLib_IsTouchPresent_Callback
000217fc l     F .text	00000000              GL_GraphicLib_IsTouchPresent_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_GraphicLib_SetCharset_FallBack_Present
0002fbd0 l       .data	00000000              GL_GraphicLib_SetCharset_Callback
00021820 l     F .text	00000000              GL_GraphicLib_SetCharset_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_GraphicLib_UnbindKey_FallBack_Present
0002fbe0 l       .data	00000000              GL_GraphicLib_UnbindKey_Callback
00021844 l     F .text	00000000              GL_GraphicLib_UnbindKey_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Label_Create_FallBack_Present
0002fbf0 l       .data	00000000              GL_Label_Create_Callback
00021868 l     F .text	00000000              GL_Label_Create_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Layout_Create_FallBack_Present
0002fc00 l       .data	00000000              GL_Layout_Create_Callback
0002188c l     F .text	00000000              GL_Layout_Create_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Message_GetKey_FallBack_Present
0002fc10 l       .data	00000000              GL_Message_GetKey_Callback
000218b0 l     F .text	00000000              GL_Message_GetKey_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Message_GetWidget_FallBack_Present
0002fc20 l       .data	00000000              GL_Message_GetWidget_Callback
000218d4 l     F .text	00000000              GL_Message_GetWidget_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Message_SetResult_FallBack_Present
0002fc30 l       .data	00000000              GL_Message_SetResult_Callback
000218f8 l     F .text	00000000              GL_Message_SetResult_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Message_SetUserData_FallBack_Present
0002fc40 l       .data	00000000              GL_Message_SetUserData_Callback
0002191c l     F .text	00000000              GL_Message_SetUserData_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Picture_Create_FallBack_Present
0002fc50 l       .data	00000000              GL_Picture_Create_Callback
00021940 l     F .text	00000000              GL_Picture_Create_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Print_Create_FallBack_Present
0002fc60 l       .data	00000000              GL_Print_Create_Callback
00021964 l     F .text	00000000              GL_Print_Create_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Timer_Create_FallBack_Present
0002fc70 l       .data	00000000              GL_Timer_Create_Callback
00021988 l     F .text	00000000              GL_Timer_Create_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Timer_SetInterval_FallBack_Present
0002fc80 l       .data	00000000              GL_Timer_SetInterval_Callback
000219ac l     F .text	00000000              GL_Timer_SetInterval_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Timer_Stop_FallBack_Present
0002fc90 l       .data	00000000              GL_Timer_Stop_Callback
000219d0 l     F .text	00000000              GL_Timer_Stop_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_Destroy_FallBack_Present
0002fca0 l       .data	00000000              GL_Widget_Destroy_Callback
000219f4 l     F .text	00000000              GL_Widget_Destroy_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_GetUserData_FallBack_Present
0002fcb0 l       .data	00000000              GL_Widget_GetUserData_Callback
00021a18 l     F .text	00000000              GL_Widget_GetUserData_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_RegisterCallback_FallBack_Present
0002fcc0 l       .data	00000000              GL_Widget_RegisterCallback_Callback
00021a3c l     F .text	00000000              GL_Widget_RegisterCallback_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SearchId_FallBack_Present
0002fcd0 l       .data	00000000              GL_Widget_SearchId_Callback
00021a60 l     F .text	00000000              GL_Widget_SearchId_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetBackAlign_FallBack_Present
0002fce0 l       .data	00000000              GL_Widget_SetBackAlign_Callback
00021a84 l     F .text	00000000              GL_Widget_SetBackAlign_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetBackColor_FallBack_Present
0002fcf0 l       .data	00000000              GL_Widget_SetBackColor_Callback
00021aa8 l     F .text	00000000              GL_Widget_SetBackColor_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetBorders_FallBack_Present
0002fd00 l       .data	00000000              GL_Widget_SetBorders_Callback
00021acc l     F .text	00000000              GL_Widget_SetBorders_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetExpand_FallBack_Present
0002fd10 l       .data	00000000              GL_Widget_SetExpand_Callback
00021af0 l     F .text	00000000              GL_Widget_SetExpand_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetFocusable_FallBack_Present
0002fd20 l       .data	00000000              GL_Widget_SetFocusable_Callback
00021b14 l     F .text	00000000              GL_Widget_SetFocusable_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetFontName_FallBack_Present
0002fd30 l       .data	00000000              GL_Widget_SetFontName_Callback
00021b38 l     F .text	00000000              GL_Widget_SetFontName_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetFontScale_FallBack_Present
0002fd40 l       .data	00000000              GL_Widget_SetFontScale_Callback
00021b5c l     F .text	00000000              GL_Widget_SetFontScale_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetFontStyle_FallBack_Present
0002fd50 l       .data	00000000              GL_Widget_SetFontStyle_Callback
00021b80 l     F .text	00000000              GL_Widget_SetFontStyle_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetForeColor_FallBack_Present
0002fd60 l       .data	00000000              GL_Widget_SetForeColor_Callback
00021ba4 l     F .text	00000000              GL_Widget_SetForeColor_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetGrow_FallBack_Present
0002fd70 l       .data	00000000              GL_Widget_SetGrow_Callback
00021bc8 l     F .text	00000000              GL_Widget_SetGrow_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetId_FallBack_Present
0002fd80 l       .data	00000000              GL_Widget_SetId_Callback
00021bec l     F .text	00000000              GL_Widget_SetId_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetItem_FallBack_Present
0002fd90 l       .data	00000000              GL_Widget_SetItem_Callback
00021c10 l     F .text	00000000              GL_Widget_SetItem_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetMargins_FallBack_Present
0002fda0 l       .data	00000000              GL_Widget_SetMargins_Callback
00021c34 l     F .text	00000000              GL_Widget_SetMargins_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetMinSize_FallBack_Present
0002fdb0 l       .data	00000000              GL_Widget_SetMinSize_Callback
00021c58 l     F .text	00000000              GL_Widget_SetMinSize_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetShortcut_FallBack_Present
0002fdc0 l       .data	00000000              GL_Widget_SetShortcut_Callback
00021c7c l     F .text	00000000              GL_Widget_SetShortcut_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetShrink_FallBack_Present
0002fdd0 l       .data	00000000              GL_Widget_SetShrink_Callback
00021ca0 l     F .text	00000000              GL_Widget_SetShrink_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetSize_FallBack_Present
0002fde0 l       .data	00000000              GL_Widget_SetSize_Callback
00021cc4 l     F .text	00000000              GL_Widget_SetSize_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetSource_FallBack_Present
0002fdf0 l       .data	00000000              GL_Widget_SetSource_Callback
00021ce8 l     F .text	00000000              GL_Widget_SetSource_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetText_FallBack_Present
0002fe00 l       .data	00000000              GL_Widget_SetText_Callback
00021d0c l     F .text	00000000              GL_Widget_SetText_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetTextAlign_FallBack_Present
0002fe10 l       .data	00000000              GL_Widget_SetTextAlign_Callback
00021d30 l     F .text	00000000              GL_Widget_SetTextAlign_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetTextPaddings_FallBack_Present
0002fe20 l       .data	00000000              GL_Widget_SetTextPaddings_Callback
00021d54 l     F .text	00000000              GL_Widget_SetTextPaddings_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetTransformation_FallBack_Present
0002fe30 l       .data	00000000              GL_Widget_SetTransformation_Callback
00021d78 l     F .text	00000000              GL_Widget_SetTransformation_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetVisible_FallBack_Present
0002fe40 l       .data	00000000              GL_Widget_SetVisible_Callback
00021d9c l     F .text	00000000              GL_Widget_SetVisible_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetWrap_FallBack_Present
0002fe50 l       .data	00000000              GL_Widget_SetWrap_Callback
00021dc0 l     F .text	00000000              GL_Widget_SetWrap_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_UnregisterCallback_FallBack_Present
0002fe60 l       .data	00000000              GL_Widget_UnregisterCallback_Callback
00021de4 l     F .text	00000000              GL_Widget_UnregisterCallback_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Window_Create_FallBack_Present
0002fe70 l       .data	00000000              GL_Window_Create_Callback
00021e08 l     F .text	00000000              GL_Window_Create_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Window_Dispatch_FallBack_Present
0002fe80 l       .data	00000000              GL_Window_Dispatch_Callback
00021e2c l     F .text	00000000              GL_Window_Dispatch_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Window_GetResult_FallBack_Present
0002fe90 l       .data	00000000              GL_Window_GetResult_Callback
00021e50 l     F .text	00000000              GL_Window_GetResult_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Window_MainLoop_FallBack_Present
0002fea0 l       .data	00000000              GL_Window_MainLoop_Callback
00021e74 l     F .text	00000000              GL_Window_MainLoop_Init
00030048 l     O .bss	00000004              GL_Dll
0003004c l     O .bss	00000004              GL_present
00000001 l       *ABS*	00000000              __TELIUM3__
00000001 l       *ABS*	00000000              __TELIUM3__
0002feb0 l       .data	00000000              OSL_Dll_Close_Callback
00021f50 l     F .text	00000000              OSL_Dll_Close_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002feb4 l       .data	00000000              OSL_Dll_GetSymbolByName_Callback
00021f70 l     F .text	00000000              OSL_Dll_GetSymbolByName_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002feb8 l       .data	00000000              OSL_Dll_IsPresent_Callback
00021f90 l     F .text	00000000              OSL_Dll_IsPresent_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002febc l       .data	00000000              OSL_Dll_Open_Callback
00021fb0 l     F .text	00000000              OSL_Dll_Open_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fec0 l       .data	00000000              OSL_Dll_OpenByAppliType_Callback
00021fd0 l     F .text	00000000              OSL_Dll_OpenByAppliType_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fec4 l       .data	00000000              OSL_TimeStp_ElapsedMs_Callback
00021ff0 l     F .text	00000000              OSL_TimeStp_ElapsedMs_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fec8 l       .data	00000000              OSL_TimeStp_Now_Callback
00022010 l     F .text	00000000              OSL_TimeStp_Now_Init
00000000 l    df *ABS*	00000000              GTL_StdTimer.c
00000000 l    df *ABS*	00000000              elf-init.c
0002213c l       .text	00000000              .udivsi3_skip_div0_test
00000000 l       *ABS*	00000000              shift
0002fecc l       .data	00000004              function_var
00022358 l       .text	00000013              function_name
000223a6 l       .text	00000000              .direct_call
00022392 l       .text	00000000              .bad_return
000223a4 l       .text	00000000              .call_function
0002239c l       .text	00000000              .already_initialized
00000000 l    df *ABS*	00000000              crtstuff.c
00026438 l     O .eh_frame	00000000              __FRAME_END__
0002f014 l     O .jcr	00000000              __JCR_END__
00030028 l     O .bss	00000004              DllGetProcAddressTools
0002f76c l     O .data	0000000c              g_FileType
000211b8 l     F .text	00000020              GetProcAddressWrapper
0001f82c l     F .text	00000020              GetProcAddressExtens
0002100c l     F .text	00000020              GetProcAddressEmulation
00030030 l     O .bss	00000004              wrapper_Dll
0003002c l     O .bss	00000004              toolsDll
00008fa4 l     F .text	00000014              __stack_chk_fail
00030008 l     O .bss	00000004              DllGetProcAddress6
00030014 l     O .bss	00000004              pinpadDll
0001ff18 l     F .text	00000020              GetProcAddressLibgr
00030000 l     O .bss	00000004              DllGetProcAddress3
000217dc l     F .text	00000020              GL_GraphicLib_Create_Init
00030034 l     O .bss	00000004              DllGetProcAddress55
0002fffc l     O .bss	00000004              extens_Dll
0002f018 l     O .dynamic	00000000              _DYNAMIC
00030018 l     O .bss	00000004              DllGetProcAddress9
0002f008 l       .init_array	00000000              __init_array_end
0002113c l     F .text	00000020              GetProcAddressTools
0002f000 l       .init_array	00000000              __init_array_start
00030020 l     O .bss	00000004              DllGetProcAddressEmul
00020274 l     F .text	00000020              GetProcAddressPinpad
0003001c l     O .bss	00000004              emulation_Dll
00030004 l     O .bss	00000004              libgr_Dll
00020064 l     F .text	00000020              GetProcAddressParam
0002f118 l     O .got	00000000              _GLOBAL_OFFSET_TABLE_
00030010 l     O .bss	00000004              DllGetProcAddress7
0003000c l     O .bss	00000004              param_Dll
00000000 l       .rodata	00000000              
00000000 l       .rodata	00000000              
00000000 l       .rodata	00000000              
00000000 l       .rodata	00000000              
00008b80       F *UND*	00000000              Odm_AppGetCurrentAppliIdentifier
0001f3d2 g     F .text	00000000              .hidden LL_Connect
0003005c g     O .bss	000003e8              isoField095
00021376 g     F .text	00000000              .hidden SEC_PinEntryInit
00030444 g     O .bss	00000005              isoField017
0000a768 g     F .text	0000011c              initUIContext
0003044c g     O .bss	00000005              isoField050
0001f29a g     F .text	00000000              .hidden gprs_SubmitPuk
00030454 g     O .bss	000003e8              isoField121
00021b44 g     F .text	00000000              .hidden GL_Widget_SetFontName
0003083c g     O .bss	000003e8              isoField067
0002127a g     F .text	00000000              .hidden SEC_Iso9564
00013658 g     F .text	00000092              queGet
00012c28 g     F .text	000000f2              Hex2Text
000164dc g     F .text	00000080              mapGet
00030c24 g     O .bss	00000004              isoField020
00022088 g     F .text	0000004c              .hidden GTL_StdTimer_GetRemaining
00021524 g     F .text	00000000              .hidden GL_Dialog_Message
0000a98c g     F .text	000000ae              ResetPeripherals
00030c28 g     O .bss	0000000a              isoField028
00015e28 g     F .text	000000e2              BaseToDec
0001f57c g     F .text	00000028              .hidden LINKLAYER_GetProcAddress
00030c34 g     O .bss	000003e8              isoField116
00021d60 g     F .text	00000000              .hidden GL_Widget_SetTextPaddings
0002194c g     F .text	00000000              .hidden GL_Picture_Create
00008e68 g     F .text	00000004              .hidden telinux_before_main_first
00008b8c       F *UND*	00000000              getpid@@GLIBC_2.4
0003101c g     O .bss	000003e8              BillerPayerName
0001f276 g     F .text	00000000              .hidden gprs_SetPinModeFree
0002201a g     F .text	00000000              .hidden OSL_TimeStp_Now
00013764 g     F .text	00000050              quePutTag
0001f252 g     F .text	00000000              .hidden gprs_GetInformation
0001f71c g     F .text	00000000              .hidden DLLExist
0001f3ae g     F .text	00000000              .hidden LL_Configure
0001cd48 g     F .text	000000e0              .hidden FMG_DeleteFile
0001f486 g     F .text	00000000              .hidden LL_GSM_Start
00020600 g     F .text	00000000              .hidden Telium_ServiceRegister
000130ac g     F .text	00000036              bufLen
0002115c g     F .text	00000044              .hidden toolslib_open
0001fc30 g     F .text	00000000              .hidden Telium_Stdout
00031404 g     O .bss	000003e8              isoField072
000317ec g     O .bss	00000064              isoField035
00011410 g     F .text	0000009e              TimerStart
00021f7a g     F .text	00000000              .hidden OSL_Dll_GetSymbolByName
0001be18 g     F .text	0000042c              .hidden DeleteRecordMiddleWithCkecksum
0002139a g     F .text	00000000              .hidden SEC_SetConfig
000133ac g     F .text	00000054              bufCat
000218bc g     F .text	00000000              .hidden GL_Message_GetKey
00031850 g     O .bss	000003e8              isoField105
000117ac g     F .text	00000044              isoFmt_Gateway
000130e4 g     F .text	0000007c              bufSet
00021d3c g     F .text	00000000              .hidden GL_Widget_SetTextAlign
000210ec g     F .text	00000050              .hidden Telium_Vfprintf
0000f0e4 g     F .text	0000019a              GoalPrnMultiLine
0002fed0 g       *ABS*	00000000              _edata
00031c38 g     O .bss	000003e8              isoField089
000159cc g     F .text	0000014a              Radix64Encode
00032020 g     O .bss	00000064              isoField046
00032084 g     O .bss	000003e8              isoField081
0000eb9c g     F .text	000002ae              GoalDspPicture
0003246c g     O .bss	00000007              isoField003
00012324 g     F .text	00000112              doTransaction
0001f178 g     F .text	000000d0              .hidden md5_finish
00015b18 g     F .text	000002ae              Radix64Decode
00013888 g     F .text	0000005c              queGetTlv
00032474 g     O .bss	00000064              isoField059
00021c40 g     F .text	00000000              .hidden GL_Widget_SetMargins
000169c4 g     F .text	000000ea              strFormatDatTim
000324d8 g     O .bss	00000009              isoField010
0001f9e0 g     F .text	00000000              .hidden Telium_Is_iso1
000324e4 g     O .bss	00000005              isoField051
00021850 g     F .text	00000000              .hidden GL_GraphicLib_UnbindKey
000324ec g     O .bss	000003e8              isoField096
000328d4 g     O .bss	00000005              isoField018
00013724 g     F .text	0000003e              queRewind
0002f230  w      .data	00000000              data_start
0002fed0 g     O .bss	00000004              __stack_chk_guard@@GLIBC_2.4
00021b8c g     F .text	00000000              .hidden GL_Widget_SetFontStyle
000328dc g     O .bss	000003e8              isoField128
00032cc4 g     O .bss	000003e8              isoField120
00020de0 g     F .text	00000000              .hidden DisplayHeader
00021d18 g     F .text	00000000              .hidden GL_Widget_SetText
0001f700 g     F .text	00000010              .hidden TLV_TREE_DLL_IsPresent
00013524 g     F .text	000000be              quePut
0001f668 g     F .text	00000000              .hidden TLV_TREE_DLL_InitFuncAndBranch
000223c0 g     O .rodata	00000004              _IO_stdin_used
00021620 g     F .text	00000000              .hidden GL_Drawing_Clear
0000a18c g     F .text	000001a0              is_for_you_after
000113bc g     F .text	00000052              AppliExist
0001303c g     F .text	00000036              bufDim
000330ac g     O .bss	000003e8              isoField115
000211a0 g     F .text	00000018              .hidden toolslib_close
00013b64 g     F .text	00000068              bitTest
00033494 g     O .bss	000003e8              isoField068
0003387c g     O .bss	0000000a              isoField029
0000dc60 g     F .text	000002c2              GoalGetKey
00033888 g     O .bss	00000064              isoField060
00021a00 g     F .text	00000000              .hidden GL_Widget_Destroy
00012d98 g     F .text	00000072              num2bin
00020a58 g     F .text	00000000              .hidden FS_unlink
000338ec g     O .bss	00000004              isoField021
000124c8 g     F .text	00000046              cPtr
000136ec g     F .text	00000036              queLen
0001655c g     F .text	00000062              mapDatLen
00009a60 g     F .text	000000bc              consult
00021da8 g     F .text	00000000              .hidden GL_Widget_SetVisible
00014598 g     F .text	000000a8              fmtDate
00021874 g     F .text	00000000              .hidden GL_Label_Create
00021ad8 g     F .text	00000000              .hidden GL_Widget_SetBorders
000338f0 g     O .bss	000003e8              isoField073
00021bd4 g     F .text	00000000              .hidden GL_Widget_SetGrow
000202fc g     F .text	00000000              .hidden PPS_Display
00021970 g     F .text	00000000              .hidden GL_Print_Create
00033cd8 g     O .bss	00000064              isoField036
00014bf0 g     F .text	00000062              stdLrc
00033d3c g     O .bss	000003e8              isoField104
00012f4c g     F .text	00000056              tmrPause
00008b98       F *UND*	00000000              iniparser_getint
00021e38 g     F .text	00000000              .hidden GL_Window_Dispatch
000201c8 g     F .text	00000000              .hidden PPS_firstline
00008e58 g     F .text	00000010              .hidden main
00021afc g     F .text	00000000              .hidden GL_Widget_SetExpand
00034124 g     O .bss	0000000d              isoField004
00021f42 g     F .text	00000000              .hidden GL_Swi_DllLink
00013074 g     F .text	00000036              bufPtr
00034134 g     O .bss	00000002              isoDrCr
00020904 g     F .text	00000000              .hidden FS_open
0001daf4 g     F .text	00000484              .hidden FMG_ReadRecord
00034138 g     O .bss	000003e8              isoField047
0001f890 g     F .text	00000018              .hidden extenslib_close
000129d4 g     F .text	000000ee              hex2num
00020e98 g     F .text	00000000              .hidden IsFooter
00021cf4 g     F .text	00000000              .hidden GL_Widget_SetSource
00014ccc g     F .text	00000092              stdGetAcc
00034520 g     O .bss	000003e8              isoField082
0001f34c g     F .text	00000010              .hidden LIBGPRS_IsPresent
0002213c g     F .text	000001ec              .hidden __udivsi3
00034908 g     O .bss	00000011              isoField052
00043fe4 g       *ABS*	00000000              __end__
0003491c g     O .bss	000003e8              isoField097
0000bcc4 g     F .text	000006fa              PromptGPRS
00020858 g     F .text	00000000              .hidden FS_length
00042eb0 g     O .bss	00001134              g_sFileManagement
00020164 g     F .text	00000000              .hidden PPS_SendTerminalRefRequestCommand
00021644 g     F .text	00000000              .hidden GL_Drawing_Create
00034d04 g     O .bss	00000007              isoField011
00012ac4 g     F .text	000000a0              bin2hex
0002fed8 g     O .bss	00000004              gGoalGraphicLibInstance
0001fe6c g     F .text	00000000              .hidden PaintGraphics
0001ff38 g     F .text	00000044              .hidden libgrlib_open
0001cb2c g     F .text	00000058              .hidden FMG_GetFileDescription
0000ee4c g     F .text	00000040              GoalDestroyPicture
0002f234 g     O .data	00000000              .hidden __dso_handle
00034d0c g     O .bss	00000004              isoField019
00011768 g     F .text	00000044              isoFmt
00018d7c g     F .text	00000158              LoadIso9564Key
0002132e g     F .text	00000000              .hidden SEC_LoadKey
00011538 g     F .text	0000005e              TimerStop
00034d10 g     O .bss	000003e8              isoField127
00014640 g     F .text	000000a8              fmtTime
0000e660 g     F .text	0000019c              GoalDrawText
0001f4ce g     F .text	00000000              .hidden LL_Receive
0000a5e4 g     F .text	00000184              menuGoalDisplay
00021cac g     F .text	00000000              .hidden GL_Widget_SetShrink
00020cc8 g     F .text	00000000              .hidden first_init
000214b8 g     F .text	00000000              .hidden GL_Button_Create
00011128 g     F .text	00000082              parseStr
00008ba4       F *UND*	00000000              atoi@@GLIBC_2.4
00021e98 g     F .text	00000060              .hidden GL_GetProcAddressWithoutExit
000350f8 g     O .bss	000003e8              isoField114
00016b94 g     F .text	00000074              strtouppercase
000354e0 g     O .bss	00000005              isoField022
000354e8 g     O .bss	000003e8              isoField069
00009d44 g     F .text	00000098              modif_param
000358d0 g     O .bss	00000064              isoField061
00020364 g     F .text	00000000              .hidden Telium_Read_date
0002182c g     F .text	00000000              .hidden GL_GraphicLib_SetCharset
00008bb0       F *UND*	00000000              Odm_AppGetAppliTypeFromAppId
0001d7a8 g     F .text	0000034c              .hidden FMG_ModifyRecord
000200f0 g     F .text	00000000              .hidden IsPPSConnected
000215b4 g     F .text	00000000              .hidden GL_Dialog_VirtualKeyboard
00035934 g     O .bss	000003e8              isoField074
0002047c g     F .text	00000000              .hidden IsISO1
00014eec g     F .text	000000c4              stdCrc16
0000f494 g     F .text	00000158              appReset
0001f678 g     F .text	00000060              .hidden TLV_TREE_DLL_GetProcAddressWithoutExit
00020594 g     F .text	00000000              .hidden IsPrinter
0001395c g     F .text	0000012c              queMergeTlv
00019efc g     F .text	0000041c              .hidden AddModifyRecordBeginWithCkecksum
00035d1c g     O .bss	000003e8              isoField103
000092bc g     F .text	0000006a              give_your_domain
00036104 g     O .bss	00000019              isoField037
000134e4 g     F .text	0000003e              queInit
00008bbc       F *UND*	00000000              memset@@GLIBC_2.4
0001383c g     F .text	0000004c              queGetTag
0001f324 g     F .text	00000028              .hidden LIBGPRS_GetProcAddress
0002ff30 g     O .bss	00000004              hTsc
00022030 g     F .text	0000002c              .hidden GTL_StdTimer_GetCurrent
0002149c g     F .text	00000010              .hidden LIBSECV2_IsPresent
00008bc8       F *UND*	00000000              Sap_trace_debug
00021500 g     F .text	00000000              .hidden GL_Dialog_Menu
000223b8 g     F .fini	00000000              _fini
0001d3a0 g     F .text	0000007c              .hidden FMG_CheckRecordCoherence
0001f6d8 g     F .text	00000028              .hidden TLV_TREE_DLL_GetProcAddress
00009970 g     F .text	000000f0              state
0000f3f8 g     F .text	00000038              getAppCmpTim
00036120 g     O .bss	000003e8              isoField048
00036508 g     O .bss	000003e8              isoField083
000368f0 g     O .bss	00000007              isoField040
0001f2c4 g     F .text	00000060              .hidden LIBGPRS_GetProcAddressWithoutExit
000368f8 g     O .bss	0000000d              isoField005
000213b4 g     F .text	00000008              .hidden SEClib_Version
00021764 g     F .text	00000000              .hidden GL_GraphicLib_BindSingleKey
00008bd4       F *UND*	00000000              snprintf@@GLIBC_2.4
0001c924 g     F .text	00000208              .hidden FMG_Init
00012fa4 g     F .text	00000048              bufReset
00021fda g     F .text	00000000              .hidden OSL_Dll_OpenByAppliType
00036908 g     O .bss	00000011              isoField053
00019944 g     F .text	0000008c              .hidden CreateOrMountDisk
0003691c g     O .bss	000003e8              isoField098
00021e14 g     F .text	00000000              .hidden GL_Window_Create
00043fe4 g       *ABS*	00000000              __bss_end__
0001fb10 g     F .text	00000000              .hidden Telium_Reset_buf
000203bc g     F .text	00000000              .hidden BoosterType
00013af4 g     F .text	00000070              bitOff
0001ff7c g     F .text	00000018              .hidden libgrlib_close
00036d04 g     O .bss	00000007              isoField012
00021904 g     F .text	00000000              .hidden GL_Message_SetResult
0001c244 g     F .text	0000033c              .hidden DeleteRecordEnd
00014c54 g     F .text	00000078              trk2Lrc
00012b64 g     F .text	000000c4              hex2bin
0001df78 g     F .text	00000314              .hidden FMG_DeleteRecord
0000df24 g     F .text	00000040              GoalDestroyScreen
00036d0c g     O .bss	000003e8              isoField090
00021a90 g     F .text	00000000              .hidden GL_Widget_SetBackAlign
00008be0       F *UND*	00000000              abort@@GLIBC_2.4
0001594c g     F .text	00000048              bmpHgt
000370f4 g     O .bss	000003e8              isoField126
0001efec g     F .text	00000074              .hidden md5_init
0001d04c g     F .text	00000110              .hidden FMG_DeleteFileType
0000fe48 g     F .text	000003a8              FMGReadTransactions
000216f8 g     F .text	00000000              .hidden GL_Drawing_SetBrush
000120e4 g     F .text	0000023e              reqBuild
00021808 g     F .text	00000000              .hidden GL_GraphicLib_IsTouchPresent
000374dc g     O .bss	000003e8              isoField113
00008bec       F *UND*	00000000              pause@@GLIBC_2.4
0001fb6c g     F .text	00000000              .hidden Telium_Status
0000df64 g     F .text	000001d4              GoalCreateDrawing
00015834 g     F .text	000000ce              hashJerkinsBin
00011064 g     F .text	000000c2              CheckParity
00008bf8       F *UND*	00000000              memmove@@GLIBC_2.4
000378c4 g     O .bss	00000803              isoField062
00015f0c g     F .text	0000009c              stdOWF
0002ff34 g     O .bss	00000004              hPrn
00021b20 g     F .text	00000000              .hidden GL_Widget_SetFocusable
0001fdb0 g     F .text	00000000              .hidden DrawExtendedString
000216b0 g     F .text	00000000              .hidden GL_Drawing_DrawRect
00043fe4 g       *ABS*	00000000              _bss_end__
000380c8 g     O .bss	00000005              isoField023
0001ac60 g     F .text	000004bc              .hidden AddModifyRecordEnd
00021210 g     F .text	00000018              .hidden wrapperlib_close
000380d0 g     O .bss	000003e8              isoField075
000384b8 g     O .bss	000003e8              BillerServiceName
000204d8 g     F .text	00000000              .hidden IsISO2
00020800 g     F .text	00000000              .hidden FS_exist
00021590 g     F .text	00000000              .hidden GL_Dialog_Text
0001fc94 g     F .text	00000000              .hidden Telium_Stdperif
00009714 g     F .text	00000060              is_state
0001fcf8 g     F .text	00000000              .hidden Telium_Ttestall
0001c580 g     F .text	0000034c              .hidden DeleteRecordEndWithCkecksum
000388a0 g     O .bss	0000000a              isoField030
000214dc g     F .text	00000000              .hidden GL_Dialog_Choice
00014fb0 g     F .text	00000070              xor
00008c08       F *UND*	00000000              kill@@GLIBC_2.4
0001fd54 g     F .text	00000000              .hidden buzzer
000388ac g     O .bss	0000000d              isoField038
0000a020 g     F .text	000000bc              message_received
0001122c g     F .text	00000126              IpToUint
00008c14       F *UND*	00000000              COREDBG_StackOverFlowSet
000388bc g     O .bss	000003e8              isoField102
000212c2 g     F .text	00000000              .hidden SEC_KeyVerify
00008c20       F *UND*	00000000              strcpy@@GLIBC_2.4
0001fbcc g     F .text	00000000              .hidden Telium_Stdin
00021bf8 g     F .text	00000000              .hidden GL_Widget_SetId
0002130a g     F .text	00000000              .hidden SEC_listTLVKeys
0001f64e g     F .text	00000000              .hidden TlvTree_Release
00021b68 g     F .text	00000000              .hidden GL_Widget_SetFontScale
0001a730 g     F .text	00000530              .hidden AddModifyRecordMiddleWithCkecksum
000206a4 g     F .text	00000000              .hidden Telium_Stdprt
00012e0c g     F .text	0000007c              tmrStart
00038ca4 g     O .bss	0000000d              isoField049
00025a40 g     O .rodata	00000011              zRootKeyPlainText
0002129e g     F .text	00000000              .hidden SEC_isSecretArea
00014150 g     F .text	000001e8              fmtAmt
00038cb4 g     O .bss	000003e8              isoField084
0003909c g     O .bss	00000009              isoField041
00008fb8 g     F .text	000002c2              Main
000390a8 g     O .bss	00000004              isoField006
00018b90 g     F .text	0000014c              CreateSecret
00008e90 g     F .text	00000000              _start
00008c2c       F *UND*	00000000              iniparser_freedict
0001ffa4 g     F .text	00000000              .hidden PSQ_Est_pinpad
00013448 g     F .text	0000004a              bufGet
0001d490 g     F .text	00000318              .hidden FMG_AddRecord
0001f8b8 g     F .text	00000000              .hidden Telium_Fclose
0000d99c g     F .text	000002c4              GoalDspMultiLine
0000d3c0 g     F .text	000001fc              GoalClrScreen
00011e5c g     F .text	00000086              getLen_fmt
0002064c g     F .text	0000002e              .hidden Telium_Pprintf
000390ac g     O .bss	000003e8              isoField054
00039494 g     O .bss	000003e8              isoField099
00021c88 g     F .text	00000000              .hidden GL_Widget_SetShortcut
000156b0 g     F .text	00000040              stdSED
00009674 g     F .text	000000a0              is_name
00011de0 g     F .text	0000007a              getLen_
00022348  w    F .text	00000010              .hidden __aeabi_idiv0
0003987c g     O .bss	00000005              isoField013
00020ab0 g     F .text	00000000              .hidden FS_unmount
0000fa58 g     F .text	000003f0              FMGAddDelTransactions
00020f58 g     F .text	00000000              .hidden Telium_Exit
00021f24 g     F .text	00000000              .hidden GL_InitFuncAndBranch
00021d84 g     F .text	00000000              .hidden GL_Widget_SetTransformation
00039884 g     O .bss	000003e8              isoField091
00009c38 g     F .text	00000066              time_function
00016dc0 g     F .text	000006b4              Magnetic
00039c6c g     O .bss	000003e8              isoField125
00025a54 g     O .rodata	00000011              zIso9564PinKey
00013364 g     F .text	00000048              bufApp
000219dc g     F .text	00000000              .hidden GL_Timer_Stop
0000a884 g     F .text	00000108              releaseUIContext
00030050 g     O .bss	00000004              sSavedStatusHeader
00008c38       F *UND*	00000000              strcat@@GLIBC_2.4
000114b0 g     F .text	00000086              TimerGet
0002236c g     F .text	00000000              .hidden TMT_Retrieve_Clock
0001f3f6 g     F .text	00000000              .hidden LL_Disconnect
0001c8cc g     F .text	00000058              .hidden IsFileEmpty
000208b0 g     F .text	00000000              .hidden FS_mount
00012480 g     F .text	00000048              wPtr
0000c3c0 g     F .text	00000b34              ComGPRS
0003a054 g     O .bss	00000013              isoMnuItm
000146e8 g     F .text	00000056              isSorted
0002102c g     F .text	00000038              .hidden emulationlib_open
0000f6bc g     F .text	000000e0              appGet
00011598 g     F .text	000001d0              Timer
0003a068 g     O .bss	000003e8              isoField063
000199d0 g     F .text	000000c4              .hidden SaveMangementFile
00009bd8 g     F .text	00000060              is_time_function
0003a450 g     O .bss	00000005              isoField024
0003a458 g     O .bss	000003e8              isoField112
0000e138 g     F .text	0000011e              GoalClrDrawing
0000f430 g     F .text	00000062              appLen
0001641c g     F .text	0000006e              count_chars
00008b60 g     F .init	00000000              _init
0003a840 g     O .bss	000003e8              isoField076
00008c44       F *UND*	00000000              OSL_Logger_Log
000212e6 g     F .text	00000000              .hidden SEC_listSecureId
00020534 g     F .text	00000000              .hidden IsISO3
00021474 g     F .text	00000028              .hidden LIBSECV2_GetProcAddress
00021ffa g     F .text	00000000              .hidden OSL_TimeStp_ElapsedMs
00021a24 g     F .text	00000000              .hidden GL_Widget_GetUserData
00021c1c g     F .text	00000000              .hidden GL_Widget_SetItem
0003ac28 g     O .bss	00000002              orgMnuItm
0003ac2c g     O .bss	0000000a              isoField031
0002fed0 g     O .data	00000000              .hidden __TMC_END__
0001f50c g     F .text	00000000              .hidden LINKLAYER_InitFuncAndBranch
00008d54 g     F .text	0000003c              .hidden telinux_after_main_last
0003ac38 g     O .bss	000003e8              isoField101
00020010 g     F .text	00000000              .hidden PSQ_donner_type_pinpad
00008c50       F *UND*	00000000              access@@GLIBC_2.4
0003b020 g     O .bss	00000005              isoField039
00015994 g     F .text	00000036              bmpDat
0001f2b4 g     F .text	00000000              .hidden LIBGPRS_InitFuncAndBranch
000202d8 g     F .text	00000018              .hidden pinpadlib_close
00012d1c g     F .text	0000007a              bin2num
0000ea3c g     F .text	00000160              GoalClrPicture
0001f77c g     F .text	00000000              .hidden d_tolong
0003b028 g     O .bss	000003e8              isoField109
00009e7c g     F .text	000001a4              file_received
00009e3c g     F .text	00000040              is_delete
0001f606 g     F .text	00000000              .hidden TlvTree_AddChildString
00000000  w      *UND*	00000000              _Jv_RegisterClasses
00020420 g     F .text	00000000              .hidden IsColorDisplay
0001f060 g     F .text	00000118              .hidden md5_append
00021dcc g     F .text	00000000              .hidden GL_Widget_SetWrap
0000a13c g     F .text	0000004e              card_inside
0001fec8 g     F .text	00000000              .hidden _DrawExtendedString
0001bad8 g     F .text	00000340              .hidden DeleteRecordMiddle
0000ee8c g     F .text	00000078              GoalCreateDocument
00014504 g     F .text	00000094              fmtTcp
0001f7d8 g     F .text	00000000              .hidden stdcam0
00020a04 g     F .text	00000000              .hidden FS_seek
0003b410 g     O .bss	000003e8              isoField085
0000d084 g     F .text	0000033c              GoalCreateScreen
0003b7f8 g     O .bss	0000001f              isoField042
000200c8 g     F .text	00000018              .hidden paramlib_close
000206f4 g     F .text	00000000              .hidden ApplicationGetCurrent
0001f84c g     F .text	00000044              .hidden extenslib_open
0003b818 g     O .bss	0000000f              isoField007
000101f0 g     F .text	000001d0              FMG_ErrorMsg
00013dd4 g     F .text	000000a6              fmtTok
00018cdc g     F .text	0000009e              FreeSecret
00021bb0 g     F .text	00000000              .hidden GL_Widget_SetForeColor
0001b7a8 g     F .text	00000330              .hidden DeleteRecordBeginWithCkecksum
00015750 g     F .text	0000005e              stdDED
000190a0 g     F .text	00000424              Iso9564PinEntry
00013d78 g     F .text	0000005c              fmtSbs
00021740 g     F .text	00000000              .hidden GL_Drawing_SetPen
0003b828 g     O .bss	000003e8              isoField124
0002067a g     F .text	00000020              .hidden Telium_Printf
00009838 g     F .text	0000003e              more_function
000219b8 g     F .text	00000000              .hidden GL_Timer_SetInterval
0003bc10 g     O .bss	00000201              isoField055
0003be14 g     O .bss	000003e8              isoField092
0000f5ec g     F .text	000000d0              appPut
0003c1fc g     O .bss	000003e8              LoggedInUser
0003c5e4 g     O .bss	00000005              isoField014
00014074 g     F .text	000000dc              fmtIns
0000e83c g     F .text	000001fe              GoalCreatePicture
00008c60       F *UND*	00000000              Stapp_LegacyInstall
00013160 g     F .text	000000ea              bufIns
00025a68 g     O .rodata	00000009              zMacKey
00009328 g     F .text	0000034a              after_reset
0001f4aa g     F .text	00000000              .hidden LL_Network_GetStatus
00013400 g     F .text	00000048              bufCpy
000132cc g     F .text	00000098              bufDel
0002168c g     F .text	00000000              .hidden GL_Drawing_DrawLine
00009ca0 g     F .text	000000a4              is_change_init
00014a74 g     F .text	0000008c              addStr
00008c6c       F *UND*	00000000              raise@@GLIBC_2.4
0001f43e g     F .text	00000000              .hidden LL_GPRS_Connect
0003c5ec g     O .bss	00000009              isoField064
000194c4 g     F .text	00000438              MacCalculation
00012438 g     F .text	00000048              bPtr
0002fed0 g       *ABS*	00000000              __bss_start__
00021994 g     F .text	00000000              .hidden GL_Timer_Create
0003c5f8 g     O .bss	00000003              isoField025
00014b00 g     F .text	00000096              subStr
0000f280 g     F .text	000000a8              GoalPrnPicture
00021256 g     F .text	00000000              .hidden SEC_GetConfig
0001f5be g     F .text	00000000              .hidden TlvTree_AddChild
00020224 g     F .text	00000000              .hidden PPS_newline
00015904 g     F .text	00000048              bmpWdt
0000a518 g     F .text	000000ca              entry
0003c5fc g     O .bss	000003e8              isoField119
0003c9e4 g     O .bss	000003e8              isoField111
00014338 g     F .text	00000106              fmtMut
0002f230 g       .data	00000000              __data_start
00010f80 g     F .text	000000e2              SetParity
00043fe4 g       *ABS*	00000000              _end
000165c0 g     F .text	0000009a              mapPut
00020c1c g     F .text	00000000              .hidden PageAlloc
00016cb0 g     F .text	0000010e              IsoError
0003cdcc g     O .bss	000003e8              isoField077
00020b68 g     F .text	00000000              .hidden ObjectGetDescriptor
0003d1b4 g     O .bss	000003e8              isoField100
00017778 g     F .text	0000008a              GetPpdDisplay
0003d59c g     O .bss	00000064              isoField032
000156f0 g     F .text	0000005e              stdEDE
000128fc g     F .text	000000d8              num2hex
0000e258 g     F .text	00000146              GoalDrawLine
0001f462 g     F .text	00000000              .hidden LL_GPRS_Start
00020d20 g     F .text	00000000              .hidden raz_init
0003d600 g     O .bss	000003e8              isoField086
00019bdc g     F .text	00000320              .hidden AddModifyRecordBegin
0003d9e8 g     O .bss	000003e8              isoField108
0003ddd0 g     O .bss	00000051              isoField043
0003de24 g     O .bss	00000007              isoField000
0001cb84 g     F .text	000001c4              .hidden FMG_CreateFile
00021fba g     F .text	00000000              .hidden OSL_Dll_Open
0001f97c g     F .text	00000000              .hidden Telium_Getc
00015670 g     F .text	00000040              stdDES
0003de2c g     O .bss	00000009              isoField008
00020e3c g     F .text	00000000              .hidden DisplayLeds
00022348  w    F .text	00000010              .hidden __aeabi_ldiv0
000162e8 g     F .text	00000132              dt2ts
000211d8 g     F .text	00000038              .hidden wrapperlib_open
00021352 g     F .text	00000000              .hidden SEC_PinEntry
00008c78       F *UND*	00000000              memcpy@@GLIBC_2.4
00019a94 g     F .text	000000ac              .hidden ExtraireFileID
0001324c g     F .text	0000007e              bufOwr
0003de38 g     O .bss	000003e8              isoField123
00021ef8 g     F .text	0000001c              .hidden GL_GetProcAddress
00018158 g     F .text	00000a36              GetConfig
0003e220 g     O .bss	00000007              isoField015
0001b534 g     F .text	00000274              .hidden DeleteRecordBegin
0002fed0 g       *ABS*	00000000              __bss_start
00020efc g     F .text	00000000              .hidden IsHeader
000103c0 g     F .text	0000070c              LL_ErrorMsg
0003e228 g     O .bss	00000064              isoField056
00030054 g     O .bss	00000004              sSavedStatusLeds
0001ce28 g     F .text	00000224              .hidden FMG_CreateFileType
000111ac g     F .text	00000080              UintToIp
00020084 g     F .text	00000044              .hidden paramlib_open
0003e28c g     O .bss	000003e8              isoField093
00021414 g     F .text	00000060              .hidden LIBSECV2_GetProcAddressWithoutExit
00021f9a g     F .text	00000000              .hidden OSL_Dll_IsPresent
0001f91c g     F .text	00000000              .hidden Telium_Fopen
00008c84       F *UND*	00000000              strlen@@GLIBC_2.4
00018ed4 g     F .text	0000015e              LoadMacKey
0000a4a4 g     F .text	00000072              give_interface
00009774 g     F .text	000000c2              idle_message
000138e4 g     F .text	00000078              queFindTlv
00019b40 g     F .text	0000009c              .hidden DeleteFileFromTable
0003e674 g     O .bss	000003e8              isoField065
00008c90       F *UND*	00000000              Sys_GetMode
00013f2c g     F .text	00000146              fmtCnt
00008c9c       F *UND*	00000000              Stapp_LegacyInstall_end
000220d4 g     F .text	00000064              .hidden __libc_csu_init
00016c64 g     F .text	0000004a              basename
0001f62a g     F .text	00000000              .hidden TlvTree_New
0001d15c g     F .text	00000244              .hidden FMG_CheckFileCoherence
00008ca8       F *UND*	00000000              OSL_InitFuncAndBranch
0000f328 g     F .text	00000058              GoalPrnDocument
000213e8 g     F .text	00000018              .hidden SEClib_Close
0003ea5c g     O .bss	00000003              isoField026
000137b4 g     F .text	00000086              quePutTlv
00021a6c g     F .text	00000000              .hidden GL_Widget_SearchId
0003ea60 g     O .bss	000003e8              isoField110
0003ee48 g     O .bss	000003e8              isoField118
00008cb4       F *UND*	00000000              sprintf@@GLIBC_2.4
0001f41a g     F .text	00000000              .hidden LL_GetLastError
0000f8a0 g     F .text	000000be              FMGDeleteBatch
00008cc0       F *UND*	00000000              Oem_upload_diagnostic_txt
000206bc g     F .text	00000020              .hidden Telium_Sprintf
0003f230 g     O .bss	00000002              hostGateway
00015020 g     F .text	000000b0              stdParity
0001a318 g     F .text	00000418              .hidden AddModifyRecordMiddle
0003f234 g     O .bss	00000007              invoiceNo
00021a48 g     F .text	00000000              .hidden GL_Widget_RegisterCallback
00013bcc g     F .text	000000da              tbxParity
0002205c g     F .text	0000002c              .hidden GTL_StdTimer_GetElapsed
0001259c g     F .text	000000c4              num2dec
0001f38a g     F .text	00000000              .hidden LL_ClearSendBuffer
0003f23c g     O .bss	0000000a              isoField033
000215fc g     F .text	00000000              .hidden GL_Document_Print
0000d5f4 g     F .text	000003a6              GoalDspLine
00020d80 g     F .text	00000000              .hidden DisplayFooter
0003f248 g     O .bss	000003e8              isoField078
00022328 g     F .text	00000020              .hidden __aeabi_uidivmod
000207a8 g     F .text	00000000              .hidden FS_dskcreate
0003f630 g     O .bss	000003e8              isoField070
00011354 g     F .text	00000068              ParamExist
00016c08 g     F .text	0000005c              kbdKey
00012e88 g     F .text	0000006e              tmrGet
0003fa18 g     O .bss	000003e8              isoField107
0003fe00 g     O .bss	000003e8              isoField087
00021cd0 g     F .text	00000000              .hidden GL_Widget_SetSize
000401e8 g     O .bss	0000000a              isoField044
0002156c g     F .text	00000000              .hidden GL_Dialog_Progress
0001f4f2 g     F .text	00000000              .hidden LL_Send
0001f5e2 g     F .text	00000000              .hidden TlvTree_AddChildInteger
00042eac g     O .bss	00000004              beg
000135e4 g     F .text	00000072              queNxt
0000e7fc g     F .text	00000040              GoalDestroyDrawing
00000000       O *UND*	00000000              __libc_enable_secure@@GLIBC_PRIVATE
0001b11c g     F .text	00000418              .hidden AddModifyRecordEndWithCkecksum
000401f4 g     O .bss	00000064              isoField001
00008cd0       F *UND*	00000000              Stapp_LegacyUninstall
00014440 g     F .text	000000c4              fmtDel
00008cdc       F *UND*	00000000              strcmp@@GLIBC_2.4
00016ab0 g     F .text	000000e4              message_RemoveCard
00020bc4 g     F .text	00000000              .hidden ObjectGetInfo
0001f366 g     F .text	00000000              .hidden LL_ClearReceiveBuffer
0000a32c g     F .text	00000176              debit_non_emv
00040258 g     O .bss	00000009              isoField009
00009878 g     F .text	000000f8              keyboard_event
00008d90 g     F .text	000000c8              .hidden telinux_gmon_dump_prepare
000198fc g     F .text	00000046              LoadKeysAuto
00030058 g     O .bss	00000004              sSavedStatusFooter
0001faa8 g     F .text	00000000              .hidden Telium_Is_iso3
00021f34 g     F .text	00000000              .hidden GL_Swi_ObjectLoad
00040264 g     O .bss	000003e8              billerReceipt
0004064c g     O .bss	000003e8              isoField122
00021c64 g     F .text	00000000              .hidden GL_Widget_SetMinSize
0002213c g     F .text	00000000              .hidden __aeabi_uidiv
00012ef8 g     F .text	00000054              tmrStop
0000f79c g     F .text	00000104              FMGCreateBatch
00040a34 g     O .bss	00000064              isoField057
0001648c g     F .text	0000004e              begKey
00021f14 g     F .text	00000010              .hidden GL_IsPresent
00008ce8       F *UND*	00000000              strncpy@@GLIBC_2.4
00040a98 g     O .bss	000003e8              isoField094
00021ab4 g     F .text	00000000              .hidden GL_Widget_SetBackColor
00020c70 g     F .text	00000000              .hidden PageFree
0001f51c g     F .text	00000060              .hidden LINKLAYER_GetProcAddressWithoutExit
00040e80 g     O .bss	00000005              isoField016
00000000  w      *UND*	00000000              _ITM_deregisterTMCloneTable
000161cc g     F .text	0000011a              ts2dt
00016740 g     F .text	00000152              getDateTime
00008cf4       F *UND*	00000000              memcmp@@GLIBC_2.4
00020b08 g     F .text	00000000              .hidden FS_write
00021232 g     F .text	00000000              .hidden SEC_ComputeMAC
00040e88 g     O .bss	000003e8              isoField066
000213bc g     F .text	0000002c              .hidden SEClib_Open
00012fec g     F .text	0000004e              bufInit
00021400  w    F .text	00000004              .hidden LIBSEC_IsPresent
0000d5bc g     F .text	00000038              GoalRefreshScreen
00013e7c g     F .text	000000b0              fmtPad
0002074c g     F .text	00000000              .hidden FS_close
00022138 g     F .text	00000004              .hidden __libc_csu_fini
0002171c g     F .text	00000000              .hidden GL_Drawing_SetFont
00010acc g     F .text	000002b0              SEC_ErrorMsg
0000e500 g     F .text	0000015e              GoalDrawEllipse
000209b0 g     F .text	00000000              .hidden FS_rename
00041270 g     O .bss	00000003              isoField027
00008d00       F *UND*	00000000              strrchr@@GLIBC_2.4
00021404 g     F .text	00000000              .hidden LIBSECV2_InitFuncAndBranch
00021e80 g     F .text	00000000              .hidden GL_Window_MainLoop
00014b98 g     F .text	00000058              stdPow
00041274 g     O .bss	000003e8              isoField117
00020958 g     F .text	00000000              .hidden FS_read
000218e0 g     F .text	00000000              .hidden GL_Message_GetWidget
0001fe18 g     F .text	00000000              .hidden InitContexteGraphique
00009b1c g     F .text	000000bc              mcall
00021898 g     F .text	00000000              .hidden GL_Layout_Create
0004165c g     O .bss	000003e8              isoField079
00012510 g     F .text	00000034              dPtr
00008d0c       F *UND*	00000000              getenv@@GLIBC_2.4
00008d18       F *UND*	00000000              __libc_start_main@@GLIBC_2.4
000215d8 g     F .text	00000000              .hidden GL_Document_Create
00041a44 g     O .bss	000003e8              isoField071
0000a0dc g     F .text	00000060              is_card_specific
0000f380 g     F .text	00000040              GoalDestroyDocument
00041e2c g     O .bss	0000000a              isoField034
00008d24       F *UND*	00000000              vsprintf@@GLIBC_2.4
00008d30       F *UND*	00000000              iniparser_load
00000000  w      *UND*	00000000              __gmon_start__
00017e8c g     F .text	000002ca              SetConfig
00041e38 g     O .bss	000003e8              isoField106
000216d4 g     F .text	00000000              .hidden GL_Drawing_DrawText
00009ddc g     F .text	00000060              is_evol_pg
00021df0 g     F .text	00000000              .hidden GL_Widget_UnregisterCallback
00042220 g     O .bss	000003e8              isoField088
00042608 g     O .bss	000003e8              billerRef
00013a88 g     F .text	0000006c              bitOn
000429f0 g     O .bss	0000000a              isoField045
00021f5a g     F .text	00000000              .hidden OSL_Dll_Close
00000000  w      *UND*	00000000              _ITM_registerTMCloneTable
0001d41c g     F .text	00000074              .hidden FMG_CalculMD5
00021928 g     F .text	00000000              .hidden GL_Message_SetUserData
00008d48       F *UND*	00000000              strchr@@GLIBC_2.4
00021548 g     F .text	00000000              .hidden GL_Dialog_Password
000429fc g     O .bss	00000064              isoField002
00013ca8 g     F .text	000000ce              tbxCheckParity
00021e5c g     F .text	00000000              .hidden GL_Window_GetResult
0000ef04 g     F .text	000001de              GoalPrnLine
0002177c g     F .text	00000060              .hidden GL_GraphicLib_Create
00021064 g     F .text	00000018              .hidden emulationlib_close
0000e3a0 g     F .text	0000015e              GoalDrawRect
00042a60 g     O .bss	000003e8              isoField080
00021098 g     F .text	00000000              .hidden TM_InitContexteGraphique
00010d7c g     F .text	000000c0              OpenConverter
00014e74 g     F .text	00000078              stdArgMsgCrc16
00020fc0 g     F .text	00000000              .hidden upload_diagnostic_txt
00013494 g     F .text	00000050              queReset
00020294 g     F .text	00000044              .hidden pinpadlib_open
000127e4 g     F .text	00000118              dec2num
0001fa44 g     F .text	00000000              .hidden Telium_Is_iso2
0000f3c0 g     F .text	00000038              getAppCmpDat
0001f5a4 g     F .text	00000010              .hidden LINKLAYER_IsPresent
00042e48 g     O .bss	00000064              isoField058
00014d60 g     F .text	00000112              stdLuhnCheck
00021668 g     F .text	00000000              .hidden GL_Drawing_DrawEllipse



Disassembly of section .init:

00008b60 <_init>:
    8b60:	e92d4008 	push	{r3, lr}
    8b64:	eb0000c0 	bl	8e6c <call_gmon_start>
    8b68:	e8bd8008 	pop	{r3, pc}

Disassembly of section .plt:

00008b6c <.plt>:
    8b6c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8b70:	e59fe004 	ldr	lr, [pc, #4]	; 8b7c <_init+0x1c>
    8b74:	e08fe00e 	add	lr, pc, lr
    8b78:	e5bef008 	ldr	pc, [lr, #8]!
    8b7c:	0002659c 	.word	0x0002659c
    8b80:	e28fc600 	add	ip, pc, #0
    8b84:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8b88:	e5bcf59c 	ldr	pc, [ip, #1436]!	; 0x59c
    8b8c:	e28fc600 	add	ip, pc, #0
    8b90:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8b94:	e5bcf594 	ldr	pc, [ip, #1428]!	; 0x594
    8b98:	e28fc600 	add	ip, pc, #0
    8b9c:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8ba0:	e5bcf58c 	ldr	pc, [ip, #1420]!	; 0x58c
    8ba4:	e28fc600 	add	ip, pc, #0
    8ba8:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8bac:	e5bcf584 	ldr	pc, [ip, #1412]!	; 0x584
    8bb0:	e28fc600 	add	ip, pc, #0
    8bb4:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8bb8:	e5bcf57c 	ldr	pc, [ip, #1404]!	; 0x57c
    8bbc:	e28fc600 	add	ip, pc, #0
    8bc0:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8bc4:	e5bcf574 	ldr	pc, [ip, #1396]!	; 0x574
    8bc8:	e28fc600 	add	ip, pc, #0
    8bcc:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8bd0:	e5bcf56c 	ldr	pc, [ip, #1388]!	; 0x56c
    8bd4:	e28fc600 	add	ip, pc, #0
    8bd8:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8bdc:	e5bcf564 	ldr	pc, [ip, #1380]!	; 0x564
    8be0:	e28fc600 	add	ip, pc, #0
    8be4:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8be8:	e5bcf55c 	ldr	pc, [ip, #1372]!	; 0x55c
    8bec:	e28fc600 	add	ip, pc, #0
    8bf0:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8bf4:	e5bcf554 	ldr	pc, [ip, #1364]!	; 0x554
    8bf8:	e28fc600 	add	ip, pc, #0
    8bfc:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c00:	e5bcf54c 	ldr	pc, [ip, #1356]!	; 0x54c
    8c04:	4778      	bx	pc
    8c06:	46c0      	nop			; (mov r8, r8)
    8c08:	e28fc600 	add	ip, pc, #0
    8c0c:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c10:	e5bcf540 	ldr	pc, [ip, #1344]!	; 0x540
    8c14:	e28fc600 	add	ip, pc, #0
    8c18:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c1c:	e5bcf538 	ldr	pc, [ip, #1336]!	; 0x538
    8c20:	e28fc600 	add	ip, pc, #0
    8c24:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c28:	e5bcf530 	ldr	pc, [ip, #1328]!	; 0x530
    8c2c:	e28fc600 	add	ip, pc, #0
    8c30:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c34:	e5bcf528 	ldr	pc, [ip, #1320]!	; 0x528
    8c38:	e28fc600 	add	ip, pc, #0
    8c3c:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c40:	e5bcf520 	ldr	pc, [ip, #1312]!	; 0x520
    8c44:	e28fc600 	add	ip, pc, #0
    8c48:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c4c:	e5bcf518 	ldr	pc, [ip, #1304]!	; 0x518
    8c50:	e28fc600 	add	ip, pc, #0
    8c54:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c58:	e5bcf510 	ldr	pc, [ip, #1296]!	; 0x510
    8c5c:	4778      	bx	pc
    8c5e:	46c0      	nop			; (mov r8, r8)
    8c60:	e28fc600 	add	ip, pc, #0
    8c64:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c68:	e5bcf504 	ldr	pc, [ip, #1284]!	; 0x504
    8c6c:	e28fc600 	add	ip, pc, #0
    8c70:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c74:	e5bcf4fc 	ldr	pc, [ip, #1276]!	; 0x4fc
    8c78:	e28fc600 	add	ip, pc, #0
    8c7c:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c80:	e5bcf4f4 	ldr	pc, [ip, #1268]!	; 0x4f4
    8c84:	e28fc600 	add	ip, pc, #0
    8c88:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c8c:	e5bcf4ec 	ldr	pc, [ip, #1260]!	; 0x4ec
    8c90:	e28fc600 	add	ip, pc, #0
    8c94:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c98:	e5bcf4e4 	ldr	pc, [ip, #1252]!	; 0x4e4
    8c9c:	e28fc600 	add	ip, pc, #0
    8ca0:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8ca4:	e5bcf4dc 	ldr	pc, [ip, #1244]!	; 0x4dc
    8ca8:	e28fc600 	add	ip, pc, #0
    8cac:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8cb0:	e5bcf4d4 	ldr	pc, [ip, #1236]!	; 0x4d4
    8cb4:	e28fc600 	add	ip, pc, #0
    8cb8:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8cbc:	e5bcf4cc 	ldr	pc, [ip, #1228]!	; 0x4cc
    8cc0:	e28fc600 	add	ip, pc, #0
    8cc4:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8cc8:	e5bcf4c4 	ldr	pc, [ip, #1220]!	; 0x4c4
    8ccc:	4778      	bx	pc
    8cce:	46c0      	nop			; (mov r8, r8)
    8cd0:	e28fc600 	add	ip, pc, #0
    8cd4:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8cd8:	e5bcf4b8 	ldr	pc, [ip, #1208]!	; 0x4b8
    8cdc:	e28fc600 	add	ip, pc, #0
    8ce0:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8ce4:	e5bcf4b0 	ldr	pc, [ip, #1200]!	; 0x4b0
    8ce8:	e28fc600 	add	ip, pc, #0
    8cec:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8cf0:	e5bcf4a8 	ldr	pc, [ip, #1192]!	; 0x4a8
    8cf4:	e28fc600 	add	ip, pc, #0
    8cf8:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8cfc:	e5bcf4a0 	ldr	pc, [ip, #1184]!	; 0x4a0
    8d00:	e28fc600 	add	ip, pc, #0
    8d04:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8d08:	e5bcf498 	ldr	pc, [ip, #1176]!	; 0x498
    8d0c:	e28fc600 	add	ip, pc, #0
    8d10:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8d14:	e5bcf490 	ldr	pc, [ip, #1168]!	; 0x490
    8d18:	e28fc600 	add	ip, pc, #0
    8d1c:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8d20:	e5bcf488 	ldr	pc, [ip, #1160]!	; 0x488
    8d24:	e28fc600 	add	ip, pc, #0
    8d28:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8d2c:	e5bcf480 	ldr	pc, [ip, #1152]!	; 0x480
    8d30:	e28fc600 	add	ip, pc, #0
    8d34:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8d38:	e5bcf478 	ldr	pc, [ip, #1144]!	; 0x478
    8d3c:	e28fc600 	add	ip, pc, #0
    8d40:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8d44:	e5bcf470 	ldr	pc, [ip, #1136]!	; 0x470
    8d48:	e28fc600 	add	ip, pc, #0
    8d4c:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8d50:	e5bcf468 	ldr	pc, [ip, #1128]!	; 0x468

Disassembly of section .text:

00008d54 <telinux_after_main_last>:
    8d54:	480b      	ldr	r0, [pc, #44]	; (8d84 <telinux_after_main_last+0x30>)
    8d56:	b510      	push	{r4, lr}
    8d58:	490b      	ldr	r1, [pc, #44]	; (8d88 <telinux_after_main_last+0x34>)
    8d5a:	4a0c      	ldr	r2, [pc, #48]	; (8d8c <telinux_after_main_last+0x38>)
    8d5c:	b084      	sub	sp, #16
    8d5e:	4478      	add	r0, pc
    8d60:	2459      	movs	r4, #89	; 0x59
    8d62:	4479      	add	r1, pc
    8d64:	447a      	add	r2, pc
    8d66:	2300      	movs	r3, #0
    8d68:	9003      	str	r0, [sp, #12]
    8d6a:	9101      	str	r1, [sp, #4]
    8d6c:	9200      	str	r2, [sp, #0]
    8d6e:	9402      	str	r4, [sp, #8]
    8d70:	461a      	mov	r2, r3
    8d72:	2111      	movs	r1, #17
    8d74:	2007      	movs	r0, #7
    8d76:	f7ff ef28 	blx	8bc8 <_init+0x68>
    8d7a:	b004      	add	sp, #16
    8d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8d80:	f7ff bfa4 	b.w	8ccc <_init+0x16c>
    8d84:	0001d646 	.word	0x0001d646
    8d88:	0001d62a 	.word	0x0001d62a
    8d8c:	0001d660 	.word	0x0001d660

00008d90 <telinux_gmon_dump_prepare>:
    8d90:	4a2b      	ldr	r2, [pc, #172]	; (8e40 <telinux_gmon_dump_prepare+0xb0>)
    8d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d96:	492b      	ldr	r1, [pc, #172]	; (8e44 <telinux_gmon_dump_prepare+0xb4>)
    8d98:	447a      	add	r2, pc
    8d9a:	4b2b      	ldr	r3, [pc, #172]	; (8e48 <telinux_gmon_dump_prepare+0xb8>)
    8d9c:	5854      	ldr	r4, [r2, r1]
    8d9e:	b08e      	sub	sp, #56	; 0x38
    8da0:	6821      	ldr	r1, [r4, #0]
    8da2:	910d      	str	r1, [sp, #52]	; 0x34
    8da4:	58d5      	ldr	r5, [r2, r3]
    8da6:	682b      	ldr	r3, [r5, #0]
    8da8:	b933      	cbnz	r3, 8db8 <telinux_gmon_dump_prepare+0x28>
    8daa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8dac:	6823      	ldr	r3, [r4, #0]
    8dae:	429a      	cmp	r2, r3
    8db0:	d143      	bne.n	8e3a <telinux_gmon_dump_prepare+0xaa>
    8db2:	b00e      	add	sp, #56	; 0x38
    8db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8db8:	4824      	ldr	r0, [pc, #144]	; (8e4c <telinux_gmon_dump_prepare+0xbc>)
    8dba:	4478      	add	r0, pc
    8dbc:	f7ff efa6 	blx	8d0c <_init+0x1ac>
    8dc0:	2800      	cmp	r0, #0
    8dc2:	d0f2      	beq.n	8daa <telinux_gmon_dump_prepare+0x1a>
    8dc4:	a804      	add	r0, sp, #16
    8dc6:	f7ff ef64 	blx	8c90 <_init+0x130>
    8dca:	4606      	mov	r6, r0
    8dcc:	2800      	cmp	r0, #0
    8dce:	d1ec      	bne.n	8daa <telinux_gmon_dump_prepare+0x1a>
    8dd0:	9b04      	ldr	r3, [sp, #16]
    8dd2:	2b00      	cmp	r3, #0
    8dd4:	d0e9      	beq.n	8daa <telinux_gmon_dump_prepare+0x1a>
    8dd6:	4f1e      	ldr	r7, [pc, #120]	; (8e50 <telinux_gmon_dump_prepare+0xc0>)
    8dd8:	f7ff eed2 	blx	8b80 <_init+0x20>
    8ddc:	f10d 020e 	add.w	r2, sp, #14
    8de0:	a903      	add	r1, sp, #12
    8de2:	447f      	add	r7, pc
    8de4:	f7ff eee4 	blx	8bb0 <_init+0x50>
    8de8:	4631      	mov	r1, r6
    8dea:	4638      	mov	r0, r7
    8dec:	f7ff ef30 	blx	8c50 <_init+0xf0>
    8df0:	4606      	mov	r6, r0
    8df2:	2800      	cmp	r0, #0
    8df4:	d1d9      	bne.n	8daa <telinux_gmon_dump_prepare+0x1a>
    8df6:	4638      	mov	r0, r7
    8df8:	f7ff ef9a 	blx	8d30 <_init+0x1d0>
    8dfc:	4607      	mov	r7, r0
    8dfe:	2800      	cmp	r0, #0
    8e00:	d0d3      	beq.n	8daa <telinux_gmon_dump_prepare+0x1a>
    8e02:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8e06:	f10d 0814 	add.w	r8, sp, #20
    8e0a:	9200      	str	r2, [sp, #0]
    8e0c:	4a11      	ldr	r2, [pc, #68]	; (8e54 <telinux_gmon_dump_prepare+0xc4>)
    8e0e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8e12:	4640      	mov	r0, r8
    8e14:	447a      	add	r2, pc
    8e16:	2120      	movs	r1, #32
    8e18:	f7ff eedc 	blx	8bd4 <_init+0x74>
    8e1c:	4641      	mov	r1, r8
    8e1e:	f04f 32ff 	mov.w	r2, #4294967295
    8e22:	4638      	mov	r0, r7
    8e24:	f7ff eeb8 	blx	8b98 <_init+0x38>
    8e28:	4680      	mov	r8, r0
    8e2a:	4638      	mov	r0, r7
    8e2c:	f7ff eefe 	blx	8c2c <_init+0xcc>
    8e30:	f1b8 0f00 	cmp.w	r8, #0
    8e34:	d0b9      	beq.n	8daa <telinux_gmon_dump_prepare+0x1a>
    8e36:	602e      	str	r6, [r5, #0]
    8e38:	e7b7      	b.n	8daa <telinux_gmon_dump_prepare+0x1a>
    8e3a:	f000 f8b3 	bl	8fa4 <__stack_chk_fail>
    8e3e:	bf00      	nop
    8e40:	0002637c 	.word	0x0002637c
    8e44:	000000ac 	.word	0x000000ac
    8e48:	000000f4 	.word	0x000000f4
    8e4c:	0001d626 	.word	0x0001d626
    8e50:	0001d60e 	.word	0x0001d60e
    8e54:	0001d600 	.word	0x0001d600

00008e58 <main>:
    8e58:	b508      	push	{r3, lr}
    8e5a:	f001 fb5d 	bl	a518 <entry>
    8e5e:	f7ff ef1e 	blx	8c9c <_init+0x13c>
    8e62:	f7ff eec4 	blx	8bec <_init+0x8c>
    8e66:	e7fc      	b.n	8e62 <main+0xa>

00008e68 <telinux_before_main_first>:
    8e68:	f7ff bef8 	b.w	8c5c <_init+0xfc>

00008e6c <call_gmon_start>:
    8e6c:	e59f3014 	ldr	r3, [pc, #20]	; 8e88 <call_gmon_start+0x1c>
    8e70:	e59f2014 	ldr	r2, [pc, #20]	; 8e8c <call_gmon_start+0x20>
    8e74:	e08f3003 	add	r3, pc, r3
    8e78:	e7933002 	ldr	r3, [r3, r2]
    8e7c:	e3530000 	cmp	r3, #0
    8e80:	012fff1e 	bxeq	lr
    8e84:	eaffffac 	b	8d3c <_init+0x1dc>
    8e88:	0002629c 	.word	0x0002629c
    8e8c:	00000104 	.word	0x00000104

00008e90 <_start>:
    8e90:	e3a0b000 	mov	fp, #0
    8e94:	e3a0e000 	mov	lr, #0
    8e98:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    8e9c:	e1a0200d 	mov	r2, sp
    8ea0:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
    8ea4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    8ea8:	e59fc010 	ldr	ip, [pc, #16]	; 8ec0 <_start+0x30>
    8eac:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
    8eb0:	e59f000c 	ldr	r0, [pc, #12]	; 8ec4 <_start+0x34>
    8eb4:	e59f300c 	ldr	r3, [pc, #12]	; 8ec8 <_start+0x38>
    8eb8:	ebffff96 	bl	8d18 <_init+0x1b8>
    8ebc:	ebffff47 	bl	8be0 <_init+0x80>
    8ec0:	00022138 	.word	0x00022138
    8ec4:	00008e59 	.word	0x00008e59
    8ec8:	000220d4 	.word	0x000220d4

00008ecc <deregister_tm_clones>:
    8ecc:	e92d4008 	push	{r3, lr}
    8ed0:	e59f0020 	ldr	r0, [pc, #32]	; 8ef8 <deregister_tm_clones+0x2c>
    8ed4:	e59f3020 	ldr	r3, [pc, #32]	; 8efc <deregister_tm_clones+0x30>
    8ed8:	e0603003 	rsb	r3, r0, r3
    8edc:	e3530006 	cmp	r3, #6
    8ee0:	98bd8008 	popls	{r3, pc}
    8ee4:	e59f3014 	ldr	r3, [pc, #20]	; 8f00 <deregister_tm_clones+0x34>
    8ee8:	e3530000 	cmp	r3, #0
    8eec:	08bd8008 	popeq	{r3, pc}
    8ef0:	e12fff33 	blx	r3
    8ef4:	e8bd8008 	pop	{r3, pc}
    8ef8:	0002fed0 	.word	0x0002fed0
    8efc:	0002fed3 	.word	0x0002fed3
    8f00:	00000000 	.word	0x00000000

00008f04 <register_tm_clones>:
    8f04:	e92d4008 	push	{r3, lr}
    8f08:	e59f202c 	ldr	r2, [pc, #44]	; 8f3c <register_tm_clones+0x38>
    8f0c:	e59f302c 	ldr	r3, [pc, #44]	; 8f40 <register_tm_clones+0x3c>
    8f10:	e0633002 	rsb	r3, r3, r2
    8f14:	e1b03143 	asrs	r3, r3, #2
    8f18:	42833001 	addmi	r3, r3, #1
    8f1c:	e1b010c3 	asrs	r1, r3, #1
    8f20:	08bd8008 	popeq	{r3, pc}
    8f24:	e59f2018 	ldr	r2, [pc, #24]	; 8f44 <register_tm_clones+0x40>
    8f28:	e3520000 	cmp	r2, #0
    8f2c:	08bd8008 	popeq	{r3, pc}
    8f30:	e59f0008 	ldr	r0, [pc, #8]	; 8f40 <register_tm_clones+0x3c>
    8f34:	e12fff32 	blx	r2
    8f38:	e8bd8008 	pop	{r3, pc}
    8f3c:	0002fed0 	.word	0x0002fed0
    8f40:	0002fed0 	.word	0x0002fed0
    8f44:	00000000 	.word	0x00000000

00008f48 <__do_global_dtors_aux>:
    8f48:	e92d4010 	push	{r4, lr}
    8f4c:	e59f4018 	ldr	r4, [pc, #24]	; 8f6c <__do_global_dtors_aux+0x24>
    8f50:	e5d43000 	ldrb	r3, [r4]
    8f54:	e3530000 	cmp	r3, #0
    8f58:	18bd8010 	popne	{r4, pc}
    8f5c:	ebffffda 	bl	8ecc <deregister_tm_clones>
    8f60:	e3a03001 	mov	r3, #1
    8f64:	e5c43000 	strb	r3, [r4]
    8f68:	e8bd8010 	pop	{r4, pc}
    8f6c:	0002fed4 	.word	0x0002fed4

00008f70 <frame_dummy>:
    8f70:	e59f0024 	ldr	r0, [pc, #36]	; 8f9c <frame_dummy+0x2c>
    8f74:	e92d4008 	push	{r3, lr}
    8f78:	e5903000 	ldr	r3, [r0]
    8f7c:	e3530000 	cmp	r3, #0
    8f80:	0a000003 	beq	8f94 <frame_dummy+0x24>
    8f84:	e59f3014 	ldr	r3, [pc, #20]	; 8fa0 <frame_dummy+0x30>
    8f88:	e3530000 	cmp	r3, #0
    8f8c:	0a000000 	beq	8f94 <frame_dummy+0x24>
    8f90:	e12fff33 	blx	r3
    8f94:	e8bd4008 	pop	{r3, lr}
    8f98:	eaffffd9 	b	8f04 <register_tm_clones>
    8f9c:	0002f014 	.word	0x0002f014
    8fa0:	00000000 	.word	0x00000000

00008fa4 <__stack_chk_fail>:
    8fa4:	b508      	push	{r3, lr}
    8fa6:	f7ff ee36 	blx	8c14 <_init+0xb4>
    8faa:	f7ff edf0 	blx	8b8c <_init+0x2c>
    8fae:	210b      	movs	r1, #11
    8fb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    8fb4:	f7ff be26 	b.w	8c04 <_init+0xa4>

00008fb8 <Main>:
 *
 * \see sdk_tplus.h
 *      etat.h
 */
int Main(unsigned int size, StructPt *data)
{
    8fb8:	b580      	push	{r7, lr}
    8fba:	b086      	sub	sp, #24
    8fbc:	af00      	add	r7, sp, #0
    8fbe:	6078      	str	r0, [r7, #4]
    8fc0:	6039      	str	r1, [r7, #0]
    8fc2:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    8fc6:	f2c0 0302 	movt	r3, #2
    8fca:	681b      	ldr	r3, [r3, #0]
    8fcc:	617b      	str	r3, [r7, #20]
  NO_SEGMENT No;
  int ret = FCT_OK;
    8fce:	2300      	movs	r3, #0
    8fd0:	613b      	str	r3, [r7, #16]

  // Service call management
  No = ApplicationGetCurrent(); // Return the application number
    8fd2:	f017 fb8f 	bl	206f4 <ApplicationGetCurrent>
    8fd6:	4603      	mov	r3, r0
    8fd8:	73fb      	strb	r3, [r7, #15]
  switch (data->service)
    8fda:	683b      	ldr	r3, [r7, #0]
    8fdc:	885b      	ldrh	r3, [r3, #2]
    8fde:	3b01      	subs	r3, #1
    8fe0:	2b2a      	cmp	r3, #42	; 0x2a
    8fe2:	f200 8139 	bhi.w	9258 <Main+0x2a0>
    8fe6:	a201      	add	r2, pc, #4	; (adr r2, 8fec <Main+0x34>)
    8fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8fec:	000090f7 	.word	0x000090f7
    8ff0:	0000914f 	.word	0x0000914f
    8ff4:	00009163 	.word	0x00009163
    8ff8:	00009259 	.word	0x00009259
    8ffc:	0000912f 	.word	0x0000912f
    9000:	0000913f 	.word	0x0000913f
    9004:	0000911f 	.word	0x0000911f
    9008:	00009259 	.word	0x00009259
    900c:	000090c1 	.word	0x000090c1
    9010:	000090d5 	.word	0x000090d5
    9014:	0000919b 	.word	0x0000919b
    9018:	00009173 	.word	0x00009173
    901c:	00009187 	.word	0x00009187
    9020:	00009259 	.word	0x00009259
    9024:	00009259 	.word	0x00009259
    9028:	00009259 	.word	0x00009259
    902c:	00009259 	.word	0x00009259
    9030:	00009259 	.word	0x00009259
    9034:	00009259 	.word	0x00009259
    9038:	000091af 	.word	0x000091af
    903c:	00009259 	.word	0x00009259
    9040:	00009259 	.word	0x00009259
    9044:	000090e9 	.word	0x000090e9
    9048:	00009259 	.word	0x00009259
    904c:	00009259 	.word	0x00009259
    9050:	00009107 	.word	0x00009107
    9054:	00009259 	.word	0x00009259
    9058:	000091c3 	.word	0x000091c3
    905c:	000091d7 	.word	0x000091d7
    9060:	00009205 	.word	0x00009205
    9064:	00009259 	.word	0x00009259
    9068:	00009259 	.word	0x00009259
    906c:	000091eb 	.word	0x000091eb
    9070:	00009259 	.word	0x00009259
    9074:	00009259 	.word	0x00009259
    9078:	00009221 	.word	0x00009221
    907c:	00009259 	.word	0x00009259
    9080:	00009259 	.word	0x00009259
    9084:	0000923d 	.word	0x0000923d
    9088:	00009259 	.word	0x00009259
    908c:	00009259 	.word	0x00009259
    9090:	00009099 	.word	0x00009099
    9094:	000090ad 	.word	0x000090ad
  {
  case GIVE_YOUR_DOMAIN: // Return application domain to Manager
    ret = give_your_domain(No, NULL, &data->Param.GiveYourType.param_out);
    9098:	683b      	ldr	r3, [r7, #0]
    909a:	3304      	adds	r3, #4
    909c:	7bfa      	ldrb	r2, [r7, #15]
    909e:	4610      	mov	r0, r2
    90a0:	2100      	movs	r1, #0
    90a2:	461a      	mov	r2, r3
    90a4:	f000 f90a 	bl	92bc <give_your_domain>
    90a8:	6138      	str	r0, [r7, #16]
    break;
    90aa:	e0d6      	b.n	925a <Main+0x2a2>

  case AFTER_RESET: // Activated on each terminal reset
    ret = after_reset(No, NULL, &data->Param.AfterReset.param_out);
    90ac:	683b      	ldr	r3, [r7, #0]
    90ae:	3304      	adds	r3, #4
    90b0:	7bfa      	ldrb	r2, [r7, #15]
    90b2:	4610      	mov	r0, r2
    90b4:	2100      	movs	r1, #0
    90b6:	461a      	mov	r2, r3
    90b8:	f000 f936 	bl	9328 <after_reset>
    90bc:	6138      	str	r0, [r7, #16]
    break;
    90be:	e0cc      	b.n	925a <Main+0x2a2>

  case IS_NAME: // Activated when Manager wants to get application name
    ret = is_name(No, NULL, &data->Param.IsName.param_out);
    90c0:	683b      	ldr	r3, [r7, #0]
    90c2:	3304      	adds	r3, #4
    90c4:	7bfa      	ldrb	r2, [r7, #15]
    90c6:	4610      	mov	r0, r2
    90c8:	2100      	movs	r1, #0
    90ca:	461a      	mov	r2, r3
    90cc:	f000 fad2 	bl	9674 <is_name>
    90d0:	6138      	str	r0, [r7, #16]
    break;
    90d2:	e0c2      	b.n	925a <Main+0x2a2>

  case IS_STATE: // Activated at boot and every minute to check if application is initialized
    ret = is_state(No, NULL, &data->Param.IsState.param_out);
    90d4:	683b      	ldr	r3, [r7, #0]
    90d6:	3304      	adds	r3, #4
    90d8:	7bfa      	ldrb	r2, [r7, #15]
    90da:	4610      	mov	r0, r2
    90dc:	2100      	movs	r1, #0
    90de:	461a      	mov	r2, r3
    90e0:	f000 fb18 	bl	9714 <is_state>
    90e4:	6138      	str	r0, [r7, #16]
    break;
    90e6:	e0b8      	b.n	925a <Main+0x2a2>

  case IDLE_MESSAGE: // Activated when Manager goes back to idle, to display its message
    idle_message(No, NULL, NULL);
    90e8:	7bfb      	ldrb	r3, [r7, #15]
    90ea:	4618      	mov	r0, r3
    90ec:	2100      	movs	r1, #0
    90ee:	2200      	movs	r2, #0
    90f0:	f000 fb40 	bl	9774 <idle_message>
    break;
    90f4:	e0b1      	b.n	925a <Main+0x2a2>
    //       can be used with INCENDO.
    // This other prototype is used if the application manages more than one application name.
    // The 'S_ETATOUT' structure allows to know the name selected by the user after pressing the "F" key.
    // This new prototype can be used with SDK version >= 6.5.
    // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    ret = more_function(No, NULL, NULL);
    90f6:	7bfb      	ldrb	r3, [r7, #15]
    90f8:	4618      	mov	r0, r3
    90fa:	2100      	movs	r1, #0
    90fc:	2200      	movs	r2, #0
    90fe:	f000 fb9b 	bl	9838 <more_function>
    9102:	6138      	str	r0, [r7, #16]
    break;
    9104:	e0a9      	b.n	925a <Main+0x2a2>

  case KEYBOARD_EVENT: // Activated when key is pressed
    ret = keyboard_event(No, &data->Param.KeyboardEvent.param_in,
    9106:	683b      	ldr	r3, [r7, #0]
    9108:	1d1a      	adds	r2, r3, #4
    910a:	683b      	ldr	r3, [r7, #0]
    910c:	3308      	adds	r3, #8
    910e:	7bf9      	ldrb	r1, [r7, #15]
    9110:	4608      	mov	r0, r1
    9112:	4611      	mov	r1, r2
    9114:	461a      	mov	r2, r3
    9116:	f000 fbaf 	bl	9878 <keyboard_event>
    911a:	6138      	str	r0, [r7, #16]
        &data->Param.KeyboardEvent.param_out);
    break;
    911c:	e09d      	b.n	925a <Main+0x2a2>

  case STATE: // Activated on "F" key: Consultation->State, to print terminal content receipt
    ret = state(No, NULL, NULL);
    911e:	7bfb      	ldrb	r3, [r7, #15]
    9120:	4618      	mov	r0, r3
    9122:	2100      	movs	r1, #0
    9124:	2200      	movs	r2, #0
    9126:	f000 fc23 	bl	9970 <state>
    912a:	6138      	str	r0, [r7, #16]
    break;
    912c:	e095      	b.n	925a <Main+0x2a2>

  case CONSULT: // Activated on "F" key: Consultation->Transactions, to print transaction totals receipt
    ret = consult(No, NULL, NULL);
    912e:	7bfb      	ldrb	r3, [r7, #15]
    9130:	4618      	mov	r0, r3
    9132:	2100      	movs	r1, #0
    9134:	2200      	movs	r2, #0
    9136:	f000 fc93 	bl	9a60 <consult>
    913a:	6138      	str	r0, [r7, #16]
    break;
    913c:	e08d      	b.n	925a <Main+0x2a2>

  case MCALL: // Activated on "F" key: Consultation->Call->Planning of Call, to print host call planning receipt
    ret = mcall(No, NULL, NULL);
    913e:	7bfb      	ldrb	r3, [r7, #15]
    9140:	4618      	mov	r0, r3
    9142:	2100      	movs	r1, #0
    9144:	2200      	movs	r2, #0
    9146:	f000 fce9 	bl	9b1c <mcall>
    914a:	6138      	str	r0, [r7, #16]
    break;
    914c:	e085      	b.n	925a <Main+0x2a2>

  case IS_TIME_FUNCTION: // Activated every minute, do you need the peripherals at the next call of time_function()?
    ret = is_time_function(No, NULL, &data->Param.IsTimeFunction.param_out);
    914e:	683b      	ldr	r3, [r7, #0]
    9150:	3304      	adds	r3, #4
    9152:	7bfa      	ldrb	r2, [r7, #15]
    9154:	4610      	mov	r0, r2
    9156:	2100      	movs	r1, #0
    9158:	461a      	mov	r2, r3
    915a:	f000 fd3d 	bl	9bd8 <is_time_function>
    915e:	6138      	str	r0, [r7, #16]
    break;
    9160:	e07b      	b.n	925a <Main+0x2a2>

  case TIME_FUNCTION: // Activated every minute, to execute automatic periodic functions
    ret = time_function(No, NULL, NULL);
    9162:	7bfb      	ldrb	r3, [r7, #15]
    9164:	4618      	mov	r0, r3
    9166:	2100      	movs	r1, #0
    9168:	2200      	movs	r2, #0
    916a:	f000 fd65 	bl	9c38 <time_function>
    916e:	6138      	str	r0, [r7, #16]
    break;
    9170:	e073      	b.n	925a <Main+0x2a2>

  case IS_CHANGE_INIT: // Activated on "F" key: Initialization->Parameters->List, Conditions for changing Manager parameters?
    ret = is_change_init(No, NULL, &data->Param.IsChangeInit.param_out);
    9172:	683b      	ldr	r3, [r7, #0]
    9174:	3304      	adds	r3, #4
    9176:	7bfa      	ldrb	r2, [r7, #15]
    9178:	4610      	mov	r0, r2
    917a:	2100      	movs	r1, #0
    917c:	461a      	mov	r2, r3
    917e:	f000 fd8f 	bl	9ca0 <is_change_init>
    9182:	6138      	str	r0, [r7, #16]
    break;
    9184:	e069      	b.n	925a <Main+0x2a2>

  case MODIF_PARAM: // Activated on "F" key: Initialization->Parameters->List, Manager reports parameters changed.
    ret = modif_param(No, &data->Param.ModifParam.param_in, NULL);
    9186:	683b      	ldr	r3, [r7, #0]
    9188:	3304      	adds	r3, #4
    918a:	7bfa      	ldrb	r2, [r7, #15]
    918c:	4610      	mov	r0, r2
    918e:	4619      	mov	r1, r3
    9190:	2200      	movs	r2, #0
    9192:	f000 fdd7 	bl	9d44 <modif_param>
    9196:	6138      	str	r0, [r7, #16]
    break;
    9198:	e05f      	b.n	925a <Main+0x2a2>

  case IS_EVOL_PG: // Activated on "F" key: Evolution->Load->Local or RemoteLoad, Conditions for application downloading?
    ret = is_evol_pg(No, NULL, &data->Param.IsEvolPg.param_out);
    919a:	683b      	ldr	r3, [r7, #0]
    919c:	3304      	adds	r3, #4
    919e:	7bfa      	ldrb	r2, [r7, #15]
    91a0:	4610      	mov	r0, r2
    91a2:	2100      	movs	r1, #0
    91a4:	461a      	mov	r2, r3
    91a6:	f000 fe19 	bl	9ddc <is_evol_pg>
    91aa:	6138      	str	r0, [r7, #16]
    break;
    91ac:	e055      	b.n	925a <Main+0x2a2>

  case IS_DELETE: // Activated on "F" key: Deletion, Conditions for application deletion?
    ret = is_delete(No, NULL, &data->Param.IsDelete.param_out);
    91ae:	683b      	ldr	r3, [r7, #0]
    91b0:	3304      	adds	r3, #4
    91b2:	7bfa      	ldrb	r2, [r7, #15]
    91b4:	4610      	mov	r0, r2
    91b6:	2100      	movs	r1, #0
    91b8:	461a      	mov	r2, r3
    91ba:	f000 fe3f 	bl	9e3c <is_delete>
    91be:	6138      	str	r0, [r7, #16]
    break;
    91c0:	e04b      	b.n	925a <Main+0x2a2>

  case FILE_RECEIVED: // Activated each time Manager received a file from a "parameters" downloading session
    ret = file_received(No, &data->Param.FileReceived.param_in, NULL);
    91c2:	683b      	ldr	r3, [r7, #0]
    91c4:	3304      	adds	r3, #4
    91c6:	7bfa      	ldrb	r2, [r7, #15]
    91c8:	4610      	mov	r0, r2
    91ca:	4619      	mov	r1, r3
    91cc:	2200      	movs	r2, #0
    91ce:	f000 fe55 	bl	9e7c <file_received>
    91d2:	6138      	str	r0, [r7, #16]
    break;
    91d4:	e041      	b.n	925a <Main+0x2a2>

  case MESSAGE_RECEIVED: // Activated each time Manager received a message in its own mailbox for this application
    ret = message_received(No, &data->Param.MessageReceived.param_in, NULL);
    91d6:	683b      	ldr	r3, [r7, #0]
    91d8:	3304      	adds	r3, #4
    91da:	7bfa      	ldrb	r2, [r7, #15]
    91dc:	4610      	mov	r0, r2
    91de:	4619      	mov	r1, r3
    91e0:	2200      	movs	r2, #0
    91e2:	f000 ff1d 	bl	a020 <message_received>
    91e6:	6138      	str	r0, [r7, #16]
    break;
    91e8:	e037      	b.n	925a <Main+0x2a2>

  case IS_CARD_SPECIFIC: // Activated when card inserted card swiped or manually entry, do you want to process the card?
    ret = is_card_specific(No, &data->Param.IsCardSpecific.param_in,
    91ea:	683b      	ldr	r3, [r7, #0]
    91ec:	f503 729a 	add.w	r2, r3, #308	; 0x134
    91f0:	683b      	ldr	r3, [r7, #0]
    91f2:	3304      	adds	r3, #4
    91f4:	7bf9      	ldrb	r1, [r7, #15]
    91f6:	4608      	mov	r0, r1
    91f8:	4611      	mov	r1, r2
    91fa:	461a      	mov	r2, r3
    91fc:	f000 ff6e 	bl	a0dc <is_card_specific>
    9200:	6138      	str	r0, [r7, #16]
        &data->Param.IsCardSpecific.param_out);
    break;
    9202:	e02a      	b.n	925a <Main+0x2a2>

  case CARD_INSIDE: // Activated when the card is specific, the application process the card in transparent mode
    ret = card_inside(No, &data->Param.CardInside.param_in,
    9204:	683b      	ldr	r3, [r7, #0]
    9206:	1d1a      	adds	r2, r3, #4
    9208:	683b      	ldr	r3, [r7, #0]
    920a:	f503 535a 	add.w	r3, r3, #13952	; 0x3680
    920e:	3320      	adds	r3, #32
    9210:	7bf9      	ldrb	r1, [r7, #15]
    9212:	4608      	mov	r0, r1
    9214:	4611      	mov	r1, r2
    9216:	461a      	mov	r2, r3
    9218:	f000 ff90 	bl	a13c <card_inside>
    921c:	6138      	str	r0, [r7, #16]
        &data->Param.CardInside. param_out);
    break;
    921e:	e01c      	b.n	925a <Main+0x2a2>

  case IS_FOR_YOU_AFTER:
    ret = is_for_you_after(No, &data->Param.IsForYouAfter.param_in,
    9220:	683b      	ldr	r3, [r7, #0]
    9222:	1d1a      	adds	r2, r3, #4
    9224:	683b      	ldr	r3, [r7, #0]
    9226:	f503 535a 	add.w	r3, r3, #13952	; 0x3680
    922a:	3320      	adds	r3, #32
    922c:	7bf9      	ldrb	r1, [r7, #15]
    922e:	4608      	mov	r0, r1
    9230:	4611      	mov	r1, r2
    9232:	461a      	mov	r2, r3
    9234:	f000 ffaa 	bl	a18c <is_for_you_after>
    9238:	6138      	str	r0, [r7, #16]
        &data->Param.IsForYouAfter.param_out);
    break;
    923a:	e00e      	b.n	925a <Main+0x2a2>

  case DEBIT_NON_EMV:
    ret = debit_non_emv(No, &data->Param.DebitNonEmv.param_in,
    923c:	683b      	ldr	r3, [r7, #0]
    923e:	1d1a      	adds	r2, r3, #4
    9240:	683b      	ldr	r3, [r7, #0]
    9242:	f503 535a 	add.w	r3, r3, #13952	; 0x3680
    9246:	3320      	adds	r3, #32
    9248:	7bf9      	ldrb	r1, [r7, #15]
    924a:	4608      	mov	r0, r1
    924c:	4611      	mov	r1, r2
    924e:	461a      	mov	r2, r3
    9250:	f001 f86c 	bl	a32c <debit_non_emv>
    9254:	6138      	str	r0, [r7, #16]
        &data->Param.DebitNonEmv.param_out);
    break;
    9256:	e000      	b.n	925a <Main+0x2a2>
  case IS_CARD_EMV_FOR_YOU:
  case DEBIT_EMV:
  case SELECT_FUNCTION: // French Bank Domain
  case SELECT_FUNCTION_EMV: // French Bank Domain
  default:
    break;
    9258:	bf00      	nop
  }

  return ret;
    925a:	693b      	ldr	r3, [r7, #16]
}
    925c:	4618      	mov	r0, r3
    925e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9262:	f2c0 0302 	movt	r3, #2
    9266:	697a      	ldr	r2, [r7, #20]
    9268:	681b      	ldr	r3, [r3, #0]
    926a:	429a      	cmp	r2, r3
    926c:	d001      	beq.n	9272 <Main+0x2ba>
    926e:	f7ff fe99 	bl	8fa4 <__stack_chk_fail>
    9272:	f107 0718 	add.w	r7, r7, #24
    9276:	46bd      	mov	sp, r7
    9278:	bd80      	pop	{r7, pc}
    927a:	bf00      	nop

0000927c <Progress>:

// *****************************************************
// Progress bar counter (See after_reset() service call)
// *****************************************************
static T_GL_COORD Progress(T_GL_COORD sValue) // This function is called periodically to update the progress bar of the dialog box.
{                                             // The value received as parameter corresponds to the current value of the progress bar.
    927c:	b580      	push	{r7, lr}
    927e:	b084      	sub	sp, #16
    9280:	af00      	add	r7, sp, #0
    9282:	6078      	str	r0, [r7, #4]
    9284:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9288:	f2c0 0302 	movt	r3, #2
    928c:	681b      	ldr	r3, [r3, #0]
    928e:	60fb      	str	r3, [r7, #12]
	Telium_Ttestall(0, 2);                    // When this value reaches the maximum, the dialog is automatically closed.
    9290:	2000      	movs	r0, #0
    9292:	2102      	movs	r1, #2
    9294:	f016 fd30 	bl	1fcf8 <Telium_Ttestall>

	return sValue+1;
    9298:	687b      	ldr	r3, [r7, #4]
    929a:	3301      	adds	r3, #1
}
    929c:	4618      	mov	r0, r3
    929e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    92a2:	f2c0 0302 	movt	r3, #2
    92a6:	68fa      	ldr	r2, [r7, #12]
    92a8:	681b      	ldr	r3, [r3, #0]
    92aa:	429a      	cmp	r2, r3
    92ac:	d001      	beq.n	92b2 <Progress+0x36>
    92ae:	f7ff fe79 	bl	8fa4 <__stack_chk_fail>
    92b2:	f107 0710 	add.w	r7, r7, #16
    92b6:	46bd      	mov	sp, r7
    92b8:	bd80      	pop	{r7, pc}
    92ba:	bf00      	nop

000092bc <give_your_domain>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int give_your_domain(NO_SEGMENT no, void *p1, S_INITPARAMOUT *param_out)
{
    92bc:	b580      	push	{r7, lr}
    92be:	b086      	sub	sp, #24
    92c0:	af00      	add	r7, sp, #0
    92c2:	4603      	mov	r3, r0
    92c4:	60b9      	str	r1, [r7, #8]
    92c6:	607a      	str	r2, [r7, #4]
    92c8:	73fb      	strb	r3, [r7, #15]
    92ca:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    92ce:	f2c0 0302 	movt	r3, #2
    92d2:	681b      	ldr	r3, [r3, #0]
    92d4:	617b      	str	r3, [r7, #20]

	// Return application domain to Manager
	// Setting parameters initialization
	param_out->returned_state[param_out->response_number].mask = MSK_ALL_PARAM;  // Accept all
    92d6:	687b      	ldr	r3, [r7, #4]
    92d8:	781b      	ldrb	r3, [r3, #0]
    92da:	687a      	ldr	r2, [r7, #4]
    92dc:	00db      	lsls	r3, r3, #3
    92de:	18d3      	adds	r3, r2, r3
    92e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    92e4:	f2c0 0207 	movt	r2, #7
    92e8:	605a      	str	r2, [r3, #4]
	// International domain
	param_out->returned_state[param_out->response_number].application_type = TYP_EXPORT;
    92ea:	687b      	ldr	r3, [r7, #4]
    92ec:	781b      	ldrb	r3, [r3, #0]
    92ee:	687a      	ldr	r2, [r7, #4]
    92f0:	00db      	lsls	r3, r3, #3
    92f2:	18d3      	adds	r3, r2, r3
    92f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    92f8:	811a      	strh	r2, [r3, #8]
	param_out->response_number++;
    92fa:	687b      	ldr	r3, [r7, #4]
    92fc:	781b      	ldrb	r3, [r3, #0]
    92fe:	3301      	adds	r3, #1
    9300:	b2da      	uxtb	r2, r3
    9302:	687b      	ldr	r3, [r7, #4]
    9304:	701a      	strb	r2, [r3, #0]

	return (FCT_OK);
    9306:	2300      	movs	r3, #0
}
    9308:	4618      	mov	r0, r3
    930a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    930e:	f2c0 0302 	movt	r3, #2
    9312:	697a      	ldr	r2, [r7, #20]
    9314:	681b      	ldr	r3, [r3, #0]
    9316:	429a      	cmp	r2, r3
    9318:	d001      	beq.n	931e <give_your_domain+0x62>
    931a:	f7ff fe43 	bl	8fa4 <__stack_chk_fail>
    931e:	f107 0718 	add.w	r7, r7, #24
    9322:	46bd      	mov	sp, r7
    9324:	bd80      	pop	{r7, pc}
    9326:	bf00      	nop

00009328 <after_reset>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int after_reset(NO_SEGMENT no, void *p1, S_TRANSOUT *param_out)
{
    9328:	b580      	push	{r7, lr}
    932a:	b0b4      	sub	sp, #208	; 0xd0
    932c:	af06      	add	r7, sp, #24
    932e:	4603      	mov	r3, r0
    9330:	60b9      	str	r1, [r7, #8]
    9332:	607a      	str	r2, [r7, #4]
    9334:	73fb      	strb	r3, [r7, #15]
    9336:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    933a:	f2c0 0302 	movt	r3, #2
    933e:	681b      	ldr	r3, [r3, #0]
    9340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	doubleword uiMode;  // Bug in prototype => 2nd parameter (output) on FS_mount returns Mode (FS_WRITEONCE or FS_WRITEMANY)
	// and NOT AccessMode (FS_NOFLAGS or FS_RONLYMOD or FS_WRTMOD)
	T_GL_COORD sValue;
	int iRet;

	first_init(no, &chgt, (unsigned char *)&type); // New software loaded ?
    9344:	7bf9      	ldrb	r1, [r7, #15]
    9346:	f107 0216 	add.w	r2, r7, #22
    934a:	f107 0317 	add.w	r3, r7, #23
    934e:	4608      	mov	r0, r1
    9350:	4611      	mov	r1, r2
    9352:	461a      	mov	r2, r3
    9354:	f017 fcb8 	bl	20cc8 <first_init>
	if (chgt == 0xFF) // Yes, just loaded with first execution
    9358:	7dbb      	ldrb	r3, [r7, #22]
    935a:	2bff      	cmp	r3, #255	; 0xff
    935c:	d103      	bne.n	9366 <after_reset+0x3e>
	{
		raz_init(no); // Reset downloading indicator
    935e:	7bfb      	ldrb	r3, [r7, #15]
    9360:	4618      	mov	r0, r3
    9362:	f017 fcdd 	bl	20d20 <raz_init>
	}

	SEClib_Open();
    9366:	f018 f829 	bl	213bc <SEClib_Open>

	// Create Parameter Disk (See Mapapp.c)
	// ====================================
	// ** Parameters Disk used by FMG library **
	strcpy(xCfg.Label, PARAM_DISK);            // Disk name
    936a:	f64f 63dc 	movw	r3, #65244	; 0xfedc
    936e:	f2c0 0302 	movt	r3, #2
    9372:	f242 4218 	movw	r2, #9240	; 0x2418
    9376:	f2c0 0202 	movt	r2, #2
    937a:	ca07      	ldmia	r2, {r0, r1, r2}
    937c:	c303      	stmia	r3!, {r0, r1}
    937e:	801a      	strh	r2, [r3, #0]
	xCfg.Mode = FS_WRITEONCE;                  // Disk on Flash
    9380:	f64f 63dc 	movw	r3, #65244	; 0xfedc
    9384:	f2c0 0302 	movt	r3, #2
    9388:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    938c:	611a      	str	r2, [r3, #16]
	xCfg.AccessMode	= FS_WRTMOD;               // r/w access
    938e:	f64f 63dc 	movw	r3, #65244	; 0xfedc
    9392:	f2c0 0302 	movt	r3, #2
    9396:	2204      	movs	r2, #4
    9398:	615a      	str	r2, [r3, #20]
	xCfg.NbFichierMax = 20;                     // Max files number
    939a:	f64f 63dc 	movw	r3, #65244	; 0xfedc
    939e:	f2c0 0302 	movt	r3, #2
    93a2:	2214      	movs	r2, #20
    93a4:	619a      	str	r2, [r3, #24]
	xCfg.IdentZone	= FS_WO_ZONE_DATA;         // Zone id
    93a6:	f64f 63dc 	movw	r3, #65244	; 0xfedc
    93aa:	f2c0 0302 	movt	r3, #2
    93ae:	2201      	movs	r2, #1
    93b0:	61da      	str	r2, [r3, #28]
	ulSize = xCfg.NbFichierMax*32768;          // Disk size in bytes
    93b2:	f64f 63dc 	movw	r3, #65244	; 0xfedc
    93b6:	f2c0 0302 	movt	r3, #2
    93ba:	699b      	ldr	r3, [r3, #24]
    93bc:	03da      	lsls	r2, r3, #15
    93be:	f64f 63fc 	movw	r3, #65276	; 0xfefc
    93c2:	f2c0 0302 	movt	r3, #2
    93c6:	601a      	str	r2, [r3, #0]

	// ** All disks created by FFMS and used by FMG library must be mounted before the call to FMG_init() **
	Telium_Sprintf(tcPath, "/%s", PARAM_DISK);
    93c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
    93cc:	4618      	mov	r0, r3
    93ce:	f242 4124 	movw	r1, #9252	; 0x2424
    93d2:	f2c0 0102 	movt	r1, #2
    93d6:	f242 4218 	movw	r2, #9240	; 0x2418
    93da:	f2c0 0202 	movt	r2, #2
    93de:	f017 f96d 	bl	206bc <Telium_Sprintf>
	iRet = FS_mount (tcPath, &uiMode);         // Check if disk already activated (!!! second parameter returns (FS_WRITEONCE or FS_WRITEMANY))
    93e2:	f107 0250 	add.w	r2, r7, #80	; 0x50
    93e6:	f107 0318 	add.w	r3, r7, #24
    93ea:	4610      	mov	r0, r2
    93ec:	4619      	mov	r1, r3
    93ee:	f017 fa5f 	bl	208b0 <FS_mount>
    93f2:	6238      	str	r0, [r7, #32]

	if (iRet != FS_OK) {
    93f4:	6a3b      	ldr	r3, [r7, #32]
    93f6:	2b02      	cmp	r3, #2
    93f8:	f000 8081 	beq.w	94fe <after_reset+0x1d6>
		// == Application added ==
		iRet = FS_dskcreate(&xCfg, &ulSize);   // Create and format the none volatile disk
    93fc:	f64f 60dc 	movw	r0, #65244	; 0xfedc
    9400:	f2c0 0002 	movt	r0, #2
    9404:	f64f 61fc 	movw	r1, #65276	; 0xfefc
    9408:	f2c0 0102 	movt	r1, #2
    940c:	f017 f9cc 	bl	207a8 <FS_dskcreate>
    9410:	6238      	str	r0, [r7, #32]
		CHECK(iRet==FS_OK, lblKO);
    9412:	6a3b      	ldr	r3, [r7, #32]
    9414:	2b02      	cmp	r3, #2
    9416:	f040 811b 	bne.w	9650 <after_reset+0x328>
		iRet = FS_mount(tcPath, &uiMode);      // Activate a disk (!!! second parameter returns (FS_WRITEONCE or FS_WRITEMANY))
    941a:	f107 0250 	add.w	r2, r7, #80	; 0x50
    941e:	f107 0318 	add.w	r3, r7, #24
    9422:	4610      	mov	r0, r2
    9424:	4619      	mov	r1, r3
    9426:	f017 fa43 	bl	208b0 <FS_mount>
    942a:	6238      	str	r0, [r7, #32]
		CHECK(iRet==FS_OK, lblKO);
    942c:	6a3b      	ldr	r3, [r7, #32]
    942e:	2b02      	cmp	r3, #2
    9430:	f040 810e 	bne.w	9650 <after_reset+0x328>
		iRet = FMG_Init();                     // Initialize File ManaGement
    9434:	f013 fa76 	bl	1c924 <FMG_Init>
    9438:	6238      	str	r0, [r7, #32]
		CHECK(iRet==FMG_SUCCESS, lblKO);
    943a:	6a3b      	ldr	r3, [r7, #32]
    943c:	2b0a      	cmp	r3, #10
    943e:	f040 8107 	bne.w	9650 <after_reset+0x328>

		iRet = appReset();                     // Reset application parameters (Flash)
    9442:	f006 f827 	bl	f494 <appReset>
    9446:	6238      	str	r0, [r7, #32]
		CHECK(iRet>=0, lblKO);
    9448:	6a3b      	ldr	r3, [r7, #32]
    944a:	2b00      	cmp	r3, #0
    944c:	f2c0 8100 	blt.w	9650 <after_reset+0x328>

		iRet = appPut(appCmpDat, (char*)getAppCmpDat(), lenCmpDat);  // Store compiler date/time (See Mapapp.c)
    9450:	f005 ffb6 	bl	f3c0 <getAppCmpDat>
    9454:	4603      	mov	r3, r0
    9456:	2001      	movs	r0, #1
    9458:	4619      	mov	r1, r3
    945a:	220b      	movs	r2, #11
    945c:	f006 f8c6 	bl	f5ec <appPut>
    9460:	6238      	str	r0, [r7, #32]
		CHECK(iRet>=0, lblKO);
    9462:	6a3b      	ldr	r3, [r7, #32]
    9464:	2b00      	cmp	r3, #0
    9466:	f2c0 80f3 	blt.w	9650 <after_reset+0x328>
		iRet = appPut(appCmpTim, (char*)getAppCmpTim(), lenCmpTim);
    946a:	f005 ffc5 	bl	f3f8 <getAppCmpTim>
    946e:	4603      	mov	r3, r0
    9470:	2002      	movs	r0, #2
    9472:	4619      	mov	r1, r3
    9474:	2208      	movs	r2, #8
    9476:	f006 f8b9 	bl	f5ec <appPut>
    947a:	6238      	str	r0, [r7, #32]
		CHECK(iRet>=0, lblKO);
    947c:	6a3b      	ldr	r3, [r7, #32]
    947e:	2b00      	cmp	r3, #0
    9480:	f2c0 80e6 	blt.w	9650 <after_reset+0x328>

		GL_Dialog_Progress(gGoalGraphicLibInstance, NULL, "New Software\nReset In Progress", NULL, NULL, 0, 100, Progress, GL_BUTTON_NONE, GL_TIME_INFINITE);
    9484:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    9488:	f2c0 0302 	movt	r3, #2
    948c:	681a      	ldr	r2, [r3, #0]
    948e:	2300      	movs	r3, #0
    9490:	9300      	str	r3, [sp, #0]
    9492:	2300      	movs	r3, #0
    9494:	9301      	str	r3, [sp, #4]
    9496:	2364      	movs	r3, #100	; 0x64
    9498:	9302      	str	r3, [sp, #8]
    949a:	f249 237d 	movw	r3, #37501	; 0x927d
    949e:	f2c0 0300 	movt	r3, #0
    94a2:	9303      	str	r3, [sp, #12]
    94a4:	2300      	movs	r3, #0
    94a6:	9304      	str	r3, [sp, #16]
    94a8:	f04f 33ff 	mov.w	r3, #4294967295
    94ac:	9305      	str	r3, [sp, #20]
    94ae:	4610      	mov	r0, r2
    94b0:	2100      	movs	r1, #0
    94b2:	f242 4228 	movw	r2, #9256	; 0x2428
    94b6:	f2c0 0202 	movt	r2, #2
    94ba:	2300      	movs	r3, #0
    94bc:	f018 f856 	bl	2156c <GL_Dialog_Progress>
		sValue = 100;
    94c0:	2364      	movs	r3, #100	; 0x64
    94c2:	61fb      	str	r3, [r7, #28]
		GL_Dialog_Progress(gGoalGraphicLibInstance, NULL, "New Software\nReset Done", NULL, &sValue, 1, 101, NULL, GL_BUTTON_NONE, 3*1000);
    94c4:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    94c8:	f2c0 0302 	movt	r3, #2
    94cc:	681b      	ldr	r3, [r3, #0]
    94ce:	f107 021c 	add.w	r2, r7, #28
    94d2:	9200      	str	r2, [sp, #0]
    94d4:	2201      	movs	r2, #1
    94d6:	9201      	str	r2, [sp, #4]
    94d8:	2265      	movs	r2, #101	; 0x65
    94da:	9202      	str	r2, [sp, #8]
    94dc:	2200      	movs	r2, #0
    94de:	9203      	str	r2, [sp, #12]
    94e0:	2200      	movs	r2, #0
    94e2:	9204      	str	r2, [sp, #16]
    94e4:	f640 32b8 	movw	r2, #3000	; 0xbb8
    94e8:	9205      	str	r2, [sp, #20]
    94ea:	4618      	mov	r0, r3
    94ec:	2100      	movs	r1, #0
    94ee:	f242 4248 	movw	r2, #9288	; 0x2448
    94f2:	f2c0 0202 	movt	r2, #2
    94f6:	2300      	movs	r3, #0
    94f8:	f018 f838 	bl	2156c <GL_Dialog_Progress>
    94fc:	e0a8      	b.n	9650 <after_reset+0x328>

	} else {

		iRet = FMG_Init();                                // Initialize File ManaGement
    94fe:	f013 fa11 	bl	1c924 <FMG_Init>
    9502:	6238      	str	r0, [r7, #32]
		CHECK(iRet==FMG_INIT_OK, lblKO);
    9504:	6a3b      	ldr	r3, [r7, #32]
    9506:	2b1e      	cmp	r3, #30
    9508:	f040 80a2 	bne.w	9650 <after_reset+0x328>

		iRet = appGet(appCmpDat, tcAppDat, lenCmpDat+1);  // Retrieve compiler date/time (See Mapapp.c)
    950c:	f107 0338 	add.w	r3, r7, #56	; 0x38
    9510:	2001      	movs	r0, #1
    9512:	4619      	mov	r1, r3
    9514:	220c      	movs	r2, #12
    9516:	f006 f8d1 	bl	f6bc <appGet>
    951a:	6238      	str	r0, [r7, #32]
		CHECK(iRet>=0, lblKO);
    951c:	6a3b      	ldr	r3, [r7, #32]
    951e:	2b00      	cmp	r3, #0
    9520:	f2c0 8096 	blt.w	9650 <after_reset+0x328>
		iRet = appGet(appCmpTim, tcAppTim, lenCmpTim+1);
    9524:	f107 0324 	add.w	r3, r7, #36	; 0x24
    9528:	2002      	movs	r0, #2
    952a:	4619      	mov	r1, r3
    952c:	2209      	movs	r2, #9
    952e:	f006 f8c5 	bl	f6bc <appGet>
    9532:	6238      	str	r0, [r7, #32]
		CHECK(iRet>=0, lblKO);
    9534:	6a3b      	ldr	r3, [r7, #32]
    9536:	2b00      	cmp	r3, #0
    9538:	f2c0 808a 	blt.w	9650 <after_reset+0x328>
		// Check compiler date/time
		if( (strcmp(tcAppDat, getAppCmpDat()) == 0) && (strcmp(tcAppTim, getAppCmpTim()) == 0)) {
    953c:	f005 ff40 	bl	f3c0 <getAppCmpDat>
    9540:	4603      	mov	r3, r0
    9542:	f107 0238 	add.w	r2, r7, #56	; 0x38
    9546:	4610      	mov	r0, r2
    9548:	4619      	mov	r1, r3
    954a:	f7ff ebc8 	blx	8cdc <_init+0x17c>
    954e:	4603      	mov	r3, r0
    9550:	2b00      	cmp	r3, #0
    9552:	d10b      	bne.n	956c <after_reset+0x244>
    9554:	f005 ff50 	bl	f3f8 <getAppCmpTim>
    9558:	4603      	mov	r3, r0
    955a:	f107 0224 	add.w	r2, r7, #36	; 0x24
    955e:	4610      	mov	r0, r2
    9560:	4619      	mov	r1, r3
    9562:	f7ff ebbc 	blx	8cdc <_init+0x17c>
    9566:	4603      	mov	r3, r0
    9568:	2b00      	cmp	r3, #0
    956a:	d071      	beq.n	9650 <after_reset+0x328>
			// == Application already upto date ==
		} else {
			// == Application updated ==
			if ((strcmp(tcAppDat, getAppCmpDat()) != 0) || (strcmp(tcAppTim, getAppCmpTim()) != 0)) {
    956c:	f005 ff28 	bl	f3c0 <getAppCmpDat>
    9570:	4603      	mov	r3, r0
    9572:	f107 0238 	add.w	r2, r7, #56	; 0x38
    9576:	4610      	mov	r0, r2
    9578:	4619      	mov	r1, r3
    957a:	f7ff ebb0 	blx	8cdc <_init+0x17c>
    957e:	4603      	mov	r3, r0
    9580:	2b00      	cmp	r3, #0
    9582:	d10b      	bne.n	959c <after_reset+0x274>
    9584:	f005 ff38 	bl	f3f8 <getAppCmpTim>
    9588:	4603      	mov	r3, r0
    958a:	f107 0224 	add.w	r2, r7, #36	; 0x24
    958e:	4610      	mov	r0, r2
    9590:	4619      	mov	r1, r3
    9592:	f7ff eba4 	blx	8cdc <_init+0x17c>
    9596:	4603      	mov	r3, r0
    9598:	2b00      	cmp	r3, #0
    959a:	d005      	beq.n	95a8 <after_reset+0x280>
				iRet = appReset();                        // Reset application parameters (Flash)
    959c:	f005 ff7a 	bl	f494 <appReset>
    95a0:	6238      	str	r0, [r7, #32]
				CHECK(iRet>=0, lblKO);
    95a2:	6a3b      	ldr	r3, [r7, #32]
    95a4:	2b00      	cmp	r3, #0
    95a6:	db53      	blt.n	9650 <after_reset+0x328>

			}

			iRet = appPut(appCmpDat, (char*)getAppCmpDat(), lenCmpDat); // Store compiler date/time (See Mapapp.c)
    95a8:	f005 ff0a 	bl	f3c0 <getAppCmpDat>
    95ac:	4603      	mov	r3, r0
    95ae:	2001      	movs	r0, #1
    95b0:	4619      	mov	r1, r3
    95b2:	220b      	movs	r2, #11
    95b4:	f006 f81a 	bl	f5ec <appPut>
    95b8:	6238      	str	r0, [r7, #32]
			CHECK(iRet>=0, lblKO);
    95ba:	6a3b      	ldr	r3, [r7, #32]
    95bc:	2b00      	cmp	r3, #0
    95be:	db47      	blt.n	9650 <after_reset+0x328>
			iRet = appPut(appCmpTim, (char*)getAppCmpTim(), lenCmpTim);
    95c0:	f005 ff1a 	bl	f3f8 <getAppCmpTim>
    95c4:	4603      	mov	r3, r0
    95c6:	2002      	movs	r0, #2
    95c8:	4619      	mov	r1, r3
    95ca:	2208      	movs	r2, #8
    95cc:	f006 f80e 	bl	f5ec <appPut>
    95d0:	6238      	str	r0, [r7, #32]
			CHECK(iRet>=0, lblKO);
    95d2:	6a3b      	ldr	r3, [r7, #32]
    95d4:	2b00      	cmp	r3, #0
    95d6:	db3b      	blt.n	9650 <after_reset+0x328>

			GL_Dialog_Progress(gGoalGraphicLibInstance, NULL, "Update Software\nUpdate In Progress",
    95d8:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    95dc:	f2c0 0302 	movt	r3, #2
    95e0:	681a      	ldr	r2, [r3, #0]
    95e2:	2300      	movs	r3, #0
    95e4:	9300      	str	r3, [sp, #0]
    95e6:	2300      	movs	r3, #0
    95e8:	9301      	str	r3, [sp, #4]
    95ea:	2364      	movs	r3, #100	; 0x64
    95ec:	9302      	str	r3, [sp, #8]
    95ee:	f249 237d 	movw	r3, #37501	; 0x927d
    95f2:	f2c0 0300 	movt	r3, #0
    95f6:	9303      	str	r3, [sp, #12]
    95f8:	2300      	movs	r3, #0
    95fa:	9304      	str	r3, [sp, #16]
    95fc:	f04f 33ff 	mov.w	r3, #4294967295
    9600:	9305      	str	r3, [sp, #20]
    9602:	4610      	mov	r0, r2
    9604:	2100      	movs	r1, #0
    9606:	f242 4260 	movw	r2, #9312	; 0x2460
    960a:	f2c0 0202 	movt	r2, #2
    960e:	2300      	movs	r3, #0
    9610:	f017 ffac 	bl	2156c <GL_Dialog_Progress>
					NULL, NULL, 0, 100, Progress, GL_BUTTON_NONE, GL_TIME_INFINITE);
			sValue = 100;
    9614:	2364      	movs	r3, #100	; 0x64
    9616:	61fb      	str	r3, [r7, #28]
			GL_Dialog_Progress(gGoalGraphicLibInstance, NULL, "Update Software\nUpdate Done", NULL, &sValue, 1, 101, NULL, GL_BUTTON_NONE, 3*1000);
    9618:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    961c:	f2c0 0302 	movt	r3, #2
    9620:	681b      	ldr	r3, [r3, #0]
    9622:	f107 021c 	add.w	r2, r7, #28
    9626:	9200      	str	r2, [sp, #0]
    9628:	2201      	movs	r2, #1
    962a:	9201      	str	r2, [sp, #4]
    962c:	2265      	movs	r2, #101	; 0x65
    962e:	9202      	str	r2, [sp, #8]
    9630:	2200      	movs	r2, #0
    9632:	9203      	str	r2, [sp, #12]
    9634:	2200      	movs	r2, #0
    9636:	9204      	str	r2, [sp, #16]
    9638:	f640 32b8 	movw	r2, #3000	; 0xbb8
    963c:	9205      	str	r2, [sp, #20]
    963e:	4618      	mov	r0, r3
    9640:	2100      	movs	r1, #0
    9642:	f242 4284 	movw	r2, #9348	; 0x2484
    9646:	f2c0 0202 	movt	r2, #2
    964a:	2300      	movs	r3, #0
    964c:	f017 ff8e 	bl	2156c <GL_Dialog_Progress>

		}
	}

	lblKO:
	return FCT_OK;
    9650:	2300      	movs	r3, #0
}
    9652:	4618      	mov	r0, r3
    9654:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9658:	f2c0 0302 	movt	r3, #2
    965c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
    9660:	681b      	ldr	r3, [r3, #0]
    9662:	429a      	cmp	r2, r3
    9664:	d001      	beq.n	966a <after_reset+0x342>
    9666:	f7ff fc9d 	bl	8fa4 <__stack_chk_fail>
    966a:	f107 07b8 	add.w	r7, r7, #184	; 0xb8
    966e:	46bd      	mov	sp, r7
    9670:	bd80      	pop	{r7, pc}
    9672:	bf00      	nop

00009674 <is_name>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int is_name(NO_SEGMENT no, void *p1, S_ETATOUT *param_out)
{
    9674:	b580      	push	{r7, lr}
    9676:	b086      	sub	sp, #24
    9678:	af00      	add	r7, sp, #0
    967a:	4603      	mov	r3, r0
    967c:	60b9      	str	r1, [r7, #8]
    967e:	607a      	str	r2, [r7, #4]
    9680:	73fb      	strb	r3, [r7, #15]
    9682:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9686:	f2c0 0302 	movt	r3, #2
    968a:	681b      	ldr	r3, [r3, #0]
    968c:	617b      	str	r3, [r7, #20]
	// Report application name to Manager cannot return the family name
	// because the T_APPNAME type used in the "is_name" function is too short to store
	// the FAMILY NAME (T_APPNAME length = 12+1 FAMILY NAME length =15+1)
	// we use the binary name instead (without extension, and whose length is 11+1)
	memset(param_out->returned_state[param_out->response_number].appname,0, sizeof(param_out->returned_state[param_out->response_number].appname));
    968e:	687b      	ldr	r3, [r7, #4]
    9690:	781b      	ldrb	r3, [r3, #0]
    9692:	461a      	mov	r2, r3
    9694:	4613      	mov	r3, r2
    9696:	009b      	lsls	r3, r3, #2
    9698:	189b      	adds	r3, r3, r2
    969a:	009b      	lsls	r3, r3, #2
    969c:	687a      	ldr	r2, [r7, #4]
    969e:	18d3      	adds	r3, r2, r3
    96a0:	3304      	adds	r3, #4
    96a2:	4618      	mov	r0, r3
    96a4:	2100      	movs	r1, #0
    96a6:	220d      	movs	r2, #13
    96a8:	f7ff ea88 	blx	8bbc <_init+0x5c>
	strncpy(param_out->returned_state[param_out->response_number].appname, fileName, sizeof(param_out->returned_state[param_out->response_number].appname) - 1);
    96ac:	687b      	ldr	r3, [r7, #4]
    96ae:	781b      	ldrb	r3, [r3, #0]
    96b0:	461a      	mov	r2, r3
    96b2:	4613      	mov	r3, r2
    96b4:	009b      	lsls	r3, r3, #2
    96b6:	189b      	adds	r3, r3, r2
    96b8:	009b      	lsls	r3, r3, #2
    96ba:	687a      	ldr	r2, [r7, #4]
    96bc:	18d3      	adds	r3, r2, r3
    96be:	3304      	adds	r3, #4
    96c0:	4618      	mov	r0, r3
    96c2:	f64f 7118 	movw	r1, #65304	; 0xff18
    96c6:	f2c0 0102 	movt	r1, #2
    96ca:	220c      	movs	r2, #12
    96cc:	f7ff eb0c 	blx	8ce8 <_init+0x188>
	param_out->returned_state[param_out->response_number].no_appli = no;
    96d0:	687b      	ldr	r3, [r7, #4]
    96d2:	781b      	ldrb	r3, [r3, #0]
    96d4:	461a      	mov	r2, r3
    96d6:	6879      	ldr	r1, [r7, #4]
    96d8:	4613      	mov	r3, r2
    96da:	009b      	lsls	r3, r3, #2
    96dc:	189b      	adds	r3, r3, r2
    96de:	009b      	lsls	r3, r3, #2
    96e0:	18cb      	adds	r3, r1, r3
    96e2:	3308      	adds	r3, #8
    96e4:	7bfa      	ldrb	r2, [r7, #15]
    96e6:	725a      	strb	r2, [r3, #9]
	param_out->response_number++;
    96e8:	687b      	ldr	r3, [r7, #4]
    96ea:	781b      	ldrb	r3, [r3, #0]
    96ec:	3301      	adds	r3, #1
    96ee:	b2da      	uxtb	r2, r3
    96f0:	687b      	ldr	r3, [r7, #4]
    96f2:	701a      	strb	r2, [r3, #0]

	return (FCT_OK);
    96f4:	2300      	movs	r3, #0
}
    96f6:	4618      	mov	r0, r3
    96f8:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    96fc:	f2c0 0302 	movt	r3, #2
    9700:	697a      	ldr	r2, [r7, #20]
    9702:	681b      	ldr	r3, [r3, #0]
    9704:	429a      	cmp	r2, r3
    9706:	d001      	beq.n	970c <is_name+0x98>
    9708:	f7ff fc4c 	bl	8fa4 <__stack_chk_fail>
    970c:	f107 0718 	add.w	r7, r7, #24
    9710:	46bd      	mov	sp, r7
    9712:	bd80      	pop	{r7, pc}

00009714 <is_state>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int is_state(NO_SEGMENT no, void *p1, S_ETATOUT *param_out)
{
    9714:	b580      	push	{r7, lr}
    9716:	b086      	sub	sp, #24
    9718:	af00      	add	r7, sp, #0
    971a:	4603      	mov	r3, r0
    971c:	60b9      	str	r1, [r7, #8]
    971e:	607a      	str	r2, [r7, #4]
    9720:	73fb      	strb	r3, [r7, #15]
    9722:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9726:	f2c0 0302 	movt	r3, #2
    972a:	681b      	ldr	r3, [r3, #0]
    972c:	617b      	str	r3, [r7, #20]
	int ret;

	// Return application state
	param_out->returned_state[param_out->response_number].state.response = REP_OK;
    972e:	687b      	ldr	r3, [r7, #4]
    9730:	781b      	ldrb	r3, [r3, #0]
    9732:	461a      	mov	r2, r3
    9734:	6879      	ldr	r1, [r7, #4]
    9736:	4613      	mov	r3, r2
    9738:	009b      	lsls	r3, r3, #2
    973a:	189b      	adds	r3, r3, r2
    973c:	009b      	lsls	r3, r3, #2
    973e:	18cb      	adds	r3, r1, r3
    9740:	3310      	adds	r3, #16
    9742:	2200      	movs	r2, #0
    9744:	711a      	strb	r2, [r3, #4]
	ret = is_name(no, PT_NULL, param_out);
    9746:	7bfb      	ldrb	r3, [r7, #15]
    9748:	4618      	mov	r0, r3
    974a:	2100      	movs	r1, #0
    974c:	687a      	ldr	r2, [r7, #4]
    974e:	f7ff ff91 	bl	9674 <is_name>
    9752:	6138      	str	r0, [r7, #16]

	return (ret);
    9754:	693b      	ldr	r3, [r7, #16]
}
    9756:	4618      	mov	r0, r3
    9758:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    975c:	f2c0 0302 	movt	r3, #2
    9760:	697a      	ldr	r2, [r7, #20]
    9762:	681b      	ldr	r3, [r3, #0]
    9764:	429a      	cmp	r2, r3
    9766:	d001      	beq.n	976c <is_state+0x58>
    9768:	f7ff fc1c 	bl	8fa4 <__stack_chk_fail>
    976c:	f107 0718 	add.w	r7, r7, #24
    9770:	46bd      	mov	sp, r7
    9772:	bd80      	pop	{r7, pc}

00009774 <idle_message>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int idle_message(NO_SEGMENT no, void *p1, void *p2)
{
    9774:	b580      	push	{r7, lr}
    9776:	b08a      	sub	sp, #40	; 0x28
    9778:	af00      	add	r7, sp, #0
    977a:	4603      	mov	r3, r0
    977c:	60b9      	str	r1, [r7, #8]
    977e:	607a      	str	r2, [r7, #4]
    9780:	73fb      	strb	r3, [r7, #15]
    9782:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9786:	f2c0 0302 	movt	r3, #2
    978a:	681b      	ldr	r3, [r3, #0]
    978c:	627b      	str	r3, [r7, #36]	; 0x24
	int x = 0;   // time value, it can be customized by developer according to the use case
    978e:	2300      	movs	r3, #0
    9790:	613b      	str	r3, [r7, #16]
	int y = 10;  // time value, it can be customized by developer according to the use case
    9792:	230a      	movs	r3, #10
    9794:	617b      	str	r3, [r7, #20]
	Telium_File_t *hDsp;

	T_GL_HWIDGET GM_Tab_Gw;
	T_GL_HWIDGET label;

	hDsp = Telium_Fopen("DISPLAY", "w*");
    9796:	f242 40a0 	movw	r0, #9376	; 0x24a0
    979a:	f2c0 0002 	movt	r0, #2
    979e:	f242 41a8 	movw	r1, #9384	; 0x24a8
    97a2:	f2c0 0102 	movt	r1, #2
    97a6:	f016 f8b9 	bl	1f91c <Telium_Fopen>
    97aa:	61b8      	str	r0, [r7, #24]

	GM_Tab_Gw = GL_Window_Create(gGoalGraphicLibInstance);
    97ac:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    97b0:	f2c0 0302 	movt	r3, #2
    97b4:	681b      	ldr	r3, [r3, #0]
    97b6:	4618      	mov	r0, r3
    97b8:	f018 fb2c 	bl	21e14 <GL_Window_Create>
    97bc:	61f8      	str	r0, [r7, #28]
	label     = GL_Label_Create(GM_Tab_Gw);
    97be:	69f8      	ldr	r0, [r7, #28]
    97c0:	f018 f858 	bl	21874 <GL_Label_Create>
    97c4:	6238      	str	r0, [r7, #32]

	GL_Widget_SetText(label, idleMsg);
    97c6:	6a38      	ldr	r0, [r7, #32]
    97c8:	f242 31d8 	movw	r1, #9176	; 0x23d8
    97cc:	f2c0 0102 	movt	r1, #2
    97d0:	f018 faa2 	bl	21d18 <GL_Widget_SetText>
	GL_Widget_SetBackAlign(label, GL_ALIGN_CENTER);
    97d4:	6a38      	ldr	r0, [r7, #32]
    97d6:	2100      	movs	r1, #0
    97d8:	f018 f95a 	bl	21a90 <GL_Widget_SetBackAlign>
	GL_Widget_SetFontScale(label, GL_SCALE_MEDIUM);
    97dc:	6a38      	ldr	r0, [r7, #32]
    97de:	f643 71f3 	movw	r1, #16371	; 0x3ff3
    97e2:	f018 f9c1 	bl	21b68 <GL_Widget_SetFontScale>
    97e6:	e000      	b.n	97ea <idle_message+0x76>
		if (Telium_Ttestall(TIMER, y) == TIMER)
		{
			break; // TIMER event has been received from the Telium Manager
		}
	}
	while(1);
    97e8:	bf00      	nop
	GL_Widget_SetBackAlign(label, GL_ALIGN_CENTER);
	GL_Widget_SetFontScale(label, GL_SCALE_MEDIUM);

	do
	{
		GL_Window_Dispatch(GM_Tab_Gw, x); // display the message
    97ea:	693b      	ldr	r3, [r7, #16]
    97ec:	69f8      	ldr	r0, [r7, #28]
    97ee:	4619      	mov	r1, r3
    97f0:	f018 fb22 	bl	21e38 <GL_Window_Dispatch>

		if (Telium_Ttestall(TIMER, y) == TIMER)
    97f4:	697b      	ldr	r3, [r7, #20]
    97f6:	f44f 6080 	mov.w	r0, #1024	; 0x400
    97fa:	4619      	mov	r1, r3
    97fc:	f016 fa7c 	bl	1fcf8 <Telium_Ttestall>
    9800:	4603      	mov	r3, r0
    9802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    9806:	d1ef      	bne.n	97e8 <idle_message+0x74>
		{
			break; // TIMER event has been received from the Telium Manager
    9808:	bf00      	nop
		}
	}
	while(1);

	GL_Widget_Destroy(GM_Tab_Gw);
    980a:	69f8      	ldr	r0, [r7, #28]
    980c:	f018 f8f8 	bl	21a00 <GL_Widget_Destroy>

	Telium_Fclose(hDsp);
    9810:	69b8      	ldr	r0, [r7, #24]
    9812:	f016 f851 	bl	1f8b8 <Telium_Fclose>

	return FCT_OK;
    9816:	2300      	movs	r3, #0
}
    9818:	4618      	mov	r0, r3
    981a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    981e:	f2c0 0302 	movt	r3, #2
    9822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9824:	681b      	ldr	r3, [r3, #0]
    9826:	429a      	cmp	r2, r3
    9828:	d001      	beq.n	982e <idle_message+0xba>
    982a:	f7ff fbbb 	bl	8fa4 <__stack_chk_fail>
    982e:	f107 0728 	add.w	r7, r7, #40	; 0x28
    9832:	46bd      	mov	sp, r7
    9834:	bd80      	pop	{r7, pc}
    9836:	bf00      	nop

00009838 <more_function>:
 *       This other prototype is used if the application manages more than one application name.
 *       The 'S_ETATOUT' structure allows to know the name selected by the user after pressing the "F" key.
 *       This new prototype can be used with SDK version >= 6.5.
 */
int more_function(NO_SEGMENT no, void *p1, void *p2)
{
    9838:	b580      	push	{r7, lr}
    983a:	b086      	sub	sp, #24
    983c:	af00      	add	r7, sp, #0
    983e:	4603      	mov	r3, r0
    9840:	60b9      	str	r1, [r7, #8]
    9842:	607a      	str	r2, [r7, #4]
    9844:	73fb      	strb	r3, [r7, #15]
    9846:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    984a:	f2c0 0302 	movt	r3, #2
    984e:	681b      	ldr	r3, [r3, #0]
    9850:	617b      	str	r3, [r7, #20]
	menuGoalDisplay();
    9852:	f000 fec7 	bl	a5e4 <menuGoalDisplay>

	return FCT_OK;
    9856:	2300      	movs	r3, #0
}
    9858:	4618      	mov	r0, r3
    985a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    985e:	f2c0 0302 	movt	r3, #2
    9862:	697a      	ldr	r2, [r7, #20]
    9864:	681b      	ldr	r3, [r3, #0]
    9866:	429a      	cmp	r2, r3
    9868:	d001      	beq.n	986e <more_function+0x36>
    986a:	f7ff fb9b 	bl	8fa4 <__stack_chk_fail>
    986e:	f107 0718 	add.w	r7, r7, #24
    9872:	46bd      	mov	sp, r7
    9874:	bd80      	pop	{r7, pc}
    9876:	bf00      	nop

00009878 <keyboard_event>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int keyboard_event(NO_SEGMENT noappli, S_KEY *key_in, S_KEY *key_out)
{
    9878:	b580      	push	{r7, lr}
    987a:	b086      	sub	sp, #24
    987c:	af00      	add	r7, sp, #0
    987e:	4603      	mov	r3, r0
    9880:	60b9      	str	r1, [r7, #8]
    9882:	607a      	str	r2, [r7, #4]
    9884:	73fb      	strb	r3, [r7, #15]
    9886:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    988a:	f2c0 0302 	movt	r3, #2
    988e:	681b      	ldr	r3, [r3, #0]
    9890:	617b      	str	r3, [r7, #20]
	// Keyboard management
	switch (key_in->keycode)
    9892:	68bb      	ldr	r3, [r7, #8]
    9894:	681b      	ldr	r3, [r3, #0]
    9896:	3b16      	subs	r3, #22
    9898:	2b23      	cmp	r3, #35	; 0x23
    989a:	d854      	bhi.n	9946 <keyboard_event+0xce>
    989c:	a201      	add	r2, pc, #4	; (adr r2, 98a4 <keyboard_event+0x2c>)
    989e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    98a2:	bf00      	nop
    98a4:	00009935 	.word	0x00009935
    98a8:	0000993d 	.word	0x0000993d
    98ac:	0000993d 	.word	0x0000993d
    98b0:	0000993d 	.word	0x0000993d
    98b4:	00009947 	.word	0x00009947
    98b8:	00009947 	.word	0x00009947
    98bc:	00009947 	.word	0x00009947
    98c0:	00009947 	.word	0x00009947
    98c4:	00009947 	.word	0x00009947
    98c8:	00009947 	.word	0x00009947
    98cc:	0000993d 	.word	0x0000993d
    98d0:	0000993d 	.word	0x0000993d
    98d4:	0000993d 	.word	0x0000993d
    98d8:	0000993d 	.word	0x0000993d
    98dc:	0000993d 	.word	0x0000993d
    98e0:	0000993d 	.word	0x0000993d
    98e4:	0000993d 	.word	0x0000993d
    98e8:	00009947 	.word	0x00009947
    98ec:	0000993d 	.word	0x0000993d
    98f0:	00009947 	.word	0x00009947
    98f4:	00009947 	.word	0x00009947
    98f8:	00009947 	.word	0x00009947
    98fc:	00009947 	.word	0x00009947
    9900:	00009947 	.word	0x00009947
    9904:	00009935 	.word	0x00009935
    9908:	00009947 	.word	0x00009947
    990c:	00009935 	.word	0x00009935
    9910:	00009935 	.word	0x00009935
    9914:	00009935 	.word	0x00009935
    9918:	00009935 	.word	0x00009935
    991c:	00009935 	.word	0x00009935
    9920:	00009935 	.word	0x00009935
    9924:	00009935 	.word	0x00009935
    9928:	00009935 	.word	0x00009935
    992c:	00009935 	.word	0x00009935
    9930:	00009935 	.word	0x00009935
	case N7:
	case N8:
	case N9:
	case T_VAL:
	case T_POINT:
		key_out->keycode = 0; // Inhibit these keys to Manager for International domain
    9934:	687b      	ldr	r3, [r7, #4]
    9936:	2200      	movs	r2, #0
    9938:	601a      	str	r2, [r3, #0]
		break;
    993a:	e009      	b.n	9950 <keyboard_event+0xd8>
	case NAVI_CLEAR:
	case NAVI_OK:
	case UP:
	case DOWN:
	case T_F:                               // do not filter F key and return the same key !
		key_out->keycode=key_in->keycode;   // Return the same key value for keys above !
    993c:	68bb      	ldr	r3, [r7, #8]
    993e:	681a      	ldr	r2, [r3, #0]
    9940:	687b      	ldr	r3, [r7, #4]
    9942:	601a      	str	r2, [r3, #0]
		break;
    9944:	e004      	b.n	9950 <keyboard_event+0xd8>
	default:
		key_out->keycode=key_in->keycode;
    9946:	68bb      	ldr	r3, [r7, #8]
    9948:	681a      	ldr	r2, [r3, #0]
    994a:	687b      	ldr	r3, [r7, #4]
    994c:	601a      	str	r2, [r3, #0]
		break;
    994e:	bf00      	nop
	}

	return (FCT_OK);
    9950:	2300      	movs	r3, #0
}
    9952:	4618      	mov	r0, r3
    9954:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9958:	f2c0 0302 	movt	r3, #2
    995c:	697a      	ldr	r2, [r7, #20]
    995e:	681b      	ldr	r3, [r3, #0]
    9960:	429a      	cmp	r2, r3
    9962:	d001      	beq.n	9968 <keyboard_event+0xf0>
    9964:	f7ff fb1e 	bl	8fa4 <__stack_chk_fail>
    9968:	f107 0718 	add.w	r7, r7, #24
    996c:	46bd      	mov	sp, r7
    996e:	bd80      	pop	{r7, pc}

00009970 <state>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int state(NO_SEGMENT no, void *p1, void *p2)
{
    9970:	b580      	push	{r7, lr}
    9972:	b09a      	sub	sp, #104	; 0x68
    9974:	af02      	add	r7, sp, #8
    9976:	4603      	mov	r3, r0
    9978:	60b9      	str	r1, [r7, #8]
    997a:	607a      	str	r2, [r7, #4]
    997c:	73fb      	strb	r3, [r7, #15]
    997e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9982:	f2c0 0302 	movt	r3, #2
    9986:	681b      	ldr	r3, [r3, #0]
    9988:	65fb      	str	r3, [r7, #92]	; 0x5c
	Telium_Date_t date;
	object_info_t infos;
	Telium_File_t *hPrinter;

	// Print application info
	ObjectGetInfo(OBJECT_TYPE_APPLI, no, &infos); // Retrieve application info
    998a:	7bfa      	ldrb	r2, [r7, #15]
    998c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    9990:	2001      	movs	r0, #1
    9992:	4611      	mov	r1, r2
    9994:	461a      	mov	r2, r3
    9996:	f017 f915 	bl	20bc4 <ObjectGetInfo>

	hPrinter = Telium_Fopen("PRINTER", "w-*"); // Open printer driver
    999a:	f242 40ac 	movw	r0, #9388	; 0x24ac
    999e:	f2c0 0002 	movt	r0, #2
    99a2:	f242 41b4 	movw	r1, #9396	; 0x24b4
    99a6:	f2c0 0102 	movt	r1, #2
    99aa:	f015 ffb7 	bl	1f91c <Telium_Fopen>
    99ae:	6178      	str	r0, [r7, #20]
	if (hPrinter != NULL)
    99b0:	697b      	ldr	r3, [r7, #20]
    99b2:	2b00      	cmp	r3, #0
    99b4:	d044      	beq.n	9a40 <state+0xd0>
	{
		Telium_Pprintf("\x1b""E%s\n""\x1b""F", appName); // Print application name
    99b6:	f242 40b8 	movw	r0, #9400	; 0x24b8
    99ba:	f2c0 0002 	movt	r0, #2
    99be:	f64f 7100 	movw	r1, #65280	; 0xff00
    99c2:	f2c0 0102 	movt	r1, #2
    99c6:	f016 fe41 	bl	2064c <Telium_Pprintf>
		Telium_Pprintf("         STATE         \n"
    99ca:	f242 40c0 	movw	r0, #9408	; 0x24c0
    99ce:	f2c0 0002 	movt	r0, #2
    99d2:	f016 fe3b 	bl	2064c <Telium_Pprintf>
				"Application used as\n"
				"IngeDev Template\n\n");
		Telium_Read_date(&date); // Print date and time
    99d6:	f107 0318 	add.w	r3, r7, #24
    99da:	4618      	mov	r0, r3
    99dc:	f016 fcc2 	bl	20364 <Telium_Read_date>
		Telium_Pprintf(szDate, date.day, date.month, date.year, date.hour, date.minute);
    99e0:	f107 0118 	add.w	r1, r7, #24
    99e4:	f107 0318 	add.w	r3, r7, #24
    99e8:	1c9a      	adds	r2, r3, #2
    99ea:	f107 0318 	add.w	r3, r7, #24
    99ee:	3304      	adds	r3, #4
    99f0:	f107 0018 	add.w	r0, r7, #24
    99f4:	3006      	adds	r0, #6
    99f6:	9000      	str	r0, [sp, #0]
    99f8:	f107 0018 	add.w	r0, r7, #24
    99fc:	3008      	adds	r0, #8
    99fe:	9001      	str	r0, [sp, #4]
    9a00:	f242 30f8 	movw	r0, #9208	; 0x23f8
    9a04:	f2c0 0002 	movt	r0, #2
    9a08:	f016 fe20 	bl	2064c <Telium_Pprintf>
		Telium_Pprintf("File    : %s\n", infos.file_name); // Print application file name
    9a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    9a10:	3314      	adds	r3, #20
    9a12:	f242 5000 	movw	r0, #9472	; 0x2500
    9a16:	f2c0 0002 	movt	r0, #2
    9a1a:	4619      	mov	r1, r3
    9a1c:	f016 fe16 	bl	2064c <Telium_Pprintf>
		Telium_Pprintf("CRC     : %04x\n", infos.crc); // Print application CRC
    9a20:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    9a24:	f242 5010 	movw	r0, #9488	; 0x2510
    9a28:	f2c0 0002 	movt	r0, #2
    9a2c:	4619      	mov	r1, r3
    9a2e:	f016 fe0d 	bl	2064c <Telium_Pprintf>
		Telium_Ttestall(PRINTER, 0);
    9a32:	2002      	movs	r0, #2
    9a34:	2100      	movs	r1, #0
    9a36:	f016 f95f 	bl	1fcf8 <Telium_Ttestall>

		Telium_Fclose(hPrinter); // Close printer driver
    9a3a:	6978      	ldr	r0, [r7, #20]
    9a3c:	f015 ff3c 	bl	1f8b8 <Telium_Fclose>
	}

	return FCT_OK;
    9a40:	2300      	movs	r3, #0
}
    9a42:	4618      	mov	r0, r3
    9a44:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9a48:	f2c0 0302 	movt	r3, #2
    9a4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    9a4e:	681b      	ldr	r3, [r3, #0]
    9a50:	429a      	cmp	r2, r3
    9a52:	d001      	beq.n	9a58 <state+0xe8>
    9a54:	f7ff faa6 	bl	8fa4 <__stack_chk_fail>
    9a58:	f107 0760 	add.w	r7, r7, #96	; 0x60
    9a5c:	46bd      	mov	sp, r7
    9a5e:	bd80      	pop	{r7, pc}

00009a60 <consult>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int consult(NO_SEGMENT no, void *p1, void *p2)
{
    9a60:	b580      	push	{r7, lr}
    9a62:	b08c      	sub	sp, #48	; 0x30
    9a64:	af02      	add	r7, sp, #8
    9a66:	4603      	mov	r3, r0
    9a68:	60b9      	str	r1, [r7, #8]
    9a6a:	607a      	str	r2, [r7, #4]
    9a6c:	73fb      	strb	r3, [r7, #15]
    9a6e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9a72:	f2c0 0302 	movt	r3, #2
    9a76:	681b      	ldr	r3, [r3, #0]
    9a78:	627b      	str	r3, [r7, #36]	; 0x24
	Telium_Date_t date;
	Telium_File_t *hPrinter;

	// Print daily totals
	hPrinter = Telium_Fopen("PRINTER", "w-*"); // Open printer driver
    9a7a:	f242 40ac 	movw	r0, #9388	; 0x24ac
    9a7e:	f2c0 0002 	movt	r0, #2
    9a82:	f242 41b4 	movw	r1, #9396	; 0x24b4
    9a86:	f2c0 0102 	movt	r1, #2
    9a8a:	f015 ff47 	bl	1f91c <Telium_Fopen>
    9a8e:	6178      	str	r0, [r7, #20]
	if (hPrinter != NULL)
    9a90:	697b      	ldr	r3, [r7, #20]
    9a92:	2b00      	cmp	r3, #0
    9a94:	d032      	beq.n	9afc <consult+0x9c>
	{
		Telium_Pprintf("\x1b""E%s\n""\x1b""F", appName); // Print application name
    9a96:	f242 40b8 	movw	r0, #9400	; 0x24b8
    9a9a:	f2c0 0002 	movt	r0, #2
    9a9e:	f64f 7100 	movw	r1, #65280	; 0xff00
    9aa2:	f2c0 0102 	movt	r1, #2
    9aa6:	f016 fdd1 	bl	2064c <Telium_Pprintf>
		Telium_Pprintf("        CONSULT        \n"
    9aaa:	f242 5020 	movw	r0, #9504	; 0x2520
    9aae:	f2c0 0002 	movt	r0, #2
    9ab2:	f016 fdcb 	bl	2064c <Telium_Pprintf>
				"Print daily totals here\n"
				"Number of Debit/Credit \n"
				"Totals of Debit/Credit \n"
				"Number of Cancel\n\n");
		Telium_Read_date(&date); // Print date and time
    9ab6:	f107 0318 	add.w	r3, r7, #24
    9aba:	4618      	mov	r0, r3
    9abc:	f016 fc52 	bl	20364 <Telium_Read_date>
		Telium_Pprintf(szDate, date.day, date.month, date.year, date.hour, date.minute);
    9ac0:	f107 0118 	add.w	r1, r7, #24
    9ac4:	f107 0318 	add.w	r3, r7, #24
    9ac8:	1c9a      	adds	r2, r3, #2
    9aca:	f107 0318 	add.w	r3, r7, #24
    9ace:	3304      	adds	r3, #4
    9ad0:	f107 0018 	add.w	r0, r7, #24
    9ad4:	3006      	adds	r0, #6
    9ad6:	9000      	str	r0, [sp, #0]
    9ad8:	f107 0018 	add.w	r0, r7, #24
    9adc:	3008      	adds	r0, #8
    9ade:	9001      	str	r0, [sp, #4]
    9ae0:	f242 30f8 	movw	r0, #9208	; 0x23f8
    9ae4:	f2c0 0002 	movt	r0, #2
    9ae8:	f016 fdb0 	bl	2064c <Telium_Pprintf>

		Telium_Ttestall(PRINTER, 3*100);
    9aec:	2002      	movs	r0, #2
    9aee:	f44f 7196 	mov.w	r1, #300	; 0x12c
    9af2:	f016 f901 	bl	1fcf8 <Telium_Ttestall>
		Telium_Fclose(hPrinter); // Close printer driver
    9af6:	6978      	ldr	r0, [r7, #20]
    9af8:	f015 fede 	bl	1f8b8 <Telium_Fclose>
	}

	return FCT_OK;
    9afc:	2300      	movs	r3, #0
}
    9afe:	4618      	mov	r0, r3
    9b00:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9b04:	f2c0 0302 	movt	r3, #2
    9b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9b0a:	681b      	ldr	r3, [r3, #0]
    9b0c:	429a      	cmp	r2, r3
    9b0e:	d001      	beq.n	9b14 <consult+0xb4>
    9b10:	f7ff fa48 	bl	8fa4 <__stack_chk_fail>
    9b14:	f107 0728 	add.w	r7, r7, #40	; 0x28
    9b18:	46bd      	mov	sp, r7
    9b1a:	bd80      	pop	{r7, pc}

00009b1c <mcall>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int mcall(NO_SEGMENT no, void *p1, void *p2)
{
    9b1c:	b580      	push	{r7, lr}
    9b1e:	b08c      	sub	sp, #48	; 0x30
    9b20:	af02      	add	r7, sp, #8
    9b22:	4603      	mov	r3, r0
    9b24:	60b9      	str	r1, [r7, #8]
    9b26:	607a      	str	r2, [r7, #4]
    9b28:	73fb      	strb	r3, [r7, #15]
    9b2a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9b2e:	f2c0 0302 	movt	r3, #2
    9b32:	681b      	ldr	r3, [r3, #0]
    9b34:	627b      	str	r3, [r7, #36]	; 0x24
	Telium_Date_t date;
	Telium_File_t *hPrinter;

	// Print call schedule
	hPrinter = Telium_Fopen("PRINTER", "w-*"); // Open printer driver
    9b36:	f242 40ac 	movw	r0, #9388	; 0x24ac
    9b3a:	f2c0 0002 	movt	r0, #2
    9b3e:	f242 41b4 	movw	r1, #9396	; 0x24b4
    9b42:	f2c0 0102 	movt	r1, #2
    9b46:	f015 fee9 	bl	1f91c <Telium_Fopen>
    9b4a:	6178      	str	r0, [r7, #20]
	if (hPrinter != NULL)
    9b4c:	697b      	ldr	r3, [r7, #20]
    9b4e:	2b00      	cmp	r3, #0
    9b50:	d032      	beq.n	9bb8 <mcall+0x9c>
	{
		Telium_Pprintf("\x1b""E%s\n""\x1b""F", appName); // Print application name
    9b52:	f242 40b8 	movw	r0, #9400	; 0x24b8
    9b56:	f2c0 0002 	movt	r0, #2
    9b5a:	f64f 7100 	movw	r1, #65280	; 0xff00
    9b5e:	f2c0 0102 	movt	r1, #2
    9b62:	f016 fd73 	bl	2064c <Telium_Pprintf>
		Telium_Pprintf("         MCALL         \n"
    9b66:	f242 5094 	movw	r0, #9620	; 0x2594
    9b6a:	f2c0 0002 	movt	r0, #2
    9b6e:	f016 fd6d 	bl	2064c <Telium_Pprintf>
				"Planning of call here  \n"
				"Time release batch     \n"
				"Time loading parameters\n"
				"Time loading hotlist\n\n");
		Telium_Read_date(&date); // Print date and time
    9b72:	f107 0318 	add.w	r3, r7, #24
    9b76:	4618      	mov	r0, r3
    9b78:	f016 fbf4 	bl	20364 <Telium_Read_date>
		Telium_Pprintf(szDate, date.day, date.month, date.year, date.hour, date.minute);
    9b7c:	f107 0118 	add.w	r1, r7, #24
    9b80:	f107 0318 	add.w	r3, r7, #24
    9b84:	1c9a      	adds	r2, r3, #2
    9b86:	f107 0318 	add.w	r3, r7, #24
    9b8a:	3304      	adds	r3, #4
    9b8c:	f107 0018 	add.w	r0, r7, #24
    9b90:	3006      	adds	r0, #6
    9b92:	9000      	str	r0, [sp, #0]
    9b94:	f107 0018 	add.w	r0, r7, #24
    9b98:	3008      	adds	r0, #8
    9b9a:	9001      	str	r0, [sp, #4]
    9b9c:	f242 30f8 	movw	r0, #9208	; 0x23f8
    9ba0:	f2c0 0002 	movt	r0, #2
    9ba4:	f016 fd52 	bl	2064c <Telium_Pprintf>

		Telium_Ttestall(PRINTER, 3*100);
    9ba8:	2002      	movs	r0, #2
    9baa:	f44f 7196 	mov.w	r1, #300	; 0x12c
    9bae:	f016 f8a3 	bl	1fcf8 <Telium_Ttestall>
		Telium_Fclose(hPrinter); // Close printer driver
    9bb2:	6978      	ldr	r0, [r7, #20]
    9bb4:	f015 fe80 	bl	1f8b8 <Telium_Fclose>
	}

	return FCT_OK;
    9bb8:	2300      	movs	r3, #0
}
    9bba:	4618      	mov	r0, r3
    9bbc:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9bc0:	f2c0 0302 	movt	r3, #2
    9bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9bc6:	681b      	ldr	r3, [r3, #0]
    9bc8:	429a      	cmp	r2, r3
    9bca:	d001      	beq.n	9bd0 <mcall+0xb4>
    9bcc:	f7ff f9ea 	bl	8fa4 <__stack_chk_fail>
    9bd0:	f107 0728 	add.w	r7, r7, #40	; 0x28
    9bd4:	46bd      	mov	sp, r7
    9bd6:	bd80      	pop	{r7, pc}

00009bd8 <is_time_function>:
 * \return is_name result
 *
 * \see sdk_tplus.h
 */
int is_time_function(NO_SEGMENT no, void *p1, S_ETATOUT *param_out)
{
    9bd8:	b580      	push	{r7, lr}
    9bda:	b086      	sub	sp, #24
    9bdc:	af00      	add	r7, sp, #0
    9bde:	4603      	mov	r3, r0
    9be0:	60b9      	str	r1, [r7, #8]
    9be2:	607a      	str	r2, [r7, #4]
    9be4:	73fb      	strb	r3, [r7, #15]
    9be6:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9bea:	f2c0 0302 	movt	r3, #2
    9bee:	681b      	ldr	r3, [r3, #0]
    9bf0:	617b      	str	r3, [r7, #20]
	int iRet;

	// Peripherals needed?
	param_out->returned_state[param_out->response_number].state.response = REP_OK;
    9bf2:	687b      	ldr	r3, [r7, #4]
    9bf4:	781b      	ldrb	r3, [r3, #0]
    9bf6:	461a      	mov	r2, r3
    9bf8:	6879      	ldr	r1, [r7, #4]
    9bfa:	4613      	mov	r3, r2
    9bfc:	009b      	lsls	r3, r3, #2
    9bfe:	189b      	adds	r3, r3, r2
    9c00:	009b      	lsls	r3, r3, #2
    9c02:	18cb      	adds	r3, r1, r3
    9c04:	3310      	adds	r3, #16
    9c06:	2200      	movs	r2, #0
    9c08:	711a      	strb	r2, [r3, #4]
	iRet = is_name(no, PT_NULL, param_out);
    9c0a:	7bfb      	ldrb	r3, [r7, #15]
    9c0c:	4618      	mov	r0, r3
    9c0e:	2100      	movs	r1, #0
    9c10:	687a      	ldr	r2, [r7, #4]
    9c12:	f7ff fd2f 	bl	9674 <is_name>
    9c16:	6138      	str	r0, [r7, #16]

	return iRet;
    9c18:	693b      	ldr	r3, [r7, #16]
}
    9c1a:	4618      	mov	r0, r3
    9c1c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9c20:	f2c0 0302 	movt	r3, #2
    9c24:	697a      	ldr	r2, [r7, #20]
    9c26:	681b      	ldr	r3, [r3, #0]
    9c28:	429a      	cmp	r2, r3
    9c2a:	d001      	beq.n	9c30 <is_time_function+0x58>
    9c2c:	f7ff f9ba 	bl	8fa4 <__stack_chk_fail>
    9c30:	f107 0718 	add.w	r7, r7, #24
    9c34:	46bd      	mov	sp, r7
    9c36:	bd80      	pop	{r7, pc}

00009c38 <time_function>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int time_function(NO_SEGMENT no, void *p1, void *p2)
{
    9c38:	b580      	push	{r7, lr}
    9c3a:	b088      	sub	sp, #32
    9c3c:	af02      	add	r7, sp, #8
    9c3e:	4603      	mov	r3, r0
    9c40:	60b9      	str	r1, [r7, #8]
    9c42:	607a      	str	r2, [r7, #4]
    9c44:	73fb      	strb	r3, [r7, #15]
    9c46:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9c4a:	f2c0 0302 	movt	r3, #2
    9c4e:	681b      	ldr	r3, [r3, #0]
    9c50:	617b      	str	r3, [r7, #20]
	// Periodical function in progress
	GL_Dialog_Message(gGoalGraphicLibInstance, appName, timeToCall,
    9c52:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    9c56:	f2c0 0302 	movt	r3, #2
    9c5a:	681b      	ldr	r3, [r3, #0]
    9c5c:	2201      	movs	r2, #1
    9c5e:	9200      	str	r2, [sp, #0]
    9c60:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    9c64:	9201      	str	r2, [sp, #4]
    9c66:	4618      	mov	r0, r3
    9c68:	f64f 7100 	movw	r1, #65280	; 0xff00
    9c6c:	f2c0 0102 	movt	r1, #2
    9c70:	f242 32c4 	movw	r2, #9156	; 0x23c4
    9c74:	f2c0 0202 	movt	r2, #2
    9c78:	2300      	movs	r3, #0
    9c7a:	f017 fc53 	bl	21524 <GL_Dialog_Message>
			GL_ICON_NONE, GL_BUTTON_VALID, 2 * GL_TIME_SECOND);

	return (FCT_OK);
    9c7e:	2300      	movs	r3, #0
}
    9c80:	4618      	mov	r0, r3
    9c82:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9c86:	f2c0 0302 	movt	r3, #2
    9c8a:	697a      	ldr	r2, [r7, #20]
    9c8c:	681b      	ldr	r3, [r3, #0]
    9c8e:	429a      	cmp	r2, r3
    9c90:	d001      	beq.n	9c96 <time_function+0x5e>
    9c92:	f7ff f987 	bl	8fa4 <__stack_chk_fail>
    9c96:	f107 0718 	add.w	r7, r7, #24
    9c9a:	46bd      	mov	sp, r7
    9c9c:	bd80      	pop	{r7, pc}
    9c9e:	bf00      	nop

00009ca0 <is_change_init>:
 * \return is_name result
 *
 * \see sdk_tplus.h
 */
int is_change_init(NO_SEGMENT no, void *p1, S_ETATOUT *param_out)
{
    9ca0:	b590      	push	{r4, r7, lr}
    9ca2:	b0d3      	sub	sp, #332	; 0x14c
    9ca4:	af00      	add	r7, sp, #0
    9ca6:	f107 0308 	add.w	r3, r7, #8
    9caa:	6019      	str	r1, [r3, #0]
    9cac:	1d3b      	adds	r3, r7, #4
    9cae:	601a      	str	r2, [r3, #0]
    9cb0:	f107 030f 	add.w	r3, r7, #15
    9cb4:	4602      	mov	r2, r0
    9cb6:	701a      	strb	r2, [r3, #0]
    9cb8:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9cbc:	f2c0 0302 	movt	r3, #2
    9cc0:	681b      	ldr	r3, [r3, #0]
    9cc2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	S_ETATOUT etatout;
	int iRet;
	memcpy(&etatout, param_out, sizeof(etatout));
    9cc6:	f107 0214 	add.w	r2, r7, #20
    9cca:	1d3b      	adds	r3, r7, #4
    9ccc:	4610      	mov	r0, r2
    9cce:	6819      	ldr	r1, [r3, #0]
    9cd0:	f44f 7298 	mov.w	r2, #304	; 0x130
    9cd4:	f7fe efd0 	blx	8c78 <_init+0x118>

	// accept all
	etatout.returned_state[etatout.response_number].state.mask = 0;
    9cd8:	f107 0314 	add.w	r3, r7, #20
    9cdc:	781b      	ldrb	r3, [r3, #0]
    9cde:	461a      	mov	r2, r3
    9ce0:	f107 0114 	add.w	r1, r7, #20
    9ce4:	4613      	mov	r3, r2
    9ce6:	009b      	lsls	r3, r3, #2
    9ce8:	189b      	adds	r3, r3, r2
    9cea:	009b      	lsls	r3, r3, #2
    9cec:	18cb      	adds	r3, r1, r3
    9cee:	3314      	adds	r3, #20
    9cf0:	2200      	movs	r2, #0
    9cf2:	601a      	str	r2, [r3, #0]
	memcpy(param_out, &etatout, sizeof(etatout));
    9cf4:	1d3a      	adds	r2, r7, #4
    9cf6:	f107 0314 	add.w	r3, r7, #20
    9cfa:	6810      	ldr	r0, [r2, #0]
    9cfc:	4619      	mov	r1, r3
    9cfe:	f44f 7298 	mov.w	r2, #304	; 0x130
    9d02:	f7fe efba 	blx	8c78 <_init+0x118>
	iRet = is_name(no, PT_NULL, param_out);
    9d06:	f107 0410 	add.w	r4, r7, #16
    9d0a:	f107 030f 	add.w	r3, r7, #15
    9d0e:	781a      	ldrb	r2, [r3, #0]
    9d10:	1d3b      	adds	r3, r7, #4
    9d12:	4610      	mov	r0, r2
    9d14:	2100      	movs	r1, #0
    9d16:	681a      	ldr	r2, [r3, #0]
    9d18:	f7ff fcac 	bl	9674 <is_name>
    9d1c:	6020      	str	r0, [r4, #0]

	return iRet;
    9d1e:	f107 0310 	add.w	r3, r7, #16
    9d22:	681b      	ldr	r3, [r3, #0]
}
    9d24:	4618      	mov	r0, r3
    9d26:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9d2a:	f2c0 0302 	movt	r3, #2
    9d2e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
    9d32:	681b      	ldr	r3, [r3, #0]
    9d34:	429a      	cmp	r2, r3
    9d36:	d001      	beq.n	9d3c <is_change_init+0x9c>
    9d38:	f7ff f934 	bl	8fa4 <__stack_chk_fail>
    9d3c:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
    9d40:	46bd      	mov	sp, r7
    9d42:	bd90      	pop	{r4, r7, pc}

00009d44 <modif_param>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int modif_param(NO_SEGMENT noappli, S_MODIF_P *param_in, void *p2)
{
    9d44:	b580      	push	{r7, lr}
    9d46:	b0d4      	sub	sp, #336	; 0x150
    9d48:	af00      	add	r7, sp, #0
    9d4a:	f107 0308 	add.w	r3, r7, #8
    9d4e:	6019      	str	r1, [r3, #0]
    9d50:	1d3b      	adds	r3, r7, #4
    9d52:	601a      	str	r2, [r3, #0]
    9d54:	f107 030f 	add.w	r3, r7, #15
    9d58:	4602      	mov	r2, r0
    9d5a:	701a      	strb	r2, [r3, #0]
    9d5c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9d60:	f2c0 0302 	movt	r3, #2
    9d64:	681b      	ldr	r3, [r3, #0]
    9d66:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	S_MODIF_P param_changed;

	memcpy(&param_changed, param_in, sizeof(param_changed));
    9d6a:	f107 0214 	add.w	r2, r7, #20
    9d6e:	f107 0308 	add.w	r3, r7, #8
    9d72:	4610      	mov	r0, r2
    9d74:	6819      	ldr	r1, [r3, #0]
    9d76:	f44f 729c 	mov.w	r2, #312	; 0x138
    9d7a:	f7fe ef7e 	blx	8c78 <_init+0x118>
	Telium_Fopen("DISPLAY", "w");
    9d7e:	f242 40a0 	movw	r0, #9376	; 0x24a0
    9d82:	f2c0 0002 	movt	r0, #2
    9d86:	f242 610c 	movw	r1, #9740	; 0x260c
    9d8a:	f2c0 0102 	movt	r1, #2
    9d8e:	f015 fdc5 	bl	1f91c <Telium_Fopen>
	Telium_Printf("MODIF_PARAM\n%04x", (int)param_changed.etatout.returned_state[0].state.mask);
    9d92:	f107 0314 	add.w	r3, r7, #20
    9d96:	695b      	ldr	r3, [r3, #20]
    9d98:	f242 6010 	movw	r0, #9744	; 0x2610
    9d9c:	f2c0 0002 	movt	r0, #2
    9da0:	4619      	mov	r1, r3
    9da2:	f016 fc6a 	bl	2067a <Telium_Printf>
	Telium_Ttestall(0, 200);
    9da6:	2000      	movs	r0, #0
    9da8:	21c8      	movs	r1, #200	; 0xc8
    9daa:	f015 ffa5 	bl	1fcf8 <Telium_Ttestall>
	Telium_Fclose(Telium_Stdout());
    9dae:	f015 ff3f 	bl	1fc30 <Telium_Stdout>
    9db2:	4603      	mov	r3, r0
    9db4:	4618      	mov	r0, r3
    9db6:	f015 fd7f 	bl	1f8b8 <Telium_Fclose>

	return (FCT_OK);
    9dba:	2300      	movs	r3, #0
}
    9dbc:	4618      	mov	r0, r3
    9dbe:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9dc2:	f2c0 0302 	movt	r3, #2
    9dc6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
    9dca:	681b      	ldr	r3, [r3, #0]
    9dcc:	429a      	cmp	r2, r3
    9dce:	d001      	beq.n	9dd4 <modif_param+0x90>
    9dd0:	f7ff f8e8 	bl	8fa4 <__stack_chk_fail>
    9dd4:	f507 77a8 	add.w	r7, r7, #336	; 0x150
    9dd8:	46bd      	mov	sp, r7
    9dda:	bd80      	pop	{r7, pc}

00009ddc <is_evol_pg>:
 * \return is_name result
 *
 * \see sdk_tplus.h
 */
int is_evol_pg(NO_SEGMENT no, void *p1, S_ETATOUT *param_out)
{
    9ddc:	b580      	push	{r7, lr}
    9dde:	b086      	sub	sp, #24
    9de0:	af00      	add	r7, sp, #0
    9de2:	4603      	mov	r3, r0
    9de4:	60b9      	str	r1, [r7, #8]
    9de6:	607a      	str	r2, [r7, #4]
    9de8:	73fb      	strb	r3, [r7, #15]
    9dea:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9dee:	f2c0 0302 	movt	r3, #2
    9df2:	681b      	ldr	r3, [r3, #0]
    9df4:	617b      	str	r3, [r7, #20]
	int iRet;

	// Downloading process allowed?
	param_out->returned_state[param_out->response_number].state.response = REP_OK;
    9df6:	687b      	ldr	r3, [r7, #4]
    9df8:	781b      	ldrb	r3, [r3, #0]
    9dfa:	461a      	mov	r2, r3
    9dfc:	6879      	ldr	r1, [r7, #4]
    9dfe:	4613      	mov	r3, r2
    9e00:	009b      	lsls	r3, r3, #2
    9e02:	189b      	adds	r3, r3, r2
    9e04:	009b      	lsls	r3, r3, #2
    9e06:	18cb      	adds	r3, r1, r3
    9e08:	3310      	adds	r3, #16
    9e0a:	2200      	movs	r2, #0
    9e0c:	711a      	strb	r2, [r3, #4]
	iRet = is_name(no, PT_NULL, param_out);
    9e0e:	7bfb      	ldrb	r3, [r7, #15]
    9e10:	4618      	mov	r0, r3
    9e12:	2100      	movs	r1, #0
    9e14:	687a      	ldr	r2, [r7, #4]
    9e16:	f7ff fc2d 	bl	9674 <is_name>
    9e1a:	6138      	str	r0, [r7, #16]

	return iRet;
    9e1c:	693b      	ldr	r3, [r7, #16]
}
    9e1e:	4618      	mov	r0, r3
    9e20:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9e24:	f2c0 0302 	movt	r3, #2
    9e28:	697a      	ldr	r2, [r7, #20]
    9e2a:	681b      	ldr	r3, [r3, #0]
    9e2c:	429a      	cmp	r2, r3
    9e2e:	d001      	beq.n	9e34 <is_evol_pg+0x58>
    9e30:	f7ff f8b8 	bl	8fa4 <__stack_chk_fail>
    9e34:	f107 0718 	add.w	r7, r7, #24
    9e38:	46bd      	mov	sp, r7
    9e3a:	bd80      	pop	{r7, pc}

00009e3c <is_delete>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int is_delete(NO_SEGMENT no, void *p1, S_DELETE *param_out)
{
    9e3c:	b580      	push	{r7, lr}
    9e3e:	b086      	sub	sp, #24
    9e40:	af00      	add	r7, sp, #0
    9e42:	4603      	mov	r3, r0
    9e44:	60b9      	str	r1, [r7, #8]
    9e46:	607a      	str	r2, [r7, #4]
    9e48:	73fb      	strb	r3, [r7, #15]
    9e4a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9e4e:	f2c0 0302 	movt	r3, #2
    9e52:	681b      	ldr	r3, [r3, #0]
    9e54:	617b      	str	r3, [r7, #20]
	// Deletion process allowed?
	param_out->deleting = DEL_YES;
    9e56:	687b      	ldr	r3, [r7, #4]
    9e58:	2201      	movs	r2, #1
    9e5a:	701a      	strb	r2, [r3, #0]

	return (FCT_OK);
    9e5c:	2300      	movs	r3, #0
}
    9e5e:	4618      	mov	r0, r3
    9e60:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9e64:	f2c0 0302 	movt	r3, #2
    9e68:	697a      	ldr	r2, [r7, #20]
    9e6a:	681b      	ldr	r3, [r3, #0]
    9e6c:	429a      	cmp	r2, r3
    9e6e:	d001      	beq.n	9e74 <is_delete+0x38>
    9e70:	f7ff f898 	bl	8fa4 <__stack_chk_fail>
    9e74:	f107 0718 	add.w	r7, r7, #24
    9e78:	46bd      	mov	sp, r7
    9e7a:	bd80      	pop	{r7, pc}

00009e7c <file_received>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int file_received(NO_SEGMENT no, S_FILE *param_in, void *p2)
{
    9e7c:	b590      	push	{r4, r7, lr}
    9e7e:	b0e1      	sub	sp, #388	; 0x184
    9e80:	af00      	add	r7, sp, #0
    9e82:	f107 0308 	add.w	r3, r7, #8
    9e86:	6019      	str	r1, [r3, #0]
    9e88:	1d3b      	adds	r3, r7, #4
    9e8a:	601a      	str	r2, [r3, #0]
    9e8c:	f107 030f 	add.w	r3, r7, #15
    9e90:	4602      	mov	r2, r0
    9e92:	701a      	strb	r2, [r3, #0]
    9e94:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    9e98:	f2c0 0302 	movt	r3, #2
    9e9c:	681b      	ldr	r3, [r3, #0]
    9e9e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	int len;
	char rsp[256];
	S_FS_FILE *pFile;

	// Print parameter file received
	prt = Telium_Fopen("PRINTER", "w-"); // Open printer driver
    9ea2:	f107 0418 	add.w	r4, r7, #24
    9ea6:	f242 40ac 	movw	r0, #9388	; 0x24ac
    9eaa:	f2c0 0002 	movt	r0, #2
    9eae:	f242 6124 	movw	r1, #9764	; 0x2624
    9eb2:	f2c0 0102 	movt	r1, #2
    9eb6:	f015 fd31 	bl	1f91c <Telium_Fopen>
    9eba:	6020      	str	r0, [r4, #0]
	Telium_Pprintf("\x1b""E%s\n""\x1b""F", appName);
    9ebc:	f242 40b8 	movw	r0, #9400	; 0x24b8
    9ec0:	f2c0 0002 	movt	r0, #2
    9ec4:	f64f 7100 	movw	r1, #65280	; 0xff00
    9ec8:	f2c0 0102 	movt	r1, #2
    9ecc:	f016 fbbe 	bl	2064c <Telium_Pprintf>
	Telium_Pprintf("File Received :\n/%s/%s\n", param_in->volume_name, param_in->file_name);
    9ed0:	f107 0308 	add.w	r3, r7, #8
    9ed4:	681a      	ldr	r2, [r3, #0]
    9ed6:	f107 0308 	add.w	r3, r7, #8
    9eda:	681b      	ldr	r3, [r3, #0]
    9edc:	3310      	adds	r3, #16
    9ede:	f242 6028 	movw	r0, #9768	; 0x2628
    9ee2:	f2c0 0002 	movt	r0, #2
    9ee6:	4611      	mov	r1, r2
    9ee8:	461a      	mov	r2, r3
    9eea:	f016 fbaf 	bl	2064c <Telium_Pprintf>
	Telium_Ttestall(PRINTER, 0); // Print volume+file_name
    9eee:	2002      	movs	r0, #2
    9ef0:	2100      	movs	r1, #0
    9ef2:	f015 ff01 	bl	1fcf8 <Telium_Ttestall>

	memclr(Dir_File,sizeof(Dir_File));
    9ef6:	f107 0344 	add.w	r3, r7, #68	; 0x44
    9efa:	4618      	mov	r0, r3
    9efc:	2100      	movs	r1, #0
    9efe:	2219      	movs	r2, #25
    9f00:	f7fe ee5c 	blx	8bbc <_init+0x5c>
	memclr(Dir_Label,sizeof(Dir_Label));
    9f04:	f107 0360 	add.w	r3, r7, #96	; 0x60
    9f08:	4618      	mov	r0, r3
    9f0a:	2100      	movs	r1, #0
    9f0c:	2219      	movs	r2, #25
    9f0e:	f7fe ee56 	blx	8bbc <_init+0x5c>

	Telium_Sprintf(Dir_Label, "/%s", param_in->volume_name);
    9f12:	f107 0308 	add.w	r3, r7, #8
    9f16:	681b      	ldr	r3, [r3, #0]
    9f18:	f107 0260 	add.w	r2, r7, #96	; 0x60
    9f1c:	4610      	mov	r0, r2
    9f1e:	f242 4124 	movw	r1, #9252	; 0x2424
    9f22:	f2c0 0102 	movt	r1, #2
    9f26:	461a      	mov	r2, r3
    9f28:	f016 fbc8 	bl	206bc <Telium_Sprintf>
	ParamCreat.Mode = FS_WRITEONCE;
    9f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    9f30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    9f34:	611a      	str	r2, [r3, #16]
	Ret = FS_mount(Dir_Label, &ParamCreat.Mode);
    9f36:	f107 041c 	add.w	r4, r7, #28
    9f3a:	f107 0260 	add.w	r2, r7, #96	; 0x60
    9f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
    9f42:	3310      	adds	r3, #16
    9f44:	4610      	mov	r0, r2
    9f46:	4619      	mov	r1, r3
    9f48:	f016 fcb2 	bl	208b0 <FS_mount>
    9f4c:	6020      	str	r0, [r4, #0]
	if (Ret == FS_OK)
    9f4e:	f107 031c 	add.w	r3, r7, #28
    9f52:	681b      	ldr	r3, [r3, #0]
    9f54:	2b02      	cmp	r3, #2
    9f56:	d144      	bne.n	9fe2 <file_received+0x166>
	{
		Telium_Sprintf(Dir_File, "/%s/%s", param_in->volume_name, param_in->file_name);
    9f58:	f107 0308 	add.w	r3, r7, #8
    9f5c:	681a      	ldr	r2, [r3, #0]
    9f5e:	f107 0308 	add.w	r3, r7, #8
    9f62:	681b      	ldr	r3, [r3, #0]
    9f64:	3310      	adds	r3, #16
    9f66:	f107 0144 	add.w	r1, r7, #68	; 0x44
    9f6a:	4608      	mov	r0, r1
    9f6c:	f242 6140 	movw	r1, #9792	; 0x2640
    9f70:	f2c0 0102 	movt	r1, #2
    9f74:	f016 fba2 	bl	206bc <Telium_Sprintf>
		pFile = FS_open(Dir_File, "r"); // The file can be open at this stage
    9f78:	f107 0420 	add.w	r4, r7, #32
    9f7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
    9f80:	4618      	mov	r0, r3
    9f82:	f242 6148 	movw	r1, #9800	; 0x2648
    9f86:	f2c0 0102 	movt	r1, #2
    9f8a:	f016 fcbb 	bl	20904 <FS_open>
    9f8e:	6020      	str	r0, [r4, #0]

		// Eventually read the file and get parameters
		len = FS_length(pFile); // File length in bytes
    9f90:	f107 0414 	add.w	r4, r7, #20
    9f94:	f107 0320 	add.w	r3, r7, #32
    9f98:	6818      	ldr	r0, [r3, #0]
    9f9a:	f016 fc5d 	bl	20858 <FS_length>
    9f9e:	6020      	str	r0, [r4, #0]
		if (len > sizeof(rsp))
    9fa0:	f107 0314 	add.w	r3, r7, #20
    9fa4:	681b      	ldr	r3, [r3, #0]
    9fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9faa:	d904      	bls.n	9fb6 <file_received+0x13a>
		{
			len = sizeof(rsp);
    9fac:	f107 0314 	add.w	r3, r7, #20
    9fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
    9fb4:	601a      	str	r2, [r3, #0]
		}
		FS_read(rsp, len, 1, pFile); // Read from file
    9fb6:	f107 017c 	add.w	r1, r7, #124	; 0x7c
    9fba:	f107 0214 	add.w	r2, r7, #20
    9fbe:	f107 0320 	add.w	r3, r7, #32
    9fc2:	4608      	mov	r0, r1
    9fc4:	6811      	ldr	r1, [r2, #0]
    9fc6:	2201      	movs	r2, #1
    9fc8:	681b      	ldr	r3, [r3, #0]
    9fca:	f016 fcc5 	bl	20958 <FS_read>

		FS_close(pFile); // Close the file
    9fce:	f107 0320 	add.w	r3, r7, #32
    9fd2:	6818      	ldr	r0, [r3, #0]
    9fd4:	f016 fbba 	bl	2074c <FS_close>
		FS_unmount(Dir_Label); // Cannot be deleted as it is located in system disk
    9fd8:	f107 0360 	add.w	r3, r7, #96	; 0x60
    9fdc:	4618      	mov	r0, r3
    9fde:	f016 fd67 	bl	20ab0 <FS_unmount>
	}

	Telium_Pprintf("%s\n", rsp);
    9fe2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
    9fe6:	f242 604c 	movw	r0, #9804	; 0x264c
    9fea:	f2c0 0002 	movt	r0, #2
    9fee:	4619      	mov	r1, r3
    9ff0:	f016 fb2c 	bl	2064c <Telium_Pprintf>

	Telium_Fclose(prt); // Close printer driver
    9ff4:	f107 0318 	add.w	r3, r7, #24
    9ff8:	6818      	ldr	r0, [r3, #0]
    9ffa:	f015 fc5d 	bl	1f8b8 <Telium_Fclose>

	return (FCT_OK);
    9ffe:	2300      	movs	r3, #0
}
    a000:	4618      	mov	r0, r3
    a002:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    a006:	f2c0 0302 	movt	r3, #2
    a00a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
    a00e:	681b      	ldr	r3, [r3, #0]
    a010:	429a      	cmp	r2, r3
    a012:	d001      	beq.n	a018 <file_received+0x19c>
    a014:	f7fe ffc6 	bl	8fa4 <__stack_chk_fail>
    a018:	f507 77c2 	add.w	r7, r7, #388	; 0x184
    a01c:	46bd      	mov	sp, r7
    a01e:	bd90      	pop	{r4, r7, pc}

0000a020 <message_received>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int message_received(NO_SEGMENT no, S_MESSAGE_IAM *param_in, void *p2)
{
    a020:	b580      	push	{r7, lr}
    a022:	b086      	sub	sp, #24
    a024:	af00      	add	r7, sp, #0
    a026:	4603      	mov	r3, r0
    a028:	60b9      	str	r1, [r7, #8]
    a02a:	607a      	str	r2, [r7, #4]
    a02c:	73fb      	strb	r3, [r7, #15]
    a02e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    a032:	f2c0 0302 	movt	r3, #2
    a036:	681b      	ldr	r3, [r3, #0]
    a038:	617b      	str	r3, [r7, #20]
	Telium_File_t *prt;

	// Print message received from application 2
	prt = Telium_Fopen("PRINTER", "w-"); // Open printer driver
    a03a:	f242 40ac 	movw	r0, #9388	; 0x24ac
    a03e:	f2c0 0002 	movt	r0, #2
    a042:	f242 6124 	movw	r1, #9764	; 0x2624
    a046:	f2c0 0102 	movt	r1, #2
    a04a:	f015 fc67 	bl	1f91c <Telium_Fopen>
    a04e:	6138      	str	r0, [r7, #16]
	Telium_Pprintf("\x1b""E%s\n""\x1b""F", appName);
    a050:	f242 40b8 	movw	r0, #9400	; 0x24b8
    a054:	f2c0 0002 	movt	r0, #2
    a058:	f64f 7100 	movw	r1, #65280	; 0xff00
    a05c:	f2c0 0102 	movt	r1, #2
    a060:	f016 faf4 	bl	2064c <Telium_Pprintf>
	Telium_Pprintf("Message IAM :\n");
    a064:	f242 6050 	movw	r0, #9808	; 0x2650
    a068:	f2c0 0002 	movt	r0, #2
    a06c:	f016 faee 	bl	2064c <Telium_Pprintf>
	Telium_Pprintf("S:%04X R:%04X\n", param_in->sender, param_in->receiver); // USER2 to TEMPLATE
    a070:	68bb      	ldr	r3, [r7, #8]
    a072:	881b      	ldrh	r3, [r3, #0]
    a074:	461a      	mov	r2, r3
    a076:	68bb      	ldr	r3, [r7, #8]
    a078:	885b      	ldrh	r3, [r3, #2]
    a07a:	f242 6060 	movw	r0, #9824	; 0x2660
    a07e:	f2c0 0002 	movt	r0, #2
    a082:	4611      	mov	r1, r2
    a084:	461a      	mov	r2, r3
    a086:	f016 fae1 	bl	2064c <Telium_Pprintf>
	Telium_Pprintf("IAM Type : %04X \n\n", param_in->type);
    a08a:	68bb      	ldr	r3, [r7, #8]
    a08c:	889b      	ldrh	r3, [r3, #4]
    a08e:	f242 6070 	movw	r0, #9840	; 0x2670
    a092:	f2c0 0002 	movt	r0, #2
    a096:	4619      	mov	r1, r3
    a098:	f016 fad8 	bl	2064c <Telium_Pprintf>

	Telium_Pprintf("%s\n\n\n\n\n\n", param_in->value); // Print the message received
    a09c:	68bb      	ldr	r3, [r7, #8]
    a09e:	3308      	adds	r3, #8
    a0a0:	f242 6084 	movw	r0, #9860	; 0x2684
    a0a4:	f2c0 0002 	movt	r0, #2
    a0a8:	4619      	mov	r1, r3
    a0aa:	f016 facf 	bl	2064c <Telium_Pprintf>
	Telium_Ttestall(PRINTER, 2*100);
    a0ae:	2002      	movs	r0, #2
    a0b0:	21c8      	movs	r1, #200	; 0xc8
    a0b2:	f015 fe21 	bl	1fcf8 <Telium_Ttestall>
	Telium_Fclose(prt); // Close printer driver
    a0b6:	6938      	ldr	r0, [r7, #16]
    a0b8:	f015 fbfe 	bl	1f8b8 <Telium_Fclose>

	return (FCT_OK);
    a0bc:	2300      	movs	r3, #0
}
    a0be:	4618      	mov	r0, r3
    a0c0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    a0c4:	f2c0 0302 	movt	r3, #2
    a0c8:	697a      	ldr	r2, [r7, #20]
    a0ca:	681b      	ldr	r3, [r3, #0]
    a0cc:	429a      	cmp	r2, r3
    a0ce:	d001      	beq.n	a0d4 <message_received+0xb4>
    a0d0:	f7fe ff68 	bl	8fa4 <__stack_chk_fail>
    a0d4:	f107 0718 	add.w	r7, r7, #24
    a0d8:	46bd      	mov	sp, r7
    a0da:	bd80      	pop	{r7, pc}

0000a0dc <is_card_specific>:
 * \return is_name result
 *
 * \see sdk_tplus.h
 */
int is_card_specific(NO_SEGMENT no, S_TRANSIN *param_in, S_ETATOUT *param_out)
{
    a0dc:	b580      	push	{r7, lr}
    a0de:	b086      	sub	sp, #24
    a0e0:	af00      	add	r7, sp, #0
    a0e2:	4603      	mov	r3, r0
    a0e4:	60b9      	str	r1, [r7, #8]
    a0e6:	607a      	str	r2, [r7, #4]
    a0e8:	73fb      	strb	r3, [r7, #15]
    a0ea:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    a0ee:	f2c0 0302 	movt	r3, #2
    a0f2:	681b      	ldr	r3, [r3, #0]
    a0f4:	617b      	str	r3, [r7, #20]
	int iRet;

	// Return application state
	param_out->returned_state[param_out->response_number].state.response = REP_KO;
    a0f6:	687b      	ldr	r3, [r7, #4]
    a0f8:	781b      	ldrb	r3, [r3, #0]
    a0fa:	461a      	mov	r2, r3
    a0fc:	6879      	ldr	r1, [r7, #4]
    a0fe:	4613      	mov	r3, r2
    a100:	009b      	lsls	r3, r3, #2
    a102:	189b      	adds	r3, r3, r2
    a104:	009b      	lsls	r3, r3, #2
    a106:	18cb      	adds	r3, r1, r3
    a108:	3310      	adds	r3, #16
    a10a:	2201      	movs	r2, #1
    a10c:	711a      	strb	r2, [r3, #4]
	iRet = is_name(no, PT_NULL, param_out);
    a10e:	7bfb      	ldrb	r3, [r7, #15]
    a110:	4618      	mov	r0, r3
    a112:	2100      	movs	r1, #0
    a114:	687a      	ldr	r2, [r7, #4]
    a116:	f7ff faad 	bl	9674 <is_name>
    a11a:	6138      	str	r0, [r7, #16]

	return iRet;
    a11c:	693b      	ldr	r3, [r7, #16]
}
    a11e:	4618      	mov	r0, r3
    a120:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    a124:	f2c0 0302 	movt	r3, #2
    a128:	697a      	ldr	r2, [r7, #20]
    a12a:	681b      	ldr	r3, [r3, #0]
    a12c:	429a      	cmp	r2, r3
    a12e:	d001      	beq.n	a134 <is_card_specific+0x58>
    a130:	f7fe ff38 	bl	8fa4 <__stack_chk_fail>
    a134:	f107 0718 	add.w	r7, r7, #24
    a138:	46bd      	mov	sp, r7
    a13a:	bd80      	pop	{r7, pc}

0000a13c <card_inside>:
 *         FCT_OK: Card refused and poll the next application.
 *
 * \see sdk_tplus.h
 */
int card_inside(NO_SEGMENT no, S_TRANSIN *param_in, S_TRANSOUT *param_out)
{
    a13c:	b580      	push	{r7, lr}
    a13e:	b086      	sub	sp, #24
    a140:	af00      	add	r7, sp, #0
    a142:	4603      	mov	r3, r0
    a144:	60b9      	str	r1, [r7, #8]
    a146:	607a      	str	r2, [r7, #4]
    a148:	73fb      	strb	r3, [r7, #15]
    a14a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    a14e:	f2c0 0302 	movt	r3, #2
    a152:	681b      	ldr	r3, [r3, #0]
    a154:	617b      	str	r3, [r7, #20]
	bool card_accepted = TRUE;
    a156:	2301      	movs	r3, #1
    a158:	74fb      	strb	r3, [r7, #19]

	if (card_accepted)
    a15a:	7cfb      	ldrb	r3, [r7, #19]
    a15c:	2b00      	cmp	r3, #0
    a15e:	d004      	beq.n	a16a <card_inside+0x2e>
	{
		// Return transaction status
		param_out->rc_payment = PAY_OK; // Transaction done, polling is stop
    a160:	687b      	ldr	r3, [r7, #4]
    a162:	2200      	movs	r2, #0
    a164:	705a      	strb	r2, [r3, #1]
		return (STOP);
    a166:	2301      	movs	r3, #1
    a168:	e000      	b.n	a16c <card_inside+0x30>
	}
	else
	{
		return (FCT_OK); // Card refused, poll the next application
    a16a:	2300      	movs	r3, #0
	}
}
    a16c:	4618      	mov	r0, r3
    a16e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    a172:	f2c0 0302 	movt	r3, #2
    a176:	697a      	ldr	r2, [r7, #20]
    a178:	681b      	ldr	r3, [r3, #0]
    a17a:	429a      	cmp	r2, r3
    a17c:	d001      	beq.n	a182 <card_inside+0x46>
    a17e:	f7fe ff11 	bl	8fa4 <__stack_chk_fail>
    a182:	f107 0718 	add.w	r7, r7, #24
    a186:	46bd      	mov	sp, r7
    a188:	bd80      	pop	{r7, pc}
    a18a:	bf00      	nop

0000a18c <is_for_you_after>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int is_for_you_after(NO_SEGMENT no, S_TRANSIN *param_in, S_CARDOUT *param_out)
{
    a18c:	b580      	push	{r7, lr}
    a18e:	b086      	sub	sp, #24
    a190:	af00      	add	r7, sp, #0
    a192:	4603      	mov	r3, r0
    a194:	60b9      	str	r1, [r7, #8]
    a196:	607a      	str	r2, [r7, #4]
    a198:	73fb      	strb	r3, [r7, #15]
    a19a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    a19e:	f2c0 0302 	movt	r3, #2
    a1a2:	681b      	ldr	r3, [r3, #0]
    a1a4:	617b      	str	r3, [r7, #20]

	// case of chip card
	if (param_in->support == CHIP_SUPPORT)
    a1a6:	68bb      	ldr	r3, [r7, #8]
    a1a8:	f503 5354 	add.w	r3, r3, #13568	; 0x3500
    a1ac:	3328      	adds	r3, #40	; 0x28
    a1ae:	681b      	ldr	r3, [r3, #0]
    a1b0:	2b03      	cmp	r3, #3
    a1b2:	d12e      	bne.n	a212 <is_for_you_after+0x86>
	{
		if(param_in->power_on_result == 0)
    a1b4:	68bb      	ldr	r3, [r7, #8]
    a1b6:	f503 5355 	add.w	r3, r3, #13632	; 0x3540
    a1ba:	3320      	adds	r3, #32
    a1bc:	781b      	ldrb	r3, [r3, #0]
    a1be:	2b00      	cmp	r3, #0
    a1c0:	d11a      	bne.n	a1f8 <is_for_you_after+0x6c>
		{
			// accept this card
			param_out->returned_state[param_out->response_number].cardappnumber = 1;
    a1c2:	687b      	ldr	r3, [r7, #4]
    a1c4:	781b      	ldrb	r3, [r3, #0]
    a1c6:	461a      	mov	r2, r3
    a1c8:	6879      	ldr	r1, [r7, #4]
    a1ca:	4613      	mov	r3, r2
    a1cc:	00db      	lsls	r3, r3, #3
    a1ce:	189b      	adds	r3, r3, r2
    a1d0:	00db      	lsls	r3, r3, #3
    a1d2:	1a9b      	subs	r3, r3, r2
    a1d4:	18cb      	adds	r3, r1, r3
    a1d6:	330f      	adds	r3, #15
    a1d8:	2201      	movs	r2, #1
    a1da:	701a      	strb	r2, [r3, #0]
			param_out->returned_state[param_out->response_number].cardapp[0].priority = CARD_PROCESSED;
    a1dc:	687b      	ldr	r3, [r7, #4]
    a1de:	781b      	ldrb	r3, [r3, #0]
    a1e0:	461a      	mov	r2, r3
    a1e2:	6879      	ldr	r1, [r7, #4]
    a1e4:	4613      	mov	r3, r2
    a1e6:	00db      	lsls	r3, r3, #3
    a1e8:	189b      	adds	r3, r3, r2
    a1ea:	00db      	lsls	r3, r3, #3
    a1ec:	1a9b      	subs	r3, r3, r2
    a1ee:	18cb      	adds	r3, r1, r3
    a1f0:	3310      	adds	r3, #16
    a1f2:	2205      	movs	r2, #5
    a1f4:	701a      	strb	r2, [r3, #0]
    a1f6:	e00c      	b.n	a212 <is_for_you_after+0x86>
		}
		else
		{
			// reject the card
			param_out->returned_state[param_out->response_number].cardappnumber = 0;
    a1f8:	687b      	ldr	r3, [r7, #4]
    a1fa:	781b      	ldrb	r3, [r3, #0]
    a1fc:	461a      	mov	r2, r3
    a1fe:	6879      	ldr	r1, [r7, #4]
    a200:	4613      	mov	r3, r2
    a202:	00db      	lsls	r3, r3, #3
    a204:	189b      	adds	r3, r3, r2
    a206:	00db      	lsls	r3, r3, #3
    a208:	1a9b      	subs	r3, r3, r2
    a20a:	18cb      	adds	r3, r1, r3
    a20c:	330f      	adds	r3, #15
    a20e:	2200      	movs	r2, #0
    a210:	701a      	strb	r2, [r3, #0]
		}
	}

	// case of stripe 2 card
	if (param_in->support == TRACK2_SUPPORT)
    a212:	68bb      	ldr	r3, [r7, #8]
    a214:	f503 5354 	add.w	r3, r3, #13568	; 0x3500
    a218:	3328      	adds	r3, #40	; 0x28
    a21a:	681b      	ldr	r3, [r3, #0]
    a21c:	2b00      	cmp	r3, #0
    a21e:	d119      	bne.n	a254 <is_for_you_after+0xc8>
	{
		// accept this card
		param_out->returned_state[param_out->response_number].cardappnumber = 1;
    a220:	687b      	ldr	r3, [r7, #4]
    a222:	781b      	ldrb	r3, [r3, #0]
    a224:	461a      	mov	r2, r3
    a226:	6879      	ldr	r1, [r7, #4]
    a228:	4613      	mov	r3, r2
    a22a:	00db      	lsls	r3, r3, #3
    a22c:	189b      	adds	r3, r3, r2
    a22e:	00db      	lsls	r3, r3, #3
    a230:	1a9b      	subs	r3, r3, r2
    a232:	18cb      	adds	r3, r1, r3
    a234:	330f      	adds	r3, #15
    a236:	2201      	movs	r2, #1
    a238:	701a      	strb	r2, [r3, #0]
		param_out->returned_state[param_out->response_number].cardapp[0].priority = CARD_PRIORITY;
    a23a:	687b      	ldr	r3, [r7, #4]
    a23c:	781b      	ldrb	r3, [r3, #0]
    a23e:	461a      	mov	r2, r3
    a240:	6879      	ldr	r1, [r7, #4]
    a242:	4613      	mov	r3, r2
    a244:	00db      	lsls	r3, r3, #3
    a246:	189b      	adds	r3, r3, r2
    a248:	00db      	lsls	r3, r3, #3
    a24a:	1a9b      	subs	r3, r3, r2
    a24c:	18cb      	adds	r3, r1, r3
    a24e:	3310      	adds	r3, #16
    a250:	220f      	movs	r2, #15
    a252:	701a      	strb	r2, [r3, #0]
	}

	// case of Card Number Manual entry
	if (param_in->support == OPERATOR_SUPPORT)
    a254:	68bb      	ldr	r3, [r7, #8]
    a256:	f503 5354 	add.w	r3, r3, #13568	; 0x3500
    a25a:	3328      	adds	r3, #40	; 0x28
    a25c:	681b      	ldr	r3, [r3, #0]
    a25e:	2b04      	cmp	r3, #4
    a260:	d119      	bne.n	a296 <is_for_you_after+0x10a>
	{
		// accept this card
		param_out->returned_state[param_out->response_number].cardappnumber = 1;
    a262:	687b      	ldr	r3, [r7, #4]
    a264:	781b      	ldrb	r3, [r3, #0]
    a266:	461a      	mov	r2, r3
    a268:	6879      	ldr	r1, [r7, #4]
    a26a:	4613      	mov	r3, r2
    a26c:	00db      	lsls	r3, r3, #3
    a26e:	189b      	adds	r3, r3, r2
    a270:	00db      	lsls	r3, r3, #3
    a272:	1a9b      	subs	r3, r3, r2
    a274:	18cb      	adds	r3, r1, r3
    a276:	330f      	adds	r3, #15
    a278:	2201      	movs	r2, #1
    a27a:	701a      	strb	r2, [r3, #0]
		param_out->returned_state[param_out->response_number].cardapp[0].priority = CARD_PRIORITY;
    a27c:	687b      	ldr	r3, [r7, #4]
    a27e:	781b      	ldrb	r3, [r3, #0]
    a280:	461a      	mov	r2, r3
    a282:	6879      	ldr	r1, [r7, #4]
    a284:	4613      	mov	r3, r2
    a286:	00db      	lsls	r3, r3, #3
    a288:	189b      	adds	r3, r3, r2
    a28a:	00db      	lsls	r3, r3, #3
    a28c:	1a9b      	subs	r3, r3, r2
    a28e:	18cb      	adds	r3, r1, r3
    a290:	3310      	adds	r3, #16
    a292:	220f      	movs	r2, #15
    a294:	701a      	strb	r2, [r3, #0]
	}

	// give my application name
	strcpy(param_out->returned_state[param_out->response_number].appname, appName);
    a296:	687b      	ldr	r3, [r7, #4]
    a298:	781b      	ldrb	r3, [r3, #0]
    a29a:	461a      	mov	r2, r3
    a29c:	4613      	mov	r3, r2
    a29e:	00db      	lsls	r3, r3, #3
    a2a0:	189b      	adds	r3, r3, r2
    a2a2:	00db      	lsls	r3, r3, #3
    a2a4:	1a9b      	subs	r3, r3, r2
    a2a6:	687a      	ldr	r2, [r7, #4]
    a2a8:	18d3      	adds	r3, r2, r3
    a2aa:	3301      	adds	r3, #1
    a2ac:	4618      	mov	r0, r3
    a2ae:	f64f 7100 	movw	r1, #65280	; 0xff00
    a2b2:	f2c0 0102 	movt	r1, #2
    a2b6:	f7fe ecb4 	blx	8c20 <_init+0xc0>
	// give my application number
	param_out->returned_state[param_out->response_number].no_appli = no;
    a2ba:	687b      	ldr	r3, [r7, #4]
    a2bc:	781b      	ldrb	r3, [r3, #0]
    a2be:	461a      	mov	r2, r3
    a2c0:	6879      	ldr	r1, [r7, #4]
    a2c2:	4613      	mov	r3, r2
    a2c4:	00db      	lsls	r3, r3, #3
    a2c6:	189b      	adds	r3, r3, r2
    a2c8:	00db      	lsls	r3, r3, #3
    a2ca:	1a9b      	subs	r3, r3, r2
    a2cc:	18cb      	adds	r3, r1, r3
    a2ce:	330e      	adds	r3, #14
    a2d0:	7bfa      	ldrb	r2, [r7, #15]
    a2d2:	701a      	strb	r2, [r3, #0]
	// give my card name
	strcpy(param_out->returned_state[param_out->response_number].cardapp[0].cardappname, "Template");
    a2d4:	687b      	ldr	r3, [r7, #4]
    a2d6:	781b      	ldrb	r3, [r3, #0]
    a2d8:	461a      	mov	r2, r3
    a2da:	4613      	mov	r3, r2
    a2dc:	00db      	lsls	r3, r3, #3
    a2de:	189b      	adds	r3, r3, r2
    a2e0:	00db      	lsls	r3, r3, #3
    a2e2:	1a9b      	subs	r3, r3, r2
    a2e4:	3308      	adds	r3, #8
    a2e6:	687a      	ldr	r2, [r7, #4]
    a2e8:	18d3      	adds	r3, r2, r3
    a2ea:	f103 0209 	add.w	r2, r3, #9
    a2ee:	f242 6390 	movw	r3, #9872	; 0x2690
    a2f2:	f2c0 0302 	movt	r3, #2
    a2f6:	cb03      	ldmia	r3!, {r0, r1}
    a2f8:	6010      	str	r0, [r2, #0]
    a2fa:	6051      	str	r1, [r2, #4]
    a2fc:	781b      	ldrb	r3, [r3, #0]
    a2fe:	7213      	strb	r3, [r2, #8]
	// increment the response number
	param_out->response_number++;
    a300:	687b      	ldr	r3, [r7, #4]
    a302:	781b      	ldrb	r3, [r3, #0]
    a304:	3301      	adds	r3, #1
    a306:	b2da      	uxtb	r2, r3
    a308:	687b      	ldr	r3, [r7, #4]
    a30a:	701a      	strb	r2, [r3, #0]

	return (FCT_OK);
    a30c:	2300      	movs	r3, #0
}
    a30e:	4618      	mov	r0, r3
    a310:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    a314:	f2c0 0302 	movt	r3, #2
    a318:	697a      	ldr	r2, [r7, #20]
    a31a:	681b      	ldr	r3, [r3, #0]
    a31c:	429a      	cmp	r2, r3
    a31e:	d001      	beq.n	a324 <is_for_you_after+0x198>
    a320:	f7fe fe40 	bl	8fa4 <__stack_chk_fail>
    a324:	f107 0718 	add.w	r7, r7, #24
    a328:	46bd      	mov	sp, r7
    a32a:	bd80      	pop	{r7, pc}

0000a32c <debit_non_emv>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int debit_non_emv(NO_SEGMENT no, S_TRANSIN * param_in, S_TRANSOUT * param_out)
{
    a32c:	b580      	push	{r7, lr}
    a32e:	b088      	sub	sp, #32
    a330:	af00      	add	r7, sp, #0
    a332:	4603      	mov	r3, r0
    a334:	60b9      	str	r1, [r7, #8]
    a336:	607a      	str	r2, [r7, #4]
    a338:	73fb      	strb	r3, [r7, #15]
    a33a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    a33e:	f2c0 0302 	movt	r3, #2
    a342:	681b      	ldr	r3, [r3, #0]
    a344:	61fb      	str	r3, [r7, #28]
	Telium_File_t *prt;
	int i;

	prt = Telium_Fopen("PRINTER", "w-");
    a346:	f242 40ac 	movw	r0, #9388	; 0x24ac
    a34a:	f2c0 0002 	movt	r0, #2
    a34e:	f242 6124 	movw	r1, #9764	; 0x2624
    a352:	f2c0 0102 	movt	r1, #2
    a356:	f015 fae1 	bl	1f91c <Telium_Fopen>
    a35a:	61b8      	str	r0, [r7, #24]

	// case of chip card
	if (param_in->support == CHIP_SUPPORT)
    a35c:	68bb      	ldr	r3, [r7, #8]
    a35e:	f503 5354 	add.w	r3, r3, #13568	; 0x3500
    a362:	3328      	adds	r3, #40	; 0x28
    a364:	681b      	ldr	r3, [r3, #0]
    a366:	2b03      	cmp	r3, #3
    a368:	d146      	bne.n	a3f8 <debit_non_emv+0xcc>
	{
		Telium_Pprintf("\x1b""E%s\n""\x1b""F", appName);
    a36a:	f242 40b8 	movw	r0, #9400	; 0x24b8
    a36e:	f2c0 0002 	movt	r0, #2
    a372:	f64f 7100 	movw	r1, #65280	; 0xff00
    a376:	f2c0 0102 	movt	r1, #2
    a37a:	f016 f967 	bl	2064c <Telium_Pprintf>
		if (param_in->historical_bytes.length != 0)
    a37e:	68bb      	ldr	r3, [r7, #8]
    a380:	f503 5356 	add.w	r3, r3, #13696	; 0x3580
    a384:	3328      	adds	r3, #40	; 0x28
    a386:	781b      	ldrb	r3, [r3, #0]
    a388:	2b00      	cmp	r3, #0
    a38a:	d023      	beq.n	a3d4 <debit_non_emv+0xa8>
		{
			Telium_Pprintf("Atr:\n");
    a38c:	f242 609c 	movw	r0, #9884	; 0x269c
    a390:	f2c0 0002 	movt	r0, #2
    a394:	f016 f95a 	bl	2064c <Telium_Pprintf>
			for (i=0; i<param_in->historical_bytes.length; i++)
    a398:	2300      	movs	r3, #0
    a39a:	617b      	str	r3, [r7, #20]
    a39c:	e010      	b.n	a3c0 <debit_non_emv+0x94>
			{
				Telium_Pprintf("%02X ", param_in->historical_bytes.historic[i]);
    a39e:	68ba      	ldr	r2, [r7, #8]
    a3a0:	697b      	ldr	r3, [r7, #20]
    a3a2:	18d3      	adds	r3, r2, r3
    a3a4:	f503 5356 	add.w	r3, r3, #13696	; 0x3580
    a3a8:	3328      	adds	r3, #40	; 0x28
    a3aa:	785b      	ldrb	r3, [r3, #1]
    a3ac:	f242 60a4 	movw	r0, #9892	; 0x26a4
    a3b0:	f2c0 0002 	movt	r0, #2
    a3b4:	4619      	mov	r1, r3
    a3b6:	f016 f949 	bl	2064c <Telium_Pprintf>
	{
		Telium_Pprintf("\x1b""E%s\n""\x1b""F", appName);
		if (param_in->historical_bytes.length != 0)
		{
			Telium_Pprintf("Atr:\n");
			for (i=0; i<param_in->historical_bytes.length; i++)
    a3ba:	697b      	ldr	r3, [r7, #20]
    a3bc:	3301      	adds	r3, #1
    a3be:	617b      	str	r3, [r7, #20]
    a3c0:	68bb      	ldr	r3, [r7, #8]
    a3c2:	f503 5356 	add.w	r3, r3, #13696	; 0x3580
    a3c6:	3328      	adds	r3, #40	; 0x28
    a3c8:	781b      	ldrb	r3, [r3, #0]
    a3ca:	461a      	mov	r2, r3
    a3cc:	697b      	ldr	r3, [r7, #20]
    a3ce:	429a      	cmp	r2, r3
    a3d0:	dce5      	bgt.n	a39e <debit_non_emv+0x72>
    a3d2:	e00b      	b.n	a3ec <debit_non_emv+0xc0>
				Telium_Pprintf("%02X ", param_in->historical_bytes.historic[i]);
			}
		}
		else
		{
			Telium_Pprintf("Synchronous card\n");
    a3d4:	f242 60ac 	movw	r0, #9900	; 0x26ac
    a3d8:	f2c0 0002 	movt	r0, #2
    a3dc:	f016 f936 	bl	2064c <Telium_Pprintf>
			Telium_Pprintf("or Chip mute\n");
    a3e0:	f242 60c0 	movw	r0, #9920	; 0x26c0
    a3e4:	f2c0 0002 	movt	r0, #2
    a3e8:	f016 f930 	bl	2064c <Telium_Pprintf>
		}
		Telium_Pprintf("\n\n\n\n\n\n");
    a3ec:	f242 60d0 	movw	r0, #9936	; 0x26d0
    a3f0:	f2c0 0002 	movt	r0, #2
    a3f4:	f016 f92a 	bl	2064c <Telium_Pprintf>
	}

	// case of stripe 2 card
	if (param_in->support == TRACK2_SUPPORT)
    a3f8:	68bb      	ldr	r3, [r7, #8]
    a3fa:	f503 5354 	add.w	r3, r3, #13568	; 0x3500
    a3fe:	3328      	adds	r3, #40	; 0x28
    a400:	681b      	ldr	r3, [r3, #0]
    a402:	2b00      	cmp	r3, #0
    a404:	d114      	bne.n	a430 <debit_non_emv+0x104>
	{
		Telium_Pprintf("\x1b""E%s\n""\x1b""F", appName);
    a406:	f242 40b8 	movw	r0, #9400	; 0x24b8
    a40a:	f2c0 0002 	movt	r0, #2
    a40e:	f64f 7100 	movw	r1, #65280	; 0xff00
    a412:	f2c0 0102 	movt	r1, #2
    a416:	f016 f919 	bl	2064c <Telium_Pprintf>
		Telium_Pprintf("Track2:\n%s\n\n\n\n\n\n", param_in->track2);
    a41a:	68bb      	ldr	r3, [r7, #8]
    a41c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    a420:	3307      	adds	r3, #7
    a422:	f242 60d8 	movw	r0, #9944	; 0x26d8
    a426:	f2c0 0002 	movt	r0, #2
    a42a:	4619      	mov	r1, r3
    a42c:	f016 f90e 	bl	2064c <Telium_Pprintf>
	}

	// case of Card Number Manual entry
	if (param_in->support == OPERATOR_SUPPORT)
    a430:	68bb      	ldr	r3, [r7, #8]
    a432:	f503 5354 	add.w	r3, r3, #13568	; 0x3500
    a436:	3328      	adds	r3, #40	; 0x28
    a438:	681b      	ldr	r3, [r3, #0]
    a43a:	2b04      	cmp	r3, #4
    a43c:	d114      	bne.n	a468 <debit_non_emv+0x13c>
	{
		Telium_Pprintf("\x1b""E%s\n""\x1b""F", appName);
    a43e:	f242 40b8 	movw	r0, #9400	; 0x24b8
    a442:	f2c0 0002 	movt	r0, #2
    a446:	f64f 7100 	movw	r1, #65280	; 0xff00
    a44a:	f2c0 0102 	movt	r1, #2
    a44e:	f016 f8fd 	bl	2064c <Telium_Pprintf>
		Telium_Pprintf("Manual Entry:\n%s\n\n\n\n\n\n", param_in->track2);
    a452:	68bb      	ldr	r3, [r7, #8]
    a454:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    a458:	3307      	adds	r3, #7
    a45a:	f242 60ec 	movw	r0, #9964	; 0x26ec
    a45e:	f2c0 0002 	movt	r0, #2
    a462:	4619      	mov	r1, r3
    a464:	f016 f8f2 	bl	2064c <Telium_Pprintf>
	}

	Telium_Ttestall(PRINTER, 2*100);
    a468:	2002      	movs	r0, #2
    a46a:	21c8      	movs	r1, #200	; 0xc8
    a46c:	f015 fc44 	bl	1fcf8 <Telium_Ttestall>
	Telium_Fclose(prt);
    a470:	69b8      	ldr	r0, [r7, #24]
    a472:	f015 fa21 	bl	1f8b8 <Telium_Fclose>

	param_out->noappli = no; // Return application number
    a476:	687b      	ldr	r3, [r7, #4]
    a478:	7bfa      	ldrb	r2, [r7, #15]
    a47a:	701a      	strb	r2, [r3, #0]
	param_out->rc_payment = PAY_OK; // Transaction done
    a47c:	687b      	ldr	r3, [r7, #4]
    a47e:	2200      	movs	r2, #0
    a480:	705a      	strb	r2, [r3, #1]

	return (FCT_OK);
    a482:	2300      	movs	r3, #0
}
    a484:	4618      	mov	r0, r3
    a486:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    a48a:	f2c0 0302 	movt	r3, #2
    a48e:	69fa      	ldr	r2, [r7, #28]
    a490:	681b      	ldr	r3, [r3, #0]
    a492:	429a      	cmp	r2, r3
    a494:	d001      	beq.n	a49a <debit_non_emv+0x16e>
    a496:	f7fe fd85 	bl	8fa4 <__stack_chk_fail>
    a49a:	f107 0720 	add.w	r7, r7, #32
    a49e:	46bd      	mov	sp, r7
    a4a0:	bd80      	pop	{r7, pc}
    a4a2:	bf00      	nop

0000a4a4 <give_interface>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int give_interface(unsigned short AppliNum, void *p1, void *p2)
{
    a4a4:	b580      	push	{r7, lr}
    a4a6:	b086      	sub	sp, #24
    a4a8:	af00      	add	r7, sp, #0
    a4aa:	4603      	mov	r3, r0
    a4ac:	60b9      	str	r1, [r7, #8]
    a4ae:	607a      	str	r2, [r7, #4]
    a4b0:	81fb      	strh	r3, [r7, #14]
    a4b2:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    a4b6:	f2c0 0302 	movt	r3, #2
    a4ba:	681b      	ldr	r3, [r3, #0]
    a4bc:	617b      	str	r3, [r7, #20]
	int i;

	for(i = 0; i < (int)(sizeof(Services) / sizeof(Services[0])); i++)
    a4be:	2300      	movs	r3, #0
    a4c0:	613b      	str	r3, [r7, #16]
    a4c2:	e00e      	b.n	a4e2 <give_interface+0x3e>
		Services[i].appli_id = AppliNum;
    a4c4:	f24f 2238 	movw	r2, #62008	; 0xf238
    a4c8:	f2c0 0202 	movt	r2, #2
    a4cc:	6939      	ldr	r1, [r7, #16]
    a4ce:	460b      	mov	r3, r1
    a4d0:	005b      	lsls	r3, r3, #1
    a4d2:	185b      	adds	r3, r3, r1
    a4d4:	009b      	lsls	r3, r3, #2
    a4d6:	18d3      	adds	r3, r2, r3
    a4d8:	89fa      	ldrh	r2, [r7, #14]
    a4da:	801a      	strh	r2, [r3, #0]
 */
int give_interface(unsigned short AppliNum, void *p1, void *p2)
{
	int i;

	for(i = 0; i < (int)(sizeof(Services) / sizeof(Services[0])); i++)
    a4dc:	693b      	ldr	r3, [r7, #16]
    a4de:	3301      	adds	r3, #1
    a4e0:	613b      	str	r3, [r7, #16]
    a4e2:	693b      	ldr	r3, [r7, #16]
    a4e4:	2b15      	cmp	r3, #21
    a4e6:	dded      	ble.n	a4c4 <give_interface+0x20>
		Services[i].appli_id = AppliNum;

	Telium_ServiceRegister((sizeof(Services) / sizeof(Services[0])), Services);
    a4e8:	2016      	movs	r0, #22
    a4ea:	f24f 2138 	movw	r1, #62008	; 0xf238
    a4ee:	f2c0 0102 	movt	r1, #2
    a4f2:	f016 f885 	bl	20600 <Telium_ServiceRegister>

	return FCT_OK;
    a4f6:	2300      	movs	r3, #0
}
    a4f8:	4618      	mov	r0, r3
    a4fa:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    a4fe:	f2c0 0302 	movt	r3, #2
    a502:	697a      	ldr	r2, [r7, #20]
    a504:	681b      	ldr	r3, [r3, #0]
    a506:	429a      	cmp	r2, r3
    a508:	d001      	beq.n	a50e <give_interface+0x6a>
    a50a:	f7fe fd4b 	bl	8fa4 <__stack_chk_fail>
    a50e:	f107 0718 	add.w	r7, r7, #24
    a512:	46bd      	mov	sp, r7
    a514:	bd80      	pop	{r7, pc}
    a516:	bf00      	nop

0000a518 <entry>:
 * The RegisteryPowerFailure() can also be moved to entry().
 *
 * \see sdk_tplus.h
 */
void entry(void)
{
    a518:	b5b0      	push	{r4, r5, r7, lr}
    a51a:	b090      	sub	sp, #64	; 0x40
    a51c:	af00      	add	r7, sp, #0
    a51e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    a522:	f2c0 0302 	movt	r3, #2
    a526:	681b      	ldr	r3, [r3, #0]
    a528:	63fb      	str	r3, [r7, #60]	; 0x3c
	object_info_t info;
	char * indexExt;

	// Recording services
	ObjectGetInfo(OBJECT_TYPE_APPLI, ApplicationGetCurrent(), &info);
    a52a:	f016 f8e3 	bl	206f4 <ApplicationGetCurrent>
    a52e:	4603      	mov	r3, r0
    a530:	461a      	mov	r2, r3
    a532:	1d3b      	adds	r3, r7, #4
    a534:	2001      	movs	r0, #1
    a536:	4611      	mov	r1, r2
    a538:	461a      	mov	r2, r3
    a53a:	f016 fb43 	bl	20bc4 <ObjectGetInfo>
	give_interface(info.application_type, NULL, NULL);
    a53e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    a540:	4618      	mov	r0, r3
    a542:	2100      	movs	r1, #0
    a544:	2200      	movs	r2, #0
    a546:	f7ff ffad 	bl	a4a4 <give_interface>

	// Creates an instance of the graphics library.
	// This creation takes some time. To be quicker it can also be instantiated only once in application's life
	if(gGoalGraphicLibInstance == NULL) {
    a54a:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    a54e:	f2c0 0302 	movt	r3, #2
    a552:	681b      	ldr	r3, [r3, #0]
    a554:	2b00      	cmp	r3, #0
    a556:	d107      	bne.n	a568 <entry+0x50>
		gGoalGraphicLibInstance = GL_GraphicLib_Create();
    a558:	f017 f910 	bl	2177c <GL_GraphicLib_Create>
    a55c:	4602      	mov	r2, r0
    a55e:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    a562:	f2c0 0302 	movt	r3, #2
    a566:	601a      	str	r2, [r3, #0]
	}

	memcpy(appName, info.name, OBJECT_NAME_LEN);
    a568:	f64f 7300 	movw	r3, #65280	; 0xff00
    a56c:	f2c0 0302 	movt	r3, #2
    a570:	461c      	mov	r4, r3
    a572:	1d3d      	adds	r5, r7, #4
    a574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a578:	682b      	ldr	r3, [r5, #0]
    a57a:	6023      	str	r3, [r4, #0]
	memcpy(fileName, info.file_name, OBJECT_FILE_NAME_LEN);
    a57c:	f64f 7318 	movw	r3, #65304	; 0xff18
    a580:	f2c0 0302 	movt	r3, #2
    a584:	461c      	mov	r4, r3
    a586:	f107 0518 	add.w	r5, r7, #24
    a58a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a58c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a58e:	682b      	ldr	r3, [r5, #0]
    a590:	6023      	str	r3, [r4, #0]
	fileName[OBJECT_FILE_NAME_LEN] = '\0';
    a592:	f64f 7318 	movw	r3, #65304	; 0xff18
    a596:	f2c0 0302 	movt	r3, #2
    a59a:	2200      	movs	r2, #0
    a59c:	751a      	strb	r2, [r3, #20]
	appName[OBJECT_NAME_LEN] = '\0';
    a59e:	f64f 7300 	movw	r3, #65280	; 0xff00
    a5a2:	f2c0 0302 	movt	r3, #2
    a5a6:	2200      	movs	r2, #0
    a5a8:	751a      	strb	r2, [r3, #20]

	// Manager looks for application icon whose name must be the same as the string given to the "is_name" function
	// FAMILY NAME cannot be used because the T_APPNAME type used in is_name function is too short to store FAMILY NAME (T_APPNAME length = 12+1 FAMILY NAME length =15+1)
	// Binary name is used instead. "info.file_name" contains the binary name with the file extension
	// (e.g. ABCDEFG.AGN). Extension must be removed in the name returned by the 'is_name' function.
	indexExt = strstr(fileName, ".");
    a5aa:	f64f 7018 	movw	r0, #65304	; 0xff18
    a5ae:	f2c0 0002 	movt	r0, #2
    a5b2:	212e      	movs	r1, #46	; 0x2e
    a5b4:	f7fe ebc8 	blx	8d48 <_init+0x1e8>
    a5b8:	6038      	str	r0, [r7, #0]
	if(indexExt != NULL) {
    a5ba:	683b      	ldr	r3, [r7, #0]
    a5bc:	2b00      	cmp	r3, #0
    a5be:	d002      	beq.n	a5c6 <entry+0xae>
		*indexExt = '\0';
    a5c0:	683b      	ldr	r3, [r7, #0]
    a5c2:	2200      	movs	r2, #0
    a5c4:	701a      	strb	r2, [r3, #0]
	}
}
    a5c6:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    a5ca:	f2c0 0302 	movt	r3, #2
    a5ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    a5d0:	681b      	ldr	r3, [r3, #0]
    a5d2:	429a      	cmp	r2, r3
    a5d4:	d001      	beq.n	a5da <entry+0xc2>
    a5d6:	f7fe fce5 	bl	8fa4 <__stack_chk_fail>
    a5da:	f107 0740 	add.w	r7, r7, #64	; 0x40
    a5de:	46bd      	mov	sp, r7
    a5e0:	bdb0      	pop	{r4, r5, r7, pc}
    a5e2:	bf00      	nop

0000a5e4 <menuGoalDisplay>:
/**
 * Main menu
 *
 */
void menuGoalDisplay(void)
{
    a5e4:	b5b0      	push	{r4, r5, r7, lr}
    a5e6:	b08e      	sub	sp, #56	; 0x38
    a5e8:	af04      	add	r7, sp, #16
    a5ea:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    a5ee:	f2c0 0302 	movt	r3, #2
    a5f2:	681b      	ldr	r3, [r3, #0]
    a5f4:	627b      	str	r3, [r7, #36]	; 0x24
	char choice = 0;
    a5f6:	2300      	movs	r3, #0
    a5f8:	71fb      	strb	r3, [r7, #7]

	const char *MenuUser[] =
    a5fa:	f242 73f8 	movw	r3, #10232	; 0x27f8
    a5fe:	f2c0 0302 	movt	r3, #2
    a602:	f107 0408 	add.w	r4, r7, #8
    a606:	461d      	mov	r5, r3
    a608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a60a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a60c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    a610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	{ "Send GPRS message", "Configure GPRS", "CARD TRANSACTION", "Load Keys", "Function 5", "Exit", 0 };

	initUIContext(_OFF_);
    a614:	2000      	movs	r0, #0
    a616:	f000 f8a7 	bl	a768 <initUIContext>

	do
	{
		//Display the menu using GOAL
		choice = GL_Dialog_Menu(gGoalGraphicLibInstance, "Select", MenuUser, choice, GL_BUTTON_NONE , GL_KEY_0, GL_TIME_INFINITE);
    a61a:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    a61e:	f2c0 0302 	movt	r3, #2
    a622:	6819      	ldr	r1, [r3, #0]
    a624:	79fb      	ldrb	r3, [r7, #7]
    a626:	f107 0208 	add.w	r2, r7, #8
    a62a:	2000      	movs	r0, #0
    a62c:	9000      	str	r0, [sp, #0]
    a62e:	2030      	movs	r0, #48	; 0x30
    a630:	9001      	str	r0, [sp, #4]
    a632:	f04f 30ff 	mov.w	r0, #4294967295
    a636:	9002      	str	r0, [sp, #8]
    a638:	4608      	mov	r0, r1
    a63a:	f242 7104 	movw	r1, #9988	; 0x2704
    a63e:	f2c0 0102 	movt	r1, #2
    a642:	f016 ff5d 	bl	21500 <GL_Dialog_Menu>
    a646:	4603      	mov	r3, r0
    a648:	71fb      	strb	r3, [r7, #7]

		switch (choice)
    a64a:	79fb      	ldrb	r3, [r7, #7]
    a64c:	2b04      	cmp	r3, #4
    a64e:	d876      	bhi.n	a73e <menuGoalDisplay+0x15a>
    a650:	a201      	add	r2, pc, #4	; (adr r2, a658 <menuGoalDisplay+0x74>)
    a652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a656:	bf00      	nop
    a658:	0000a66d 	.word	0x0000a66d
    a65c:	0000a673 	.word	0x0000a673
    a660:	0000a6a5 	.word	0x0000a6a5
    a664:	0000a6df 	.word	0x0000a6df
    a668:	0000a711 	.word	0x0000a711
		{
		case 0:
			// Send sample message
			ComGPRS();
    a66c:	f001 fea8 	bl	c3c0 <ComGPRS>
			break;
    a670:	e066      	b.n	a740 <menuGoalDisplay+0x15c>
		case 1:
			// Configure GPRS
			PromptGPRS();
    a672:	f001 fb27 	bl	bcc4 <PromptGPRS>

			GL_Dialog_Message(gGoalGraphicLibInstance, "GPRS Configuration",
    a676:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    a67a:	f2c0 0302 	movt	r3, #2
    a67e:	681b      	ldr	r3, [r3, #0]
    a680:	2201      	movs	r2, #1
    a682:	9200      	str	r2, [sp, #0]
    a684:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    a688:	9201      	str	r2, [sp, #4]
    a68a:	4618      	mov	r0, r3
    a68c:	f242 710c 	movw	r1, #9996	; 0x270c
    a690:	f2c0 0102 	movt	r1, #2
    a694:	f242 7220 	movw	r2, #10016	; 0x2720
    a698:	f2c0 0202 	movt	r2, #2
    a69c:	2302      	movs	r3, #2
    a69e:	f016 ff41 	bl	21524 <GL_Dialog_Message>
					"Configuration\nDONE...", GL_ICON_INFORMATION, GL_BUTTON_VALID,
					2 * GL_TIME_SECOND);
			break;
    a6a2:	e04d      	b.n	a740 <menuGoalDisplay+0x15c>
		case 2:
			//Amount input


			//Swipe a card
			Magnetic();
    a6a4:	f00c fb8c 	bl	16dc0 <Magnetic>

			//Request for PIN
			Iso9564PinEntry();
    a6a8:	f00e fcfa 	bl	190a0 <Iso9564PinEntry>

			//Send transaction upstream
			doTransaction();
    a6ac:	f007 fe3a 	bl	12324 <doTransaction>

			// Displays a GOAL dialog during 2s
			GL_Dialog_Message(gGoalGraphicLibInstance, "Card Transaction",
    a6b0:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    a6b4:	f2c0 0302 	movt	r3, #2
    a6b8:	681b      	ldr	r3, [r3, #0]
    a6ba:	2201      	movs	r2, #1
    a6bc:	9200      	str	r2, [sp, #0]
    a6be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    a6c2:	9201      	str	r2, [sp, #4]
    a6c4:	4618      	mov	r0, r3
    a6c6:	f242 7138 	movw	r1, #10040	; 0x2738
    a6ca:	f2c0 0102 	movt	r1, #2
    a6ce:	f242 724c 	movw	r2, #10060	; 0x274c
    a6d2:	f2c0 0202 	movt	r2, #2
    a6d6:	2302      	movs	r3, #2
    a6d8:	f016 ff24 	bl	21524 <GL_Dialog_Message>
					"FINISHED\n\nThank You...", GL_ICON_INFORMATION, GL_BUTTON_VALID,
					2 * GL_TIME_SECOND);
			break;
    a6dc:	e030      	b.n	a740 <menuGoalDisplay+0x15c>
		case 3:
			//Load All keys
			LoadKeysAuto();
    a6de:	f00f f90d 	bl	198fc <LoadKeysAuto>

			// Displays a GOAL dialog during 2s
			GL_Dialog_Message(gGoalGraphicLibInstance, "Load Keys",
    a6e2:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    a6e6:	f2c0 0302 	movt	r3, #2
    a6ea:	681b      	ldr	r3, [r3, #0]
    a6ec:	2201      	movs	r2, #1
    a6ee:	9200      	str	r2, [sp, #0]
    a6f0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    a6f4:	9201      	str	r2, [sp, #4]
    a6f6:	4618      	mov	r0, r3
    a6f8:	f242 7164 	movw	r1, #10084	; 0x2764
    a6fc:	f2c0 0102 	movt	r1, #2
    a700:	f242 7270 	movw	r2, #10096	; 0x2770
    a704:	f2c0 0202 	movt	r2, #2
    a708:	2302      	movs	r3, #2
    a70a:	f016 ff0b 	bl	21524 <GL_Dialog_Message>
					"Keys Loading\nDone...", GL_ICON_INFORMATION, GL_BUTTON_VALID,
					2 * GL_TIME_SECOND);
			break;
    a70e:	e017      	b.n	a740 <menuGoalDisplay+0x15c>
		case 4:
			// Displays a GOAL dialog during 2s
			GL_Dialog_Message(gGoalGraphicLibInstance, "Function5",
    a710:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    a714:	f2c0 0302 	movt	r3, #2
    a718:	681b      	ldr	r3, [r3, #0]
    a71a:	2201      	movs	r2, #1
    a71c:	9200      	str	r2, [sp, #0]
    a71e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    a722:	9201      	str	r2, [sp, #4]
    a724:	4618      	mov	r0, r3
    a726:	f242 7188 	movw	r1, #10120	; 0x2788
    a72a:	f2c0 0102 	movt	r1, #2
    a72e:	f242 7294 	movw	r2, #10132	; 0x2794
    a732:	f2c0 0202 	movt	r2, #2
    a736:	2302      	movs	r3, #2
    a738:	f016 fef4 	bl	21524 <GL_Dialog_Message>
					"Function5\nRunning...", GL_ICON_INFORMATION, GL_BUTTON_VALID,
					2 * GL_TIME_SECOND);
			break;
    a73c:	e000      	b.n	a740 <menuGoalDisplay+0x15c>
		default:
			//exit
			break;
    a73e:	bf00      	nop
		}
	} while (choice != 5);
    a740:	79fb      	ldrb	r3, [r7, #7]
    a742:	2b05      	cmp	r3, #5
    a744:	f47f af69 	bne.w	a61a <menuGoalDisplay+0x36>

	releaseUIContext();
    a748:	f000 f89c 	bl	a884 <releaseUIContext>

	return;
}
    a74c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    a750:	f2c0 0302 	movt	r3, #2
    a754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a756:	681b      	ldr	r3, [r3, #0]
    a758:	429a      	cmp	r2, r3
    a75a:	d001      	beq.n	a760 <menuGoalDisplay+0x17c>
    a75c:	f7fe fc22 	bl	8fa4 <__stack_chk_fail>
    a760:	f107 0728 	add.w	r7, r7, #40	; 0x28
    a764:	46bd      	mov	sp, r7
    a766:	bdb0      	pop	{r4, r5, r7, pc}

0000a768 <initUIContext>:

/**
 * Initialize the display context to maximize the canvas on user area
 */
void initUIContext(int displayHeaderFooterLeds)
{
    a768:	b580      	push	{r7, lr}
    a76a:	b084      	sub	sp, #16
    a76c:	af00      	add	r7, sp, #0
    a76e:	6078      	str	r0, [r7, #4]
    a770:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    a774:	f2c0 0302 	movt	r3, #2
    a778:	681b      	ldr	r3, [r3, #0]
    a77a:	60fb      	str	r3, [r7, #12]
	if(displayHeaderFooterLeds != _OFF_ && displayHeaderFooterLeds != _ON_) {
    a77c:	687b      	ldr	r3, [r7, #4]
    a77e:	2b00      	cmp	r3, #0
    a780:	d004      	beq.n	a78c <initUIContext+0x24>
    a782:	687b      	ldr	r3, [r7, #4]
    a784:	2b01      	cmp	r3, #1
    a786:	d001      	beq.n	a78c <initUIContext+0x24>
		displayHeaderFooterLeds = _OFF_;
    a788:	2300      	movs	r3, #0
    a78a:	607b      	str	r3, [r7, #4]
	}
	sSavedStatusHeader=DisplayHeader(displayHeaderFooterLeds);
    a78c:	6878      	ldr	r0, [r7, #4]
    a78e:	f016 fb27 	bl	20de0 <DisplayHeader>
    a792:	4602      	mov	r2, r0
    a794:	f240 0350 	movw	r3, #80	; 0x50
    a798:	f2c0 0303 	movt	r3, #3
    a79c:	601a      	str	r2, [r3, #0]
	sSavedStatusLeds=DisplayLeds(displayHeaderFooterLeds);
    a79e:	6878      	ldr	r0, [r7, #4]
    a7a0:	f016 fb4c 	bl	20e3c <DisplayLeds>
    a7a4:	4602      	mov	r2, r0
    a7a6:	f240 0354 	movw	r3, #84	; 0x54
    a7aa:	f2c0 0303 	movt	r3, #3
    a7ae:	601a      	str	r2, [r3, #0]
	sSavedStatusFooter=DisplayFooter(displayHeaderFooterLeds);
    a7b0:	6878      	ldr	r0, [r7, #4]
    a7b2:	f016 fae5 	bl	20d80 <DisplayFooter>
    a7b6:	4602      	mov	r2, r0
    a7b8:	f240 0358 	movw	r3, #88	; 0x58
    a7bc:	f2c0 0303 	movt	r3, #3
    a7c0:	601a      	str	r2, [r3, #0]

	// Open display
	sDisplay = Telium_Fopen("DISPLAY", "w*");
    a7c2:	f642 0014 	movw	r0, #10260	; 0x2814
    a7c6:	f2c0 0002 	movt	r0, #2
    a7ca:	f642 011c 	movw	r1, #10268	; 0x281c
    a7ce:	f2c0 0102 	movt	r1, #2
    a7d2:	f015 f8a3 	bl	1f91c <Telium_Fopen>
    a7d6:	4602      	mov	r2, r0
    a7d8:	f64f 733c 	movw	r3, #65340	; 0xff3c
    a7dc:	f2c0 0302 	movt	r3, #2
    a7e0:	601a      	str	r2, [r3, #0]
	// Open keyboard
	sKeyboard = Telium_Fopen("KEYBOARD", "r*");
    a7e2:	f642 0020 	movw	r0, #10272	; 0x2820
    a7e6:	f2c0 0002 	movt	r0, #2
    a7ea:	f642 012c 	movw	r1, #10284	; 0x282c
    a7ee:	f2c0 0102 	movt	r1, #2
    a7f2:	f015 f893 	bl	1f91c <Telium_Fopen>
    a7f6:	4602      	mov	r2, r0
    a7f8:	f64f 7338 	movw	r3, #65336	; 0xff38
    a7fc:	f2c0 0302 	movt	r3, #2
    a800:	601a      	str	r2, [r3, #0]
		CHECK(hPrn!=NULL, lblKO1);
	}
	lblKO1:;
#endif

	if(GL_GraphicLib_IsTouchPresent(gGoalGraphicLibInstance)) { // Check if it is a touch screen
    a802:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    a806:	f2c0 0302 	movt	r3, #2
    a80a:	681b      	ldr	r3, [r3, #0]
    a80c:	4618      	mov	r0, r3
    a80e:	f016 fffb 	bl	21808 <GL_GraphicLib_IsTouchPresent>
    a812:	4603      	mov	r3, r0
    a814:	2b00      	cmp	r3, #0
    a816:	d026      	beq.n	a866 <initUIContext+0xfe>
		DisplayFooter(_OFF_);                 // Remove footer otherwise touch does not work
    a818:	2000      	movs	r0, #0
    a81a:	f016 fab1 	bl	20d80 <DisplayFooter>
		hTsc = Telium_Stdperif("TSCREEN", NULL);             // Check "TSCREEN" peripheral opened?
    a81e:	f642 0030 	movw	r0, #10288	; 0x2830
    a822:	f2c0 0002 	movt	r0, #2
    a826:	2100      	movs	r1, #0
    a828:	f015 fa34 	bl	1fc94 <Telium_Stdperif>
    a82c:	4602      	mov	r2, r0
    a82e:	f64f 7330 	movw	r3, #65328	; 0xff30
    a832:	f2c0 0302 	movt	r3, #2
    a836:	601a      	str	r2, [r3, #0]
		if(hTsc == NULL){
    a838:	f64f 7330 	movw	r3, #65328	; 0xff30
    a83c:	f2c0 0302 	movt	r3, #2
    a840:	681b      	ldr	r3, [r3, #0]
    a842:	2b00      	cmp	r3, #0
    a844:	d10f      	bne.n	a866 <initUIContext+0xfe>
			hTsc = Telium_Fopen("TSCREEN", "r*"); // Open "touch" peripheral
    a846:	f642 0030 	movw	r0, #10288	; 0x2830
    a84a:	f2c0 0002 	movt	r0, #2
    a84e:	f642 012c 	movw	r1, #10284	; 0x282c
    a852:	f2c0 0102 	movt	r1, #2
    a856:	f015 f861 	bl	1f91c <Telium_Fopen>
    a85a:	4602      	mov	r2, r0
    a85c:	f64f 7330 	movw	r3, #65328	; 0xff30
    a860:	f2c0 0302 	movt	r3, #2
    a864:	601a      	str	r2, [r3, #0]
			CHECK(hTsc!=NULL, lblKO);
		}
		lblKO:;
	}

	return;
    a866:	bf00      	nop
}
    a868:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    a86c:	f2c0 0302 	movt	r3, #2
    a870:	68fa      	ldr	r2, [r7, #12]
    a872:	681b      	ldr	r3, [r3, #0]
    a874:	429a      	cmp	r2, r3
    a876:	d001      	beq.n	a87c <initUIContext+0x114>
    a878:	f7fe fb94 	bl	8fa4 <__stack_chk_fail>
    a87c:	f107 0710 	add.w	r7, r7, #16
    a880:	46bd      	mov	sp, r7
    a882:	bd80      	pop	{r7, pc}

0000a884 <releaseUIContext>:

/**
 * Restore display context
 */
void releaseUIContext(void)
{
    a884:	b580      	push	{r7, lr}
    a886:	b082      	sub	sp, #8
    a888:	af00      	add	r7, sp, #0
    a88a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    a88e:	f2c0 0302 	movt	r3, #2
    a892:	681b      	ldr	r3, [r3, #0]
    a894:	607b      	str	r3, [r7, #4]
	// close keyboard
	if (sKeyboard)
    a896:	f64f 7338 	movw	r3, #65336	; 0xff38
    a89a:	f2c0 0302 	movt	r3, #2
    a89e:	681b      	ldr	r3, [r3, #0]
    a8a0:	2b00      	cmp	r3, #0
    a8a2:	d00d      	beq.n	a8c0 <releaseUIContext+0x3c>
	{
		Telium_Fclose(sKeyboard);
    a8a4:	f64f 7338 	movw	r3, #65336	; 0xff38
    a8a8:	f2c0 0302 	movt	r3, #2
    a8ac:	681b      	ldr	r3, [r3, #0]
    a8ae:	4618      	mov	r0, r3
    a8b0:	f015 f802 	bl	1f8b8 <Telium_Fclose>
		sKeyboard = NULL;
    a8b4:	f64f 7338 	movw	r3, #65336	; 0xff38
    a8b8:	f2c0 0302 	movt	r3, #2
    a8bc:	2200      	movs	r2, #0
    a8be:	601a      	str	r2, [r3, #0]
	}
	// close display
	if (sDisplay)
    a8c0:	f64f 733c 	movw	r3, #65340	; 0xff3c
    a8c4:	f2c0 0302 	movt	r3, #2
    a8c8:	681b      	ldr	r3, [r3, #0]
    a8ca:	2b00      	cmp	r3, #0
    a8cc:	d00d      	beq.n	a8ea <releaseUIContext+0x66>
	{
		Telium_Fclose(sDisplay);
    a8ce:	f64f 733c 	movw	r3, #65340	; 0xff3c
    a8d2:	f2c0 0302 	movt	r3, #2
    a8d6:	681b      	ldr	r3, [r3, #0]
    a8d8:	4618      	mov	r0, r3
    a8da:	f014 ffed 	bl	1f8b8 <Telium_Fclose>
		sDisplay = NULL;
    a8de:	f64f 733c 	movw	r3, #65340	; 0xff3c
    a8e2:	f2c0 0302 	movt	r3, #2
    a8e6:	2200      	movs	r2, #0
    a8e8:	601a      	str	r2, [r3, #0]
	}

	// Close peripherals
	// *****************
	if(hTsc) {
    a8ea:	f64f 7330 	movw	r3, #65328	; 0xff30
    a8ee:	f2c0 0302 	movt	r3, #2
    a8f2:	681b      	ldr	r3, [r3, #0]
    a8f4:	2b00      	cmp	r3, #0
    a8f6:	d00d      	beq.n	a914 <releaseUIContext+0x90>
		Telium_Fclose(hTsc); // Close "touch" peripheral
    a8f8:	f64f 7330 	movw	r3, #65328	; 0xff30
    a8fc:	f2c0 0302 	movt	r3, #2
    a900:	681b      	ldr	r3, [r3, #0]
    a902:	4618      	mov	r0, r3
    a904:	f014 ffd8 	bl	1f8b8 <Telium_Fclose>
		hTsc=NULL;
    a908:	f64f 7330 	movw	r3, #65328	; 0xff30
    a90c:	f2c0 0302 	movt	r3, #2
    a910:	2200      	movs	r2, #0
    a912:	601a      	str	r2, [r3, #0]
	}

	if(hPrn) {
    a914:	f64f 7334 	movw	r3, #65332	; 0xff34
    a918:	f2c0 0302 	movt	r3, #2
    a91c:	681b      	ldr	r3, [r3, #0]
    a91e:	2b00      	cmp	r3, #0
    a920:	d00d      	beq.n	a93e <releaseUIContext+0xba>
		Telium_Fclose(hPrn); // Close "printer" peripheral
    a922:	f64f 7334 	movw	r3, #65332	; 0xff34
    a926:	f2c0 0302 	movt	r3, #2
    a92a:	681b      	ldr	r3, [r3, #0]
    a92c:	4618      	mov	r0, r3
    a92e:	f014 ffc3 	bl	1f8b8 <Telium_Fclose>
		hPrn=NULL;
    a932:	f64f 7334 	movw	r3, #65332	; 0xff34
    a936:	f2c0 0302 	movt	r3, #2
    a93a:	2200      	movs	r2, #0
    a93c:	601a      	str	r2, [r3, #0]
	}

	// Restore display context
	DisplayHeader(sSavedStatusHeader);
    a93e:	f240 0350 	movw	r3, #80	; 0x50
    a942:	f2c0 0303 	movt	r3, #3
    a946:	681b      	ldr	r3, [r3, #0]
    a948:	4618      	mov	r0, r3
    a94a:	f016 fa49 	bl	20de0 <DisplayHeader>
	DisplayLeds(sSavedStatusLeds);
    a94e:	f240 0354 	movw	r3, #84	; 0x54
    a952:	f2c0 0303 	movt	r3, #3
    a956:	681b      	ldr	r3, [r3, #0]
    a958:	4618      	mov	r0, r3
    a95a:	f016 fa6f 	bl	20e3c <DisplayLeds>
	DisplayFooter(sSavedStatusFooter);
    a95e:	f240 0358 	movw	r3, #88	; 0x58
    a962:	f2c0 0303 	movt	r3, #3
    a966:	681b      	ldr	r3, [r3, #0]
    a968:	4618      	mov	r0, r3
    a96a:	f016 fa09 	bl	20d80 <DisplayFooter>

	return;
    a96e:	bf00      	nop
}
    a970:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    a974:	f2c0 0302 	movt	r3, #2
    a978:	687a      	ldr	r2, [r7, #4]
    a97a:	681b      	ldr	r3, [r3, #0]
    a97c:	429a      	cmp	r2, r3
    a97e:	d001      	beq.n	a984 <releaseUIContext+0x100>
    a980:	f7fe fb10 	bl	8fa4 <__stack_chk_fail>
    a984:	f107 0708 	add.w	r7, r7, #8
    a988:	46bd      	mov	sp, r7
    a98a:	bd80      	pop	{r7, pc}

0000a98c <ResetPeripherals>:


//****************************************************************************
// To reset standard peripherals
//****************************************************************************
void ResetPeripherals(unsigned int uiEvents) {
    a98c:	b580      	push	{r7, lr}
    a98e:	b084      	sub	sp, #16
    a990:	af00      	add	r7, sp, #0
    a992:	6078      	str	r0, [r7, #4]
    a994:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    a998:	f2c0 0302 	movt	r3, #2
    a99c:	681b      	ldr	r3, [r3, #0]
    a99e:	60fb      	str	r3, [r7, #12]
	// ***************
	// Empty

	// Reset FIFO buffers
	// ******************
	if(((uiEvents & KEYBOARD) == KEYBOARD) && sKeyboard) // FIFO keyboard
    a9a0:	687b      	ldr	r3, [r7, #4]
    a9a2:	f003 0301 	and.w	r3, r3, #1
    a9a6:	2b00      	cmp	r3, #0
    a9a8:	d00f      	beq.n	a9ca <ResetPeripherals+0x3e>
    a9aa:	f64f 7338 	movw	r3, #65336	; 0xff38
    a9ae:	f2c0 0302 	movt	r3, #2
    a9b2:	681b      	ldr	r3, [r3, #0]
    a9b4:	2b00      	cmp	r3, #0
    a9b6:	d008      	beq.n	a9ca <ResetPeripherals+0x3e>
		Telium_Reset_buf(sKeyboard, _receive_id);
    a9b8:	f64f 7338 	movw	r3, #65336	; 0xff38
    a9bc:	f2c0 0302 	movt	r3, #2
    a9c0:	681b      	ldr	r3, [r3, #0]
    a9c2:	4618      	mov	r0, r3
    a9c4:	2101      	movs	r1, #1
    a9c6:	f015 f8a3 	bl	1fb10 <Telium_Reset_buf>

	if(((uiEvents & TSCREEN) == TSCREEN) && hTsc)   // FIFO touch screen
    a9ca:	687b      	ldr	r3, [r7, #4]
    a9cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    a9d0:	2b00      	cmp	r3, #0
    a9d2:	d00f      	beq.n	a9f4 <ResetPeripherals+0x68>
    a9d4:	f64f 7330 	movw	r3, #65328	; 0xff30
    a9d8:	f2c0 0302 	movt	r3, #2
    a9dc:	681b      	ldr	r3, [r3, #0]
    a9de:	2b00      	cmp	r3, #0
    a9e0:	d008      	beq.n	a9f4 <ResetPeripherals+0x68>
		Telium_Reset_buf(hTsc, _receive_id);
    a9e2:	f64f 7330 	movw	r3, #65328	; 0xff30
    a9e6:	f2c0 0302 	movt	r3, #2
    a9ea:	681b      	ldr	r3, [r3, #0]
    a9ec:	4618      	mov	r0, r3
    a9ee:	2101      	movs	r1, #1
    a9f0:	f015 f88e 	bl	1fb10 <Telium_Reset_buf>

	if(((uiEvents & PRINTER) == PRINTER) && hPrn)   // FIFO printer
    a9f4:	687b      	ldr	r3, [r7, #4]
    a9f6:	f003 0302 	and.w	r3, r3, #2
    a9fa:	2b00      	cmp	r3, #0
    a9fc:	d00f      	beq.n	aa1e <ResetPeripherals+0x92>
    a9fe:	f64f 7334 	movw	r3, #65332	; 0xff34
    aa02:	f2c0 0302 	movt	r3, #2
    aa06:	681b      	ldr	r3, [r3, #0]
    aa08:	2b00      	cmp	r3, #0
    aa0a:	d008      	beq.n	aa1e <ResetPeripherals+0x92>
		Telium_Reset_buf(hPrn, _receive_id);
    aa0c:	f64f 7334 	movw	r3, #65332	; 0xff34
    aa10:	f2c0 0302 	movt	r3, #2
    aa14:	681b      	ldr	r3, [r3, #0]
    aa16:	4618      	mov	r0, r3
    aa18:	2101      	movs	r1, #1
    aa1a:	f015 f879 	bl	1fb10 <Telium_Reset_buf>
}
    aa1e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    aa22:	f2c0 0302 	movt	r3, #2
    aa26:	68fa      	ldr	r2, [r7, #12]
    aa28:	681b      	ldr	r3, [r3, #0]
    aa2a:	429a      	cmp	r2, r3
    aa2c:	d001      	beq.n	aa32 <ResetPeripherals+0xa6>
    aa2e:	f7fe fab9 	bl	8fa4 <__stack_chk_fail>
    aa32:	f107 0710 	add.w	r7, r7, #16
    aa36:	46bd      	mov	sp, r7
    aa38:	bd80      	pop	{r7, pc}
    aa3a:	bf00      	nop

0000aa3c <GprsReport>:
//    >=0 : Report done
//     <0 : Report failed
//****************************************************************************

static int GprsReport(T_GL_HWIDGET hScreen, char *pcApn, char *pcUsername)
{
    aa3c:	b5b0      	push	{r4, r5, r7, lr}
    aa3e:	f5ad 7d52 	sub.w	sp, sp, #840	; 0x348
    aa42:	af04      	add	r7, sp, #16
    aa44:	f107 030c 	add.w	r3, r7, #12
    aa48:	6018      	str	r0, [r3, #0]
    aa4a:	f107 0308 	add.w	r3, r7, #8
    aa4e:	6019      	str	r1, [r3, #0]
    aa50:	1d3b      	adds	r3, r7, #4
    aa52:	601a      	str	r2, [r3, #0]
    aa54:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    aa58:	f2c0 0302 	movt	r3, #2
    aa5c:	681b      	ldr	r3, [r3, #0]
    aa5e:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
	// Local variables
	// ***************
	Telium_File_t *hGprs = NULL;
    aa62:	f107 031c 	add.w	r3, r7, #28
    aa66:	2200      	movs	r2, #0
    aa68:	601a      	str	r2, [r3, #0]
#ifndef __TELIUM3__
	hGprs = Telium_Stdperif((char*)"DGPRS", NULL);
	//CHECK(hGprs!=NULL, lblKO);
#endif

	iRet = appGet(appGprsRequirePin, tcRequirePin, lenGprsRequirePin+1);
    aa6a:	f107 0418 	add.w	r4, r7, #24
    aa6e:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
    aa72:	200d      	movs	r0, #13
    aa74:	4619      	mov	r1, r3
    aa76:	2202      	movs	r2, #2
    aa78:	f004 fe20 	bl	f6bc <appGet>
    aa7c:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    aa7e:	f107 0318 	add.w	r3, r7, #24
    aa82:	681b      	ldr	r3, [r3, #0]
    aa84:	2b00      	cmp	r3, #0
    aa86:	f2c0 8567 	blt.w	b558 <GprsReport+0xb1c>

	iRequirePin=atoi(tcRequirePin); // False => 0 (pin required), True => 1 (pin saved)
    aa8a:	f107 0420 	add.w	r4, r7, #32
    aa8e:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
    aa92:	4618      	mov	r0, r3
    aa94:	f7fe e886 	blx	8ba4 <_init+0x44>
    aa98:	6020      	str	r0, [r4, #0]
	iRet = gprs_SetPinModeFree(hGprs,iRequirePin);
    aa9a:	f107 0320 	add.w	r3, r7, #32
    aa9e:	681b      	ldr	r3, [r3, #0]
    aaa0:	f107 0418 	add.w	r4, r7, #24
    aaa4:	f107 021c 	add.w	r2, r7, #28
    aaa8:	6810      	ldr	r0, [r2, #0]
    aaaa:	4619      	mov	r1, r3
    aaac:	f014 fbe3 	bl	1f276 <gprs_SetPinModeFree>
    aab0:	6020      	str	r0, [r4, #0]
	CHECK(iRet==0, lblKO);
    aab2:	f107 0318 	add.w	r3, r7, #24
    aab6:	681b      	ldr	r3, [r3, #0]
    aab8:	2b00      	cmp	r3, #0
    aaba:	f040 854d 	bne.w	b558 <GprsReport+0xb1c>

	iRet = gprs_GetInformation(hGprs,&xInfo,sizeof(xInfo));
    aabe:	f107 0418 	add.w	r4, r7, #24
    aac2:	f107 021c 	add.w	r2, r7, #28
    aac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
    aaca:	6810      	ldr	r0, [r2, #0]
    aacc:	4619      	mov	r1, r3
    aace:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
    aad2:	f014 fbbe 	bl	1f252 <gprs_GetInformation>
    aad6:	6020      	str	r0, [r4, #0]
	CHECK(iRet==0, lblKO);
    aad8:	f107 0318 	add.w	r3, r7, #24
    aadc:	681b      	ldr	r3, [r3, #0]
    aade:	2b00      	cmp	r3, #0
    aae0:	f040 853a 	bne.w	b558 <GprsReport+0xb1c>

	// GPRS start report
	// =================
	switch (xInfo.start_report)
    aae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
    aae8:	681b      	ldr	r3, [r3, #0]
    aaea:	3301      	adds	r3, #1
    aaec:	2b05      	cmp	r3, #5
    aaee:	d867      	bhi.n	abc0 <GprsReport+0x184>
    aaf0:	a201      	add	r2, pc, #4	; (adr r2, aaf8 <GprsReport+0xbc>)
    aaf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    aaf6:	bf00      	nop
    aaf8:	0000ab11 	.word	0x0000ab11
    aafc:	0000ab31 	.word	0x0000ab31
    ab00:	0000ab4b 	.word	0x0000ab4b
    ab04:	0000ab65 	.word	0x0000ab65
    ab08:	0000ab85 	.word	0x0000ab85
    ab0c:	0000aba7 	.word	0x0000aba7
	{
	case EGPRS_REPORT_NOT_RECEIVED_YET: strcpy(tcReport, "Rpt: NOT_RECEIVED_YET"); break;
    ab10:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
    ab14:	f642 33ec 	movw	r3, #11244	; 0x2bec
    ab18:	f2c0 0302 	movt	r3, #2
    ab1c:	4614      	mov	r4, r2
    ab1e:	461d      	mov	r5, r3
    ab20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ab22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ab24:	e895 0003 	ldmia.w	r5, {r0, r1}
    ab28:	6020      	str	r0, [r4, #0]
    ab2a:	3404      	adds	r4, #4
    ab2c:	8021      	strh	r1, [r4, #0]
    ab2e:	e058      	b.n	abe2 <GprsReport+0x1a6>
	case EGPRS_REPORT_READY:            strcpy(tcReport, "Rpt: READY");            break;
    ab30:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
    ab34:	f642 4204 	movw	r2, #11268	; 0x2c04
    ab38:	f2c0 0202 	movt	r2, #2
    ab3c:	ca07      	ldmia	r2, {r0, r1, r2}
    ab3e:	c303      	stmia	r3!, {r0, r1}
    ab40:	801a      	strh	r2, [r3, #0]
    ab42:	3302      	adds	r3, #2
    ab44:	0c12      	lsrs	r2, r2, #16
    ab46:	701a      	strb	r2, [r3, #0]
    ab48:	e04b      	b.n	abe2 <GprsReport+0x1a6>
	case EGPRS_REPORT_WAITING_CODE:     strcpy(tcReport, "Rpt: WAITING_CODE");     break;
    ab4a:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
    ab4e:	f642 4310 	movw	r3, #11280	; 0x2c10
    ab52:	f2c0 0302 	movt	r3, #2
    ab56:	4614      	mov	r4, r2
    ab58:	461d      	mov	r5, r3
    ab5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ab5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ab5e:	682b      	ldr	r3, [r5, #0]
    ab60:	8023      	strh	r3, [r4, #0]
    ab62:	e03e      	b.n	abe2 <GprsReport+0x1a6>
	case EGPRS_REPORT_SIM_NOT_PRESENT:  strcpy(tcReport, "Rpt: SIM_NOT_PRESENT");  break;
    ab64:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
    ab68:	f642 4324 	movw	r3, #11300	; 0x2c24
    ab6c:	f2c0 0302 	movt	r3, #2
    ab70:	4614      	mov	r4, r2
    ab72:	461d      	mov	r5, r3
    ab74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ab76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ab78:	e895 0003 	ldmia.w	r5, {r0, r1}
    ab7c:	6020      	str	r0, [r4, #0]
    ab7e:	3404      	adds	r4, #4
    ab80:	7021      	strb	r1, [r4, #0]
    ab82:	e02e      	b.n	abe2 <GprsReport+0x1a6>
	case EGPRS_REPORT_SIMLOCK_STATE:    strcpy(tcReport, "Rpt: SIMLOCK_STATE");    break;
    ab84:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
    ab88:	f642 433c 	movw	r3, #11324	; 0x2c3c
    ab8c:	f2c0 0302 	movt	r3, #2
    ab90:	4614      	mov	r4, r2
    ab92:	461d      	mov	r5, r3
    ab94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ab96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ab98:	682b      	ldr	r3, [r5, #0]
    ab9a:	461a      	mov	r2, r3
    ab9c:	8022      	strh	r2, [r4, #0]
    ab9e:	3402      	adds	r4, #2
    aba0:	0c1b      	lsrs	r3, r3, #16
    aba2:	7023      	strb	r3, [r4, #0]
    aba4:	e01d      	b.n	abe2 <GprsReport+0x1a6>
	case EGPRS_REPORT_FATAL_ERROR:      strcpy(tcReport, "Rpt: FATAL_ERROR");      break;
    aba6:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
    abaa:	f642 4350 	movw	r3, #11344	; 0x2c50
    abae:	f2c0 0302 	movt	r3, #2
    abb2:	4614      	mov	r4, r2
    abb4:	461d      	mov	r5, r3
    abb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    abb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    abba:	682b      	ldr	r3, [r5, #0]
    abbc:	7023      	strb	r3, [r4, #0]
    abbe:	e010      	b.n	abe2 <GprsReport+0x1a6>
	default:                            strcpy(tcReport, "Rpt: UNKNOWN_ERROR");    break;
    abc0:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
    abc4:	f642 4364 	movw	r3, #11364	; 0x2c64
    abc8:	f2c0 0302 	movt	r3, #2
    abcc:	4614      	mov	r4, r2
    abce:	461d      	mov	r5, r3
    abd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    abd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    abd4:	682b      	ldr	r3, [r5, #0]
    abd6:	461a      	mov	r2, r3
    abd8:	8022      	strh	r2, [r4, #0]
    abda:	3402      	adds	r4, #2
    abdc:	0c1b      	lsrs	r3, r3, #16
    abde:	7023      	strb	r3, [r4, #0]
    abe0:	bf00      	nop
	}

	// GPRS sim status
	// ===============
	switch (xInfo.sim_status)
    abe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
    abe6:	685b      	ldr	r3, [r3, #4]
    abe8:	3301      	adds	r3, #1
    abea:	2b0a      	cmp	r3, #10
    abec:	f200 8472 	bhi.w	b4d4 <GprsReport+0xa98>
    abf0:	a201      	add	r2, pc, #4	; (adr r2, abf8 <GprsReport+0x1bc>)
    abf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    abf6:	bf00      	nop
    abf8:	0000ac25 	.word	0x0000ac25
    abfc:	0000b4d5 	.word	0x0000b4d5
    ac00:	0000ac5f 	.word	0x0000ac5f
    ac04:	0000acc7 	.word	0x0000acc7
    ac08:	0000ace1 	.word	0x0000ace1
    ac0c:	0000aed9 	.word	0x0000aed9
    ac10:	0000aefb 	.word	0x0000aefb
    ac14:	0000b0f1 	.word	0x0000b0f1
    ac18:	0000b111 	.word	0x0000b111
    ac1c:	0000b491 	.word	0x0000b491
    ac20:	0000b4b3 	.word	0x0000b4b3
	{
	case EGPRS_SIM_NOT_RECEIVED_YET:
		strcpy(tcStatus, "Sta: NOT_RECEIVED_YET");
    ac24:	f507 7206 	add.w	r2, r7, #536	; 0x218
    ac28:	f642 4378 	movw	r3, #11384	; 0x2c78
    ac2c:	f2c0 0302 	movt	r3, #2
    ac30:	4614      	mov	r4, r2
    ac32:	461d      	mov	r5, r3
    ac34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ac36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ac38:	e895 0003 	ldmia.w	r5, {r0, r1}
    ac3c:	6020      	str	r0, [r4, #0]
    ac3e:	3404      	adds	r4, #4
    ac40:	8021      	strh	r1, [r4, #0]

		// *** Start GSM session ***
		iRet = LL_GSM_Start(NULL);
    ac42:	f107 0418 	add.w	r4, r7, #24
    ac46:	2000      	movs	r0, #0
    ac48:	f014 fc1d 	bl	1f486 <LL_GSM_Start>
    ac4c:	6020      	str	r0, [r4, #0]
		CHECK(iRet==LL_ERROR_OK, lblKO);
    ac4e:	f107 0318 	add.w	r3, r7, #24
    ac52:	681b      	ldr	r3, [r3, #0]
    ac54:	2b00      	cmp	r3, #0
    ac56:	f040 847f 	bne.w	b558 <GprsReport+0xb1c>

		break;
    ac5a:	f000 bc4c 	b.w	b4f6 <GprsReport+0xaba>
	case EGPRS_SIM_OK:                                         // Sim ready, pin already checked
		strcpy(tcStatus, "Sta: SIM_OK");
    ac5e:	f507 7206 	add.w	r2, r7, #536	; 0x218
    ac62:	f642 4390 	movw	r3, #11408	; 0x2c90
    ac66:	f2c0 0302 	movt	r3, #2
    ac6a:	4614      	mov	r4, r2
    ac6c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    ac70:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		// *** Start GPRS session ***
		iRet = LL_GPRS_Start(NULL, pcApn);
    ac74:	f107 0418 	add.w	r4, r7, #24
    ac78:	f107 0308 	add.w	r3, r7, #8
    ac7c:	2000      	movs	r0, #0
    ac7e:	6819      	ldr	r1, [r3, #0]
    ac80:	f014 fbef 	bl	1f462 <LL_GPRS_Start>
    ac84:	6020      	str	r0, [r4, #0]
		CHECK(iRet==LL_ERROR_OK, lblKO);
    ac86:	f107 0318 	add.w	r3, r7, #24
    ac8a:	681b      	ldr	r3, [r3, #0]
    ac8c:	2b00      	cmp	r3, #0
    ac8e:	f040 8463 	bne.w	b558 <GprsReport+0xb1c>

		iRet = GoalDspLine(hScreen, 4, "CONNECT. IN PROGRESS", &txGPRS[4], 0, true);
    ac92:	f107 0418 	add.w	r4, r7, #24
    ac96:	f107 030c 	add.w	r3, r7, #12
    ac9a:	2200      	movs	r2, #0
    ac9c:	9200      	str	r2, [sp, #0]
    ac9e:	2201      	movs	r2, #1
    aca0:	9201      	str	r2, [sp, #4]
    aca2:	6818      	ldr	r0, [r3, #0]
    aca4:	2104      	movs	r1, #4
    aca6:	f642 429c 	movw	r2, #11420	; 0x2c9c
    acaa:	f2c0 0202 	movt	r2, #2
    acae:	4ba1      	ldr	r3, [pc, #644]	; (af34 <GprsReport+0x4f8>)
    acb0:	f002 fca0 	bl	d5f4 <GoalDspLine>
    acb4:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    acb6:	f107 0318 	add.w	r3, r7, #24
    acba:	681b      	ldr	r3, [r3, #0]
    acbc:	2b00      	cmp	r3, #0
    acbe:	f2c0 844b 	blt.w	b558 <GprsReport+0xb1c>
		break;
    acc2:	f000 bc18 	b.w	b4f6 <GprsReport+0xaba>
	case EGPRS_SIM_KO:                  strcpy(tcStatus, "Sta: SIM_KO"); break;
    acc6:	f507 7206 	add.w	r2, r7, #536	; 0x218
    acca:	f642 43b4 	movw	r3, #11444	; 0x2cb4
    acce:	f2c0 0302 	movt	r3, #2
    acd2:	4614      	mov	r4, r2
    acd4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    acd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    acdc:	f000 bc0b 	b.w	b4f6 <GprsReport+0xaba>
	case EGPRS_SIM_PIN_REQUIRED:                              // Pin required, enter it
		strcpy(tcStatus, "Sta: PIN_REQUIRED");
    ace0:	f507 7206 	add.w	r2, r7, #536	; 0x218
    ace4:	f642 43c0 	movw	r3, #11456	; 0x2cc0
    ace8:	f2c0 0302 	movt	r3, #2
    acec:	4614      	mov	r4, r2
    acee:	461d      	mov	r5, r3
    acf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    acf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    acf4:	682b      	ldr	r3, [r5, #0]
    acf6:	8023      	strh	r3, [r4, #0]

		// *** Enter Pin code ***
		memset(tcMask, 0, sizeof(tcMask));
    acf8:	f507 730d 	add.w	r3, r7, #564	; 0x234
    acfc:	4618      	mov	r0, r3
    acfe:	2100      	movs	r1, #0
    ad00:	f44f 7280 	mov.w	r2, #256	; 0x100
    ad04:	f7fd ef5a 	blx	8bbc <_init+0x5c>
		for (i=0; i<lenGprsPin; i++)
    ad08:	f107 0314 	add.w	r3, r7, #20
    ad0c:	2200      	movs	r2, #0
    ad0e:	601a      	str	r2, [r3, #0]
    ad10:	e017      	b.n	ad42 <GprsReport+0x306>
			strcat(tcMask, "/d");                             // Accept only decimal character
    ad12:	f507 730d 	add.w	r3, r7, #564	; 0x234
    ad16:	4618      	mov	r0, r3
    ad18:	f7fd efb4 	blx	8c84 <_init+0x124>
    ad1c:	4603      	mov	r3, r0
    ad1e:	f507 720d 	add.w	r2, r7, #564	; 0x234
    ad22:	18d2      	adds	r2, r2, r3
    ad24:	f642 43d4 	movw	r3, #11476	; 0x2cd4
    ad28:	f2c0 0302 	movt	r3, #2
    ad2c:	8819      	ldrh	r1, [r3, #0]
    ad2e:	789b      	ldrb	r3, [r3, #2]
    ad30:	8011      	strh	r1, [r2, #0]
    ad32:	7093      	strb	r3, [r2, #2]
	case EGPRS_SIM_PIN_REQUIRED:                              // Pin required, enter it
		strcpy(tcStatus, "Sta: PIN_REQUIRED");

		// *** Enter Pin code ***
		memset(tcMask, 0, sizeof(tcMask));
		for (i=0; i<lenGprsPin; i++)
    ad34:	f107 0314 	add.w	r3, r7, #20
    ad38:	f107 0214 	add.w	r2, r7, #20
    ad3c:	6812      	ldr	r2, [r2, #0]
    ad3e:	3201      	adds	r2, #1
    ad40:	601a      	str	r2, [r3, #0]
    ad42:	f107 0314 	add.w	r3, r7, #20
    ad46:	681b      	ldr	r3, [r3, #0]
    ad48:	2b07      	cmp	r3, #7
    ad4a:	dde2      	ble.n	ad12 <GprsReport+0x2d6>
			strcat(tcMask, "/d");                             // Accept only decimal character
		memset (tcPin, 0, sizeof(tcPin));
    ad4c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    ad50:	4618      	mov	r0, r3
    ad52:	2100      	movs	r1, #0
    ad54:	2209      	movs	r2, #9
    ad56:	f7fd ef32 	blx	8bbc <_init+0x5c>
		iRet = GL_Dialog_Password(gGoalGraphicLibInstance, "Pin Code", "Enter Pin :", tcMask, tcPin, sizeof(tcPin), GL_TIME_MINUTE);
    ad5a:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    ad5e:	f2c0 0302 	movt	r3, #2
    ad62:	681a      	ldr	r2, [r3, #0]
    ad64:	f507 730d 	add.w	r3, r7, #564	; 0x234
    ad68:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
    ad6c:	9100      	str	r1, [sp, #0]
    ad6e:	2109      	movs	r1, #9
    ad70:	9101      	str	r1, [sp, #4]
    ad72:	f64e 2160 	movw	r1, #60000	; 0xea60
    ad76:	9102      	str	r1, [sp, #8]
    ad78:	4610      	mov	r0, r2
    ad7a:	f642 41d8 	movw	r1, #11480	; 0x2cd8
    ad7e:	f2c0 0102 	movt	r1, #2
    ad82:	f642 42e4 	movw	r2, #11492	; 0x2ce4
    ad86:	f2c0 0202 	movt	r2, #2
    ad8a:	f016 fbdd 	bl	21548 <GL_Dialog_Password>
    ad8e:	4602      	mov	r2, r0
    ad90:	f107 0318 	add.w	r3, r7, #24
    ad94:	601a      	str	r2, [r3, #0]
		if ((iRet==GL_KEY_CANCEL) || (iRet==GL_RESULT_INACTIVITY))
    ad96:	f107 0318 	add.w	r3, r7, #24
    ad9a:	681a      	ldr	r2, [r3, #0]
    ad9c:	f64f 0351 	movw	r3, #63569	; 0xf851
    ada0:	429a      	cmp	r2, r3
    ada2:	d006      	beq.n	adb2 <GprsReport+0x376>
    ada4:	f107 0318 	add.w	r3, r7, #24
    ada8:	681a      	ldr	r2, [r3, #0]
    adaa:	f64f 0380 	movw	r3, #63616	; 0xf880
    adae:	429a      	cmp	r2, r3
    adb0:	d103      	bne.n	adba <GprsReport+0x37e>
			iRet=0;                                           // Exit on cancel/timeout
    adb2:	f107 0318 	add.w	r3, r7, #24
    adb6:	2200      	movs	r2, #0
    adb8:	601a      	str	r2, [r3, #0]
		CHECK(iRet!=0, lblEnd);
    adba:	f107 0318 	add.w	r3, r7, #24
    adbe:	681b      	ldr	r3, [r3, #0]
    adc0:	2b00      	cmp	r3, #0
    adc2:	f000 83cf 	beq.w	b564 <GprsReport+0xb28>

		// *** Start GSM session ***
		iRet = LL_GSM_Start(tcPin[0] ? tcPin : NULL);
    adc6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    adca:	781b      	ldrb	r3, [r3, #0]
    adcc:	2b00      	cmp	r3, #0
    adce:	d002      	beq.n	add6 <GprsReport+0x39a>
    add0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    add4:	e000      	b.n	add8 <GprsReport+0x39c>
    add6:	2300      	movs	r3, #0
    add8:	f107 0418 	add.w	r4, r7, #24
    addc:	4618      	mov	r0, r3
    adde:	f014 fb52 	bl	1f486 <LL_GSM_Start>
    ade2:	6020      	str	r0, [r4, #0]
		CHECK(iRet==LL_ERROR_OK, lblKO);
    ade4:	f107 0318 	add.w	r3, r7, #24
    ade8:	681b      	ldr	r3, [r3, #0]
    adea:	2b00      	cmp	r3, #0
    adec:	f040 83b4 	bne.w	b558 <GprsReport+0xb1c>

		// *** Start GPRS session ***
		iRet = LL_GPRS_Start(tcPin[0] ? tcPin : NULL, pcApn);
    adf0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    adf4:	781b      	ldrb	r3, [r3, #0]
    adf6:	2b00      	cmp	r3, #0
    adf8:	d002      	beq.n	ae00 <GprsReport+0x3c4>
    adfa:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    adfe:	e000      	b.n	ae02 <GprsReport+0x3c6>
    ae00:	2300      	movs	r3, #0
    ae02:	f107 0418 	add.w	r4, r7, #24
    ae06:	f107 0208 	add.w	r2, r7, #8
    ae0a:	4618      	mov	r0, r3
    ae0c:	6811      	ldr	r1, [r2, #0]
    ae0e:	f014 fb28 	bl	1f462 <LL_GPRS_Start>
    ae12:	6020      	str	r0, [r4, #0]
		CHECK(iRet==LL_ERROR_OK, lblKO);
    ae14:	f107 0318 	add.w	r3, r7, #24
    ae18:	681b      	ldr	r3, [r3, #0]
    ae1a:	2b00      	cmp	r3, #0
    ae1c:	f040 839c 	bne.w	b558 <GprsReport+0xb1c>

		iRet = GoalClrScreen(hScreen, GL_COLOR_BLACK, KEY_CANCEL, false); // Clear screen
    ae20:	f107 0418 	add.w	r4, r7, #24
    ae24:	f107 030c 	add.w	r3, r7, #12
    ae28:	6818      	ldr	r0, [r3, #0]
    ae2a:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    ae2e:	2202      	movs	r2, #2
    ae30:	2300      	movs	r3, #0
    ae32:	f002 fac5 	bl	d3c0 <GoalClrScreen>
    ae36:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    ae38:	f107 0318 	add.w	r3, r7, #24
    ae3c:	681b      	ldr	r3, [r3, #0]
    ae3e:	2b00      	cmp	r3, #0
    ae40:	f2c0 838a 	blt.w	b558 <GprsReport+0xb1c>
		iRet = GoalDspLine(hScreen, 0, "1-comStart...", &txGPRS[0], 0, false);
    ae44:	f107 0418 	add.w	r4, r7, #24
    ae48:	f107 030c 	add.w	r3, r7, #12
    ae4c:	2200      	movs	r2, #0
    ae4e:	9200      	str	r2, [sp, #0]
    ae50:	2200      	movs	r2, #0
    ae52:	9201      	str	r2, [sp, #4]
    ae54:	6818      	ldr	r0, [r3, #0]
    ae56:	2100      	movs	r1, #0
    ae58:	f642 42f0 	movw	r2, #11504	; 0x2cf0
    ae5c:	f2c0 0202 	movt	r2, #2
    ae60:	f642 0338 	movw	r3, #10296	; 0x2838
    ae64:	f2c0 0302 	movt	r3, #2
    ae68:	f002 fbc4 	bl	d5f4 <GoalDspLine>
    ae6c:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    ae6e:	f107 0318 	add.w	r3, r7, #24
    ae72:	681b      	ldr	r3, [r3, #0]
    ae74:	2b00      	cmp	r3, #0
    ae76:	f2c0 836f 	blt.w	b558 <GprsReport+0xb1c>
		iRet = GoalDspLine(hScreen, 1, pcUsername, &txGPRS[1], 0, false); // Show user name
    ae7a:	f107 0418 	add.w	r4, r7, #24
    ae7e:	f107 020c 	add.w	r2, r7, #12
    ae82:	1d3b      	adds	r3, r7, #4
    ae84:	2100      	movs	r1, #0
    ae86:	9100      	str	r1, [sp, #0]
    ae88:	2100      	movs	r1, #0
    ae8a:	9101      	str	r1, [sp, #4]
    ae8c:	6810      	ldr	r0, [r2, #0]
    ae8e:	2101      	movs	r1, #1
    ae90:	681a      	ldr	r2, [r3, #0]
    ae92:	4b29      	ldr	r3, [pc, #164]	; (af38 <GprsReport+0x4fc>)
    ae94:	f002 fbae 	bl	d5f4 <GoalDspLine>
    ae98:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    ae9a:	f107 0318 	add.w	r3, r7, #24
    ae9e:	681b      	ldr	r3, [r3, #0]
    aea0:	2b00      	cmp	r3, #0
    aea2:	f2c0 8359 	blt.w	b558 <GprsReport+0xb1c>
		iRet = GoalDspLine(hScreen, 4, "CONNECT. IN PROGRESS", &txGPRS[4], 0, true);
    aea6:	f107 0418 	add.w	r4, r7, #24
    aeaa:	f107 030c 	add.w	r3, r7, #12
    aeae:	2200      	movs	r2, #0
    aeb0:	9200      	str	r2, [sp, #0]
    aeb2:	2201      	movs	r2, #1
    aeb4:	9201      	str	r2, [sp, #4]
    aeb6:	6818      	ldr	r0, [r3, #0]
    aeb8:	2104      	movs	r1, #4
    aeba:	f642 429c 	movw	r2, #11420	; 0x2c9c
    aebe:	f2c0 0202 	movt	r2, #2
    aec2:	4b1c      	ldr	r3, [pc, #112]	; (af34 <GprsReport+0x4f8>)
    aec4:	f002 fb96 	bl	d5f4 <GoalDspLine>
    aec8:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    aeca:	f107 0318 	add.w	r3, r7, #24
    aece:	681b      	ldr	r3, [r3, #0]
    aed0:	2b00      	cmp	r3, #0
    aed2:	f2c0 8341 	blt.w	b558 <GprsReport+0xb1c>
		break;
    aed6:	e30e      	b.n	b4f6 <GprsReport+0xaba>
	case EGPRS_SIM_PIN2_REQUIRED:       strcpy(tcStatus, "Sta: PIN2 REQUIRED"); break;
    aed8:	f507 7206 	add.w	r2, r7, #536	; 0x218
    aedc:	f642 5300 	movw	r3, #11520	; 0x2d00
    aee0:	f2c0 0302 	movt	r3, #2
    aee4:	4614      	mov	r4, r2
    aee6:	461d      	mov	r5, r3
    aee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    aeea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    aeec:	682b      	ldr	r3, [r5, #0]
    aeee:	461a      	mov	r2, r3
    aef0:	8022      	strh	r2, [r4, #0]
    aef2:	3402      	adds	r4, #2
    aef4:	0c1b      	lsrs	r3, r3, #16
    aef6:	7023      	strb	r3, [r4, #0]
    aef8:	e2fd      	b.n	b4f6 <GprsReport+0xaba>
	case EGPRS_SIM_PIN_ERRONEOUS:                             // Wrong Pin, enter it
		strcpy(tcStatus, "Sta: PIN ERRONEOUS   ");
    aefa:	f507 7206 	add.w	r2, r7, #536	; 0x218
    aefe:	f642 5314 	movw	r3, #11540	; 0x2d14
    af02:	f2c0 0302 	movt	r3, #2
    af06:	4614      	mov	r4, r2
    af08:	461d      	mov	r5, r3
    af0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    af0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    af0e:	e895 0003 	ldmia.w	r5, {r0, r1}
    af12:	6020      	str	r0, [r4, #0]
    af14:	3404      	adds	r4, #4
    af16:	8021      	strh	r1, [r4, #0]

		// *** Enter Pin code ***
		memset(tcMask, 0, sizeof(tcMask));
    af18:	f507 730d 	add.w	r3, r7, #564	; 0x234
    af1c:	4618      	mov	r0, r3
    af1e:	2100      	movs	r1, #0
    af20:	f44f 7280 	mov.w	r2, #256	; 0x100
    af24:	f7fd ee4a 	blx	8bbc <_init+0x5c>
		for (i=0; i<lenGprsPin; i++)
    af28:	f107 0314 	add.w	r3, r7, #20
    af2c:	2200      	movs	r2, #0
    af2e:	601a      	str	r2, [r3, #0]
    af30:	e01c      	b.n	af6c <GprsReport+0x530>
    af32:	bf00      	nop
    af34:	00022ae8 	.word	0x00022ae8
    af38:	000228e4 	.word	0x000228e4
			strcat(tcMask, "/d");                             // Accept only decimal character
    af3c:	f507 730d 	add.w	r3, r7, #564	; 0x234
    af40:	4618      	mov	r0, r3
    af42:	f7fd eea0 	blx	8c84 <_init+0x124>
    af46:	4603      	mov	r3, r0
    af48:	f507 720d 	add.w	r2, r7, #564	; 0x234
    af4c:	18d2      	adds	r2, r2, r3
    af4e:	f642 43d4 	movw	r3, #11476	; 0x2cd4
    af52:	f2c0 0302 	movt	r3, #2
    af56:	8819      	ldrh	r1, [r3, #0]
    af58:	789b      	ldrb	r3, [r3, #2]
    af5a:	8011      	strh	r1, [r2, #0]
    af5c:	7093      	strb	r3, [r2, #2]
	case EGPRS_SIM_PIN_ERRONEOUS:                             // Wrong Pin, enter it
		strcpy(tcStatus, "Sta: PIN ERRONEOUS   ");

		// *** Enter Pin code ***
		memset(tcMask, 0, sizeof(tcMask));
		for (i=0; i<lenGprsPin; i++)
    af5e:	f107 0314 	add.w	r3, r7, #20
    af62:	f107 0214 	add.w	r2, r7, #20
    af66:	6812      	ldr	r2, [r2, #0]
    af68:	3201      	adds	r2, #1
    af6a:	601a      	str	r2, [r3, #0]
    af6c:	f107 0314 	add.w	r3, r7, #20
    af70:	681b      	ldr	r3, [r3, #0]
    af72:	2b07      	cmp	r3, #7
    af74:	dde2      	ble.n	af3c <GprsReport+0x500>
			strcat(tcMask, "/d");                             // Accept only decimal character
		memset (tcPin, 0, sizeof(tcPin));
    af76:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    af7a:	4618      	mov	r0, r3
    af7c:	2100      	movs	r1, #0
    af7e:	2209      	movs	r2, #9
    af80:	f7fd ee1c 	blx	8bbc <_init+0x5c>
		iRet = GL_Dialog_Password(gGoalGraphicLibInstance, "Pin Code", "Enter Pin :", tcMask, tcPin, sizeof(tcPin), GL_TIME_MINUTE);
    af84:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    af88:	f2c0 0302 	movt	r3, #2
    af8c:	681a      	ldr	r2, [r3, #0]
    af8e:	f507 730d 	add.w	r3, r7, #564	; 0x234
    af92:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
    af96:	9100      	str	r1, [sp, #0]
    af98:	2109      	movs	r1, #9
    af9a:	9101      	str	r1, [sp, #4]
    af9c:	f64e 2160 	movw	r1, #60000	; 0xea60
    afa0:	9102      	str	r1, [sp, #8]
    afa2:	4610      	mov	r0, r2
    afa4:	f642 41d8 	movw	r1, #11480	; 0x2cd8
    afa8:	f2c0 0102 	movt	r1, #2
    afac:	f642 42e4 	movw	r2, #11492	; 0x2ce4
    afb0:	f2c0 0202 	movt	r2, #2
    afb4:	f016 fac8 	bl	21548 <GL_Dialog_Password>
    afb8:	4602      	mov	r2, r0
    afba:	f107 0318 	add.w	r3, r7, #24
    afbe:	601a      	str	r2, [r3, #0]
		if ((iRet==GL_KEY_CANCEL) || (iRet==GL_RESULT_INACTIVITY))
    afc0:	f107 0318 	add.w	r3, r7, #24
    afc4:	681a      	ldr	r2, [r3, #0]
    afc6:	f64f 0351 	movw	r3, #63569	; 0xf851
    afca:	429a      	cmp	r2, r3
    afcc:	d006      	beq.n	afdc <GprsReport+0x5a0>
    afce:	f107 0318 	add.w	r3, r7, #24
    afd2:	681a      	ldr	r2, [r3, #0]
    afd4:	f64f 0380 	movw	r3, #63616	; 0xf880
    afd8:	429a      	cmp	r2, r3
    afda:	d103      	bne.n	afe4 <GprsReport+0x5a8>
			iRet=0;                                           // Exit on cancel/timeout
    afdc:	f107 0318 	add.w	r3, r7, #24
    afe0:	2200      	movs	r2, #0
    afe2:	601a      	str	r2, [r3, #0]
		CHECK(iRet!=0, lblEnd);
    afe4:	f107 0318 	add.w	r3, r7, #24
    afe8:	681b      	ldr	r3, [r3, #0]
    afea:	2b00      	cmp	r3, #0
    afec:	f000 82ba 	beq.w	b564 <GprsReport+0xb28>

		// *** Start GSM session ***
		LL_GSM_Start(tcPin[0] ? tcPin : NULL);
    aff0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    aff4:	781b      	ldrb	r3, [r3, #0]
    aff6:	2b00      	cmp	r3, #0
    aff8:	d002      	beq.n	b000 <GprsReport+0x5c4>
    affa:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    affe:	e000      	b.n	b002 <GprsReport+0x5c6>
    b000:	2300      	movs	r3, #0
    b002:	4618      	mov	r0, r3
    b004:	f014 fa3f 	bl	1f486 <LL_GSM_Start>

		// *** Start GPRS session ***
		iRet = LL_GPRS_Start(tcPin[0] ? tcPin : NULL, pcApn);
    b008:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    b00c:	781b      	ldrb	r3, [r3, #0]
    b00e:	2b00      	cmp	r3, #0
    b010:	d002      	beq.n	b018 <GprsReport+0x5dc>
    b012:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    b016:	e000      	b.n	b01a <GprsReport+0x5de>
    b018:	2300      	movs	r3, #0
    b01a:	f107 0418 	add.w	r4, r7, #24
    b01e:	f107 0208 	add.w	r2, r7, #8
    b022:	4618      	mov	r0, r3
    b024:	6811      	ldr	r1, [r2, #0]
    b026:	f014 fa1c 	bl	1f462 <LL_GPRS_Start>
    b02a:	6020      	str	r0, [r4, #0]
		CHECK(iRet==LL_ERROR_OK, lblKO);
    b02c:	f107 0318 	add.w	r3, r7, #24
    b030:	681b      	ldr	r3, [r3, #0]
    b032:	2b00      	cmp	r3, #0
    b034:	f040 8290 	bne.w	b558 <GprsReport+0xb1c>

		iRet = GoalClrScreen(hScreen, GL_COLOR_BLACK, KEY_CANCEL, false); // Clear screen
    b038:	f107 0418 	add.w	r4, r7, #24
    b03c:	f107 030c 	add.w	r3, r7, #12
    b040:	6818      	ldr	r0, [r3, #0]
    b042:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    b046:	2202      	movs	r2, #2
    b048:	2300      	movs	r3, #0
    b04a:	f002 f9b9 	bl	d3c0 <GoalClrScreen>
    b04e:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    b050:	f107 0318 	add.w	r3, r7, #24
    b054:	681b      	ldr	r3, [r3, #0]
    b056:	2b00      	cmp	r3, #0
    b058:	f2c0 827e 	blt.w	b558 <GprsReport+0xb1c>
		iRet = GoalDspLine(hScreen, 0, "1-comStart...", &txGPRS[0], 0, false);
    b05c:	f107 0418 	add.w	r4, r7, #24
    b060:	f107 030c 	add.w	r3, r7, #12
    b064:	2200      	movs	r2, #0
    b066:	9200      	str	r2, [sp, #0]
    b068:	2200      	movs	r2, #0
    b06a:	9201      	str	r2, [sp, #4]
    b06c:	6818      	ldr	r0, [r3, #0]
    b06e:	2100      	movs	r1, #0
    b070:	f642 42f0 	movw	r2, #11504	; 0x2cf0
    b074:	f2c0 0202 	movt	r2, #2
    b078:	f642 0338 	movw	r3, #10296	; 0x2838
    b07c:	f2c0 0302 	movt	r3, #2
    b080:	f002 fab8 	bl	d5f4 <GoalDspLine>
    b084:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    b086:	f107 0318 	add.w	r3, r7, #24
    b08a:	681b      	ldr	r3, [r3, #0]
    b08c:	2b00      	cmp	r3, #0
    b08e:	f2c0 8263 	blt.w	b558 <GprsReport+0xb1c>
		iRet = GoalDspLine(hScreen, 1, pcUsername, &txGPRS[1], 0, false); // Show user name
    b092:	f107 0418 	add.w	r4, r7, #24
    b096:	f107 020c 	add.w	r2, r7, #12
    b09a:	1d3b      	adds	r3, r7, #4
    b09c:	2100      	movs	r1, #0
    b09e:	9100      	str	r1, [sp, #0]
    b0a0:	2100      	movs	r1, #0
    b0a2:	9101      	str	r1, [sp, #4]
    b0a4:	6810      	ldr	r0, [r2, #0]
    b0a6:	2101      	movs	r1, #1
    b0a8:	681a      	ldr	r2, [r3, #0]
    b0aa:	4bc2      	ldr	r3, [pc, #776]	; (b3b4 <GprsReport+0x978>)
    b0ac:	f002 faa2 	bl	d5f4 <GoalDspLine>
    b0b0:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    b0b2:	f107 0318 	add.w	r3, r7, #24
    b0b6:	681b      	ldr	r3, [r3, #0]
    b0b8:	2b00      	cmp	r3, #0
    b0ba:	f2c0 824d 	blt.w	b558 <GprsReport+0xb1c>
		iRet = GoalDspLine(hScreen, 4, "CONNECT. IN PROGRESS", &txGPRS[4], 0, true);
    b0be:	f107 0418 	add.w	r4, r7, #24
    b0c2:	f107 030c 	add.w	r3, r7, #12
    b0c6:	2200      	movs	r2, #0
    b0c8:	9200      	str	r2, [sp, #0]
    b0ca:	2201      	movs	r2, #1
    b0cc:	9201      	str	r2, [sp, #4]
    b0ce:	6818      	ldr	r0, [r3, #0]
    b0d0:	2104      	movs	r1, #4
    b0d2:	f642 429c 	movw	r2, #11420	; 0x2c9c
    b0d6:	f2c0 0202 	movt	r2, #2
    b0da:	4bb7      	ldr	r3, [pc, #732]	; (b3b8 <GprsReport+0x97c>)
    b0dc:	f002 fa8a 	bl	d5f4 <GoalDspLine>
    b0e0:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    b0e2:	f107 0318 	add.w	r3, r7, #24
    b0e6:	681b      	ldr	r3, [r3, #0]
    b0e8:	2b00      	cmp	r3, #0
    b0ea:	f2c0 8235 	blt.w	b558 <GprsReport+0xb1c>
		break;
    b0ee:	e202      	b.n	b4f6 <GprsReport+0xaba>
	case EGPRS_SIM_NOT_INSERTED:        strcpy(tcStatus, "Sta: SIM_NOT_INSERTED"); break;
    b0f0:	f507 7206 	add.w	r2, r7, #536	; 0x218
    b0f4:	f642 532c 	movw	r3, #11564	; 0x2d2c
    b0f8:	f2c0 0302 	movt	r3, #2
    b0fc:	4614      	mov	r4, r2
    b0fe:	461d      	mov	r5, r3
    b100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b104:	e895 0003 	ldmia.w	r5, {r0, r1}
    b108:	6020      	str	r0, [r4, #0]
    b10a:	3404      	adds	r4, #4
    b10c:	8021      	strh	r1, [r4, #0]
    b10e:	e1f2      	b.n	b4f6 <GprsReport+0xaba>
	case EGPRS_SIM_PUK_REQUIRED:                               // Puk required, enter it
		strcpy(tcStatus, "Sta: PUK_REQUIRED    ");
    b110:	f507 7206 	add.w	r2, r7, #536	; 0x218
    b114:	f642 5344 	movw	r3, #11588	; 0x2d44
    b118:	f2c0 0302 	movt	r3, #2
    b11c:	4614      	mov	r4, r2
    b11e:	461d      	mov	r5, r3
    b120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b124:	e895 0003 	ldmia.w	r5, {r0, r1}
    b128:	6020      	str	r0, [r4, #0]
    b12a:	3404      	adds	r4, #4
    b12c:	8021      	strh	r1, [r4, #0]

		// *** Enter Puk code ***
		memset(tcMask, 0, sizeof(tcMask));
    b12e:	f507 730d 	add.w	r3, r7, #564	; 0x234
    b132:	4618      	mov	r0, r3
    b134:	2100      	movs	r1, #0
    b136:	f44f 7280 	mov.w	r2, #256	; 0x100
    b13a:	f7fd ed40 	blx	8bbc <_init+0x5c>
		for (i=0; i<lenGprsPuk; i++)
    b13e:	f107 0314 	add.w	r3, r7, #20
    b142:	2200      	movs	r2, #0
    b144:	601a      	str	r2, [r3, #0]
    b146:	e017      	b.n	b178 <GprsReport+0x73c>
			strcat(tcMask, "/d");                              // Accept only decimal character
    b148:	f507 730d 	add.w	r3, r7, #564	; 0x234
    b14c:	4618      	mov	r0, r3
    b14e:	f7fd ed9a 	blx	8c84 <_init+0x124>
    b152:	4603      	mov	r3, r0
    b154:	f507 720d 	add.w	r2, r7, #564	; 0x234
    b158:	18d2      	adds	r2, r2, r3
    b15a:	f642 43d4 	movw	r3, #11476	; 0x2cd4
    b15e:	f2c0 0302 	movt	r3, #2
    b162:	8819      	ldrh	r1, [r3, #0]
    b164:	789b      	ldrb	r3, [r3, #2]
    b166:	8011      	strh	r1, [r2, #0]
    b168:	7093      	strb	r3, [r2, #2]
	case EGPRS_SIM_PUK_REQUIRED:                               // Puk required, enter it
		strcpy(tcStatus, "Sta: PUK_REQUIRED    ");

		// *** Enter Puk code ***
		memset(tcMask, 0, sizeof(tcMask));
		for (i=0; i<lenGprsPuk; i++)
    b16a:	f107 0314 	add.w	r3, r7, #20
    b16e:	f107 0214 	add.w	r2, r7, #20
    b172:	6812      	ldr	r2, [r2, #0]
    b174:	3201      	adds	r2, #1
    b176:	601a      	str	r2, [r3, #0]
    b178:	f107 0314 	add.w	r3, r7, #20
    b17c:	681b      	ldr	r3, [r3, #0]
    b17e:	2b07      	cmp	r3, #7
    b180:	dde2      	ble.n	b148 <GprsReport+0x70c>
			strcat(tcMask, "/d");                              // Accept only decimal character
		memset (tcPuk, 0, sizeof(tcPuk));
    b182:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
    b186:	4618      	mov	r0, r3
    b188:	2100      	movs	r1, #0
    b18a:	2209      	movs	r2, #9
    b18c:	f7fd ed16 	blx	8bbc <_init+0x5c>
		iRet = GL_Dialog_Password(gGoalGraphicLibInstance, "Puk Code", "Enter Puk :", tcMask, tcPuk, sizeof(tcPuk), GL_TIME_MINUTE);
    b190:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    b194:	f2c0 0302 	movt	r3, #2
    b198:	681a      	ldr	r2, [r3, #0]
    b19a:	f507 730d 	add.w	r3, r7, #564	; 0x234
    b19e:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
    b1a2:	9100      	str	r1, [sp, #0]
    b1a4:	2109      	movs	r1, #9
    b1a6:	9101      	str	r1, [sp, #4]
    b1a8:	f64e 2160 	movw	r1, #60000	; 0xea60
    b1ac:	9102      	str	r1, [sp, #8]
    b1ae:	4610      	mov	r0, r2
    b1b0:	f642 515c 	movw	r1, #11612	; 0x2d5c
    b1b4:	f2c0 0102 	movt	r1, #2
    b1b8:	f642 5268 	movw	r2, #11624	; 0x2d68
    b1bc:	f2c0 0202 	movt	r2, #2
    b1c0:	f016 f9c2 	bl	21548 <GL_Dialog_Password>
    b1c4:	4602      	mov	r2, r0
    b1c6:	f107 0318 	add.w	r3, r7, #24
    b1ca:	601a      	str	r2, [r3, #0]
		if ((iRet==GL_KEY_CANCEL) || (iRet==GL_RESULT_INACTIVITY))
    b1cc:	f107 0318 	add.w	r3, r7, #24
    b1d0:	681a      	ldr	r2, [r3, #0]
    b1d2:	f64f 0351 	movw	r3, #63569	; 0xf851
    b1d6:	429a      	cmp	r2, r3
    b1d8:	d006      	beq.n	b1e8 <GprsReport+0x7ac>
    b1da:	f107 0318 	add.w	r3, r7, #24
    b1de:	681a      	ldr	r2, [r3, #0]
    b1e0:	f64f 0380 	movw	r3, #63616	; 0xf880
    b1e4:	429a      	cmp	r2, r3
    b1e6:	d103      	bne.n	b1f0 <GprsReport+0x7b4>
			iRet=0;                                            // Exit on cancel/timeout
    b1e8:	f107 0318 	add.w	r3, r7, #24
    b1ec:	2200      	movs	r2, #0
    b1ee:	601a      	str	r2, [r3, #0]
		CHECK(iRet!=0, lblEnd);
    b1f0:	f107 0318 	add.w	r3, r7, #24
    b1f4:	681b      	ldr	r3, [r3, #0]
    b1f6:	2b00      	cmp	r3, #0
    b1f8:	f000 81b4 	beq.w	b564 <GprsReport+0xb28>

		// *** Enter new Pin code and confirm ***
		do
		{
			// *** Enter new Pin code ***
			memset(tcMask, 0, sizeof(tcMask));
    b1fc:	f507 730d 	add.w	r3, r7, #564	; 0x234
    b200:	4618      	mov	r0, r3
    b202:	2100      	movs	r1, #0
    b204:	f44f 7280 	mov.w	r2, #256	; 0x100
    b208:	f7fd ecd8 	blx	8bbc <_init+0x5c>
			for (i=0; i<lenGprsPin; i++)
    b20c:	f107 0314 	add.w	r3, r7, #20
    b210:	2200      	movs	r2, #0
    b212:	601a      	str	r2, [r3, #0]
    b214:	e017      	b.n	b246 <GprsReport+0x80a>
				strcat(tcMask, "/d");                          // Accept only decimal character
    b216:	f507 730d 	add.w	r3, r7, #564	; 0x234
    b21a:	4618      	mov	r0, r3
    b21c:	f7fd ed32 	blx	8c84 <_init+0x124>
    b220:	4603      	mov	r3, r0
    b222:	f507 720d 	add.w	r2, r7, #564	; 0x234
    b226:	18d2      	adds	r2, r2, r3
    b228:	f642 43d4 	movw	r3, #11476	; 0x2cd4
    b22c:	f2c0 0302 	movt	r3, #2
    b230:	8819      	ldrh	r1, [r3, #0]
    b232:	789b      	ldrb	r3, [r3, #2]
    b234:	8011      	strh	r1, [r2, #0]
    b236:	7093      	strb	r3, [r2, #2]
		// *** Enter new Pin code and confirm ***
		do
		{
			// *** Enter new Pin code ***
			memset(tcMask, 0, sizeof(tcMask));
			for (i=0; i<lenGprsPin; i++)
    b238:	f107 0314 	add.w	r3, r7, #20
    b23c:	f107 0214 	add.w	r2, r7, #20
    b240:	6812      	ldr	r2, [r2, #0]
    b242:	3201      	adds	r2, #1
    b244:	601a      	str	r2, [r3, #0]
    b246:	f107 0314 	add.w	r3, r7, #20
    b24a:	681b      	ldr	r3, [r3, #0]
    b24c:	2b07      	cmp	r3, #7
    b24e:	dde2      	ble.n	b216 <GprsReport+0x7da>
				strcat(tcMask, "/d");                          // Accept only decimal character
			memset (tcPin1, 0, sizeof(tcPin1));                // Enter new Pin
    b250:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
    b254:	4618      	mov	r0, r3
    b256:	2100      	movs	r1, #0
    b258:	2209      	movs	r2, #9
    b25a:	f7fd ecb0 	blx	8bbc <_init+0x5c>
			iRet = GL_Dialog_Password(gGoalGraphicLibInstance, "New Pin Code", "Enter New Pin :", tcMask, tcPin1, sizeof(tcPin1), GL_TIME_MINUTE);
    b25e:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    b262:	f2c0 0302 	movt	r3, #2
    b266:	681a      	ldr	r2, [r3, #0]
    b268:	f507 730d 	add.w	r3, r7, #564	; 0x234
    b26c:	f507 71f2 	add.w	r1, r7, #484	; 0x1e4
    b270:	9100      	str	r1, [sp, #0]
    b272:	2109      	movs	r1, #9
    b274:	9101      	str	r1, [sp, #4]
    b276:	f64e 2160 	movw	r1, #60000	; 0xea60
    b27a:	9102      	str	r1, [sp, #8]
    b27c:	4610      	mov	r0, r2
    b27e:	f642 5174 	movw	r1, #11636	; 0x2d74
    b282:	f2c0 0102 	movt	r1, #2
    b286:	f642 5284 	movw	r2, #11652	; 0x2d84
    b28a:	f2c0 0202 	movt	r2, #2
    b28e:	f016 f95b 	bl	21548 <GL_Dialog_Password>
    b292:	4602      	mov	r2, r0
    b294:	f107 0318 	add.w	r3, r7, #24
    b298:	601a      	str	r2, [r3, #0]
			if ((iRet==GL_KEY_CANCEL) || (iRet==GL_RESULT_INACTIVITY))
    b29a:	f107 0318 	add.w	r3, r7, #24
    b29e:	681a      	ldr	r2, [r3, #0]
    b2a0:	f64f 0351 	movw	r3, #63569	; 0xf851
    b2a4:	429a      	cmp	r2, r3
    b2a6:	d006      	beq.n	b2b6 <GprsReport+0x87a>
    b2a8:	f107 0318 	add.w	r3, r7, #24
    b2ac:	681a      	ldr	r2, [r3, #0]
    b2ae:	f64f 0380 	movw	r3, #63616	; 0xf880
    b2b2:	429a      	cmp	r2, r3
    b2b4:	d103      	bne.n	b2be <GprsReport+0x882>
				iRet=0;                                        // Exit on cancel/timeout
    b2b6:	f107 0318 	add.w	r3, r7, #24
    b2ba:	2200      	movs	r2, #0
    b2bc:	601a      	str	r2, [r3, #0]
			CHECK(iRet!=0, lblEnd);
    b2be:	f107 0318 	add.w	r3, r7, #24
    b2c2:	681b      	ldr	r3, [r3, #0]
    b2c4:	2b00      	cmp	r3, #0
    b2c6:	f000 814d 	beq.w	b564 <GprsReport+0xb28>
			// *** Confirm new Pin code ***
			memset (tcPin, 0, sizeof(tcPin));                  // Confirm new Pin
    b2ca:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    b2ce:	4618      	mov	r0, r3
    b2d0:	2100      	movs	r1, #0
    b2d2:	2209      	movs	r2, #9
    b2d4:	f7fd ec72 	blx	8bbc <_init+0x5c>
			iRet = GL_Dialog_Password(gGoalGraphicLibInstance, "New Pin Code", "Confirm New Pin :", tcMask, tcPin, sizeof(tcPin), GL_TIME_MINUTE);
    b2d8:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    b2dc:	f2c0 0302 	movt	r3, #2
    b2e0:	681a      	ldr	r2, [r3, #0]
    b2e2:	f507 730d 	add.w	r3, r7, #564	; 0x234
    b2e6:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
    b2ea:	9100      	str	r1, [sp, #0]
    b2ec:	2109      	movs	r1, #9
    b2ee:	9101      	str	r1, [sp, #4]
    b2f0:	f64e 2160 	movw	r1, #60000	; 0xea60
    b2f4:	9102      	str	r1, [sp, #8]
    b2f6:	4610      	mov	r0, r2
    b2f8:	f642 5174 	movw	r1, #11636	; 0x2d74
    b2fc:	f2c0 0102 	movt	r1, #2
    b300:	f642 5294 	movw	r2, #11668	; 0x2d94
    b304:	f2c0 0202 	movt	r2, #2
    b308:	f016 f91e 	bl	21548 <GL_Dialog_Password>
    b30c:	4602      	mov	r2, r0
    b30e:	f107 0318 	add.w	r3, r7, #24
    b312:	601a      	str	r2, [r3, #0]
			if ((iRet==GL_KEY_CANCEL) || (iRet==GL_RESULT_INACTIVITY))
    b314:	f107 0318 	add.w	r3, r7, #24
    b318:	681a      	ldr	r2, [r3, #0]
    b31a:	f64f 0351 	movw	r3, #63569	; 0xf851
    b31e:	429a      	cmp	r2, r3
    b320:	d006      	beq.n	b330 <GprsReport+0x8f4>
    b322:	f107 0318 	add.w	r3, r7, #24
    b326:	681a      	ldr	r2, [r3, #0]
    b328:	f64f 0380 	movw	r3, #63616	; 0xf880
    b32c:	429a      	cmp	r2, r3
    b32e:	d103      	bne.n	b338 <GprsReport+0x8fc>
				iRet=0;                                        // Exit on cancel/timeout
    b330:	f107 0318 	add.w	r3, r7, #24
    b334:	2200      	movs	r2, #0
    b336:	601a      	str	r2, [r3, #0]
			CHECK(iRet!=0, lblEnd);
    b338:	f107 0318 	add.w	r3, r7, #24
    b33c:	681b      	ldr	r3, [r3, #0]
    b33e:	2b00      	cmp	r3, #0
    b340:	f000 8110 	beq.w	b564 <GprsReport+0xb28>
		} while (memcmp(tcPin1, tcPin, lenGprsPin) != 0);
    b344:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
    b348:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    b34c:	4610      	mov	r0, r2
    b34e:	4619      	mov	r1, r3
    b350:	2208      	movs	r2, #8
    b352:	f7fd ecd0 	blx	8cf4 <_init+0x194>
    b356:	4603      	mov	r3, r0
    b358:	2b00      	cmp	r3, #0
    b35a:	f47f af4f 	bne.w	b1fc <GprsReport+0x7c0>

		iRet = gprs_SubmitPuk(hGprs, tcPuk, tcPin);
    b35e:	f107 0418 	add.w	r4, r7, #24
    b362:	f107 011c 	add.w	r1, r7, #28
    b366:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
    b36a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    b36e:	6808      	ldr	r0, [r1, #0]
    b370:	4611      	mov	r1, r2
    b372:	461a      	mov	r2, r3
    b374:	f013 ff91 	bl	1f29a <gprs_SubmitPuk>
    b378:	6020      	str	r0, [r4, #0]
		if (iRet == 0){                                         // Puk code OK
    b37a:	f107 0318 	add.w	r3, r7, #24
    b37e:	681b      	ldr	r3, [r3, #0]
    b380:	2b00      	cmp	r3, #0
    b382:	d12b      	bne.n	b3dc <GprsReport+0x9a0>
			Telium_Ttestall(0, 1*100);                         // Wait a little bit before restarting a session
    b384:	2000      	movs	r0, #0
    b386:	2164      	movs	r1, #100	; 0x64
    b388:	f014 fcb6 	bl	1fcf8 <Telium_Ttestall>
			// Wait a little bit before restarting a session

			// *** Start GSM session ***
			LL_GSM_Start(tcPin[0] ? tcPin : NULL);
    b38c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    b390:	781b      	ldrb	r3, [r3, #0]
    b392:	2b00      	cmp	r3, #0
    b394:	d002      	beq.n	b39c <GprsReport+0x960>
    b396:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    b39a:	e000      	b.n	b39e <GprsReport+0x962>
    b39c:	2300      	movs	r3, #0
    b39e:	4618      	mov	r0, r3
    b3a0:	f014 f871 	bl	1f486 <LL_GSM_Start>

			// *** Start GPRS session ***
			iRet = LL_GPRS_Start(tcPin[0] ? tcPin : NULL, pcApn);
    b3a4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    b3a8:	781b      	ldrb	r3, [r3, #0]
    b3aa:	2b00      	cmp	r3, #0
    b3ac:	d006      	beq.n	b3bc <GprsReport+0x980>
    b3ae:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    b3b2:	e004      	b.n	b3be <GprsReport+0x982>
    b3b4:	000228e4 	.word	0x000228e4
    b3b8:	00022ae8 	.word	0x00022ae8
    b3bc:	2300      	movs	r3, #0
    b3be:	f107 0418 	add.w	r4, r7, #24
    b3c2:	f107 0208 	add.w	r2, r7, #8
    b3c6:	4618      	mov	r0, r3
    b3c8:	6811      	ldr	r1, [r2, #0]
    b3ca:	f014 f84a 	bl	1f462 <LL_GPRS_Start>
    b3ce:	6020      	str	r0, [r4, #0]
			CHECK(iRet==LL_ERROR_OK, lblKO);
    b3d0:	f107 0318 	add.w	r3, r7, #24
    b3d4:	681b      	ldr	r3, [r3, #0]
    b3d6:	2b00      	cmp	r3, #0
    b3d8:	f040 80be 	bne.w	b558 <GprsReport+0xb1c>
		}

		iRet = GoalClrScreen(hScreen, GL_COLOR_BLACK, KEY_CANCEL, false); // Clear screen
    b3dc:	f107 0418 	add.w	r4, r7, #24
    b3e0:	f107 030c 	add.w	r3, r7, #12
    b3e4:	6818      	ldr	r0, [r3, #0]
    b3e6:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    b3ea:	2202      	movs	r2, #2
    b3ec:	2300      	movs	r3, #0
    b3ee:	f001 ffe7 	bl	d3c0 <GoalClrScreen>
    b3f2:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    b3f4:	f107 0318 	add.w	r3, r7, #24
    b3f8:	681b      	ldr	r3, [r3, #0]
    b3fa:	2b00      	cmp	r3, #0
    b3fc:	f2c0 80ac 	blt.w	b558 <GprsReport+0xb1c>
		iRet = GoalDspLine(hScreen, 0, "1-comStart...", &txGPRS[0], 0, false);
    b400:	f107 0418 	add.w	r4, r7, #24
    b404:	f107 030c 	add.w	r3, r7, #12
    b408:	2200      	movs	r2, #0
    b40a:	9200      	str	r2, [sp, #0]
    b40c:	2200      	movs	r2, #0
    b40e:	9201      	str	r2, [sp, #4]
    b410:	6818      	ldr	r0, [r3, #0]
    b412:	2100      	movs	r1, #0
    b414:	f642 42f0 	movw	r2, #11504	; 0x2cf0
    b418:	f2c0 0202 	movt	r2, #2
    b41c:	f642 0338 	movw	r3, #10296	; 0x2838
    b420:	f2c0 0302 	movt	r3, #2
    b424:	f002 f8e6 	bl	d5f4 <GoalDspLine>
    b428:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    b42a:	f107 0318 	add.w	r3, r7, #24
    b42e:	681b      	ldr	r3, [r3, #0]
    b430:	2b00      	cmp	r3, #0
    b432:	f2c0 8091 	blt.w	b558 <GprsReport+0xb1c>
		iRet = GoalDspLine(hScreen, 1, pcUsername, &txGPRS[1], 0, false); // Show user name
    b436:	f107 0418 	add.w	r4, r7, #24
    b43a:	f107 020c 	add.w	r2, r7, #12
    b43e:	1d3b      	adds	r3, r7, #4
    b440:	2100      	movs	r1, #0
    b442:	9100      	str	r1, [sp, #0]
    b444:	2100      	movs	r1, #0
    b446:	9101      	str	r1, [sp, #4]
    b448:	6810      	ldr	r0, [r2, #0]
    b44a:	2101      	movs	r1, #1
    b44c:	681a      	ldr	r2, [r3, #0]
    b44e:	4b4f      	ldr	r3, [pc, #316]	; (b58c <GprsReport+0xb50>)
    b450:	f002 f8d0 	bl	d5f4 <GoalDspLine>
    b454:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    b456:	f107 0318 	add.w	r3, r7, #24
    b45a:	681b      	ldr	r3, [r3, #0]
    b45c:	2b00      	cmp	r3, #0
    b45e:	db7b      	blt.n	b558 <GprsReport+0xb1c>
		iRet = GoalDspLine(hScreen, 4, "CONNECT. IN PROGRESS", &txGPRS[4], 0, true);
    b460:	f107 0418 	add.w	r4, r7, #24
    b464:	f107 030c 	add.w	r3, r7, #12
    b468:	2200      	movs	r2, #0
    b46a:	9200      	str	r2, [sp, #0]
    b46c:	2201      	movs	r2, #1
    b46e:	9201      	str	r2, [sp, #4]
    b470:	6818      	ldr	r0, [r3, #0]
    b472:	2104      	movs	r1, #4
    b474:	f642 429c 	movw	r2, #11420	; 0x2c9c
    b478:	f2c0 0202 	movt	r2, #2
    b47c:	4b44      	ldr	r3, [pc, #272]	; (b590 <GprsReport+0xb54>)
    b47e:	f002 f8b9 	bl	d5f4 <GoalDspLine>
    b482:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    b484:	f107 0318 	add.w	r3, r7, #24
    b488:	681b      	ldr	r3, [r3, #0]
    b48a:	2b00      	cmp	r3, #0
    b48c:	db64      	blt.n	b558 <GprsReport+0xb1c>
		break;
    b48e:	e032      	b.n	b4f6 <GprsReport+0xaba>
	case EGPRS_SIM_PUK2_REQUIRED: 		strcpy(tcStatus, "Sta: PUK2_REQUIRED"); break;
    b490:	f507 7206 	add.w	r2, r7, #536	; 0x218
    b494:	f642 53a8 	movw	r3, #11688	; 0x2da8
    b498:	f2c0 0302 	movt	r3, #2
    b49c:	4614      	mov	r4, r2
    b49e:	461d      	mov	r5, r3
    b4a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b4a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b4a4:	682b      	ldr	r3, [r5, #0]
    b4a6:	461a      	mov	r2, r3
    b4a8:	8022      	strh	r2, [r4, #0]
    b4aa:	3402      	adds	r4, #2
    b4ac:	0c1b      	lsrs	r3, r3, #16
    b4ae:	7023      	strb	r3, [r4, #0]
    b4b0:	e021      	b.n	b4f6 <GprsReport+0xaba>
	case EGPRS_SIM_PIN_PRESENTED:       strcpy(tcStatus, "Sta: PIN_PRESENTED"); break;
    b4b2:	f507 7206 	add.w	r2, r7, #536	; 0x218
    b4b6:	f642 53bc 	movw	r3, #11708	; 0x2dbc
    b4ba:	f2c0 0302 	movt	r3, #2
    b4be:	4614      	mov	r4, r2
    b4c0:	461d      	mov	r5, r3
    b4c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b4c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b4c6:	682b      	ldr	r3, [r5, #0]
    b4c8:	461a      	mov	r2, r3
    b4ca:	8022      	strh	r2, [r4, #0]
    b4cc:	3402      	adds	r4, #2
    b4ce:	0c1b      	lsrs	r3, r3, #16
    b4d0:	7023      	strb	r3, [r4, #0]
    b4d2:	e010      	b.n	b4f6 <GprsReport+0xaba>
	default:                            strcpy(tcStatus, "Sta: UNKNOWN_ERROR"); break;
    b4d4:	f507 7206 	add.w	r2, r7, #536	; 0x218
    b4d8:	f642 53d0 	movw	r3, #11728	; 0x2dd0
    b4dc:	f2c0 0302 	movt	r3, #2
    b4e0:	4614      	mov	r4, r2
    b4e2:	461d      	mov	r5, r3
    b4e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b4e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b4e8:	682b      	ldr	r3, [r5, #0]
    b4ea:	461a      	mov	r2, r3
    b4ec:	8022      	strh	r2, [r4, #0]
    b4ee:	3402      	adds	r4, #2
    b4f0:	0c1b      	lsrs	r3, r3, #16
    b4f2:	7023      	strb	r3, [r4, #0]
    b4f4:	bf00      	nop
	}

	iRet = GoalDspLine(hScreen, 2, tcReport, &txGPRS[2], 0, true); // Show start report
    b4f6:	f107 0418 	add.w	r4, r7, #24
    b4fa:	f107 020c 	add.w	r2, r7, #12
    b4fe:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
    b502:	2100      	movs	r1, #0
    b504:	9100      	str	r1, [sp, #0]
    b506:	2101      	movs	r1, #1
    b508:	9101      	str	r1, [sp, #4]
    b50a:	6810      	ldr	r0, [r2, #0]
    b50c:	2102      	movs	r1, #2
    b50e:	461a      	mov	r2, r3
    b510:	4b20      	ldr	r3, [pc, #128]	; (b594 <GprsReport+0xb58>)
    b512:	f002 f86f 	bl	d5f4 <GoalDspLine>
    b516:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    b518:	f107 0318 	add.w	r3, r7, #24
    b51c:	681b      	ldr	r3, [r3, #0]
    b51e:	2b00      	cmp	r3, #0
    b520:	db1a      	blt.n	b558 <GprsReport+0xb1c>
	iRet = GoalDspLine(hScreen, 3, tcStatus, &txGPRS[3], 0, true); // Show sim status
    b522:	f107 0418 	add.w	r4, r7, #24
    b526:	f107 020c 	add.w	r2, r7, #12
    b52a:	f507 7306 	add.w	r3, r7, #536	; 0x218
    b52e:	2100      	movs	r1, #0
    b530:	9100      	str	r1, [sp, #0]
    b532:	2101      	movs	r1, #1
    b534:	9101      	str	r1, [sp, #4]
    b536:	6810      	ldr	r0, [r2, #0]
    b538:	2103      	movs	r1, #3
    b53a:	461a      	mov	r2, r3
    b53c:	4b16      	ldr	r3, [pc, #88]	; (b598 <GprsReport+0xb5c>)
    b53e:	f002 f859 	bl	d5f4 <GoalDspLine>
    b542:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    b544:	f107 0318 	add.w	r3, r7, #24
    b548:	681b      	ldr	r3, [r3, #0]
    b54a:	2b00      	cmp	r3, #0
    b54c:	db04      	blt.n	b558 <GprsReport+0xb1c>

	iRet=1;
    b54e:	f107 0318 	add.w	r3, r7, #24
    b552:	2201      	movs	r2, #1
    b554:	601a      	str	r2, [r3, #0]
	goto lblEnd;
    b556:	e005      	b.n	b564 <GprsReport+0xb28>

	// Errors treatment
	// ****************
	lblKO:
	iRet=-1;
    b558:	f107 0318 	add.w	r3, r7, #24
    b55c:	f04f 32ff 	mov.w	r2, #4294967295
    b560:	601a      	str	r2, [r3, #0]
	goto lblEnd;
    b562:	bf00      	nop
	lblEnd:
	return iRet;
    b564:	f107 0318 	add.w	r3, r7, #24
    b568:	681b      	ldr	r3, [r3, #0]
}
    b56a:	4618      	mov	r0, r3
    b56c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    b570:	f2c0 0302 	movt	r3, #2
    b574:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
    b578:	681b      	ldr	r3, [r3, #0]
    b57a:	429a      	cmp	r2, r3
    b57c:	d001      	beq.n	b582 <GprsReport+0xb46>
    b57e:	f7fd fd11 	bl	8fa4 <__stack_chk_fail>
    b582:	f507 774e 	add.w	r7, r7, #824	; 0x338
    b586:	46bd      	mov	sp, r7
    b588:	bdb0      	pop	{r4, r5, r7, pc}
    b58a:	bf00      	nop
    b58c:	000228e4 	.word	0x000228e4
    b590:	00022ae8 	.word	0x00022ae8
    b594:	00022990 	.word	0x00022990
    b598:	00022a3c 	.word	0x00022a3c

0000b59c <StartGPRS>:
//    >=0 : Attachment done
//     <0 : Attachment failed
//****************************************************************************

static int StartGPRS(T_GL_HWIDGET hScreen, const char *pcInit)
{
    b59c:	b580      	push	{r7, lr}
    b59e:	b0a2      	sub	sp, #136	; 0x88
    b5a0:	af02      	add	r7, sp, #8
    b5a2:	6078      	str	r0, [r7, #4]
    b5a4:	6039      	str	r1, [r7, #0]
    b5a6:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    b5aa:	f2c0 0302 	movt	r3, #2
    b5ae:	681b      	ldr	r3, [r3, #0]
    b5b0:	67fb      	str	r3, [r7, #124]	; 0x7c
	// ***************
	char tcApn[lenGprsApn+1];       // Apn
	char tcUsername[lenGprsUser+1]; // Login
	char tcPassword[lenGprsPass+1]; // Password
	int iKey;
	word usTimeOut=0;
    b5b2:	2300      	movs	r3, #0
    b5b4:	81fb      	strh	r3, [r7, #14]
	bool bExit=TRUE;
    b5b6:	2301      	movs	r3, #1
    b5b8:	737b      	strb	r3, [r7, #13]
	int iStatus, iRet;

	// Network GPRS parameters
	// ************************
	CHECK(pcInit!=NULL, lblKOConfigure);                            // Configuration error
    b5ba:	683b      	ldr	r3, [r7, #0]
    b5bc:	2b00      	cmp	r3, #0
    b5be:	f000 8120 	beq.w	b802 <StartGPRS+0x266>
	memset(tcApn, 0, sizeof(tcApn));
    b5c2:	f107 031c 	add.w	r3, r7, #28
    b5c6:	4618      	mov	r0, r3
    b5c8:	2100      	movs	r1, #0
    b5ca:	221f      	movs	r2, #31
    b5cc:	f7fd eaf6 	blx	8bbc <_init+0x5c>
	pcInit = parseStr('|', tcApn, pcInit, sizeof(tcApn));           // Extract apn
    b5d0:	f107 031c 	add.w	r3, r7, #28
    b5d4:	207c      	movs	r0, #124	; 0x7c
    b5d6:	4619      	mov	r1, r3
    b5d8:	683a      	ldr	r2, [r7, #0]
    b5da:	231f      	movs	r3, #31
    b5dc:	f005 fda4 	bl	11128 <parseStr>
    b5e0:	6038      	str	r0, [r7, #0]
	CHECK(pcInit!=NULL, lblKOConfigure);
    b5e2:	683b      	ldr	r3, [r7, #0]
    b5e4:	2b00      	cmp	r3, #0
    b5e6:	f000 810c 	beq.w	b802 <StartGPRS+0x266>

	memset(tcUsername, 0, sizeof(tcUsername));
    b5ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    b5ee:	4618      	mov	r0, r3
    b5f0:	2100      	movs	r1, #0
    b5f2:	221f      	movs	r2, #31
    b5f4:	f7fd eae2 	blx	8bbc <_init+0x5c>
	pcInit = parseStr('|', tcUsername, pcInit, sizeof(tcUsername)); // Extract username
    b5f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    b5fc:	207c      	movs	r0, #124	; 0x7c
    b5fe:	4619      	mov	r1, r3
    b600:	683a      	ldr	r2, [r7, #0]
    b602:	231f      	movs	r3, #31
    b604:	f005 fd90 	bl	11128 <parseStr>
    b608:	6038      	str	r0, [r7, #0]
	CHECK(pcInit!=NULL, lblKOConfigure);
    b60a:	683b      	ldr	r3, [r7, #0]
    b60c:	2b00      	cmp	r3, #0
    b60e:	f000 80f8 	beq.w	b802 <StartGPRS+0x266>

	memset(tcPassword, 0, sizeof(tcPassword));
    b612:	f107 035c 	add.w	r3, r7, #92	; 0x5c
    b616:	4618      	mov	r0, r3
    b618:	2100      	movs	r1, #0
    b61a:	221f      	movs	r2, #31
    b61c:	f7fd eace 	blx	8bbc <_init+0x5c>
	pcInit = parseStr('|', tcPassword, pcInit, sizeof(tcPassword)); // Extract password
    b620:	f107 035c 	add.w	r3, r7, #92	; 0x5c
    b624:	207c      	movs	r0, #124	; 0x7c
    b626:	4619      	mov	r1, r3
    b628:	683a      	ldr	r2, [r7, #0]
    b62a:	231f      	movs	r3, #31
    b62c:	f005 fd7c 	bl	11128 <parseStr>
    b630:	6038      	str	r0, [r7, #0]
	CHECK(pcInit!=NULL, lblKOConfigure);
    b632:	683b      	ldr	r3, [r7, #0]
    b634:	2b00      	cmp	r3, #0
    b636:	f000 80e4 	beq.w	b802 <StartGPRS+0x266>

	// Connect the GPRS network
	// ************************
	ResetPeripherals(KEYBOARD | TSCREEN);           // Reset peripherals FIFO
    b63a:	2001      	movs	r0, #1
    b63c:	f6c0 0000 	movt	r0, #2048	; 0x800
    b640:	f7ff f9a4 	bl	a98c <ResetPeripherals>
	do
	{
		iRet = GprsReport(hScreen, tcApn, tcUsername);
    b644:	f107 021c 	add.w	r2, r7, #28
    b648:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    b64c:	6878      	ldr	r0, [r7, #4]
    b64e:	4611      	mov	r1, r2
    b650:	461a      	mov	r2, r3
    b652:	f7ff f9f3 	bl	aa3c <GprsReport>
    b656:	61b8      	str	r0, [r7, #24]
		CHECK(iRet>=0, lblKOConfigure);
    b658:	69bb      	ldr	r3, [r7, #24]
    b65a:	2b00      	cmp	r3, #0
    b65c:	f2c0 80d1 	blt.w	b802 <StartGPRS+0x266>
		CHECK(iRet!=0, lblEnd);                     // Exit on cancel/timeout
    b660:	69bb      	ldr	r3, [r7, #24]
    b662:	2b00      	cmp	r3, #0
    b664:	f000 80d2 	beq.w	b80c <StartGPRS+0x270>

		iRet = LL_GPRS_Connect(tcApn, tcUsername, tcPassword, 10*100);
    b668:	f107 011c 	add.w	r1, r7, #28
    b66c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    b670:	f107 035c 	add.w	r3, r7, #92	; 0x5c
    b674:	4608      	mov	r0, r1
    b676:	4611      	mov	r1, r2
    b678:	461a      	mov	r2, r3
    b67a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    b67e:	f013 fede 	bl	1f43e <LL_GPRS_Connect>
    b682:	61b8      	str	r0, [r7, #24]
		switch (iRet)
    b684:	69bb      	ldr	r3, [r7, #24]
    b686:	f46f 727d 	mvn.w	r2, #1012	; 0x3f4
    b68a:	4293      	cmp	r3, r2
    b68c:	d02c      	beq.n	b6e8 <StartGPRS+0x14c>
    b68e:	f46f 727d 	mvn.w	r2, #1012	; 0x3f4
    b692:	4293      	cmp	r3, r2
    b694:	dc06      	bgt.n	b6a4 <StartGPRS+0x108>
    b696:	f64f 4206 	movw	r2, #64518	; 0xfc06
    b69a:	f6cf 72ff 	movt	r2, #65535	; 0xffff
    b69e:	4293      	cmp	r3, r2
    b6a0:	d022      	beq.n	b6e8 <StartGPRS+0x14c>
    b6a2:	e024      	b.n	b6ee <StartGPRS+0x152>
    b6a4:	f64f 4211 	movw	r2, #64529	; 0xfc11
    b6a8:	f6cf 72ff 	movt	r2, #65535	; 0xffff
    b6ac:	4293      	cmp	r3, r2
    b6ae:	d001      	beq.n	b6b4 <StartGPRS+0x118>
    b6b0:	2b00      	cmp	r3, #0
    b6b2:	d11c      	bne.n	b6ee <StartGPRS+0x152>
		//case LL_ERROR_NETWORK_NOT_READY:
		//	bExit = FALSE;
		//	break;
		case LL_ERROR_ALREADY_CONNECTED:
		case LL_ERROR_OK:
			iRet = GoalDspLine(hScreen, 4, "GPRS CONNECTED!!!", &txGPRS[4], 0, true);
    b6b4:	2300      	movs	r3, #0
    b6b6:	9300      	str	r3, [sp, #0]
    b6b8:	2301      	movs	r3, #1
    b6ba:	9301      	str	r3, [sp, #4]
    b6bc:	6878      	ldr	r0, [r7, #4]
    b6be:	2104      	movs	r1, #4
    b6c0:	f642 52e4 	movw	r2, #11748	; 0x2de4
    b6c4:	f2c0 0202 	movt	r2, #2
    b6c8:	4b58      	ldr	r3, [pc, #352]	; (b82c <StartGPRS+0x290>)
    b6ca:	f001 ff93 	bl	d5f4 <GoalDspLine>
    b6ce:	61b8      	str	r0, [r7, #24]
			CHECK(iRet>=0, lblKOConfigure);        // Show Gprs connected
    b6d0:	69bb      	ldr	r3, [r7, #24]
    b6d2:	2b00      	cmp	r3, #0
    b6d4:	f2c0 8095 	blt.w	b802 <StartGPRS+0x266>
			buzzer(10);
    b6d8:	200a      	movs	r0, #10
    b6da:	f014 fb3b 	bl	1fd54 <buzzer>
			iRet = 1;
    b6de:	2301      	movs	r3, #1
    b6e0:	61bb      	str	r3, [r7, #24]
			bExit=TRUE;
    b6e2:	2301      	movs	r3, #1
    b6e4:	737b      	strb	r3, [r7, #13]
			break;
    b6e6:	e056      	b.n	b796 <StartGPRS+0x1fa>
		case LL_ERROR_NETWORK_NOT_SUPPORTED:
		case LL_ERROR_SERVICE_CALL_FAILURE:
			bExit = TRUE;
    b6e8:	2301      	movs	r3, #1
    b6ea:	737b      	strb	r3, [r7, #13]
			break;
    b6ec:	e053      	b.n	b796 <StartGPRS+0x1fa>
		default:                                   // LL_ERROR_NETWORK_NOT_READY or LL_ERROR_NETWORK_ERROR
			iRet = LL_Network_GetStatus(LL_PHYSICAL_V_GPRS, &iStatus);
    b6ee:	f107 0310 	add.w	r3, r7, #16
    b6f2:	2029      	movs	r0, #41	; 0x29
    b6f4:	4619      	mov	r1, r3
    b6f6:	f013 fed8 	bl	1f4aa <LL_Network_GetStatus>
    b6fa:	61b8      	str	r0, [r7, #24]
			switch (iStatus)                       // Check network status
    b6fc:	693b      	ldr	r3, [r7, #16]
    b6fe:	f240 5203 	movw	r2, #1283	; 0x503
    b702:	f2c0 2200 	movt	r2, #512	; 0x200
    b706:	4293      	cmp	r3, r2
    b708:	dc18      	bgt.n	b73c <StartGPRS+0x1a0>
    b70a:	f240 5201 	movw	r2, #1281	; 0x501
    b70e:	f2c0 2200 	movt	r2, #512	; 0x200
    b712:	4293      	cmp	r3, r2
    b714:	da1f      	bge.n	b756 <StartGPRS+0x1ba>
    b716:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    b71a:	f2c0 1200 	movt	r2, #256	; 0x100
    b71e:	4293      	cmp	r3, r2
    b720:	d019      	beq.n	b756 <StartGPRS+0x1ba>
    b722:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    b726:	f2c0 1200 	movt	r2, #256	; 0x100
    b72a:	4293      	cmp	r3, r2
    b72c:	db2f      	blt.n	b78e <StartGPRS+0x1f2>
    b72e:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
    b732:	f2a3 5302 	subw	r3, r3, #1282	; 0x502
    b736:	2b02      	cmp	r3, #2
    b738:	d829      	bhi.n	b78e <StartGPRS+0x1f2>
    b73a:	e00c      	b.n	b756 <StartGPRS+0x1ba>
    b73c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    b740:	f2c0 2200 	movt	r2, #512	; 0x200
    b744:	4293      	cmp	r3, r2
    b746:	d006      	beq.n	b756 <StartGPRS+0x1ba>
    b748:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    b74c:	f2c0 3200 	movt	r2, #768	; 0x300
    b750:	4293      	cmp	r3, r2
    b752:	d003      	beq.n	b75c <StartGPRS+0x1c0>
    b754:	e01b      	b.n	b78e <StartGPRS+0x1f2>
			case LL_STATUS_GPRS_CONNECTING:        // Connection to GPRS Network in progress
			case LL_STATUS_GPRS_AVAILABLE:         // GPRS Network is available
			case LL_STATUS_GPRS_CONNECTING_PPP:    // PPP connection is in progress with the GPRS provider
			case LL_STATUS_GPRS_DISCONNECTED:      // Disconnection to GPRS Network, let's retry a connection
			case 0x2000600:                        // Wait until network ready
				bExit = FALSE;
    b756:	2300      	movs	r3, #0
    b758:	737b      	strb	r3, [r7, #13]
				break;
    b75a:	e01b      	b.n	b794 <StartGPRS+0x1f8>
			case LL_STATUS_GPRS_CONNECTED:
				iRet = GoalDspLine(hScreen, 4, "GPRS CONNECTED!!!", &txGPRS[4], 0, true);
    b75c:	2300      	movs	r3, #0
    b75e:	9300      	str	r3, [sp, #0]
    b760:	2301      	movs	r3, #1
    b762:	9301      	str	r3, [sp, #4]
    b764:	6878      	ldr	r0, [r7, #4]
    b766:	2104      	movs	r1, #4
    b768:	f642 52e4 	movw	r2, #11748	; 0x2de4
    b76c:	f2c0 0202 	movt	r2, #2
    b770:	4b2e      	ldr	r3, [pc, #184]	; (b82c <StartGPRS+0x290>)
    b772:	f001 ff3f 	bl	d5f4 <GoalDspLine>
    b776:	61b8      	str	r0, [r7, #24]
				CHECK(iRet>=0, lblKOConfigure);    // Show Gprs connected
    b778:	69bb      	ldr	r3, [r7, #24]
    b77a:	2b00      	cmp	r3, #0
    b77c:	db41      	blt.n	b802 <StartGPRS+0x266>
				buzzer(10);
    b77e:	200a      	movs	r0, #10
    b780:	f014 fae8 	bl	1fd54 <buzzer>
				iRet = 1;
    b784:	2301      	movs	r3, #1
    b786:	61bb      	str	r3, [r7, #24]
				bExit=TRUE;
    b788:	2301      	movs	r3, #1
    b78a:	737b      	strb	r3, [r7, #13]
				break;
    b78c:	e002      	b.n	b794 <StartGPRS+0x1f8>
			case LL_STATUS_GPRS_ERROR_NO_SIM:      // No SIM card is inserted into the terminal
			case LL_STATUS_GPRS_ERROR_PPP:         // Error occurred during the PPP link establishment.
			case LL_STATUS_GPRS_ERROR_UNKNOWN:     // Error status unknown
			default:
				bExit = TRUE;
    b78e:	2301      	movs	r3, #1
    b790:	737b      	strb	r3, [r7, #13]
				break;
    b792:	bf00      	nop
			}
			break;
    b794:	bf00      	nop
		}

		if (!bExit)                                // Keyboard and timeout management
    b796:	7b7b      	ldrb	r3, [r7, #13]
    b798:	f083 0301 	eor.w	r3, r3, #1
    b79c:	b2db      	uxtb	r3, r3
    b79e:	2b00      	cmp	r3, #0
    b7a0:	d011      	beq.n	b7c6 <StartGPRS+0x22a>
		{
			iKey = GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 1*1000, false); // Get key pressed/touched (shortcut)
    b7a2:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    b7a6:	f2c0 0302 	movt	r3, #2
    b7aa:	681b      	ldr	r3, [r3, #0]
    b7ac:	2200      	movs	r2, #0
    b7ae:	9200      	str	r2, [sp, #0]
    b7b0:	6878      	ldr	r0, [r7, #4]
    b7b2:	4619      	mov	r1, r3
    b7b4:	2201      	movs	r2, #1
    b7b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    b7ba:	f002 fa51 	bl	dc60 <GoalGetKey>
    b7be:	6178      	str	r0, [r7, #20]
			usTimeOut += 1*100;                    // Increment timeout
    b7c0:	89fb      	ldrh	r3, [r7, #14]
    b7c2:	3364      	adds	r3, #100	; 0x64
    b7c4:	81fb      	strh	r3, [r7, #14]
		}
	} while (!bExit && (usTimeOut < GPRS_TIMEOUT) && (iKey!=GL_KEY_CANCEL));
    b7c6:	7b7b      	ldrb	r3, [r7, #13]
    b7c8:	f083 0301 	eor.w	r3, r3, #1
    b7cc:	b2db      	uxtb	r3, r3
    b7ce:	2b00      	cmp	r3, #0
    b7d0:	d00a      	beq.n	b7e8 <StartGPRS+0x24c>
    b7d2:	89fa      	ldrh	r2, [r7, #14]
    b7d4:	f241 736f 	movw	r3, #5999	; 0x176f
    b7d8:	429a      	cmp	r2, r3
    b7da:	d805      	bhi.n	b7e8 <StartGPRS+0x24c>
    b7dc:	697a      	ldr	r2, [r7, #20]
    b7de:	f64f 0351 	movw	r3, #63569	; 0xf851
    b7e2:	429a      	cmp	r2, r3
    b7e4:	f47f af2e 	bne.w	b644 <StartGPRS+0xa8>

	if ((usTimeOut==GPRS_TIMEOUT) || (iKey==GL_KEY_CANCEL))         // Exit on timeout/cancel
    b7e8:	89fa      	ldrh	r2, [r7, #14]
    b7ea:	f241 7370 	movw	r3, #6000	; 0x1770
    b7ee:	429a      	cmp	r2, r3
    b7f0:	d004      	beq.n	b7fc <StartGPRS+0x260>
    b7f2:	697a      	ldr	r2, [r7, #20]
    b7f4:	f64f 0351 	movw	r3, #63569	; 0xf851
    b7f8:	429a      	cmp	r2, r3
    b7fa:	d106      	bne.n	b80a <StartGPRS+0x26e>
		iRet=0;
    b7fc:	2300      	movs	r3, #0
    b7fe:	61bb      	str	r3, [r7, #24]

	goto lblEnd;
    b800:	e003      	b.n	b80a <StartGPRS+0x26e>

	// Errors treatment
	// ****************
	lblKOConfigure:
	iRet=LL_ERROR_INVALID_PARAMETER;
    b802:	f46f 737b 	mvn.w	r3, #1004	; 0x3ec
    b806:	61bb      	str	r3, [r7, #24]
	goto lblEnd;
    b808:	e000      	b.n	b80c <StartGPRS+0x270>
	} while (!bExit && (usTimeOut < GPRS_TIMEOUT) && (iKey!=GL_KEY_CANCEL));

	if ((usTimeOut==GPRS_TIMEOUT) || (iKey==GL_KEY_CANCEL))         // Exit on timeout/cancel
		iRet=0;

	goto lblEnd;
    b80a:	bf00      	nop
	// ****************
	lblKOConfigure:
	iRet=LL_ERROR_INVALID_PARAMETER;
	goto lblEnd;
	lblEnd:
	return iRet;
    b80c:	69bb      	ldr	r3, [r7, #24]
}
    b80e:	4618      	mov	r0, r3
    b810:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    b814:	f2c0 0302 	movt	r3, #2
    b818:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    b81a:	681b      	ldr	r3, [r3, #0]
    b81c:	429a      	cmp	r2, r3
    b81e:	d001      	beq.n	b824 <StartGPRS+0x288>
    b820:	f7fd fbc0 	bl	8fa4 <__stack_chk_fail>
    b824:	f107 0780 	add.w	r7, r7, #128	; 0x80
    b828:	46bd      	mov	sp, r7
    b82a:	bd80      	pop	{r7, pc}
    b82c:	00022ae8 	.word	0x00022ae8

0000b830 <OpenGPRS>:
//           Ex: "192.168.1.3|2000
//  This function has no return value
//****************************************************************************

static LL_HANDLE OpenGPRS(const char *pcServer)
{
    b830:	b590      	push	{r4, r7, lr}
    b832:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    b836:	af00      	add	r7, sp, #0
    b838:	1d3b      	adds	r3, r7, #4
    b83a:	6018      	str	r0, [r3, #0]
    b83c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    b840:	f2c0 0302 	movt	r3, #2
    b844:	681b      	ldr	r3, [r3, #0]
    b846:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
	// Local variables
	// ***************
	// Tlv tree nodes
	// ==============
	TLV_TREE_NODE piConfig=NULL;
    b84a:	f107 0310 	add.w	r3, r7, #16
    b84e:	2200      	movs	r2, #0
    b850:	601a      	str	r2, [r3, #0]
	TLV_TREE_NODE piPhysicalConfig=NULL;
    b852:	f107 0314 	add.w	r3, r7, #20
    b856:	2200      	movs	r2, #0
    b858:	601a      	str	r2, [r3, #0]
	TLV_TREE_NODE piTransportConfig=NULL;
    b85a:	f107 0318 	add.w	r3, r7, #24
    b85e:	2200      	movs	r2, #0
    b860:	601a      	str	r2, [r3, #0]
	char tcAddr[lenGprsIpRemote+1];
	char tcPort[lenGprsPort+1];
	doubleword uiTimeout, uiRemotePort;
	LL_HANDLE hSession = NULL;
    b862:	f107 030c 	add.w	r3, r7, #12
    b866:	2200      	movs	r2, #0
    b868:	601a      	str	r2, [r3, #0]
	int iRet;

	// Create the LinkLayer configuration parameters tree
	// **************************************************
	CHECK(pcServer!=NULL, lblKOConfigure);                              // Configuration failed
    b86a:	1d3b      	adds	r3, r7, #4
    b86c:	681b      	ldr	r3, [r3, #0]
    b86e:	2b00      	cmp	r3, #0
    b870:	f000 80af 	beq.w	b9d2 <OpenGPRS+0x1a2>

	// Create parameters tree
	// ======================
	piConfig = TlvTree_New(LL_TAG_LINK_LAYER_CONFIG);                   // LinkLayer parameters Root tag of the configuration tree
    b874:	f107 0410 	add.w	r4, r7, #16
    b878:	f249 5003 	movw	r0, #38147	; 0x9503
    b87c:	f2c0 00bf 	movt	r0, #191	; 0xbf
    b880:	f013 fed3 	bl	1f62a <TlvTree_New>
    b884:	6020      	str	r0, [r4, #0]
	CHECK(piConfig!=NULL, lblKOConfigure);
    b886:	f107 0310 	add.w	r3, r7, #16
    b88a:	681b      	ldr	r3, [r3, #0]
    b88c:	2b00      	cmp	r3, #0
    b88e:	f000 80a0 	beq.w	b9d2 <OpenGPRS+0x1a2>

	// Physical layer parameters
	// =========================
	piPhysicalConfig = TlvTree_AddChild(piConfig,
    b892:	f107 0414 	add.w	r4, r7, #20
    b896:	f107 0310 	add.w	r3, r7, #16
    b89a:	6818      	ldr	r0, [r3, #0]
    b89c:	f648 0110 	movw	r1, #34832	; 0x8810
    b8a0:	f2c0 019f 	movt	r1, #159	; 0x9f
    b8a4:	2200      	movs	r2, #0
    b8a6:	2300      	movs	r3, #0
    b8a8:	f013 fe89 	bl	1f5be <TlvTree_AddChild>
    b8ac:	6020      	str	r0, [r4, #0]
			LL_TAG_PHYSICAL_LAYER_CONFIG,   // TAG Physical layer parameters
			NULL,                           // VALUE (Null)
			0);                             // LENGTH 0
	CHECK(piPhysicalConfig!=NULL, lblKOConfigure);
    b8ae:	f107 0314 	add.w	r3, r7, #20
    b8b2:	681b      	ldr	r3, [r3, #0]
    b8b4:	2b00      	cmp	r3, #0
    b8b6:	f000 808c 	beq.w	b9d2 <OpenGPRS+0x1a2>

	// GPRS
	// ----
	TlvTree_AddChildInteger(piPhysicalConfig,
    b8ba:	f107 0314 	add.w	r3, r7, #20
    b8be:	6818      	ldr	r0, [r3, #0]
    b8c0:	2101      	movs	r1, #1
    b8c2:	2229      	movs	r2, #41	; 0x29
    b8c4:	2301      	movs	r3, #1
    b8c6:	f013 fe8c 	bl	1f5e2 <TlvTree_AddChildInteger>
			LL_PHYSICAL_V_GPRS,                         // VALUE
			LL_PHYSICAL_L_LINK);                        // LENGTH 1

	// Transport and network layer parameters
	// ======================================
	piTransportConfig = TlvTree_AddChild(piConfig,
    b8ca:	f107 0418 	add.w	r4, r7, #24
    b8ce:	f107 0310 	add.w	r3, r7, #16
    b8d2:	6818      	ldr	r0, [r3, #0]
    b8d4:	f648 0111 	movw	r1, #34833	; 0x8811
    b8d8:	f2c0 019f 	movt	r1, #159	; 0x9f
    b8dc:	2200      	movs	r2, #0
    b8de:	2300      	movs	r3, #0
    b8e0:	f013 fe6d 	bl	1f5be <TlvTree_AddChild>
    b8e4:	6020      	str	r0, [r4, #0]
			LL_TAG_TRANSPORT_LAYER_CONFIG, // TAG Transport layer parameters
			NULL,                          // VALUE (Null)
			0);                            // LENGTH 0
	CHECK(piTransportConfig!=NULL, lblKOConfigure);
    b8e6:	f107 0318 	add.w	r3, r7, #24
    b8ea:	681b      	ldr	r3, [r3, #0]
    b8ec:	2b00      	cmp	r3, #0
    b8ee:	d070      	beq.n	b9d2 <OpenGPRS+0x1a2>

	memset(tcAddr, 0, sizeof(tcAddr));
    b8f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
    b8f4:	4618      	mov	r0, r3
    b8f6:	2100      	movs	r1, #0
    b8f8:	f240 2201 	movw	r2, #513	; 0x201
    b8fc:	f7fd e95e 	blx	8bbc <_init+0x5c>
	pcServer = parseStr('|', tcAddr, pcServer, sizeof(tcAddr));         // Parse Tcp/Ip address
    b900:	1d3c      	adds	r4, r7, #4
    b902:	f107 0230 	add.w	r2, r7, #48	; 0x30
    b906:	1d3b      	adds	r3, r7, #4
    b908:	207c      	movs	r0, #124	; 0x7c
    b90a:	4611      	mov	r1, r2
    b90c:	681a      	ldr	r2, [r3, #0]
    b90e:	f240 2301 	movw	r3, #513	; 0x201
    b912:	f005 fc09 	bl	11128 <parseStr>
    b916:	6020      	str	r0, [r4, #0]
	CHECK(pcServer!=NULL, lblKOConfigure);
    b918:	1d3b      	adds	r3, r7, #4
    b91a:	681b      	ldr	r3, [r3, #0]
    b91c:	2b00      	cmp	r3, #0
    b91e:	d058      	beq.n	b9d2 <OpenGPRS+0x1a2>

	memset(tcPort, 0, sizeof(tcPort));
    b920:	f107 0328 	add.w	r3, r7, #40	; 0x28
    b924:	4618      	mov	r0, r3
    b926:	2100      	movs	r1, #0
    b928:	2206      	movs	r2, #6
    b92a:	f7fd e948 	blx	8bbc <_init+0x5c>
	pcServer = parseStr('|', tcPort, pcServer, sizeof(tcPort));         // Parse Tcp/Ip port
    b92e:	1d3c      	adds	r4, r7, #4
    b930:	f107 0228 	add.w	r2, r7, #40	; 0x28
    b934:	1d3b      	adds	r3, r7, #4
    b936:	207c      	movs	r0, #124	; 0x7c
    b938:	4611      	mov	r1, r2
    b93a:	681a      	ldr	r2, [r3, #0]
    b93c:	2306      	movs	r3, #6
    b93e:	f005 fbf3 	bl	11128 <parseStr>
    b942:	6020      	str	r0, [r4, #0]
	CHECK(pcServer!=NULL, lblKOConfigure);
    b944:	1d3b      	adds	r3, r7, #4
    b946:	681b      	ldr	r3, [r3, #0]
    b948:	2b00      	cmp	r3, #0
    b94a:	d042      	beq.n	b9d2 <OpenGPRS+0x1a2>

	// TCP/IP
	// ------
	TlvTree_AddChildInteger(piTransportConfig,
    b94c:	f107 0318 	add.w	r3, r7, #24
    b950:	6818      	ldr	r0, [r3, #0]
    b952:	2101      	movs	r1, #1
    b954:	2201      	movs	r2, #1
    b956:	2301      	movs	r3, #1
    b958:	f013 fe43 	bl	1f5e2 <TlvTree_AddChildInteger>
			LL_TRANSPORT_V_TCPIP,                       // VALUE
			LL_TRANSPORT_L_PROTOCOL);                   // LENGTH 1 byte

	// Host Name
	// ---------
	TlvTree_AddChildString(piTransportConfig,
    b95c:	f107 0218 	add.w	r2, r7, #24
			LL_TCPIP_T_HOST_NAME,                        // TAG
			tcAddr);                                     // VALUE
    b960:	f107 0330 	add.w	r3, r7, #48	; 0x30
			LL_TRANSPORT_V_TCPIP,                       // VALUE
			LL_TRANSPORT_L_PROTOCOL);                   // LENGTH 1 byte

	// Host Name
	// ---------
	TlvTree_AddChildString(piTransportConfig,
    b964:	6810      	ldr	r0, [r2, #0]
    b966:	2110      	movs	r1, #16
    b968:	461a      	mov	r2, r3
    b96a:	f013 fe4c 	bl	1f606 <TlvTree_AddChildString>
			tcAddr);                                     // VALUE
	// LENGTH (strlen addr)

	// Port
	// ----
	uiRemotePort = atoi (tcPort);
    b96e:	f107 0328 	add.w	r3, r7, #40	; 0x28
    b972:	4618      	mov	r0, r3
    b974:	f7fd e916 	blx	8ba4 <_init+0x44>
    b978:	4602      	mov	r2, r0
    b97a:	f107 031c 	add.w	r3, r7, #28
    b97e:	601a      	str	r2, [r3, #0]
	TlvTree_AddChildInteger(piTransportConfig,
    b980:	f107 0218 	add.w	r2, r7, #24
    b984:	f107 031c 	add.w	r3, r7, #28
    b988:	6810      	ldr	r0, [r2, #0]
    b98a:	2111      	movs	r1, #17
    b98c:	681a      	ldr	r2, [r3, #0]
    b98e:	2304      	movs	r3, #4
    b990:	f013 fe27 	bl	1f5e2 <TlvTree_AddChildInteger>



	// Connection timeout
	// ------------------
	uiTimeout = TCPIP_TIMEOUT;
    b994:	f107 0320 	add.w	r3, r7, #32
    b998:	f640 32b8 	movw	r2, #3000	; 0xbb8
    b99c:	601a      	str	r2, [r3, #0]
	TlvTree_AddChildInteger(piTransportConfig,
    b99e:	f107 0218 	add.w	r2, r7, #24
    b9a2:	f107 0320 	add.w	r3, r7, #32
    b9a6:	6810      	ldr	r0, [r2, #0]
    b9a8:	2112      	movs	r1, #18
    b9aa:	681a      	ldr	r2, [r3, #0]
    b9ac:	2304      	movs	r3, #4
    b9ae:	f013 fe18 	bl	1f5e2 <TlvTree_AddChildInteger>
			uiTimeout,                                  // Value (Integer)
			LL_TCPIP_L_CONNECT_TIMEOUT);                // LENGTH 4 bytes

	// Link Layer configuration
	// ************************
	iRet = LL_Configure(&hSession, piConfig);                           // Initialize the handle of the session
    b9b2:	f107 0424 	add.w	r4, r7, #36	; 0x24
    b9b6:	f107 020c 	add.w	r2, r7, #12
    b9ba:	f107 0310 	add.w	r3, r7, #16
    b9be:	4610      	mov	r0, r2
    b9c0:	6819      	ldr	r1, [r3, #0]
    b9c2:	f013 fcf4 	bl	1f3ae <LL_Configure>
    b9c6:	6020      	str	r0, [r4, #0]
	CHECK(iRet==LL_ERROR_OK, lblKOConfigure);
    b9c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b9cc:	681b      	ldr	r3, [r3, #0]
    b9ce:	2b00      	cmp	r3, #0
    b9d0:	d004      	beq.n	b9dc <OpenGPRS+0x1ac>
	goto lblEnd;

	// Errors treatment
	// ****************
	lblKOConfigure:                                                         // Configuration failed
	hSession=NULL;
    b9d2:	f107 030c 	add.w	r3, r7, #12
    b9d6:	2200      	movs	r2, #0
    b9d8:	601a      	str	r2, [r3, #0]
	goto lblEnd;
    b9da:	e000      	b.n	b9de <OpenGPRS+0x1ae>
	// Link Layer configuration
	// ************************
	iRet = LL_Configure(&hSession, piConfig);                           // Initialize the handle of the session
	CHECK(iRet==LL_ERROR_OK, lblKOConfigure);

	goto lblEnd;
    b9dc:	bf00      	nop
	// ****************
	lblKOConfigure:                                                         // Configuration failed
	hSession=NULL;
	goto lblEnd;
	lblEnd:
	if (piConfig)
    b9de:	f107 0310 	add.w	r3, r7, #16
    b9e2:	681b      	ldr	r3, [r3, #0]
    b9e4:	2b00      	cmp	r3, #0
    b9e6:	d004      	beq.n	b9f2 <OpenGPRS+0x1c2>
		TlvTree_Release(piConfig);                                      // Release tree to avoid memory leak
    b9e8:	f107 0310 	add.w	r3, r7, #16
    b9ec:	6818      	ldr	r0, [r3, #0]
    b9ee:	f013 fe2e 	bl	1f64e <TlvTree_Release>
	return hSession;                                                    // Return the handle of the session
    b9f2:	f107 030c 	add.w	r3, r7, #12
    b9f6:	681b      	ldr	r3, [r3, #0]
}
    b9f8:	4618      	mov	r0, r3
    b9fa:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    b9fe:	f2c0 0302 	movt	r3, #2
    ba02:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
    ba06:	681b      	ldr	r3, [r3, #0]
    ba08:	429a      	cmp	r2, r3
    ba0a:	d001      	beq.n	ba10 <OpenGPRS+0x1e0>
    ba0c:	f7fd faca 	bl	8fa4 <__stack_chk_fail>
    ba10:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    ba14:	46bd      	mov	sp, r7
    ba16:	bd90      	pop	{r4, r7, pc}

0000ba18 <ConnectGPRS>:
//    >=0 : Connect done
//     <0 : Connect failed
//****************************************************************************

static int ConnectGPRS(LL_HANDLE hSession)
{
    ba18:	b580      	push	{r7, lr}
    ba1a:	b084      	sub	sp, #16
    ba1c:	af00      	add	r7, sp, #0
    ba1e:	6078      	str	r0, [r7, #4]
    ba20:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    ba24:	f2c0 0302 	movt	r3, #2
    ba28:	681b      	ldr	r3, [r3, #0]
    ba2a:	60fb      	str	r3, [r7, #12]
	// ***************
	int iRet;

	// Link Layer connection
	// *********************
	iRet = LL_Connect(hSession);
    ba2c:	6878      	ldr	r0, [r7, #4]
    ba2e:	f013 fcd0 	bl	1f3d2 <LL_Connect>
    ba32:	60b8      	str	r0, [r7, #8]

	return iRet;
    ba34:	68bb      	ldr	r3, [r7, #8]
}
    ba36:	4618      	mov	r0, r3
    ba38:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    ba3c:	f2c0 0302 	movt	r3, #2
    ba40:	68fa      	ldr	r2, [r7, #12]
    ba42:	681b      	ldr	r3, [r3, #0]
    ba44:	429a      	cmp	r2, r3
    ba46:	d001      	beq.n	ba4c <ConnectGPRS+0x34>
    ba48:	f7fd faac 	bl	8fa4 <__stack_chk_fail>
    ba4c:	f107 0710 	add.w	r7, r7, #16
    ba50:	46bd      	mov	sp, r7
    ba52:	bd80      	pop	{r7, pc}

0000ba54 <SendGPRS>:
//    >=0 : Number of bytes sent
//     <0 : Transmission failed
//****************************************************************************

static int SendGPRS(LL_HANDLE hSession, const char *pcMsg, word usLen)
{
    ba54:	b580      	push	{r7, lr}
    ba56:	b086      	sub	sp, #24
    ba58:	af00      	add	r7, sp, #0
    ba5a:	60f8      	str	r0, [r7, #12]
    ba5c:	60b9      	str	r1, [r7, #8]
    ba5e:	4613      	mov	r3, r2
    ba60:	80fb      	strh	r3, [r7, #6]
    ba62:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    ba66:	f2c0 0302 	movt	r3, #2
    ba6a:	681b      	ldr	r3, [r3, #0]
    ba6c:	617b      	str	r3, [r7, #20]
	// ***************
	int iRet;

	// Send data
	// *********
	iRet = LL_Send(hSession, usLen, (byte*)pcMsg, LL_INFINITE);
    ba6e:	88fb      	ldrh	r3, [r7, #6]
    ba70:	68f8      	ldr	r0, [r7, #12]
    ba72:	4619      	mov	r1, r3
    ba74:	68ba      	ldr	r2, [r7, #8]
    ba76:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    ba7a:	f013 fd3a 	bl	1f4f2 <LL_Send>
    ba7e:	6138      	str	r0, [r7, #16]
	if(iRet != usLen)
    ba80:	88fa      	ldrh	r2, [r7, #6]
    ba82:	693b      	ldr	r3, [r7, #16]
    ba84:	429a      	cmp	r2, r3
    ba86:	d003      	beq.n	ba90 <SendGPRS+0x3c>
		iRet = LL_GetLastError(hSession);
    ba88:	68f8      	ldr	r0, [r7, #12]
    ba8a:	f013 fcc6 	bl	1f41a <LL_GetLastError>
    ba8e:	6138      	str	r0, [r7, #16]

	return iRet;
    ba90:	693b      	ldr	r3, [r7, #16]
}
    ba92:	4618      	mov	r0, r3
    ba94:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    ba98:	f2c0 0302 	movt	r3, #2
    ba9c:	697a      	ldr	r2, [r7, #20]
    ba9e:	681b      	ldr	r3, [r3, #0]
    baa0:	429a      	cmp	r2, r3
    baa2:	d001      	beq.n	baa8 <SendGPRS+0x54>
    baa4:	f7fd fa7e 	bl	8fa4 <__stack_chk_fail>
    baa8:	f107 0718 	add.w	r7, r7, #24
    baac:	46bd      	mov	sp, r7
    baae:	bd80      	pop	{r7, pc}

0000bab0 <ReceiveGPRS>:
//    >=0 : Number of bytes received
//     <0 : Reception failed
//****************************************************************************

static int ReceiveGPRS(LL_HANDLE hSession, T_GL_HWIDGET hScreen, char *pcMsg, word usLen, byte ucDly)
{
    bab0:	b580      	push	{r7, lr}
    bab2:	b08e      	sub	sp, #56	; 0x38
    bab4:	af02      	add	r7, sp, #8
    bab6:	60f8      	str	r0, [r7, #12]
    bab8:	60b9      	str	r1, [r7, #8]
    baba:	607a      	str	r2, [r7, #4]
    babc:	807b      	strh	r3, [r7, #2]
    babe:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    bac2:	707b      	strb	r3, [r7, #1]
    bac4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    bac8:	f2c0 0302 	movt	r3, #2
    bacc:	681b      	ldr	r3, [r3, #0]
    bace:	62fb      	str	r3, [r7, #44]	; 0x2c
	// Local variables
	// ***************
	int iKey;
	long lSec, lTimeOut=LL_INFINITE;
    bad0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    bad4:	61bb      	str	r3, [r7, #24]
	int iRet, iLength=0, iNbrBytes;
    bad6:	2300      	movs	r3, #0
    bad8:	623b      	str	r3, [r7, #32]

	// Timeout setting
	// ***************
	if(ucDly != 0xFF)
    bada:	787b      	ldrb	r3, [r7, #1]
    badc:	2bff      	cmp	r3, #255	; 0xff
    bade:	d006      	beq.n	baee <ReceiveGPRS+0x3e>
		lSec = ucDly*1000;
    bae0:	787b      	ldrb	r3, [r7, #1]
    bae2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bae6:	fb02 f303 	mul.w	r3, r2, r3
    baea:	617b      	str	r3, [r7, #20]
    baec:	e002      	b.n	baf4 <ReceiveGPRS+0x44>
	else
		lSec = LL_INFINITE;
    baee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    baf2:	617b      	str	r3, [r7, #20]

	// Receiving first block
	// *********************
	ResetPeripherals(KEYBOARD | TSCREEN);                                  // Reset peripherals FIFO
    baf4:	2001      	movs	r0, #1
    baf6:	f6c0 0000 	movt	r0, #2048	; 0x800
    bafa:	f7fe ff47 	bl	a98c <ResetPeripherals>
	iRet = TimerStart(0, lSec);                                            // Timer0 starts
    bafe:	2000      	movs	r0, #0
    bb00:	6979      	ldr	r1, [r7, #20]
    bb02:	f005 fc85 	bl	11410 <TimerStart>
    bb06:	61f8      	str	r0, [r7, #28]
	CHECK(iRet>=0, lblTimeOut);
    bb08:	69fb      	ldr	r3, [r7, #28]
    bb0a:	2b00      	cmp	r3, #0
    bb0c:	db67      	blt.n	bbde <ReceiveGPRS+0x12e>
	do
	{
		iNbrBytes = LL_Receive(hSession, usLen, pcMsg+iLength, 1*100);     // Check reception
    bb0e:	887a      	ldrh	r2, [r7, #2]
    bb10:	6a3b      	ldr	r3, [r7, #32]
    bb12:	6879      	ldr	r1, [r7, #4]
    bb14:	18cb      	adds	r3, r1, r3
    bb16:	68f8      	ldr	r0, [r7, #12]
    bb18:	4611      	mov	r1, r2
    bb1a:	461a      	mov	r2, r3
    bb1c:	2364      	movs	r3, #100	; 0x64
    bb1e:	f013 fcd6 	bl	1f4ce <LL_Receive>
    bb22:	6278      	str	r0, [r7, #36]	; 0x24
		if (iNbrBytes != 0)
    bb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bb26:	2b00      	cmp	r3, #0
    bb28:	d11f      	bne.n	bb6a <ReceiveGPRS+0xba>
			break;                                                         // Bytes received
		iKey = GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 0, false);                 // Get key pressed/touched (shortcut)
    bb2a:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    bb2e:	f2c0 0302 	movt	r3, #2
    bb32:	681b      	ldr	r3, [r3, #0]
    bb34:	2200      	movs	r2, #0
    bb36:	9200      	str	r2, [sp, #0]
    bb38:	68b8      	ldr	r0, [r7, #8]
    bb3a:	4619      	mov	r1, r3
    bb3c:	2201      	movs	r2, #1
    bb3e:	2300      	movs	r3, #0
    bb40:	f002 f88e 	bl	dc60 <GoalGetKey>
    bb44:	62b8      	str	r0, [r7, #40]	; 0x28
		CHECK(iKey!=GL_KEY_CANCEL, lblTimeOut);                            // Exit on cancel key
    bb46:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bb48:	f64f 0351 	movw	r3, #63569	; 0xf851
    bb4c:	429a      	cmp	r2, r3
    bb4e:	d046      	beq.n	bbde <ReceiveGPRS+0x12e>
		if (lSec != LL_INFINITE)
    bb50:	697a      	ldr	r2, [r7, #20]
    bb52:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    bb56:	429a      	cmp	r2, r3
    bb58:	d003      	beq.n	bb62 <ReceiveGPRS+0xb2>
			lTimeOut = TimerGet(0);                                        // Retrieve timer value
    bb5a:	2000      	movs	r0, #0
    bb5c:	f005 fca8 	bl	114b0 <TimerGet>
    bb60:	61b8      	str	r0, [r7, #24]
	} while (lTimeOut>0);
    bb62:	69bb      	ldr	r3, [r7, #24]
    bb64:	2b00      	cmp	r3, #0
    bb66:	dcd2      	bgt.n	bb0e <ReceiveGPRS+0x5e>
    bb68:	e000      	b.n	bb6c <ReceiveGPRS+0xbc>
	CHECK(iRet>=0, lblTimeOut);
	do
	{
		iNbrBytes = LL_Receive(hSession, usLen, pcMsg+iLength, 1*100);     // Check reception
		if (iNbrBytes != 0)
			break;                                                         // Bytes received
    bb6a:	bf00      	nop
		CHECK(iKey!=GL_KEY_CANCEL, lblTimeOut);                            // Exit on cancel key
		if (lSec != LL_INFINITE)
			lTimeOut = TimerGet(0);                                        // Retrieve timer value
	} while (lTimeOut>0);

	CHECK(lTimeOut!=0, lblTimeOut);                                        // Exit on timeout
    bb6c:	69bb      	ldr	r3, [r7, #24]
    bb6e:	2b00      	cmp	r3, #0
    bb70:	d035      	beq.n	bbde <ReceiveGPRS+0x12e>

	iLength += iNbrBytes;
    bb72:	6a3a      	ldr	r2, [r7, #32]
    bb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bb76:	18d3      	adds	r3, r2, r3
    bb78:	623b      	str	r3, [r7, #32]
	iRet = LL_GetLastError(hSession);
    bb7a:	68f8      	ldr	r0, [r7, #12]
    bb7c:	f013 fc4d 	bl	1f41a <LL_GetLastError>
    bb80:	61f8      	str	r0, [r7, #28]
	CHECK (iRet==LL_ERROR_OK, lblEnd);
    bb82:	69fb      	ldr	r3, [r7, #28]
    bb84:	2b00      	cmp	r3, #0
    bb86:	d130      	bne.n	bbea <ReceiveGPRS+0x13a>
	if (iNbrBytes != 0)
    bb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bb8a:	2b00      	cmp	r3, #0
    bb8c:	d024      	beq.n	bbd8 <ReceiveGPRS+0x128>
    bb8e:	e000      	b.n	bb92 <ReceiveGPRS+0xe2>
			iLength += iNbrBytes;
			iRet = LL_GetLastError(hSession);
			CHECK ((iRet==LL_ERROR_OK) || (iRet==LL_ERROR_TIMEOUT), lblEnd);
			if ((iRet==LL_ERROR_TIMEOUT) || (iNbrBytes==0))
				break;
		}
    bb90:	bf00      	nop
	{
		// Receiving next block until timeout (Inter block 2s)
		// ===================================================
		while(1)
		{
			iNbrBytes = LL_Receive(hSession, usLen-iLength, pcMsg+iLength, 2*100);
    bb92:	887a      	ldrh	r2, [r7, #2]
    bb94:	6a3b      	ldr	r3, [r7, #32]
    bb96:	1ad2      	subs	r2, r2, r3
    bb98:	6a3b      	ldr	r3, [r7, #32]
    bb9a:	6879      	ldr	r1, [r7, #4]
    bb9c:	18cb      	adds	r3, r1, r3
    bb9e:	68f8      	ldr	r0, [r7, #12]
    bba0:	4611      	mov	r1, r2
    bba2:	461a      	mov	r2, r3
    bba4:	23c8      	movs	r3, #200	; 0xc8
    bba6:	f013 fc92 	bl	1f4ce <LL_Receive>
    bbaa:	6278      	str	r0, [r7, #36]	; 0x24
			iLength += iNbrBytes;
    bbac:	6a3a      	ldr	r2, [r7, #32]
    bbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bbb0:	18d3      	adds	r3, r2, r3
    bbb2:	623b      	str	r3, [r7, #32]
			iRet = LL_GetLastError(hSession);
    bbb4:	68f8      	ldr	r0, [r7, #12]
    bbb6:	f013 fc30 	bl	1f41a <LL_GetLastError>
    bbba:	61f8      	str	r0, [r7, #28]
			CHECK ((iRet==LL_ERROR_OK) || (iRet==LL_ERROR_TIMEOUT), lblEnd);
    bbbc:	69fb      	ldr	r3, [r7, #28]
    bbbe:	2b00      	cmp	r3, #0
    bbc0:	d003      	beq.n	bbca <ReceiveGPRS+0x11a>
    bbc2:	69fb      	ldr	r3, [r7, #28]
    bbc4:	f513 7f7b 	cmn.w	r3, #1004	; 0x3ec
    bbc8:	d10f      	bne.n	bbea <ReceiveGPRS+0x13a>
			if ((iRet==LL_ERROR_TIMEOUT) || (iNbrBytes==0))
    bbca:	69fb      	ldr	r3, [r7, #28]
    bbcc:	f513 7f7b 	cmn.w	r3, #1004	; 0x3ec
    bbd0:	d002      	beq.n	bbd8 <ReceiveGPRS+0x128>
    bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bbd4:	2b00      	cmp	r3, #0
    bbd6:	d1db      	bne.n	bb90 <ReceiveGPRS+0xe0>
				break;
		}
	}

	iRet = iLength;
    bbd8:	6a3b      	ldr	r3, [r7, #32]
    bbda:	61fb      	str	r3, [r7, #28]
	goto lblEnd;
    bbdc:	e005      	b.n	bbea <ReceiveGPRS+0x13a>

	// Errors treatment
	// ****************
	lblTimeOut:                                                                // Timeout expired
	iRet = LL_ERROR_TIMEOUT;
    bbde:	f64f 4314 	movw	r3, #64532	; 0xfc14
    bbe2:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    bbe6:	61fb      	str	r3, [r7, #28]
	goto lblEnd;
    bbe8:	bf00      	nop
	lblEnd:
	TimerStop(0);
    bbea:	2000      	movs	r0, #0
    bbec:	f005 fca4 	bl	11538 <TimerStop>
	return iRet;
    bbf0:	69fb      	ldr	r3, [r7, #28]
}
    bbf2:	4618      	mov	r0, r3
    bbf4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    bbf8:	f2c0 0302 	movt	r3, #2
    bbfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    bbfe:	681b      	ldr	r3, [r3, #0]
    bc00:	429a      	cmp	r2, r3
    bc02:	d001      	beq.n	bc08 <ReceiveGPRS+0x158>
    bc04:	f7fd f9ce 	bl	8fa4 <__stack_chk_fail>
    bc08:	f107 0730 	add.w	r7, r7, #48	; 0x30
    bc0c:	46bd      	mov	sp, r7
    bc0e:	bd80      	pop	{r7, pc}

0000bc10 <DisconnectGPRS>:
//    >=0 : Disconnect done
//     <0 : Disconnect failed
//****************************************************************************

static int DisconnectGPRS(LL_HANDLE hSession)
{
    bc10:	b580      	push	{r7, lr}
    bc12:	b084      	sub	sp, #16
    bc14:	af00      	add	r7, sp, #0
    bc16:	6078      	str	r0, [r7, #4]
    bc18:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    bc1c:	f2c0 0302 	movt	r3, #2
    bc20:	681b      	ldr	r3, [r3, #0]
    bc22:	60fb      	str	r3, [r7, #12]
	// ***************
	int iRet;

	// Link Layer disconnection
	// ************************
	iRet = LL_Disconnect(hSession);
    bc24:	6878      	ldr	r0, [r7, #4]
    bc26:	f013 fbe6 	bl	1f3f6 <LL_Disconnect>
    bc2a:	60b8      	str	r0, [r7, #8]

	return iRet;
    bc2c:	68bb      	ldr	r3, [r7, #8]
}
    bc2e:	4618      	mov	r0, r3
    bc30:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    bc34:	f2c0 0302 	movt	r3, #2
    bc38:	68fa      	ldr	r2, [r7, #12]
    bc3a:	681b      	ldr	r3, [r3, #0]
    bc3c:	429a      	cmp	r2, r3
    bc3e:	d001      	beq.n	bc44 <DisconnectGPRS+0x34>
    bc40:	f7fd f9b0 	bl	8fa4 <__stack_chk_fail>
    bc44:	f107 0710 	add.w	r7, r7, #16
    bc48:	46bd      	mov	sp, r7
    bc4a:	bd80      	pop	{r7, pc}

0000bc4c <CloseGPRS>:
//    >=0 : Configuration deleted
//     <0 : Processing failed
//****************************************************************************

static int CloseGPRS(LL_HANDLE hSession)
{
    bc4c:	b580      	push	{r7, lr}
    bc4e:	b084      	sub	sp, #16
    bc50:	af00      	add	r7, sp, #0
    bc52:	6078      	str	r0, [r7, #4]
    bc54:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    bc58:	f2c0 0302 	movt	r3, #2
    bc5c:	681b      	ldr	r3, [r3, #0]
    bc5e:	60fb      	str	r3, [r7, #12]
	// ***************
	int iRet;

	// Delete the configuration
	// ************************
	iRet = LL_Configure(&hSession, NULL);
    bc60:	1d3b      	adds	r3, r7, #4
    bc62:	4618      	mov	r0, r3
    bc64:	2100      	movs	r1, #0
    bc66:	f013 fba2 	bl	1f3ae <LL_Configure>
    bc6a:	60b8      	str	r0, [r7, #8]

	return iRet;
    bc6c:	68bb      	ldr	r3, [r7, #8]
}
    bc6e:	4618      	mov	r0, r3
    bc70:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    bc74:	f2c0 0302 	movt	r3, #2
    bc78:	68fa      	ldr	r2, [r7, #12]
    bc7a:	681b      	ldr	r3, [r3, #0]
    bc7c:	429a      	cmp	r2, r3
    bc7e:	d001      	beq.n	bc84 <CloseGPRS+0x38>
    bc80:	f7fd f990 	bl	8fa4 <__stack_chk_fail>
    bc84:	f107 0710 	add.w	r7, r7, #16
    bc88:	46bd      	mov	sp, r7
    bc8a:	bd80      	pop	{r7, pc}

0000bc8c <StopGPRS>:
//    >=0 : Break attachment done
//     <0 : Break attachment failed
//****************************************************************************

static int StopGPRS(void)
{
    bc8c:	b580      	push	{r7, lr}
    bc8e:	b082      	sub	sp, #8
    bc90:	af00      	add	r7, sp, #0
    bc92:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    bc96:	f2c0 0302 	movt	r3, #2
    bc9a:	681b      	ldr	r3, [r3, #0]
    bc9c:	607b      	str	r3, [r7, #4]
	// Local variables
	// ***************
	int iRet = 1;
    bc9e:	2301      	movs	r3, #1
    bca0:	603b      	str	r3, [r7, #0]

	// GPRS disconnection
	// ******************
	// iRet = LL_GPRS_Stop();

	return iRet;
    bca2:	683b      	ldr	r3, [r7, #0]
}
    bca4:	4618      	mov	r0, r3
    bca6:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    bcaa:	f2c0 0302 	movt	r3, #2
    bcae:	687a      	ldr	r2, [r7, #4]
    bcb0:	681b      	ldr	r3, [r3, #0]
    bcb2:	429a      	cmp	r2, r3
    bcb4:	d001      	beq.n	bcba <StopGPRS+0x2e>
    bcb6:	f7fd f975 	bl	8fa4 <__stack_chk_fail>
    bcba:	f107 0708 	add.w	r7, r7, #8
    bcbe:	46bd      	mov	sp, r7
    bcc0:	bd80      	pop	{r7, pc}
    bcc2:	bf00      	nop

0000bcc4 <PromptGPRS>:
//  This function has no parameters.
//  This function has no return value
//****************************************************************************

void PromptGPRS(void)
{
    bcc4:	b590      	push	{r4, r7, lr}
    bcc6:	f2ad 6d44 	subw	sp, sp, #1604	; 0x644
    bcca:	af04      	add	r7, sp, #16
    bccc:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    bcd0:	f2c0 0302 	movt	r3, #2
    bcd4:	681b      	ldr	r3, [r3, #0]
    bcd6:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
	int iHeader, iFooter;
	int i, iDefItemP, iDefItemN, iRet;

	// Pin Required ?
	// **************
	iRet = appGet(appGprsRequirePin, tcRequirePin, lenGprsRequirePin+1);
    bcda:	f107 0408 	add.w	r4, r7, #8
    bcde:	f107 031c 	add.w	r3, r7, #28
    bce2:	200d      	movs	r0, #13
    bce4:	4619      	mov	r1, r3
    bce6:	2202      	movs	r2, #2
    bce8:	f003 fce8 	bl	f6bc <appGet>
    bcec:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    bcee:	f107 0308 	add.w	r3, r7, #8
    bcf2:	681b      	ldr	r3, [r3, #0]
    bcf4:	2b00      	cmp	r3, #0
    bcf6:	f2c0 8328 	blt.w	c34a <PromptGPRS+0x686>
	iDefItemP = atoi(tcRequirePin);
    bcfa:	f107 040c 	add.w	r4, r7, #12
    bcfe:	f107 031c 	add.w	r3, r7, #28
    bd02:	4618      	mov	r0, r3
    bd04:	f7fc ef4e 	blx	8ba4 <_init+0x44>
    bd08:	6020      	str	r0, [r4, #0]
	iDefItemN = GL_Dialog_Choice(gGoalGraphicLibInstance, "Pin Required?", tzRequirePin, iDefItemP, GL_BUTTON_DEFAULT, GL_KEY_0, GL_TIME_MINUTE);
    bd0a:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    bd0e:	f2c0 0302 	movt	r3, #2
    bd12:	681a      	ldr	r2, [r3, #0]
    bd14:	f107 030c 	add.w	r3, r7, #12
    bd18:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bd1c:	9100      	str	r1, [sp, #0]
    bd1e:	2130      	movs	r1, #48	; 0x30
    bd20:	9101      	str	r1, [sp, #4]
    bd22:	f64e 2160 	movw	r1, #60000	; 0xea60
    bd26:	9102      	str	r1, [sp, #8]
    bd28:	4610      	mov	r0, r2
    bd2a:	f642 51f8 	movw	r1, #11768	; 0x2df8
    bd2e:	f2c0 0102 	movt	r1, #2
    bd32:	f24f 3240 	movw	r2, #62272	; 0xf340
    bd36:	f2c0 0202 	movt	r2, #2
    bd3a:	681b      	ldr	r3, [r3, #0]
    bd3c:	f015 fbce 	bl	214dc <GL_Dialog_Choice>
    bd40:	4602      	mov	r2, r0
    bd42:	f107 0310 	add.w	r3, r7, #16
    bd46:	601a      	str	r2, [r3, #0]
	CHECK((iDefItemN!=GL_KEY_CANCEL) && (iDefItemN!=GL_RESULT_INACTIVITY), lblEnd); // Exit cancel/timeout
    bd48:	f107 0310 	add.w	r3, r7, #16
    bd4c:	681a      	ldr	r2, [r3, #0]
    bd4e:	f64f 0351 	movw	r3, #63569	; 0xf851
    bd52:	429a      	cmp	r2, r3
    bd54:	f000 8322 	beq.w	c39c <PromptGPRS+0x6d8>
    bd58:	f107 0310 	add.w	r3, r7, #16
    bd5c:	681a      	ldr	r2, [r3, #0]
    bd5e:	f64f 0380 	movw	r3, #63616	; 0xf880
    bd62:	429a      	cmp	r2, r3
    bd64:	f000 831a 	beq.w	c39c <PromptGPRS+0x6d8>
	if (iDefItemN != iDefItemP)
    bd68:	f107 0210 	add.w	r2, r7, #16
    bd6c:	f107 030c 	add.w	r3, r7, #12
    bd70:	6812      	ldr	r2, [r2, #0]
    bd72:	681b      	ldr	r3, [r3, #0]
    bd74:	429a      	cmp	r2, r3
    bd76:	d018      	beq.n	bdaa <PromptGPRS+0xe6>
	{
		tcRequirePin[0] = iDefItemN + 0x30;
    bd78:	f107 0310 	add.w	r3, r7, #16
    bd7c:	681b      	ldr	r3, [r3, #0]
    bd7e:	b2db      	uxtb	r3, r3
    bd80:	3330      	adds	r3, #48	; 0x30
    bd82:	b2da      	uxtb	r2, r3
    bd84:	f107 031c 	add.w	r3, r7, #28
    bd88:	701a      	strb	r2, [r3, #0]
		iRet = appPut(appGprsRequirePin, tcRequirePin, lenGprsRequirePin); // Save pin required
    bd8a:	f107 0408 	add.w	r4, r7, #8
    bd8e:	f107 031c 	add.w	r3, r7, #28
    bd92:	200d      	movs	r0, #13
    bd94:	4619      	mov	r1, r3
    bd96:	2201      	movs	r2, #1
    bd98:	f003 fc28 	bl	f5ec <appPut>
    bd9c:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblDbaErr);
    bd9e:	f107 0308 	add.w	r3, r7, #8
    bda2:	681b      	ldr	r3, [r3, #0]
    bda4:	2b00      	cmp	r3, #0
    bda6:	f2c0 82d0 	blt.w	c34a <PromptGPRS+0x686>
	}

	// Enter APN
	// *********
	iHeader = IsHeader();                                                  // Save header state
    bdaa:	f107 0414 	add.w	r4, r7, #20
    bdae:	f015 f8a5 	bl	20efc <IsHeader>
    bdb2:	6020      	str	r0, [r4, #0]
	iFooter = IsFooter();                                                  // Save footer state
    bdb4:	f107 0418 	add.w	r4, r7, #24
    bdb8:	f015 f86e 	bl	20e98 <IsFooter>
    bdbc:	6020      	str	r0, [r4, #0]

	memset(tcMask, 0, sizeof(tcMask));
    bdbe:	f507 7392 	add.w	r3, r7, #292	; 0x124
    bdc2:	4618      	mov	r0, r3
    bdc4:	2100      	movs	r1, #0
    bdc6:	f44f 7280 	mov.w	r2, #256	; 0x100
    bdca:	f7fc eef8 	blx	8bbc <_init+0x5c>
	for (i=0; i<lenGprsApn; i++)
    bdce:	1d3b      	adds	r3, r7, #4
    bdd0:	2200      	movs	r2, #0
    bdd2:	601a      	str	r2, [r3, #0]
    bdd4:	e015      	b.n	be02 <PromptGPRS+0x13e>
		strcat(tcMask, "/c");                                              // Accept any character
    bdd6:	f507 7392 	add.w	r3, r7, #292	; 0x124
    bdda:	4618      	mov	r0, r3
    bddc:	f7fc ef52 	blx	8c84 <_init+0x124>
    bde0:	4603      	mov	r3, r0
    bde2:	f507 7292 	add.w	r2, r7, #292	; 0x124
    bde6:	18d2      	adds	r2, r2, r3
    bde8:	f642 6308 	movw	r3, #11784	; 0x2e08
    bdec:	f2c0 0302 	movt	r3, #2
    bdf0:	8819      	ldrh	r1, [r3, #0]
    bdf2:	789b      	ldrb	r3, [r3, #2]
    bdf4:	8011      	strh	r1, [r2, #0]
    bdf6:	7093      	strb	r3, [r2, #2]
	// *********
	iHeader = IsHeader();                                                  // Save header state
	iFooter = IsFooter();                                                  // Save footer state

	memset(tcMask, 0, sizeof(tcMask));
	for (i=0; i<lenGprsApn; i++)
    bdf8:	1d3b      	adds	r3, r7, #4
    bdfa:	1d3a      	adds	r2, r7, #4
    bdfc:	6812      	ldr	r2, [r2, #0]
    bdfe:	3201      	adds	r2, #1
    be00:	601a      	str	r2, [r3, #0]
    be02:	1d3b      	adds	r3, r7, #4
    be04:	681b      	ldr	r3, [r3, #0]
    be06:	2b1d      	cmp	r3, #29
    be08:	dde5      	ble.n	bdd6 <PromptGPRS+0x112>
		strcat(tcMask, "/c");                                              // Accept any character
	iRet = appGet(appGprsApn, tcApnP, lenGprsApn+1);
    be0a:	f107 0408 	add.w	r4, r7, #8
    be0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
    be12:	200e      	movs	r0, #14
    be14:	4619      	mov	r1, r3
    be16:	221f      	movs	r2, #31
    be18:	f003 fc50 	bl	f6bc <appGet>
    be1c:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    be1e:	f107 0308 	add.w	r3, r7, #8
    be22:	681b      	ldr	r3, [r3, #0]
    be24:	2b00      	cmp	r3, #0
    be26:	f2c0 8290 	blt.w	c34a <PromptGPRS+0x686>
	strcpy(tcApnN, tcApnP);
    be2a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    be2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
    be32:	4610      	mov	r0, r2
    be34:	4619      	mov	r1, r3
    be36:	f7fc eef4 	blx	8c20 <_init+0xc0>

	DisplayLeds(_OFF_);                                                    // Disable Leds
    be3a:	2000      	movs	r0, #0
    be3c:	f014 fffe 	bl	20e3c <DisplayLeds>
	DisplayHeader(_OFF_);                                                  // Disable Header
    be40:	2000      	movs	r0, #0
    be42:	f014 ffcd 	bl	20de0 <DisplayHeader>
	DisplayFooter(_OFF_);                                                  // Disable Footer
    be46:	2000      	movs	r0, #0
    be48:	f014 ff9a 	bl	20d80 <DisplayFooter>

	iRet = GL_Dialog_VirtualKeyboard(gGoalGraphicLibInstance, NULL, "Enter Apn :", tcMask, tcApnN, sizeof(tcApnN), GL_TIME_MINUTE);
    be4c:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    be50:	f2c0 0302 	movt	r3, #2
    be54:	681a      	ldr	r2, [r3, #0]
    be56:	f507 7392 	add.w	r3, r7, #292	; 0x124
    be5a:	f107 0130 	add.w	r1, r7, #48	; 0x30
    be5e:	9100      	str	r1, [sp, #0]
    be60:	211f      	movs	r1, #31
    be62:	9101      	str	r1, [sp, #4]
    be64:	f64e 2160 	movw	r1, #60000	; 0xea60
    be68:	9102      	str	r1, [sp, #8]
    be6a:	4610      	mov	r0, r2
    be6c:	2100      	movs	r1, #0
    be6e:	f642 620c 	movw	r2, #11788	; 0x2e0c
    be72:	f2c0 0202 	movt	r2, #2
    be76:	f015 fb9d 	bl	215b4 <GL_Dialog_VirtualKeyboard>
    be7a:	4602      	mov	r2, r0
    be7c:	f107 0308 	add.w	r3, r7, #8
    be80:	601a      	str	r2, [r3, #0]

	if (IsColorDisplay())                                                  // Color terminal?
    be82:	f014 facd 	bl	20420 <IsColorDisplay>
    be86:	4603      	mov	r3, r0
    be88:	2b00      	cmp	r3, #0
    be8a:	d01a      	beq.n	bec2 <PromptGPRS+0x1fe>
	{                                                                      // Yes
		DisplayLeds(_ON_);                                                 // Enable Leds
    be8c:	2001      	movs	r0, #1
    be8e:	f014 ffd5 	bl	20e3c <DisplayLeds>
		DisplayHeader(iHeader);                                            // Enable Header
    be92:	f107 0314 	add.w	r3, r7, #20
    be96:	6818      	ldr	r0, [r3, #0]
    be98:	f014 ffa2 	bl	20de0 <DisplayHeader>
		if(!GL_GraphicLib_IsTouchPresent(gGoalGraphicLibInstance))                           // Check if it is a touch screen
    be9c:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    bea0:	f2c0 0302 	movt	r3, #2
    bea4:	681b      	ldr	r3, [r3, #0]
    bea6:	4618      	mov	r0, r3
    bea8:	f015 fcae 	bl	21808 <GL_GraphicLib_IsTouchPresent>
    beac:	4603      	mov	r3, r0
    beae:	f083 0301 	eor.w	r3, r3, #1
    beb2:	b2db      	uxtb	r3, r3
    beb4:	2b00      	cmp	r3, #0
    beb6:	d004      	beq.n	bec2 <PromptGPRS+0x1fe>
			DisplayFooter(iFooter);                                        // No, restore Footer
    beb8:	f107 0318 	add.w	r3, r7, #24
    bebc:	6818      	ldr	r0, [r3, #0]
    bebe:	f014 ff5f 	bl	20d80 <DisplayFooter>
	}

	CHECK((iRet!=GL_KEY_CANCEL) && (iRet!=GL_RESULT_INACTIVITY), lblEnd);  // Exit on cancel/timeout
    bec2:	f107 0308 	add.w	r3, r7, #8
    bec6:	681a      	ldr	r2, [r3, #0]
    bec8:	f64f 0351 	movw	r3, #63569	; 0xf851
    becc:	429a      	cmp	r2, r3
    bece:	f000 8265 	beq.w	c39c <PromptGPRS+0x6d8>
    bed2:	f107 0308 	add.w	r3, r7, #8
    bed6:	681a      	ldr	r2, [r3, #0]
    bed8:	f64f 0380 	movw	r3, #63616	; 0xf880
    bedc:	429a      	cmp	r2, r3
    bede:	f000 825d 	beq.w	c39c <PromptGPRS+0x6d8>
	if (strcmp(tcApnN, tcApnP) != 0)
    bee2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    bee6:	f107 0350 	add.w	r3, r7, #80	; 0x50
    beea:	4610      	mov	r0, r2
    beec:	4619      	mov	r1, r3
    beee:	f7fc eef6 	blx	8cdc <_init+0x17c>
    bef2:	4603      	mov	r3, r0
    bef4:	2b00      	cmp	r3, #0
    bef6:	d00f      	beq.n	bf18 <PromptGPRS+0x254>
	{
		iRet = appPut(appGprsApn, tcApnN, lenGprsApn);                     // Save new apn
    bef8:	f107 0408 	add.w	r4, r7, #8
    befc:	f107 0330 	add.w	r3, r7, #48	; 0x30
    bf00:	200e      	movs	r0, #14
    bf02:	4619      	mov	r1, r3
    bf04:	221e      	movs	r2, #30
    bf06:	f003 fb71 	bl	f5ec <appPut>
    bf0a:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblDbaErr);
    bf0c:	f107 0308 	add.w	r3, r7, #8
    bf10:	681b      	ldr	r3, [r3, #0]
    bf12:	2b00      	cmp	r3, #0
    bf14:	f2c0 8219 	blt.w	c34a <PromptGPRS+0x686>
	}

	// Enter User Name
	// ***************
	memset(tcMask, 0, sizeof(tcMask));
    bf18:	f507 7392 	add.w	r3, r7, #292	; 0x124
    bf1c:	4618      	mov	r0, r3
    bf1e:	2100      	movs	r1, #0
    bf20:	f44f 7280 	mov.w	r2, #256	; 0x100
    bf24:	f7fc ee4a 	blx	8bbc <_init+0x5c>
	for (i=0; i<lenGprsUser; i++)
    bf28:	1d3b      	adds	r3, r7, #4
    bf2a:	2200      	movs	r2, #0
    bf2c:	601a      	str	r2, [r3, #0]
    bf2e:	e015      	b.n	bf5c <PromptGPRS+0x298>
		strcat(tcMask, "/c");                                              // Accept any character
    bf30:	f507 7392 	add.w	r3, r7, #292	; 0x124
    bf34:	4618      	mov	r0, r3
    bf36:	f7fc eea6 	blx	8c84 <_init+0x124>
    bf3a:	4603      	mov	r3, r0
    bf3c:	f507 7292 	add.w	r2, r7, #292	; 0x124
    bf40:	18d2      	adds	r2, r2, r3
    bf42:	f642 6308 	movw	r3, #11784	; 0x2e08
    bf46:	f2c0 0302 	movt	r3, #2
    bf4a:	8819      	ldrh	r1, [r3, #0]
    bf4c:	789b      	ldrb	r3, [r3, #2]
    bf4e:	8011      	strh	r1, [r2, #0]
    bf50:	7093      	strb	r3, [r2, #2]
	}

	// Enter User Name
	// ***************
	memset(tcMask, 0, sizeof(tcMask));
	for (i=0; i<lenGprsUser; i++)
    bf52:	1d3b      	adds	r3, r7, #4
    bf54:	1d3a      	adds	r2, r7, #4
    bf56:	6812      	ldr	r2, [r2, #0]
    bf58:	3201      	adds	r2, #1
    bf5a:	601a      	str	r2, [r3, #0]
    bf5c:	1d3b      	adds	r3, r7, #4
    bf5e:	681b      	ldr	r3, [r3, #0]
    bf60:	2b1d      	cmp	r3, #29
    bf62:	dde5      	ble.n	bf30 <PromptGPRS+0x26c>
		strcat(tcMask, "/c");                                              // Accept any character
	iRet = appGet(appGprsUser, tcUserP, lenGprsUser+1);
    bf64:	f107 0408 	add.w	r4, r7, #8
    bf68:	f107 0390 	add.w	r3, r7, #144	; 0x90
    bf6c:	200f      	movs	r0, #15
    bf6e:	4619      	mov	r1, r3
    bf70:	221f      	movs	r2, #31
    bf72:	f003 fba3 	bl	f6bc <appGet>
    bf76:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    bf78:	f107 0308 	add.w	r3, r7, #8
    bf7c:	681b      	ldr	r3, [r3, #0]
    bf7e:	2b00      	cmp	r3, #0
    bf80:	f2c0 81e3 	blt.w	c34a <PromptGPRS+0x686>
	strcpy(tcUserN, tcUserP);
    bf84:	f107 0270 	add.w	r2, r7, #112	; 0x70
    bf88:	f107 0390 	add.w	r3, r7, #144	; 0x90
    bf8c:	4610      	mov	r0, r2
    bf8e:	4619      	mov	r1, r3
    bf90:	f7fc ee46 	blx	8c20 <_init+0xc0>
	iRet = GL_Dialog_Text(gGoalGraphicLibInstance, "User Name", "Enter User Name :", tcMask, tcUserN, sizeof(tcUserN), GL_TIME_MINUTE);
    bf94:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    bf98:	f2c0 0302 	movt	r3, #2
    bf9c:	681a      	ldr	r2, [r3, #0]
    bf9e:	f507 7392 	add.w	r3, r7, #292	; 0x124
    bfa2:	f107 0170 	add.w	r1, r7, #112	; 0x70
    bfa6:	9100      	str	r1, [sp, #0]
    bfa8:	211f      	movs	r1, #31
    bfaa:	9101      	str	r1, [sp, #4]
    bfac:	f64e 2160 	movw	r1, #60000	; 0xea60
    bfb0:	9102      	str	r1, [sp, #8]
    bfb2:	4610      	mov	r0, r2
    bfb4:	f642 6118 	movw	r1, #11800	; 0x2e18
    bfb8:	f2c0 0102 	movt	r1, #2
    bfbc:	f642 6224 	movw	r2, #11812	; 0x2e24
    bfc0:	f2c0 0202 	movt	r2, #2
    bfc4:	f015 fae4 	bl	21590 <GL_Dialog_Text>
    bfc8:	4602      	mov	r2, r0
    bfca:	f107 0308 	add.w	r3, r7, #8
    bfce:	601a      	str	r2, [r3, #0]
	CHECK((iRet!=GL_KEY_CANCEL) && (iRet!=GL_RESULT_INACTIVITY), lblEnd);  // Exit on cancel/timeout
    bfd0:	f107 0308 	add.w	r3, r7, #8
    bfd4:	681a      	ldr	r2, [r3, #0]
    bfd6:	f64f 0351 	movw	r3, #63569	; 0xf851
    bfda:	429a      	cmp	r2, r3
    bfdc:	f000 81de 	beq.w	c39c <PromptGPRS+0x6d8>
    bfe0:	f107 0308 	add.w	r3, r7, #8
    bfe4:	681a      	ldr	r2, [r3, #0]
    bfe6:	f64f 0380 	movw	r3, #63616	; 0xf880
    bfea:	429a      	cmp	r2, r3
    bfec:	f000 81d6 	beq.w	c39c <PromptGPRS+0x6d8>
	if (strcmp(tcUserN, tcUserP) != 0)
    bff0:	f107 0270 	add.w	r2, r7, #112	; 0x70
    bff4:	f107 0390 	add.w	r3, r7, #144	; 0x90
    bff8:	4610      	mov	r0, r2
    bffa:	4619      	mov	r1, r3
    bffc:	f7fc ee6e 	blx	8cdc <_init+0x17c>
    c000:	4603      	mov	r3, r0
    c002:	2b00      	cmp	r3, #0
    c004:	d00f      	beq.n	c026 <PromptGPRS+0x362>
	{
		iRet = appPut(appGprsUser, tcUserN, lenGprsUser);                  // Save new user name
    c006:	f107 0408 	add.w	r4, r7, #8
    c00a:	f107 0370 	add.w	r3, r7, #112	; 0x70
    c00e:	200f      	movs	r0, #15
    c010:	4619      	mov	r1, r3
    c012:	221e      	movs	r2, #30
    c014:	f003 faea 	bl	f5ec <appPut>
    c018:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblDbaErr);
    c01a:	f107 0308 	add.w	r3, r7, #8
    c01e:	681b      	ldr	r3, [r3, #0]
    c020:	2b00      	cmp	r3, #0
    c022:	f2c0 8192 	blt.w	c34a <PromptGPRS+0x686>
	}

	// Enter Password
	// **************
	memset(tcMask, 0, sizeof(tcMask));
    c026:	f507 7392 	add.w	r3, r7, #292	; 0x124
    c02a:	4618      	mov	r0, r3
    c02c:	2100      	movs	r1, #0
    c02e:	f44f 7280 	mov.w	r2, #256	; 0x100
    c032:	f7fc edc4 	blx	8bbc <_init+0x5c>
	for (i=0; i<lenGprsPass; i++)
    c036:	1d3b      	adds	r3, r7, #4
    c038:	2200      	movs	r2, #0
    c03a:	601a      	str	r2, [r3, #0]
    c03c:	e015      	b.n	c06a <PromptGPRS+0x3a6>
		strcat(tcMask, "/c");                                              // Accept any character
    c03e:	f507 7392 	add.w	r3, r7, #292	; 0x124
    c042:	4618      	mov	r0, r3
    c044:	f7fc ee1e 	blx	8c84 <_init+0x124>
    c048:	4603      	mov	r3, r0
    c04a:	f507 7292 	add.w	r2, r7, #292	; 0x124
    c04e:	18d2      	adds	r2, r2, r3
    c050:	f642 6308 	movw	r3, #11784	; 0x2e08
    c054:	f2c0 0302 	movt	r3, #2
    c058:	8819      	ldrh	r1, [r3, #0]
    c05a:	789b      	ldrb	r3, [r3, #2]
    c05c:	8011      	strh	r1, [r2, #0]
    c05e:	7093      	strb	r3, [r2, #2]
	}

	// Enter Password
	// **************
	memset(tcMask, 0, sizeof(tcMask));
	for (i=0; i<lenGprsPass; i++)
    c060:	1d3b      	adds	r3, r7, #4
    c062:	1d3a      	adds	r2, r7, #4
    c064:	6812      	ldr	r2, [r2, #0]
    c066:	3201      	adds	r2, #1
    c068:	601a      	str	r2, [r3, #0]
    c06a:	1d3b      	adds	r3, r7, #4
    c06c:	681b      	ldr	r3, [r3, #0]
    c06e:	2b1d      	cmp	r3, #29
    c070:	dde5      	ble.n	c03e <PromptGPRS+0x37a>
		strcat(tcMask, "/c");                                              // Accept any character
	iRet = appGet(appGprsPass, tcPassP, lenGprsPass+1);
    c072:	f107 0408 	add.w	r4, r7, #8
    c076:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
    c07a:	2010      	movs	r0, #16
    c07c:	4619      	mov	r1, r3
    c07e:	221f      	movs	r2, #31
    c080:	f003 fb1c 	bl	f6bc <appGet>
    c084:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    c086:	f107 0308 	add.w	r3, r7, #8
    c08a:	681b      	ldr	r3, [r3, #0]
    c08c:	2b00      	cmp	r3, #0
    c08e:	f2c0 815c 	blt.w	c34a <PromptGPRS+0x686>
	strcpy(tcPassN, tcPassP);
    c092:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
    c096:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
    c09a:	4610      	mov	r0, r2
    c09c:	4619      	mov	r1, r3
    c09e:	f7fc edc0 	blx	8c20 <_init+0xc0>
	iRet = GL_Dialog_Password(gGoalGraphicLibInstance, "Password", "Enter Password :", tcMask, tcPassN, sizeof(tcPassN), GL_TIME_MINUTE);
    c0a2:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    c0a6:	f2c0 0302 	movt	r3, #2
    c0aa:	681a      	ldr	r2, [r3, #0]
    c0ac:	f507 7392 	add.w	r3, r7, #292	; 0x124
    c0b0:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
    c0b4:	9100      	str	r1, [sp, #0]
    c0b6:	211f      	movs	r1, #31
    c0b8:	9101      	str	r1, [sp, #4]
    c0ba:	f64e 2160 	movw	r1, #60000	; 0xea60
    c0be:	9102      	str	r1, [sp, #8]
    c0c0:	4610      	mov	r0, r2
    c0c2:	f642 6138 	movw	r1, #11832	; 0x2e38
    c0c6:	f2c0 0102 	movt	r1, #2
    c0ca:	f642 6244 	movw	r2, #11844	; 0x2e44
    c0ce:	f2c0 0202 	movt	r2, #2
    c0d2:	f015 fa39 	bl	21548 <GL_Dialog_Password>
    c0d6:	4602      	mov	r2, r0
    c0d8:	f107 0308 	add.w	r3, r7, #8
    c0dc:	601a      	str	r2, [r3, #0]
	CHECK((iRet!=GL_KEY_CANCEL) && (iRet!=GL_RESULT_INACTIVITY), lblEnd);  // Exit on cancel/timeout
    c0de:	f107 0308 	add.w	r3, r7, #8
    c0e2:	681a      	ldr	r2, [r3, #0]
    c0e4:	f64f 0351 	movw	r3, #63569	; 0xf851
    c0e8:	429a      	cmp	r2, r3
    c0ea:	f000 8157 	beq.w	c39c <PromptGPRS+0x6d8>
    c0ee:	f107 0308 	add.w	r3, r7, #8
    c0f2:	681a      	ldr	r2, [r3, #0]
    c0f4:	f64f 0380 	movw	r3, #63616	; 0xf880
    c0f8:	429a      	cmp	r2, r3
    c0fa:	f000 814f 	beq.w	c39c <PromptGPRS+0x6d8>
	if (strcmp(tcPassN, tcPassP) != 0)
    c0fe:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
    c102:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
    c106:	4610      	mov	r0, r2
    c108:	4619      	mov	r1, r3
    c10a:	f7fc ede8 	blx	8cdc <_init+0x17c>
    c10e:	4603      	mov	r3, r0
    c110:	2b00      	cmp	r3, #0
    c112:	d00f      	beq.n	c134 <PromptGPRS+0x470>
	{
		iRet = appPut(appGprsPass, tcPassN, lenGprsPass);                  // Save new password
    c114:	f107 0408 	add.w	r4, r7, #8
    c118:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
    c11c:	2010      	movs	r0, #16
    c11e:	4619      	mov	r1, r3
    c120:	221e      	movs	r2, #30
    c122:	f003 fa63 	bl	f5ec <appPut>
    c126:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblDbaErr);
    c128:	f107 0308 	add.w	r3, r7, #8
    c12c:	681b      	ldr	r3, [r3, #0]
    c12e:	2b00      	cmp	r3, #0
    c130:	f2c0 810b 	blt.w	c34a <PromptGPRS+0x686>
	}

	// Enter Remote IP address
	// ***********************
	iRet = appGet(appGprsIpRemote, tcIpAddressP, lenGprsIpRemote+1);
    c134:	f107 0408 	add.w	r4, r7, #8
    c138:	f507 6385 	add.w	r3, r7, #1064	; 0x428
    c13c:	2011      	movs	r0, #17
    c13e:	4619      	mov	r1, r3
    c140:	f240 2201 	movw	r2, #513	; 0x201
    c144:	f003 faba 	bl	f6bc <appGet>
    c148:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    c14a:	f107 0308 	add.w	r3, r7, #8
    c14e:	681b      	ldr	r3, [r3, #0]
    c150:	2b00      	cmp	r3, #0
    c152:	f2c0 80fa 	blt.w	c34a <PromptGPRS+0x686>
	//	CHECK(uiIp>=0, lblKO);
	//	iRet = GL_Dialog_Ip(gGoalGraphicLibInstance, "Remote Ip Address", "Enter Ip Address :", (T_GL_HIP)&uiIp, GL_TIME_MINUTE);
	//	CHECK((iRet!=GL_KEY_CANCEL) && (iRet!=GL_RESULT_INACTIVITY), lblEnd);  // Exit on cancel/timeout
	//	strcpy(tcIpAddressN, UintToIp(uiIp));

	memset(tcMask, 0, sizeof(tcMask));
    c156:	f507 7392 	add.w	r3, r7, #292	; 0x124
    c15a:	4618      	mov	r0, r3
    c15c:	2100      	movs	r1, #0
    c15e:	f44f 7280 	mov.w	r2, #256	; 0x100
    c162:	f7fc ed2c 	blx	8bbc <_init+0x5c>
	for (i=0; i<100; i++)
    c166:	1d3b      	adds	r3, r7, #4
    c168:	2200      	movs	r2, #0
    c16a:	601a      	str	r2, [r3, #0]
    c16c:	e015      	b.n	c19a <PromptGPRS+0x4d6>
		strcat(tcMask, "/c");
    c16e:	f507 7392 	add.w	r3, r7, #292	; 0x124
    c172:	4618      	mov	r0, r3
    c174:	f7fc ed86 	blx	8c84 <_init+0x124>
    c178:	4603      	mov	r3, r0
    c17a:	f507 7292 	add.w	r2, r7, #292	; 0x124
    c17e:	18d2      	adds	r2, r2, r3
    c180:	f642 6308 	movw	r3, #11784	; 0x2e08
    c184:	f2c0 0302 	movt	r3, #2
    c188:	8819      	ldrh	r1, [r3, #0]
    c18a:	789b      	ldrb	r3, [r3, #2]
    c18c:	8011      	strh	r1, [r2, #0]
    c18e:	7093      	strb	r3, [r2, #2]
	//	iRet = GL_Dialog_Ip(gGoalGraphicLibInstance, "Remote Ip Address", "Enter Ip Address :", (T_GL_HIP)&uiIp, GL_TIME_MINUTE);
	//	CHECK((iRet!=GL_KEY_CANCEL) && (iRet!=GL_RESULT_INACTIVITY), lblEnd);  // Exit on cancel/timeout
	//	strcpy(tcIpAddressN, UintToIp(uiIp));

	memset(tcMask, 0, sizeof(tcMask));
	for (i=0; i<100; i++)
    c190:	1d3b      	adds	r3, r7, #4
    c192:	1d3a      	adds	r2, r7, #4
    c194:	6812      	ldr	r2, [r2, #0]
    c196:	3201      	adds	r2, #1
    c198:	601a      	str	r2, [r3, #0]
    c19a:	1d3b      	adds	r3, r7, #4
    c19c:	681b      	ldr	r3, [r3, #0]
    c19e:	2b63      	cmp	r3, #99	; 0x63
    c1a0:	dde5      	ble.n	c16e <PromptGPRS+0x4aa>
		strcat(tcMask, "/c");

	iRet = GL_Dialog_Text(gGoalGraphicLibInstance, "Remote Address", "Enter Ip/domain Address :", tcMask, tcIpAddressN, sizeof(tcIpAddressN),  GL_TIME_MINUTE);
    c1a2:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    c1a6:	f2c0 0302 	movt	r3, #2
    c1aa:	681a      	ldr	r2, [r3, #0]
    c1ac:	f507 7392 	add.w	r3, r7, #292	; 0x124
    c1b0:	f507 7109 	add.w	r1, r7, #548	; 0x224
    c1b4:	9100      	str	r1, [sp, #0]
    c1b6:	f240 2101 	movw	r1, #513	; 0x201
    c1ba:	9101      	str	r1, [sp, #4]
    c1bc:	f64e 2160 	movw	r1, #60000	; 0xea60
    c1c0:	9102      	str	r1, [sp, #8]
    c1c2:	4610      	mov	r0, r2
    c1c4:	f642 6158 	movw	r1, #11864	; 0x2e58
    c1c8:	f2c0 0102 	movt	r1, #2
    c1cc:	f642 6268 	movw	r2, #11880	; 0x2e68
    c1d0:	f2c0 0202 	movt	r2, #2
    c1d4:	f015 f9dc 	bl	21590 <GL_Dialog_Text>
    c1d8:	4602      	mov	r2, r0
    c1da:	f107 0308 	add.w	r3, r7, #8
    c1de:	601a      	str	r2, [r3, #0]
	CHECK((iRet!=GL_KEY_CANCEL) && (iRet!=GL_RESULT_INACTIVITY), lblEnd);  // Exit on cancel/timeout
    c1e0:	f107 0308 	add.w	r3, r7, #8
    c1e4:	681a      	ldr	r2, [r3, #0]
    c1e6:	f64f 0351 	movw	r3, #63569	; 0xf851
    c1ea:	429a      	cmp	r2, r3
    c1ec:	f000 80d6 	beq.w	c39c <PromptGPRS+0x6d8>
    c1f0:	f107 0308 	add.w	r3, r7, #8
    c1f4:	681a      	ldr	r2, [r3, #0]
    c1f6:	f64f 0380 	movw	r3, #63616	; 0xf880
    c1fa:	429a      	cmp	r2, r3
    c1fc:	f000 80ce 	beq.w	c39c <PromptGPRS+0x6d8>

	if (strcmp(tcIpAddressN, tcIpAddressP) != 0) {
    c200:	f507 7209 	add.w	r2, r7, #548	; 0x224
    c204:	f507 6385 	add.w	r3, r7, #1064	; 0x428
    c208:	4610      	mov	r0, r2
    c20a:	4619      	mov	r1, r3
    c20c:	f7fc ed66 	blx	8cdc <_init+0x17c>
    c210:	4603      	mov	r3, r0
    c212:	2b00      	cmp	r3, #0
    c214:	d016      	beq.n	c244 <PromptGPRS+0x580>
		iRet = appPut(appGprsIpRemote, tcIpAddressN, strlen(tcIpAddressN));     // Save new Ip address
    c216:	f507 7309 	add.w	r3, r7, #548	; 0x224
    c21a:	4618      	mov	r0, r3
    c21c:	f7fc ed32 	blx	8c84 <_init+0x124>
    c220:	4603      	mov	r3, r0
    c222:	b29b      	uxth	r3, r3
    c224:	f107 0408 	add.w	r4, r7, #8
    c228:	f507 7209 	add.w	r2, r7, #548	; 0x224
    c22c:	2011      	movs	r0, #17
    c22e:	4611      	mov	r1, r2
    c230:	461a      	mov	r2, r3
    c232:	f003 f9db 	bl	f5ec <appPut>
    c236:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblDbaErr);
    c238:	f107 0308 	add.w	r3, r7, #8
    c23c:	681b      	ldr	r3, [r3, #0]
    c23e:	2b00      	cmp	r3, #0
    c240:	f2c0 8083 	blt.w	c34a <PromptGPRS+0x686>
	}

	// Enter Port number
	// *****************
	memset(tcMask, 0, sizeof(tcMask));
    c244:	f507 7392 	add.w	r3, r7, #292	; 0x124
    c248:	4618      	mov	r0, r3
    c24a:	2100      	movs	r1, #0
    c24c:	f44f 7280 	mov.w	r2, #256	; 0x100
    c250:	f7fc ecb4 	blx	8bbc <_init+0x5c>
	for (i=0; i<lenGprsPort; i++)
    c254:	1d3b      	adds	r3, r7, #4
    c256:	2200      	movs	r2, #0
    c258:	601a      	str	r2, [r3, #0]
    c25a:	e015      	b.n	c288 <PromptGPRS+0x5c4>
		strcat(tcMask, "/d");                                              // Accept only decimal character
    c25c:	f507 7392 	add.w	r3, r7, #292	; 0x124
    c260:	4618      	mov	r0, r3
    c262:	f7fc ed10 	blx	8c84 <_init+0x124>
    c266:	4603      	mov	r3, r0
    c268:	f507 7292 	add.w	r2, r7, #292	; 0x124
    c26c:	18d2      	adds	r2, r2, r3
    c26e:	f642 43d4 	movw	r3, #11476	; 0x2cd4
    c272:	f2c0 0302 	movt	r3, #2
    c276:	8819      	ldrh	r1, [r3, #0]
    c278:	789b      	ldrb	r3, [r3, #2]
    c27a:	8011      	strh	r1, [r2, #0]
    c27c:	7093      	strb	r3, [r2, #2]
	}

	// Enter Port number
	// *****************
	memset(tcMask, 0, sizeof(tcMask));
	for (i=0; i<lenGprsPort; i++)
    c27e:	1d3b      	adds	r3, r7, #4
    c280:	1d3a      	adds	r2, r7, #4
    c282:	6812      	ldr	r2, [r2, #0]
    c284:	3201      	adds	r2, #1
    c286:	601a      	str	r2, [r3, #0]
    c288:	1d3b      	adds	r3, r7, #4
    c28a:	681b      	ldr	r3, [r3, #0]
    c28c:	2b04      	cmp	r3, #4
    c28e:	dde5      	ble.n	c25c <PromptGPRS+0x598>
		strcat(tcMask, "/d");                                              // Accept only decimal character
	iRet = appGet(appGprsPort, tcPortP, lenGprsPort+1);
    c290:	f107 0408 	add.w	r4, r7, #8
    c294:	f107 0328 	add.w	r3, r7, #40	; 0x28
    c298:	2012      	movs	r0, #18
    c29a:	4619      	mov	r1, r3
    c29c:	2206      	movs	r2, #6
    c29e:	f003 fa0d 	bl	f6bc <appGet>
    c2a2:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    c2a4:	f107 0308 	add.w	r3, r7, #8
    c2a8:	681b      	ldr	r3, [r3, #0]
    c2aa:	2b00      	cmp	r3, #0
    c2ac:	db4d      	blt.n	c34a <PromptGPRS+0x686>
	strcpy(tcPortN, tcPortP);
    c2ae:	f107 0220 	add.w	r2, r7, #32
    c2b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
    c2b6:	4610      	mov	r0, r2
    c2b8:	4619      	mov	r1, r3
    c2ba:	f7fc ecb2 	blx	8c20 <_init+0xc0>
	iRet = GL_Dialog_Text(gGoalGraphicLibInstance, "Port Number", "Enter Port# :", tcMask, tcPortN, sizeof(tcPortN), GL_TIME_MINUTE);
    c2be:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    c2c2:	f2c0 0302 	movt	r3, #2
    c2c6:	681a      	ldr	r2, [r3, #0]
    c2c8:	f507 7392 	add.w	r3, r7, #292	; 0x124
    c2cc:	f107 0120 	add.w	r1, r7, #32
    c2d0:	9100      	str	r1, [sp, #0]
    c2d2:	2106      	movs	r1, #6
    c2d4:	9101      	str	r1, [sp, #4]
    c2d6:	f64e 2160 	movw	r1, #60000	; 0xea60
    c2da:	9102      	str	r1, [sp, #8]
    c2dc:	4610      	mov	r0, r2
    c2de:	f642 6184 	movw	r1, #11908	; 0x2e84
    c2e2:	f2c0 0102 	movt	r1, #2
    c2e6:	f642 6290 	movw	r2, #11920	; 0x2e90
    c2ea:	f2c0 0202 	movt	r2, #2
    c2ee:	f015 f94f 	bl	21590 <GL_Dialog_Text>
    c2f2:	4602      	mov	r2, r0
    c2f4:	f107 0308 	add.w	r3, r7, #8
    c2f8:	601a      	str	r2, [r3, #0]
	CHECK((iRet!=GL_KEY_CANCEL) && (iRet!=GL_RESULT_INACTIVITY), lblEnd);  // Exit on cancel/timeout
    c2fa:	f107 0308 	add.w	r3, r7, #8
    c2fe:	681a      	ldr	r2, [r3, #0]
    c300:	f64f 0351 	movw	r3, #63569	; 0xf851
    c304:	429a      	cmp	r2, r3
    c306:	d049      	beq.n	c39c <PromptGPRS+0x6d8>
    c308:	f107 0308 	add.w	r3, r7, #8
    c30c:	681a      	ldr	r2, [r3, #0]
    c30e:	f64f 0380 	movw	r3, #63616	; 0xf880
    c312:	429a      	cmp	r2, r3
    c314:	d042      	beq.n	c39c <PromptGPRS+0x6d8>
	if (strcmp(tcPortN, tcPortP) != 0)
    c316:	f107 0220 	add.w	r2, r7, #32
    c31a:	f107 0328 	add.w	r3, r7, #40	; 0x28
    c31e:	4610      	mov	r0, r2
    c320:	4619      	mov	r1, r3
    c322:	f7fc ecdc 	blx	8cdc <_init+0x17c>
    c326:	4603      	mov	r3, r0
    c328:	2b00      	cmp	r3, #0
    c32a:	d036      	beq.n	c39a <PromptGPRS+0x6d6>
	{
		iRet = appPut(appGprsPort, tcPortN, lenGprsPort);                  // Save new Port number
    c32c:	f107 0408 	add.w	r4, r7, #8
    c330:	f107 0320 	add.w	r3, r7, #32
    c334:	2012      	movs	r0, #18
    c336:	4619      	mov	r1, r3
    c338:	2205      	movs	r2, #5
    c33a:	f003 f957 	bl	f5ec <appPut>
    c33e:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblDbaErr);
    c340:	f107 0308 	add.w	r3, r7, #8
    c344:	681b      	ldr	r3, [r3, #0]
    c346:	2b00      	cmp	r3, #0
    c348:	da27      	bge.n	c39a <PromptGPRS+0x6d6>
	// ****************
//	lblKO:                                                                     // None-classified low level error
//	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Processing Error", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
//	goto lblEnd;
	lblDbaErr:                                                                 // Data base error
	Telium_Sprintf(tcDisplay, "%s\n%s", FMG_ErrorMsg(iRet), "Software Reset Needed");
    c34a:	f107 0308 	add.w	r3, r7, #8
    c34e:	6818      	ldr	r0, [r3, #0]
    c350:	f003 ff4e 	bl	101f0 <FMG_ErrorMsg>
    c354:	4603      	mov	r3, r0
    c356:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
    c35a:	4610      	mov	r0, r2
    c35c:	f642 61a0 	movw	r1, #11936	; 0x2ea0
    c360:	f2c0 0102 	movt	r1, #2
    c364:	461a      	mov	r2, r3
    c366:	f642 63a8 	movw	r3, #11944	; 0x2ea8
    c36a:	f2c0 0302 	movt	r3, #2
    c36e:	f014 f9a5 	bl	206bc <Telium_Sprintf>
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, tcDisplay, GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
    c372:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    c376:	f2c0 0302 	movt	r3, #2
    c37a:	681a      	ldr	r2, [r3, #0]
    c37c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
    c380:	2101      	movs	r1, #1
    c382:	9100      	str	r1, [sp, #0]
    c384:	f241 3188 	movw	r1, #5000	; 0x1388
    c388:	9101      	str	r1, [sp, #4]
    c38a:	4610      	mov	r0, r2
    c38c:	2100      	movs	r1, #0
    c38e:	461a      	mov	r2, r3
    c390:	2304      	movs	r3, #4
    c392:	f015 f8c7 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
    c396:	bf00      	nop
    c398:	e000      	b.n	c39c <PromptGPRS+0x6d8>
	{
		iRet = appPut(appGprsPort, tcPortN, lenGprsPort);                  // Save new Port number
		CHECK(iRet>=0, lblDbaErr);
	}

	goto lblEnd;
    c39a:	bf00      	nop
	Telium_Sprintf(tcDisplay, "%s\n%s", FMG_ErrorMsg(iRet), "Software Reset Needed");
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, tcDisplay, GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
	goto lblEnd;
	lblEnd:
	return;
}
    c39c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    c3a0:	f2c0 0302 	movt	r3, #2
    c3a4:	f8d7 262c 	ldr.w	r2, [r7, #1580]	; 0x62c
    c3a8:	681b      	ldr	r3, [r3, #0]
    c3aa:	429a      	cmp	r2, r3
    c3ac:	d001      	beq.n	c3b2 <PromptGPRS+0x6ee>
    c3ae:	f7fc fdf9 	bl	8fa4 <__stack_chk_fail>
    c3b2:	f507 770d 	add.w	r7, r7, #564	; 0x234
    c3b6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    c3ba:	46bd      	mov	sp, r7
    c3bc:	bd90      	pop	{r4, r7, pc}
    c3be:	bf00      	nop

0000c3c0 <ComGPRS>:
//  This function has no parameters.
//  This function has no return value
//****************************************************************************

void ComGPRS(void)
{
    c3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c3c2:	f2ad 7d74 	subw	sp, sp, #1908	; 0x774
    c3c6:	af04      	add	r7, sp, #16
    c3c8:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    c3cc:	f2c0 0302 	movt	r3, #2
    c3d0:	681b      	ldr	r3, [r3, #0]
    c3d2:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
	// Local variables
	// ***************
	T_GL_HWIDGET hScreen=NULL;    // Screen handle
    c3d6:	f107 0308 	add.w	r3, r7, #8
    c3da:	2200      	movs	r2, #0
    c3dc:	601a      	str	r2, [r3, #0]
	T_GL_HWIDGET hDocument=NULL;  // Document handle
    c3de:	f107 030c 	add.w	r3, r7, #12
    c3e2:	2200      	movs	r2, #0
    c3e4:	601a      	str	r2, [r3, #0]
	ST_PRN_LINE xLine;
	LL_HANDLE hGPRS=NULL;
    c3e6:	f107 0314 	add.w	r3, r7, #20
    c3ea:	2200      	movs	r2, #0
    c3ec:	601a      	str	r2, [r3, #0]
	char tcPort[lenGprsPort+1];
	char tcSnd[MAX_SND+1];
	char tcRsp[MAX_RSP+1];
	char tcDisplay[50+1];
	byte p;
	int iRet=0, iStatus=0;
    c3ee:	f107 0318 	add.w	r3, r7, #24
    c3f2:	2200      	movs	r2, #0
    c3f4:	601a      	str	r2, [r3, #0]
    c3f6:	f107 0310 	add.w	r3, r7, #16
    c3fa:	2200      	movs	r2, #0
    c3fc:	601a      	str	r2, [r3, #0]

	hScreen = GoalCreateScreen(gGoalGraphicLibInstance, txGPRS, NUMBER_OF_LINES(txGPRS), GL_ENCODING_UTF8);
    c3fe:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    c402:	f2c0 0302 	movt	r3, #2
    c406:	681b      	ldr	r3, [r3, #0]
    c408:	4618      	mov	r0, r3
    c40a:	f642 0138 	movw	r1, #10296	; 0x2838
    c40e:	f2c0 0102 	movt	r1, #2
    c412:	2205      	movs	r2, #5
    c414:	2300      	movs	r3, #0
    c416:	f000 fe35 	bl	d084 <GoalCreateScreen>
    c41a:	4602      	mov	r2, r0
    c41c:	f107 0308 	add.w	r3, r7, #8
    c420:	601a      	str	r2, [r3, #0]
	CHECK(hScreen!=NULL, lblKO);                                    // Create screen and clear it
    c422:	f107 0308 	add.w	r3, r7, #8
    c426:	681b      	ldr	r3, [r3, #0]
    c428:	2b00      	cmp	r3, #0
    c42a:	f000 8473 	beq.w	cd14 <ComGPRS+0x954>
	iRet = GoalClrScreen(hScreen, GL_COLOR_BLACK, KEY_CANCEL, false);
    c42e:	f107 0308 	add.w	r3, r7, #8
    c432:	681b      	ldr	r3, [r3, #0]
    c434:	f107 0418 	add.w	r4, r7, #24
    c438:	4618      	mov	r0, r3
    c43a:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    c43e:	2202      	movs	r2, #2
    c440:	2300      	movs	r3, #0
    c442:	f000 ffbd 	bl	d3c0 <GoalClrScreen>
    c446:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c448:	f107 0318 	add.w	r3, r7, #24
    c44c:	681b      	ldr	r3, [r3, #0]
    c44e:	2b00      	cmp	r3, #0
    c450:	f2c0 8460 	blt.w	cd14 <ComGPRS+0x954>

	// Attachment to the GPRS network in progress
	// ******************************************
	iRet = GoalDspLine(hScreen, 0, "1-comStart...", &txGPRS[0], 0, true);
    c454:	f107 0308 	add.w	r3, r7, #8
    c458:	681b      	ldr	r3, [r3, #0]
    c45a:	f107 0418 	add.w	r4, r7, #24
    c45e:	2200      	movs	r2, #0
    c460:	9200      	str	r2, [sp, #0]
    c462:	2201      	movs	r2, #1
    c464:	9201      	str	r2, [sp, #4]
    c466:	4618      	mov	r0, r3
    c468:	2100      	movs	r1, #0
    c46a:	f642 42f0 	movw	r2, #11504	; 0x2cf0
    c46e:	f2c0 0202 	movt	r2, #2
    c472:	f642 0338 	movw	r3, #10296	; 0x2838
    c476:	f2c0 0302 	movt	r3, #2
    c47a:	f001 f8bb 	bl	d5f4 <GoalDspLine>
    c47e:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c480:	f107 0318 	add.w	r3, r7, #24
    c484:	681b      	ldr	r3, [r3, #0]
    c486:	2b00      	cmp	r3, #0
    c488:	f2c0 8444 	blt.w	cd14 <ComGPRS+0x954>
	pcStr = tcStr;                                                  // Build param string
    c48c:	f107 031c 	add.w	r3, r7, #28
    c490:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
    c494:	601a      	str	r2, [r3, #0]
	iRet = appGet(appGprsApn, pcStr, lenGprsApn+1);                 // Retrieve apn
    c496:	f107 0418 	add.w	r4, r7, #24
    c49a:	f107 031c 	add.w	r3, r7, #28
    c49e:	200e      	movs	r0, #14
    c4a0:	6819      	ldr	r1, [r3, #0]
    c4a2:	221f      	movs	r2, #31
    c4a4:	f003 f90a 	bl	f6bc <appGet>
    c4a8:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    c4aa:	f107 0318 	add.w	r3, r7, #24
    c4ae:	681b      	ldr	r3, [r3, #0]
    c4b0:	2b00      	cmp	r3, #0
    c4b2:	f2c0 84c1 	blt.w	ce38 <ComGPRS+0xa78>
	pcStr += strlen(pcStr);
    c4b6:	f107 031c 	add.w	r3, r7, #28
    c4ba:	6818      	ldr	r0, [r3, #0]
    c4bc:	f7fc ebe2 	blx	8c84 <_init+0x124>
    c4c0:	4602      	mov	r2, r0
    c4c2:	f107 031c 	add.w	r3, r7, #28
    c4c6:	f107 011c 	add.w	r1, r7, #28
    c4ca:	6809      	ldr	r1, [r1, #0]
    c4cc:	188a      	adds	r2, r1, r2
    c4ce:	601a      	str	r2, [r3, #0]
	*pcStr = '|'; pcStr++;
    c4d0:	f107 031c 	add.w	r3, r7, #28
    c4d4:	681b      	ldr	r3, [r3, #0]
    c4d6:	227c      	movs	r2, #124	; 0x7c
    c4d8:	701a      	strb	r2, [r3, #0]
    c4da:	f107 031c 	add.w	r3, r7, #28
    c4de:	f107 021c 	add.w	r2, r7, #28
    c4e2:	6812      	ldr	r2, [r2, #0]
    c4e4:	3201      	adds	r2, #1
    c4e6:	601a      	str	r2, [r3, #0]
	iRet = appGet(appGprsUser, pcStr, lenGprsUser+1);               // Retrieve username
    c4e8:	f107 0418 	add.w	r4, r7, #24
    c4ec:	f107 031c 	add.w	r3, r7, #28
    c4f0:	200f      	movs	r0, #15
    c4f2:	6819      	ldr	r1, [r3, #0]
    c4f4:	221f      	movs	r2, #31
    c4f6:	f003 f8e1 	bl	f6bc <appGet>
    c4fa:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    c4fc:	f107 0318 	add.w	r3, r7, #24
    c500:	681b      	ldr	r3, [r3, #0]
    c502:	2b00      	cmp	r3, #0
    c504:	f2c0 8498 	blt.w	ce38 <ComGPRS+0xa78>
	pcStr += strlen(pcStr);
    c508:	f107 031c 	add.w	r3, r7, #28
    c50c:	6818      	ldr	r0, [r3, #0]
    c50e:	f7fc ebba 	blx	8c84 <_init+0x124>
    c512:	4602      	mov	r2, r0
    c514:	f107 031c 	add.w	r3, r7, #28
    c518:	f107 011c 	add.w	r1, r7, #28
    c51c:	6809      	ldr	r1, [r1, #0]
    c51e:	188a      	adds	r2, r1, r2
    c520:	601a      	str	r2, [r3, #0]
	*pcStr = '|'; pcStr++;
    c522:	f107 031c 	add.w	r3, r7, #28
    c526:	681b      	ldr	r3, [r3, #0]
    c528:	227c      	movs	r2, #124	; 0x7c
    c52a:	701a      	strb	r2, [r3, #0]
    c52c:	f107 031c 	add.w	r3, r7, #28
    c530:	f107 021c 	add.w	r2, r7, #28
    c534:	6812      	ldr	r2, [r2, #0]
    c536:	3201      	adds	r2, #1
    c538:	601a      	str	r2, [r3, #0]
	iRet = appGet(appGprsPass, pcStr, lenGprsPass+1);               // Retrieve password
    c53a:	f107 0418 	add.w	r4, r7, #24
    c53e:	f107 031c 	add.w	r3, r7, #28
    c542:	2010      	movs	r0, #16
    c544:	6819      	ldr	r1, [r3, #0]
    c546:	221f      	movs	r2, #31
    c548:	f003 f8b8 	bl	f6bc <appGet>
    c54c:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    c54e:	f107 0318 	add.w	r3, r7, #24
    c552:	681b      	ldr	r3, [r3, #0]
    c554:	2b00      	cmp	r3, #0
    c556:	f2c0 846f 	blt.w	ce38 <ComGPRS+0xa78>
	pcStr += strlen(pcStr);
    c55a:	f107 031c 	add.w	r3, r7, #28
    c55e:	6818      	ldr	r0, [r3, #0]
    c560:	f7fc eb90 	blx	8c84 <_init+0x124>
    c564:	4602      	mov	r2, r0
    c566:	f107 031c 	add.w	r3, r7, #28
    c56a:	f107 011c 	add.w	r1, r7, #28
    c56e:	6809      	ldr	r1, [r1, #0]
    c570:	188a      	adds	r2, r1, r2
    c572:	601a      	str	r2, [r3, #0]
	*pcStr = '|';
    c574:	f107 031c 	add.w	r3, r7, #28
    c578:	681b      	ldr	r3, [r3, #0]
    c57a:	227c      	movs	r2, #124	; 0x7c
    c57c:	701a      	strb	r2, [r3, #0]
	iRet = appGet(appGprsUser, tcUser, lenGprsUser+1);              // Retrieve username to show
    c57e:	f107 0418 	add.w	r4, r7, #24
    c582:	f107 0378 	add.w	r3, r7, #120	; 0x78
    c586:	200f      	movs	r0, #15
    c588:	4619      	mov	r1, r3
    c58a:	221f      	movs	r2, #31
    c58c:	f003 f896 	bl	f6bc <appGet>
    c590:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    c592:	f107 0318 	add.w	r3, r7, #24
    c596:	681b      	ldr	r3, [r3, #0]
    c598:	2b00      	cmp	r3, #0
    c59a:	f2c0 844d 	blt.w	ce38 <ComGPRS+0xa78>
	iRet = GoalDspLine(hScreen, 1, tcUser, &txGPRS[1], 0, true);    // Show username
    c59e:	f107 0308 	add.w	r3, r7, #8
    c5a2:	681a      	ldr	r2, [r3, #0]
    c5a4:	f107 0418 	add.w	r4, r7, #24
    c5a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
    c5ac:	2100      	movs	r1, #0
    c5ae:	9100      	str	r1, [sp, #0]
    c5b0:	2101      	movs	r1, #1
    c5b2:	9101      	str	r1, [sp, #4]
    c5b4:	4610      	mov	r0, r2
    c5b6:	2101      	movs	r1, #1
    c5b8:	461a      	mov	r2, r3
    c5ba:	4bcb      	ldr	r3, [pc, #812]	; (c8e8 <ComGPRS+0x528>)
    c5bc:	f001 f81a 	bl	d5f4 <GoalDspLine>
    c5c0:	6020      	str	r0, [r4, #0]
	iRet = StartGPRS(hScreen, tcStr);                               // ** Start **
    c5c2:	f107 0308 	add.w	r3, r7, #8
    c5c6:	681a      	ldr	r2, [r3, #0]
    c5c8:	f107 0418 	add.w	r4, r7, #24
    c5cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
    c5d0:	4610      	mov	r0, r2
    c5d2:	4619      	mov	r1, r3
    c5d4:	f7fe ffe2 	bl	b59c <StartGPRS>
    c5d8:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblComKO);
    c5da:	f107 0318 	add.w	r3, r7, #24
    c5de:	681b      	ldr	r3, [r3, #0]
    c5e0:	2b00      	cmp	r3, #0
    c5e2:	f2c0 83ab 	blt.w	cd3c <ComGPRS+0x97c>
	CHECK(iRet!=0, lblEnd);                                         // Exit on cancel/timeout
    c5e6:	f107 0318 	add.w	r3, r7, #24
    c5ea:	681b      	ldr	r3, [r3, #0]
    c5ec:	2b00      	cmp	r3, #0
    c5ee:	f000 844b 	beq.w	ce88 <ComGPRS+0xac8>
	iRet = GoalDspLine(hScreen, 2, "1-comStart OK", &txGPRS[2], 0, true);
    c5f2:	f107 0308 	add.w	r3, r7, #8
    c5f6:	681b      	ldr	r3, [r3, #0]
    c5f8:	f107 0418 	add.w	r4, r7, #24
    c5fc:	2200      	movs	r2, #0
    c5fe:	9200      	str	r2, [sp, #0]
    c600:	2201      	movs	r2, #1
    c602:	9201      	str	r2, [sp, #4]
    c604:	4618      	mov	r0, r3
    c606:	2102      	movs	r1, #2
    c608:	f642 62c0 	movw	r2, #11968	; 0x2ec0
    c60c:	f2c0 0202 	movt	r2, #2
    c610:	4bb6      	ldr	r3, [pc, #728]	; (c8ec <ComGPRS+0x52c>)
    c612:	f000 ffef 	bl	d5f4 <GoalDspLine>
    c616:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c618:	f107 0318 	add.w	r3, r7, #24
    c61c:	681b      	ldr	r3, [r3, #0]
    c61e:	2b00      	cmp	r3, #0
    c620:	f2c0 8378 	blt.w	cd14 <ComGPRS+0x954>

	// Transmission through GPRS layer in progress
	// *******************************************
	memset(tcSnd, 0, sizeof(tcSnd));
    c624:	f507 7355 	add.w	r3, r7, #852	; 0x354
    c628:	4618      	mov	r0, r3
    c62a:	2100      	movs	r1, #0
    c62c:	f240 2201 	movw	r2, #513	; 0x201
    c630:	f7fc eac4 	blx	8bbc <_init+0x5c>
	memset(tcRsp, 0, sizeof(tcRsp));
    c634:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
    c638:	4618      	mov	r0, r3
    c63a:	2100      	movs	r1, #0
    c63c:	f240 2201 	movw	r2, #513	; 0x201
    c640:	f7fc eabc 	blx	8bbc <_init+0x5c>

	// Open GPRS layer
	// ===============
	iRet = GoalDspLine(hScreen, 3, "2-comOpen...", &txGPRS[3], 0, true);
    c644:	f107 0308 	add.w	r3, r7, #8
    c648:	681b      	ldr	r3, [r3, #0]
    c64a:	f107 0418 	add.w	r4, r7, #24
    c64e:	2200      	movs	r2, #0
    c650:	9200      	str	r2, [sp, #0]
    c652:	2201      	movs	r2, #1
    c654:	9201      	str	r2, [sp, #4]
    c656:	4618      	mov	r0, r3
    c658:	2103      	movs	r1, #3
    c65a:	f642 62d0 	movw	r2, #11984	; 0x2ed0
    c65e:	f2c0 0202 	movt	r2, #2
    c662:	4ba3      	ldr	r3, [pc, #652]	; (c8f0 <ComGPRS+0x530>)
    c664:	f000 ffc6 	bl	d5f4 <GoalDspLine>
    c668:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c66a:	f107 0318 	add.w	r3, r7, #24
    c66e:	681b      	ldr	r3, [r3, #0]
    c670:	2b00      	cmp	r3, #0
    c672:	f2c0 834f 	blt.w	cd14 <ComGPRS+0x954>
	iRet = appGet(appGprsIpRemote, tcIpAddress, lenGprsIpRemote+1);   // Retrieve remote IP
    c676:	f107 0418 	add.w	r4, r7, #24
    c67a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
    c67e:	2011      	movs	r0, #17
    c680:	4619      	mov	r1, r3
    c682:	f240 2201 	movw	r2, #513	; 0x201
    c686:	f003 f819 	bl	f6bc <appGet>
    c68a:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    c68c:	f107 0318 	add.w	r3, r7, #24
    c690:	681b      	ldr	r3, [r3, #0]
    c692:	2b00      	cmp	r3, #0
    c694:	f2c0 83d0 	blt.w	ce38 <ComGPRS+0xa78>
	iRet = GoalDspLine(hScreen, 4, tcIpAddress, &txGPRS[4], 0, true); // Show IP Address
    c698:	f107 0308 	add.w	r3, r7, #8
    c69c:	681a      	ldr	r2, [r3, #0]
    c69e:	f107 0418 	add.w	r4, r7, #24
    c6a2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
    c6a6:	2100      	movs	r1, #0
    c6a8:	9100      	str	r1, [sp, #0]
    c6aa:	2101      	movs	r1, #1
    c6ac:	9101      	str	r1, [sp, #4]
    c6ae:	4610      	mov	r0, r2
    c6b0:	2104      	movs	r1, #4
    c6b2:	461a      	mov	r2, r3
    c6b4:	4b8f      	ldr	r3, [pc, #572]	; (c8f4 <ComGPRS+0x534>)
    c6b6:	f000 ff9d 	bl	d5f4 <GoalDspLine>
    c6ba:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c6bc:	f107 0318 	add.w	r3, r7, #24
    c6c0:	681b      	ldr	r3, [r3, #0]
    c6c2:	2b00      	cmp	r3, #0
    c6c4:	f2c0 8326 	blt.w	cd14 <ComGPRS+0x954>
	iRet = appGet(appGprsPort, tcPort, lenGprsPort+1);                // Retrieve port number
    c6c8:	f107 0418 	add.w	r4, r7, #24
    c6cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
    c6d0:	2012      	movs	r0, #18
    c6d2:	4619      	mov	r1, r3
    c6d4:	2206      	movs	r2, #6
    c6d6:	f002 fff1 	bl	f6bc <appGet>
    c6da:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    c6dc:	f107 0318 	add.w	r3, r7, #24
    c6e0:	681b      	ldr	r3, [r3, #0]
    c6e2:	2b00      	cmp	r3, #0
    c6e4:	f2c0 83a8 	blt.w	ce38 <ComGPRS+0xa78>
	iRet = GoalClrScreen(hScreen, GL_COLOR_BLACK, KEY_CANCEL, false); // Clear screen
    c6e8:	f107 0308 	add.w	r3, r7, #8
    c6ec:	681b      	ldr	r3, [r3, #0]
    c6ee:	f107 0418 	add.w	r4, r7, #24
    c6f2:	4618      	mov	r0, r3
    c6f4:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    c6f8:	2202      	movs	r2, #2
    c6fa:	2300      	movs	r3, #0
    c6fc:	f000 fe60 	bl	d3c0 <GoalClrScreen>
    c700:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c702:	f107 0318 	add.w	r3, r7, #24
    c706:	681b      	ldr	r3, [r3, #0]
    c708:	2b00      	cmp	r3, #0
    c70a:	f2c0 8303 	blt.w	cd14 <ComGPRS+0x954>
	iRet = GoalDspLine(hScreen, 0, tcPort, &txGPRS[0], 0, true);      // Show port number
    c70e:	f107 0308 	add.w	r3, r7, #8
    c712:	681a      	ldr	r2, [r3, #0]
    c714:	f107 0418 	add.w	r4, r7, #24
    c718:	f107 0370 	add.w	r3, r7, #112	; 0x70
    c71c:	2100      	movs	r1, #0
    c71e:	9100      	str	r1, [sp, #0]
    c720:	2101      	movs	r1, #1
    c722:	9101      	str	r1, [sp, #4]
    c724:	4610      	mov	r0, r2
    c726:	2100      	movs	r1, #0
    c728:	461a      	mov	r2, r3
    c72a:	f642 0338 	movw	r3, #10296	; 0x2838
    c72e:	f2c0 0302 	movt	r3, #2
    c732:	f000 ff5f 	bl	d5f4 <GoalDspLine>
    c736:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c738:	f107 0318 	add.w	r3, r7, #24
    c73c:	681b      	ldr	r3, [r3, #0]
    c73e:	2b00      	cmp	r3, #0
    c740:	f2c0 82e8 	blt.w	cd14 <ComGPRS+0x954>
	Telium_Sprintf (tcStr, "%s|%s", tcIpAddress, tcPort);
    c744:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
    c748:	f507 72a8 	add.w	r2, r7, #336	; 0x150
    c74c:	f107 0370 	add.w	r3, r7, #112	; 0x70
    c750:	4608      	mov	r0, r1
    c752:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    c756:	f2c0 0102 	movt	r1, #2
    c75a:	f013 ffaf 	bl	206bc <Telium_Sprintf>
	hGPRS = OpenGPRS(tcStr);                                          // ** Open **
    c75e:	f107 0414 	add.w	r4, r7, #20
    c762:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
    c766:	4618      	mov	r0, r3
    c768:	f7ff f862 	bl	b830 <OpenGPRS>
    c76c:	6020      	str	r0, [r4, #0]
	CHECK(hGPRS!=NULL, lblKO);
    c76e:	f107 0314 	add.w	r3, r7, #20
    c772:	681b      	ldr	r3, [r3, #0]
    c774:	2b00      	cmp	r3, #0
    c776:	f000 82cd 	beq.w	cd14 <ComGPRS+0x954>
	iRet = GoalDspLine(hScreen, 1, "2-comOpen OK", &txGPRS[1], 0, true);
    c77a:	f107 0308 	add.w	r3, r7, #8
    c77e:	681b      	ldr	r3, [r3, #0]
    c780:	f107 0418 	add.w	r4, r7, #24
    c784:	2200      	movs	r2, #0
    c786:	9200      	str	r2, [sp, #0]
    c788:	2201      	movs	r2, #1
    c78a:	9201      	str	r2, [sp, #4]
    c78c:	4618      	mov	r0, r3
    c78e:	2101      	movs	r1, #1
    c790:	f642 62e8 	movw	r2, #12008	; 0x2ee8
    c794:	f2c0 0202 	movt	r2, #2
    c798:	4b53      	ldr	r3, [pc, #332]	; (c8e8 <ComGPRS+0x528>)
    c79a:	f000 ff2b 	bl	d5f4 <GoalDspLine>
    c79e:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c7a0:	f107 0318 	add.w	r3, r7, #24
    c7a4:	681b      	ldr	r3, [r3, #0]
    c7a6:	2b00      	cmp	r3, #0
    c7a8:	f2c0 82b4 	blt.w	cd14 <ComGPRS+0x954>

	// Connect GPRS layer
	// ==================
	iRet = GoalDspLine(hScreen, 2, "3-comConnect...", &txGPRS[2], 0, true);
    c7ac:	f107 0308 	add.w	r3, r7, #8
    c7b0:	681b      	ldr	r3, [r3, #0]
    c7b2:	f107 0418 	add.w	r4, r7, #24
    c7b6:	2200      	movs	r2, #0
    c7b8:	9200      	str	r2, [sp, #0]
    c7ba:	2201      	movs	r2, #1
    c7bc:	9201      	str	r2, [sp, #4]
    c7be:	4618      	mov	r0, r3
    c7c0:	2102      	movs	r1, #2
    c7c2:	f642 62f8 	movw	r2, #12024	; 0x2ef8
    c7c6:	f2c0 0202 	movt	r2, #2
    c7ca:	4b48      	ldr	r3, [pc, #288]	; (c8ec <ComGPRS+0x52c>)
    c7cc:	f000 ff12 	bl	d5f4 <GoalDspLine>
    c7d0:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c7d2:	f107 0318 	add.w	r3, r7, #24
    c7d6:	681b      	ldr	r3, [r3, #0]
    c7d8:	2b00      	cmp	r3, #0
    c7da:	f2c0 829b 	blt.w	cd14 <ComGPRS+0x954>
	iRet = ConnectGPRS(hGPRS);                                        // ** Connect **
    c7de:	f107 0418 	add.w	r4, r7, #24
    c7e2:	f107 0314 	add.w	r3, r7, #20
    c7e6:	6818      	ldr	r0, [r3, #0]
    c7e8:	f7ff f916 	bl	ba18 <ConnectGPRS>
    c7ec:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblComKO);
    c7ee:	f107 0318 	add.w	r3, r7, #24
    c7f2:	681b      	ldr	r3, [r3, #0]
    c7f4:	2b00      	cmp	r3, #0
    c7f6:	f2c0 82a1 	blt.w	cd3c <ComGPRS+0x97c>
	iRet = GoalDspLine(hScreen, 3, "3-comConnect OK", &txGPRS[3], 0, true);
    c7fa:	f107 0308 	add.w	r3, r7, #8
    c7fe:	681b      	ldr	r3, [r3, #0]
    c800:	f107 0418 	add.w	r4, r7, #24
    c804:	2200      	movs	r2, #0
    c806:	9200      	str	r2, [sp, #0]
    c808:	2201      	movs	r2, #1
    c80a:	9201      	str	r2, [sp, #4]
    c80c:	4618      	mov	r0, r3
    c80e:	2103      	movs	r1, #3
    c810:	f642 7208 	movw	r2, #12040	; 0x2f08
    c814:	f2c0 0202 	movt	r2, #2
    c818:	4b35      	ldr	r3, [pc, #212]	; (c8f0 <ComGPRS+0x530>)
    c81a:	f000 feeb 	bl	d5f4 <GoalDspLine>
    c81e:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c820:	f107 0318 	add.w	r3, r7, #24
    c824:	681b      	ldr	r3, [r3, #0]
    c826:	2b00      	cmp	r3, #0
    c828:	f2c0 8274 	blt.w	cd14 <ComGPRS+0x954>

	// Clear sending/receiving buffers
	// ===============================
	iRet = LL_ClearSendBuffer(hGPRS);
    c82c:	f107 0418 	add.w	r4, r7, #24
    c830:	f107 0314 	add.w	r3, r7, #20
    c834:	6818      	ldr	r0, [r3, #0]
    c836:	f012 fda8 	bl	1f38a <LL_ClearSendBuffer>
    c83a:	6020      	str	r0, [r4, #0]
	CHECK(iRet==LL_ERROR_OK, lblComKO);
    c83c:	f107 0318 	add.w	r3, r7, #24
    c840:	681b      	ldr	r3, [r3, #0]
    c842:	2b00      	cmp	r3, #0
    c844:	f040 827a 	bne.w	cd3c <ComGPRS+0x97c>
	iRet = LL_ClearReceiveBuffer(hGPRS);
    c848:	f107 0418 	add.w	r4, r7, #24
    c84c:	f107 0314 	add.w	r3, r7, #20
    c850:	6818      	ldr	r0, [r3, #0]
    c852:	f012 fd88 	bl	1f366 <LL_ClearReceiveBuffer>
    c856:	6020      	str	r0, [r4, #0]
	CHECK(iRet==LL_ERROR_OK, lblComKO);
    c858:	f107 0318 	add.w	r3, r7, #24
    c85c:	681b      	ldr	r3, [r3, #0]
    c85e:	2b00      	cmp	r3, #0
    c860:	f040 826c 	bne.w	cd3c <ComGPRS+0x97c>

	// Send data through GPRS layer
	// ============================
	iRet = GoalDspLine(hScreen, 4, "4-comSend...", &txGPRS[4], 0, true);
    c864:	f107 0308 	add.w	r3, r7, #8
    c868:	681b      	ldr	r3, [r3, #0]
    c86a:	f107 0418 	add.w	r4, r7, #24
    c86e:	2200      	movs	r2, #0
    c870:	9200      	str	r2, [sp, #0]
    c872:	2201      	movs	r2, #1
    c874:	9201      	str	r2, [sp, #4]
    c876:	4618      	mov	r0, r3
    c878:	2104      	movs	r1, #4
    c87a:	f642 7218 	movw	r2, #12056	; 0x2f18
    c87e:	f2c0 0202 	movt	r2, #2
    c882:	4b1c      	ldr	r3, [pc, #112]	; (c8f4 <ComGPRS+0x534>)
    c884:	f000 feb6 	bl	d5f4 <GoalDspLine>
    c888:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c88a:	f107 0318 	add.w	r3, r7, #24
    c88e:	681b      	ldr	r3, [r3, #0]
    c890:	2b00      	cmp	r3, #0
    c892:	f2c0 823f 	blt.w	cd14 <ComGPRS+0x954>
	strcpy(tcSnd, "Kevin Njenga\n"                          // Data to send
    c896:	f507 7255 	add.w	r2, r7, #852	; 0x354
    c89a:	f642 7328 	movw	r3, #12072	; 0x2f28
    c89e:	f2c0 0302 	movt	r3, #2
    c8a2:	4611      	mov	r1, r2
    c8a4:	461a      	mov	r2, r3
    c8a6:	236a      	movs	r3, #106	; 0x6a
    c8a8:	4608      	mov	r0, r1
    c8aa:	4611      	mov	r1, r2
    c8ac:	461a      	mov	r2, r3
    c8ae:	f7fc e9e4 	blx	8c78 <_init+0x118>
			"Hello, do you hear me?\n"
			"Hello, do you hear me?\n"
			"Hello, do you hear me?\n"
			"Hello, do you hear me?\n");
	iRet = SendGPRS(hGPRS, tcSnd, (word) strlen(tcSnd));              // ** Send data **
    c8b2:	f507 7355 	add.w	r3, r7, #852	; 0x354
    c8b6:	4618      	mov	r0, r3
    c8b8:	f7fc e9e4 	blx	8c84 <_init+0x124>
    c8bc:	4603      	mov	r3, r0
    c8be:	b29b      	uxth	r3, r3
    c8c0:	f107 0418 	add.w	r4, r7, #24
    c8c4:	f107 0114 	add.w	r1, r7, #20
    c8c8:	f507 7255 	add.w	r2, r7, #852	; 0x354
    c8cc:	6808      	ldr	r0, [r1, #0]
    c8ce:	4611      	mov	r1, r2
    c8d0:	461a      	mov	r2, r3
    c8d2:	f7ff f8bf 	bl	ba54 <SendGPRS>
    c8d6:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblComKO);
    c8d8:	f107 0318 	add.w	r3, r7, #24
    c8dc:	681b      	ldr	r3, [r3, #0]
    c8de:	2b00      	cmp	r3, #0
    c8e0:	f2c0 822c 	blt.w	cd3c <ComGPRS+0x97c>
    c8e4:	e008      	b.n	c8f8 <ComGPRS+0x538>
    c8e6:	bf00      	nop
    c8e8:	000228e4 	.word	0x000228e4
    c8ec:	00022990 	.word	0x00022990
    c8f0:	00022a3c 	.word	0x00022a3c
    c8f4:	00022ae8 	.word	0x00022ae8
	iRet = GoalClrScreen(hScreen, GL_COLOR_BLACK, KEY_CANCEL, false); // Clear screen
    c8f8:	f107 0308 	add.w	r3, r7, #8
    c8fc:	681b      	ldr	r3, [r3, #0]
    c8fe:	f107 0418 	add.w	r4, r7, #24
    c902:	4618      	mov	r0, r3
    c904:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    c908:	2202      	movs	r2, #2
    c90a:	2300      	movs	r3, #0
    c90c:	f000 fd58 	bl	d3c0 <GoalClrScreen>
    c910:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c912:	f107 0318 	add.w	r3, r7, #24
    c916:	681b      	ldr	r3, [r3, #0]
    c918:	2b00      	cmp	r3, #0
    c91a:	f2c0 81fb 	blt.w	cd14 <ComGPRS+0x954>
	iRet = GoalDspLine(hScreen, 0, "4-comSend OK", &txGPRS[0], 0, true);
    c91e:	f107 0308 	add.w	r3, r7, #8
    c922:	681b      	ldr	r3, [r3, #0]
    c924:	f107 0418 	add.w	r4, r7, #24
    c928:	2200      	movs	r2, #0
    c92a:	9200      	str	r2, [sp, #0]
    c92c:	2201      	movs	r2, #1
    c92e:	9201      	str	r2, [sp, #4]
    c930:	4618      	mov	r0, r3
    c932:	2100      	movs	r1, #0
    c934:	f642 7294 	movw	r2, #12180	; 0x2f94
    c938:	f2c0 0202 	movt	r2, #2
    c93c:	f642 0338 	movw	r3, #10296	; 0x2838
    c940:	f2c0 0302 	movt	r3, #2
    c944:	f000 fe56 	bl	d5f4 <GoalDspLine>
    c948:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c94a:	f107 0318 	add.w	r3, r7, #24
    c94e:	681b      	ldr	r3, [r3, #0]
    c950:	2b00      	cmp	r3, #0
    c952:	f2c0 81df 	blt.w	cd14 <ComGPRS+0x954>

	// Receive data through GPRS layer
	// ===============================
	iRet = GoalDspLine(hScreen, 1, "5-comRec...", &txGPRS[1], 0, true);
    c956:	f107 0308 	add.w	r3, r7, #8
    c95a:	681b      	ldr	r3, [r3, #0]
    c95c:	f107 0418 	add.w	r4, r7, #24
    c960:	2200      	movs	r2, #0
    c962:	9200      	str	r2, [sp, #0]
    c964:	2201      	movs	r2, #1
    c966:	9201      	str	r2, [sp, #4]
    c968:	4618      	mov	r0, r3
    c96a:	2101      	movs	r1, #1
    c96c:	f642 72a4 	movw	r2, #12196	; 0x2fa4
    c970:	f2c0 0202 	movt	r2, #2
    c974:	4bb9      	ldr	r3, [pc, #740]	; (cc5c <ComGPRS+0x89c>)
    c976:	f000 fe3d 	bl	d5f4 <GoalDspLine>
    c97a:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c97c:	f107 0318 	add.w	r3, r7, #24
    c980:	681b      	ldr	r3, [r3, #0]
    c982:	2b00      	cmp	r3, #0
    c984:	f2c0 81c6 	blt.w	cd14 <ComGPRS+0x954>
	iRet = ReceiveGPRS(hGPRS, hScreen, tcRsp, sizeof(tcRsp), 30);     // ** Receive data **
    c988:	f107 0308 	add.w	r3, r7, #8
    c98c:	681a      	ldr	r2, [r3, #0]
    c98e:	f107 0418 	add.w	r4, r7, #24
    c992:	f107 0114 	add.w	r1, r7, #20
    c996:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
    c99a:	201e      	movs	r0, #30
    c99c:	9000      	str	r0, [sp, #0]
    c99e:	6808      	ldr	r0, [r1, #0]
    c9a0:	4611      	mov	r1, r2
    c9a2:	461a      	mov	r2, r3
    c9a4:	f240 2301 	movw	r3, #513	; 0x201
    c9a8:	f7ff f882 	bl	bab0 <ReceiveGPRS>
    c9ac:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblComKO);
    c9ae:	f107 0318 	add.w	r3, r7, #24
    c9b2:	681b      	ldr	r3, [r3, #0]
    c9b4:	2b00      	cmp	r3, #0
    c9b6:	f2c0 81c1 	blt.w	cd3c <ComGPRS+0x97c>
	if (iRet > MAX_RSP) strcpy (tcRsp, "Buffer overflow Max=512");    // Data overflow
    c9ba:	f107 0318 	add.w	r3, r7, #24
    c9be:	681b      	ldr	r3, [r3, #0]
    c9c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c9c4:	dd0d      	ble.n	c9e2 <ComGPRS+0x622>
    c9c6:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
    c9ca:	f642 73b0 	movw	r3, #12208	; 0x2fb0
    c9ce:	f2c0 0302 	movt	r3, #2
    c9d2:	4614      	mov	r4, r2
    c9d4:	461d      	mov	r5, r3
    c9d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c9d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c9da:	e895 0003 	ldmia.w	r5, {r0, r1}
    c9de:	e884 0003 	stmia.w	r4, {r0, r1}
	iRet = GoalDspLine(hScreen, 2, "5-comRec OK", &txGPRS[2], 0, true);
    c9e2:	f107 0308 	add.w	r3, r7, #8
    c9e6:	681b      	ldr	r3, [r3, #0]
    c9e8:	f107 0418 	add.w	r4, r7, #24
    c9ec:	2200      	movs	r2, #0
    c9ee:	9200      	str	r2, [sp, #0]
    c9f0:	2201      	movs	r2, #1
    c9f2:	9201      	str	r2, [sp, #4]
    c9f4:	4618      	mov	r0, r3
    c9f6:	2102      	movs	r1, #2
    c9f8:	f642 72c8 	movw	r2, #12232	; 0x2fc8
    c9fc:	f2c0 0202 	movt	r2, #2
    ca00:	4b97      	ldr	r3, [pc, #604]	; (cc60 <ComGPRS+0x8a0>)
    ca02:	f000 fdf7 	bl	d5f4 <GoalDspLine>
    ca06:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    ca08:	f107 0318 	add.w	r3, r7, #24
    ca0c:	681b      	ldr	r3, [r3, #0]
    ca0e:	2b00      	cmp	r3, #0
    ca10:	f2c0 8180 	blt.w	cd14 <ComGPRS+0x954>

	// Disconnection
	// =============
	iRet = DisconnectGPRS(hGPRS);                                     // ** Disconnect **
    ca14:	f107 0418 	add.w	r4, r7, #24
    ca18:	f107 0314 	add.w	r3, r7, #20
    ca1c:	6818      	ldr	r0, [r3, #0]
    ca1e:	f7ff f8f7 	bl	bc10 <DisconnectGPRS>
    ca22:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblComKO);
    ca24:	f107 0318 	add.w	r3, r7, #24
    ca28:	681b      	ldr	r3, [r3, #0]
    ca2a:	2b00      	cmp	r3, #0
    ca2c:	f2c0 8186 	blt.w	cd3c <ComGPRS+0x97c>
	iRet = GoalDspLine(hScreen, 3, "6-comDisconn OK", &txGPRS[3], 0, true);
    ca30:	f107 0308 	add.w	r3, r7, #8
    ca34:	681b      	ldr	r3, [r3, #0]
    ca36:	f107 0418 	add.w	r4, r7, #24
    ca3a:	2200      	movs	r2, #0
    ca3c:	9200      	str	r2, [sp, #0]
    ca3e:	2201      	movs	r2, #1
    ca40:	9201      	str	r2, [sp, #4]
    ca42:	4618      	mov	r0, r3
    ca44:	2103      	movs	r1, #3
    ca46:	f642 72d4 	movw	r2, #12244	; 0x2fd4
    ca4a:	f2c0 0202 	movt	r2, #2
    ca4e:	4b85      	ldr	r3, [pc, #532]	; (cc64 <ComGPRS+0x8a4>)
    ca50:	f000 fdd0 	bl	d5f4 <GoalDspLine>
    ca54:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    ca56:	f107 0318 	add.w	r3, r7, #24
    ca5a:	681b      	ldr	r3, [r3, #0]
    ca5c:	2b00      	cmp	r3, #0
    ca5e:	f2c0 8159 	blt.w	cd14 <ComGPRS+0x954>
	iRet = CloseGPRS(hGPRS);                                          // ** Close **
    ca62:	f107 0418 	add.w	r4, r7, #24
    ca66:	f107 0314 	add.w	r3, r7, #20
    ca6a:	6818      	ldr	r0, [r3, #0]
    ca6c:	f7ff f8ee 	bl	bc4c <CloseGPRS>
    ca70:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblComKO);
    ca72:	f107 0318 	add.w	r3, r7, #24
    ca76:	681b      	ldr	r3, [r3, #0]
    ca78:	2b00      	cmp	r3, #0
    ca7a:	f2c0 815f 	blt.w	cd3c <ComGPRS+0x97c>

	// Display transmission data
	// =========================
	iRet = GoalClrScreen(hScreen, GL_COLOR_BLACK, KEY_CANCEL | KEY_VALID, false);
    ca7e:	f107 0308 	add.w	r3, r7, #8
    ca82:	681b      	ldr	r3, [r3, #0]
    ca84:	f107 0418 	add.w	r4, r7, #24
    ca88:	4618      	mov	r0, r3
    ca8a:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    ca8e:	2203      	movs	r2, #3
    ca90:	2300      	movs	r3, #0
    ca92:	f000 fc95 	bl	d3c0 <GoalClrScreen>
    ca96:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);                                            // Clear screen
    ca98:	f107 0318 	add.w	r3, r7, #24
    ca9c:	681b      	ldr	r3, [r3, #0]
    ca9e:	2b00      	cmp	r3, #0
    caa0:	f2c0 8138 	blt.w	cd14 <ComGPRS+0x954>
	iRet = GoalDspMultiLine(hScreen, 0, tcRsp, strlen(tcRsp), txGPRS, NUMBER_OF_LINES(txGPRS), 0, true);
    caa4:	f107 0308 	add.w	r3, r7, #8
    caa8:	681e      	ldr	r6, [r3, #0]
    caaa:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
    caae:	4618      	mov	r0, r3
    cab0:	f7fc e8e8 	blx	8c84 <_init+0x124>
    cab4:	4603      	mov	r3, r0
    cab6:	461d      	mov	r5, r3
    cab8:	f107 0418 	add.w	r4, r7, #24
    cabc:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
    cac0:	f642 0338 	movw	r3, #10296	; 0x2838
    cac4:	f2c0 0302 	movt	r3, #2
    cac8:	9300      	str	r3, [sp, #0]
    caca:	2305      	movs	r3, #5
    cacc:	9301      	str	r3, [sp, #4]
    cace:	2300      	movs	r3, #0
    cad0:	9302      	str	r3, [sp, #8]
    cad2:	2301      	movs	r3, #1
    cad4:	9303      	str	r3, [sp, #12]
    cad6:	4630      	mov	r0, r6
    cad8:	2100      	movs	r1, #0
    cada:	462b      	mov	r3, r5
    cadc:	f000 ff5e 	bl	d99c <GoalDspMultiLine>
    cae0:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);                                            // Show data to receive
    cae2:	f107 0318 	add.w	r3, r7, #24
    cae6:	681b      	ldr	r3, [r3, #0]
    cae8:	2b00      	cmp	r3, #0
    caea:	f2c0 8113 	blt.w	cd14 <ComGPRS+0x954>

	// Print transmission data
	// =======================
	p=0;
    caee:	1dfb      	adds	r3, r7, #7
    caf0:	2200      	movs	r2, #0
    caf2:	701a      	strb	r2, [r3, #0]
	hDocument = GoalCreateDocument(gGoalGraphicLibInstance, GL_ENCODING_UTF8);          // Create document
    caf4:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    caf8:	f2c0 0302 	movt	r3, #2
    cafc:	681b      	ldr	r3, [r3, #0]
    cafe:	4618      	mov	r0, r3
    cb00:	2100      	movs	r1, #0
    cb02:	f002 f9c3 	bl	ee8c <GoalCreateDocument>
    cb06:	4602      	mov	r2, r0
    cb08:	f107 030c 	add.w	r3, r7, #12
    cb0c:	601a      	str	r2, [r3, #0]
	CHECK(hDocument!=NULL, lblKO);
    cb0e:	f107 030c 	add.w	r3, r7, #12
    cb12:	681b      	ldr	r3, [r3, #0]
    cb14:	2b00      	cmp	r3, #0
    cb16:	f000 80fd 	beq.w	cd14 <ComGPRS+0x954>

	xLine = xPrinter;                                                 // Build document (Demo, Tx/Rx data)
    cb1a:	f107 0220 	add.w	r2, r7, #32
    cb1e:	f642 3394 	movw	r3, #11156	; 0x2b94
    cb22:	f2c0 0302 	movt	r3, #2
    cb26:	4611      	mov	r1, r2
    cb28:	461a      	mov	r2, r3
    cb2a:	2350      	movs	r3, #80	; 0x50
    cb2c:	4608      	mov	r0, r1
    cb2e:	4611      	mov	r1, r2
    cb30:	461a      	mov	r2, r3
    cb32:	f7fc e8a2 	blx	8c78 <_init+0x118>
	xLine.eTextAlign = GL_ALIGN_CENTER;
    cb36:	f107 0320 	add.w	r3, r7, #32
    cb3a:	2200      	movs	r2, #0
    cb3c:	601a      	str	r2, [r3, #0]
	xLine.bReverse = TRUE;
    cb3e:	f107 0320 	add.w	r3, r7, #32
    cb42:	2201      	movs	r2, #1
    cb44:	721a      	strb	r2, [r3, #8]
	xLine.xMargin.usBottom = PIXEL_BOTTOM;
    cb46:	f107 0320 	add.w	r3, r7, #32
    cb4a:	2228      	movs	r2, #40	; 0x28
    cb4c:	641a      	str	r2, [r3, #64]	; 0x40
	xLine.xFont.eScale = GL_SCALE_XXLARGE;
    cb4e:	f107 0320 	add.w	r3, r7, #32
    cb52:	f643 72f6 	movw	r2, #16374	; 0x3ff6
    cb56:	64da      	str	r2, [r3, #76]	; 0x4c
	iRet = GoalPrnLine(hDocument, p++, "GPRS Demo", &xLine);
    cb58:	f107 030c 	add.w	r3, r7, #12
    cb5c:	6819      	ldr	r1, [r3, #0]
    cb5e:	1dfb      	adds	r3, r7, #7
    cb60:	781b      	ldrb	r3, [r3, #0]
    cb62:	b29a      	uxth	r2, r3
    cb64:	1dfb      	adds	r3, r7, #7
    cb66:	1df8      	adds	r0, r7, #7
    cb68:	7800      	ldrb	r0, [r0, #0]
    cb6a:	3001      	adds	r0, #1
    cb6c:	7018      	strb	r0, [r3, #0]
    cb6e:	f107 0418 	add.w	r4, r7, #24
    cb72:	f107 0320 	add.w	r3, r7, #32
    cb76:	4608      	mov	r0, r1
    cb78:	4611      	mov	r1, r2
    cb7a:	f642 72e4 	movw	r2, #12260	; 0x2fe4
    cb7e:	f2c0 0202 	movt	r2, #2
    cb82:	f002 f9bf 	bl	ef04 <GoalPrnLine>
    cb86:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    cb88:	f107 0318 	add.w	r3, r7, #24
    cb8c:	681b      	ldr	r3, [r3, #0]
    cb8e:	2b00      	cmp	r3, #0
    cb90:	f2c0 80c0 	blt.w	cd14 <ComGPRS+0x954>

	xLine = xPrinter;
    cb94:	f107 0220 	add.w	r2, r7, #32
    cb98:	f642 3394 	movw	r3, #11156	; 0x2b94
    cb9c:	f2c0 0302 	movt	r3, #2
    cba0:	4611      	mov	r1, r2
    cba2:	461a      	mov	r2, r3
    cba4:	2350      	movs	r3, #80	; 0x50
    cba6:	4608      	mov	r0, r1
    cba8:	4611      	mov	r1, r2
    cbaa:	461a      	mov	r2, r3
    cbac:	f7fc e864 	blx	8c78 <_init+0x118>
	iRet = GoalPrnLine(hDocument, p++, "Sending:", &xLine);           // Data to send
    cbb0:	f107 030c 	add.w	r3, r7, #12
    cbb4:	6819      	ldr	r1, [r3, #0]
    cbb6:	1dfb      	adds	r3, r7, #7
    cbb8:	781b      	ldrb	r3, [r3, #0]
    cbba:	b29a      	uxth	r2, r3
    cbbc:	1dfb      	adds	r3, r7, #7
    cbbe:	1df8      	adds	r0, r7, #7
    cbc0:	7800      	ldrb	r0, [r0, #0]
    cbc2:	3001      	adds	r0, #1
    cbc4:	7018      	strb	r0, [r3, #0]
    cbc6:	f107 0418 	add.w	r4, r7, #24
    cbca:	f107 0320 	add.w	r3, r7, #32
    cbce:	4608      	mov	r0, r1
    cbd0:	4611      	mov	r1, r2
    cbd2:	f642 72f0 	movw	r2, #12272	; 0x2ff0
    cbd6:	f2c0 0202 	movt	r2, #2
    cbda:	f002 f993 	bl	ef04 <GoalPrnLine>
    cbde:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    cbe0:	f107 0318 	add.w	r3, r7, #24
    cbe4:	681b      	ldr	r3, [r3, #0]
    cbe6:	2b00      	cmp	r3, #0
    cbe8:	f2c0 8094 	blt.w	cd14 <ComGPRS+0x954>
	iRet = GoalPrnLine(hDocument, p++, tcSnd, &xLine);
    cbec:	f107 030c 	add.w	r3, r7, #12
    cbf0:	6818      	ldr	r0, [r3, #0]
    cbf2:	1dfb      	adds	r3, r7, #7
    cbf4:	781b      	ldrb	r3, [r3, #0]
    cbf6:	b299      	uxth	r1, r3
    cbf8:	1dfb      	adds	r3, r7, #7
    cbfa:	1dfa      	adds	r2, r7, #7
    cbfc:	7812      	ldrb	r2, [r2, #0]
    cbfe:	3201      	adds	r2, #1
    cc00:	701a      	strb	r2, [r3, #0]
    cc02:	f107 0418 	add.w	r4, r7, #24
    cc06:	f507 7255 	add.w	r2, r7, #852	; 0x354
    cc0a:	f107 0320 	add.w	r3, r7, #32
    cc0e:	f002 f979 	bl	ef04 <GoalPrnLine>
    cc12:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    cc14:	f107 0318 	add.w	r3, r7, #24
    cc18:	681b      	ldr	r3, [r3, #0]
    cc1a:	2b00      	cmp	r3, #0
    cc1c:	db7a      	blt.n	cd14 <ComGPRS+0x954>
	iRet = GoalPrnLine(hDocument, p++, "\nReceiving:", &xLine);       // Data to receive
    cc1e:	f107 030c 	add.w	r3, r7, #12
    cc22:	6819      	ldr	r1, [r3, #0]
    cc24:	1dfb      	adds	r3, r7, #7
    cc26:	781b      	ldrb	r3, [r3, #0]
    cc28:	b29a      	uxth	r2, r3
    cc2a:	1dfb      	adds	r3, r7, #7
    cc2c:	1df8      	adds	r0, r7, #7
    cc2e:	7800      	ldrb	r0, [r0, #0]
    cc30:	3001      	adds	r0, #1
    cc32:	7018      	strb	r0, [r3, #0]
    cc34:	f107 0418 	add.w	r4, r7, #24
    cc38:	f107 0320 	add.w	r3, r7, #32
    cc3c:	4608      	mov	r0, r1
    cc3e:	4611      	mov	r1, r2
    cc40:	f642 72fc 	movw	r2, #12284	; 0x2ffc
    cc44:	f2c0 0202 	movt	r2, #2
    cc48:	f002 f95c 	bl	ef04 <GoalPrnLine>
    cc4c:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    cc4e:	f107 0318 	add.w	r3, r7, #24
    cc52:	681b      	ldr	r3, [r3, #0]
    cc54:	2b00      	cmp	r3, #0
    cc56:	db5d      	blt.n	cd14 <ComGPRS+0x954>
    cc58:	e006      	b.n	cc68 <ComGPRS+0x8a8>
    cc5a:	bf00      	nop
    cc5c:	000228e4 	.word	0x000228e4
    cc60:	00022990 	.word	0x00022990
    cc64:	00022a3c 	.word	0x00022a3c
	iRet = GoalPrnLine(hDocument, p++, tcRsp, &xLine);
    cc68:	f107 030c 	add.w	r3, r7, #12
    cc6c:	6818      	ldr	r0, [r3, #0]
    cc6e:	1dfb      	adds	r3, r7, #7
    cc70:	781b      	ldrb	r3, [r3, #0]
    cc72:	b299      	uxth	r1, r3
    cc74:	1dfb      	adds	r3, r7, #7
    cc76:	1dfa      	adds	r2, r7, #7
    cc78:	7812      	ldrb	r2, [r2, #0]
    cc7a:	3201      	adds	r2, #1
    cc7c:	701a      	strb	r2, [r3, #0]
    cc7e:	f107 0418 	add.w	r4, r7, #24
    cc82:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
    cc86:	f107 0320 	add.w	r3, r7, #32
    cc8a:	f002 f93b 	bl	ef04 <GoalPrnLine>
    cc8e:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    cc90:	f107 0318 	add.w	r3, r7, #24
    cc94:	681b      	ldr	r3, [r3, #0]
    cc96:	2b00      	cmp	r3, #0
    cc98:	db3c      	blt.n	cd14 <ComGPRS+0x954>
	iRet = GoalPrnLine(hDocument, p++, "\n\n\n\n", &xLine);
    cc9a:	f107 030c 	add.w	r3, r7, #12
    cc9e:	6819      	ldr	r1, [r3, #0]
    cca0:	1dfb      	adds	r3, r7, #7
    cca2:	781b      	ldrb	r3, [r3, #0]
    cca4:	b29a      	uxth	r2, r3
    cca6:	1dfb      	adds	r3, r7, #7
    cca8:	1df8      	adds	r0, r7, #7
    ccaa:	7800      	ldrb	r0, [r0, #0]
    ccac:	3001      	adds	r0, #1
    ccae:	7018      	strb	r0, [r3, #0]
    ccb0:	f107 0418 	add.w	r4, r7, #24
    ccb4:	f107 0320 	add.w	r3, r7, #32
    ccb8:	4608      	mov	r0, r1
    ccba:	4611      	mov	r1, r2
    ccbc:	f243 0208 	movw	r2, #12296	; 0x3008
    ccc0:	f2c0 0202 	movt	r2, #2
    ccc4:	f002 f91e 	bl	ef04 <GoalPrnLine>
    ccc8:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    ccca:	f107 0318 	add.w	r3, r7, #24
    ccce:	681b      	ldr	r3, [r3, #0]
    ccd0:	2b00      	cmp	r3, #0
    ccd2:	db1f      	blt.n	cd14 <ComGPRS+0x954>

	iRet = GoalPrnDocument(hDocument);
    ccd4:	f107 030c 	add.w	r3, r7, #12
    ccd8:	681b      	ldr	r3, [r3, #0]
    ccda:	f107 0418 	add.w	r4, r7, #24
    ccde:	4618      	mov	r0, r3
    cce0:	f002 fb22 	bl	f328 <GoalPrnDocument>
    cce4:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    cce6:	f107 0318 	add.w	r3, r7, #24
    ccea:	681b      	ldr	r3, [r3, #0]
    ccec:	2b00      	cmp	r3, #0
    ccee:	db11      	blt.n	cd14 <ComGPRS+0x954>

	GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 30*1000, true);                  // Wait for key pressed/touched (shortcut)
    ccf0:	f107 0308 	add.w	r3, r7, #8
    ccf4:	681a      	ldr	r2, [r3, #0]
    ccf6:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    ccfa:	f2c0 0302 	movt	r3, #2
    ccfe:	681b      	ldr	r3, [r3, #0]
    cd00:	2101      	movs	r1, #1
    cd02:	9100      	str	r1, [sp, #0]
    cd04:	4610      	mov	r0, r2
    cd06:	4619      	mov	r1, r3
    cd08:	2201      	movs	r2, #1
    cd0a:	f247 5330 	movw	r3, #30000	; 0x7530
    cd0e:	f000 ffa7 	bl	dc60 <GoalGetKey>

	goto lblEnd;
    cd12:	e0b9      	b.n	ce88 <ComGPRS+0xac8>

	// Errors treatment
	// ****************
	lblKO:                                                                // None-classified low level error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Processing Error", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
    cd14:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    cd18:	f2c0 0302 	movt	r3, #2
    cd1c:	681b      	ldr	r3, [r3, #0]
    cd1e:	2201      	movs	r2, #1
    cd20:	9200      	str	r2, [sp, #0]
    cd22:	f241 3288 	movw	r2, #5000	; 0x1388
    cd26:	9201      	str	r2, [sp, #4]
    cd28:	4618      	mov	r0, r3
    cd2a:	2100      	movs	r1, #0
    cd2c:	f243 0210 	movw	r2, #12304	; 0x3010
    cd30:	f2c0 0202 	movt	r2, #2
    cd34:	2304      	movs	r3, #4
    cd36:	f014 fbf5 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
    cd3a:	e0a5      	b.n	ce88 <ComGPRS+0xac8>
	lblComKO:                                                             // Communication error
	strcpy(tcDisplay, LL_ErrorMsg(iRet));                             // Link Layer error
    cd3c:	f107 0318 	add.w	r3, r7, #24
    cd40:	6818      	ldr	r0, [r3, #0]
    cd42:	f003 fb3d 	bl	103c0 <LL_ErrorMsg>
    cd46:	4603      	mov	r3, r0
    cd48:	f107 0298 	add.w	r2, r7, #152	; 0x98
    cd4c:	4610      	mov	r0, r2
    cd4e:	4619      	mov	r1, r3
    cd50:	f7fb ef66 	blx	8c20 <_init+0xc0>
	if (iRet == LL_Network_GetStatus(LL_PHYSICAL_V_GPRS, &iStatus))
    cd54:	f107 0310 	add.w	r3, r7, #16
    cd58:	2029      	movs	r0, #41	; 0x29
    cd5a:	4619      	mov	r1, r3
    cd5c:	f012 fba5 	bl	1f4aa <LL_Network_GetStatus>
    cd60:	4602      	mov	r2, r0
    cd62:	f107 0318 	add.w	r3, r7, #24
    cd66:	681b      	ldr	r3, [r3, #0]
    cd68:	429a      	cmp	r2, r3
    cd6a:	d14c      	bne.n	ce06 <ComGPRS+0xa46>
	{
		switch(iStatus)
    cd6c:	f107 0310 	add.w	r3, r7, #16
    cd70:	681a      	ldr	r2, [r3, #0]
    cd72:	f240 5305 	movw	r3, #1285	; 0x505
    cd76:	f2c0 1300 	movt	r3, #256	; 0x100
    cd7a:	429a      	cmp	r2, r3
    cd7c:	d013      	beq.n	cda6 <ComGPRS+0x9e6>
    cd7e:	f240 5306 	movw	r3, #1286	; 0x506
    cd82:	f2c0 1300 	movt	r3, #256	; 0x100
    cd86:	429a      	cmp	r2, r3
    cd88:	d015      	beq.n	cdb6 <ComGPRS+0x9f6>
    cd8a:	f240 5301 	movw	r3, #1281	; 0x501
    cd8e:	f2c0 1300 	movt	r3, #256	; 0x100
    cd92:	429a      	cmp	r2, r3
    cd94:	d115      	bne.n	cdc2 <ComGPRS+0xa02>
		{
		case LL_STATUS_GPRS_ERROR_NO_SIM:   iStatus=LL_STATUS_GPRS_NO_SIM;      break;
    cd96:	f107 0210 	add.w	r2, r7, #16
    cd9a:	f64f 4322 	movw	r3, #64546	; 0xfc22
    cd9e:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    cda2:	6013      	str	r3, [r2, #0]
    cda4:	e013      	b.n	cdce <ComGPRS+0xa0e>
		case LL_STATUS_GPRS_ERROR_PPP:      iStatus=LL_STATUS_GPRS_ERR_PPP;     break;
    cda6:	f107 0210 	add.w	r2, r7, #16
    cdaa:	f64f 4320 	movw	r3, #64544	; 0xfc20
    cdae:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    cdb2:	6013      	str	r3, [r2, #0]
    cdb4:	e00b      	b.n	cdce <ComGPRS+0xa0e>
		case LL_STATUS_GPRS_ERROR_UNKNOWN:  iStatus=LL_STATUS_GPRS_ERR_UNKNOWN; break;
    cdb6:	f107 0310 	add.w	r3, r7, #16
    cdba:	f46f 7278 	mvn.w	r2, #992	; 0x3e0
    cdbe:	601a      	str	r2, [r3, #0]
    cdc0:	e005      	b.n	cdce <ComGPRS+0xa0e>
		default:                            iStatus=-1;                         break;
    cdc2:	f107 0310 	add.w	r3, r7, #16
    cdc6:	f04f 32ff 	mov.w	r2, #4294967295
    cdca:	601a      	str	r2, [r3, #0]
    cdcc:	bf00      	nop
		}
		strcat(tcDisplay, "\n");
    cdce:	f107 0398 	add.w	r3, r7, #152	; 0x98
    cdd2:	4618      	mov	r0, r3
    cdd4:	f7fb ef56 	blx	8c84 <_init+0x124>
    cdd8:	4603      	mov	r3, r0
    cdda:	f107 0298 	add.w	r2, r7, #152	; 0x98
    cdde:	18d2      	adds	r2, r2, r3
    cde0:	f243 0324 	movw	r3, #12324	; 0x3024
    cde4:	f2c0 0302 	movt	r3, #2
    cde8:	881b      	ldrh	r3, [r3, #0]
    cdea:	8013      	strh	r3, [r2, #0]
		strcat(tcDisplay, LL_ErrorMsg(iStatus));                      // Link Layer status
    cdec:	f107 0310 	add.w	r3, r7, #16
    cdf0:	681b      	ldr	r3, [r3, #0]
    cdf2:	4618      	mov	r0, r3
    cdf4:	f003 fae4 	bl	103c0 <LL_ErrorMsg>
    cdf8:	4603      	mov	r3, r0
    cdfa:	f107 0298 	add.w	r2, r7, #152	; 0x98
    cdfe:	4610      	mov	r0, r2
    ce00:	4619      	mov	r1, r3
    ce02:	f7fb ef1a 	blx	8c38 <_init+0xd8>
	}
	if (iRet != LL_ERROR_TIMEOUT)                                     // Cancel or timeout ?
    ce06:	f107 0318 	add.w	r3, r7, #24
    ce0a:	681b      	ldr	r3, [r3, #0]
    ce0c:	f513 7f7b 	cmn.w	r3, #1004	; 0x3ec
    ce10:	d039      	beq.n	ce86 <ComGPRS+0xac6>
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, tcDisplay, GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
    ce12:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    ce16:	f2c0 0302 	movt	r3, #2
    ce1a:	681a      	ldr	r2, [r3, #0]
    ce1c:	f107 0398 	add.w	r3, r7, #152	; 0x98
    ce20:	2101      	movs	r1, #1
    ce22:	9100      	str	r1, [sp, #0]
    ce24:	f241 3188 	movw	r1, #5000	; 0x1388
    ce28:	9101      	str	r1, [sp, #4]
    ce2a:	4610      	mov	r0, r2
    ce2c:	2100      	movs	r1, #0
    ce2e:	461a      	mov	r2, r3
    ce30:	2304      	movs	r3, #4
    ce32:	f014 fb77 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
    ce36:	e026      	b.n	ce86 <ComGPRS+0xac6>
	lblDbaErr:                                                            // Data base error
	Telium_Sprintf(tcDisplay, "%s\n%s", FMG_ErrorMsg(iRet), "Software Reset Needed");
    ce38:	f107 0318 	add.w	r3, r7, #24
    ce3c:	6818      	ldr	r0, [r3, #0]
    ce3e:	f003 f9d7 	bl	101f0 <FMG_ErrorMsg>
    ce42:	4603      	mov	r3, r0
    ce44:	f107 0298 	add.w	r2, r7, #152	; 0x98
    ce48:	4610      	mov	r0, r2
    ce4a:	f642 61a0 	movw	r1, #11936	; 0x2ea0
    ce4e:	f2c0 0102 	movt	r1, #2
    ce52:	461a      	mov	r2, r3
    ce54:	f642 63a8 	movw	r3, #11944	; 0x2ea8
    ce58:	f2c0 0302 	movt	r3, #2
    ce5c:	f013 fc2e 	bl	206bc <Telium_Sprintf>
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, tcDisplay, GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
    ce60:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    ce64:	f2c0 0302 	movt	r3, #2
    ce68:	681a      	ldr	r2, [r3, #0]
    ce6a:	f107 0398 	add.w	r3, r7, #152	; 0x98
    ce6e:	2101      	movs	r1, #1
    ce70:	9100      	str	r1, [sp, #0]
    ce72:	f241 3188 	movw	r1, #5000	; 0x1388
    ce76:	9101      	str	r1, [sp, #4]
    ce78:	4610      	mov	r0, r2
    ce7a:	2100      	movs	r1, #0
    ce7c:	461a      	mov	r2, r3
    ce7e:	2304      	movs	r3, #4
    ce80:	f014 fb50 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
    ce84:	e000      	b.n	ce88 <ComGPRS+0xac8>
		strcat(tcDisplay, "\n");
		strcat(tcDisplay, LL_ErrorMsg(iStatus));                      // Link Layer status
	}
	if (iRet != LL_ERROR_TIMEOUT)                                     // Cancel or timeout ?
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, tcDisplay, GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
	goto lblEnd;
    ce86:	bf00      	nop
	lblDbaErr:                                                            // Data base error
	Telium_Sprintf(tcDisplay, "%s\n%s", FMG_ErrorMsg(iRet), "Software Reset Needed");
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, tcDisplay, GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
	goto lblEnd;
	lblEnd:
	if (hGPRS) {
    ce88:	f107 0314 	add.w	r3, r7, #20
    ce8c:	681b      	ldr	r3, [r3, #0]
    ce8e:	2b00      	cmp	r3, #0
    ce90:	d009      	beq.n	cea6 <ComGPRS+0xae6>
		DisconnectGPRS(hGPRS);                                        // ** Disconnect **
    ce92:	f107 0314 	add.w	r3, r7, #20
    ce96:	6818      	ldr	r0, [r3, #0]
    ce98:	f7fe feba 	bl	bc10 <DisconnectGPRS>
		CloseGPRS(hGPRS);                                             // ** Close **
    ce9c:	f107 0314 	add.w	r3, r7, #20
    cea0:	6818      	ldr	r0, [r3, #0]
    cea2:	f7fe fed3 	bl	bc4c <CloseGPRS>
	}
	StopGPRS();                                                       // ** Stop **
    cea6:	f7fe fef1 	bl	bc8c <StopGPRS>
	if (hScreen)
    ceaa:	f107 0308 	add.w	r3, r7, #8
    ceae:	681b      	ldr	r3, [r3, #0]
    ceb0:	2b00      	cmp	r3, #0
    ceb2:	d004      	beq.n	cebe <ComGPRS+0xafe>
		GoalDestroyScreen(&hScreen);                                  // Destroy screen
    ceb4:	f107 0308 	add.w	r3, r7, #8
    ceb8:	4618      	mov	r0, r3
    ceba:	f001 f833 	bl	df24 <GoalDestroyScreen>
	if (hDocument)
    cebe:	f107 030c 	add.w	r3, r7, #12
    cec2:	681b      	ldr	r3, [r3, #0]
    cec4:	2b00      	cmp	r3, #0
    cec6:	d004      	beq.n	ced2 <ComGPRS+0xb12>
		GoalDestroyDocument(&hDocument);                              // Destroy document
    cec8:	f107 030c 	add.w	r3, r7, #12
    cecc:	4618      	mov	r0, r3
    cece:	f002 fa57 	bl	f380 <GoalDestroyDocument>
}
    ced2:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    ced6:	f2c0 0302 	movt	r3, #2
    ceda:	f8d7 275c 	ldr.w	r2, [r7, #1884]	; 0x75c
    cede:	681b      	ldr	r3, [r3, #0]
    cee0:	429a      	cmp	r2, r3
    cee2:	d001      	beq.n	cee8 <ComGPRS+0xb28>
    cee4:	f7fc f85e 	bl	8fa4 <__stack_chk_fail>
    cee8:	f507 7759 	add.w	r7, r7, #868	; 0x364
    ceec:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    cef0:	46bd      	mov	sp, r7
    cef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cef4 <CallBackPressKey>:
//  true : When leaving the loop GL_Window_MainLoop
//  false : When leaving the loop GL_Window_MainLoop
//****************************************************************************

static bool CallBackPressKey(T_GL_HMESSAGE hMessage)
{
    cef4:	b580      	push	{r7, lr}
    cef6:	b084      	sub	sp, #16
    cef8:	af00      	add	r7, sp, #0
    cefa:	6078      	str	r0, [r7, #4]
    cefc:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    cf00:	f2c0 0302 	movt	r3, #2
    cf04:	681b      	ldr	r3, [r3, #0]
    cf06:	60fb      	str	r3, [r7, #12]
	T_GL_WCHAR ulKey;

	// Retrieve key pressed
	ulKey = GL_Message_GetKey(hMessage);
    cf08:	6878      	ldr	r0, [r7, #4]
    cf0a:	f014 fcd7 	bl	218bc <GL_Message_GetKey>
    cf0e:	4603      	mov	r3, r0
    cf10:	60bb      	str	r3, [r7, #8]

    // Sets the data user attached to the window
    GL_Message_SetUserData(hMessage, &ulKey, sizeof(ulKey));
    cf12:	f107 0308 	add.w	r3, r7, #8
    cf16:	6878      	ldr	r0, [r7, #4]
    cf18:	4619      	mov	r1, r3
    cf1a:	2204      	movs	r2, #4
    cf1c:	f014 fd04 	bl	21928 <GL_Message_SetUserData>

	// Will exit the application from the loop on GL_Window_MainLoop by returning
	// the result RES_PRESS_STATUS
	GL_Message_SetResult(hMessage, RES_PRESS_STATUS);
    cf20:	6878      	ldr	r0, [r7, #4]
    cf22:	2105      	movs	r1, #5
    cf24:	f014 fcee 	bl	21904 <GL_Message_SetResult>

	// Force the value to true when releasing the application from the main loop
	return true;
    cf28:	2301      	movs	r3, #1
}
    cf2a:	4618      	mov	r0, r3
    cf2c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    cf30:	f2c0 0302 	movt	r3, #2
    cf34:	68fa      	ldr	r2, [r7, #12]
    cf36:	681b      	ldr	r3, [r3, #0]
    cf38:	429a      	cmp	r2, r3
    cf3a:	d001      	beq.n	cf40 <CallBackPressKey+0x4c>
    cf3c:	f7fc f832 	bl	8fa4 <__stack_chk_fail>
    cf40:	f107 0710 	add.w	r7, r7, #16
    cf44:	46bd      	mov	sp, r7
    cf46:	bd80      	pop	{r7, pc}

0000cf48 <CallBackValidKey>:
//  true : When leaving the loop GL_Window_MainLoop
//  false : When leaving the loop GL_Window_MainLoop
//****************************************************************************

static bool CallBackValidKey(T_GL_HMESSAGE hMessage)
{
    cf48:	b580      	push	{r7, lr}
    cf4a:	b084      	sub	sp, #16
    cf4c:	af00      	add	r7, sp, #0
    cf4e:	6078      	str	r0, [r7, #4]
    cf50:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    cf54:	f2c0 0302 	movt	r3, #2
    cf58:	681b      	ldr	r3, [r3, #0]
    cf5a:	60fb      	str	r3, [r7, #12]
	// Will exit the application from the loop on GL_Window_MainLoop by returning
	// the result RES_VALID_STATUS
	GL_Message_SetResult(hMessage, RES_VALID_STATUS);
    cf5c:	6878      	ldr	r0, [r7, #4]
    cf5e:	2100      	movs	r1, #0
    cf60:	f014 fcd0 	bl	21904 <GL_Message_SetResult>

	// Force the value to true when releasing the application from the main loop
	return true;
    cf64:	2301      	movs	r3, #1
}
    cf66:	4618      	mov	r0, r3
    cf68:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    cf6c:	f2c0 0302 	movt	r3, #2
    cf70:	68fa      	ldr	r2, [r7, #12]
    cf72:	681b      	ldr	r3, [r3, #0]
    cf74:	429a      	cmp	r2, r3
    cf76:	d001      	beq.n	cf7c <CallBackValidKey+0x34>
    cf78:	f7fc f814 	bl	8fa4 <__stack_chk_fail>
    cf7c:	f107 0710 	add.w	r7, r7, #16
    cf80:	46bd      	mov	sp, r7
    cf82:	bd80      	pop	{r7, pc}

0000cf84 <CallBackCancelKey>:
//  true : When leaving the loop GL_Window_MainLoop.
//  false : When leaving the loop GL_Window_MainLoop.
//****************************************************************************

static bool CallBackCancelKey(T_GL_HMESSAGE hMessage)
{
    cf84:	b580      	push	{r7, lr}
    cf86:	b084      	sub	sp, #16
    cf88:	af00      	add	r7, sp, #0
    cf8a:	6078      	str	r0, [r7, #4]
    cf8c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    cf90:	f2c0 0302 	movt	r3, #2
    cf94:	681b      	ldr	r3, [r3, #0]
    cf96:	60fb      	str	r3, [r7, #12]
	// Will exit the application from the loop on GL_Window_MainLoop by returning
	// the result RES_CANCEL_STATUS
	GL_Message_SetResult(hMessage, RES_CANCEL_STATUS);
    cf98:	6878      	ldr	r0, [r7, #4]
    cf9a:	2101      	movs	r1, #1
    cf9c:	f014 fcb2 	bl	21904 <GL_Message_SetResult>

	// Force the value to true when releasing the application from the main loop
	return true;
    cfa0:	2301      	movs	r3, #1
}
    cfa2:	4618      	mov	r0, r3
    cfa4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    cfa8:	f2c0 0302 	movt	r3, #2
    cfac:	68fa      	ldr	r2, [r7, #12]
    cfae:	681b      	ldr	r3, [r3, #0]
    cfb0:	429a      	cmp	r2, r3
    cfb2:	d001      	beq.n	cfb8 <CallBackCancelKey+0x34>
    cfb4:	f7fb fff6 	bl	8fa4 <__stack_chk_fail>
    cfb8:	f107 0710 	add.w	r7, r7, #16
    cfbc:	46bd      	mov	sp, r7
    cfbe:	bd80      	pop	{r7, pc}

0000cfc0 <CallBackDownKey>:
//  true : When leaving the loop GL_Windpw_MainLoop.
//  false : When leaving the loop GL_Window_MainLoop.
//****************************************************************************

static bool CallBackDownKey(T_GL_HMESSAGE hMessage)
{
    cfc0:	b580      	push	{r7, lr}
    cfc2:	b084      	sub	sp, #16
    cfc4:	af00      	add	r7, sp, #0
    cfc6:	6078      	str	r0, [r7, #4]
    cfc8:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    cfcc:	f2c0 0302 	movt	r3, #2
    cfd0:	681b      	ldr	r3, [r3, #0]
    cfd2:	60fb      	str	r3, [r7, #12]
	// Will exit the application from the loop on GL_Window_MainLoop by returning
	// the result RES_DOWN_STATUS
	GL_Message_SetResult(hMessage, RES_DOWN_STATUS);
    cfd4:	6878      	ldr	r0, [r7, #4]
    cfd6:	2102      	movs	r1, #2
    cfd8:	f014 fc94 	bl	21904 <GL_Message_SetResult>

	// Force the value to true when releasing the application from the main loop
	return true;
    cfdc:	2301      	movs	r3, #1
}
    cfde:	4618      	mov	r0, r3
    cfe0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    cfe4:	f2c0 0302 	movt	r3, #2
    cfe8:	68fa      	ldr	r2, [r7, #12]
    cfea:	681b      	ldr	r3, [r3, #0]
    cfec:	429a      	cmp	r2, r3
    cfee:	d001      	beq.n	cff4 <CallBackDownKey+0x34>
    cff0:	f7fb ffd8 	bl	8fa4 <__stack_chk_fail>
    cff4:	f107 0710 	add.w	r7, r7, #16
    cff8:	46bd      	mov	sp, r7
    cffa:	bd80      	pop	{r7, pc}

0000cffc <CallBackUpKey>:
//  true : When leaving the loop GL_Window_MainLoop.
//  false : When leaving the loop GL_Window_MainLoop.
//****************************************************************************

static bool CallBackUpKey(T_GL_HMESSAGE hMessage)
{
    cffc:	b580      	push	{r7, lr}
    cffe:	b084      	sub	sp, #16
    d000:	af00      	add	r7, sp, #0
    d002:	6078      	str	r0, [r7, #4]
    d004:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    d008:	f2c0 0302 	movt	r3, #2
    d00c:	681b      	ldr	r3, [r3, #0]
    d00e:	60fb      	str	r3, [r7, #12]
	// Will exit the application from the loop on GL_Window_MainLoop by returning
	// the result RES_UP_STATUS
	GL_Message_SetResult(hMessage, RES_UP_STATUS);
    d010:	6878      	ldr	r0, [r7, #4]
    d012:	2103      	movs	r1, #3
    d014:	f014 fc76 	bl	21904 <GL_Message_SetResult>

	// Force the value to true when releasing the application from the main loop
	return true;
    d018:	2301      	movs	r3, #1
}
    d01a:	4618      	mov	r0, r3
    d01c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    d020:	f2c0 0302 	movt	r3, #2
    d024:	68fa      	ldr	r2, [r7, #12]
    d026:	681b      	ldr	r3, [r3, #0]
    d028:	429a      	cmp	r2, r3
    d02a:	d001      	beq.n	d030 <CallBackUpKey+0x34>
    d02c:	f7fb ffba 	bl	8fa4 <__stack_chk_fail>
    d030:	f107 0710 	add.w	r7, r7, #16
    d034:	46bd      	mov	sp, r7
    d036:	bd80      	pop	{r7, pc}

0000d038 <CallBackTimeout>:
//  true : When leaving the loop GL_Window_MainLoop.
//  false : When leaving the loop GL_Window_MainLoop.
//****************************************************************************

static bool CallBackTimeout(T_GL_HMESSAGE hMessage)
{
    d038:	b580      	push	{r7, lr}
    d03a:	b084      	sub	sp, #16
    d03c:	af00      	add	r7, sp, #0
    d03e:	6078      	str	r0, [r7, #4]
    d040:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    d044:	f2c0 0302 	movt	r3, #2
    d048:	681b      	ldr	r3, [r3, #0]
    d04a:	60fb      	str	r3, [r7, #12]
	// Will exit the application from the loop on GL_Window_MainLoop by returning
	// the result RES_TIMER_STATUS
	GL_Message_SetResult(hMessage, RES_TIMER_STATUS);
    d04c:	6878      	ldr	r0, [r7, #4]
    d04e:	2104      	movs	r1, #4
    d050:	f014 fc58 	bl	21904 <GL_Message_SetResult>

	// Stop the timer
	GL_Timer_Stop(GL_Message_GetWidget(hMessage));
    d054:	6878      	ldr	r0, [r7, #4]
    d056:	f014 fc43 	bl	218e0 <GL_Message_GetWidget>
    d05a:	4603      	mov	r3, r0
    d05c:	4618      	mov	r0, r3
    d05e:	f014 fcbd 	bl	219dc <GL_Timer_Stop>

	// Force the value to true when releasing the application from the main loop
	return true;
    d062:	2301      	movs	r3, #1
}
    d064:	4618      	mov	r0, r3
    d066:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    d06a:	f2c0 0302 	movt	r3, #2
    d06e:	68fa      	ldr	r2, [r7, #12]
    d070:	681b      	ldr	r3, [r3, #0]
    d072:	429a      	cmp	r2, r3
    d074:	d001      	beq.n	d07a <CallBackTimeout+0x42>
    d076:	f7fb ff95 	bl	8fa4 <__stack_chk_fail>
    d07a:	f107 0710 	add.w	r7, r7, #16
    d07e:	46bd      	mov	sp, r7
    d080:	bd80      	pop	{r7, pc}
    d082:	bf00      	nop

0000d084 <GoalCreateScreen>:
//   !NULL : The handle of the screen.
//   NULL : Screen failed
//****************************************************************************

T_GL_HWIDGET GoalCreateScreen (T_GL_HGRAPHIC_LIB hGraphicLib, const ST_DSP_LINE txLine[], ushort usMaxLine, T_GL_ENCODING_CHARSET eCharSet)
{
    d084:	b580      	push	{r7, lr}
    d086:	b090      	sub	sp, #64	; 0x40
    d088:	af00      	add	r7, sp, #0
    d08a:	60f8      	str	r0, [r7, #12]
    d08c:	60b9      	str	r1, [r7, #8]
    d08e:	603b      	str	r3, [r7, #0]
    d090:	4613      	mov	r3, r2
    d092:	80fb      	strh	r3, [r7, #6]
    d094:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    d098:	f2c0 0302 	movt	r3, #2
    d09c:	681b      	ldr	r3, [r3, #0]
    d09e:	63fb      	str	r3, [r7, #60]	; 0x3c
	bool bTouch;
	ushort usLine;

	// Build screen context with MAX labels and 4 buttons (Cancel, Valid, Down and Up)
	// *******************************************************************************
	GL_GraphicLib_SetCharset(hGraphicLib, eCharSet);                                  // Change the encoding charset of the graphic library
    d0a0:	68f8      	ldr	r0, [r7, #12]
    d0a2:	6839      	ldr	r1, [r7, #0]
    d0a4:	f014 fbc2 	bl	2182c <GL_GraphicLib_SetCharset>

	bTouch = GL_GraphicLib_IsTouchPresent(hGraphicLib);                               // Is it a touch screen?
    d0a8:	68f8      	ldr	r0, [r7, #12]
    d0aa:	f014 fbad 	bl	21808 <GL_GraphicLib_IsTouchPresent>
    d0ae:	4603      	mov	r3, r0
    d0b0:	757b      	strb	r3, [r7, #21]

	hWindow = GL_Window_Create(hGraphicLib);                                          // Create a window in the user area
    d0b2:	68f8      	ldr	r0, [r7, #12]
    d0b4:	f014 feae 	bl	21e14 <GL_Window_Create>
    d0b8:	61b8      	str	r0, [r7, #24]
	CHECK(hWindow!=NULL, lblKO);
    d0ba:	69bb      	ldr	r3, [r7, #24]
    d0bc:	2b00      	cmp	r3, #0
    d0be:	f000 8163 	beq.w	d388 <GoalCreateScreen+0x304>

	hTimer = GL_Timer_Create(hWindow);                                                // Create a timer on this window
    d0c2:	69b8      	ldr	r0, [r7, #24]
    d0c4:	f014 fc66 	bl	21994 <GL_Timer_Create>
    d0c8:	61f8      	str	r0, [r7, #28]
	CHECK(hTimer!=NULL, lblKO);
    d0ca:	69fb      	ldr	r3, [r7, #28]
    d0cc:	2b00      	cmp	r3, #0
    d0ce:	f000 815b 	beq.w	d388 <GoalCreateScreen+0x304>
	GL_Widget_SetId(hTimer, TIMER_ID);                                                // Timer Identifier TIMER_ID
    d0d2:	69f8      	ldr	r0, [r7, #28]
    d0d4:	2100      	movs	r1, #0
    d0d6:	f014 fd8f 	bl	21bf8 <GL_Widget_SetId>
	GL_Widget_RegisterCallback(hTimer, GL_EVENT_TIMER_OUT, CallBackTimeout);          // Call back when the timer expired
    d0da:	69f8      	ldr	r0, [r7, #28]
    d0dc:	2108      	movs	r1, #8
    d0de:	f24d 0239 	movw	r2, #53305	; 0xd039
    d0e2:	f2c0 0200 	movt	r2, #0
    d0e6:	f014 fcaf 	bl	21a48 <GL_Widget_RegisterCallback>

	hLayout = GL_Layout_Create(hWindow);                                              // Create a layout on this window
    d0ea:	69b8      	ldr	r0, [r7, #24]
    d0ec:	f014 fbd4 	bl	21898 <GL_Layout_Create>
    d0f0:	6238      	str	r0, [r7, #32]
	CHECK(hLayout!=NULL, lblKO);
    d0f2:	6a3b      	ldr	r3, [r7, #32]
    d0f4:	2b00      	cmp	r3, #0
    d0f6:	f000 8147 	beq.w	d388 <GoalCreateScreen+0x304>

	for (usLine=0; usLine<usMaxLine; usLine++)                                        // Build labels on this layout
    d0fa:	2300      	movs	r3, #0
    d0fc:	82fb      	strh	r3, [r7, #22]
    d0fe:	e03c      	b.n	d17a <GoalCreateScreen+0xf6>
	{
		hLabel = GL_Label_Create(hLayout);                                            // Create a label on this layout
    d100:	6a38      	ldr	r0, [r7, #32]
    d102:	f014 fbb7 	bl	21874 <GL_Label_Create>
    d106:	6278      	str	r0, [r7, #36]	; 0x24
		CHECK(hLabel!=NULL, lblKO);
    d108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d10a:	2b00      	cmp	r3, #0
    d10c:	f000 813c 	beq.w	d388 <GoalCreateScreen+0x304>
		GL_Widget_SetItem(hLabel, 0, usLine);                                         // Label location on this layout
    d110:	8afb      	ldrh	r3, [r7, #22]
    d112:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d114:	2100      	movs	r1, #0
    d116:	461a      	mov	r2, r3
    d118:	f014 fd80 	bl	21c1c <GL_Widget_SetItem>
		GL_Widget_SetText(hLabel, NULL);                                              // Clear text on this label
    d11c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d11e:	2100      	movs	r1, #0
    d120:	f014 fdfa 	bl	21d18 <GL_Widget_SetText>
		GL_Widget_SetShrink(hLabel, GL_DIRECTION_WIDTH);                              // Shrink beyond its size (No width scrolling cell if label goes over screen)
    d124:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d126:	2101      	movs	r1, #1
    d128:	f014 fdc0 	bl	21cac <GL_Widget_SetShrink>
		if (IsColorDisplay())                                                         // Color display?
    d12c:	f013 f978 	bl	20420 <IsColorDisplay>
    d130:	4603      	mov	r3, r0
    d132:	2b00      	cmp	r3, #0
    d134:	d00b      	beq.n	d14e <GoalCreateScreen+0xca>
			GL_Widget_SetFontScale(hLabel, txLine[usLine].xColor.xFont.eScale);       // Yes, font scale color
    d136:	8afb      	ldrh	r3, [r7, #22]
    d138:	22ac      	movs	r2, #172	; 0xac
    d13a:	fb02 f303 	mul.w	r3, r2, r3
    d13e:	68ba      	ldr	r2, [r7, #8]
    d140:	18d3      	adds	r3, r2, r3
    d142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    d144:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d146:	4619      	mov	r1, r3
    d148:	f014 fd0e 	bl	21b68 <GL_Widget_SetFontScale>
    d14c:	e00b      	b.n	d166 <GoalCreateScreen+0xe2>
		else
			GL_Widget_SetFontScale(hLabel, txLine[usLine].xBW.xFont.eScale);          // No, font scale B&W
    d14e:	8afb      	ldrh	r3, [r7, #22]
    d150:	22ac      	movs	r2, #172	; 0xac
    d152:	fb02 f303 	mul.w	r3, r2, r3
    d156:	68ba      	ldr	r2, [r7, #8]
    d158:	18d3      	adds	r3, r2, r3
    d15a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    d15e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d160:	4619      	mov	r1, r3
    d162:	f014 fd01 	bl	21b68 <GL_Widget_SetFontScale>
		GL_Widget_SetId(hLabel, LABEL_0_ID+usLine);                                   // Label identifier LABEL0_ID + (0..8)
    d166:	8afb      	ldrh	r3, [r7, #22]
    d168:	f503 7380 	add.w	r3, r3, #256	; 0x100
    d16c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d16e:	4619      	mov	r1, r3
    d170:	f014 fd42 	bl	21bf8 <GL_Widget_SetId>
	GL_Widget_RegisterCallback(hTimer, GL_EVENT_TIMER_OUT, CallBackTimeout);          // Call back when the timer expired

	hLayout = GL_Layout_Create(hWindow);                                              // Create a layout on this window
	CHECK(hLayout!=NULL, lblKO);

	for (usLine=0; usLine<usMaxLine; usLine++)                                        // Build labels on this layout
    d174:	8afb      	ldrh	r3, [r7, #22]
    d176:	3301      	adds	r3, #1
    d178:	82fb      	strh	r3, [r7, #22]
    d17a:	8afa      	ldrh	r2, [r7, #22]
    d17c:	88fb      	ldrh	r3, [r7, #6]
    d17e:	429a      	cmp	r2, r3
    d180:	d3be      	bcc.n	d100 <GoalCreateScreen+0x7c>
		else
			GL_Widget_SetFontScale(hLabel, txLine[usLine].xBW.xFont.eScale);          // No, font scale B&W
		GL_Widget_SetId(hLabel, LABEL_0_ID+usLine);                                   // Label identifier LABEL0_ID + (0..8)
	}

	hLayout2 = GL_Layout_Create(hLayout);                                             // Create a second layout on this layout
    d182:	6a38      	ldr	r0, [r7, #32]
    d184:	f014 fb88 	bl	21898 <GL_Layout_Create>
    d188:	62b8      	str	r0, [r7, #40]	; 0x28
	CHECK(hLayout2!=NULL, lblKO);
    d18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d18c:	2b00      	cmp	r3, #0
    d18e:	f000 80fb 	beq.w	d388 <GoalCreateScreen+0x304>
	GL_Widget_SetId(hLayout2, LAYOUT2_ID);                                            // Second layout identifier
    d192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d194:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    d198:	f014 fd2e 	bl	21bf8 <GL_Widget_SetId>
	GL_Widget_SetItem(hLayout2, 0, usLine);                                           // Second layout location on this layout
    d19c:	8afb      	ldrh	r3, [r7, #22]
    d19e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d1a0:	2100      	movs	r1, #0
    d1a2:	461a      	mov	r2, r3
    d1a4:	f014 fd3a 	bl	21c1c <GL_Widget_SetItem>
	GL_Widget_SetGrow(hLayout2, GL_DIRECTION_WIDTH);                                  // Grow beyond its size (Background width around layout will fill the complete cell)
    d1a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d1aa:	2101      	movs	r1, #1
    d1ac:	f014 fd12 	bl	21bd4 <GL_Widget_SetGrow>

	hButtonCan = GL_Button_Create(hLayout2);                                          // Create a cancel button on this second layout
    d1b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d1b2:	f014 f981 	bl	214b8 <GL_Button_Create>
    d1b6:	62f8      	str	r0, [r7, #44]	; 0x2c
	CHECK(hButtonCan!=NULL, lblKO);
    d1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d1ba:	2b00      	cmp	r3, #0
    d1bc:	f000 80e4 	beq.w	d388 <GoalCreateScreen+0x304>
	GL_Widget_SetSource(hButtonCan, "skin://images/cancel.wgu");                      // Set the cancel skinned image
    d1c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d1c2:	f243 0128 	movw	r1, #12328	; 0x3028
    d1c6:	f2c0 0102 	movt	r1, #2
    d1ca:	f014 fd93 	bl	21cf4 <GL_Widget_SetSource>
	GL_Widget_SetItem(hButtonCan, 0, 0);                                              // Button location on this layout
    d1ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d1d0:	2100      	movs	r1, #0
    d1d2:	2200      	movs	r2, #0
    d1d4:	f014 fd22 	bl	21c1c <GL_Widget_SetItem>
	GL_Widget_SetExpand(hButtonCan, GL_DIRECTION_WIDTH);                              // Expand button width
    d1d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d1da:	2101      	movs	r1, #1
    d1dc:	f014 fc8e 	bl	21afc <GL_Widget_SetExpand>
	GL_Widget_SetShortcut(hButtonCan, GL_KEY_CANCEL);                                 // Shortcut on this button
    d1e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d1e2:	f64f 0151 	movw	r1, #63569	; 0xf851
    d1e6:	f014 fd4f 	bl	21c88 <GL_Widget_SetShortcut>
	GL_Widget_SetId(hButtonCan, BUTTON_CAN_ID);                                       // Cancel button Identifier
    d1ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d1ec:	f44f 7140 	mov.w	r1, #768	; 0x300
    d1f0:	f014 fd02 	bl	21bf8 <GL_Widget_SetId>
	GL_Widget_SetGrow(hButtonCan, GL_DIRECTION_WIDTH);                                // Grow beyond its size (Background width around cancel button will fill the complete cell)
    d1f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d1f6:	2101      	movs	r1, #1
    d1f8:	f014 fcec 	bl	21bd4 <GL_Widget_SetGrow>
	GL_Widget_SetFocusable(hButtonCan, false);                                        // No focus on this button
    d1fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d1fe:	2100      	movs	r1, #0
    d200:	f014 fc8e 	bl	21b20 <GL_Widget_SetFocusable>
	GL_Widget_RegisterCallback(hButtonCan, GL_EVENT_STYLUS_CLICK, CallBackCancelKey); // Call back when key pressed
    d204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d206:	2167      	movs	r1, #103	; 0x67
    d208:	f64c 7285 	movw	r2, #53125	; 0xcf85
    d20c:	f2c0 0200 	movt	r2, #0
    d210:	f014 fc1a 	bl	21a48 <GL_Widget_RegisterCallback>

	hButtonDown = GL_Button_Create(hLayout2);                                         // Create a down button on this layout
    d214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d216:	f014 f94f 	bl	214b8 <GL_Button_Create>
    d21a:	6338      	str	r0, [r7, #48]	; 0x30
	CHECK(hButtonDown!=NULL, lblKO);
    d21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d21e:	2b00      	cmp	r3, #0
    d220:	f000 80b2 	beq.w	d388 <GoalCreateScreen+0x304>
	GL_Widget_SetSource(hButtonDown, "skin://images/downArrow.wgu");                  // Set the down arrow skinned image
    d224:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d226:	f243 0144 	movw	r1, #12356	; 0x3044
    d22a:	f2c0 0102 	movt	r1, #2
    d22e:	f014 fd61 	bl	21cf4 <GL_Widget_SetSource>
	GL_Widget_SetItem(hButtonDown, 1, 0);                                             // Button location on this layout
    d232:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d234:	2101      	movs	r1, #1
    d236:	2200      	movs	r2, #0
    d238:	f014 fcf0 	bl	21c1c <GL_Widget_SetItem>
	GL_Widget_SetExpand(hButtonDown, GL_DIRECTION_WIDTH);                             // Expand button width
    d23c:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d23e:	2101      	movs	r1, #1
    d240:	f014 fc5c 	bl	21afc <GL_Widget_SetExpand>
	GL_Widget_SetForeColor(hButtonDown, GL_COLOR_WHITE);                              // Foreground color
    d244:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d246:	f04f 31ff 	mov.w	r1, #4294967295
    d24a:	f014 fcb1 	bl	21bb0 <GL_Widget_SetForeColor>
	if (bTouch)
    d24e:	7d7b      	ldrb	r3, [r7, #21]
    d250:	2b00      	cmp	r3, #0
    d252:	d004      	beq.n	d25e <GoalCreateScreen+0x1da>
		GL_Widget_SetShortcut(hButtonDown, GL_KEY_DOT);                               // Shortcut on this button
    d254:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d256:	212e      	movs	r1, #46	; 0x2e
    d258:	f014 fd16 	bl	21c88 <GL_Widget_SetShortcut>
    d25c:	e004      	b.n	d268 <GoalCreateScreen+0x1e4>
	else
		GL_Widget_SetShortcut(hButtonDown, GL_KEY_DOWN);                              // Shortcut on this button
    d25e:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d260:	f64f 015a 	movw	r1, #63578	; 0xf85a
    d264:	f014 fd10 	bl	21c88 <GL_Widget_SetShortcut>
	GL_Widget_SetId(hButtonDown, BUTTON_DOWN_ID);                                     // Down button Identifier
    d268:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d26a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    d26e:	f014 fcc3 	bl	21bf8 <GL_Widget_SetId>
	GL_Widget_SetGrow(hButtonDown, GL_DIRECTION_WIDTH);                               // Grow beyond its size (Background width around down button will fill the complete cell)
    d272:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d274:	2101      	movs	r1, #1
    d276:	f014 fcad 	bl	21bd4 <GL_Widget_SetGrow>
	GL_Widget_SetFocusable(hButtonDown, false);                                       // No focus on this button
    d27a:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d27c:	2100      	movs	r1, #0
    d27e:	f014 fc4f 	bl	21b20 <GL_Widget_SetFocusable>
	GL_Widget_RegisterCallback(hButtonDown, GL_EVENT_STYLUS_CLICK, CallBackDownKey);  // Call back when key pressed
    d282:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d284:	2167      	movs	r1, #103	; 0x67
    d286:	f64c 72c1 	movw	r2, #53185	; 0xcfc1
    d28a:	f2c0 0200 	movt	r2, #0
    d28e:	f014 fbdb 	bl	21a48 <GL_Widget_RegisterCallback>

	hButtonUp = GL_Button_Create(hLayout2);                                           // Create a up button on this layout
    d292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d294:	f014 f910 	bl	214b8 <GL_Button_Create>
    d298:	6378      	str	r0, [r7, #52]	; 0x34
	CHECK(hButtonUp!=NULL, lblKO);
    d29a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d29c:	2b00      	cmp	r3, #0
    d29e:	d073      	beq.n	d388 <GoalCreateScreen+0x304>
	GL_Widget_SetSource(hButtonUp, "skin://images/upArrow.wgu");                      // Set the up arrow skinned image
    d2a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d2a2:	f243 0160 	movw	r1, #12384	; 0x3060
    d2a6:	f2c0 0102 	movt	r1, #2
    d2aa:	f014 fd23 	bl	21cf4 <GL_Widget_SetSource>
	GL_Widget_SetItem(hButtonUp, 2, 0);                                               // Button location on this layout
    d2ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d2b0:	2102      	movs	r1, #2
    d2b2:	2200      	movs	r2, #0
    d2b4:	f014 fcb2 	bl	21c1c <GL_Widget_SetItem>
	GL_Widget_SetExpand(hButtonUp, GL_DIRECTION_WIDTH);                               // Expand button width
    d2b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d2ba:	2101      	movs	r1, #1
    d2bc:	f014 fc1e 	bl	21afc <GL_Widget_SetExpand>
	GL_Widget_SetForeColor(hButtonUp, GL_COLOR_WHITE);                                // Foreground color
    d2c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d2c2:	f04f 31ff 	mov.w	r1, #4294967295
    d2c6:	f014 fc73 	bl	21bb0 <GL_Widget_SetForeColor>
	if (bTouch)                                                                       // Touch screen?
    d2ca:	7d7b      	ldrb	r3, [r7, #21]
    d2cc:	2b00      	cmp	r3, #0
    d2ce:	d005      	beq.n	d2dc <GoalCreateScreen+0x258>
		GL_Widget_SetShortcut(hButtonUp, GL_KEY_F);                                   // Yes, Shortcut (Key F) on this button
    d2d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d2d2:	f64f 0154 	movw	r1, #63572	; 0xf854
    d2d6:	f014 fcd7 	bl	21c88 <GL_Widget_SetShortcut>
    d2da:	e004      	b.n	d2e6 <GoalCreateScreen+0x262>
	else
		GL_Widget_SetShortcut(hButtonUp, GL_KEY_UP);                                  // No, Shortcut (Key Up) on this button
    d2dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d2de:	f64f 0159 	movw	r1, #63577	; 0xf859
    d2e2:	f014 fcd1 	bl	21c88 <GL_Widget_SetShortcut>
	GL_Widget_SetId(hButtonUp, BUTTON_UP_ID);                                         // Up button Identifier
    d2e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d2e8:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    d2ec:	f014 fc84 	bl	21bf8 <GL_Widget_SetId>
	GL_Widget_SetGrow(hButtonUp, GL_DIRECTION_WIDTH);                                 // Grow beyond its size (Background width around up button will fill the complete cell)
    d2f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d2f2:	2101      	movs	r1, #1
    d2f4:	f014 fc6e 	bl	21bd4 <GL_Widget_SetGrow>
	GL_Widget_SetFocusable(hButtonUp, false);                                         // No focus on this button
    d2f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d2fa:	2100      	movs	r1, #0
    d2fc:	f014 fc10 	bl	21b20 <GL_Widget_SetFocusable>
	GL_Widget_RegisterCallback(hButtonUp, GL_EVENT_STYLUS_CLICK, CallBackUpKey);      // Call back when key pressed
    d300:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d302:	2167      	movs	r1, #103	; 0x67
    d304:	f64c 72fd 	movw	r2, #53245	; 0xcffd
    d308:	f2c0 0200 	movt	r2, #0
    d30c:	f014 fb9c 	bl	21a48 <GL_Widget_RegisterCallback>

	hButtonVal = GL_Button_Create(hLayout2);                                          // Create a valid button on this second layout
    d310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d312:	f014 f8d1 	bl	214b8 <GL_Button_Create>
    d316:	63b8      	str	r0, [r7, #56]	; 0x38
	CHECK(hButtonVal!=NULL, lblKO);
    d318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d31a:	2b00      	cmp	r3, #0
    d31c:	d034      	beq.n	d388 <GoalCreateScreen+0x304>
	GL_Widget_SetSource(hButtonVal, "skin://images/validation.wgu");                  // Set the valid skinned image
    d31e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    d320:	f243 017c 	movw	r1, #12412	; 0x307c
    d324:	f2c0 0102 	movt	r1, #2
    d328:	f014 fce4 	bl	21cf4 <GL_Widget_SetSource>
	GL_Widget_SetItem(hButtonVal, 3, 0);                                              // Button location on this layout
    d32c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    d32e:	2103      	movs	r1, #3
    d330:	2200      	movs	r2, #0
    d332:	f014 fc73 	bl	21c1c <GL_Widget_SetItem>
	GL_Widget_SetExpand(hButtonVal, GL_DIRECTION_WIDTH);                              // Expand button width
    d336:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    d338:	2101      	movs	r1, #1
    d33a:	f014 fbdf 	bl	21afc <GL_Widget_SetExpand>
	GL_Widget_SetShortcut(hButtonVal, GL_KEY_VALID);                                  // Shortcut on this button
    d33e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    d340:	f64f 0150 	movw	r1, #63568	; 0xf850
    d344:	f014 fca0 	bl	21c88 <GL_Widget_SetShortcut>
	GL_Widget_SetId(hButtonVal, BUTTON_VAL_ID);                                       // Valid button Identifier
    d348:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    d34a:	f44f 7100 	mov.w	r1, #512	; 0x200
    d34e:	f014 fc53 	bl	21bf8 <GL_Widget_SetId>
	GL_Widget_SetGrow(hButtonVal, GL_DIRECTION_WIDTH);                                // Grow beyond its size (Background width around valid button will fill the complete cell)
    d352:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    d354:	2101      	movs	r1, #1
    d356:	f014 fc3d 	bl	21bd4 <GL_Widget_SetGrow>
	GL_Widget_SetFocusable(hButtonVal, false);                                        // No focus on this button
    d35a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    d35c:	2100      	movs	r1, #0
    d35e:	f014 fbdf 	bl	21b20 <GL_Widget_SetFocusable>
	GL_Widget_RegisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey);  // Call back when key pressed
    d362:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    d364:	2167      	movs	r1, #103	; 0x67
    d366:	f64c 7249 	movw	r2, #53065	; 0xcf49
    d36a:	f2c0 0200 	movt	r2, #0
    d36e:	f014 fb6b 	bl	21a48 <GL_Widget_RegisterCallback>

	if(!bTouch)                                                                       // Touch screen?
    d372:	7d7b      	ldrb	r3, [r7, #21]
    d374:	f083 0301 	eor.w	r3, r3, #1
    d378:	b2db      	uxtb	r3, r3
    d37a:	2b00      	cmp	r3, #0
    d37c:	d00d      	beq.n	d39a <GoalCreateScreen+0x316>
		GL_Widget_SetVisible(hLayout2, false);                                        // No, do not show second layout (keep shortcut access on key pressed)
    d37e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d380:	2100      	movs	r1, #0
    d382:	f014 fd11 	bl	21da8 <GL_Widget_SetVisible>

	goto lblEnd;
    d386:	e008      	b.n	d39a <GoalCreateScreen+0x316>

	// Errors treatment
    // ****************
lblKO:                                                                                // Window creation failed
	if (hWindow)
    d388:	69bb      	ldr	r3, [r7, #24]
    d38a:	2b00      	cmp	r3, #0
    d38c:	d007      	beq.n	d39e <GoalCreateScreen+0x31a>
	{
		GL_Widget_Destroy(hWindow);                                                   // Destroy window and all widgets
    d38e:	69b8      	ldr	r0, [r7, #24]
    d390:	f014 fb36 	bl	21a00 <GL_Widget_Destroy>
		hWindow=NULL;
    d394:	2300      	movs	r3, #0
    d396:	61bb      	str	r3, [r7, #24]
	}
	goto lblEnd;
    d398:	e001      	b.n	d39e <GoalCreateScreen+0x31a>
	GL_Widget_RegisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey);  // Call back when key pressed

	if(!bTouch)                                                                       // Touch screen?
		GL_Widget_SetVisible(hLayout2, false);                                        // No, do not show second layout (keep shortcut access on key pressed)

	goto lblEnd;
    d39a:	bf00      	nop
    d39c:	e000      	b.n	d3a0 <GoalCreateScreen+0x31c>
	if (hWindow)
	{
		GL_Widget_Destroy(hWindow);                                                   // Destroy window and all widgets
		hWindow=NULL;
	}
	goto lblEnd;
    d39e:	bf00      	nop
lblEnd:
	return hWindow;
    d3a0:	69bb      	ldr	r3, [r7, #24]
}
    d3a2:	4618      	mov	r0, r3
    d3a4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    d3a8:	f2c0 0302 	movt	r3, #2
    d3ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d3ae:	681b      	ldr	r3, [r3, #0]
    d3b0:	429a      	cmp	r2, r3
    d3b2:	d001      	beq.n	d3b8 <GoalCreateScreen+0x334>
    d3b4:	f7fb fdf6 	bl	8fa4 <__stack_chk_fail>
    d3b8:	f107 0740 	add.w	r7, r7, #64	; 0x40
    d3bc:	46bd      	mov	sp, r7
    d3be:	bd80      	pop	{r7, pc}

0000d3c0 <GoalClrScreen>:
//   >=0 : Clear screen done.
//   <0 : Clear screen failed.
//****************************************************************************

int GoalClrScreen(T_GL_HWIDGET hWindow, T_GL_COLOR ulBackColor, unsigned int uiKeys, bool bRefresh)
{
    d3c0:	b580      	push	{r7, lr}
    d3c2:	b090      	sub	sp, #64	; 0x40
    d3c4:	af04      	add	r7, sp, #16
    d3c6:	60f8      	str	r0, [r7, #12]
    d3c8:	60b9      	str	r1, [r7, #8]
    d3ca:	607a      	str	r2, [r7, #4]
    d3cc:	70fb      	strb	r3, [r7, #3]
    d3ce:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    d3d2:	f2c0 0302 	movt	r3, #2
    d3d6:	681b      	ldr	r3, [r3, #0]
    d3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	T_GL_HWIDGET hLabel, hButtonVal, hButtonCan, hButtonDown, hButtonUp;
	int iRet;

	// Disable the complete second layout
	// **********************************
	hButtonCan = GL_Widget_SearchId(hWindow, BUTTON_CAN_ID);      // Retrieve the cancel button on this second layout
    d3da:	68f8      	ldr	r0, [r7, #12]
    d3dc:	f44f 7140 	mov.w	r1, #768	; 0x300
    d3e0:	f014 fb44 	bl	21a6c <GL_Widget_SearchId>
    d3e4:	61b8      	str	r0, [r7, #24]
	CHECK(hButtonCan!=NULL, lblKO);
    d3e6:	69bb      	ldr	r3, [r7, #24]
    d3e8:	2b00      	cmp	r3, #0
    d3ea:	f000 80d3 	beq.w	d594 <GoalClrScreen+0x1d4>
	hButtonDown = GL_Widget_SearchId(hWindow, BUTTON_DOWN_ID);    // Retrieve the down button on this second layout
    d3ee:	68f8      	ldr	r0, [r7, #12]
    d3f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    d3f4:	f014 fb3a 	bl	21a6c <GL_Widget_SearchId>
    d3f8:	61f8      	str	r0, [r7, #28]
	CHECK(hButtonDown!=NULL, lblKO);
    d3fa:	69fb      	ldr	r3, [r7, #28]
    d3fc:	2b00      	cmp	r3, #0
    d3fe:	f000 80c9 	beq.w	d594 <GoalClrScreen+0x1d4>
	hButtonUp = GL_Widget_SearchId(hWindow, BUTTON_UP_ID);        // Retrieve the up button on this second layout
    d402:	68f8      	ldr	r0, [r7, #12]
    d404:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    d408:	f014 fb30 	bl	21a6c <GL_Widget_SearchId>
    d40c:	6238      	str	r0, [r7, #32]
	CHECK(hButtonUp!=NULL, lblKO);
    d40e:	6a3b      	ldr	r3, [r7, #32]
    d410:	2b00      	cmp	r3, #0
    d412:	f000 80bf 	beq.w	d594 <GoalClrScreen+0x1d4>
	hButtonVal = GL_Widget_SearchId(hWindow, BUTTON_VAL_ID);      // Retrieve the valid button on this second layout
    d416:	68f8      	ldr	r0, [r7, #12]
    d418:	f44f 7100 	mov.w	r1, #512	; 0x200
    d41c:	f014 fb26 	bl	21a6c <GL_Widget_SearchId>
    d420:	6278      	str	r0, [r7, #36]	; 0x24
	CHECK(hButtonVal!=NULL, lblKO);
    d422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d424:	2b00      	cmp	r3, #0
    d426:	f000 80b5 	beq.w	d594 <GoalClrScreen+0x1d4>

	GL_Widget_SetVisible(hButtonCan, false);                      // Blind the cancel button
    d42a:	69b8      	ldr	r0, [r7, #24]
    d42c:	2100      	movs	r1, #0
    d42e:	f014 fcbb 	bl	21da8 <GL_Widget_SetVisible>
	GL_Widget_UnregisterCallback(hButtonCan, GL_EVENT_STYLUS_CLICK, CallBackCancelKey); // Unregister call back on cancel button
    d432:	69b8      	ldr	r0, [r7, #24]
    d434:	2167      	movs	r1, #103	; 0x67
    d436:	f64c 7285 	movw	r2, #53125	; 0xcf85
    d43a:	f2c0 0200 	movt	r2, #0
    d43e:	f014 fcd7 	bl	21df0 <GL_Widget_UnregisterCallback>

	GL_Widget_SetVisible(hButtonDown, false);                     // Blind the down button
    d442:	69f8      	ldr	r0, [r7, #28]
    d444:	2100      	movs	r1, #0
    d446:	f014 fcaf 	bl	21da8 <GL_Widget_SetVisible>
	GL_Widget_UnregisterCallback(hButtonDown, GL_EVENT_STYLUS_CLICK, CallBackDownKey); // Unregister call back on down button
    d44a:	69f8      	ldr	r0, [r7, #28]
    d44c:	2167      	movs	r1, #103	; 0x67
    d44e:	f64c 72c1 	movw	r2, #53185	; 0xcfc1
    d452:	f2c0 0200 	movt	r2, #0
    d456:	f014 fccb 	bl	21df0 <GL_Widget_UnregisterCallback>

	GL_Widget_SetVisible(hButtonUp, false);                       // Blind the up button
    d45a:	6a38      	ldr	r0, [r7, #32]
    d45c:	2100      	movs	r1, #0
    d45e:	f014 fca3 	bl	21da8 <GL_Widget_SetVisible>
	GL_Widget_UnregisterCallback(hButtonUp, GL_EVENT_STYLUS_CLICK, CallBackUpKey); // Unregister call back on up button
    d462:	6a38      	ldr	r0, [r7, #32]
    d464:	2167      	movs	r1, #103	; 0x67
    d466:	f64c 72fd 	movw	r2, #53245	; 0xcffd
    d46a:	f2c0 0200 	movt	r2, #0
    d46e:	f014 fcbf 	bl	21df0 <GL_Widget_UnregisterCallback>

	GL_Widget_SetVisible(hButtonVal, false);                      // Blind the valid button
    d472:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d474:	2100      	movs	r1, #0
    d476:	f014 fc97 	bl	21da8 <GL_Widget_SetVisible>
	GL_Widget_UnregisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey); // Unregister call back on valid button
    d47a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d47c:	2167      	movs	r1, #103	; 0x67
    d47e:	f64c 7249 	movw	r2, #53065	; 0xcf49
    d482:	f2c0 0200 	movt	r2, #0
    d486:	f014 fcb3 	bl	21df0 <GL_Widget_UnregisterCallback>

	// Set the second layout with the right properties
	// ***********************************************
	if ((uiKeys & KEY_CANCEL) == KEY_CANCEL)                      // Cancel key?
    d48a:	687b      	ldr	r3, [r7, #4]
    d48c:	f003 0302 	and.w	r3, r3, #2
    d490:	2b00      	cmp	r3, #0
    d492:	d00b      	beq.n	d4ac <GoalClrScreen+0xec>
	{
		GL_Widget_SetVisible(hButtonCan, true);                   // Yes, show the cancel key on this second layout
    d494:	69b8      	ldr	r0, [r7, #24]
    d496:	2101      	movs	r1, #1
    d498:	f014 fc86 	bl	21da8 <GL_Widget_SetVisible>
		GL_Widget_RegisterCallback(hButtonCan, GL_EVENT_STYLUS_CLICK, CallBackCancelKey); // Register call back when cancel key pressed or touched
    d49c:	69b8      	ldr	r0, [r7, #24]
    d49e:	2167      	movs	r1, #103	; 0x67
    d4a0:	f64c 7285 	movw	r2, #53125	; 0xcf85
    d4a4:	f2c0 0200 	movt	r2, #0
    d4a8:	f014 face 	bl	21a48 <GL_Widget_RegisterCallback>
	}

	if ((uiKeys & KEY_DOWN) == KEY_DOWN)                          // Down key?
    d4ac:	687b      	ldr	r3, [r7, #4]
    d4ae:	f003 0308 	and.w	r3, r3, #8
    d4b2:	2b00      	cmp	r3, #0
    d4b4:	d00b      	beq.n	d4ce <GoalClrScreen+0x10e>
	{
		GL_Widget_SetVisible(hButtonDown, true);                  // Yes, show the down key on this second layout
    d4b6:	69f8      	ldr	r0, [r7, #28]
    d4b8:	2101      	movs	r1, #1
    d4ba:	f014 fc75 	bl	21da8 <GL_Widget_SetVisible>
		GL_Widget_RegisterCallback(hButtonDown, GL_EVENT_STYLUS_CLICK, CallBackDownKey); // Register call back when down key pressed or touched
    d4be:	69f8      	ldr	r0, [r7, #28]
    d4c0:	2167      	movs	r1, #103	; 0x67
    d4c2:	f64c 72c1 	movw	r2, #53185	; 0xcfc1
    d4c6:	f2c0 0200 	movt	r2, #0
    d4ca:	f014 fabd 	bl	21a48 <GL_Widget_RegisterCallback>
	}

	if ((uiKeys & KEY_UP) == KEY_UP)                              // Up key?
    d4ce:	687b      	ldr	r3, [r7, #4]
    d4d0:	f003 0304 	and.w	r3, r3, #4
    d4d4:	2b00      	cmp	r3, #0
    d4d6:	d00b      	beq.n	d4f0 <GoalClrScreen+0x130>
	{
		GL_Widget_SetVisible(hButtonUp, true);                    // Yes, show the up key on this second layout
    d4d8:	6a38      	ldr	r0, [r7, #32]
    d4da:	2101      	movs	r1, #1
    d4dc:	f014 fc64 	bl	21da8 <GL_Widget_SetVisible>
		GL_Widget_RegisterCallback(hButtonUp, GL_EVENT_STYLUS_CLICK, CallBackUpKey); // Register call back when up key pressed or touched
    d4e0:	6a38      	ldr	r0, [r7, #32]
    d4e2:	2167      	movs	r1, #103	; 0x67
    d4e4:	f64c 72fd 	movw	r2, #53245	; 0xcffd
    d4e8:	f2c0 0200 	movt	r2, #0
    d4ec:	f014 faac 	bl	21a48 <GL_Widget_RegisterCallback>
	}

	if ((uiKeys & KEY_VALID) == KEY_VALID)                        // Valid key?
    d4f0:	687b      	ldr	r3, [r7, #4]
    d4f2:	f003 0301 	and.w	r3, r3, #1
    d4f6:	2b00      	cmp	r3, #0
    d4f8:	d00b      	beq.n	d512 <GoalClrScreen+0x152>
	{
		GL_Widget_SetVisible(hButtonVal, true);                   // Yes, show the valid key on this second layout
    d4fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d4fc:	2101      	movs	r1, #1
    d4fe:	f014 fc53 	bl	21da8 <GL_Widget_SetVisible>
		GL_Widget_RegisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey); // Register call back when key pressed or touched
    d502:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d504:	2167      	movs	r1, #103	; 0x67
    d506:	f64c 7249 	movw	r2, #53065	; 0xcf49
    d50a:	f2c0 0200 	movt	r2, #0
    d50e:	f014 fa9b 	bl	21a48 <GL_Widget_RegisterCallback>
	}

	if (IsColorDisplay())                                         // Color display?
    d512:	f012 ff85 	bl	20420 <IsColorDisplay>
    d516:	4603      	mov	r3, r0
    d518:	2b00      	cmp	r3, #0
    d51a:	d004      	beq.n	d526 <GoalClrScreen+0x166>
		GL_Widget_SetBackColor(hWindow, ulBackColor);             // Yes, set window back color
    d51c:	68f8      	ldr	r0, [r7, #12]
    d51e:	68b9      	ldr	r1, [r7, #8]
    d520:	f014 fac8 	bl	21ab4 <GL_Widget_SetBackColor>
    d524:	e006      	b.n	d534 <GoalClrScreen+0x174>
	else
	{
		ulBackColor = GL_COLOR_WHITE;                             // No, force window back color to white
    d526:	f04f 33ff 	mov.w	r3, #4294967295
    d52a:	60bb      	str	r3, [r7, #8]
		GL_Widget_SetBackColor(hWindow, ulBackColor);
    d52c:	68f8      	ldr	r0, [r7, #12]
    d52e:	68b9      	ldr	r1, [r7, #8]
    d530:	f014 fac0 	bl	21ab4 <GL_Widget_SetBackColor>
	}

	// Clear screen
	// ************
	usIdx=0;
    d534:	2300      	movs	r3, #0
    d536:	827b      	strh	r3, [r7, #18]
	while(1)
	{
		hLabel = GL_Widget_SearchId(hWindow, LABEL_0_ID+usIdx++);  // Get label from its id
    d538:	8a7b      	ldrh	r3, [r7, #18]
    d53a:	f503 7380 	add.w	r3, r3, #256	; 0x100
    d53e:	8a7a      	ldrh	r2, [r7, #18]
    d540:	3201      	adds	r2, #1
    d542:	827a      	strh	r2, [r7, #18]
    d544:	68f8      	ldr	r0, [r7, #12]
    d546:	4619      	mov	r1, r3
    d548:	f014 fa90 	bl	21a6c <GL_Widget_SearchId>
    d54c:	62b8      	str	r0, [r7, #40]	; 0x28
		if(hLabel == NULL)
    d54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d550:	2b00      	cmp	r3, #0
    d552:	d014      	beq.n	d57e <GoalClrScreen+0x1be>
			break;
		GL_Widget_SetText(hLabel, NULL);                          // Remove label text
    d554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d556:	2100      	movs	r1, #0
    d558:	f014 fbde 	bl	21d18 <GL_Widget_SetText>
		GL_Widget_SetBorders(hLabel, 0, 0, 0, 0, GL_UNIT_PIXEL, ulBackColor); // Remove border with window back color
    d55c:	2300      	movs	r3, #0
    d55e:	9300      	str	r3, [sp, #0]
    d560:	2300      	movs	r3, #0
    d562:	9301      	str	r3, [sp, #4]
    d564:	68bb      	ldr	r3, [r7, #8]
    d566:	9302      	str	r3, [sp, #8]
    d568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d56a:	2100      	movs	r1, #0
    d56c:	2200      	movs	r2, #0
    d56e:	2300      	movs	r3, #0
    d570:	f014 fab2 	bl	21ad8 <GL_Widget_SetBorders>
		GL_Widget_SetBackColor(hLabel, ulBackColor);              // Paint label back color with window back color
    d574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d576:	68b9      	ldr	r1, [r7, #8]
    d578:	f014 fa9c 	bl	21ab4 <GL_Widget_SetBackColor>
	}
    d57c:	e7dc      	b.n	d538 <GoalClrScreen+0x178>
	usIdx=0;
	while(1)
	{
		hLabel = GL_Widget_SearchId(hWindow, LABEL_0_ID+usIdx++);  // Get label from its id
		if(hLabel == NULL)
			break;
    d57e:	bf00      	nop
		GL_Widget_SetText(hLabel, NULL);                          // Remove label text
		GL_Widget_SetBorders(hLabel, 0, 0, 0, 0, GL_UNIT_PIXEL, ulBackColor); // Remove border with window back color
		GL_Widget_SetBackColor(hLabel, ulBackColor);              // Paint label back color with window back color
	}

	if (bRefresh)                                                 // Refresh window?
    d580:	78fb      	ldrb	r3, [r7, #3]
    d582:	2b00      	cmp	r3, #0
    d584:	d003      	beq.n	d58e <GoalClrScreen+0x1ce>
		GL_Window_Dispatch(hWindow, 0);                           // Yes, refresh it
    d586:	68f8      	ldr	r0, [r7, #12]
    d588:	2100      	movs	r1, #0
    d58a:	f014 fc55 	bl	21e38 <GL_Window_Dispatch>

	iRet=1;
    d58e:	2301      	movs	r3, #1
    d590:	617b      	str	r3, [r7, #20]
	goto lblEnd;
    d592:	e003      	b.n	d59c <GoalClrScreen+0x1dc>

	// Errors treatment
    // ****************
lblKO:                                                            // Clear screen failed
	iRet=-1;
    d594:	f04f 33ff 	mov.w	r3, #4294967295
    d598:	617b      	str	r3, [r7, #20]
	goto lblEnd;
    d59a:	bf00      	nop
lblEnd:
	return iRet;
    d59c:	697b      	ldr	r3, [r7, #20]
}
    d59e:	4618      	mov	r0, r3
    d5a0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    d5a4:	f2c0 0302 	movt	r3, #2
    d5a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d5aa:	681b      	ldr	r3, [r3, #0]
    d5ac:	429a      	cmp	r2, r3
    d5ae:	d001      	beq.n	d5b4 <GoalClrScreen+0x1f4>
    d5b0:	f7fb fcf8 	bl	8fa4 <__stack_chk_fail>
    d5b4:	f107 0730 	add.w	r7, r7, #48	; 0x30
    d5b8:	46bd      	mov	sp, r7
    d5ba:	bd80      	pop	{r7, pc}

0000d5bc <GoalRefreshScreen>:
//   hWindow (I-) : Window context handle.
// This function has return value.
//****************************************************************************

void GoalRefreshScreen(T_GL_HWIDGET hWindow)
{
    d5bc:	b580      	push	{r7, lr}
    d5be:	b084      	sub	sp, #16
    d5c0:	af00      	add	r7, sp, #0
    d5c2:	6078      	str	r0, [r7, #4]
    d5c4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    d5c8:	f2c0 0302 	movt	r3, #2
    d5cc:	681b      	ldr	r3, [r3, #0]
    d5ce:	60fb      	str	r3, [r7, #12]
    // ***************
		// Empty

	// Refresh screen
	// **************
	GL_Window_Dispatch(hWindow, 0);  // Refresh the window and dispatch all messages received
    d5d0:	6878      	ldr	r0, [r7, #4]
    d5d2:	2100      	movs	r1, #0
    d5d4:	f014 fc30 	bl	21e38 <GL_Window_Dispatch>
}
    d5d8:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    d5dc:	f2c0 0302 	movt	r3, #2
    d5e0:	68fa      	ldr	r2, [r7, #12]
    d5e2:	681b      	ldr	r3, [r3, #0]
    d5e4:	429a      	cmp	r2, r3
    d5e6:	d001      	beq.n	d5ec <GoalRefreshScreen+0x30>
    d5e8:	f7fb fcdc 	bl	8fa4 <__stack_chk_fail>
    d5ec:	f107 0710 	add.w	r7, r7, #16
    d5f0:	46bd      	mov	sp, r7
    d5f2:	bd80      	pop	{r7, pc}

0000d5f4 <GoalDspLine>:
//   >=0 : Display line done (Exit screen: 0=timeout,GL_KEY_CANCEL,GL_KEY_VALID).
//   <0 : Display line failed.
//****************************************************************************

int GoalDspLine(T_GL_HWIDGET hWindow, ushort usLine, char *pcText, const ST_DSP_LINE* pxLine, ulong ulTimeOut, bool bRefresh)
{
    d5f4:	b590      	push	{r4, r7, lr}
    d5f6:	b08f      	sub	sp, #60	; 0x3c
    d5f8:	af04      	add	r7, sp, #16
    d5fa:	6178      	str	r0, [r7, #20]
    d5fc:	60fa      	str	r2, [r7, #12]
    d5fe:	60bb      	str	r3, [r7, #8]
    d600:	460b      	mov	r3, r1
    d602:	827b      	strh	r3, [r7, #18]
    d604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d606:	607b      	str	r3, [r7, #4]
    d608:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    d60c:	747b      	strb	r3, [r7, #17]
    d60e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    d612:	f2c0 0302 	movt	r3, #2
    d616:	681b      	ldr	r3, [r3, #0]
    d618:	627b      	str	r3, [r7, #36]	; 0x24
	T_GL_HWIDGET hLabel;
	int iRet;

	// Display line
	// ************
	CHECK(pxLine!=NULL, lblKO);
    d61a:	68bb      	ldr	r3, [r7, #8]
    d61c:	2b00      	cmp	r3, #0
    d61e:	f000 81a7 	beq.w	d970 <GoalDspLine+0x37c>

	hLabel = GL_Widget_SearchId(hWindow, LABEL_0_ID+usLine); // Get label from its id
    d622:	8a7b      	ldrh	r3, [r7, #18]
    d624:	f503 7380 	add.w	r3, r3, #256	; 0x100
    d628:	6978      	ldr	r0, [r7, #20]
    d62a:	4619      	mov	r1, r3
    d62c:	f014 fa1e 	bl	21a6c <GL_Widget_SearchId>
    d630:	6238      	str	r0, [r7, #32]
	CHECK(hLabel!=NULL, lblKO);
    d632:	6a3b      	ldr	r3, [r7, #32]
    d634:	2b00      	cmp	r3, #0
    d636:	f000 819b 	beq.w	d970 <GoalDspLine+0x37c>

	if (pcText)                                              // Null text?
    d63a:	68fb      	ldr	r3, [r7, #12]
    d63c:	2b00      	cmp	r3, #0
    d63e:	d00c      	beq.n	d65a <GoalDspLine+0x66>
	{
		GL_Widget_SetVisible(hLabel, true);
    d640:	6a38      	ldr	r0, [r7, #32]
    d642:	2101      	movs	r1, #1
    d644:	f014 fbb0 	bl	21da8 <GL_Widget_SetVisible>
		GL_Widget_SetText(hLabel, "%s", pcText);             // No, show text (add %s to allow '%' to be displayed)
    d648:	6a38      	ldr	r0, [r7, #32]
    d64a:	f243 019c 	movw	r1, #12444	; 0x309c
    d64e:	f2c0 0102 	movt	r1, #2
    d652:	68fa      	ldr	r2, [r7, #12]
    d654:	f014 fb60 	bl	21d18 <GL_Widget_SetText>
    d658:	e003      	b.n	d662 <GoalDspLine+0x6e>
	}
	else
		GL_Widget_SetVisible(hLabel, false);                 // Yes, blind text (line is removed)
    d65a:	6a38      	ldr	r0, [r7, #32]
    d65c:	2100      	movs	r1, #0
    d65e:	f014 fba3 	bl	21da8 <GL_Widget_SetVisible>

	if (IsColorDisplay())                                    // Color display?
    d662:	f012 fedd 	bl	20420 <IsColorDisplay>
    d666:	4603      	mov	r3, r0
    d668:	2b00      	cmp	r3, #0
    d66a:	d074      	beq.n	d756 <GoalDspLine+0x162>
	{                                                        // Yes
		// Color properties
		// ================
		GL_Widget_SetTextAlign(hLabel, pxLine->xColor.eTextAlign);      // Text alignment
    d66c:	68bb      	ldr	r3, [r7, #8]
    d66e:	681b      	ldr	r3, [r3, #0]
    d670:	6a38      	ldr	r0, [r7, #32]
    d672:	4619      	mov	r1, r3
    d674:	f014 fb62 	bl	21d3c <GL_Widget_SetTextAlign>
		GL_Widget_SetBackAlign(hLabel, pxLine->xColor.eBackAlign);      // Background alignment
    d678:	68bb      	ldr	r3, [r7, #8]
    d67a:	685b      	ldr	r3, [r3, #4]
    d67c:	6a38      	ldr	r0, [r7, #32]
    d67e:	4619      	mov	r1, r3
    d680:	f014 fa06 	bl	21a90 <GL_Widget_SetBackAlign>
		GL_Widget_SetForeColor(hLabel, pxLine->xColor.ulPen);           // Pen color
    d684:	68bb      	ldr	r3, [r7, #8]
    d686:	689b      	ldr	r3, [r3, #8]
    d688:	6a38      	ldr	r0, [r7, #32]
    d68a:	4619      	mov	r1, r3
    d68c:	f014 fa90 	bl	21bb0 <GL_Widget_SetForeColor>
		GL_Widget_SetBackColor(hLabel, pxLine->xColor.ulBrush);         // Brush color
    d690:	68bb      	ldr	r3, [r7, #8]
    d692:	68db      	ldr	r3, [r3, #12]
    d694:	6a38      	ldr	r0, [r7, #32]
    d696:	4619      	mov	r1, r3
    d698:	f014 fa0c 	bl	21ab4 <GL_Widget_SetBackColor>
		if (pxLine->xColor.usSizeWidth < 99)                            // Background width size
    d69c:	68bb      	ldr	r3, [r7, #8]
    d69e:	691b      	ldr	r3, [r3, #16]
    d6a0:	2b62      	cmp	r3, #98	; 0x62
    d6a2:	d808      	bhi.n	d6b6 <GoalDspLine+0xc2>
			GL_Widget_SetMinSize(hLabel, pxLine->xColor.usSizeWidth, 0, GL_UNIT_PERCENT); // The size
    d6a4:	68bb      	ldr	r3, [r7, #8]
    d6a6:	691b      	ldr	r3, [r3, #16]
    d6a8:	6a38      	ldr	r0, [r7, #32]
    d6aa:	4619      	mov	r1, r3
    d6ac:	2200      	movs	r2, #0
    d6ae:	2301      	movs	r3, #1
    d6b0:	f014 fad8 	bl	21c64 <GL_Widget_SetMinSize>
    d6b4:	e003      	b.n	d6be <GoalDspLine+0xca>
		else
			GL_Widget_SetExpand(hLabel, GL_DIRECTION_WIDTH);                              // Full size
    d6b6:	6a38      	ldr	r0, [r7, #32]
    d6b8:	2101      	movs	r1, #1
    d6ba:	f014 fa1f 	bl	21afc <GL_Widget_SetExpand>
		if (pxLine->xColor.bGrowWidth)                                  // Grow beyond its size
    d6be:	68bb      	ldr	r3, [r7, #8]
    d6c0:	7d1b      	ldrb	r3, [r3, #20]
    d6c2:	2b00      	cmp	r3, #0
    d6c4:	d003      	beq.n	d6ce <GoalDspLine+0xda>
			GL_Widget_SetGrow(hLabel, GL_DIRECTION_WIDTH);              // Background width around the label will fill the complete cell
    d6c6:	6a38      	ldr	r0, [r7, #32]
    d6c8:	2101      	movs	r1, #1
    d6ca:	f014 fa83 	bl	21bd4 <GL_Widget_SetGrow>
			                                                            // Paddings, Borders and Margins
		GL_Widget_SetTextPaddings(hLabel, pxLine->xColor.xPadding.usLeft, pxLine->xColor.xPadding.usTop, pxLine->xColor.xPadding.usRight, pxLine->xColor.xPadding.usBottom, GL_UNIT_PERCENT);
    d6ce:	68bb      	ldr	r3, [r7, #8]
    d6d0:	6999      	ldr	r1, [r3, #24]
    d6d2:	68bb      	ldr	r3, [r7, #8]
    d6d4:	69da      	ldr	r2, [r3, #28]
    d6d6:	68bb      	ldr	r3, [r7, #8]
    d6d8:	6a1b      	ldr	r3, [r3, #32]
    d6da:	68b8      	ldr	r0, [r7, #8]
    d6dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
    d6de:	9000      	str	r0, [sp, #0]
    d6e0:	2001      	movs	r0, #1
    d6e2:	9001      	str	r0, [sp, #4]
    d6e4:	6a38      	ldr	r0, [r7, #32]
    d6e6:	f014 fb3b 	bl	21d60 <GL_Widget_SetTextPaddings>
		GL_Widget_SetBorders(hLabel, pxLine->xColor.xBorder.usLeft, pxLine->xColor.xBorder.usTop, pxLine->xColor.xBorder.usRight, pxLine->xColor.xBorder.usBottom, GL_UNIT_PIXEL, pxLine->xColor.xBorder.ulColor);
    d6ea:	68bb      	ldr	r3, [r7, #8]
    d6ec:	6a99      	ldr	r1, [r3, #40]	; 0x28
    d6ee:	68bb      	ldr	r3, [r7, #8]
    d6f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d6f2:	68bb      	ldr	r3, [r7, #8]
    d6f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d6f6:	68b8      	ldr	r0, [r7, #8]
    d6f8:	6b44      	ldr	r4, [r0, #52]	; 0x34
    d6fa:	68b8      	ldr	r0, [r7, #8]
    d6fc:	6b80      	ldr	r0, [r0, #56]	; 0x38
    d6fe:	9400      	str	r4, [sp, #0]
    d700:	2400      	movs	r4, #0
    d702:	9401      	str	r4, [sp, #4]
    d704:	9002      	str	r0, [sp, #8]
    d706:	6a38      	ldr	r0, [r7, #32]
    d708:	f014 f9e6 	bl	21ad8 <GL_Widget_SetBorders>
		GL_Widget_SetMargins(hLabel, pxLine->xColor.xMargin.usLeft, pxLine->xColor.xMargin.usTop, pxLine->xColor.xMargin.usRight, pxLine->xColor.xMargin.usBottom, GL_UNIT_PIXEL);
    d70c:	68bb      	ldr	r3, [r7, #8]
    d70e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    d710:	68bb      	ldr	r3, [r7, #8]
    d712:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    d714:	68bb      	ldr	r3, [r7, #8]
    d716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    d718:	68b8      	ldr	r0, [r7, #8]
    d71a:	6c80      	ldr	r0, [r0, #72]	; 0x48
    d71c:	9000      	str	r0, [sp, #0]
    d71e:	2000      	movs	r0, #0
    d720:	9001      	str	r0, [sp, #4]
    d722:	6a38      	ldr	r0, [r7, #32]
    d724:	f014 fa8c 	bl	21c40 <GL_Widget_SetMargins>
		if (pxLine->xColor.xFont.pcName != NULL)
    d728:	68bb      	ldr	r3, [r7, #8]
    d72a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    d72c:	2b00      	cmp	r3, #0
    d72e:	d005      	beq.n	d73c <GoalDspLine+0x148>
			GL_Widget_SetFontName(hLabel, pxLine->xColor.xFont.pcName); // Font name
    d730:	68bb      	ldr	r3, [r7, #8]
    d732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    d734:	6a38      	ldr	r0, [r7, #32]
    d736:	4619      	mov	r1, r3
    d738:	f014 fa04 	bl	21b44 <GL_Widget_SetFontName>
		GL_Widget_SetFontScale(hLabel, pxLine->xColor.xFont.eScale);    // Font scale
    d73c:	68bb      	ldr	r3, [r7, #8]
    d73e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    d740:	6a38      	ldr	r0, [r7, #32]
    d742:	4619      	mov	r1, r3
    d744:	f014 fa10 	bl	21b68 <GL_Widget_SetFontScale>
		GL_Widget_SetFontStyle(hLabel, pxLine->xColor.xFont.eStyle);    // Font style
    d748:	68bb      	ldr	r3, [r7, #8]
    d74a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    d74c:	6a38      	ldr	r0, [r7, #32]
    d74e:	4619      	mov	r1, r3
    d750:	f014 fa1c 	bl	21b8c <GL_Widget_SetFontStyle>
    d754:	e0ab      	b.n	d8ae <GoalDspLine+0x2ba>
	}
	else                                                     // No
	{
		// Black & White properties
		// ========================
		GL_Widget_SetTextAlign(hLabel, pxLine->xBW.eTextAlign);         // Text alignment
    d756:	68bb      	ldr	r3, [r7, #8]
    d758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    d75a:	6a38      	ldr	r0, [r7, #32]
    d75c:	4619      	mov	r1, r3
    d75e:	f014 faed 	bl	21d3c <GL_Widget_SetTextAlign>
		GL_Widget_SetBackAlign(hLabel, pxLine->xBW.eBackAlign);         // Background alignment
    d762:	68bb      	ldr	r3, [r7, #8]
    d764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    d766:	6a38      	ldr	r0, [r7, #32]
    d768:	4619      	mov	r1, r3
    d76a:	f014 f991 	bl	21a90 <GL_Widget_SetBackAlign>
		if (!pxLine->xBW.bReverse)                                      // B&W reverse?
    d76e:	68bb      	ldr	r3, [r7, #8]
    d770:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    d774:	f083 0301 	eor.w	r3, r3, #1
    d778:	b2db      	uxtb	r3, r3
    d77a:	2b00      	cmp	r3, #0
    d77c:	d00a      	beq.n	d794 <GoalDspLine+0x1a0>
		{                                                               // Yes
			GL_Widget_SetForeColor(hLabel, GL_COLOR_BLACK);             // Force pen color to black and brush color to white
    d77e:	6a38      	ldr	r0, [r7, #32]
    d780:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    d784:	f014 fa14 	bl	21bb0 <GL_Widget_SetForeColor>
			GL_Widget_SetBackColor(hLabel, GL_COLOR_WHITE);
    d788:	6a38      	ldr	r0, [r7, #32]
    d78a:	f04f 31ff 	mov.w	r1, #4294967295
    d78e:	f014 f991 	bl	21ab4 <GL_Widget_SetBackColor>
    d792:	e009      	b.n	d7a8 <GoalDspLine+0x1b4>
		}
		else                                                            // No
		{
			GL_Widget_SetForeColor(hLabel, GL_COLOR_WHITE);             // Force pen color to white and brush color to black
    d794:	6a38      	ldr	r0, [r7, #32]
    d796:	f04f 31ff 	mov.w	r1, #4294967295
    d79a:	f014 fa09 	bl	21bb0 <GL_Widget_SetForeColor>
			GL_Widget_SetBackColor(hLabel, GL_COLOR_BLACK);
    d79e:	6a38      	ldr	r0, [r7, #32]
    d7a0:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    d7a4:	f014 f986 	bl	21ab4 <GL_Widget_SetBackColor>
		}
		if (pxLine->xBW.usSizeWidth < 99)                               // Background width size
    d7a8:	68bb      	ldr	r3, [r7, #8]
    d7aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    d7ac:	2b62      	cmp	r3, #98	; 0x62
    d7ae:	d808      	bhi.n	d7c2 <GoalDspLine+0x1ce>
			GL_Widget_SetMinSize(hLabel, pxLine->xBW.usSizeWidth, 0, GL_UNIT_PERCENT); // The size
    d7b0:	68bb      	ldr	r3, [r7, #8]
    d7b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    d7b4:	6a38      	ldr	r0, [r7, #32]
    d7b6:	4619      	mov	r1, r3
    d7b8:	2200      	movs	r2, #0
    d7ba:	2301      	movs	r3, #1
    d7bc:	f014 fa52 	bl	21c64 <GL_Widget_SetMinSize>
    d7c0:	e003      	b.n	d7ca <GoalDspLine+0x1d6>
		else
			GL_Widget_SetExpand(hLabel, GL_DIRECTION_WIDTH);                           // Full size
    d7c2:	6a38      	ldr	r0, [r7, #32]
    d7c4:	2101      	movs	r1, #1
    d7c6:	f014 f999 	bl	21afc <GL_Widget_SetExpand>
		if (pxLine->xBW.bGrowWidth)                                     // Grow beyond its size
    d7ca:	68bb      	ldr	r3, [r7, #8]
    d7cc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    d7d0:	2b00      	cmp	r3, #0
    d7d2:	d003      	beq.n	d7dc <GoalDspLine+0x1e8>
			GL_Widget_SetGrow(hLabel, GL_DIRECTION_WIDTH);              // Background width around the label will fill the complete cell
    d7d4:	6a38      	ldr	r0, [r7, #32]
    d7d6:	2101      	movs	r1, #1
    d7d8:	f014 f9fc 	bl	21bd4 <GL_Widget_SetGrow>
			                                                            // Paddings, Borders and Margins
		GL_Widget_SetTextPaddings(hLabel, pxLine->xBW.xPadding.usLeft, pxLine->xBW.xPadding.usTop, pxLine->xBW.xPadding.usRight, pxLine->xBW.xPadding.usBottom, GL_UNIT_PERCENT);
    d7dc:	68bb      	ldr	r3, [r7, #8]
    d7de:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
    d7e0:	68bb      	ldr	r3, [r7, #8]
    d7e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    d7e4:	68bb      	ldr	r3, [r7, #8]
    d7e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    d7e8:	68b8      	ldr	r0, [r7, #8]
    d7ea:	6f80      	ldr	r0, [r0, #120]	; 0x78
    d7ec:	9000      	str	r0, [sp, #0]
    d7ee:	2001      	movs	r0, #1
    d7f0:	9001      	str	r0, [sp, #4]
    d7f2:	6a38      	ldr	r0, [r7, #32]
    d7f4:	f014 fab4 	bl	21d60 <GL_Widget_SetTextPaddings>
		if (pxLine->xBW.xBorder.ulColor != GL_COLOR_BLACK)              // Force border to black or white
    d7f8:	68bb      	ldr	r3, [r7, #8]
    d7fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    d7fe:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    d802:	d014      	beq.n	d82e <GoalDspLine+0x23a>
			GL_Widget_SetBorders(hLabel, pxLine->xBW.xBorder.usLeft, pxLine->xBW.xBorder.usTop, pxLine->xBW.xBorder.usRight, pxLine->xBW.xBorder.usBottom, GL_UNIT_PIXEL, GL_COLOR_WHITE);
    d804:	68bb      	ldr	r3, [r7, #8]
    d806:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
    d808:	68bb      	ldr	r3, [r7, #8]
    d80a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    d80e:	68bb      	ldr	r3, [r7, #8]
    d810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    d814:	68b8      	ldr	r0, [r7, #8]
    d816:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    d81a:	9000      	str	r0, [sp, #0]
    d81c:	2000      	movs	r0, #0
    d81e:	9001      	str	r0, [sp, #4]
    d820:	f04f 30ff 	mov.w	r0, #4294967295
    d824:	9002      	str	r0, [sp, #8]
    d826:	6a38      	ldr	r0, [r7, #32]
    d828:	f014 f956 	bl	21ad8 <GL_Widget_SetBorders>
    d82c:	e013      	b.n	d856 <GoalDspLine+0x262>
		else
			GL_Widget_SetBorders(hLabel, pxLine->xBW.xBorder.usLeft, pxLine->xBW.xBorder.usTop, pxLine->xBW.xBorder.usRight, pxLine->xBW.xBorder.usBottom, GL_UNIT_PIXEL, GL_COLOR_BLACK);
    d82e:	68bb      	ldr	r3, [r7, #8]
    d830:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
    d832:	68bb      	ldr	r3, [r7, #8]
    d834:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    d838:	68bb      	ldr	r3, [r7, #8]
    d83a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    d83e:	68b8      	ldr	r0, [r7, #8]
    d840:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    d844:	9000      	str	r0, [sp, #0]
    d846:	2000      	movs	r0, #0
    d848:	9001      	str	r0, [sp, #4]
    d84a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
    d84e:	9002      	str	r0, [sp, #8]
    d850:	6a38      	ldr	r0, [r7, #32]
    d852:	f014 f941 	bl	21ad8 <GL_Widget_SetBorders>
		GL_Widget_SetMargins(hLabel, pxLine->xBW.xMargin.usLeft, pxLine->xBW.xMargin.usTop, pxLine->xBW.xMargin.usRight, pxLine->xBW.xMargin.usBottom, GL_UNIT_PIXEL);
    d856:	68bb      	ldr	r3, [r7, #8]
    d858:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
    d85c:	68bb      	ldr	r3, [r7, #8]
    d85e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    d862:	68bb      	ldr	r3, [r7, #8]
    d864:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    d868:	68b8      	ldr	r0, [r7, #8]
    d86a:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    d86e:	9000      	str	r0, [sp, #0]
    d870:	2000      	movs	r0, #0
    d872:	9001      	str	r0, [sp, #4]
    d874:	6a38      	ldr	r0, [r7, #32]
    d876:	f014 f9e3 	bl	21c40 <GL_Widget_SetMargins>
		if (pxLine->xBW.xFont.pcName != NULL)
    d87a:	68bb      	ldr	r3, [r7, #8]
    d87c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    d880:	2b00      	cmp	r3, #0
    d882:	d006      	beq.n	d892 <GoalDspLine+0x29e>
			GL_Widget_SetFontName(hLabel, pxLine->xBW.xFont.pcName);    // Font name
    d884:	68bb      	ldr	r3, [r7, #8]
    d886:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    d88a:	6a38      	ldr	r0, [r7, #32]
    d88c:	4619      	mov	r1, r3
    d88e:	f014 f959 	bl	21b44 <GL_Widget_SetFontName>
		GL_Widget_SetFontScale(hLabel, pxLine->xBW.xFont.eScale);       // Font scale
    d892:	68bb      	ldr	r3, [r7, #8]
    d894:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    d898:	6a38      	ldr	r0, [r7, #32]
    d89a:	4619      	mov	r1, r3
    d89c:	f014 f964 	bl	21b68 <GL_Widget_SetFontScale>
		GL_Widget_SetFontStyle(hLabel, pxLine->xBW.xFont.eStyle);       // Font style
    d8a0:	68bb      	ldr	r3, [r7, #8]
    d8a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    d8a6:	6a38      	ldr	r0, [r7, #32]
    d8a8:	4619      	mov	r1, r3
    d8aa:	f014 f96f 	bl	21b8c <GL_Widget_SetFontStyle>
	}

	CHECK(ulTimeOut!=0, lblNoTimer)                          // No timer to set
    d8ae:	687b      	ldr	r3, [r7, #4]
    d8b0:	2b00      	cmp	r3, #0
    d8b2:	d045      	beq.n	d940 <GoalDspLine+0x34c>

	// Restart timer
	// *************
	if (ulTimeOut == GL_TIME_INFINITE)                       // Set timeout value
    d8b4:	687b      	ldr	r3, [r7, #4]
    d8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
    d8ba:	d10a      	bne.n	d8d2 <GoalDspLine+0x2de>
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), 0x7FFFFFFF);   // Bug 0xFFFFFFFF not supported
    d8bc:	6978      	ldr	r0, [r7, #20]
    d8be:	2100      	movs	r1, #0
    d8c0:	f014 f8d4 	bl	21a6c <GL_Widget_SearchId>
    d8c4:	4603      	mov	r3, r0
    d8c6:	4618      	mov	r0, r3
    d8c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d8cc:	f014 f874 	bl	219b8 <GL_Timer_SetInterval>
    d8d0:	e008      	b.n	d8e4 <GoalDspLine+0x2f0>
	else
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), ulTimeOut);
    d8d2:	6978      	ldr	r0, [r7, #20]
    d8d4:	2100      	movs	r1, #0
    d8d6:	f014 f8c9 	bl	21a6c <GL_Widget_SearchId>
    d8da:	4603      	mov	r3, r0
    d8dc:	4618      	mov	r0, r3
    d8de:	6879      	ldr	r1, [r7, #4]
    d8e0:	f014 f86a 	bl	219b8 <GL_Timer_SetInterval>

	// Loop indefinitely until the result is set from the call back functions
	// **********************************************************************
	GL_Window_MainLoop(hWindow);                             // Wait until a result is set
    d8e4:	6978      	ldr	r0, [r7, #20]
    d8e6:	f014 facb 	bl	21e80 <GL_Window_MainLoop>

	// Test the result set by the call back functions
	// **********************************************
	switch(GL_Window_GetResult(hWindow))                     // Get the result
    d8ea:	6978      	ldr	r0, [r7, #20]
    d8ec:	f014 fab6 	bl	21e5c <GL_Window_GetResult>
    d8f0:	4603      	mov	r3, r0
    d8f2:	2b01      	cmp	r3, #1
    d8f4:	d010      	beq.n	d918 <GoalDspLine+0x324>
    d8f6:	2b01      	cmp	r3, #1
    d8f8:	d302      	bcc.n	d900 <GoalDspLine+0x30c>
    d8fa:	2b04      	cmp	r3, #4
    d8fc:	d018      	beq.n	d930 <GoalDspLine+0x33c>
    d8fe:	e01a      	b.n	d936 <GoalDspLine+0x342>
	{
	case RES_VALID_STATUS:                                   // Key valid result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    d900:	6978      	ldr	r0, [r7, #20]
    d902:	2100      	movs	r1, #0
    d904:	f014 f8b2 	bl	21a6c <GL_Widget_SearchId>
    d908:	4603      	mov	r3, r0
    d90a:	4618      	mov	r0, r3
    d90c:	f014 f866 	bl	219dc <GL_Timer_Stop>
		iRet=GL_KEY_VALID;
    d910:	f64f 0350 	movw	r3, #63568	; 0xf850
    d914:	61fb      	str	r3, [r7, #28]
		break;
    d916:	e012      	b.n	d93e <GoalDspLine+0x34a>
	case RES_CANCEL_STATUS:                                  // Key cancel result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    d918:	6978      	ldr	r0, [r7, #20]
    d91a:	2100      	movs	r1, #0
    d91c:	f014 f8a6 	bl	21a6c <GL_Widget_SearchId>
    d920:	4603      	mov	r3, r0
    d922:	4618      	mov	r0, r3
    d924:	f014 f85a 	bl	219dc <GL_Timer_Stop>
		iRet=GL_KEY_CANCEL;
    d928:	f64f 0351 	movw	r3, #63569	; 0xf851
    d92c:	61fb      	str	r3, [r7, #28]
		break;
    d92e:	e006      	b.n	d93e <GoalDspLine+0x34a>
	case RES_TIMER_STATUS:                                   // Timer result
		iRet=0;
    d930:	2300      	movs	r3, #0
    d932:	61fb      	str	r3, [r7, #28]
		break;
    d934:	e003      	b.n	d93e <GoalDspLine+0x34a>
	default:                                                 // Unknown result
		iRet=-1;
    d936:	f04f 33ff 	mov.w	r3, #4294967295
    d93a:	61fb      	str	r3, [r7, #28]
		break;
    d93c:	bf00      	nop
	}

	goto lblEnd;
    d93e:	e01c      	b.n	d97a <GoalDspLine+0x386>

	// Errors treatment
    // ****************
lblNoTimer:                                                  // No timer used
	iRet=0;
    d940:	2300      	movs	r3, #0
    d942:	61fb      	str	r3, [r7, #28]
	if (bRefresh)
    d944:	7c7b      	ldrb	r3, [r7, #17]
    d946:	2b00      	cmp	r3, #0
    d948:	d016      	beq.n	d978 <GoalDspLine+0x384>
	{
		iRet = GL_Window_Dispatch(hWindow, 0);               // Refresh the window
    d94a:	6978      	ldr	r0, [r7, #20]
    d94c:	2100      	movs	r1, #0
    d94e:	f014 fa73 	bl	21e38 <GL_Window_Dispatch>
    d952:	4603      	mov	r3, r0
    d954:	61fb      	str	r3, [r7, #28]
		if (iRet == RES_VALID_STATUS)
    d956:	69fb      	ldr	r3, [r7, #28]
    d958:	2b00      	cmp	r3, #0
    d95a:	d102      	bne.n	d962 <GoalDspLine+0x36e>
			iRet=GL_KEY_VALID;
    d95c:	f64f 0350 	movw	r3, #63568	; 0xf850
    d960:	61fb      	str	r3, [r7, #28]
		if (iRet == RES_CANCEL_STATUS)
    d962:	69fb      	ldr	r3, [r7, #28]
    d964:	2b01      	cmp	r3, #1
    d966:	d107      	bne.n	d978 <GoalDspLine+0x384>
			iRet=GL_KEY_CANCEL;
    d968:	f64f 0351 	movw	r3, #63569	; 0xf851
    d96c:	61fb      	str	r3, [r7, #28]
	}
	goto lblEnd;
    d96e:	e003      	b.n	d978 <GoalDspLine+0x384>
lblKO:                                                       // Display line failed
	iRet=-1;
    d970:	f04f 33ff 	mov.w	r3, #4294967295
    d974:	61fb      	str	r3, [r7, #28]
	goto lblEnd;
    d976:	e000      	b.n	d97a <GoalDspLine+0x386>
		if (iRet == RES_VALID_STATUS)
			iRet=GL_KEY_VALID;
		if (iRet == RES_CANCEL_STATUS)
			iRet=GL_KEY_CANCEL;
	}
	goto lblEnd;
    d978:	bf00      	nop
lblKO:                                                       // Display line failed
	iRet=-1;
	goto lblEnd;
lblEnd:
	return iRet;
    d97a:	69fb      	ldr	r3, [r7, #28]
}
    d97c:	4618      	mov	r0, r3
    d97e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    d982:	f2c0 0302 	movt	r3, #2
    d986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d988:	681b      	ldr	r3, [r3, #0]
    d98a:	429a      	cmp	r2, r3
    d98c:	d001      	beq.n	d992 <GoalDspLine+0x39e>
    d98e:	f7fb fb09 	bl	8fa4 <__stack_chk_fail>
    d992:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    d996:	46bd      	mov	sp, r7
    d998:	bd90      	pop	{r4, r7, pc}
    d99a:	bf00      	nop

0000d99c <GoalDspMultiLine>:
//    >=0 : Display buffer done (Exit screen : 0=timeout,GL_KEY_CANCEL,GL_KEY_VALID).
//    <0 : Display buffer failed.
//****************************************************************************

int GoalDspMultiLine(T_GL_HWIDGET hWindow, ushort usLine, char *pcData , int iLen, const ST_DSP_LINE txLine[], ushort usMaxLine, ulong ulTimeOut, bool bRefresh)
{
    d99c:	b5b0      	push	{r4, r5, r7, lr}
    d99e:	b0d2      	sub	sp, #328	; 0x148
    d9a0:	af02      	add	r7, sp, #8
    d9a2:	f107 041c 	add.w	r4, r7, #28
    d9a6:	6020      	str	r0, [r4, #0]
    d9a8:	460d      	mov	r5, r1
    d9aa:	f107 0114 	add.w	r1, r7, #20
    d9ae:	600a      	str	r2, [r1, #0]
    d9b0:	f107 0210 	add.w	r2, r7, #16
    d9b4:	6013      	str	r3, [r2, #0]
    d9b6:	f107 000c 	add.w	r0, r7, #12
    d9ba:	f107 0118 	add.w	r1, r7, #24
    d9be:	f107 0208 	add.w	r2, r7, #8
    d9c2:	1dfb      	adds	r3, r7, #7
    d9c4:	f107 041a 	add.w	r4, r7, #26
    d9c8:	8025      	strh	r5, [r4, #0]
    d9ca:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
    d9ce:	6004      	str	r4, [r0, #0]
    d9d0:	f8b7 0154 	ldrh.w	r0, [r7, #340]	; 0x154
    d9d4:	8008      	strh	r0, [r1, #0]
    d9d6:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
    d9da:	6011      	str	r1, [r2, #0]
    d9dc:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
    d9e0:	701a      	strb	r2, [r3, #0]
    d9e2:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    d9e6:	f2c0 0302 	movt	r3, #2
    d9ea:	681b      	ldr	r3, [r3, #0]
    d9ec:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	// Local variables
    // ***************
	ST_DSP_LINE xLine;
	int iCount=0;
    d9f0:	f107 0320 	add.w	r3, r7, #32
    d9f4:	2200      	movs	r2, #0
    d9f6:	601a      	str	r2, [r3, #0]
	char tcBuffer[100+1];
	int iRet=-1;
    d9f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
    d9fc:	f04f 32ff 	mov.w	r2, #4294967295
    da00:	601a      	str	r2, [r3, #0]

	// Printing in progress
	// ********************
	CHECK ((pcData!=NULL) && (iLen>=0), lblKO);
    da02:	f107 0314 	add.w	r3, r7, #20
    da06:	681b      	ldr	r3, [r3, #0]
    da08:	2b00      	cmp	r3, #0
    da0a:	f000 8110 	beq.w	dc2e <GoalDspMultiLine+0x292>
    da0e:	f107 0310 	add.w	r3, r7, #16
    da12:	681b      	ldr	r3, [r3, #0]
    da14:	2b00      	cmp	r3, #0
    da16:	f2c0 810a 	blt.w	dc2e <GoalDspMultiLine+0x292>

	memset(tcBuffer, 0, sizeof(tcBuffer));
    da1a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
    da1e:	4618      	mov	r0, r3
    da20:	2100      	movs	r1, #0
    da22:	2265      	movs	r2, #101	; 0x65
    da24:	f7fb e8ca 	blx	8bbc <_init+0x5c>
	while(usLine < usMaxLine)
    da28:	e0f6      	b.n	dc18 <GoalDspMultiLine+0x27c>
	{
		if (iLen > 0)               // Check if it is the end of data
    da2a:	f107 0310 	add.w	r3, r7, #16
    da2e:	681b      	ldr	r3, [r3, #0]
    da30:	2b00      	cmp	r3, #0
    da32:	f340 80ba 	ble.w	dbaa <GoalDspMultiLine+0x20e>
		{                           // No, it's a line with '\n' detected
			if (*pcData != '\n')    // Save character into buffer
    da36:	f107 0314 	add.w	r3, r7, #20
    da3a:	681b      	ldr	r3, [r3, #0]
    da3c:	781b      	ldrb	r3, [r3, #0]
    da3e:	2b0a      	cmp	r3, #10
    da40:	d039      	beq.n	dab6 <GoalDspMultiLine+0x11a>
			{
				if (iCount < 100)
    da42:	f107 0320 	add.w	r3, r7, #32
    da46:	681b      	ldr	r3, [r3, #0]
    da48:	2b63      	cmp	r3, #99	; 0x63
    da4a:	dc20      	bgt.n	da8e <GoalDspMultiLine+0xf2>
				{
					tcBuffer[iCount++] = *pcData++;
    da4c:	f107 0314 	add.w	r3, r7, #20
    da50:	681b      	ldr	r3, [r3, #0]
    da52:	781a      	ldrb	r2, [r3, #0]
    da54:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
    da58:	f107 0320 	add.w	r3, r7, #32
    da5c:	681b      	ldr	r3, [r3, #0]
    da5e:	18cb      	adds	r3, r1, r3
    da60:	701a      	strb	r2, [r3, #0]
    da62:	f107 0320 	add.w	r3, r7, #32
    da66:	f107 0220 	add.w	r2, r7, #32
    da6a:	6812      	ldr	r2, [r2, #0]
    da6c:	3201      	adds	r2, #1
    da6e:	601a      	str	r2, [r3, #0]
    da70:	f107 0314 	add.w	r3, r7, #20
    da74:	f107 0214 	add.w	r2, r7, #20
    da78:	6812      	ldr	r2, [r2, #0]
    da7a:	3201      	adds	r2, #1
    da7c:	601a      	str	r2, [r3, #0]
					tcBuffer[iCount]=0;
    da7e:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
    da82:	f107 0320 	add.w	r3, r7, #32
    da86:	681b      	ldr	r3, [r3, #0]
    da88:	18d3      	adds	r3, r2, r3
    da8a:	2200      	movs	r2, #0
    da8c:	701a      	strb	r2, [r3, #0]
				}
				iLen--;
    da8e:	f107 0310 	add.w	r3, r7, #16
    da92:	f107 0210 	add.w	r2, r7, #16
    da96:	6812      	ldr	r2, [r2, #0]
    da98:	3a01      	subs	r2, #1
    da9a:	601a      	str	r2, [r3, #0]
    da9c:	f107 031a 	add.w	r3, r7, #26
    daa0:	f107 021a 	add.w	r2, r7, #26
    daa4:	8812      	ldrh	r2, [r2, #0]
    daa6:	801a      	strh	r2, [r3, #0]
    daa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
    daac:	f107 0224 	add.w	r2, r7, #36	; 0x24
    dab0:	6812      	ldr	r2, [r2, #0]
    dab2:	601a      	str	r2, [r3, #0]
    dab4:	e0b0      	b.n	dc18 <GoalDspMultiLine+0x27c>
			}
			else                    // '\n' detected
			{
				xLine = txLine[usLine];
    dab6:	f107 031a 	add.w	r3, r7, #26
    daba:	881b      	ldrh	r3, [r3, #0]
    dabc:	22ac      	movs	r2, #172	; 0xac
    dabe:	fb02 f303 	mul.w	r3, r2, r3
    dac2:	f107 020c 	add.w	r2, r7, #12
    dac6:	6812      	ldr	r2, [r2, #0]
    dac8:	18d3      	adds	r3, r2, r3
    daca:	f107 0228 	add.w	r2, r7, #40	; 0x28
    dace:	4611      	mov	r1, r2
    dad0:	461a      	mov	r2, r3
    dad2:	23ac      	movs	r3, #172	; 0xac
    dad4:	4608      	mov	r0, r1
    dad6:	4611      	mov	r1, r2
    dad8:	461a      	mov	r2, r3
    dada:	f7fb e8ce 	blx	8c78 <_init+0x118>
				if (usLine == usMaxLine-1)
    dade:	f107 031a 	add.w	r3, r7, #26
    dae2:	881a      	ldrh	r2, [r3, #0]
    dae4:	f107 0318 	add.w	r3, r7, #24
    dae8:	881b      	ldrh	r3, [r3, #0]
    daea:	3b01      	subs	r3, #1
    daec:	429a      	cmp	r2, r3
    daee:	d122      	bne.n	db36 <GoalDspMultiLine+0x19a>
				{                   // Last line to display
					iRet = GoalDspLine(hWindow, usLine++, tcBuffer, &xLine, ulTimeOut, bRefresh);
    daf0:	f107 031a 	add.w	r3, r7, #26
    daf4:	8819      	ldrh	r1, [r3, #0]
    daf6:	f107 031a 	add.w	r3, r7, #26
    dafa:	f107 021a 	add.w	r2, r7, #26
    dafe:	8812      	ldrh	r2, [r2, #0]
    db00:	3201      	adds	r2, #1
    db02:	801a      	strh	r2, [r3, #0]
    db04:	f107 0424 	add.w	r4, r7, #36	; 0x24
    db08:	f107 001c 	add.w	r0, r7, #28
    db0c:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
    db10:	f107 0328 	add.w	r3, r7, #40	; 0x28
    db14:	f107 0508 	add.w	r5, r7, #8
    db18:	682d      	ldr	r5, [r5, #0]
    db1a:	9500      	str	r5, [sp, #0]
    db1c:	1dfd      	adds	r5, r7, #7
    db1e:	782d      	ldrb	r5, [r5, #0]
    db20:	9501      	str	r5, [sp, #4]
    db22:	6800      	ldr	r0, [r0, #0]
    db24:	f7ff fd66 	bl	d5f4 <GoalDspLine>
    db28:	6020      	str	r0, [r4, #0]
					CHECK(iRet>=0, lblKO);
    db2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
    db2e:	681b      	ldr	r3, [r3, #0]
    db30:	2b00      	cmp	r3, #0
    db32:	db7c      	blt.n	dc2e <GoalDspMultiLine+0x292>
    db34:	e01e      	b.n	db74 <GoalDspMultiLine+0x1d8>
				}
				else
				{                   // Next line to display
					iRet = GoalDspLine(hWindow, usLine++, tcBuffer, &xLine, 0, false);
    db36:	f107 031a 	add.w	r3, r7, #26
    db3a:	8819      	ldrh	r1, [r3, #0]
    db3c:	f107 031a 	add.w	r3, r7, #26
    db40:	f107 021a 	add.w	r2, r7, #26
    db44:	8812      	ldrh	r2, [r2, #0]
    db46:	3201      	adds	r2, #1
    db48:	801a      	strh	r2, [r3, #0]
    db4a:	f107 0424 	add.w	r4, r7, #36	; 0x24
    db4e:	f107 001c 	add.w	r0, r7, #28
    db52:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
    db56:	f107 0328 	add.w	r3, r7, #40	; 0x28
    db5a:	2500      	movs	r5, #0
    db5c:	9500      	str	r5, [sp, #0]
    db5e:	2500      	movs	r5, #0
    db60:	9501      	str	r5, [sp, #4]
    db62:	6800      	ldr	r0, [r0, #0]
    db64:	f7ff fd46 	bl	d5f4 <GoalDspLine>
    db68:	6020      	str	r0, [r4, #0]
					CHECK(iRet>=0, lblKO);
    db6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
    db6e:	681b      	ldr	r3, [r3, #0]
    db70:	2b00      	cmp	r3, #0
    db72:	db5c      	blt.n	dc2e <GoalDspMultiLine+0x292>
				}
				iCount=0;
    db74:	f107 0320 	add.w	r3, r7, #32
    db78:	2200      	movs	r2, #0
    db7a:	601a      	str	r2, [r3, #0]
				tcBuffer[iCount]=0;
    db7c:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
    db80:	f107 0320 	add.w	r3, r7, #32
    db84:	681b      	ldr	r3, [r3, #0]
    db86:	18d3      	adds	r3, r2, r3
    db88:	2200      	movs	r2, #0
    db8a:	701a      	strb	r2, [r3, #0]
				pcData++;
    db8c:	f107 0314 	add.w	r3, r7, #20
    db90:	f107 0214 	add.w	r2, r7, #20
    db94:	6812      	ldr	r2, [r2, #0]
    db96:	3201      	adds	r2, #1
    db98:	601a      	str	r2, [r3, #0]
				iLen--;
    db9a:	f107 0310 	add.w	r3, r7, #16
    db9e:	f107 0210 	add.w	r2, r7, #16
    dba2:	6812      	ldr	r2, [r2, #0]
    dba4:	3a01      	subs	r2, #1
    dba6:	601a      	str	r2, [r3, #0]
    dba8:	e036      	b.n	dc18 <GoalDspMultiLine+0x27c>
			}
		}
		else
		{                           // Yes, it's the end of data
			xLine = txLine[usLine]; // Display line
    dbaa:	f107 031a 	add.w	r3, r7, #26
    dbae:	881b      	ldrh	r3, [r3, #0]
    dbb0:	22ac      	movs	r2, #172	; 0xac
    dbb2:	fb02 f303 	mul.w	r3, r2, r3
    dbb6:	f107 020c 	add.w	r2, r7, #12
    dbba:	6812      	ldr	r2, [r2, #0]
    dbbc:	18d3      	adds	r3, r2, r3
    dbbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
    dbc2:	4611      	mov	r1, r2
    dbc4:	461a      	mov	r2, r3
    dbc6:	23ac      	movs	r3, #172	; 0xac
    dbc8:	4608      	mov	r0, r1
    dbca:	4611      	mov	r1, r2
    dbcc:	461a      	mov	r2, r3
    dbce:	f7fb e854 	blx	8c78 <_init+0x118>
			iRet = GoalDspLine(hWindow, usLine++, tcBuffer, &xLine, ulTimeOut, bRefresh);
    dbd2:	f107 031a 	add.w	r3, r7, #26
    dbd6:	8819      	ldrh	r1, [r3, #0]
    dbd8:	f107 031a 	add.w	r3, r7, #26
    dbdc:	f107 021a 	add.w	r2, r7, #26
    dbe0:	8812      	ldrh	r2, [r2, #0]
    dbe2:	3201      	adds	r2, #1
    dbe4:	801a      	strh	r2, [r3, #0]
    dbe6:	f107 0424 	add.w	r4, r7, #36	; 0x24
    dbea:	f107 001c 	add.w	r0, r7, #28
    dbee:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
    dbf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
    dbf6:	f107 0508 	add.w	r5, r7, #8
    dbfa:	682d      	ldr	r5, [r5, #0]
    dbfc:	9500      	str	r5, [sp, #0]
    dbfe:	1dfd      	adds	r5, r7, #7
    dc00:	782d      	ldrb	r5, [r5, #0]
    dc02:	9501      	str	r5, [sp, #4]
    dc04:	6800      	ldr	r0, [r0, #0]
    dc06:	f7ff fcf5 	bl	d5f4 <GoalDspLine>
    dc0a:	6020      	str	r0, [r4, #0]
			CHECK(iRet>=0, lblKO);
    dc0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    dc10:	681b      	ldr	r3, [r3, #0]
    dc12:	2b00      	cmp	r3, #0
    dc14:	db0b      	blt.n	dc2e <GoalDspMultiLine+0x292>
			break;                  // Exit from the loop
    dc16:	e009      	b.n	dc2c <GoalDspMultiLine+0x290>
	// Printing in progress
	// ********************
	CHECK ((pcData!=NULL) && (iLen>=0), lblKO);

	memset(tcBuffer, 0, sizeof(tcBuffer));
	while(usLine < usMaxLine)
    dc18:	f107 021a 	add.w	r2, r7, #26
    dc1c:	f107 0318 	add.w	r3, r7, #24
    dc20:	8812      	ldrh	r2, [r2, #0]
    dc22:	881b      	ldrh	r3, [r3, #0]
    dc24:	429a      	cmp	r2, r3
    dc26:	f4ff af00 	bcc.w	da2a <GoalDspMultiLine+0x8e>
			CHECK(iRet>=0, lblKO);
			break;                  // Exit from the loop
		}
	}

	goto lblEnd;
    dc2a:	e006      	b.n	dc3a <GoalDspMultiLine+0x29e>
    dc2c:	e005      	b.n	dc3a <GoalDspMultiLine+0x29e>

	// Errors treatment
    // ****************
lblKO:                              // Display buffer failed.
	iRet=-1;
    dc2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
    dc32:	f04f 32ff 	mov.w	r2, #4294967295
    dc36:	601a      	str	r2, [r3, #0]
	goto lblEnd;
    dc38:	bf00      	nop
lblEnd:
	return iRet;
    dc3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
    dc3e:	681b      	ldr	r3, [r3, #0]
}
    dc40:	4618      	mov	r0, r3
    dc42:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    dc46:	f2c0 0302 	movt	r3, #2
    dc4a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
    dc4e:	681b      	ldr	r3, [r3, #0]
    dc50:	429a      	cmp	r2, r3
    dc52:	d001      	beq.n	dc58 <GoalDspMultiLine+0x2bc>
    dc54:	f7fb f9a6 	bl	8fa4 <__stack_chk_fail>
    dc58:	f507 77a0 	add.w	r7, r7, #320	; 0x140
    dc5c:	46bd      	mov	sp, r7
    dc5e:	bdb0      	pop	{r4, r5, r7, pc}

0000dc60 <GoalGetKey>:
//   >0 : Key value.
//   =0 : Timeout.
//****************************************************************************

int GoalGetKey(T_GL_HWIDGET hWindow, T_GL_HGRAPHIC_LIB hGraphicLib, bool bShortcut, ulong ulTimeOut, bool bClear)
{
    dc60:	b580      	push	{r7, lr}
    dc62:	b088      	sub	sp, #32
    dc64:	af00      	add	r7, sp, #0
    dc66:	60f8      	str	r0, [r7, #12]
    dc68:	60b9      	str	r1, [r7, #8]
    dc6a:	603b      	str	r3, [r7, #0]
    dc6c:	4613      	mov	r3, r2
    dc6e:	71fb      	strb	r3, [r7, #7]
    dc70:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    dc74:	71bb      	strb	r3, [r7, #6]
    dc76:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    dc7a:	f2c0 0302 	movt	r3, #2
    dc7e:	681b      	ldr	r3, [r3, #0]
    dc80:	61fb      	str	r3, [r7, #28]
	T_GL_WCHAR ulKey;
	int iRet;

	// Loop indefinitely until the result is set from the call back functions
	// **********************************************************************
	bTouch = GL_GraphicLib_IsTouchPresent(hGraphicLib);       // Touch screen?
    dc82:	68b8      	ldr	r0, [r7, #8]
    dc84:	f013 fdc0 	bl	21808 <GL_GraphicLib_IsTouchPresent>
    dc88:	4603      	mov	r3, r0
    dc8a:	74fb      	strb	r3, [r7, #19]
	if (bTouch)
    dc8c:	7cfb      	ldrb	r3, [r7, #19]
    dc8e:	2b00      	cmp	r3, #0
    dc90:	d009      	beq.n	dca6 <GoalGetKey+0x46>
	{                                                         // Yes,
		GL_GraphicLib_UnbindKey(hGraphicLib, GL_KEY_F);       // Unbind "F" key to Telium Key
    dc92:	68b8      	ldr	r0, [r7, #8]
    dc94:	f64f 0154 	movw	r1, #63572	; 0xf854
    dc98:	f013 fdda 	bl	21850 <GL_GraphicLib_UnbindKey>
		GL_GraphicLib_UnbindKey(hGraphicLib, GL_KEY_DOT);     // Unbind "Dot" key to Telium Key
    dc9c:	68b8      	ldr	r0, [r7, #8]
    dc9e:	212e      	movs	r1, #46	; 0x2e
    dca0:	f013 fdd6 	bl	21850 <GL_GraphicLib_UnbindKey>
    dca4:	e013      	b.n	dcce <GoalGetKey+0x6e>
	}
	else
	{                                                         // No,
		GL_GraphicLib_UnbindKey(hGraphicLib, GL_KEY_UP);      // Unbind "Up" key to Telium Key
    dca6:	68b8      	ldr	r0, [r7, #8]
    dca8:	f64f 0159 	movw	r1, #63577	; 0xf859
    dcac:	f013 fdd0 	bl	21850 <GL_GraphicLib_UnbindKey>
		GL_GraphicLib_UnbindKey(hGraphicLib, GL_KEY_DOWN);    // Unbind "Down" key to Telium Key
    dcb0:	68b8      	ldr	r0, [r7, #8]
    dcb2:	f64f 015a 	movw	r1, #63578	; 0xf85a
    dcb6:	f013 fdcb 	bl	21850 <GL_GraphicLib_UnbindKey>
		GL_GraphicLib_UnbindKey(hGraphicLib, GL_KEY_F1);      // Unbind "F1" key to Telium Key
    dcba:	68b8      	ldr	r0, [r7, #8]
    dcbc:	f64f 0155 	movw	r1, #63573	; 0xf855
    dcc0:	f013 fdc6 	bl	21850 <GL_GraphicLib_UnbindKey>
		GL_GraphicLib_UnbindKey(hGraphicLib, GL_KEY_F4);      // Unbind "F4" key to Telium Key
    dcc4:	68b8      	ldr	r0, [r7, #8]
    dcc6:	f64f 0158 	movw	r1, #63576	; 0xf858
    dcca:	f013 fdc1 	bl	21850 <GL_GraphicLib_UnbindKey>
	}

	// Restart timer
	// *************
	if (ulTimeOut == GL_TIME_INFINITE)                        // Set timeout value
    dcce:	683b      	ldr	r3, [r7, #0]
    dcd0:	f1b3 3fff 	cmp.w	r3, #4294967295
    dcd4:	d10a      	bne.n	dcec <GoalGetKey+0x8c>
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), 0x7FFFFFFF);          // Bug 0xFFFFFFFF not supported
    dcd6:	68f8      	ldr	r0, [r7, #12]
    dcd8:	2100      	movs	r1, #0
    dcda:	f013 fec7 	bl	21a6c <GL_Widget_SearchId>
    dcde:	4603      	mov	r3, r0
    dce0:	4618      	mov	r0, r3
    dce2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    dce6:	f013 fe67 	bl	219b8 <GL_Timer_SetInterval>
    dcea:	e008      	b.n	dcfe <GoalGetKey+0x9e>
	else
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), ulTimeOut);
    dcec:	68f8      	ldr	r0, [r7, #12]
    dcee:	2100      	movs	r1, #0
    dcf0:	f013 febc 	bl	21a6c <GL_Widget_SearchId>
    dcf4:	4603      	mov	r3, r0
    dcf6:	4618      	mov	r0, r3
    dcf8:	6839      	ldr	r1, [r7, #0]
    dcfa:	f013 fe5d 	bl	219b8 <GL_Timer_SetInterval>

	// Detect key pressed
	// ******************
	if (!bShortcut)                                           // Remove shortcut and enable callback on key pressed?
    dcfe:	79fb      	ldrb	r3, [r7, #7]
    dd00:	f083 0301 	eor.w	r3, r3, #1
    dd04:	b2db      	uxtb	r3, r3
    dd06:	2b00      	cmp	r3, #0
    dd08:	d033      	beq.n	dd72 <GoalGetKey+0x112>
	{                                                                                     // Yes
		GL_Widget_RegisterCallback(hWindow, GL_EVENT_KEY_DOWN, CallBackPressKey);         // Call back when key pressed
    dd0a:	68f8      	ldr	r0, [r7, #12]
    dd0c:	2106      	movs	r1, #6
    dd0e:	f64c 62f5 	movw	r2, #52981	; 0xcef5
    dd12:	f2c0 0200 	movt	r2, #0
    dd16:	f013 fe97 	bl	21a48 <GL_Widget_RegisterCallback>
		GL_Widget_SetShortcut(GL_Widget_SearchId(hWindow, BUTTON_CAN_ID), GL_KEY_NONE);   // Remove shortcut from cancel button
    dd1a:	68f8      	ldr	r0, [r7, #12]
    dd1c:	f44f 7140 	mov.w	r1, #768	; 0x300
    dd20:	f013 fea4 	bl	21a6c <GL_Widget_SearchId>
    dd24:	4603      	mov	r3, r0
    dd26:	4618      	mov	r0, r3
    dd28:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dd2c:	f013 ffac 	bl	21c88 <GL_Widget_SetShortcut>
		GL_Widget_SetShortcut(GL_Widget_SearchId(hWindow, BUTTON_VAL_ID), GL_KEY_NONE);   // Remove shortcut from valid button
    dd30:	68f8      	ldr	r0, [r7, #12]
    dd32:	f44f 7100 	mov.w	r1, #512	; 0x200
    dd36:	f013 fe99 	bl	21a6c <GL_Widget_SearchId>
    dd3a:	4603      	mov	r3, r0
    dd3c:	4618      	mov	r0, r3
    dd3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dd42:	f013 ffa1 	bl	21c88 <GL_Widget_SetShortcut>
		GL_Widget_SetShortcut(GL_Widget_SearchId(hWindow, BUTTON_DOWN_ID), GL_KEY_NONE);  // Remove shortcut from down button
    dd46:	68f8      	ldr	r0, [r7, #12]
    dd48:	f44f 6180 	mov.w	r1, #1024	; 0x400
    dd4c:	f013 fe8e 	bl	21a6c <GL_Widget_SearchId>
    dd50:	4603      	mov	r3, r0
    dd52:	4618      	mov	r0, r3
    dd54:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dd58:	f013 ff96 	bl	21c88 <GL_Widget_SetShortcut>
		GL_Widget_SetShortcut(GL_Widget_SearchId(hWindow, BUTTON_UP_ID), GL_KEY_NONE);    // Remove shortcut from up button
    dd5c:	68f8      	ldr	r0, [r7, #12]
    dd5e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    dd62:	f013 fe83 	bl	21a6c <GL_Widget_SearchId>
    dd66:	4603      	mov	r3, r0
    dd68:	4618      	mov	r0, r3
    dd6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dd6e:	f013 ff8b 	bl	21c88 <GL_Widget_SetShortcut>
		hTsc = Telium_Stdperif("TSCREEN", NULL);                     // Check "touch" peripheral opened?
		if(hTsc)
			Telium_Reset_buf(hTsc, _receive_id);                     // Yes, reset "touch" FIFO
	}
#endif
	GL_Window_MainLoop(hWindow);                              // Wait until a result is set
    dd72:	68f8      	ldr	r0, [r7, #12]
    dd74:	f014 f884 	bl	21e80 <GL_Window_MainLoop>

	// Test the result set by the call back functions
	// **********************************************
	switch(GL_Window_GetResult(hWindow))                      // Get the result
    dd78:	68f8      	ldr	r0, [r7, #12]
    dd7a:	f014 f86f 	bl	21e5c <GL_Window_GetResult>
    dd7e:	4603      	mov	r3, r0
    dd80:	2b05      	cmp	r3, #5
    dd82:	d854      	bhi.n	de2e <GoalGetKey+0x1ce>
    dd84:	a201      	add	r2, pc, #4	; (adr r2, dd8c <GoalGetKey+0x12c>)
    dd86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    dd8a:	bf00      	nop
    dd8c:	0000ddc9 	.word	0x0000ddc9
    dd90:	0000dde1 	.word	0x0000dde1
    dd94:	0000ddf9 	.word	0x0000ddf9
    dd98:	0000de11 	.word	0x0000de11
    dd9c:	0000de29 	.word	0x0000de29
    dda0:	0000dda5 	.word	0x0000dda5
	{
	case RES_PRESS_STATUS:                                    // Key press result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    dda4:	68f8      	ldr	r0, [r7, #12]
    dda6:	2100      	movs	r1, #0
    dda8:	f013 fe60 	bl	21a6c <GL_Widget_SearchId>
    ddac:	4603      	mov	r3, r0
    ddae:	4618      	mov	r0, r3
    ddb0:	f013 fe14 	bl	219dc <GL_Timer_Stop>
		GL_Widget_GetUserData(hWindow, &ulKey, sizeof(ulKey));
    ddb4:	f107 0314 	add.w	r3, r7, #20
    ddb8:	68f8      	ldr	r0, [r7, #12]
    ddba:	4619      	mov	r1, r3
    ddbc:	2204      	movs	r2, #4
    ddbe:	f013 fe31 	bl	21a24 <GL_Widget_GetUserData>
		iRet=ulKey;
    ddc2:	697b      	ldr	r3, [r7, #20]
    ddc4:	61bb      	str	r3, [r7, #24]
		break;
    ddc6:	e035      	b.n	de34 <GoalGetKey+0x1d4>
	case RES_VALID_STATUS:                                    // Key valid result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    ddc8:	68f8      	ldr	r0, [r7, #12]
    ddca:	2100      	movs	r1, #0
    ddcc:	f013 fe4e 	bl	21a6c <GL_Widget_SearchId>
    ddd0:	4603      	mov	r3, r0
    ddd2:	4618      	mov	r0, r3
    ddd4:	f013 fe02 	bl	219dc <GL_Timer_Stop>
		iRet=GL_KEY_VALID;
    ddd8:	f64f 0350 	movw	r3, #63568	; 0xf850
    dddc:	61bb      	str	r3, [r7, #24]
		break;
    ddde:	e029      	b.n	de34 <GoalGetKey+0x1d4>
	case RES_CANCEL_STATUS:                                   // Key cancel result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    dde0:	68f8      	ldr	r0, [r7, #12]
    dde2:	2100      	movs	r1, #0
    dde4:	f013 fe42 	bl	21a6c <GL_Widget_SearchId>
    dde8:	4603      	mov	r3, r0
    ddea:	4618      	mov	r0, r3
    ddec:	f013 fdf6 	bl	219dc <GL_Timer_Stop>
		iRet=GL_KEY_CANCEL;
    ddf0:	f64f 0351 	movw	r3, #63569	; 0xf851
    ddf4:	61bb      	str	r3, [r7, #24]
		break;
    ddf6:	e01d      	b.n	de34 <GoalGetKey+0x1d4>
	case RES_DOWN_STATUS:                                     // Key down result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    ddf8:	68f8      	ldr	r0, [r7, #12]
    ddfa:	2100      	movs	r1, #0
    ddfc:	f013 fe36 	bl	21a6c <GL_Widget_SearchId>
    de00:	4603      	mov	r3, r0
    de02:	4618      	mov	r0, r3
    de04:	f013 fdea 	bl	219dc <GL_Timer_Stop>
		iRet=GL_KEY_DOWN;
    de08:	f64f 035a 	movw	r3, #63578	; 0xf85a
    de0c:	61bb      	str	r3, [r7, #24]
		break;
    de0e:	e011      	b.n	de34 <GoalGetKey+0x1d4>
	case RES_UP_STATUS:                                       // Key up result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    de10:	68f8      	ldr	r0, [r7, #12]
    de12:	2100      	movs	r1, #0
    de14:	f013 fe2a 	bl	21a6c <GL_Widget_SearchId>
    de18:	4603      	mov	r3, r0
    de1a:	4618      	mov	r0, r3
    de1c:	f013 fdde 	bl	219dc <GL_Timer_Stop>
		iRet=GL_KEY_UP;
    de20:	f64f 0359 	movw	r3, #63577	; 0xf859
    de24:	61bb      	str	r3, [r7, #24]
		break;
    de26:	e005      	b.n	de34 <GoalGetKey+0x1d4>
	case RES_TIMER_STATUS:                                    // Timer result
		iRet=0;
    de28:	2300      	movs	r3, #0
    de2a:	61bb      	str	r3, [r7, #24]
		break;
    de2c:	e002      	b.n	de34 <GoalGetKey+0x1d4>
	default:                                                  // Unknown result
		iRet=0;
    de2e:	2300      	movs	r3, #0
    de30:	61bb      	str	r3, [r7, #24]
		break;
    de32:	bf00      	nop
	}

	if (!bShortcut)                                           // Restore shortcut and disable callback on key pressed?
    de34:	79fb      	ldrb	r3, [r7, #7]
    de36:	f083 0301 	eor.w	r3, r3, #1
    de3a:	b2db      	uxtb	r3, r3
    de3c:	2b00      	cmp	r3, #0
    de3e:	d033      	beq.n	dea8 <GoalGetKey+0x248>
	{                                                                                     // Yes
		GL_Widget_UnregisterCallback(hWindow, GL_EVENT_KEY_DOWN, CallBackPressKey);       // Unregister call back on key pressed
    de40:	68f8      	ldr	r0, [r7, #12]
    de42:	2106      	movs	r1, #6
    de44:	f64c 62f5 	movw	r2, #52981	; 0xcef5
    de48:	f2c0 0200 	movt	r2, #0
    de4c:	f013 ffd0 	bl	21df0 <GL_Widget_UnregisterCallback>
		GL_Widget_SetShortcut(GL_Widget_SearchId(hWindow, BUTTON_CAN_ID), GL_KEY_CANCEL); // Set shortcut on cancel button
    de50:	68f8      	ldr	r0, [r7, #12]
    de52:	f44f 7140 	mov.w	r1, #768	; 0x300
    de56:	f013 fe09 	bl	21a6c <GL_Widget_SearchId>
    de5a:	4603      	mov	r3, r0
    de5c:	4618      	mov	r0, r3
    de5e:	f64f 0151 	movw	r1, #63569	; 0xf851
    de62:	f013 ff11 	bl	21c88 <GL_Widget_SetShortcut>
		GL_Widget_SetShortcut(GL_Widget_SearchId(hWindow, BUTTON_VAL_ID), GL_KEY_VALID);  // Set shortcut on valid button
    de66:	68f8      	ldr	r0, [r7, #12]
    de68:	f44f 7100 	mov.w	r1, #512	; 0x200
    de6c:	f013 fdfe 	bl	21a6c <GL_Widget_SearchId>
    de70:	4603      	mov	r3, r0
    de72:	4618      	mov	r0, r3
    de74:	f64f 0150 	movw	r1, #63568	; 0xf850
    de78:	f013 ff06 	bl	21c88 <GL_Widget_SetShortcut>
		GL_Widget_SetShortcut(GL_Widget_SearchId(hWindow, BUTTON_DOWN_ID), GL_KEY_DOWN);  // Set shortcut on down button
    de7c:	68f8      	ldr	r0, [r7, #12]
    de7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    de82:	f013 fdf3 	bl	21a6c <GL_Widget_SearchId>
    de86:	4603      	mov	r3, r0
    de88:	4618      	mov	r0, r3
    de8a:	f64f 015a 	movw	r1, #63578	; 0xf85a
    de8e:	f013 fefb 	bl	21c88 <GL_Widget_SetShortcut>
		GL_Widget_SetShortcut(GL_Widget_SearchId(hWindow, BUTTON_UP_ID), GL_KEY_UP);      // Set shortcut on up button
    de92:	68f8      	ldr	r0, [r7, #12]
    de94:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    de98:	f013 fde8 	bl	21a6c <GL_Widget_SearchId>
    de9c:	4603      	mov	r3, r0
    de9e:	4618      	mov	r0, r3
    dea0:	f64f 0159 	movw	r1, #63577	; 0xf859
    dea4:	f013 fef0 	bl	21c88 <GL_Widget_SetShortcut>
	}

	if (bTouch)                                               // Touch screen?
    dea8:	7cfb      	ldrb	r3, [r7, #19]
    deaa:	2b00      	cmp	r3, #0
    deac:	d00d      	beq.n	deca <GoalGetKey+0x26a>
	{                                                                                     // Yes
		GL_GraphicLib_BindSingleKey(hGraphicLib, GL_KEY_F, GL_VIRTUAL_KEY_PREVIOUS);      // Bind "F" key to virtual Key
    deae:	68b8      	ldr	r0, [r7, #8]
    deb0:	f64f 0154 	movw	r1, #63572	; 0xf854
    deb4:	f64f 021b 	movw	r2, #63515	; 0xf81b
    deb8:	f013 fc54 	bl	21764 <GL_GraphicLib_BindSingleKey>
		GL_GraphicLib_BindSingleKey(hGraphicLib, GL_KEY_DOT, GL_VIRTUAL_KEY_NEXT);        // Bind "Dot" key to virtual Key
    debc:	68b8      	ldr	r0, [r7, #8]
    debe:	212e      	movs	r1, #46	; 0x2e
    dec0:	f64f 021c 	movw	r2, #63516	; 0xf81c
    dec4:	f013 fc4e 	bl	21764 <GL_GraphicLib_BindSingleKey>
    dec8:	e01b      	b.n	df02 <GoalGetKey+0x2a2>
	}
	else
	{                                                                                     // No
		GL_GraphicLib_BindSingleKey(hGraphicLib, GL_KEY_UP, GL_VIRTUAL_KEY_PREVIOUS);     // Bind "Up" key to virtual Key
    deca:	68b8      	ldr	r0, [r7, #8]
    decc:	f64f 0159 	movw	r1, #63577	; 0xf859
    ded0:	f64f 021b 	movw	r2, #63515	; 0xf81b
    ded4:	f013 fc46 	bl	21764 <GL_GraphicLib_BindSingleKey>
		GL_GraphicLib_BindSingleKey(hGraphicLib, GL_KEY_DOWN, GL_VIRTUAL_KEY_NEXT);       // Bind "Down" key to virtual Key
    ded8:	68b8      	ldr	r0, [r7, #8]
    deda:	f64f 015a 	movw	r1, #63578	; 0xf85a
    dede:	f64f 021c 	movw	r2, #63516	; 0xf81c
    dee2:	f013 fc3f 	bl	21764 <GL_GraphicLib_BindSingleKey>
		GL_GraphicLib_BindSingleKey(hGraphicLib, GL_KEY_F1, GL_VIRTUAL_KEY_LEFT);         // Bind "F1" key to virtual Key
    dee6:	68b8      	ldr	r0, [r7, #8]
    dee8:	f64f 0155 	movw	r1, #63573	; 0xf855
    deec:	f44f 4278 	mov.w	r2, #63488	; 0xf800
    def0:	f013 fc38 	bl	21764 <GL_GraphicLib_BindSingleKey>
		GL_GraphicLib_BindSingleKey(hGraphicLib, GL_KEY_F4, GL_VIRTUAL_KEY_RIGHT);        // Bind "F4" key to virtual Key
    def4:	68b8      	ldr	r0, [r7, #8]
    def6:	f64f 0158 	movw	r1, #63576	; 0xf858
    defa:	f64f 0201 	movw	r2, #63489	; 0xf801
    defe:	f013 fc31 	bl	21764 <GL_GraphicLib_BindSingleKey>
	}

	return iRet;
    df02:	69bb      	ldr	r3, [r7, #24]
}
    df04:	4618      	mov	r0, r3
    df06:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    df0a:	f2c0 0302 	movt	r3, #2
    df0e:	69fa      	ldr	r2, [r7, #28]
    df10:	681b      	ldr	r3, [r3, #0]
    df12:	429a      	cmp	r2, r3
    df14:	d001      	beq.n	df1a <GoalGetKey+0x2ba>
    df16:	f7fb f845 	bl	8fa4 <__stack_chk_fail>
    df1a:	f107 0720 	add.w	r7, r7, #32
    df1e:	46bd      	mov	sp, r7
    df20:	bd80      	pop	{r7, pc}
    df22:	bf00      	nop

0000df24 <GoalDestroyScreen>:
//   phWindow (I-) : Pointer on window context handle.
// This function has no return value.
//****************************************************************************

void GoalDestroyScreen(T_GL_HWIDGET *phWindow)
{
    df24:	b580      	push	{r7, lr}
    df26:	b084      	sub	sp, #16
    df28:	af00      	add	r7, sp, #0
    df2a:	6078      	str	r0, [r7, #4]
    df2c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    df30:	f2c0 0302 	movt	r3, #2
    df34:	681b      	ldr	r3, [r3, #0]
    df36:	60fb      	str	r3, [r7, #12]
    // ***************
		// Empty

	// Destroy screen
	// **************
	GL_Widget_Destroy(*phWindow); // Destroy window with all widgets attached
    df38:	687b      	ldr	r3, [r7, #4]
    df3a:	681b      	ldr	r3, [r3, #0]
    df3c:	4618      	mov	r0, r3
    df3e:	f013 fd5f 	bl	21a00 <GL_Widget_Destroy>
	*phWindow=NULL;
    df42:	687b      	ldr	r3, [r7, #4]
    df44:	2200      	movs	r2, #0
    df46:	601a      	str	r2, [r3, #0]
}
    df48:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    df4c:	f2c0 0302 	movt	r3, #2
    df50:	68fa      	ldr	r2, [r7, #12]
    df52:	681b      	ldr	r3, [r3, #0]
    df54:	429a      	cmp	r2, r3
    df56:	d001      	beq.n	df5c <GoalDestroyScreen+0x38>
    df58:	f7fb f824 	bl	8fa4 <__stack_chk_fail>
    df5c:	f107 0710 	add.w	r7, r7, #16
    df60:	46bd      	mov	sp, r7
    df62:	bd80      	pop	{r7, pc}

0000df64 <GoalCreateDrawing>:
//   !NULL : Pointer to the handle of the drawing.
//   NULL : Drawing failed
//****************************************************************************

T_GL_HWIDGET GoalCreateDrawing (T_GL_HGRAPHIC_LIB hGraphicLib, T_GL_ENCODING_CHARSET eCharSet)
{
    df64:	b580      	push	{r7, lr}
    df66:	b08c      	sub	sp, #48	; 0x30
    df68:	af00      	add	r7, sp, #0
    df6a:	6078      	str	r0, [r7, #4]
    df6c:	6039      	str	r1, [r7, #0]
    df6e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    df72:	f2c0 0302 	movt	r3, #2
    df76:	681b      	ldr	r3, [r3, #0]
    df78:	62fb      	str	r3, [r7, #44]	; 0x2c
	// Local variables
    // ***************
	T_GL_HWIDGET hWindow, hTimer, hLayout, hDrawing, hLayout2, hButtonVal, hButtonCan;
	bool bTouch=FALSE;
    df7a:	2300      	movs	r3, #0
    df7c:	73fb      	strb	r3, [r7, #15]

	// Build drawing context with 2 buttons (Cancel and Valid)
	// *******************************************************
    GL_GraphicLib_SetCharset(hGraphicLib, eCharSet);                  // Change the encoding charset of the graphic library
    df7e:	6878      	ldr	r0, [r7, #4]
    df80:	6839      	ldr	r1, [r7, #0]
    df82:	f013 fc53 	bl	2182c <GL_GraphicLib_SetCharset>

	bTouch = GL_GraphicLib_IsTouchPresent(hGraphicLib);               // Touch screen?
    df86:	6878      	ldr	r0, [r7, #4]
    df88:	f013 fc3e 	bl	21808 <GL_GraphicLib_IsTouchPresent>
    df8c:	4603      	mov	r3, r0
    df8e:	73fb      	strb	r3, [r7, #15]

	hWindow = GL_Window_Create(hGraphicLib);                          // Create a window in a user area
    df90:	6878      	ldr	r0, [r7, #4]
    df92:	f013 ff3f 	bl	21e14 <GL_Window_Create>
    df96:	6138      	str	r0, [r7, #16]
	CHECK(hWindow!=NULL, lblEnd);
    df98:	693b      	ldr	r3, [r7, #16]
    df9a:	2b00      	cmp	r3, #0
    df9c:	f000 80bc 	beq.w	e118 <GoalCreateDrawing+0x1b4>

	hTimer = GL_Timer_Create(hWindow);                                // Create a timer on this window
    dfa0:	6938      	ldr	r0, [r7, #16]
    dfa2:	f013 fcf7 	bl	21994 <GL_Timer_Create>
    dfa6:	6178      	str	r0, [r7, #20]
	CHECK(hTimer!=NULL, lblKO);
    dfa8:	697b      	ldr	r3, [r7, #20]
    dfaa:	2b00      	cmp	r3, #0
    dfac:	f000 80a8 	beq.w	e100 <GoalCreateDrawing+0x19c>
	GL_Widget_SetId(hTimer, TIMER_ID);                                // Timer Identifier TIMER_ID
    dfb0:	6978      	ldr	r0, [r7, #20]
    dfb2:	2100      	movs	r1, #0
    dfb4:	f013 fe20 	bl	21bf8 <GL_Widget_SetId>
	GL_Widget_RegisterCallback(hTimer, GL_EVENT_TIMER_OUT, CallBackTimeout); // Call back when the timer expired
    dfb8:	6978      	ldr	r0, [r7, #20]
    dfba:	2108      	movs	r1, #8
    dfbc:	f24d 0239 	movw	r2, #53305	; 0xd039
    dfc0:	f2c0 0200 	movt	r2, #0
    dfc4:	f013 fd40 	bl	21a48 <GL_Widget_RegisterCallback>

	hLayout = GL_Layout_Create(hWindow);                              // Create a layout on this window
    dfc8:	6938      	ldr	r0, [r7, #16]
    dfca:	f013 fc65 	bl	21898 <GL_Layout_Create>
    dfce:	61b8      	str	r0, [r7, #24]
	CHECK(hLayout!=NULL, lblKO);
    dfd0:	69bb      	ldr	r3, [r7, #24]
    dfd2:	2b00      	cmp	r3, #0
    dfd4:	f000 8094 	beq.w	e100 <GoalCreateDrawing+0x19c>

	hDrawing = GL_Drawing_Create(hLayout);                            // Create a drawing on this layout
    dfd8:	69b8      	ldr	r0, [r7, #24]
    dfda:	f013 fb33 	bl	21644 <GL_Drawing_Create>
    dfde:	61f8      	str	r0, [r7, #28]
	CHECK(hDrawing!=NULL, lblKO);
    dfe0:	69fb      	ldr	r3, [r7, #28]
    dfe2:	2b00      	cmp	r3, #0
    dfe4:	f000 808c 	beq.w	e100 <GoalCreateDrawing+0x19c>
	GL_Widget_SetId(hDrawing, DRAWING_ID);                            // Drawing Identifier DRAWING_ID
    dfe8:	69f8      	ldr	r0, [r7, #28]
    dfea:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    dfee:	f013 fe03 	bl	21bf8 <GL_Widget_SetId>
	GL_Widget_SetItem(hDrawing, 0, 0);                                // Drawing location on this layout
    dff2:	69f8      	ldr	r0, [r7, #28]
    dff4:	2100      	movs	r1, #0
    dff6:	2200      	movs	r2, #0
    dff8:	f013 fe10 	bl	21c1c <GL_Widget_SetItem>

	hLayout2 = GL_Layout_Create(hLayout);                             // Create a second layout on this layout
    dffc:	69b8      	ldr	r0, [r7, #24]
    dffe:	f013 fc4b 	bl	21898 <GL_Layout_Create>
    e002:	6238      	str	r0, [r7, #32]
	CHECK(hLayout2!=NULL, lblKO);
    e004:	6a3b      	ldr	r3, [r7, #32]
    e006:	2b00      	cmp	r3, #0
    e008:	d07a      	beq.n	e100 <GoalCreateDrawing+0x19c>
	GL_Widget_SetId(hLayout2, LAYOUT2_ID);                            // Second layout identifier
    e00a:	6a38      	ldr	r0, [r7, #32]
    e00c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    e010:	f013 fdf2 	bl	21bf8 <GL_Widget_SetId>
	GL_Widget_SetItem(hLayout2, 0, 1);                                // Second layout location on this layout
    e014:	6a38      	ldr	r0, [r7, #32]
    e016:	2100      	movs	r1, #0
    e018:	2201      	movs	r2, #1
    e01a:	f013 fdff 	bl	21c1c <GL_Widget_SetItem>
	GL_Widget_SetGrow(hLayout2, GL_DIRECTION_WIDTH);                  // Grow beyond its size (Background width around layout will fill the complete cell)
    e01e:	6a38      	ldr	r0, [r7, #32]
    e020:	2101      	movs	r1, #1
    e022:	f013 fdd7 	bl	21bd4 <GL_Widget_SetGrow>

	hButtonCan = GL_Button_Create(hLayout2);                          // Create a cancel button on this second layout
    e026:	6a38      	ldr	r0, [r7, #32]
    e028:	f013 fa46 	bl	214b8 <GL_Button_Create>
    e02c:	6278      	str	r0, [r7, #36]	; 0x24
	CHECK(hButtonCan!=NULL, lblKO);
    e02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e030:	2b00      	cmp	r3, #0
    e032:	d065      	beq.n	e100 <GoalCreateDrawing+0x19c>
	GL_Widget_SetSource(hButtonCan, "skin://images/cancel.wgu");      // Set the cancel skinned image
    e034:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e036:	f243 0128 	movw	r1, #12328	; 0x3028
    e03a:	f2c0 0102 	movt	r1, #2
    e03e:	f013 fe59 	bl	21cf4 <GL_Widget_SetSource>
	GL_Widget_SetItem(hButtonCan, 0, 0);                              // Button location on this layout
    e042:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e044:	2100      	movs	r1, #0
    e046:	2200      	movs	r2, #0
    e048:	f013 fde8 	bl	21c1c <GL_Widget_SetItem>
	GL_Widget_SetExpand(hButtonCan, GL_DIRECTION_WIDTH);              // Expand button width
    e04c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e04e:	2101      	movs	r1, #1
    e050:	f013 fd54 	bl	21afc <GL_Widget_SetExpand>
	GL_Widget_SetShortcut(hButtonCan, GL_KEY_CANCEL);                 // Shortcut on this button
    e054:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e056:	f64f 0151 	movw	r1, #63569	; 0xf851
    e05a:	f013 fe15 	bl	21c88 <GL_Widget_SetShortcut>
	GL_Widget_SetId(hButtonCan, BUTTON_CAN_ID);                       // Cancel button Identifier
    e05e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e060:	f44f 7140 	mov.w	r1, #768	; 0x300
    e064:	f013 fdc8 	bl	21bf8 <GL_Widget_SetId>
	GL_Widget_SetGrow(hButtonCan, GL_DIRECTION_WIDTH);                // Grow beyond its size (Background width around cancel button will fill the complete cell)
    e068:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e06a:	2101      	movs	r1, #1
    e06c:	f013 fdb2 	bl	21bd4 <GL_Widget_SetGrow>
	GL_Widget_SetFocusable(hButtonCan, false);                        // No focus on this button
    e070:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e072:	2100      	movs	r1, #0
    e074:	f013 fd54 	bl	21b20 <GL_Widget_SetFocusable>
	GL_Widget_RegisterCallback(hButtonCan, GL_EVENT_STYLUS_CLICK, CallBackCancelKey); // Call back when key pressed
    e078:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e07a:	2167      	movs	r1, #103	; 0x67
    e07c:	f64c 7285 	movw	r2, #53125	; 0xcf85
    e080:	f2c0 0200 	movt	r2, #0
    e084:	f013 fce0 	bl	21a48 <GL_Widget_RegisterCallback>

	hButtonVal = GL_Button_Create(hLayout2);                          // Create a valid button on this second layout
    e088:	6a38      	ldr	r0, [r7, #32]
    e08a:	f013 fa15 	bl	214b8 <GL_Button_Create>
    e08e:	62b8      	str	r0, [r7, #40]	; 0x28
	CHECK(hButtonVal!=NULL, lblKO);
    e090:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e092:	2b00      	cmp	r3, #0
    e094:	d034      	beq.n	e100 <GoalCreateDrawing+0x19c>
	GL_Widget_SetSource(hButtonVal, "skin://images/validation.wgu");  // Set the valid skinned image
    e096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e098:	f243 017c 	movw	r1, #12412	; 0x307c
    e09c:	f2c0 0102 	movt	r1, #2
    e0a0:	f013 fe28 	bl	21cf4 <GL_Widget_SetSource>
	GL_Widget_SetItem(hButtonVal, 1, 0);                              // Button location on this layout
    e0a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e0a6:	2101      	movs	r1, #1
    e0a8:	2200      	movs	r2, #0
    e0aa:	f013 fdb7 	bl	21c1c <GL_Widget_SetItem>
	GL_Widget_SetExpand(hButtonVal, GL_DIRECTION_WIDTH);              // Expand button width
    e0ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e0b0:	2101      	movs	r1, #1
    e0b2:	f013 fd23 	bl	21afc <GL_Widget_SetExpand>
	GL_Widget_SetShortcut(hButtonVal, GL_KEY_VALID);                  // Shortcut on this button
    e0b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e0b8:	f64f 0150 	movw	r1, #63568	; 0xf850
    e0bc:	f013 fde4 	bl	21c88 <GL_Widget_SetShortcut>
	GL_Widget_SetId(hButtonVal, BUTTON_VAL_ID);                       // Valid button Identifier
    e0c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e0c2:	f44f 7100 	mov.w	r1, #512	; 0x200
    e0c6:	f013 fd97 	bl	21bf8 <GL_Widget_SetId>
	GL_Widget_SetGrow(hButtonVal, GL_DIRECTION_WIDTH);                // Grow beyond its size (Background width around valid button will fill the complete cell)
    e0ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e0cc:	2101      	movs	r1, #1
    e0ce:	f013 fd81 	bl	21bd4 <GL_Widget_SetGrow>
	GL_Widget_SetFocusable(hButtonVal, false);                        // No focus on this button
    e0d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e0d4:	2100      	movs	r1, #0
    e0d6:	f013 fd23 	bl	21b20 <GL_Widget_SetFocusable>
	GL_Widget_RegisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey); // Call back when key pressed
    e0da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e0dc:	2167      	movs	r1, #103	; 0x67
    e0de:	f64c 7249 	movw	r2, #53065	; 0xcf49
    e0e2:	f2c0 0200 	movt	r2, #0
    e0e6:	f013 fcaf 	bl	21a48 <GL_Widget_RegisterCallback>

	if(!bTouch)                                                       // Touch screen?
    e0ea:	7bfb      	ldrb	r3, [r7, #15]
    e0ec:	f083 0301 	eor.w	r3, r3, #1
    e0f0:	b2db      	uxtb	r3, r3
    e0f2:	2b00      	cmp	r3, #0
    e0f4:	d00d      	beq.n	e112 <GoalCreateDrawing+0x1ae>
		GL_Widget_SetVisible(hLayout2, false);                        // No, do not show second layout (keep shortcut access on key pressed)
    e0f6:	6a38      	ldr	r0, [r7, #32]
    e0f8:	2100      	movs	r1, #0
    e0fa:	f013 fe55 	bl	21da8 <GL_Widget_SetVisible>

	goto lblEnd;
    e0fe:	e008      	b.n	e112 <GoalCreateDrawing+0x1ae>

	// Errors treatment
    // ****************
lblKO:                                                                // Window creation failed
	if (hWindow)
    e100:	693b      	ldr	r3, [r7, #16]
    e102:	2b00      	cmp	r3, #0
    e104:	d007      	beq.n	e116 <GoalCreateDrawing+0x1b2>
	{
		GL_Widget_Destroy(hWindow);                                   // Destroy window and all widgets
    e106:	6938      	ldr	r0, [r7, #16]
    e108:	f013 fc7a 	bl	21a00 <GL_Widget_Destroy>
		hWindow=NULL;
    e10c:	2300      	movs	r3, #0
    e10e:	613b      	str	r3, [r7, #16]
	}
	goto lblEnd;
    e110:	e001      	b.n	e116 <GoalCreateDrawing+0x1b2>
	GL_Widget_RegisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey); // Call back when key pressed

	if(!bTouch)                                                       // Touch screen?
		GL_Widget_SetVisible(hLayout2, false);                        // No, do not show second layout (keep shortcut access on key pressed)

	goto lblEnd;
    e112:	bf00      	nop
    e114:	e000      	b.n	e118 <GoalCreateDrawing+0x1b4>
	if (hWindow)
	{
		GL_Widget_Destroy(hWindow);                                   // Destroy window and all widgets
		hWindow=NULL;
	}
	goto lblEnd;
    e116:	bf00      	nop
lblEnd:
	return hWindow;
    e118:	693b      	ldr	r3, [r7, #16]
}
    e11a:	4618      	mov	r0, r3
    e11c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    e120:	f2c0 0302 	movt	r3, #2
    e124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e126:	681b      	ldr	r3, [r3, #0]
    e128:	429a      	cmp	r2, r3
    e12a:	d001      	beq.n	e130 <GoalCreateDrawing+0x1cc>
    e12c:	f7fa ff3a 	bl	8fa4 <__stack_chk_fail>
    e130:	f107 0730 	add.w	r7, r7, #48	; 0x30
    e134:	46bd      	mov	sp, r7
    e136:	bd80      	pop	{r7, pc}

0000e138 <GoalClrDrawing>:
//   >=0 : Clear drawing done.
//   <0 : Clear drawing failed.
//****************************************************************************

int GoalClrDrawing(T_GL_HWIDGET hWindow, T_GL_COLOR ulBackColor, unsigned int uiKeys, bool bRefresh)
{
    e138:	b580      	push	{r7, lr}
    e13a:	b088      	sub	sp, #32
    e13c:	af00      	add	r7, sp, #0
    e13e:	60f8      	str	r0, [r7, #12]
    e140:	60b9      	str	r1, [r7, #8]
    e142:	607a      	str	r2, [r7, #4]
    e144:	70fb      	strb	r3, [r7, #3]
    e146:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    e14a:	f2c0 0302 	movt	r3, #2
    e14e:	681b      	ldr	r3, [r3, #0]
    e150:	61fb      	str	r3, [r7, #28]
	T_GL_HWIDGET hButtonVal, hButtonCan;
	int iRet;

	// Disable the complete second layout
	// **********************************
	hButtonCan = GL_Widget_SearchId(hWindow, BUTTON_CAN_ID);     // Retrieve the cancel button on this second layout
    e152:	68f8      	ldr	r0, [r7, #12]
    e154:	f44f 7140 	mov.w	r1, #768	; 0x300
    e158:	f013 fc88 	bl	21a6c <GL_Widget_SearchId>
    e15c:	6178      	str	r0, [r7, #20]
	CHECK(hButtonCan!=NULL, lblKO);
    e15e:	697b      	ldr	r3, [r7, #20]
    e160:	2b00      	cmp	r3, #0
    e162:	d064      	beq.n	e22e <GoalClrDrawing+0xf6>
	hButtonVal = GL_Widget_SearchId(hWindow, BUTTON_VAL_ID);     // Retrieve the valid button on this second layout
    e164:	68f8      	ldr	r0, [r7, #12]
    e166:	f44f 7100 	mov.w	r1, #512	; 0x200
    e16a:	f013 fc7f 	bl	21a6c <GL_Widget_SearchId>
    e16e:	61b8      	str	r0, [r7, #24]
	CHECK(hButtonVal!=NULL, lblKO);
    e170:	69bb      	ldr	r3, [r7, #24]
    e172:	2b00      	cmp	r3, #0
    e174:	d05b      	beq.n	e22e <GoalClrDrawing+0xf6>

	GL_Widget_SetVisible(hButtonCan, false);                     // Blind the cancel button
    e176:	6978      	ldr	r0, [r7, #20]
    e178:	2100      	movs	r1, #0
    e17a:	f013 fe15 	bl	21da8 <GL_Widget_SetVisible>
	GL_Widget_UnregisterCallback(hButtonCan, GL_EVENT_STYLUS_CLICK, CallBackCancelKey); // Unregister call back on cancel button
    e17e:	6978      	ldr	r0, [r7, #20]
    e180:	2167      	movs	r1, #103	; 0x67
    e182:	f64c 7285 	movw	r2, #53125	; 0xcf85
    e186:	f2c0 0200 	movt	r2, #0
    e18a:	f013 fe31 	bl	21df0 <GL_Widget_UnregisterCallback>
	GL_Widget_SetVisible(hButtonVal, false);                     // Blind the valid button
    e18e:	69b8      	ldr	r0, [r7, #24]
    e190:	2100      	movs	r1, #0
    e192:	f013 fe09 	bl	21da8 <GL_Widget_SetVisible>
	GL_Widget_UnregisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey); // Unregister call back on valid button
    e196:	69b8      	ldr	r0, [r7, #24]
    e198:	2167      	movs	r1, #103	; 0x67
    e19a:	f64c 7249 	movw	r2, #53065	; 0xcf49
    e19e:	f2c0 0200 	movt	r2, #0
    e1a2:	f013 fe25 	bl	21df0 <GL_Widget_UnregisterCallback>

	// Set the second layout with the right properties
	// ***********************************************
	if ((uiKeys & KEY_CANCEL) == KEY_CANCEL)                     // Cancel key?
    e1a6:	687b      	ldr	r3, [r7, #4]
    e1a8:	f003 0302 	and.w	r3, r3, #2
    e1ac:	2b00      	cmp	r3, #0
    e1ae:	d00b      	beq.n	e1c8 <GoalClrDrawing+0x90>
	{
		GL_Widget_SetVisible(hButtonCan, true);                  // Yes, show the cancel key on this second layout
    e1b0:	6978      	ldr	r0, [r7, #20]
    e1b2:	2101      	movs	r1, #1
    e1b4:	f013 fdf8 	bl	21da8 <GL_Widget_SetVisible>
		GL_Widget_RegisterCallback(hButtonCan, GL_EVENT_STYLUS_CLICK, CallBackCancelKey); // Register call back when cancel key pressed or touched
    e1b8:	6978      	ldr	r0, [r7, #20]
    e1ba:	2167      	movs	r1, #103	; 0x67
    e1bc:	f64c 7285 	movw	r2, #53125	; 0xcf85
    e1c0:	f2c0 0200 	movt	r2, #0
    e1c4:	f013 fc40 	bl	21a48 <GL_Widget_RegisterCallback>
	}

	if ((uiKeys & KEY_VALID) == KEY_VALID)                       // Valid key?
    e1c8:	687b      	ldr	r3, [r7, #4]
    e1ca:	f003 0301 	and.w	r3, r3, #1
    e1ce:	2b00      	cmp	r3, #0
    e1d0:	d00b      	beq.n	e1ea <GoalClrDrawing+0xb2>
	{
		GL_Widget_SetVisible(hButtonVal, true);                  // Yes, show the valid key on this second layout
    e1d2:	69b8      	ldr	r0, [r7, #24]
    e1d4:	2101      	movs	r1, #1
    e1d6:	f013 fde7 	bl	21da8 <GL_Widget_SetVisible>
		GL_Widget_RegisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey); // Register call back when valid key pressed or touched
    e1da:	69b8      	ldr	r0, [r7, #24]
    e1dc:	2167      	movs	r1, #103	; 0x67
    e1de:	f64c 7249 	movw	r2, #53065	; 0xcf49
    e1e2:	f2c0 0200 	movt	r2, #0
    e1e6:	f013 fc2f 	bl	21a48 <GL_Widget_RegisterCallback>
	}

	if (IsColorDisplay())                                        // Color display?
    e1ea:	f012 f919 	bl	20420 <IsColorDisplay>
    e1ee:	4603      	mov	r3, r0
    e1f0:	2b00      	cmp	r3, #0
    e1f2:	d004      	beq.n	e1fe <GoalClrDrawing+0xc6>
		GL_Widget_SetBackColor(hWindow, ulBackColor);            // Yes, set window back color
    e1f4:	68f8      	ldr	r0, [r7, #12]
    e1f6:	68b9      	ldr	r1, [r7, #8]
    e1f8:	f013 fc5c 	bl	21ab4 <GL_Widget_SetBackColor>
    e1fc:	e004      	b.n	e208 <GoalClrDrawing+0xd0>
	else
		GL_Widget_SetBackColor(hWindow, GL_COLOR_WHITE);         // No, force window back color to white
    e1fe:	68f8      	ldr	r0, [r7, #12]
    e200:	f04f 31ff 	mov.w	r1, #4294967295
    e204:	f013 fc56 	bl	21ab4 <GL_Widget_SetBackColor>

	// Clear drawing
	// *************
	GL_Drawing_Clear(GL_Widget_SearchId(hWindow, DRAWING_ID));   // Clear drawing
    e208:	68f8      	ldr	r0, [r7, #12]
    e20a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e20e:	f013 fc2d 	bl	21a6c <GL_Widget_SearchId>
    e212:	4603      	mov	r3, r0
    e214:	4618      	mov	r0, r3
    e216:	f013 fa03 	bl	21620 <GL_Drawing_Clear>

	if (bRefresh)                                                // Refresh window?
    e21a:	78fb      	ldrb	r3, [r7, #3]
    e21c:	2b00      	cmp	r3, #0
    e21e:	d003      	beq.n	e228 <GoalClrDrawing+0xf0>
		GL_Window_Dispatch(hWindow, 0);                          // Yes, refresh it
    e220:	68f8      	ldr	r0, [r7, #12]
    e222:	2100      	movs	r1, #0
    e224:	f013 fe08 	bl	21e38 <GL_Window_Dispatch>

	iRet=1;
    e228:	2301      	movs	r3, #1
    e22a:	613b      	str	r3, [r7, #16]
	goto lblEnd;
    e22c:	e003      	b.n	e236 <GoalClrDrawing+0xfe>

	// Errors treatment
    // ****************
lblKO:                                                           // Clear drawing failed
	iRet=-1;
    e22e:	f04f 33ff 	mov.w	r3, #4294967295
    e232:	613b      	str	r3, [r7, #16]
	goto lblEnd;
    e234:	bf00      	nop
lblEnd:
	return iRet;
    e236:	693b      	ldr	r3, [r7, #16]
}
    e238:	4618      	mov	r0, r3
    e23a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    e23e:	f2c0 0302 	movt	r3, #2
    e242:	69fa      	ldr	r2, [r7, #28]
    e244:	681b      	ldr	r3, [r3, #0]
    e246:	429a      	cmp	r2, r3
    e248:	d001      	beq.n	e24e <GoalClrDrawing+0x116>
    e24a:	f7fa feab 	bl	8fa4 <__stack_chk_fail>
    e24e:	f107 0720 	add.w	r7, r7, #32
    e252:	46bd      	mov	sp, r7
    e254:	bd80      	pop	{r7, pc}
    e256:	bf00      	nop

0000e258 <GoalDrawLine>:
//   >=0 : Drawing line done (Exit screen : 0=timeout,GL_KEY_CANCEL,GL_KEY_VALID).
//   <0 : Drawing line failed.
//****************************************************************************

int GoalDrawLine(T_GL_HWIDGET hWindow, T_GL_COLOR ulPen, T_GL_COORD sX1, T_GL_COORD sY1, T_GL_COORD sX2, T_GL_COORD sY2, ulong ulTimeOut, bool bRefresh)
{
    e258:	b580      	push	{r7, lr}
    e25a:	b08c      	sub	sp, #48	; 0x30
    e25c:	af02      	add	r7, sp, #8
    e25e:	61f8      	str	r0, [r7, #28]
    e260:	61b9      	str	r1, [r7, #24]
    e262:	617a      	str	r2, [r7, #20]
    e264:	613b      	str	r3, [r7, #16]
    e266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e268:	60fb      	str	r3, [r7, #12]
    e26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e26c:	60bb      	str	r3, [r7, #8]
    e26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e270:	607b      	str	r3, [r7, #4]
    e272:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    e276:	70fb      	strb	r3, [r7, #3]
    e278:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    e27c:	f2c0 0302 	movt	r3, #2
    e280:	681b      	ldr	r3, [r3, #0]
    e282:	627b      	str	r3, [r7, #36]	; 0x24
    // ***************
	int iRet;

	// Drawing line
	// ************
	GL_Drawing_SetPen(GL_Widget_SearchId(hWindow, DRAWING_ID), ulPen, 1, GL_UNIT_PIXEL); // Set pen color and stroke (only 1 pixel supported)
    e284:	69f8      	ldr	r0, [r7, #28]
    e286:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e28a:	f013 fbef 	bl	21a6c <GL_Widget_SearchId>
    e28e:	4603      	mov	r3, r0
    e290:	4618      	mov	r0, r3
    e292:	69b9      	ldr	r1, [r7, #24]
    e294:	2201      	movs	r2, #1
    e296:	2300      	movs	r3, #0
    e298:	f013 fa52 	bl	21740 <GL_Drawing_SetPen>
	GL_Drawing_DrawLine(GL_Widget_SearchId(hWindow, DRAWING_ID), sX1, sY1, sX2, sY2, GL_UNIT_PERCENT); // Draw line with pen
    e29c:	69f8      	ldr	r0, [r7, #28]
    e29e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e2a2:	f013 fbe3 	bl	21a6c <GL_Widget_SearchId>
    e2a6:	4603      	mov	r3, r0
    e2a8:	68ba      	ldr	r2, [r7, #8]
    e2aa:	9200      	str	r2, [sp, #0]
    e2ac:	2201      	movs	r2, #1
    e2ae:	9201      	str	r2, [sp, #4]
    e2b0:	4618      	mov	r0, r3
    e2b2:	6979      	ldr	r1, [r7, #20]
    e2b4:	693a      	ldr	r2, [r7, #16]
    e2b6:	68fb      	ldr	r3, [r7, #12]
    e2b8:	f013 f9e8 	bl	2168c <GL_Drawing_DrawLine>

	CHECK(ulTimeOut!=0, lblNoTimer);                       // No timer to set
    e2bc:	687b      	ldr	r3, [r7, #4]
    e2be:	2b00      	cmp	r3, #0
    e2c0:	d045      	beq.n	e34e <GoalDrawLine+0xf6>

	// Restart timer
	// *************
	if (ulTimeOut == GL_TIME_INFINITE)                     // Set timeout value
    e2c2:	687b      	ldr	r3, [r7, #4]
    e2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
    e2c8:	d10a      	bne.n	e2e0 <GoalDrawLine+0x88>
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), 0x7FFFFFFF); // Bug 0xFFFFFFFF not supported
    e2ca:	69f8      	ldr	r0, [r7, #28]
    e2cc:	2100      	movs	r1, #0
    e2ce:	f013 fbcd 	bl	21a6c <GL_Widget_SearchId>
    e2d2:	4603      	mov	r3, r0
    e2d4:	4618      	mov	r0, r3
    e2d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e2da:	f013 fb6d 	bl	219b8 <GL_Timer_SetInterval>
    e2de:	e008      	b.n	e2f2 <GoalDrawLine+0x9a>
	else
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), ulTimeOut);
    e2e0:	69f8      	ldr	r0, [r7, #28]
    e2e2:	2100      	movs	r1, #0
    e2e4:	f013 fbc2 	bl	21a6c <GL_Widget_SearchId>
    e2e8:	4603      	mov	r3, r0
    e2ea:	4618      	mov	r0, r3
    e2ec:	6879      	ldr	r1, [r7, #4]
    e2ee:	f013 fb63 	bl	219b8 <GL_Timer_SetInterval>

	// Loop indefinitely until the result is set from the call back functions
	// **********************************************************************
	GL_Window_MainLoop(hWindow);                           // Wait until a result is set
    e2f2:	69f8      	ldr	r0, [r7, #28]
    e2f4:	f013 fdc4 	bl	21e80 <GL_Window_MainLoop>

	// Test the result set by the call back functions
	// **********************************************
	switch(GL_Window_GetResult(hWindow))                   // Get the result
    e2f8:	69f8      	ldr	r0, [r7, #28]
    e2fa:	f013 fdaf 	bl	21e5c <GL_Window_GetResult>
    e2fe:	4603      	mov	r3, r0
    e300:	2b01      	cmp	r3, #1
    e302:	d010      	beq.n	e326 <GoalDrawLine+0xce>
    e304:	2b01      	cmp	r3, #1
    e306:	d302      	bcc.n	e30e <GoalDrawLine+0xb6>
    e308:	2b04      	cmp	r3, #4
    e30a:	d018      	beq.n	e33e <GoalDrawLine+0xe6>
    e30c:	e01a      	b.n	e344 <GoalDrawLine+0xec>
	{
	case RES_VALID_STATUS:                                 // Key valid result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    e30e:	69f8      	ldr	r0, [r7, #28]
    e310:	2100      	movs	r1, #0
    e312:	f013 fbab 	bl	21a6c <GL_Widget_SearchId>
    e316:	4603      	mov	r3, r0
    e318:	4618      	mov	r0, r3
    e31a:	f013 fb5f 	bl	219dc <GL_Timer_Stop>
		iRet=GL_KEY_VALID;
    e31e:	f64f 0350 	movw	r3, #63568	; 0xf850
    e322:	623b      	str	r3, [r7, #32]
		break;
    e324:	e012      	b.n	e34c <GoalDrawLine+0xf4>
	case RES_CANCEL_STATUS:                                // Key cancel result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    e326:	69f8      	ldr	r0, [r7, #28]
    e328:	2100      	movs	r1, #0
    e32a:	f013 fb9f 	bl	21a6c <GL_Widget_SearchId>
    e32e:	4603      	mov	r3, r0
    e330:	4618      	mov	r0, r3
    e332:	f013 fb53 	bl	219dc <GL_Timer_Stop>
		iRet=GL_KEY_CANCEL;
    e336:	f64f 0351 	movw	r3, #63569	; 0xf851
    e33a:	623b      	str	r3, [r7, #32]
		break;
    e33c:	e006      	b.n	e34c <GoalDrawLine+0xf4>
	case RES_TIMER_STATUS:                                 // Timer result
		iRet=0;
    e33e:	2300      	movs	r3, #0
    e340:	623b      	str	r3, [r7, #32]
		break;
    e342:	e003      	b.n	e34c <GoalDrawLine+0xf4>
	default:                                               // Unknown result
		iRet=-1;
    e344:	f04f 33ff 	mov.w	r3, #4294967295
    e348:	623b      	str	r3, [r7, #32]
		break;
    e34a:	bf00      	nop
	}

	goto lblEnd;
    e34c:	e017      	b.n	e37e <GoalDrawLine+0x126>

	// Errors treatment
    // ****************
lblNoTimer:                                                // No timer used
	iRet=0;
    e34e:	2300      	movs	r3, #0
    e350:	623b      	str	r3, [r7, #32]
	if (bRefresh)
    e352:	78fb      	ldrb	r3, [r7, #3]
    e354:	2b00      	cmp	r3, #0
    e356:	d011      	beq.n	e37c <GoalDrawLine+0x124>
	{
		iRet = GL_Window_Dispatch(hWindow, 0);             // Refresh the window
    e358:	69f8      	ldr	r0, [r7, #28]
    e35a:	2100      	movs	r1, #0
    e35c:	f013 fd6c 	bl	21e38 <GL_Window_Dispatch>
    e360:	4603      	mov	r3, r0
    e362:	623b      	str	r3, [r7, #32]
		if (iRet == RES_VALID_STATUS)
    e364:	6a3b      	ldr	r3, [r7, #32]
    e366:	2b00      	cmp	r3, #0
    e368:	d102      	bne.n	e370 <GoalDrawLine+0x118>
			iRet=GL_KEY_VALID;
    e36a:	f64f 0350 	movw	r3, #63568	; 0xf850
    e36e:	623b      	str	r3, [r7, #32]
		if (iRet == RES_CANCEL_STATUS)
    e370:	6a3b      	ldr	r3, [r7, #32]
    e372:	2b01      	cmp	r3, #1
    e374:	d102      	bne.n	e37c <GoalDrawLine+0x124>
			iRet=GL_KEY_CANCEL;
    e376:	f64f 0351 	movw	r3, #63569	; 0xf851
    e37a:	623b      	str	r3, [r7, #32]
	}
	goto lblEnd;
    e37c:	bf00      	nop
lblEnd:
	return iRet;
    e37e:	6a3b      	ldr	r3, [r7, #32]
}
    e380:	4618      	mov	r0, r3
    e382:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    e386:	f2c0 0302 	movt	r3, #2
    e38a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e38c:	681b      	ldr	r3, [r3, #0]
    e38e:	429a      	cmp	r2, r3
    e390:	d001      	beq.n	e396 <GoalDrawLine+0x13e>
    e392:	f7fa fe07 	bl	8fa4 <__stack_chk_fail>
    e396:	f107 0728 	add.w	r7, r7, #40	; 0x28
    e39a:	46bd      	mov	sp, r7
    e39c:	bd80      	pop	{r7, pc}
    e39e:	bf00      	nop

0000e3a0 <GoalDrawRect>:
//   >=0 : Drawing rectangle done (Exit screen : 0=timeout,GL_KEY_CANCEL,GL_KEY_VALID).
//   <0 : Drawing rectangle failed.
//****************************************************************************

int GoalDrawRect(T_GL_HWIDGET hWindow, T_GL_COLOR ulPen, T_GL_COLOR ulBrush, T_GL_COORD sX, T_GL_COORD sY, T_GL_COORD sWidth, T_GL_COORD sHeight, ulong ulTimeOut, bool bRefresh)
{
    e3a0:	b580      	push	{r7, lr}
    e3a2:	b08e      	sub	sp, #56	; 0x38
    e3a4:	af02      	add	r7, sp, #8
    e3a6:	6278      	str	r0, [r7, #36]	; 0x24
    e3a8:	6239      	str	r1, [r7, #32]
    e3aa:	61fa      	str	r2, [r7, #28]
    e3ac:	61bb      	str	r3, [r7, #24]
    e3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e3b0:	617b      	str	r3, [r7, #20]
    e3b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e3b4:	613b      	str	r3, [r7, #16]
    e3b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e3b8:	60fb      	str	r3, [r7, #12]
    e3ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e3bc:	60bb      	str	r3, [r7, #8]
    e3be:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
    e3c2:	71fb      	strb	r3, [r7, #7]
    e3c4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    e3c8:	f2c0 0302 	movt	r3, #2
    e3cc:	681b      	ldr	r3, [r3, #0]
    e3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    // ***************
	int iRet;

	// Drawing rectangle
	// *****************
	GL_Drawing_SetPen(GL_Widget_SearchId(hWindow, DRAWING_ID), ulPen, 1, GL_UNIT_PIXEL); // Set pen color and stroke (only 1 pixel supported)
    e3d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e3d2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e3d6:	f013 fb49 	bl	21a6c <GL_Widget_SearchId>
    e3da:	4603      	mov	r3, r0
    e3dc:	4618      	mov	r0, r3
    e3de:	6a39      	ldr	r1, [r7, #32]
    e3e0:	2201      	movs	r2, #1
    e3e2:	2300      	movs	r3, #0
    e3e4:	f013 f9ac 	bl	21740 <GL_Drawing_SetPen>
	GL_Drawing_SetBrush(GL_Widget_SearchId(hWindow, DRAWING_ID), ulBrush);               // Set brush color
    e3e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e3ea:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e3ee:	f013 fb3d 	bl	21a6c <GL_Widget_SearchId>
    e3f2:	4603      	mov	r3, r0
    e3f4:	4618      	mov	r0, r3
    e3f6:	69f9      	ldr	r1, [r7, #28]
    e3f8:	f013 f97e 	bl	216f8 <GL_Drawing_SetBrush>
	GL_Drawing_DrawRect(GL_Widget_SearchId(hWindow, DRAWING_ID), sX, sY, sWidth, sHeight, GL_UNIT_PERCENT); // Draw rectangle with pen and brush
    e3fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e3fe:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e402:	f013 fb33 	bl	21a6c <GL_Widget_SearchId>
    e406:	4602      	mov	r2, r0
    e408:	693b      	ldr	r3, [r7, #16]
    e40a:	68f9      	ldr	r1, [r7, #12]
    e40c:	9100      	str	r1, [sp, #0]
    e40e:	2101      	movs	r1, #1
    e410:	9101      	str	r1, [sp, #4]
    e412:	4610      	mov	r0, r2
    e414:	69b9      	ldr	r1, [r7, #24]
    e416:	697a      	ldr	r2, [r7, #20]
    e418:	f013 f94a 	bl	216b0 <GL_Drawing_DrawRect>

	CHECK(ulTimeOut!=0, lblNoTimer);                       // No timer to set
    e41c:	68bb      	ldr	r3, [r7, #8]
    e41e:	2b00      	cmp	r3, #0
    e420:	d045      	beq.n	e4ae <GoalDrawRect+0x10e>

	// Restart timer
	// *************
	if (ulTimeOut == GL_TIME_INFINITE)                     // Set timeout value
    e422:	68bb      	ldr	r3, [r7, #8]
    e424:	f1b3 3fff 	cmp.w	r3, #4294967295
    e428:	d10a      	bne.n	e440 <GoalDrawRect+0xa0>
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), 0x7FFFFFFF); // Bug 0xFFFFFFFF not supported
    e42a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e42c:	2100      	movs	r1, #0
    e42e:	f013 fb1d 	bl	21a6c <GL_Widget_SearchId>
    e432:	4603      	mov	r3, r0
    e434:	4618      	mov	r0, r3
    e436:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e43a:	f013 fabd 	bl	219b8 <GL_Timer_SetInterval>
    e43e:	e008      	b.n	e452 <GoalDrawRect+0xb2>
	else
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), ulTimeOut);
    e440:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e442:	2100      	movs	r1, #0
    e444:	f013 fb12 	bl	21a6c <GL_Widget_SearchId>
    e448:	4603      	mov	r3, r0
    e44a:	4618      	mov	r0, r3
    e44c:	68b9      	ldr	r1, [r7, #8]
    e44e:	f013 fab3 	bl	219b8 <GL_Timer_SetInterval>

	// Loop indefinitely until the result is set from the call back functions
	// **********************************************************************
	GL_Window_MainLoop(hWindow);                           // Wait until a result is set
    e452:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e454:	f013 fd14 	bl	21e80 <GL_Window_MainLoop>

	// Test the result set by the call back functions
	// **********************************************
	switch(GL_Window_GetResult(hWindow))                   // Get the result
    e458:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e45a:	f013 fcff 	bl	21e5c <GL_Window_GetResult>
    e45e:	4603      	mov	r3, r0
    e460:	2b01      	cmp	r3, #1
    e462:	d010      	beq.n	e486 <GoalDrawRect+0xe6>
    e464:	2b01      	cmp	r3, #1
    e466:	d302      	bcc.n	e46e <GoalDrawRect+0xce>
    e468:	2b04      	cmp	r3, #4
    e46a:	d018      	beq.n	e49e <GoalDrawRect+0xfe>
    e46c:	e01a      	b.n	e4a4 <GoalDrawRect+0x104>
	{
	case RES_VALID_STATUS:                                 // Key valid result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    e46e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e470:	2100      	movs	r1, #0
    e472:	f013 fafb 	bl	21a6c <GL_Widget_SearchId>
    e476:	4603      	mov	r3, r0
    e478:	4618      	mov	r0, r3
    e47a:	f013 faaf 	bl	219dc <GL_Timer_Stop>
		iRet=GL_KEY_VALID;
    e47e:	f64f 0350 	movw	r3, #63568	; 0xf850
    e482:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
    e484:	e012      	b.n	e4ac <GoalDrawRect+0x10c>
	case RES_CANCEL_STATUS:                                // Key cancel result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    e486:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e488:	2100      	movs	r1, #0
    e48a:	f013 faef 	bl	21a6c <GL_Widget_SearchId>
    e48e:	4603      	mov	r3, r0
    e490:	4618      	mov	r0, r3
    e492:	f013 faa3 	bl	219dc <GL_Timer_Stop>
		iRet=GL_KEY_CANCEL;
    e496:	f64f 0351 	movw	r3, #63569	; 0xf851
    e49a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
    e49c:	e006      	b.n	e4ac <GoalDrawRect+0x10c>
	case RES_TIMER_STATUS:                                 // Timer result
		iRet=0;
    e49e:	2300      	movs	r3, #0
    e4a0:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
    e4a2:	e003      	b.n	e4ac <GoalDrawRect+0x10c>
	default:                                               // Unknown result
		iRet=-1;
    e4a4:	f04f 33ff 	mov.w	r3, #4294967295
    e4a8:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
    e4aa:	bf00      	nop
	}

	goto lblEnd;
    e4ac:	e017      	b.n	e4de <GoalDrawRect+0x13e>

	// Errors treatment
    // ****************
lblNoTimer:                                                // No timer used
	iRet=0;
    e4ae:	2300      	movs	r3, #0
    e4b0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (bRefresh)
    e4b2:	79fb      	ldrb	r3, [r7, #7]
    e4b4:	2b00      	cmp	r3, #0
    e4b6:	d011      	beq.n	e4dc <GoalDrawRect+0x13c>
	{
		iRet = GL_Window_Dispatch(hWindow, 0);             // Refresh the window
    e4b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e4ba:	2100      	movs	r1, #0
    e4bc:	f013 fcbc 	bl	21e38 <GL_Window_Dispatch>
    e4c0:	4603      	mov	r3, r0
    e4c2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (iRet == RES_VALID_STATUS)
    e4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e4c6:	2b00      	cmp	r3, #0
    e4c8:	d102      	bne.n	e4d0 <GoalDrawRect+0x130>
			iRet=GL_KEY_VALID;
    e4ca:	f64f 0350 	movw	r3, #63568	; 0xf850
    e4ce:	62bb      	str	r3, [r7, #40]	; 0x28
		if (iRet == RES_CANCEL_STATUS)
    e4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e4d2:	2b01      	cmp	r3, #1
    e4d4:	d102      	bne.n	e4dc <GoalDrawRect+0x13c>
			iRet=GL_KEY_CANCEL;
    e4d6:	f64f 0351 	movw	r3, #63569	; 0xf851
    e4da:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	goto lblEnd;
    e4dc:	bf00      	nop
lblEnd:
	return iRet;
    e4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    e4e0:	4618      	mov	r0, r3
    e4e2:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    e4e6:	f2c0 0302 	movt	r3, #2
    e4ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e4ec:	681b      	ldr	r3, [r3, #0]
    e4ee:	429a      	cmp	r2, r3
    e4f0:	d001      	beq.n	e4f6 <GoalDrawRect+0x156>
    e4f2:	f7fa fd57 	bl	8fa4 <__stack_chk_fail>
    e4f6:	f107 0730 	add.w	r7, r7, #48	; 0x30
    e4fa:	46bd      	mov	sp, r7
    e4fc:	bd80      	pop	{r7, pc}
    e4fe:	bf00      	nop

0000e500 <GoalDrawEllipse>:
//   >=0 : Drawing ellipse done (Exit screen : 0=timeout,GEL_KEY_CANCEL,GL_KEY_VALID).
//   <0 : Drawing ellipse failed.
//****************************************************************************

int GoalDrawEllipse(T_GL_HWIDGET hWindow, T_GL_COLOR ulPen, T_GL_COLOR ulBrush, T_GL_COORD sX, T_GL_COORD sY, T_GL_DIM usRadiusX, T_GL_DIM usRadiusY, ulong ulTimeOut, bool bRefresh)
{
    e500:	b580      	push	{r7, lr}
    e502:	b08e      	sub	sp, #56	; 0x38
    e504:	af02      	add	r7, sp, #8
    e506:	6278      	str	r0, [r7, #36]	; 0x24
    e508:	6239      	str	r1, [r7, #32]
    e50a:	61fa      	str	r2, [r7, #28]
    e50c:	61bb      	str	r3, [r7, #24]
    e50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e510:	617b      	str	r3, [r7, #20]
    e512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e514:	613b      	str	r3, [r7, #16]
    e516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e518:	60fb      	str	r3, [r7, #12]
    e51a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e51c:	60bb      	str	r3, [r7, #8]
    e51e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
    e522:	71fb      	strb	r3, [r7, #7]
    e524:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    e528:	f2c0 0302 	movt	r3, #2
    e52c:	681b      	ldr	r3, [r3, #0]
    e52e:	62fb      	str	r3, [r7, #44]	; 0x2c
    // ***************
	int iRet;

	// Drawing ellipse
	// ***************
	GL_Drawing_SetPen(GL_Widget_SearchId(hWindow, DRAWING_ID), ulPen, 1, GL_UNIT_PIXEL); // Set pen color and stroke (only 1 pixel supported)
    e530:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e532:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e536:	f013 fa99 	bl	21a6c <GL_Widget_SearchId>
    e53a:	4603      	mov	r3, r0
    e53c:	4618      	mov	r0, r3
    e53e:	6a39      	ldr	r1, [r7, #32]
    e540:	2201      	movs	r2, #1
    e542:	2300      	movs	r3, #0
    e544:	f013 f8fc 	bl	21740 <GL_Drawing_SetPen>
	GL_Drawing_SetBrush(GL_Widget_SearchId(hWindow, DRAWING_ID), ulBrush);               // Set brush color
    e548:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e54a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e54e:	f013 fa8d 	bl	21a6c <GL_Widget_SearchId>
    e552:	4603      	mov	r3, r0
    e554:	4618      	mov	r0, r3
    e556:	69f9      	ldr	r1, [r7, #28]
    e558:	f013 f8ce 	bl	216f8 <GL_Drawing_SetBrush>
	GL_Drawing_DrawEllipse(GL_Widget_SearchId(hWindow, DRAWING_ID), sX, sY, usRadiusX, usRadiusY, GL_UNIT_PERCENT); // Draw ellipse with pen and brush
    e55c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e55e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e562:	f013 fa83 	bl	21a6c <GL_Widget_SearchId>
    e566:	4603      	mov	r3, r0
    e568:	68fa      	ldr	r2, [r7, #12]
    e56a:	9200      	str	r2, [sp, #0]
    e56c:	2201      	movs	r2, #1
    e56e:	9201      	str	r2, [sp, #4]
    e570:	4618      	mov	r0, r3
    e572:	69b9      	ldr	r1, [r7, #24]
    e574:	697a      	ldr	r2, [r7, #20]
    e576:	693b      	ldr	r3, [r7, #16]
    e578:	f013 f876 	bl	21668 <GL_Drawing_DrawEllipse>

	CHECK(ulTimeOut!=0, lblNoTimer);                       // No timer to set
    e57c:	68bb      	ldr	r3, [r7, #8]
    e57e:	2b00      	cmp	r3, #0
    e580:	d045      	beq.n	e60e <GoalDrawEllipse+0x10e>

	// Restart timer
	// *************
	if (ulTimeOut == GL_TIME_INFINITE)                     // Set timeout value
    e582:	68bb      	ldr	r3, [r7, #8]
    e584:	f1b3 3fff 	cmp.w	r3, #4294967295
    e588:	d10a      	bne.n	e5a0 <GoalDrawEllipse+0xa0>
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), 0x7FFFFFFF); // Bug 0xFFFFFFFF not supported
    e58a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e58c:	2100      	movs	r1, #0
    e58e:	f013 fa6d 	bl	21a6c <GL_Widget_SearchId>
    e592:	4603      	mov	r3, r0
    e594:	4618      	mov	r0, r3
    e596:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e59a:	f013 fa0d 	bl	219b8 <GL_Timer_SetInterval>
    e59e:	e008      	b.n	e5b2 <GoalDrawEllipse+0xb2>
	else
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), ulTimeOut);
    e5a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e5a2:	2100      	movs	r1, #0
    e5a4:	f013 fa62 	bl	21a6c <GL_Widget_SearchId>
    e5a8:	4603      	mov	r3, r0
    e5aa:	4618      	mov	r0, r3
    e5ac:	68b9      	ldr	r1, [r7, #8]
    e5ae:	f013 fa03 	bl	219b8 <GL_Timer_SetInterval>

	// Loop indefinitely until the result is set from the call back functions
	// **********************************************************************
	GL_Window_MainLoop(hWindow);                           // Wait until a result is set
    e5b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e5b4:	f013 fc64 	bl	21e80 <GL_Window_MainLoop>

	// Test the result set by the call back functions
	// **********************************************
	switch(GL_Window_GetResult(hWindow))                   // Get the result
    e5b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e5ba:	f013 fc4f 	bl	21e5c <GL_Window_GetResult>
    e5be:	4603      	mov	r3, r0
    e5c0:	2b01      	cmp	r3, #1
    e5c2:	d010      	beq.n	e5e6 <GoalDrawEllipse+0xe6>
    e5c4:	2b01      	cmp	r3, #1
    e5c6:	d302      	bcc.n	e5ce <GoalDrawEllipse+0xce>
    e5c8:	2b04      	cmp	r3, #4
    e5ca:	d018      	beq.n	e5fe <GoalDrawEllipse+0xfe>
    e5cc:	e01a      	b.n	e604 <GoalDrawEllipse+0x104>
	{
	case RES_VALID_STATUS:                                 // Key valid result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    e5ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e5d0:	2100      	movs	r1, #0
    e5d2:	f013 fa4b 	bl	21a6c <GL_Widget_SearchId>
    e5d6:	4603      	mov	r3, r0
    e5d8:	4618      	mov	r0, r3
    e5da:	f013 f9ff 	bl	219dc <GL_Timer_Stop>
		iRet=GL_KEY_VALID;
    e5de:	f64f 0350 	movw	r3, #63568	; 0xf850
    e5e2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
    e5e4:	e012      	b.n	e60c <GoalDrawEllipse+0x10c>
	case RES_CANCEL_STATUS:                                // Key cancel result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    e5e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e5e8:	2100      	movs	r1, #0
    e5ea:	f013 fa3f 	bl	21a6c <GL_Widget_SearchId>
    e5ee:	4603      	mov	r3, r0
    e5f0:	4618      	mov	r0, r3
    e5f2:	f013 f9f3 	bl	219dc <GL_Timer_Stop>
		iRet=GL_KEY_CANCEL;
    e5f6:	f64f 0351 	movw	r3, #63569	; 0xf851
    e5fa:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
    e5fc:	e006      	b.n	e60c <GoalDrawEllipse+0x10c>
	case RES_TIMER_STATUS:                                 // Timer result
		iRet=0;
    e5fe:	2300      	movs	r3, #0
    e600:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
    e602:	e003      	b.n	e60c <GoalDrawEllipse+0x10c>
	default:                                               // Unknown result
		iRet=-1;
    e604:	f04f 33ff 	mov.w	r3, #4294967295
    e608:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
    e60a:	bf00      	nop
	}

	goto lblEnd;
    e60c:	e017      	b.n	e63e <GoalDrawEllipse+0x13e>

	// Errors treatment
    // ****************
lblNoTimer:                                                // No timer used
	iRet=0;
    e60e:	2300      	movs	r3, #0
    e610:	62bb      	str	r3, [r7, #40]	; 0x28
	if (bRefresh)
    e612:	79fb      	ldrb	r3, [r7, #7]
    e614:	2b00      	cmp	r3, #0
    e616:	d011      	beq.n	e63c <GoalDrawEllipse+0x13c>
	{
		iRet = GL_Window_Dispatch(hWindow, 0);             // Refresh the window
    e618:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e61a:	2100      	movs	r1, #0
    e61c:	f013 fc0c 	bl	21e38 <GL_Window_Dispatch>
    e620:	4603      	mov	r3, r0
    e622:	62bb      	str	r3, [r7, #40]	; 0x28
		if (iRet == RES_VALID_STATUS)
    e624:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e626:	2b00      	cmp	r3, #0
    e628:	d102      	bne.n	e630 <GoalDrawEllipse+0x130>
			iRet=GL_KEY_VALID;
    e62a:	f64f 0350 	movw	r3, #63568	; 0xf850
    e62e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (iRet == RES_CANCEL_STATUS)
    e630:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e632:	2b01      	cmp	r3, #1
    e634:	d102      	bne.n	e63c <GoalDrawEllipse+0x13c>
			iRet=GL_KEY_CANCEL;
    e636:	f64f 0351 	movw	r3, #63569	; 0xf851
    e63a:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	goto lblEnd;
    e63c:	bf00      	nop
lblEnd:
	return iRet;
    e63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    e640:	4618      	mov	r0, r3
    e642:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    e646:	f2c0 0302 	movt	r3, #2
    e64a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e64c:	681b      	ldr	r3, [r3, #0]
    e64e:	429a      	cmp	r2, r3
    e650:	d001      	beq.n	e656 <GoalDrawEllipse+0x156>
    e652:	f7fa fca7 	bl	8fa4 <__stack_chk_fail>
    e656:	f107 0730 	add.w	r7, r7, #48	; 0x30
    e65a:	46bd      	mov	sp, r7
    e65c:	bd80      	pop	{r7, pc}
    e65e:	bf00      	nop

0000e660 <GoalDrawText>:
//   >=0 : Drawing text done (Exit screen : 0=timeout,GL_KEY_CANCEL,GL_KEY_VALID).
//   <0 : Drawing text failed.
//****************************************************************************

int GoalDrawText(T_GL_HWIDGET hWindow, const char* pcText, const ST_DRAW_FONT* pxFont, T_GL_COLOR ulPen, T_GL_COORD sX, T_GL_COORD sY, ulong ulTimeOut, bool bRefresh)
{
    e660:	b590      	push	{r4, r7, lr}
    e662:	b08d      	sub	sp, #52	; 0x34
    e664:	af02      	add	r7, sp, #8
    e666:	61f8      	str	r0, [r7, #28]
    e668:	61b9      	str	r1, [r7, #24]
    e66a:	617a      	str	r2, [r7, #20]
    e66c:	613b      	str	r3, [r7, #16]
    e66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e670:	60fb      	str	r3, [r7, #12]
    e672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e674:	60bb      	str	r3, [r7, #8]
    e676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e678:	607b      	str	r3, [r7, #4]
    e67a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    e67e:	70fb      	strb	r3, [r7, #3]
    e680:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    e684:	f2c0 0302 	movt	r3, #2
    e688:	681b      	ldr	r3, [r3, #0]
    e68a:	627b      	str	r3, [r7, #36]	; 0x24
    // ***************
	int iRet;

	// Drawing text
	// ************
	GL_Drawing_SetPen(GL_Widget_SearchId(hWindow, DRAWING_ID), ulPen, 1, GL_UNIT_PIXEL);           // Set pen color and stroke (only 1 pixel supported)
    e68c:	69f8      	ldr	r0, [r7, #28]
    e68e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e692:	f013 f9eb 	bl	21a6c <GL_Widget_SearchId>
    e696:	4603      	mov	r3, r0
    e698:	4618      	mov	r0, r3
    e69a:	6939      	ldr	r1, [r7, #16]
    e69c:	2201      	movs	r2, #1
    e69e:	2300      	movs	r3, #0
    e6a0:	f013 f84e 	bl	21740 <GL_Drawing_SetPen>
	if (pxFont->pcName!=NULL)                              // Customer font?
    e6a4:	697b      	ldr	r3, [r7, #20]
    e6a6:	681b      	ldr	r3, [r3, #0]
    e6a8:	2b00      	cmp	r3, #0
    e6aa:	d012      	beq.n	e6d2 <GoalDrawText+0x72>
		GL_Drawing_SetFont(GL_Widget_SearchId(hWindow, DRAWING_ID), pxFont->pcName, pxFont->eStyle, pxFont->usWidth, pxFont->usHeight, GL_UNIT_PERCENT); // Yes, Set customer font
    e6ac:	69f8      	ldr	r0, [r7, #28]
    e6ae:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e6b2:	f013 f9db 	bl	21a6c <GL_Widget_SearchId>
    e6b6:	697b      	ldr	r3, [r7, #20]
    e6b8:	6819      	ldr	r1, [r3, #0]
    e6ba:	697b      	ldr	r3, [r7, #20]
    e6bc:	685a      	ldr	r2, [r3, #4]
    e6be:	697b      	ldr	r3, [r7, #20]
    e6c0:	689b      	ldr	r3, [r3, #8]
    e6c2:	697c      	ldr	r4, [r7, #20]
    e6c4:	68e4      	ldr	r4, [r4, #12]
    e6c6:	9400      	str	r4, [sp, #0]
    e6c8:	2401      	movs	r4, #1
    e6ca:	9401      	str	r4, [sp, #4]
    e6cc:	f013 f826 	bl	2171c <GL_Drawing_SetFont>
    e6d0:	e015      	b.n	e6fe <GoalDrawText+0x9e>
	else
		GL_Drawing_SetFont(GL_Widget_SearchId(hWindow, DRAWING_ID), "GOAL", pxFont->eStyle, pxFont->usWidth, pxFont->usHeight, GL_UNIT_PERCENT); // No, Set default GOAL font
    e6d2:	69f8      	ldr	r0, [r7, #28]
    e6d4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e6d8:	f013 f9c8 	bl	21a6c <GL_Widget_SearchId>
    e6dc:	4601      	mov	r1, r0
    e6de:	697b      	ldr	r3, [r7, #20]
    e6e0:	685a      	ldr	r2, [r3, #4]
    e6e2:	697b      	ldr	r3, [r7, #20]
    e6e4:	689b      	ldr	r3, [r3, #8]
    e6e6:	6978      	ldr	r0, [r7, #20]
    e6e8:	68c0      	ldr	r0, [r0, #12]
    e6ea:	9000      	str	r0, [sp, #0]
    e6ec:	2001      	movs	r0, #1
    e6ee:	9001      	str	r0, [sp, #4]
    e6f0:	4608      	mov	r0, r1
    e6f2:	f243 01a0 	movw	r1, #12448	; 0x30a0
    e6f6:	f2c0 0102 	movt	r1, #2
    e6fa:	f013 f80f 	bl	2171c <GL_Drawing_SetFont>
	GL_Drawing_DrawText(GL_Widget_SearchId(hWindow, DRAWING_ID), sX, sY, GL_UNIT_PERCENT, pcText); // Draw text with pen
    e6fe:	69f8      	ldr	r0, [r7, #28]
    e700:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e704:	f013 f9b2 	bl	21a6c <GL_Widget_SearchId>
    e708:	4603      	mov	r3, r0
    e70a:	69ba      	ldr	r2, [r7, #24]
    e70c:	9200      	str	r2, [sp, #0]
    e70e:	4618      	mov	r0, r3
    e710:	68f9      	ldr	r1, [r7, #12]
    e712:	68ba      	ldr	r2, [r7, #8]
    e714:	2301      	movs	r3, #1
    e716:	f012 ffdd 	bl	216d4 <GL_Drawing_DrawText>

	CHECK(ulTimeOut!=0, lblNoTimer);                       // No timer to set
    e71a:	687b      	ldr	r3, [r7, #4]
    e71c:	2b00      	cmp	r3, #0
    e71e:	d045      	beq.n	e7ac <GoalDrawText+0x14c>

	// Restart timer
	// *************
	if (ulTimeOut == GL_TIME_INFINITE)                     // Set timeout value
    e720:	687b      	ldr	r3, [r7, #4]
    e722:	f1b3 3fff 	cmp.w	r3, #4294967295
    e726:	d10a      	bne.n	e73e <GoalDrawText+0xde>
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), 0x7FFFFFFF); // Bug 0xFFFFFFFF not supported
    e728:	69f8      	ldr	r0, [r7, #28]
    e72a:	2100      	movs	r1, #0
    e72c:	f013 f99e 	bl	21a6c <GL_Widget_SearchId>
    e730:	4603      	mov	r3, r0
    e732:	4618      	mov	r0, r3
    e734:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e738:	f013 f93e 	bl	219b8 <GL_Timer_SetInterval>
    e73c:	e008      	b.n	e750 <GoalDrawText+0xf0>
	else
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), ulTimeOut);
    e73e:	69f8      	ldr	r0, [r7, #28]
    e740:	2100      	movs	r1, #0
    e742:	f013 f993 	bl	21a6c <GL_Widget_SearchId>
    e746:	4603      	mov	r3, r0
    e748:	4618      	mov	r0, r3
    e74a:	6879      	ldr	r1, [r7, #4]
    e74c:	f013 f934 	bl	219b8 <GL_Timer_SetInterval>

	// Loop indefinitely until the result is set from the call back functions
	// **********************************************************************
	GL_Window_MainLoop(hWindow);                           // Wait until a result is set
    e750:	69f8      	ldr	r0, [r7, #28]
    e752:	f013 fb95 	bl	21e80 <GL_Window_MainLoop>

	// Test the result set by the call back functions
	// **********************************************
	switch(GL_Window_GetResult(hWindow))                   // Get the result
    e756:	69f8      	ldr	r0, [r7, #28]
    e758:	f013 fb80 	bl	21e5c <GL_Window_GetResult>
    e75c:	4603      	mov	r3, r0
    e75e:	2b01      	cmp	r3, #1
    e760:	d010      	beq.n	e784 <GoalDrawText+0x124>
    e762:	2b01      	cmp	r3, #1
    e764:	d302      	bcc.n	e76c <GoalDrawText+0x10c>
    e766:	2b04      	cmp	r3, #4
    e768:	d018      	beq.n	e79c <GoalDrawText+0x13c>
    e76a:	e01a      	b.n	e7a2 <GoalDrawText+0x142>
	{
	case RES_VALID_STATUS:                                 // Key valid result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    e76c:	69f8      	ldr	r0, [r7, #28]
    e76e:	2100      	movs	r1, #0
    e770:	f013 f97c 	bl	21a6c <GL_Widget_SearchId>
    e774:	4603      	mov	r3, r0
    e776:	4618      	mov	r0, r3
    e778:	f013 f930 	bl	219dc <GL_Timer_Stop>
		iRet=GL_KEY_VALID;
    e77c:	f64f 0350 	movw	r3, #63568	; 0xf850
    e780:	623b      	str	r3, [r7, #32]
		break;
    e782:	e012      	b.n	e7aa <GoalDrawText+0x14a>
	case RES_CANCEL_STATUS:                                // Key cancel result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    e784:	69f8      	ldr	r0, [r7, #28]
    e786:	2100      	movs	r1, #0
    e788:	f013 f970 	bl	21a6c <GL_Widget_SearchId>
    e78c:	4603      	mov	r3, r0
    e78e:	4618      	mov	r0, r3
    e790:	f013 f924 	bl	219dc <GL_Timer_Stop>
		iRet=GL_KEY_CANCEL;
    e794:	f64f 0351 	movw	r3, #63569	; 0xf851
    e798:	623b      	str	r3, [r7, #32]
		break;
    e79a:	e006      	b.n	e7aa <GoalDrawText+0x14a>
	case RES_TIMER_STATUS:                                 // Timer result
		iRet=0;
    e79c:	2300      	movs	r3, #0
    e79e:	623b      	str	r3, [r7, #32]
		break;
    e7a0:	e003      	b.n	e7aa <GoalDrawText+0x14a>
	default:                                               // Unknown result
		iRet=-1;
    e7a2:	f04f 33ff 	mov.w	r3, #4294967295
    e7a6:	623b      	str	r3, [r7, #32]
		break;
    e7a8:	bf00      	nop
	}

	goto lblEnd;
    e7aa:	e017      	b.n	e7dc <GoalDrawText+0x17c>

	// Errors treatment
    // ****************
lblNoTimer:                                                // No timer used
	iRet=0;
    e7ac:	2300      	movs	r3, #0
    e7ae:	623b      	str	r3, [r7, #32]
	if (bRefresh)
    e7b0:	78fb      	ldrb	r3, [r7, #3]
    e7b2:	2b00      	cmp	r3, #0
    e7b4:	d011      	beq.n	e7da <GoalDrawText+0x17a>
	{
		iRet=GL_Window_Dispatch(hWindow, 0);               // Refresh the window
    e7b6:	69f8      	ldr	r0, [r7, #28]
    e7b8:	2100      	movs	r1, #0
    e7ba:	f013 fb3d 	bl	21e38 <GL_Window_Dispatch>
    e7be:	4603      	mov	r3, r0
    e7c0:	623b      	str	r3, [r7, #32]
		if (iRet == RES_VALID_STATUS)
    e7c2:	6a3b      	ldr	r3, [r7, #32]
    e7c4:	2b00      	cmp	r3, #0
    e7c6:	d102      	bne.n	e7ce <GoalDrawText+0x16e>
			iRet=GL_KEY_VALID;
    e7c8:	f64f 0350 	movw	r3, #63568	; 0xf850
    e7cc:	623b      	str	r3, [r7, #32]
		if (iRet == RES_CANCEL_STATUS)
    e7ce:	6a3b      	ldr	r3, [r7, #32]
    e7d0:	2b01      	cmp	r3, #1
    e7d2:	d102      	bne.n	e7da <GoalDrawText+0x17a>
			iRet=GL_KEY_CANCEL;
    e7d4:	f64f 0351 	movw	r3, #63569	; 0xf851
    e7d8:	623b      	str	r3, [r7, #32]
	}
	goto lblEnd;
    e7da:	bf00      	nop
lblEnd:
	return iRet;
    e7dc:	6a3b      	ldr	r3, [r7, #32]
}
    e7de:	4618      	mov	r0, r3
    e7e0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    e7e4:	f2c0 0302 	movt	r3, #2
    e7e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e7ea:	681b      	ldr	r3, [r3, #0]
    e7ec:	429a      	cmp	r2, r3
    e7ee:	d001      	beq.n	e7f4 <GoalDrawText+0x194>
    e7f0:	f7fa fbd8 	bl	8fa4 <__stack_chk_fail>
    e7f4:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    e7f8:	46bd      	mov	sp, r7
    e7fa:	bd90      	pop	{r4, r7, pc}

0000e7fc <GoalDestroyDrawing>:
//   phWindow (I-) : Pointer on window context handle.
// This function has no return value.
//****************************************************************************

void GoalDestroyDrawing(T_GL_HWIDGET *phWindow)
{
    e7fc:	b580      	push	{r7, lr}
    e7fe:	b084      	sub	sp, #16
    e800:	af00      	add	r7, sp, #0
    e802:	6078      	str	r0, [r7, #4]
    e804:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    e808:	f2c0 0302 	movt	r3, #2
    e80c:	681b      	ldr	r3, [r3, #0]
    e80e:	60fb      	str	r3, [r7, #12]
    // ***************
		// Empty

	// Destroy screen
	// **************
	GL_Widget_Destroy(*phWindow); // Destroy window with all widgets attached
    e810:	687b      	ldr	r3, [r7, #4]
    e812:	681b      	ldr	r3, [r3, #0]
    e814:	4618      	mov	r0, r3
    e816:	f013 f8f3 	bl	21a00 <GL_Widget_Destroy>
	*phWindow=NULL;
    e81a:	687b      	ldr	r3, [r7, #4]
    e81c:	2200      	movs	r2, #0
    e81e:	601a      	str	r2, [r3, #0]
}
    e820:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    e824:	f2c0 0302 	movt	r3, #2
    e828:	68fa      	ldr	r2, [r7, #12]
    e82a:	681b      	ldr	r3, [r3, #0]
    e82c:	429a      	cmp	r2, r3
    e82e:	d001      	beq.n	e834 <GoalDestroyDrawing+0x38>
    e830:	f7fa fbb8 	bl	8fa4 <__stack_chk_fail>
    e834:	f107 0710 	add.w	r7, r7, #16
    e838:	46bd      	mov	sp, r7
    e83a:	bd80      	pop	{r7, pc}

0000e83c <GoalCreatePicture>:
//   !NULL : Pointer to the handle of the picture.
//   NULL : Picture failed
//****************************************************************************

T_GL_HWIDGET GoalCreatePicture (T_GL_HGRAPHIC_LIB hGraphicLib)
{
    e83c:	b580      	push	{r7, lr}
    e83e:	b08c      	sub	sp, #48	; 0x30
    e840:	af00      	add	r7, sp, #0
    e842:	6078      	str	r0, [r7, #4]
    e844:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    e848:	f2c0 0302 	movt	r3, #2
    e84c:	681b      	ldr	r3, [r3, #0]
    e84e:	62fb      	str	r3, [r7, #44]	; 0x2c
	T_GL_HWIDGET hWindow, hTimer, hLayout, hLabel, hPicture, hLayout2, hButtonVal, hButtonCan;
	bool bTouch;

	// Build picture context with 2 buttons (Cancel and Valid)
	// *******************************************************
	bTouch = GL_GraphicLib_IsTouchPresent(hGraphicLib);               // Is a touch screen?
    e850:	6878      	ldr	r0, [r7, #4]
    e852:	f012 ffd9 	bl	21808 <GL_GraphicLib_IsTouchPresent>
    e856:	4603      	mov	r3, r0
    e858:	72fb      	strb	r3, [r7, #11]

	hWindow = GL_Window_Create(hGraphicLib);                          // Create a window in a user area
    e85a:	6878      	ldr	r0, [r7, #4]
    e85c:	f013 fada 	bl	21e14 <GL_Window_Create>
    e860:	60f8      	str	r0, [r7, #12]
	CHECK(hWindow!=NULL, lblEnd);
    e862:	68fb      	ldr	r3, [r7, #12]
    e864:	2b00      	cmp	r3, #0
    e866:	f000 80d8 	beq.w	ea1a <GoalCreatePicture+0x1de>

	hTimer = GL_Timer_Create(hWindow);                                // Create a timer on this window
    e86a:	68f8      	ldr	r0, [r7, #12]
    e86c:	f013 f892 	bl	21994 <GL_Timer_Create>
    e870:	6138      	str	r0, [r7, #16]
	CHECK(hTimer!=NULL, lblKO);
    e872:	693b      	ldr	r3, [r7, #16]
    e874:	2b00      	cmp	r3, #0
    e876:	f000 80c4 	beq.w	ea02 <GoalCreatePicture+0x1c6>
	GL_Widget_SetId(hTimer, TIMER_ID);                                // Timer Identifier TIMER_ID
    e87a:	6938      	ldr	r0, [r7, #16]
    e87c:	2100      	movs	r1, #0
    e87e:	f013 f9bb 	bl	21bf8 <GL_Widget_SetId>
	GL_Widget_RegisterCallback(hTimer, GL_EVENT_TIMER_OUT, CallBackTimeout); // Call back when the timer expired
    e882:	6938      	ldr	r0, [r7, #16]
    e884:	2108      	movs	r1, #8
    e886:	f24d 0239 	movw	r2, #53305	; 0xd039
    e88a:	f2c0 0200 	movt	r2, #0
    e88e:	f013 f8db 	bl	21a48 <GL_Widget_RegisterCallback>

	hLayout = GL_Layout_Create(hWindow);                              // Create a layout on this window
    e892:	68f8      	ldr	r0, [r7, #12]
    e894:	f013 f800 	bl	21898 <GL_Layout_Create>
    e898:	6178      	str	r0, [r7, #20]
	CHECK(hLayout!=NULL, lblKO);
    e89a:	697b      	ldr	r3, [r7, #20]
    e89c:	2b00      	cmp	r3, #0
    e89e:	f000 80b0 	beq.w	ea02 <GoalCreatePicture+0x1c6>

	hLabel = GL_Label_Create(hLayout);                                // Create a label on this layout
    e8a2:	6978      	ldr	r0, [r7, #20]
    e8a4:	f012 ffe6 	bl	21874 <GL_Label_Create>
    e8a8:	61b8      	str	r0, [r7, #24]
	CHECK(hLabel!=NULL, lblKO);
    e8aa:	69bb      	ldr	r3, [r7, #24]
    e8ac:	2b00      	cmp	r3, #0
    e8ae:	f000 80a8 	beq.w	ea02 <GoalCreatePicture+0x1c6>
	GL_Widget_SetItem(hLabel, 0, 0);                                  // Label location on this layout
    e8b2:	69b8      	ldr	r0, [r7, #24]
    e8b4:	2100      	movs	r1, #0
    e8b6:	2200      	movs	r2, #0
    e8b8:	f013 f9b0 	bl	21c1c <GL_Widget_SetItem>
	GL_Widget_SetText(hLabel, NULL);                                  // Clear text on this label
    e8bc:	69b8      	ldr	r0, [r7, #24]
    e8be:	2100      	movs	r1, #0
    e8c0:	f013 fa2a 	bl	21d18 <GL_Widget_SetText>
	GL_Widget_SetShrink(hLabel, GL_DIRECTION_WIDTH);                  // Shrink beyond its size (No width scrolling cell if label goes over screen)
    e8c4:	69b8      	ldr	r0, [r7, #24]
    e8c6:	2101      	movs	r1, #1
    e8c8:	f013 f9f0 	bl	21cac <GL_Widget_SetShrink>
	GL_Widget_SetId(hLabel, LABEL_0_ID);                              // Label identifier LABEL0_ID
    e8cc:	69b8      	ldr	r0, [r7, #24]
    e8ce:	f44f 7180 	mov.w	r1, #256	; 0x100
    e8d2:	f013 f991 	bl	21bf8 <GL_Widget_SetId>

	hPicture = GL_Picture_Create(hLayout);                            // Create a picture on this layout
    e8d6:	6978      	ldr	r0, [r7, #20]
    e8d8:	f013 f838 	bl	2194c <GL_Picture_Create>
    e8dc:	61f8      	str	r0, [r7, #28]
	CHECK(hPicture!=NULL, lblKO);
    e8de:	69fb      	ldr	r3, [r7, #28]
    e8e0:	2b00      	cmp	r3, #0
    e8e2:	f000 808e 	beq.w	ea02 <GoalCreatePicture+0x1c6>
	GL_Widget_SetId(hPicture, PICTURE_ID);                            // Picture Identifier PICTURE_ID
    e8e6:	69f8      	ldr	r0, [r7, #28]
    e8e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    e8ec:	f013 f984 	bl	21bf8 <GL_Widget_SetId>
	GL_Widget_SetItem(hPicture, 0, 1);                                // Picture location on this layout
    e8f0:	69f8      	ldr	r0, [r7, #28]
    e8f2:	2100      	movs	r1, #0
    e8f4:	2201      	movs	r2, #1
    e8f6:	f013 f991 	bl	21c1c <GL_Widget_SetItem>

	hLayout2 = GL_Layout_Create(hLayout);                             // Create a second layout on this layout
    e8fa:	6978      	ldr	r0, [r7, #20]
    e8fc:	f012 ffcc 	bl	21898 <GL_Layout_Create>
    e900:	6238      	str	r0, [r7, #32]
	CHECK(hLayout2!=NULL, lblKO);
    e902:	6a3b      	ldr	r3, [r7, #32]
    e904:	2b00      	cmp	r3, #0
    e906:	d07c      	beq.n	ea02 <GoalCreatePicture+0x1c6>
	GL_Widget_SetId(hLayout2, LAYOUT2_ID);                            // Second layout identifier
    e908:	6a38      	ldr	r0, [r7, #32]
    e90a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    e90e:	f013 f973 	bl	21bf8 <GL_Widget_SetId>
	GL_Widget_SetItem(hLayout2, 0, 2);                                // Second layout location on this layout
    e912:	6a38      	ldr	r0, [r7, #32]
    e914:	2100      	movs	r1, #0
    e916:	2202      	movs	r2, #2
    e918:	f013 f980 	bl	21c1c <GL_Widget_SetItem>
	GL_Widget_SetGrow(hLayout2, GL_DIRECTION_WIDTH);                  // Grow beyond its size (Background width around layout will fill the complete cell)
    e91c:	6a38      	ldr	r0, [r7, #32]
    e91e:	2101      	movs	r1, #1
    e920:	f013 f958 	bl	21bd4 <GL_Widget_SetGrow>

	hButtonCan = GL_Button_Create(hLayout2);                          // Create a cancel button on this second layout
    e924:	6a38      	ldr	r0, [r7, #32]
    e926:	f012 fdc7 	bl	214b8 <GL_Button_Create>
    e92a:	6278      	str	r0, [r7, #36]	; 0x24
	CHECK(hButtonCan!=NULL, lblKO);
    e92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e92e:	2b00      	cmp	r3, #0
    e930:	d067      	beq.n	ea02 <GoalCreatePicture+0x1c6>
	GL_Widget_SetSource(hButtonCan, "skin://images/cancel.wgu");      // Set the cancel skinned image
    e932:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e934:	f243 0128 	movw	r1, #12328	; 0x3028
    e938:	f2c0 0102 	movt	r1, #2
    e93c:	f013 f9da 	bl	21cf4 <GL_Widget_SetSource>
	GL_Widget_SetItem(hButtonCan, 0, 0);                              // Button location on this layout
    e940:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e942:	2100      	movs	r1, #0
    e944:	2200      	movs	r2, #0
    e946:	f013 f969 	bl	21c1c <GL_Widget_SetItem>
	GL_Widget_SetExpand(hButtonCan, GL_DIRECTION_WIDTH);              // Expand button width
    e94a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e94c:	2101      	movs	r1, #1
    e94e:	f013 f8d5 	bl	21afc <GL_Widget_SetExpand>
	GL_Widget_SetShortcut(hButtonCan, GL_KEY_CANCEL);                 // Shortcut on this button
    e952:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e954:	f64f 0151 	movw	r1, #63569	; 0xf851
    e958:	f013 f996 	bl	21c88 <GL_Widget_SetShortcut>
	GL_Widget_SetId(hButtonCan, BUTTON_CAN_ID);                       // Cancel button Identifier
    e95c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e95e:	f44f 7140 	mov.w	r1, #768	; 0x300
    e962:	f013 f949 	bl	21bf8 <GL_Widget_SetId>
	GL_Widget_SetGrow(hButtonCan, GL_DIRECTION_WIDTH);                // Grow beyond its size (Background width around cancel button will fill the complete cell)
    e966:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e968:	2101      	movs	r1, #1
    e96a:	f013 f933 	bl	21bd4 <GL_Widget_SetGrow>
	GL_Widget_SetFocusable(hButtonCan, false);                        // No focus on this button
    e96e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e970:	2100      	movs	r1, #0
    e972:	f013 f8d5 	bl	21b20 <GL_Widget_SetFocusable>
	GL_Widget_RegisterCallback(hButtonCan, GL_EVENT_STYLUS_CLICK, CallBackCancelKey); // Call back when key pressed
    e976:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e978:	2167      	movs	r1, #103	; 0x67
    e97a:	f64c 7285 	movw	r2, #53125	; 0xcf85
    e97e:	f2c0 0200 	movt	r2, #0
    e982:	f013 f861 	bl	21a48 <GL_Widget_RegisterCallback>

	hButtonVal = GL_Button_Create(hLayout2);                          // Create a valid button on this second layout
    e986:	6a38      	ldr	r0, [r7, #32]
    e988:	f012 fd96 	bl	214b8 <GL_Button_Create>
    e98c:	62b8      	str	r0, [r7, #40]	; 0x28
	CHECK(hButtonVal!=NULL, lblKO);
    e98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e990:	2b00      	cmp	r3, #0
    e992:	d036      	beq.n	ea02 <GoalCreatePicture+0x1c6>
	GL_Widget_SetSource(hButtonVal, "skin://images/validation.wgu");  // Set the valid skinned image
    e994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e996:	f243 017c 	movw	r1, #12412	; 0x307c
    e99a:	f2c0 0102 	movt	r1, #2
    e99e:	f013 f9a9 	bl	21cf4 <GL_Widget_SetSource>
	GL_Widget_SetItem(hButtonVal, 1, 0);                              // Button location on this layout
    e9a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e9a4:	2101      	movs	r1, #1
    e9a6:	2200      	movs	r2, #0
    e9a8:	f013 f938 	bl	21c1c <GL_Widget_SetItem>
	GL_Widget_SetExpand(hButtonVal, GL_DIRECTION_WIDTH);              // Expand button width
    e9ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e9ae:	2101      	movs	r1, #1
    e9b0:	f013 f8a4 	bl	21afc <GL_Widget_SetExpand>
	GL_Widget_SetShortcut(hButtonVal, GL_KEY_VALID);                  // Shortcut on this button
    e9b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e9b6:	f64f 0150 	movw	r1, #63568	; 0xf850
    e9ba:	f013 f965 	bl	21c88 <GL_Widget_SetShortcut>
	GL_Widget_SetId(hButtonVal, BUTTON_VAL_ID);                       // Valid button Identifier
    e9be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e9c0:	f44f 7100 	mov.w	r1, #512	; 0x200
    e9c4:	f013 f918 	bl	21bf8 <GL_Widget_SetId>
	GL_Widget_SetGrow(hButtonVal, GL_DIRECTION_WIDTH);                // Grow beyond its size (Background width around valid button will fill the complete cell)
    e9c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e9ca:	2101      	movs	r1, #1
    e9cc:	f013 f902 	bl	21bd4 <GL_Widget_SetGrow>
	GL_Widget_SetFocusable(hButtonVal, false);                        // No focus on this button
    e9d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e9d2:	2100      	movs	r1, #0
    e9d4:	f013 f8a4 	bl	21b20 <GL_Widget_SetFocusable>
	GL_Widget_RegisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey); // Call back when key pressed
    e9d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e9da:	2167      	movs	r1, #103	; 0x67
    e9dc:	f64c 7249 	movw	r2, #53065	; 0xcf49
    e9e0:	f2c0 0200 	movt	r2, #0
    e9e4:	f013 f830 	bl	21a48 <GL_Widget_RegisterCallback>

	if(!bTouch)                                                       // Touch screen?
    e9e8:	7afb      	ldrb	r3, [r7, #11]
    e9ea:	f083 0301 	eor.w	r3, r3, #1
    e9ee:	b2db      	uxtb	r3, r3
    e9f0:	2b00      	cmp	r3, #0
    e9f2:	d00f      	beq.n	ea14 <GoalCreatePicture+0x1d8>
		GL_Widget_SetSize(hLayout2, 100, 0, GL_UNIT_PERCENT);         // No, do not show second layout (keep shortcut access on key pressed)
    e9f4:	6a38      	ldr	r0, [r7, #32]
    e9f6:	2164      	movs	r1, #100	; 0x64
    e9f8:	2200      	movs	r2, #0
    e9fa:	2301      	movs	r3, #1
    e9fc:	f013 f968 	bl	21cd0 <GL_Widget_SetSize>

	goto lblEnd;
    ea00:	e008      	b.n	ea14 <GoalCreatePicture+0x1d8>

	// Errors treatment
    // ****************
lblKO:                                                                // Window creation failed
	if (hWindow)
    ea02:	68fb      	ldr	r3, [r7, #12]
    ea04:	2b00      	cmp	r3, #0
    ea06:	d007      	beq.n	ea18 <GoalCreatePicture+0x1dc>
	{
		GL_Widget_Destroy(hWindow);                                   // Destroy window and all widgets
    ea08:	68f8      	ldr	r0, [r7, #12]
    ea0a:	f012 fff9 	bl	21a00 <GL_Widget_Destroy>
		hWindow=NULL;
    ea0e:	2300      	movs	r3, #0
    ea10:	60fb      	str	r3, [r7, #12]
	}
	goto lblEnd;
    ea12:	e001      	b.n	ea18 <GoalCreatePicture+0x1dc>
	GL_Widget_RegisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey); // Call back when key pressed

	if(!bTouch)                                                       // Touch screen?
		GL_Widget_SetSize(hLayout2, 100, 0, GL_UNIT_PERCENT);         // No, do not show second layout (keep shortcut access on key pressed)

	goto lblEnd;
    ea14:	bf00      	nop
    ea16:	e000      	b.n	ea1a <GoalCreatePicture+0x1de>
	if (hWindow)
	{
		GL_Widget_Destroy(hWindow);                                   // Destroy window and all widgets
		hWindow=NULL;
	}
	goto lblEnd;
    ea18:	bf00      	nop
lblEnd:
	return hWindow;
    ea1a:	68fb      	ldr	r3, [r7, #12]
}
    ea1c:	4618      	mov	r0, r3
    ea1e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    ea22:	f2c0 0302 	movt	r3, #2
    ea26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ea28:	681b      	ldr	r3, [r3, #0]
    ea2a:	429a      	cmp	r2, r3
    ea2c:	d001      	beq.n	ea32 <GoalCreatePicture+0x1f6>
    ea2e:	f7fa fab9 	bl	8fa4 <__stack_chk_fail>
    ea32:	f107 0730 	add.w	r7, r7, #48	; 0x30
    ea36:	46bd      	mov	sp, r7
    ea38:	bd80      	pop	{r7, pc}
    ea3a:	bf00      	nop

0000ea3c <GoalClrPicture>:
//   >=0 : Clear picture done.
//   <0 : Clear picture failed.
//****************************************************************************

int GoalClrPicture(T_GL_HWIDGET hWindow, T_GL_COLOR ulBackColor, unsigned int uiKeys, bool bRefresh)
{
    ea3c:	b580      	push	{r7, lr}
    ea3e:	b08c      	sub	sp, #48	; 0x30
    ea40:	af04      	add	r7, sp, #16
    ea42:	60f8      	str	r0, [r7, #12]
    ea44:	60b9      	str	r1, [r7, #8]
    ea46:	607a      	str	r2, [r7, #4]
    ea48:	70fb      	strb	r3, [r7, #3]
    ea4a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    ea4e:	f2c0 0302 	movt	r3, #2
    ea52:	681b      	ldr	r3, [r3, #0]
    ea54:	61fb      	str	r3, [r7, #28]
	T_GL_HWIDGET hButtonVal, hButtonCan;
	int iRet;

	// Disable the complete second layout
	// **********************************
	hButtonCan = GL_Widget_SearchId(hWindow, BUTTON_CAN_ID);     // Retrieve the cancel button on this second layout
    ea56:	68f8      	ldr	r0, [r7, #12]
    ea58:	f44f 7140 	mov.w	r1, #768	; 0x300
    ea5c:	f013 f806 	bl	21a6c <GL_Widget_SearchId>
    ea60:	6178      	str	r0, [r7, #20]
	CHECK(hButtonCan!=NULL, lblKO);
    ea62:	697b      	ldr	r3, [r7, #20]
    ea64:	2b00      	cmp	r3, #0
    ea66:	f000 8085 	beq.w	eb74 <GoalClrPicture+0x138>
	hButtonVal = GL_Widget_SearchId(hWindow, BUTTON_VAL_ID);     // Retrieve the valid button on this second layout
    ea6a:	68f8      	ldr	r0, [r7, #12]
    ea6c:	f44f 7100 	mov.w	r1, #512	; 0x200
    ea70:	f012 fffc 	bl	21a6c <GL_Widget_SearchId>
    ea74:	61b8      	str	r0, [r7, #24]
	CHECK(hButtonVal!=NULL, lblKO);
    ea76:	69bb      	ldr	r3, [r7, #24]
    ea78:	2b00      	cmp	r3, #0
    ea7a:	d07b      	beq.n	eb74 <GoalClrPicture+0x138>

	GL_Widget_SetVisible(hButtonCan, false);                     // Blind the cancel button
    ea7c:	6978      	ldr	r0, [r7, #20]
    ea7e:	2100      	movs	r1, #0
    ea80:	f013 f992 	bl	21da8 <GL_Widget_SetVisible>
	GL_Widget_UnregisterCallback(hButtonCan, GL_EVENT_STYLUS_CLICK, CallBackCancelKey); // Unregister call back on cancel button
    ea84:	6978      	ldr	r0, [r7, #20]
    ea86:	2167      	movs	r1, #103	; 0x67
    ea88:	f64c 7285 	movw	r2, #53125	; 0xcf85
    ea8c:	f2c0 0200 	movt	r2, #0
    ea90:	f013 f9ae 	bl	21df0 <GL_Widget_UnregisterCallback>
	GL_Widget_SetVisible(hButtonVal, false);                     // Blind the valid button
    ea94:	69b8      	ldr	r0, [r7, #24]
    ea96:	2100      	movs	r1, #0
    ea98:	f013 f986 	bl	21da8 <GL_Widget_SetVisible>
	GL_Widget_UnregisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey); // Unregister call back on valid button
    ea9c:	69b8      	ldr	r0, [r7, #24]
    ea9e:	2167      	movs	r1, #103	; 0x67
    eaa0:	f64c 7249 	movw	r2, #53065	; 0xcf49
    eaa4:	f2c0 0200 	movt	r2, #0
    eaa8:	f013 f9a2 	bl	21df0 <GL_Widget_UnregisterCallback>

	// Set the second layout with the right properties
	// ***********************************************
	if ((uiKeys & KEY_CANCEL) == KEY_CANCEL)                     // Cancel key?
    eaac:	687b      	ldr	r3, [r7, #4]
    eaae:	f003 0302 	and.w	r3, r3, #2
    eab2:	2b00      	cmp	r3, #0
    eab4:	d00b      	beq.n	eace <GoalClrPicture+0x92>
	{
		GL_Widget_SetVisible(hButtonCan, true);                  // Yes, show the cancel key on this second layout
    eab6:	6978      	ldr	r0, [r7, #20]
    eab8:	2101      	movs	r1, #1
    eaba:	f013 f975 	bl	21da8 <GL_Widget_SetVisible>
		GL_Widget_RegisterCallback(hButtonCan, GL_EVENT_STYLUS_CLICK, CallBackCancelKey); // Register call back when cancel key pressed or touched
    eabe:	6978      	ldr	r0, [r7, #20]
    eac0:	2167      	movs	r1, #103	; 0x67
    eac2:	f64c 7285 	movw	r2, #53125	; 0xcf85
    eac6:	f2c0 0200 	movt	r2, #0
    eaca:	f012 ffbd 	bl	21a48 <GL_Widget_RegisterCallback>
	}

	if ((uiKeys & KEY_VALID) == KEY_VALID)                       // Valid key?
    eace:	687b      	ldr	r3, [r7, #4]
    ead0:	f003 0301 	and.w	r3, r3, #1
    ead4:	2b00      	cmp	r3, #0
    ead6:	d00b      	beq.n	eaf0 <GoalClrPicture+0xb4>
	{
		GL_Widget_SetVisible(hButtonVal, true);                  // Yes, show the valid key on this second layout
    ead8:	69b8      	ldr	r0, [r7, #24]
    eada:	2101      	movs	r1, #1
    eadc:	f013 f964 	bl	21da8 <GL_Widget_SetVisible>
		GL_Widget_RegisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey); // Register call back when valid key pressed or touched
    eae0:	69b8      	ldr	r0, [r7, #24]
    eae2:	2167      	movs	r1, #103	; 0x67
    eae4:	f64c 7249 	movw	r2, #53065	; 0xcf49
    eae8:	f2c0 0200 	movt	r2, #0
    eaec:	f012 ffac 	bl	21a48 <GL_Widget_RegisterCallback>
	}

	if (IsColorDisplay())                                        // Color display?
    eaf0:	f011 fc96 	bl	20420 <IsColorDisplay>
    eaf4:	4603      	mov	r3, r0
    eaf6:	2b00      	cmp	r3, #0
    eaf8:	d004      	beq.n	eb04 <GoalClrPicture+0xc8>
		GL_Widget_SetBackColor(hWindow, ulBackColor);            // Yes, set window back color
    eafa:	68f8      	ldr	r0, [r7, #12]
    eafc:	68b9      	ldr	r1, [r7, #8]
    eafe:	f012 ffd9 	bl	21ab4 <GL_Widget_SetBackColor>
    eb02:	e004      	b.n	eb0e <GoalClrPicture+0xd2>
	else
		GL_Widget_SetBackColor(hWindow, GL_COLOR_WHITE);         // No, force window back color to white
    eb04:	68f8      	ldr	r0, [r7, #12]
    eb06:	f04f 31ff 	mov.w	r1, #4294967295
    eb0a:	f012 ffd3 	bl	21ab4 <GL_Widget_SetBackColor>

	// Clear Title
	// ***********
	GL_Widget_SetText(GL_Widget_SearchId(hWindow, LABEL_0_ID), NULL); // Remove label text
    eb0e:	68f8      	ldr	r0, [r7, #12]
    eb10:	f44f 7180 	mov.w	r1, #256	; 0x100
    eb14:	f012 ffaa 	bl	21a6c <GL_Widget_SearchId>
    eb18:	4603      	mov	r3, r0
    eb1a:	4618      	mov	r0, r3
    eb1c:	2100      	movs	r1, #0
    eb1e:	f013 f8fb 	bl	21d18 <GL_Widget_SetText>

	// Clear picture
	// *************
	GL_Widget_SetSource(GL_Widget_SearchId(hWindow, PICTURE_ID), ""); // Clear picture
    eb22:	68f8      	ldr	r0, [r7, #12]
    eb24:	f44f 6100 	mov.w	r1, #2048	; 0x800
    eb28:	f012 ffa0 	bl	21a6c <GL_Widget_SearchId>
    eb2c:	4603      	mov	r3, r0
    eb2e:	4618      	mov	r0, r3
    eb30:	f243 01a8 	movw	r1, #12456	; 0x30a8
    eb34:	f2c0 0102 	movt	r1, #2
    eb38:	f013 f8dc 	bl	21cf4 <GL_Widget_SetSource>
	GL_Widget_SetBorders(GL_Widget_SearchId(hWindow, PICTURE_ID), 0, 0, 0, 0, GL_UNIT_PIXEL, ulBackColor); // Remove border with window back color
    eb3c:	68f8      	ldr	r0, [r7, #12]
    eb3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    eb42:	f012 ff93 	bl	21a6c <GL_Widget_SearchId>
    eb46:	4603      	mov	r3, r0
    eb48:	2200      	movs	r2, #0
    eb4a:	9200      	str	r2, [sp, #0]
    eb4c:	2200      	movs	r2, #0
    eb4e:	9201      	str	r2, [sp, #4]
    eb50:	68ba      	ldr	r2, [r7, #8]
    eb52:	9202      	str	r2, [sp, #8]
    eb54:	4618      	mov	r0, r3
    eb56:	2100      	movs	r1, #0
    eb58:	2200      	movs	r2, #0
    eb5a:	2300      	movs	r3, #0
    eb5c:	f012 ffbc 	bl	21ad8 <GL_Widget_SetBorders>

	if (bRefresh)                                                // Refresh window?
    eb60:	78fb      	ldrb	r3, [r7, #3]
    eb62:	2b00      	cmp	r3, #0
    eb64:	d003      	beq.n	eb6e <GoalClrPicture+0x132>
		GL_Window_Dispatch(hWindow, 0);                          // Yes, refresh it
    eb66:	68f8      	ldr	r0, [r7, #12]
    eb68:	2100      	movs	r1, #0
    eb6a:	f013 f965 	bl	21e38 <GL_Window_Dispatch>

	iRet=1;
    eb6e:	2301      	movs	r3, #1
    eb70:	613b      	str	r3, [r7, #16]
	goto lblEnd;
    eb72:	e003      	b.n	eb7c <GoalClrPicture+0x140>

	// Errors treatment
    // ****************
lblKO:                                                           // Clear picture failed
	iRet=-1;
    eb74:	f04f 33ff 	mov.w	r3, #4294967295
    eb78:	613b      	str	r3, [r7, #16]
	goto lblEnd;
    eb7a:	bf00      	nop
lblEnd:
	return iRet;
    eb7c:	693b      	ldr	r3, [r7, #16]
}
    eb7e:	4618      	mov	r0, r3
    eb80:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    eb84:	f2c0 0302 	movt	r3, #2
    eb88:	69fa      	ldr	r2, [r7, #28]
    eb8a:	681b      	ldr	r3, [r3, #0]
    eb8c:	429a      	cmp	r2, r3
    eb8e:	d001      	beq.n	eb94 <GoalClrPicture+0x158>
    eb90:	f7fa fa08 	bl	8fa4 <__stack_chk_fail>
    eb94:	f107 0720 	add.w	r7, r7, #32
    eb98:	46bd      	mov	sp, r7
    eb9a:	bd80      	pop	{r7, pc}

0000eb9c <GoalDspPicture>:
//   >=0 : Display picture done (Exit screen : 0=timeout,GL_KEY_CANCEL,GL_KEY_VALID).
//   <0 : Display picture failed.
//****************************************************************************

int GoalDspPicture(T_GL_HWIDGET hWindow, char *pcTitle, const char* pcPicture, const ST_IMAGE* pxImage, ulong ulTimeOut, bool bRefresh)
{
    eb9c:	b590      	push	{r4, r7, lr}
    eb9e:	b08f      	sub	sp, #60	; 0x3c
    eba0:	af04      	add	r7, sp, #16
    eba2:	6178      	str	r0, [r7, #20]
    eba4:	6139      	str	r1, [r7, #16]
    eba6:	60fa      	str	r2, [r7, #12]
    eba8:	60bb      	str	r3, [r7, #8]
    ebaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ebac:	607b      	str	r3, [r7, #4]
    ebae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    ebb2:	70fb      	strb	r3, [r7, #3]
    ebb4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    ebb8:	f2c0 0302 	movt	r3, #2
    ebbc:	681b      	ldr	r3, [r3, #0]
    ebbe:	627b      	str	r3, [r7, #36]	; 0x24
	T_GL_HWIDGET hLabel, hPicture;
	int iRet;

	// Display label
	// *************
	hLabel = GL_Widget_SearchId(hWindow, LABEL_0_ID);   // Get label from its id
    ebc0:	6978      	ldr	r0, [r7, #20]
    ebc2:	f44f 7180 	mov.w	r1, #256	; 0x100
    ebc6:	f012 ff51 	bl	21a6c <GL_Widget_SearchId>
    ebca:	61f8      	str	r0, [r7, #28]
	CHECK(hLabel!=NULL, lblKO);
    ebcc:	69fb      	ldr	r3, [r7, #28]
    ebce:	2b00      	cmp	r3, #0
    ebd0:	f000 8126 	beq.w	ee20 <GoalDspPicture+0x284>

	if (pcTitle)                                        // Null title?
    ebd4:	693b      	ldr	r3, [r7, #16]
    ebd6:	2b00      	cmp	r3, #0
    ebd8:	d00c      	beq.n	ebf4 <GoalDspPicture+0x58>
	{
		GL_Widget_SetVisible(hLabel, true);
    ebda:	69f8      	ldr	r0, [r7, #28]
    ebdc:	2101      	movs	r1, #1
    ebde:	f013 f8e3 	bl	21da8 <GL_Widget_SetVisible>
		GL_Widget_SetText(hLabel, "%s", pcTitle);       // No, show title (add %s to allow '%' to be displayed)
    ebe2:	69f8      	ldr	r0, [r7, #28]
    ebe4:	f243 019c 	movw	r1, #12444	; 0x309c
    ebe8:	f2c0 0102 	movt	r1, #2
    ebec:	693a      	ldr	r2, [r7, #16]
    ebee:	f013 f893 	bl	21d18 <GL_Widget_SetText>
    ebf2:	e003      	b.n	ebfc <GoalDspPicture+0x60>
	}
	else
		GL_Widget_SetVisible(hLabel, false);            // Yes, blind title (line is removed)
    ebf4:	69f8      	ldr	r0, [r7, #28]
    ebf6:	2100      	movs	r1, #0
    ebf8:	f013 f8d6 	bl	21da8 <GL_Widget_SetVisible>


	if (IsColorDisplay())                               // Color display?
    ebfc:	f011 fc10 	bl	20420 <IsColorDisplay>
    ec00:	4603      	mov	r3, r0
    ec02:	2b00      	cmp	r3, #0
    ec04:	d027      	beq.n	ec56 <GoalDspPicture+0xba>
	{                                                   // Yes
		// Color properties
		// ================
		if (pxImage)
    ec06:	68bb      	ldr	r3, [r7, #8]
    ec08:	2b00      	cmp	r3, #0
    ec0a:	d046      	beq.n	ec9a <GoalDspPicture+0xfe>
		{
			GL_Widget_SetForeColor(hLabel, pxImage->xColor.ulPen);           // Pen color
    ec0c:	68bb      	ldr	r3, [r7, #8]
    ec0e:	681b      	ldr	r3, [r3, #0]
    ec10:	69f8      	ldr	r0, [r7, #28]
    ec12:	4619      	mov	r1, r3
    ec14:	f012 ffcc 	bl	21bb0 <GL_Widget_SetForeColor>
			if (pxImage->xColor.bGrowWidth)                                  // Grow beyond its size
    ec18:	68bb      	ldr	r3, [r7, #8]
    ec1a:	791b      	ldrb	r3, [r3, #4]
    ec1c:	2b00      	cmp	r3, #0
    ec1e:	d003      	beq.n	ec28 <GoalDspPicture+0x8c>
				GL_Widget_SetGrow(hLabel, GL_DIRECTION_WIDTH);               // Background width around the label will fill the complete cell
    ec20:	69f8      	ldr	r0, [r7, #28]
    ec22:	2101      	movs	r1, #1
    ec24:	f012 ffd6 	bl	21bd4 <GL_Widget_SetGrow>
			if (pxImage->xColor.xFont.pcName != NULL)
    ec28:	68bb      	ldr	r3, [r7, #8]
    ec2a:	689b      	ldr	r3, [r3, #8]
    ec2c:	2b00      	cmp	r3, #0
    ec2e:	d005      	beq.n	ec3c <GoalDspPicture+0xa0>
				GL_Widget_SetFontName(hLabel, pxImage->xColor.xFont.pcName); // Font name
    ec30:	68bb      	ldr	r3, [r7, #8]
    ec32:	689b      	ldr	r3, [r3, #8]
    ec34:	69f8      	ldr	r0, [r7, #28]
    ec36:	4619      	mov	r1, r3
    ec38:	f012 ff84 	bl	21b44 <GL_Widget_SetFontName>
			GL_Widget_SetFontScale(hLabel, pxImage->xColor.xFont.eScale);    // Font scale
    ec3c:	68bb      	ldr	r3, [r7, #8]
    ec3e:	691b      	ldr	r3, [r3, #16]
    ec40:	69f8      	ldr	r0, [r7, #28]
    ec42:	4619      	mov	r1, r3
    ec44:	f012 ff90 	bl	21b68 <GL_Widget_SetFontScale>
			GL_Widget_SetFontStyle(hLabel, pxImage->xColor.xFont.eStyle);    // Font style
    ec48:	68bb      	ldr	r3, [r7, #8]
    ec4a:	68db      	ldr	r3, [r3, #12]
    ec4c:	69f8      	ldr	r0, [r7, #28]
    ec4e:	4619      	mov	r1, r3
    ec50:	f012 ff9c 	bl	21b8c <GL_Widget_SetFontStyle>
    ec54:	e021      	b.n	ec9a <GoalDspPicture+0xfe>
	}
	else                                                // No
	{
		// Black & White properties
		// ========================
		if (pxImage)
    ec56:	68bb      	ldr	r3, [r7, #8]
    ec58:	2b00      	cmp	r3, #0
    ec5a:	d01e      	beq.n	ec9a <GoalDspPicture+0xfe>
		{
			if (pxImage->xBW.bGrowWidth)                                     // Grow beyond its size
    ec5c:	68bb      	ldr	r3, [r7, #8]
    ec5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    ec62:	2b00      	cmp	r3, #0
    ec64:	d003      	beq.n	ec6e <GoalDspPicture+0xd2>
				GL_Widget_SetGrow(hLabel, GL_DIRECTION_WIDTH);               // Background width around the label will fill the complete cell
    ec66:	69f8      	ldr	r0, [r7, #28]
    ec68:	2101      	movs	r1, #1
    ec6a:	f012 ffb3 	bl	21bd4 <GL_Widget_SetGrow>
			if (pxImage->xBW.xFont.pcName != NULL)
    ec6e:	68bb      	ldr	r3, [r7, #8]
    ec70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ec72:	2b00      	cmp	r3, #0
    ec74:	d005      	beq.n	ec82 <GoalDspPicture+0xe6>
				GL_Widget_SetFontName(hLabel, pxImage->xBW.xFont.pcName);    // Font name
    ec76:	68bb      	ldr	r3, [r7, #8]
    ec78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ec7a:	69f8      	ldr	r0, [r7, #28]
    ec7c:	4619      	mov	r1, r3
    ec7e:	f012 ff61 	bl	21b44 <GL_Widget_SetFontName>
			GL_Widget_SetFontScale(hLabel, pxImage->xBW.xFont.eScale);       // Font scale
    ec82:	68bb      	ldr	r3, [r7, #8]
    ec84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    ec86:	69f8      	ldr	r0, [r7, #28]
    ec88:	4619      	mov	r1, r3
    ec8a:	f012 ff6d 	bl	21b68 <GL_Widget_SetFontScale>
			GL_Widget_SetFontStyle(hLabel, pxImage->xBW.xFont.eStyle);       // Font style
    ec8e:	68bb      	ldr	r3, [r7, #8]
    ec90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ec92:	69f8      	ldr	r0, [r7, #28]
    ec94:	4619      	mov	r1, r3
    ec96:	f012 ff79 	bl	21b8c <GL_Widget_SetFontStyle>
		}
	}

	// Display picture
	// ***************
	hPicture = GL_Widget_SearchId(hWindow, PICTURE_ID); // Get picture from its id
    ec9a:	6978      	ldr	r0, [r7, #20]
    ec9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    eca0:	f012 fee4 	bl	21a6c <GL_Widget_SearchId>
    eca4:	6238      	str	r0, [r7, #32]
	GL_Widget_SetSource(hPicture, pcPicture);
    eca6:	6a38      	ldr	r0, [r7, #32]
    eca8:	68f9      	ldr	r1, [r7, #12]
    ecaa:	f013 f823 	bl	21cf4 <GL_Widget_SetSource>
	GL_Widget_SetTransformation(hPicture, GL_TRANSFORMATION_STRETCH_ALL); // Stretched along all directions
    ecae:	6a38      	ldr	r0, [r7, #32]
    ecb0:	2106      	movs	r1, #6
    ecb2:	f013 f867 	bl	21d84 <GL_Widget_SetTransformation>
	GL_Widget_SetShrink(hPicture, GL_DIRECTION_ALL);    // Shrink beyond its size (Picture shrink automatically if picture goes over screen)
    ecb6:	6a38      	ldr	r0, [r7, #32]
    ecb8:	2103      	movs	r1, #3
    ecba:	f012 fff7 	bl	21cac <GL_Widget_SetShrink>

	if (IsColorDisplay())                               // Color display?
    ecbe:	f011 fbaf 	bl	20420 <IsColorDisplay>
    ecc2:	4603      	mov	r3, r0
    ecc4:	2b00      	cmp	r3, #0
    ecc6:	d025      	beq.n	ed14 <GoalDspPicture+0x178>
	{                                                   // Yes, set expand, border and margin
		GL_Widget_SetExpand(hPicture, pxImage->xColor.eExpand);
    ecc8:	68bb      	ldr	r3, [r7, #8]
    ecca:	695b      	ldr	r3, [r3, #20]
    eccc:	6a38      	ldr	r0, [r7, #32]
    ecce:	4619      	mov	r1, r3
    ecd0:	f012 ff14 	bl	21afc <GL_Widget_SetExpand>
		GL_Widget_SetBorders(hPicture, pxImage->xColor.xBorder.usLeft, pxImage->xColor.xBorder.usTop, pxImage->xColor.xBorder.usRight, pxImage->xColor.xBorder.usBottom, GL_UNIT_PIXEL, pxImage->xColor.xBorder.ulColor);
    ecd4:	68bb      	ldr	r3, [r7, #8]
    ecd6:	6999      	ldr	r1, [r3, #24]
    ecd8:	68bb      	ldr	r3, [r7, #8]
    ecda:	69da      	ldr	r2, [r3, #28]
    ecdc:	68bb      	ldr	r3, [r7, #8]
    ecde:	6a1b      	ldr	r3, [r3, #32]
    ece0:	68b8      	ldr	r0, [r7, #8]
    ece2:	6a44      	ldr	r4, [r0, #36]	; 0x24
    ece4:	68b8      	ldr	r0, [r7, #8]
    ece6:	6a80      	ldr	r0, [r0, #40]	; 0x28
    ece8:	9400      	str	r4, [sp, #0]
    ecea:	2400      	movs	r4, #0
    ecec:	9401      	str	r4, [sp, #4]
    ecee:	9002      	str	r0, [sp, #8]
    ecf0:	6a38      	ldr	r0, [r7, #32]
    ecf2:	f012 fef1 	bl	21ad8 <GL_Widget_SetBorders>
		GL_Widget_SetMargins(hPicture, pxImage->xColor.xMargin.usLeft, pxImage->xColor.xMargin.usTop, pxImage->xColor.xMargin.usRight, pxImage->xColor.xMargin.usBottom, GL_UNIT_PIXEL);
    ecf6:	68bb      	ldr	r3, [r7, #8]
    ecf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    ecfa:	68bb      	ldr	r3, [r7, #8]
    ecfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ecfe:	68bb      	ldr	r3, [r7, #8]
    ed00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ed02:	68b8      	ldr	r0, [r7, #8]
    ed04:	6b80      	ldr	r0, [r0, #56]	; 0x38
    ed06:	9000      	str	r0, [sp, #0]
    ed08:	2000      	movs	r0, #0
    ed0a:	9001      	str	r0, [sp, #4]
    ed0c:	6a38      	ldr	r0, [r7, #32]
    ed0e:	f012 ff97 	bl	21c40 <GL_Widget_SetMargins>
    ed12:	e024      	b.n	ed5e <GoalDspPicture+0x1c2>
	}
	else
	{                                                   // No, set expand, border and margin
		GL_Widget_SetExpand(hPicture, pxImage->xBW.eExpand);
    ed14:	68bb      	ldr	r3, [r7, #8]
    ed16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ed18:	6a38      	ldr	r0, [r7, #32]
    ed1a:	4619      	mov	r1, r3
    ed1c:	f012 feee 	bl	21afc <GL_Widget_SetExpand>
		GL_Widget_SetBorders(hPicture, pxImage->xBW.xBorder.usLeft, pxImage->xBW.xBorder.usTop, pxImage->xBW.xBorder.usRight, pxImage->xBW.xBorder.usBottom, GL_UNIT_PIXEL, pxImage->xBW.xBorder.ulColor);
    ed20:	68bb      	ldr	r3, [r7, #8]
    ed22:	6d19      	ldr	r1, [r3, #80]	; 0x50
    ed24:	68bb      	ldr	r3, [r7, #8]
    ed26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    ed28:	68bb      	ldr	r3, [r7, #8]
    ed2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    ed2c:	68b8      	ldr	r0, [r7, #8]
    ed2e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
    ed30:	68b8      	ldr	r0, [r7, #8]
    ed32:	6e00      	ldr	r0, [r0, #96]	; 0x60
    ed34:	9400      	str	r4, [sp, #0]
    ed36:	2400      	movs	r4, #0
    ed38:	9401      	str	r4, [sp, #4]
    ed3a:	9002      	str	r0, [sp, #8]
    ed3c:	6a38      	ldr	r0, [r7, #32]
    ed3e:	f012 fecb 	bl	21ad8 <GL_Widget_SetBorders>
		GL_Widget_SetMargins(hPicture, pxImage->xBW.xMargin.usLeft, pxImage->xBW.xMargin.usTop, pxImage->xBW.xMargin.usRight, pxImage->xBW.xMargin.usBottom, GL_UNIT_PIXEL);
    ed42:	68bb      	ldr	r3, [r7, #8]
    ed44:	6e59      	ldr	r1, [r3, #100]	; 0x64
    ed46:	68bb      	ldr	r3, [r7, #8]
    ed48:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    ed4a:	68bb      	ldr	r3, [r7, #8]
    ed4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    ed4e:	68b8      	ldr	r0, [r7, #8]
    ed50:	6f00      	ldr	r0, [r0, #112]	; 0x70
    ed52:	9000      	str	r0, [sp, #0]
    ed54:	2000      	movs	r0, #0
    ed56:	9001      	str	r0, [sp, #4]
    ed58:	6a38      	ldr	r0, [r7, #32]
    ed5a:	f012 ff71 	bl	21c40 <GL_Widget_SetMargins>
	}

	CHECK(ulTimeOut!=0, lblNoTimer);                    // No timer to set
    ed5e:	687b      	ldr	r3, [r7, #4]
    ed60:	2b00      	cmp	r3, #0
    ed62:	d045      	beq.n	edf0 <GoalDspPicture+0x254>

	// Restart timer
	// *************
	if (ulTimeOut == GL_TIME_INFINITE)                  // Set timeout value
    ed64:	687b      	ldr	r3, [r7, #4]
    ed66:	f1b3 3fff 	cmp.w	r3, #4294967295
    ed6a:	d10a      	bne.n	ed82 <GoalDspPicture+0x1e6>
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), 0x7FFFFFFF); // Bug 0xFFFFFFFF not supported
    ed6c:	6978      	ldr	r0, [r7, #20]
    ed6e:	2100      	movs	r1, #0
    ed70:	f012 fe7c 	bl	21a6c <GL_Widget_SearchId>
    ed74:	4603      	mov	r3, r0
    ed76:	4618      	mov	r0, r3
    ed78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ed7c:	f012 fe1c 	bl	219b8 <GL_Timer_SetInterval>
    ed80:	e008      	b.n	ed94 <GoalDspPicture+0x1f8>
	else
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), ulTimeOut);
    ed82:	6978      	ldr	r0, [r7, #20]
    ed84:	2100      	movs	r1, #0
    ed86:	f012 fe71 	bl	21a6c <GL_Widget_SearchId>
    ed8a:	4603      	mov	r3, r0
    ed8c:	4618      	mov	r0, r3
    ed8e:	6879      	ldr	r1, [r7, #4]
    ed90:	f012 fe12 	bl	219b8 <GL_Timer_SetInterval>

	// Loop indefinitely until the result is set from the call back functions
	// **********************************************************************
	GL_Window_MainLoop(hWindow);                        // Wait until a result is set
    ed94:	6978      	ldr	r0, [r7, #20]
    ed96:	f013 f873 	bl	21e80 <GL_Window_MainLoop>

	// Test the result set by the call back functions
	// **********************************************
	switch(GL_Window_GetResult(hWindow))                // Get the result
    ed9a:	6978      	ldr	r0, [r7, #20]
    ed9c:	f013 f85e 	bl	21e5c <GL_Window_GetResult>
    eda0:	4603      	mov	r3, r0
    eda2:	2b01      	cmp	r3, #1
    eda4:	d010      	beq.n	edc8 <GoalDspPicture+0x22c>
    eda6:	2b01      	cmp	r3, #1
    eda8:	d302      	bcc.n	edb0 <GoalDspPicture+0x214>
    edaa:	2b04      	cmp	r3, #4
    edac:	d018      	beq.n	ede0 <GoalDspPicture+0x244>
    edae:	e01a      	b.n	ede6 <GoalDspPicture+0x24a>
	{
	case RES_VALID_STATUS:                              // Key valid result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    edb0:	6978      	ldr	r0, [r7, #20]
    edb2:	2100      	movs	r1, #0
    edb4:	f012 fe5a 	bl	21a6c <GL_Widget_SearchId>
    edb8:	4603      	mov	r3, r0
    edba:	4618      	mov	r0, r3
    edbc:	f012 fe0e 	bl	219dc <GL_Timer_Stop>
		iRet=GL_KEY_VALID;
    edc0:	f64f 0350 	movw	r3, #63568	; 0xf850
    edc4:	61bb      	str	r3, [r7, #24]
		break;
    edc6:	e012      	b.n	edee <GoalDspPicture+0x252>
	case RES_CANCEL_STATUS:                             // Key cancel result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    edc8:	6978      	ldr	r0, [r7, #20]
    edca:	2100      	movs	r1, #0
    edcc:	f012 fe4e 	bl	21a6c <GL_Widget_SearchId>
    edd0:	4603      	mov	r3, r0
    edd2:	4618      	mov	r0, r3
    edd4:	f012 fe02 	bl	219dc <GL_Timer_Stop>
		iRet=GL_KEY_CANCEL;
    edd8:	f64f 0351 	movw	r3, #63569	; 0xf851
    eddc:	61bb      	str	r3, [r7, #24]
		break;
    edde:	e006      	b.n	edee <GoalDspPicture+0x252>
	case RES_TIMER_STATUS:                              // Timer result
		iRet=0;
    ede0:	2300      	movs	r3, #0
    ede2:	61bb      	str	r3, [r7, #24]
		break;
    ede4:	e003      	b.n	edee <GoalDspPicture+0x252>
	default:                                            // Unknown result
		iRet=-1;
    ede6:	f04f 33ff 	mov.w	r3, #4294967295
    edea:	61bb      	str	r3, [r7, #24]
		break;
    edec:	bf00      	nop
	}

	goto lblEnd;
    edee:	e01c      	b.n	ee2a <GoalDspPicture+0x28e>

	// Errors treatment
    // ****************
lblNoTimer:                                             // No timer used
	iRet=0;
    edf0:	2300      	movs	r3, #0
    edf2:	61bb      	str	r3, [r7, #24]
	if (bRefresh)
    edf4:	78fb      	ldrb	r3, [r7, #3]
    edf6:	2b00      	cmp	r3, #0
    edf8:	d016      	beq.n	ee28 <GoalDspPicture+0x28c>
	{
		iRet=GL_Window_Dispatch(hWindow, 0);            // Refresh the window
    edfa:	6978      	ldr	r0, [r7, #20]
    edfc:	2100      	movs	r1, #0
    edfe:	f013 f81b 	bl	21e38 <GL_Window_Dispatch>
    ee02:	4603      	mov	r3, r0
    ee04:	61bb      	str	r3, [r7, #24]
		if (iRet == RES_VALID_STATUS)
    ee06:	69bb      	ldr	r3, [r7, #24]
    ee08:	2b00      	cmp	r3, #0
    ee0a:	d102      	bne.n	ee12 <GoalDspPicture+0x276>
			iRet=GL_KEY_VALID;
    ee0c:	f64f 0350 	movw	r3, #63568	; 0xf850
    ee10:	61bb      	str	r3, [r7, #24]
		if (iRet == RES_CANCEL_STATUS)
    ee12:	69bb      	ldr	r3, [r7, #24]
    ee14:	2b01      	cmp	r3, #1
    ee16:	d107      	bne.n	ee28 <GoalDspPicture+0x28c>
			iRet=GL_KEY_CANCEL;
    ee18:	f64f 0351 	movw	r3, #63569	; 0xf851
    ee1c:	61bb      	str	r3, [r7, #24]
	}
	goto lblEnd;
    ee1e:	e003      	b.n	ee28 <GoalDspPicture+0x28c>
lblKO:                                                  // Display picture failed
	iRet=-1;
    ee20:	f04f 33ff 	mov.w	r3, #4294967295
    ee24:	61bb      	str	r3, [r7, #24]
	goto lblEnd;
    ee26:	e000      	b.n	ee2a <GoalDspPicture+0x28e>
		if (iRet == RES_VALID_STATUS)
			iRet=GL_KEY_VALID;
		if (iRet == RES_CANCEL_STATUS)
			iRet=GL_KEY_CANCEL;
	}
	goto lblEnd;
    ee28:	bf00      	nop
lblKO:                                                  // Display picture failed
	iRet=-1;
	goto lblEnd;
lblEnd:
	return iRet;
    ee2a:	69bb      	ldr	r3, [r7, #24]
}
    ee2c:	4618      	mov	r0, r3
    ee2e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    ee32:	f2c0 0302 	movt	r3, #2
    ee36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ee38:	681b      	ldr	r3, [r3, #0]
    ee3a:	429a      	cmp	r2, r3
    ee3c:	d001      	beq.n	ee42 <GoalDspPicture+0x2a6>
    ee3e:	f7fa f8b1 	bl	8fa4 <__stack_chk_fail>
    ee42:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    ee46:	46bd      	mov	sp, r7
    ee48:	bd90      	pop	{r4, r7, pc}
    ee4a:	bf00      	nop

0000ee4c <GoalDestroyPicture>:
//   phWindow (I-) : Pointer on window context handle.
// This function has no return value.
//****************************************************************************

void GoalDestroyPicture(T_GL_HWIDGET *phWindow)
{
    ee4c:	b580      	push	{r7, lr}
    ee4e:	b084      	sub	sp, #16
    ee50:	af00      	add	r7, sp, #0
    ee52:	6078      	str	r0, [r7, #4]
    ee54:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    ee58:	f2c0 0302 	movt	r3, #2
    ee5c:	681b      	ldr	r3, [r3, #0]
    ee5e:	60fb      	str	r3, [r7, #12]
    // ***************
		// Empty

	// Destroy screen
	// **************
	GL_Widget_Destroy(*phWindow); // Destroy window with all widgets attached
    ee60:	687b      	ldr	r3, [r7, #4]
    ee62:	681b      	ldr	r3, [r3, #0]
    ee64:	4618      	mov	r0, r3
    ee66:	f012 fdcb 	bl	21a00 <GL_Widget_Destroy>
	*phWindow=NULL;
    ee6a:	687b      	ldr	r3, [r7, #4]
    ee6c:	2200      	movs	r2, #0
    ee6e:	601a      	str	r2, [r3, #0]
}
    ee70:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    ee74:	f2c0 0302 	movt	r3, #2
    ee78:	68fa      	ldr	r2, [r7, #12]
    ee7a:	681b      	ldr	r3, [r3, #0]
    ee7c:	429a      	cmp	r2, r3
    ee7e:	d001      	beq.n	ee84 <GoalDestroyPicture+0x38>
    ee80:	f7fa f890 	bl	8fa4 <__stack_chk_fail>
    ee84:	f107 0710 	add.w	r7, r7, #16
    ee88:	46bd      	mov	sp, r7
    ee8a:	bd80      	pop	{r7, pc}

0000ee8c <GoalCreateDocument>:
//   !NULL : Pointer to the handle of the document.
//   NULL : Document failed
//****************************************************************************

T_GL_HWIDGET GoalCreateDocument (T_GL_HGRAPHIC_LIB hGraphicLib, T_GL_ENCODING_CHARSET eCharSet)
{
    ee8c:	b580      	push	{r7, lr}
    ee8e:	b086      	sub	sp, #24
    ee90:	af00      	add	r7, sp, #0
    ee92:	6078      	str	r0, [r7, #4]
    ee94:	6039      	str	r1, [r7, #0]
    ee96:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    ee9a:	f2c0 0302 	movt	r3, #2
    ee9e:	681b      	ldr	r3, [r3, #0]
    eea0:	617b      	str	r3, [r7, #20]
    // ***************
	T_GL_HWIDGET hDocument, hLayout;

	// Build document context
	// **********************
	GL_GraphicLib_SetCharset(hGraphicLib, eCharSet);  // Changes the encoding charset of the graphic library
    eea2:	6878      	ldr	r0, [r7, #4]
    eea4:	6839      	ldr	r1, [r7, #0]
    eea6:	f012 fcc1 	bl	2182c <GL_GraphicLib_SetCharset>

	hDocument = GL_Document_Create(hGraphicLib);      // Create a document to print
    eeaa:	6878      	ldr	r0, [r7, #4]
    eeac:	f012 fb94 	bl	215d8 <GL_Document_Create>
    eeb0:	60f8      	str	r0, [r7, #12]
	CHECK(hDocument!=NULL, lblEnd);
    eeb2:	68fb      	ldr	r3, [r7, #12]
    eeb4:	2b00      	cmp	r3, #0
    eeb6:	d015      	beq.n	eee4 <GoalCreateDocument+0x58>

	hLayout = GL_Layout_Create(hDocument);            // Create a layout on this document
    eeb8:	68f8      	ldr	r0, [r7, #12]
    eeba:	f012 fced 	bl	21898 <GL_Layout_Create>
    eebe:	6138      	str	r0, [r7, #16]
	CHECK(hLayout!=NULL, lblKO);
    eec0:	693b      	ldr	r3, [r7, #16]
    eec2:	2b00      	cmp	r3, #0
    eec4:	d005      	beq.n	eed2 <GoalCreateDocument+0x46>
	GL_Widget_SetId(hLayout, LAYOUT3_ID);             // Layout Identifier LAYOUT3_ID
    eec6:	6938      	ldr	r0, [r7, #16]
    eec8:	f44f 6110 	mov.w	r1, #2304	; 0x900
    eecc:	f012 fe94 	bl	21bf8 <GL_Widget_SetId>

	goto lblEnd;
    eed0:	e008      	b.n	eee4 <GoalCreateDocument+0x58>

	// Errors treatment
    // ****************
lblKO:                                                // Document creation failed
	if (hDocument)
    eed2:	68fb      	ldr	r3, [r7, #12]
    eed4:	2b00      	cmp	r3, #0
    eed6:	d004      	beq.n	eee2 <GoalCreateDocument+0x56>
	{
		GL_Widget_Destroy(hDocument);                 // Destroy document and all widgets
    eed8:	68f8      	ldr	r0, [r7, #12]
    eeda:	f012 fd91 	bl	21a00 <GL_Widget_Destroy>
		hDocument=NULL;
    eede:	2300      	movs	r3, #0
    eee0:	60fb      	str	r3, [r7, #12]
	}
	goto lblEnd;
    eee2:	bf00      	nop
lblEnd:
	return hDocument;
    eee4:	68fb      	ldr	r3, [r7, #12]
}
    eee6:	4618      	mov	r0, r3
    eee8:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    eeec:	f2c0 0302 	movt	r3, #2
    eef0:	697a      	ldr	r2, [r7, #20]
    eef2:	681b      	ldr	r3, [r3, #0]
    eef4:	429a      	cmp	r2, r3
    eef6:	d001      	beq.n	eefc <GoalCreateDocument+0x70>
    eef8:	f7fa f854 	bl	8fa4 <__stack_chk_fail>
    eefc:	f107 0718 	add.w	r7, r7, #24
    ef00:	46bd      	mov	sp, r7
    ef02:	bd80      	pop	{r7, pc}

0000ef04 <GoalPrnLine>:
//   >=0 : Build line done.
//   <0 : Build line failed.
//****************************************************************************

int GoalPrnLine(T_GL_HWIDGET hDocument, ushort usLine, char *pcText, const ST_PRN_LINE* pxLine)
{
    ef04:	b580      	push	{r7, lr}
    ef06:	b08c      	sub	sp, #48	; 0x30
    ef08:	af04      	add	r7, sp, #16
    ef0a:	60f8      	str	r0, [r7, #12]
    ef0c:	607a      	str	r2, [r7, #4]
    ef0e:	603b      	str	r3, [r7, #0]
    ef10:	460b      	mov	r3, r1
    ef12:	817b      	strh	r3, [r7, #10]
    ef14:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    ef18:	f2c0 0302 	movt	r3, #2
    ef1c:	681b      	ldr	r3, [r3, #0]
    ef1e:	61fb      	str	r3, [r7, #28]
	// Local variables
    // ***************
	T_GL_HWIDGET hLayout, hPrint;
	int iRet=0;
    ef20:	2300      	movs	r3, #0
    ef22:	613b      	str	r3, [r7, #16]

	// Build line on document
	// **********************
	CHECK((pcText!=NULL) && (pxLine!=NULL), lblKO);
    ef24:	687b      	ldr	r3, [r7, #4]
    ef26:	2b00      	cmp	r3, #0
    ef28:	f000 80c7 	beq.w	f0ba <GoalPrnLine+0x1b6>
    ef2c:	683b      	ldr	r3, [r7, #0]
    ef2e:	2b00      	cmp	r3, #0
    ef30:	f000 80c3 	beq.w	f0ba <GoalPrnLine+0x1b6>
	CHECK(strlen(pcText)!=0, lblEnd);
    ef34:	687b      	ldr	r3, [r7, #4]
    ef36:	781b      	ldrb	r3, [r3, #0]
    ef38:	2b00      	cmp	r3, #0
    ef3a:	f000 80c2 	beq.w	f0c2 <GoalPrnLine+0x1be>

	hLayout = GL_Widget_SearchId(hDocument, LAYOUT3_ID);      // Get layout from its id
    ef3e:	68f8      	ldr	r0, [r7, #12]
    ef40:	f44f 6110 	mov.w	r1, #2304	; 0x900
    ef44:	f012 fd92 	bl	21a6c <GL_Widget_SearchId>
    ef48:	6178      	str	r0, [r7, #20]
	CHECK(hLayout!=NULL, lblKO);
    ef4a:	697b      	ldr	r3, [r7, #20]
    ef4c:	2b00      	cmp	r3, #0
    ef4e:	f000 80b4 	beq.w	f0ba <GoalPrnLine+0x1b6>

	hPrint = GL_Print_Create(hLayout);                        // Create a print label designed to be printed on this layout
    ef52:	6978      	ldr	r0, [r7, #20]
    ef54:	f012 fd0c 	bl	21970 <GL_Print_Create>
    ef58:	61b8      	str	r0, [r7, #24]
	CHECK(hPrint!=NULL, lblKO);
    ef5a:	69bb      	ldr	r3, [r7, #24]
    ef5c:	2b00      	cmp	r3, #0
    ef5e:	f000 80ac 	beq.w	f0ba <GoalPrnLine+0x1b6>
	GL_Widget_SetItem(hPrint, 0, usLine);                     // Print label location on this layout
    ef62:	897b      	ldrh	r3, [r7, #10]
    ef64:	69b8      	ldr	r0, [r7, #24]
    ef66:	2100      	movs	r1, #0
    ef68:	461a      	mov	r2, r3
    ef6a:	f012 fe57 	bl	21c1c <GL_Widget_SetItem>
	GL_Widget_SetText(hPrint, "%s", pcText);                  // Print text (Add %s to allow '%' to be printed)
    ef6e:	69b8      	ldr	r0, [r7, #24]
    ef70:	f243 019c 	movw	r1, #12444	; 0x309c
    ef74:	f2c0 0102 	movt	r1, #2
    ef78:	687a      	ldr	r2, [r7, #4]
    ef7a:	f012 fecd 	bl	21d18 <GL_Widget_SetText>
	GL_Widget_SetWrap(hPrint, true);                          // Set the wrap of text (Allows text to automatically return to the next line if it does not fit in width)
    ef7e:	69b8      	ldr	r0, [r7, #24]
    ef80:	2101      	movs	r1, #1
    ef82:	f012 ff23 	bl	21dcc <GL_Widget_SetWrap>
	GL_Widget_SetShrink(hPrint, GL_DIRECTION_WIDTH);          // Shrink beyond its size (No width scrolling cell if text goes over printer size)
    ef86:	69b8      	ldr	r0, [r7, #24]
    ef88:	2101      	movs	r1, #1
    ef8a:	f012 fe8f 	bl	21cac <GL_Widget_SetShrink>

	GL_Widget_SetTextAlign(hPrint, pxLine->eTextAlign);       // Text alignment
    ef8e:	683b      	ldr	r3, [r7, #0]
    ef90:	681b      	ldr	r3, [r3, #0]
    ef92:	69b8      	ldr	r0, [r7, #24]
    ef94:	4619      	mov	r1, r3
    ef96:	f012 fed1 	bl	21d3c <GL_Widget_SetTextAlign>
	GL_Widget_SetBackAlign(hPrint, pxLine->eBackAlign);       // Background alignment
    ef9a:	683b      	ldr	r3, [r7, #0]
    ef9c:	685b      	ldr	r3, [r3, #4]
    ef9e:	69b8      	ldr	r0, [r7, #24]
    efa0:	4619      	mov	r1, r3
    efa2:	f012 fd75 	bl	21a90 <GL_Widget_SetBackAlign>
	if (pxLine->usSizeWidth < 99)                             // Background size
    efa6:	683b      	ldr	r3, [r7, #0]
    efa8:	68db      	ldr	r3, [r3, #12]
    efaa:	2b62      	cmp	r3, #98	; 0x62
    efac:	d808      	bhi.n	efc0 <GoalPrnLine+0xbc>
		GL_Widget_SetMinSize(hPrint, pxLine->usSizeWidth, 0, GL_UNIT_PERCENT); // The size
    efae:	683b      	ldr	r3, [r7, #0]
    efb0:	68db      	ldr	r3, [r3, #12]
    efb2:	69b8      	ldr	r0, [r7, #24]
    efb4:	4619      	mov	r1, r3
    efb6:	2200      	movs	r2, #0
    efb8:	2301      	movs	r3, #1
    efba:	f012 fe53 	bl	21c64 <GL_Widget_SetMinSize>
    efbe:	e003      	b.n	efc8 <GoalPrnLine+0xc4>
	else
		GL_Widget_SetExpand(hPrint, GL_DIRECTION_WIDTH);                       // Full size
    efc0:	69b8      	ldr	r0, [r7, #24]
    efc2:	2101      	movs	r1, #1
    efc4:	f012 fd9a 	bl	21afc <GL_Widget_SetExpand>
	if (!pxLine->bReverse)                                    // Reverse mode?
    efc8:	683b      	ldr	r3, [r7, #0]
    efca:	7a1b      	ldrb	r3, [r3, #8]
    efcc:	f083 0301 	eor.w	r3, r3, #1
    efd0:	b2db      	uxtb	r3, r3
    efd2:	2b00      	cmp	r3, #0
    efd4:	d00a      	beq.n	efec <GoalPrnLine+0xe8>
	{                                                         // No
		GL_Widget_SetForeColor(hPrint, GL_COLOR_BLACK);       // Force pen color to black and brush color to white
    efd6:	69b8      	ldr	r0, [r7, #24]
    efd8:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    efdc:	f012 fde8 	bl	21bb0 <GL_Widget_SetForeColor>
		GL_Widget_SetBackColor(hPrint, GL_COLOR_WHITE);
    efe0:	69b8      	ldr	r0, [r7, #24]
    efe2:	f04f 31ff 	mov.w	r1, #4294967295
    efe6:	f012 fd65 	bl	21ab4 <GL_Widget_SetBackColor>
    efea:	e009      	b.n	f000 <GoalPrnLine+0xfc>
	}
	else
	{                                                         // Yes
		GL_Widget_SetForeColor(hPrint, GL_COLOR_WHITE);       // Force pen color to white and brush color to black
    efec:	69b8      	ldr	r0, [r7, #24]
    efee:	f04f 31ff 	mov.w	r1, #4294967295
    eff2:	f012 fddd 	bl	21bb0 <GL_Widget_SetForeColor>
		GL_Widget_SetBackColor(hPrint, GL_COLOR_BLACK);
    eff6:	69b8      	ldr	r0, [r7, #24]
    eff8:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    effc:	f012 fd5a 	bl	21ab4 <GL_Widget_SetBackColor>
	}
	                                                          // Padding, Border and Margin
	GL_Widget_SetTextPaddings(hPrint, pxLine->xPadding.usLeft, pxLine->xPadding.usTop, pxLine->xPadding.usRight, pxLine->xPadding.usBottom, GL_UNIT_PERCENT);
    f000:	683b      	ldr	r3, [r7, #0]
    f002:	6919      	ldr	r1, [r3, #16]
    f004:	683b      	ldr	r3, [r7, #0]
    f006:	695a      	ldr	r2, [r3, #20]
    f008:	683b      	ldr	r3, [r7, #0]
    f00a:	699b      	ldr	r3, [r3, #24]
    f00c:	6838      	ldr	r0, [r7, #0]
    f00e:	69c0      	ldr	r0, [r0, #28]
    f010:	9000      	str	r0, [sp, #0]
    f012:	2001      	movs	r0, #1
    f014:	9001      	str	r0, [sp, #4]
    f016:	69b8      	ldr	r0, [r7, #24]
    f018:	f012 fea2 	bl	21d60 <GL_Widget_SetTextPaddings>
	if (pxLine->xBorder.ulColor != GL_COLOR_BLACK)            // Force border to black or white
    f01c:	683b      	ldr	r3, [r7, #0]
    f01e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f020:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    f024:	d011      	beq.n	f04a <GoalPrnLine+0x146>
		GL_Widget_SetBorders(hPrint, pxLine->xBorder.usLeft, pxLine->xBorder.usTop, pxLine->xBorder.usRight, pxLine->xBorder.usBottom, GL_UNIT_PIXEL, GL_COLOR_WHITE);
    f026:	683b      	ldr	r3, [r7, #0]
    f028:	6a19      	ldr	r1, [r3, #32]
    f02a:	683b      	ldr	r3, [r7, #0]
    f02c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f02e:	683b      	ldr	r3, [r7, #0]
    f030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f032:	6838      	ldr	r0, [r7, #0]
    f034:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    f036:	9000      	str	r0, [sp, #0]
    f038:	2000      	movs	r0, #0
    f03a:	9001      	str	r0, [sp, #4]
    f03c:	f04f 30ff 	mov.w	r0, #4294967295
    f040:	9002      	str	r0, [sp, #8]
    f042:	69b8      	ldr	r0, [r7, #24]
    f044:	f012 fd48 	bl	21ad8 <GL_Widget_SetBorders>
    f048:	e010      	b.n	f06c <GoalPrnLine+0x168>
	else
		GL_Widget_SetBorders(hPrint, pxLine->xBorder.usLeft, pxLine->xBorder.usTop, pxLine->xBorder.usRight, pxLine->xBorder.usBottom, GL_UNIT_PIXEL, GL_COLOR_BLACK);
    f04a:	683b      	ldr	r3, [r7, #0]
    f04c:	6a19      	ldr	r1, [r3, #32]
    f04e:	683b      	ldr	r3, [r7, #0]
    f050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f052:	683b      	ldr	r3, [r7, #0]
    f054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f056:	6838      	ldr	r0, [r7, #0]
    f058:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    f05a:	9000      	str	r0, [sp, #0]
    f05c:	2000      	movs	r0, #0
    f05e:	9001      	str	r0, [sp, #4]
    f060:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
    f064:	9002      	str	r0, [sp, #8]
    f066:	69b8      	ldr	r0, [r7, #24]
    f068:	f012 fd36 	bl	21ad8 <GL_Widget_SetBorders>
	GL_Widget_SetMargins(hPrint, pxLine->xMargin.usLeft, pxLine->xMargin.usTop, pxLine->xMargin.usRight, pxLine->xMargin.usBottom, GL_UNIT_PIXEL);
    f06c:	683b      	ldr	r3, [r7, #0]
    f06e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    f070:	683b      	ldr	r3, [r7, #0]
    f072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f074:	683b      	ldr	r3, [r7, #0]
    f076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    f078:	6838      	ldr	r0, [r7, #0]
    f07a:	6c00      	ldr	r0, [r0, #64]	; 0x40
    f07c:	9000      	str	r0, [sp, #0]
    f07e:	2000      	movs	r0, #0
    f080:	9001      	str	r0, [sp, #4]
    f082:	69b8      	ldr	r0, [r7, #24]
    f084:	f012 fddc 	bl	21c40 <GL_Widget_SetMargins>
	if (pxLine->xFont.pcName != NULL)
    f088:	683b      	ldr	r3, [r7, #0]
    f08a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f08c:	2b00      	cmp	r3, #0
    f08e:	d005      	beq.n	f09c <GoalPrnLine+0x198>
		GL_Widget_SetFontName(hPrint, pxLine->xFont.pcName);  // Font name
    f090:	683b      	ldr	r3, [r7, #0]
    f092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f094:	69b8      	ldr	r0, [r7, #24]
    f096:	4619      	mov	r1, r3
    f098:	f012 fd54 	bl	21b44 <GL_Widget_SetFontName>
	GL_Widget_SetFontScale(hPrint, pxLine->xFont.eScale);     // Font scale
    f09c:	683b      	ldr	r3, [r7, #0]
    f09e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f0a0:	69b8      	ldr	r0, [r7, #24]
    f0a2:	4619      	mov	r1, r3
    f0a4:	f012 fd60 	bl	21b68 <GL_Widget_SetFontScale>
	GL_Widget_SetFontStyle(hPrint, pxLine->xFont.eStyle);     // Font style
    f0a8:	683b      	ldr	r3, [r7, #0]
    f0aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    f0ac:	69b8      	ldr	r0, [r7, #24]
    f0ae:	4619      	mov	r1, r3
    f0b0:	f012 fd6c 	bl	21b8c <GL_Widget_SetFontStyle>

	iRet=1;
    f0b4:	2301      	movs	r3, #1
    f0b6:	613b      	str	r3, [r7, #16]
	goto lblEnd;
    f0b8:	e003      	b.n	f0c2 <GoalPrnLine+0x1be>

	// Errors treatment
    // ****************
lblKO:                                                        // Build line on document failed
	iRet=-1;
    f0ba:	f04f 33ff 	mov.w	r3, #4294967295
    f0be:	613b      	str	r3, [r7, #16]
	goto lblEnd;
    f0c0:	bf00      	nop
lblEnd:
	return iRet;
    f0c2:	693b      	ldr	r3, [r7, #16]
}
    f0c4:	4618      	mov	r0, r3
    f0c6:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f0ca:	f2c0 0302 	movt	r3, #2
    f0ce:	69fa      	ldr	r2, [r7, #28]
    f0d0:	681b      	ldr	r3, [r3, #0]
    f0d2:	429a      	cmp	r2, r3
    f0d4:	d001      	beq.n	f0da <GoalPrnLine+0x1d6>
    f0d6:	f7f9 ff65 	bl	8fa4 <__stack_chk_fail>
    f0da:	f107 0720 	add.w	r7, r7, #32
    f0de:	46bd      	mov	sp, r7
    f0e0:	bd80      	pop	{r7, pc}
    f0e2:	bf00      	nop

0000f0e4 <GoalPrnMultiLine>:
//    >=0 : Build buffer done.
//    <0 : Build buffer failed.
//****************************************************************************

int GoalPrnMultiLine(T_GL_HWIDGET hDocument, ushort usLine, ushort usSize, char *pcData , ushort usLen, const ST_PRN_LINE* pxLine)
{
    f0e4:	b590      	push	{r4, r7, lr}
    f0e6:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
    f0ea:	af00      	add	r7, sp, #0
    f0ec:	f107 0414 	add.w	r4, r7, #20
    f0f0:	6020      	str	r0, [r4, #0]
    f0f2:	460c      	mov	r4, r1
    f0f4:	4610      	mov	r0, r2
    f0f6:	f107 020c 	add.w	r2, r7, #12
    f0fa:	6013      	str	r3, [r2, #0]
    f0fc:	f107 020a 	add.w	r2, r7, #10
    f100:	1d3b      	adds	r3, r7, #4
    f102:	f107 0112 	add.w	r1, r7, #18
    f106:	800c      	strh	r4, [r1, #0]
    f108:	f107 0110 	add.w	r1, r7, #16
    f10c:	8008      	strh	r0, [r1, #0]
    f10e:	f8b7 1438 	ldrh.w	r1, [r7, #1080]	; 0x438
    f112:	8011      	strh	r1, [r2, #0]
    f114:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
    f118:	601a      	str	r2, [r3, #0]
    f11a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f11e:	f2c0 0302 	movt	r3, #2
    f122:	681b      	ldr	r3, [r3, #0]
    f124:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
	// Local variables
    // ***************
	ushort usIdx=0;
    f128:	f107 0318 	add.w	r3, r7, #24
    f12c:	2200      	movs	r2, #0
    f12e:	801a      	strh	r2, [r3, #0]
	ushort usCount=0;
    f130:	f107 031a 	add.w	r3, r7, #26
    f134:	2200      	movs	r2, #0
    f136:	801a      	strh	r2, [r3, #0]
	char tcBuffer[1024+1];
	int iRet=-1;
    f138:	f107 031c 	add.w	r3, r7, #28
    f13c:	f04f 32ff 	mov.w	r2, #4294967295
    f140:	601a      	str	r2, [r3, #0]

	// Build document in progress
	// **************************
	CHECK ((pcData!=NULL) && (usLen>=0), lblKO)
    f142:	f107 030c 	add.w	r3, r7, #12
    f146:	681b      	ldr	r3, [r3, #0]
    f148:	2b00      	cmp	r3, #0
    f14a:	d07d      	beq.n	f248 <GoalPrnMultiLine+0x164>

	memset(tcBuffer, 0, sizeof(tcBuffer));
    f14c:	f107 0320 	add.w	r3, r7, #32
    f150:	4618      	mov	r0, r3
    f152:	2100      	movs	r1, #0
    f154:	f240 4201 	movw	r2, #1025	; 0x401
    f158:	f7f9 ed30 	blx	8bbc <_init+0x5c>
	while(1)
	{
		if (usLen > 0)                 // Check if it is the end of data
    f15c:	f107 030a 	add.w	r3, r7, #10
    f160:	881b      	ldrh	r3, [r3, #0]
    f162:	2b00      	cmp	r3, #0
    f164:	d04c      	beq.n	f200 <GoalPrnMultiLine+0x11c>
		{                              // No, it's a line with '\n' detected
			if (usCount < usSize)      // Save character into buffer
    f166:	f107 021a 	add.w	r2, r7, #26
    f16a:	f107 0310 	add.w	r3, r7, #16
    f16e:	8812      	ldrh	r2, [r2, #0]
    f170:	881b      	ldrh	r3, [r3, #0]
    f172:	429a      	cmp	r2, r3
    f174:	d231      	bcs.n	f1da <GoalPrnMultiLine+0xf6>
			{
				if (*pcData == '\n')
    f176:	f107 030c 	add.w	r3, r7, #12
    f17a:	681b      	ldr	r3, [r3, #0]
    f17c:	781b      	ldrb	r3, [r3, #0]
    f17e:	2b0a      	cmp	r3, #10
    f180:	d104      	bne.n	f18c <GoalPrnMultiLine+0xa8>
					usCount=0;
    f182:	f107 031a 	add.w	r3, r7, #26
    f186:	2200      	movs	r2, #0
    f188:	801a      	strh	r2, [r3, #0]
    f18a:	e006      	b.n	f19a <GoalPrnMultiLine+0xb6>
				else
					usCount++;
    f18c:	f107 031a 	add.w	r3, r7, #26
    f190:	f107 021a 	add.w	r2, r7, #26
    f194:	8812      	ldrh	r2, [r2, #0]
    f196:	3201      	adds	r2, #1
    f198:	801a      	strh	r2, [r3, #0]
				tcBuffer[usIdx++] = *pcData++;
    f19a:	f107 0318 	add.w	r3, r7, #24
    f19e:	881b      	ldrh	r3, [r3, #0]
    f1a0:	f107 020c 	add.w	r2, r7, #12
    f1a4:	6812      	ldr	r2, [r2, #0]
    f1a6:	7811      	ldrb	r1, [r2, #0]
    f1a8:	f107 0220 	add.w	r2, r7, #32
    f1ac:	54d1      	strb	r1, [r2, r3]
    f1ae:	f107 0318 	add.w	r3, r7, #24
    f1b2:	f107 0218 	add.w	r2, r7, #24
    f1b6:	8812      	ldrh	r2, [r2, #0]
    f1b8:	3201      	adds	r2, #1
    f1ba:	801a      	strh	r2, [r3, #0]
    f1bc:	f107 030c 	add.w	r3, r7, #12
    f1c0:	f107 020c 	add.w	r2, r7, #12
    f1c4:	6812      	ldr	r2, [r2, #0]
    f1c6:	3201      	adds	r2, #1
    f1c8:	601a      	str	r2, [r3, #0]
				usLen--;
    f1ca:	f107 030a 	add.w	r3, r7, #10
    f1ce:	f107 020a 	add.w	r2, r7, #10
    f1d2:	8812      	ldrh	r2, [r2, #0]
    f1d4:	3a01      	subs	r2, #1
    f1d6:	801a      	strh	r2, [r3, #0]
		{                              // Yes, it's the end of data
			if (usLen != 0)
				tcBuffer[usIdx++] = '\n';
			break;                     // Exit from the loop
		}
	}
    f1d8:	e7c0      	b.n	f15c <GoalPrnMultiLine+0x78>
				tcBuffer[usIdx++] = *pcData++;
				usLen--;
			}
			else                       // Bloc detected
			{
				tcBuffer[usIdx++] = '\n';
    f1da:	f107 0318 	add.w	r3, r7, #24
    f1de:	881b      	ldrh	r3, [r3, #0]
    f1e0:	f107 0220 	add.w	r2, r7, #32
    f1e4:	210a      	movs	r1, #10
    f1e6:	54d1      	strb	r1, [r2, r3]
    f1e8:	f107 0318 	add.w	r3, r7, #24
    f1ec:	f107 0218 	add.w	r2, r7, #24
    f1f0:	8812      	ldrh	r2, [r2, #0]
    f1f2:	3201      	adds	r2, #1
    f1f4:	801a      	strh	r2, [r3, #0]
				usCount=0;
    f1f6:	f107 031a 	add.w	r3, r7, #26
    f1fa:	2200      	movs	r2, #0
    f1fc:	801a      	strh	r2, [r3, #0]
		{                              // Yes, it's the end of data
			if (usLen != 0)
				tcBuffer[usIdx++] = '\n';
			break;                     // Exit from the loop
		}
	}
    f1fe:	e7ad      	b.n	f15c <GoalPrnMultiLine+0x78>
				usCount=0;
			}
		}
		else
		{                              // Yes, it's the end of data
			if (usLen != 0)
    f200:	f107 030a 	add.w	r3, r7, #10
    f204:	881b      	ldrh	r3, [r3, #0]
    f206:	2b00      	cmp	r3, #0
    f208:	d00d      	beq.n	f226 <GoalPrnMultiLine+0x142>
				tcBuffer[usIdx++] = '\n';
    f20a:	f107 0318 	add.w	r3, r7, #24
    f20e:	881b      	ldrh	r3, [r3, #0]
    f210:	f107 0220 	add.w	r2, r7, #32
    f214:	210a      	movs	r1, #10
    f216:	54d1      	strb	r1, [r2, r3]
    f218:	f107 0318 	add.w	r3, r7, #24
    f21c:	f107 0218 	add.w	r2, r7, #24
    f220:	8812      	ldrh	r2, [r2, #0]
    f222:	3201      	adds	r2, #1
    f224:	801a      	strh	r2, [r3, #0]
			break;                     // Exit from the loop
    f226:	bf00      	nop
		}
	}
                                       // Send line to the document
	iRet = GoalPrnLine(hDocument, usLine, tcBuffer, pxLine);
    f228:	f107 041c 	add.w	r4, r7, #28
    f22c:	f107 0014 	add.w	r0, r7, #20
    f230:	f107 0312 	add.w	r3, r7, #18
    f234:	8819      	ldrh	r1, [r3, #0]
    f236:	f107 0220 	add.w	r2, r7, #32
    f23a:	1d3b      	adds	r3, r7, #4
    f23c:	6800      	ldr	r0, [r0, #0]
    f23e:	681b      	ldr	r3, [r3, #0]
    f240:	f7ff fe60 	bl	ef04 <GoalPrnLine>
    f244:	6020      	str	r0, [r4, #0]

	goto lblEnd;
    f246:	e005      	b.n	f254 <GoalPrnMultiLine+0x170>

	// Errors treatment
    // ****************
lblKO:                                 // Build buffer failed.
	iRet=-1;
    f248:	f107 031c 	add.w	r3, r7, #28
    f24c:	f04f 32ff 	mov.w	r2, #4294967295
    f250:	601a      	str	r2, [r3, #0]
	goto lblEnd;
    f252:	bf00      	nop
lblEnd:
	return iRet;
    f254:	f107 031c 	add.w	r3, r7, #28
    f258:	681b      	ldr	r3, [r3, #0]
}
    f25a:	4618      	mov	r0, r3
    f25c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f260:	f2c0 0302 	movt	r3, #2
    f264:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
    f268:	681b      	ldr	r3, [r3, #0]
    f26a:	429a      	cmp	r2, r3
    f26c:	d001      	beq.n	f272 <GoalPrnMultiLine+0x18e>
    f26e:	f7f9 fe99 	bl	8fa4 <__stack_chk_fail>
    f272:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    f276:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    f27a:	46bd      	mov	sp, r7
    f27c:	bd90      	pop	{r4, r7, pc}
    f27e:	bf00      	nop

0000f280 <GoalPrnPicture>:
//   >=0 : Build picture done.
//   <0 : Build picture failed.
//****************************************************************************

int GoalPrnPicture(T_GL_HWIDGET hDocument, ushort usLine, const char* pcPicture, const ST_BORDER* pxBorder)
{
    f280:	b590      	push	{r4, r7, lr}
    f282:	b08d      	sub	sp, #52	; 0x34
    f284:	af04      	add	r7, sp, #16
    f286:	60f8      	str	r0, [r7, #12]
    f288:	607a      	str	r2, [r7, #4]
    f28a:	603b      	str	r3, [r7, #0]
    f28c:	460b      	mov	r3, r1
    f28e:	817b      	strh	r3, [r7, #10]
    f290:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f294:	f2c0 0302 	movt	r3, #2
    f298:	681b      	ldr	r3, [r3, #0]
    f29a:	61fb      	str	r3, [r7, #28]
	T_GL_HWIDGET hLayout, hPrint;
	int iRet;

	// Build picture on document
	// *************************
	hLayout = GL_Widget_SearchId(hDocument, LAYOUT3_ID);    // Get layout from its id
    f29c:	68f8      	ldr	r0, [r7, #12]
    f29e:	f44f 6110 	mov.w	r1, #2304	; 0x900
    f2a2:	f012 fbe3 	bl	21a6c <GL_Widget_SearchId>
    f2a6:	6178      	str	r0, [r7, #20]
	CHECK(hLayout!=NULL, lblKO);
    f2a8:	697b      	ldr	r3, [r7, #20]
    f2aa:	2b00      	cmp	r3, #0
    f2ac:	d028      	beq.n	f300 <GoalPrnPicture+0x80>

	hPrint = GL_Picture_Create(hLayout);                    // Create a picture designed to be printed on this layout
    f2ae:	6978      	ldr	r0, [r7, #20]
    f2b0:	f012 fb4c 	bl	2194c <GL_Picture_Create>
    f2b4:	61b8      	str	r0, [r7, #24]
	CHECK(hPrint!=NULL, lblKO);
    f2b6:	69bb      	ldr	r3, [r7, #24]
    f2b8:	2b00      	cmp	r3, #0
    f2ba:	d021      	beq.n	f300 <GoalPrnPicture+0x80>
	GL_Widget_SetItem(hPrint, 0, usLine);                   // Picture location on this layout
    f2bc:	897b      	ldrh	r3, [r7, #10]
    f2be:	69b8      	ldr	r0, [r7, #24]
    f2c0:	2100      	movs	r1, #0
    f2c2:	461a      	mov	r2, r3
    f2c4:	f012 fcaa 	bl	21c1c <GL_Widget_SetItem>
	GL_Widget_SetSource(hPrint, pcPicture);                 // The picture to print
    f2c8:	69b8      	ldr	r0, [r7, #24]
    f2ca:	6879      	ldr	r1, [r7, #4]
    f2cc:	f012 fd12 	bl	21cf4 <GL_Widget_SetSource>

	GL_Widget_SetShrink(hPrint, GL_DIRECTION_WIDTH);        // Shrink beyond its size (Picture shrinks automatically if picture goes over printer size)
    f2d0:	69b8      	ldr	r0, [r7, #24]
    f2d2:	2101      	movs	r1, #1
    f2d4:	f012 fcea 	bl	21cac <GL_Widget_SetShrink>
	                                                        // Border around the picture
	GL_Widget_SetBorders(hPrint, pxBorder->usLeft, pxBorder->usTop, pxBorder->usRight, pxBorder->usBottom, GL_UNIT_PIXEL, pxBorder->ulColor);
    f2d8:	683b      	ldr	r3, [r7, #0]
    f2da:	6819      	ldr	r1, [r3, #0]
    f2dc:	683b      	ldr	r3, [r7, #0]
    f2de:	685a      	ldr	r2, [r3, #4]
    f2e0:	683b      	ldr	r3, [r7, #0]
    f2e2:	689b      	ldr	r3, [r3, #8]
    f2e4:	6838      	ldr	r0, [r7, #0]
    f2e6:	68c4      	ldr	r4, [r0, #12]
    f2e8:	6838      	ldr	r0, [r7, #0]
    f2ea:	6900      	ldr	r0, [r0, #16]
    f2ec:	9400      	str	r4, [sp, #0]
    f2ee:	2400      	movs	r4, #0
    f2f0:	9401      	str	r4, [sp, #4]
    f2f2:	9002      	str	r0, [sp, #8]
    f2f4:	69b8      	ldr	r0, [r7, #24]
    f2f6:	f012 fbef 	bl	21ad8 <GL_Widget_SetBorders>

	iRet=1;
    f2fa:	2301      	movs	r3, #1
    f2fc:	613b      	str	r3, [r7, #16]
	goto lblEnd;
    f2fe:	e003      	b.n	f308 <GoalPrnPicture+0x88>

	// Errors treatment
    // ****************
lblKO:                                                      // Build picture failed.
	iRet=-1;
    f300:	f04f 33ff 	mov.w	r3, #4294967295
    f304:	613b      	str	r3, [r7, #16]
	goto lblEnd;
    f306:	bf00      	nop
lblEnd:
	return iRet;
    f308:	693b      	ldr	r3, [r7, #16]
}
    f30a:	4618      	mov	r0, r3
    f30c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f310:	f2c0 0302 	movt	r3, #2
    f314:	69fa      	ldr	r2, [r7, #28]
    f316:	681b      	ldr	r3, [r3, #0]
    f318:	429a      	cmp	r2, r3
    f31a:	d001      	beq.n	f320 <GoalPrnPicture+0xa0>
    f31c:	f7f9 fe42 	bl	8fa4 <__stack_chk_fail>
    f320:	f107 0724 	add.w	r7, r7, #36	; 0x24
    f324:	46bd      	mov	sp, r7
    f326:	bd90      	pop	{r4, r7, pc}

0000f328 <GoalPrnDocument>:
//   >=0 : Print document done.
//   <0 : Print document failed.
//****************************************************************************

int GoalPrnDocument(T_GL_HWIDGET hDocument)
{
    f328:	b580      	push	{r7, lr}
    f32a:	b086      	sub	sp, #24
    f32c:	af00      	add	r7, sp, #0
    f32e:	6078      	str	r0, [r7, #4]
    f330:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f334:	f2c0 0302 	movt	r3, #2
    f338:	681b      	ldr	r3, [r3, #0]
    f33a:	617b      	str	r3, [r7, #20]
	// Local variables
    // ***************
	T_GL_ERROR_CODE eRet;
	int iRet=-1;
    f33c:	f04f 33ff 	mov.w	r3, #4294967295
    f340:	60fb      	str	r3, [r7, #12]

	// Printing in progress
	// ********************
	eRet = GL_Document_Print(hDocument, 0);
    f342:	6878      	ldr	r0, [r7, #4]
    f344:	2100      	movs	r1, #0
    f346:	f012 f959 	bl	215fc <GL_Document_Print>
    f34a:	6138      	str	r0, [r7, #16]
	if ((eRet == GL_SUCCESS) || !IsPrinter())
    f34c:	693b      	ldr	r3, [r7, #16]
    f34e:	2b00      	cmp	r3, #0
    f350:	d004      	beq.n	f35c <GoalPrnDocument+0x34>
    f352:	f011 f91f 	bl	20594 <IsPrinter>
    f356:	4603      	mov	r3, r0
    f358:	2b00      	cmp	r3, #0
    f35a:	d101      	bne.n	f360 <GoalPrnDocument+0x38>
		iRet=1;
    f35c:	2301      	movs	r3, #1
    f35e:	60fb      	str	r3, [r7, #12]

	return iRet;
    f360:	68fb      	ldr	r3, [r7, #12]
}
    f362:	4618      	mov	r0, r3
    f364:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f368:	f2c0 0302 	movt	r3, #2
    f36c:	697a      	ldr	r2, [r7, #20]
    f36e:	681b      	ldr	r3, [r3, #0]
    f370:	429a      	cmp	r2, r3
    f372:	d001      	beq.n	f378 <GoalPrnDocument+0x50>
    f374:	f7f9 fe16 	bl	8fa4 <__stack_chk_fail>
    f378:	f107 0718 	add.w	r7, r7, #24
    f37c:	46bd      	mov	sp, r7
    f37e:	bd80      	pop	{r7, pc}

0000f380 <GoalDestroyDocument>:
//   phDocument (I-) : Pointer on document context handle.
// This function has no return value.
//****************************************************************************

void GoalDestroyDocument(T_GL_HWIDGET *phDocument)
{
    f380:	b580      	push	{r7, lr}
    f382:	b084      	sub	sp, #16
    f384:	af00      	add	r7, sp, #0
    f386:	6078      	str	r0, [r7, #4]
    f388:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f38c:	f2c0 0302 	movt	r3, #2
    f390:	681b      	ldr	r3, [r3, #0]
    f392:	60fb      	str	r3, [r7, #12]
    // ***************
		// Empty

	// Destroy document
	// ****************
	GL_Widget_Destroy(*phDocument); // Destroy document with all widgets attached
    f394:	687b      	ldr	r3, [r7, #4]
    f396:	681b      	ldr	r3, [r3, #0]
    f398:	4618      	mov	r0, r3
    f39a:	f012 fb31 	bl	21a00 <GL_Widget_Destroy>
	*phDocument=NULL;
    f39e:	687b      	ldr	r3, [r7, #4]
    f3a0:	2200      	movs	r2, #0
    f3a2:	601a      	str	r2, [r3, #0]
}
    f3a4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f3a8:	f2c0 0302 	movt	r3, #2
    f3ac:	68fa      	ldr	r2, [r7, #12]
    f3ae:	681b      	ldr	r3, [r3, #0]
    f3b0:	429a      	cmp	r2, r3
    f3b2:	d001      	beq.n	f3b8 <GoalDestroyDocument+0x38>
    f3b4:	f7f9 fdf6 	bl	8fa4 <__stack_chk_fail>
    f3b8:	f107 0710 	add.w	r7, r7, #16
    f3bc:	46bd      	mov	sp, r7
    f3be:	bd80      	pop	{r7, pc}

0000f3c0 <getAppCmpDat>:
#include "VGE_FMG.H"

//****************************************************************************
//      EXTERN                                                              
//****************************************************************************
const char *getAppCmpDat(void){ return __DATE__;} // Return the date of compilation of the file Mapapp.c
    f3c0:	b580      	push	{r7, lr}
    f3c2:	b082      	sub	sp, #8
    f3c4:	af00      	add	r7, sp, #0
    f3c6:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f3ca:	f2c0 0302 	movt	r3, #2
    f3ce:	681b      	ldr	r3, [r3, #0]
    f3d0:	607b      	str	r3, [r7, #4]
    f3d2:	f243 03ac 	movw	r3, #12460	; 0x30ac
    f3d6:	f2c0 0302 	movt	r3, #2
    f3da:	4618      	mov	r0, r3
    f3dc:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f3e0:	f2c0 0302 	movt	r3, #2
    f3e4:	687a      	ldr	r2, [r7, #4]
    f3e6:	681b      	ldr	r3, [r3, #0]
    f3e8:	429a      	cmp	r2, r3
    f3ea:	d001      	beq.n	f3f0 <getAppCmpDat+0x30>
    f3ec:	f7f9 fdda 	bl	8fa4 <__stack_chk_fail>
    f3f0:	f107 0708 	add.w	r7, r7, #8
    f3f4:	46bd      	mov	sp, r7
    f3f6:	bd80      	pop	{r7, pc}

0000f3f8 <getAppCmpTim>:
const char *getAppCmpTim(void){ return __TIME__;} // Return the time of compilation of the file Mapapp.c
    f3f8:	b580      	push	{r7, lr}
    f3fa:	b082      	sub	sp, #8
    f3fc:	af00      	add	r7, sp, #0
    f3fe:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f402:	f2c0 0302 	movt	r3, #2
    f406:	681b      	ldr	r3, [r3, #0]
    f408:	607b      	str	r3, [r7, #4]
    f40a:	f243 03b8 	movw	r3, #12472	; 0x30b8
    f40e:	f2c0 0302 	movt	r3, #2
    f412:	4618      	mov	r0, r3
    f414:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f418:	f2c0 0302 	movt	r3, #2
    f41c:	687a      	ldr	r2, [r7, #4]
    f41e:	681b      	ldr	r3, [r3, #0]
    f420:	429a      	cmp	r2, r3
    f422:	d001      	beq.n	f428 <getAppCmpTim+0x30>
    f424:	f7f9 fdbe 	bl	8fa4 <__stack_chk_fail>
    f428:	f107 0708 	add.w	r7, r7, #8
    f42c:	46bd      	mov	sp, r7
    f42e:	bd80      	pop	{r7, pc}

0000f430 <appLen>:
//   <0  : Initialization failed (FMG failed).
//****************************************************************************



word appLen (word usKey) {
    f430:	b580      	push	{r7, lr}
    f432:	b084      	sub	sp, #16
    f434:	af00      	add	r7, sp, #0
    f436:	4603      	mov	r3, r0
    f438:	80fb      	strh	r3, [r7, #6]
    f43a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f43e:	f2c0 0302 	movt	r3, #2
    f442:	681b      	ldr	r3, [r3, #0]
    f444:	60fb      	str	r3, [r7, #12]
	// Local variables
	// ***************

	// Store parameter
	// ***************
	CHECK(tzApp[usKey-appBeg].usKey==usKey, lblKO);     // Check if it is the right key
    f446:	88fb      	ldrh	r3, [r7, #6]
    f448:	1e5a      	subs	r2, r3, #1
    f44a:	f243 1358 	movw	r3, #12632	; 0x3158
    f44e:	f2c0 0302 	movt	r3, #2
    f452:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
    f456:	88fa      	ldrh	r2, [r7, #6]
    f458:	429a      	cmp	r2, r3
    f45a:	d109      	bne.n	f470 <appLen+0x40>

	return tzApp[usKey-appBeg].usLen;
    f45c:	88fb      	ldrh	r3, [r7, #6]
    f45e:	3b01      	subs	r3, #1
    f460:	f243 1258 	movw	r2, #12632	; 0x3158
    f464:	f2c0 0202 	movt	r2, #2
    f468:	00db      	lsls	r3, r3, #3
    f46a:	18d3      	adds	r3, r2, r3
    f46c:	885b      	ldrh	r3, [r3, #2]
    f46e:	e001      	b.n	f474 <appLen+0x44>

	// Errors treatment
	// ****************
	lblKO:                                                   // Retrieve parameter failed
	return -1;
    f470:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
    f474:	4618      	mov	r0, r3
    f476:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f47a:	f2c0 0302 	movt	r3, #2
    f47e:	68fa      	ldr	r2, [r7, #12]
    f480:	681b      	ldr	r3, [r3, #0]
    f482:	429a      	cmp	r2, r3
    f484:	d001      	beq.n	f48a <appLen+0x5a>
    f486:	f7f9 fd8d 	bl	8fa4 <__stack_chk_fail>
    f48a:	f107 0710 	add.w	r7, r7, #16
    f48e:	46bd      	mov	sp, r7
    f490:	bd80      	pop	{r7, pc}
    f492:	bf00      	nop

0000f494 <appReset>:

int appReset (void)
{
    f494:	b580      	push	{r7, lr}
    f496:	b092      	sub	sp, #72	; 0x48
    f498:	af02      	add	r7, sp, #8
    f49a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f49e:	f2c0 0302 	movt	r3, #2
    f4a2:	681b      	ldr	r3, [r3, #0]
    f4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	// Local variables 
    // ***************
	FMG_t_file_info xFileInfo;
	word usIdx;
	int iByteNbr=0, iRet;
    f4a6:	2300      	movs	r3, #0
    f4a8:	60bb      	str	r3, [r7, #8]
	
    // Create "app" table
	// ******************
	iRet = FMG_CreateFile(PARAM_DISK, (char*)zAppTab, FMG_VARIABLE_LENGTH, FMG_WITH_CKECKSUM);
    f4aa:	f243 205c 	movw	r0, #12892	; 0x325c
    f4ae:	f2c0 0002 	movt	r0, #2
    f4b2:	f243 2150 	movw	r1, #12880	; 0x3250
    f4b6:	f2c0 0102 	movt	r1, #2
    f4ba:	2201      	movs	r2, #1
    f4bc:	2301      	movs	r3, #1
    f4be:	f00d fb61 	bl	1cb84 <FMG_CreateFile>
    f4c2:	60f8      	str	r0, [r7, #12]
    CHECK((iRet==FMG_SUCCESS)||(iRet==FMG_FILE_ALREADY_EXIST), lblKO);
    f4c4:	68fb      	ldr	r3, [r7, #12]
    f4c6:	2b0a      	cmp	r3, #10
    f4c8:	d002      	beq.n	f4d0 <appReset+0x3c>
    f4ca:	68fb      	ldr	r3, [r7, #12]
    f4cc:	2b0c      	cmp	r3, #12
    f4ce:	d179      	bne.n	f5c4 <appReset+0x130>

    if (iRet==FMG_FILE_ALREADY_EXIST)                    // File already exist?
    f4d0:	68fb      	ldr	r3, [r7, #12]
    f4d2:	2b0c      	cmp	r3, #12
    f4d4:	d11d      	bne.n	f512 <appReset+0x7e>
    {
        iRet = FMG_DeleteFile(PARAM_DISK, (char*)zAppTab);
    f4d6:	f243 205c 	movw	r0, #12892	; 0x325c
    f4da:	f2c0 0002 	movt	r0, #2
    f4de:	f243 2150 	movw	r1, #12880	; 0x3250
    f4e2:	f2c0 0102 	movt	r1, #2
    f4e6:	f00d fc2f 	bl	1cd48 <FMG_DeleteFile>
    f4ea:	60f8      	str	r0, [r7, #12]
        CHECK(iRet==FMG_SUCCESS, lblKO);                 // Delete it
    f4ec:	68fb      	ldr	r3, [r7, #12]
    f4ee:	2b0a      	cmp	r3, #10
    f4f0:	d168      	bne.n	f5c4 <appReset+0x130>
    	iRet = FMG_CreateFile(PARAM_DISK, (char*)zAppTab, FMG_VARIABLE_LENGTH, FMG_WITH_CKECKSUM);
    f4f2:	f243 205c 	movw	r0, #12892	; 0x325c
    f4f6:	f2c0 0002 	movt	r0, #2
    f4fa:	f243 2150 	movw	r1, #12880	; 0x3250
    f4fe:	f2c0 0102 	movt	r1, #2
    f502:	2201      	movs	r2, #1
    f504:	2301      	movs	r3, #1
    f506:	f00d fb3d 	bl	1cb84 <FMG_CreateFile>
    f50a:	60f8      	str	r0, [r7, #12]
        CHECK(iRet==FMG_SUCCESS, lblKO);                 // Re-create it
    f50c:	68fb      	ldr	r3, [r7, #12]
    f50e:	2b0a      	cmp	r3, #10
    f510:	d158      	bne.n	f5c4 <appReset+0x130>
    }

	// Reset "app" table
	// *****************
	xFileInfo.eCreationType = FMGPathAndName;            // File type with Path and Name
    f512:	2300      	movs	r3, #0
    f514:	613b      	str	r3, [r7, #16]
    strcpy((char*)xFileInfo.ucFilePath, PARAM_DISK);     // \PARAMDISK
    f516:	f107 0310 	add.w	r3, r7, #16
    f51a:	3304      	adds	r3, #4
    f51c:	f243 225c 	movw	r2, #12892	; 0x325c
    f520:	f2c0 0202 	movt	r2, #2
    f524:	ca07      	ldmia	r2, {r0, r1, r2}
    f526:	c303      	stmia	r3!, {r0, r1}
    f528:	801a      	strh	r2, [r3, #0]
    strcpy((char*)xFileInfo.ucFileName, zAppTab);        // \appTab.par
    f52a:	f243 2350 	movw	r3, #12880	; 0x3250
    f52e:	f2c0 0302 	movt	r3, #2
    f532:	f107 0225 	add.w	r2, r7, #37	; 0x25
    f536:	cb03      	ldmia	r3!, {r0, r1}
    f538:	6010      	str	r0, [r2, #0]
    f53a:	6051      	str	r1, [r2, #4]
    f53c:	8819      	ldrh	r1, [r3, #0]
    f53e:	789b      	ldrb	r3, [r3, #2]
    f540:	8111      	strh	r1, [r2, #8]
    f542:	7293      	strb	r3, [r2, #10]
    for (usIdx=0; usIdx<appEnd-appBeg; usIdx++)          // Build "app" table with parameters filled with default value
    f544:	2300      	movs	r3, #0
    f546:	80fb      	strh	r3, [r7, #6]
    f548:	e036      	b.n	f5b8 <appReset+0x124>
	{
    	CHECK(tzApp[usIdx].usKey==usIdx+appBeg, lblKO);  // Check if it is the right key
    f54a:	88fa      	ldrh	r2, [r7, #6]
    f54c:	f243 1358 	movw	r3, #12632	; 0x3158
    f550:	f2c0 0302 	movt	r3, #2
    f554:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
    f558:	461a      	mov	r2, r3
    f55a:	88fb      	ldrh	r3, [r7, #6]
    f55c:	3301      	adds	r3, #1
    f55e:	429a      	cmp	r2, r3
    f560:	d130      	bne.n	f5c4 <appReset+0x130>

    	iByteNbr += (int)tzApp[usIdx].usLen;
    f562:	88fb      	ldrh	r3, [r7, #6]
    f564:	f243 1258 	movw	r2, #12632	; 0x3158
    f568:	f2c0 0202 	movt	r2, #2
    f56c:	00db      	lsls	r3, r3, #3
    f56e:	18d3      	adds	r3, r2, r3
    f570:	885b      	ldrh	r3, [r3, #2]
    f572:	68ba      	ldr	r2, [r7, #8]
    f574:	18d3      	adds	r3, r2, r3
    f576:	60bb      	str	r3, [r7, #8]
    	iRet = FMG_AddRecord(&xFileInfo, tzApp[usIdx].pvDefault, (long)tzApp[usIdx].usLen, FMGMiddle, usIdx);
    f578:	88fb      	ldrh	r3, [r7, #6]
    f57a:	f243 1258 	movw	r2, #12632	; 0x3158
    f57e:	f2c0 0202 	movt	r2, #2
    f582:	00db      	lsls	r3, r3, #3
    f584:	18d3      	adds	r3, r2, r3
    f586:	6859      	ldr	r1, [r3, #4]
    f588:	88fb      	ldrh	r3, [r7, #6]
    f58a:	f243 1258 	movw	r2, #12632	; 0x3158
    f58e:	f2c0 0202 	movt	r2, #2
    f592:	00db      	lsls	r3, r3, #3
    f594:	18d3      	adds	r3, r2, r3
    f596:	885b      	ldrh	r3, [r3, #2]
    f598:	88f8      	ldrh	r0, [r7, #6]
    f59a:	f107 0210 	add.w	r2, r7, #16
    f59e:	9000      	str	r0, [sp, #0]
    f5a0:	4610      	mov	r0, r2
    f5a2:	461a      	mov	r2, r3
    f5a4:	2301      	movs	r3, #1
    f5a6:	f00d ff73 	bl	1d490 <FMG_AddRecord>
    f5aa:	60f8      	str	r0, [r7, #12]
    	CHECK(iRet==FMG_SUCCESS, lblKO);
    f5ac:	68fb      	ldr	r3, [r7, #12]
    f5ae:	2b0a      	cmp	r3, #10
    f5b0:	d108      	bne.n	f5c4 <appReset+0x130>
	// Reset "app" table
	// *****************
	xFileInfo.eCreationType = FMGPathAndName;            // File type with Path and Name
    strcpy((char*)xFileInfo.ucFilePath, PARAM_DISK);     // \PARAMDISK
    strcpy((char*)xFileInfo.ucFileName, zAppTab);        // \appTab.par
    for (usIdx=0; usIdx<appEnd-appBeg; usIdx++)          // Build "app" table with parameters filled with default value
    f5b2:	88fb      	ldrh	r3, [r7, #6]
    f5b4:	3301      	adds	r3, #1
    f5b6:	80fb      	strh	r3, [r7, #6]
    f5b8:	88fb      	ldrh	r3, [r7, #6]
    f5ba:	2b1e      	cmp	r3, #30
    f5bc:	d9c5      	bls.n	f54a <appReset+0xb6>
    	iByteNbr += (int)tzApp[usIdx].usLen;
    	iRet = FMG_AddRecord(&xFileInfo, tzApp[usIdx].pvDefault, (long)tzApp[usIdx].usLen, FMGMiddle, usIdx);
    	CHECK(iRet==FMG_SUCCESS, lblKO);
	}

    iRet = iByteNbr;                                     // Size of bytes reseted
    f5be:	68bb      	ldr	r3, [r7, #8]
    f5c0:	60fb      	str	r3, [r7, #12]
	goto lblEnd;
    f5c2:	e003      	b.n	f5cc <appReset+0x138>

	// Errors treatment 
    // ****************
lblKO:                                                   // Initialization failed
	iRet=-1;
    f5c4:	f04f 33ff 	mov.w	r3, #4294967295
    f5c8:	60fb      	str	r3, [r7, #12]
	goto lblEnd;
    f5ca:	bf00      	nop
lblEnd:
    return iRet;
    f5cc:	68fb      	ldr	r3, [r7, #12]
}
    f5ce:	4618      	mov	r0, r3
    f5d0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f5d4:	f2c0 0302 	movt	r3, #2
    f5d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    f5da:	681b      	ldr	r3, [r3, #0]
    f5dc:	429a      	cmp	r2, r3
    f5de:	d001      	beq.n	f5e4 <appReset+0x150>
    f5e0:	f7f9 fce0 	bl	8fa4 <__stack_chk_fail>
    f5e4:	f107 0740 	add.w	r7, r7, #64	; 0x40
    f5e8:	46bd      	mov	sp, r7
    f5ea:	bd80      	pop	{r7, pc}

0000f5ec <appPut>:
//   >=0 : Storage done (size of bytes stored).
//   <0  : Storage failed (FMG failed).
//****************************************************************************

int appPut (word usKey, void *pvDat, word usLen)
{
    f5ec:	b580      	push	{r7, lr}
    f5ee:	b092      	sub	sp, #72	; 0x48
    f5f0:	af02      	add	r7, sp, #8
    f5f2:	6039      	str	r1, [r7, #0]
    f5f4:	4613      	mov	r3, r2
    f5f6:	4602      	mov	r2, r0
    f5f8:	80fa      	strh	r2, [r7, #6]
    f5fa:	80bb      	strh	r3, [r7, #4]
    f5fc:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f600:	f2c0 0302 	movt	r3, #2
    f604:	681b      	ldr	r3, [r3, #0]
    f606:	63fb      	str	r3, [r7, #60]	; 0x3c
	long lLength;
	int iRet;

	// Store parameter
	// ***************
	CHECK(tzApp[usKey-appBeg].usKey==usKey, lblKO);     // Check if it is the right key
    f608:	88fb      	ldrh	r3, [r7, #6]
    f60a:	1e5a      	subs	r2, r3, #1
    f60c:	f243 1358 	movw	r3, #12632	; 0x3158
    f610:	f2c0 0302 	movt	r3, #2
    f614:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
    f618:	88fa      	ldrh	r2, [r7, #6]
    f61a:	429a      	cmp	r2, r3
    f61c:	d13a      	bne.n	f694 <appPut+0xa8>
	
	lLength = (long)tzApp[usKey-appBeg].usLen;
    f61e:	88fb      	ldrh	r3, [r7, #6]
    f620:	3b01      	subs	r3, #1
    f622:	f243 1258 	movw	r2, #12632	; 0x3158
    f626:	f2c0 0202 	movt	r2, #2
    f62a:	00db      	lsls	r3, r3, #3
    f62c:	18d3      	adds	r3, r2, r3
    f62e:	885b      	ldrh	r3, [r3, #2]
    f630:	60bb      	str	r3, [r7, #8]
	if (lLength > usLen)
    f632:	88ba      	ldrh	r2, [r7, #4]
    f634:	68bb      	ldr	r3, [r7, #8]
    f636:	429a      	cmp	r2, r3
    f638:	da01      	bge.n	f63e <appPut+0x52>
		lLength = (long)usLen;
    f63a:	88bb      	ldrh	r3, [r7, #4]
    f63c:	60bb      	str	r3, [r7, #8]
	xFileInfo.eCreationType = FMGPathAndName;           // File type with Path and Name
    f63e:	2300      	movs	r3, #0
    f640:	613b      	str	r3, [r7, #16]
    strcpy((char*)xFileInfo.ucFilePath, PARAM_DISK);    // \PARAMDISK
    f642:	f107 0310 	add.w	r3, r7, #16
    f646:	3304      	adds	r3, #4
    f648:	f243 225c 	movw	r2, #12892	; 0x325c
    f64c:	f2c0 0202 	movt	r2, #2
    f650:	ca07      	ldmia	r2, {r0, r1, r2}
    f652:	c303      	stmia	r3!, {r0, r1}
    f654:	801a      	strh	r2, [r3, #0]
    strcpy((char*)xFileInfo.ucFileName, zAppTab);       // \appTab.par
    f656:	f243 2350 	movw	r3, #12880	; 0x3250
    f65a:	f2c0 0302 	movt	r3, #2
    f65e:	f107 0225 	add.w	r2, r7, #37	; 0x25
    f662:	cb03      	ldmia	r3!, {r0, r1}
    f664:	6010      	str	r0, [r2, #0]
    f666:	6051      	str	r1, [r2, #4]
    f668:	8819      	ldrh	r1, [r3, #0]
    f66a:	789b      	ldrb	r3, [r3, #2]
    f66c:	8111      	strh	r1, [r2, #8]
    f66e:	7293      	strb	r3, [r2, #10]
	iRet = FMG_ModifyRecord(&xFileInfo, pvDat, lLength, FMGMiddle, usKey-appBeg);
    f670:	88fb      	ldrh	r3, [r7, #6]
    f672:	1e5a      	subs	r2, r3, #1
    f674:	f107 0310 	add.w	r3, r7, #16
    f678:	9200      	str	r2, [sp, #0]
    f67a:	4618      	mov	r0, r3
    f67c:	6839      	ldr	r1, [r7, #0]
    f67e:	68ba      	ldr	r2, [r7, #8]
    f680:	2301      	movs	r3, #1
    f682:	f00e f891 	bl	1d7a8 <FMG_ModifyRecord>
    f686:	60f8      	str	r0, [r7, #12]
	CHECK(iRet==FMG_SUCCESS, lblKO);                    // Store the parameter related to this key
    f688:	68fb      	ldr	r3, [r7, #12]
    f68a:	2b0a      	cmp	r3, #10
    f68c:	d102      	bne.n	f694 <appPut+0xa8>

	iRet = (int)lLength;                                // Size of bytes stored.
    f68e:	68bb      	ldr	r3, [r7, #8]
    f690:	60fb      	str	r3, [r7, #12]
	goto lblEnd;
    f692:	e003      	b.n	f69c <appPut+0xb0>

	// Errors treatment 
    // ****************
lblKO:                                                  // Storage parameter failed
    iRet=-1;
    f694:	f04f 33ff 	mov.w	r3, #4294967295
    f698:	60fb      	str	r3, [r7, #12]
    goto lblEnd;
    f69a:	bf00      	nop
lblEnd:
    return iRet;
    f69c:	68fb      	ldr	r3, [r7, #12]
}
    f69e:	4618      	mov	r0, r3
    f6a0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f6a4:	f2c0 0302 	movt	r3, #2
    f6a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    f6aa:	681b      	ldr	r3, [r3, #0]
    f6ac:	429a      	cmp	r2, r3
    f6ae:	d001      	beq.n	f6b4 <appPut+0xc8>
    f6b0:	f7f9 fc78 	bl	8fa4 <__stack_chk_fail>
    f6b4:	f107 0740 	add.w	r7, r7, #64	; 0x40
    f6b8:	46bd      	mov	sp, r7
    f6ba:	bd80      	pop	{r7, pc}

0000f6bc <appGet>:
//   >=0 : Retrieve done (size of bytes retrieved)
//   <0  : Retrieve failed (FMG failed)
//****************************************************************************

int appGet (word usKey, void *pvDat, word usLen)
{
    f6bc:	b580      	push	{r7, lr}
    f6be:	b092      	sub	sp, #72	; 0x48
    f6c0:	af02      	add	r7, sp, #8
    f6c2:	6039      	str	r1, [r7, #0]
    f6c4:	4613      	mov	r3, r2
    f6c6:	4602      	mov	r2, r0
    f6c8:	80fa      	strh	r2, [r7, #6]
    f6ca:	80bb      	strh	r3, [r7, #4]
    f6cc:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f6d0:	f2c0 0302 	movt	r3, #2
    f6d4:	681b      	ldr	r3, [r3, #0]
    f6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	long lLength;
	int iRet;

	// Retrieve parameter
	// ******************
	CHECK(tzApp[usKey-appBeg].usKey==usKey, lblKO);
    f6d8:	88fb      	ldrh	r3, [r7, #6]
    f6da:	1e5a      	subs	r2, r3, #1
    f6dc:	f243 1358 	movw	r3, #12632	; 0x3158
    f6e0:	f2c0 0302 	movt	r3, #2
    f6e4:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
    f6e8:	88fa      	ldrh	r2, [r7, #6]
    f6ea:	429a      	cmp	r2, r3
    f6ec:	d142      	bne.n	f774 <appGet+0xb8>

	memset(pvDat, 0, usLen);
    f6ee:	88bb      	ldrh	r3, [r7, #4]
    f6f0:	6838      	ldr	r0, [r7, #0]
    f6f2:	2100      	movs	r1, #0
    f6f4:	461a      	mov	r2, r3
    f6f6:	f7f9 ea62 	blx	8bbc <_init+0x5c>
    lLength = (long) tzApp[usKey-appBeg].usLen;
    f6fa:	88fb      	ldrh	r3, [r7, #6]
    f6fc:	3b01      	subs	r3, #1
    f6fe:	f243 1258 	movw	r2, #12632	; 0x3158
    f702:	f2c0 0202 	movt	r2, #2
    f706:	00db      	lsls	r3, r3, #3
    f708:	18d3      	adds	r3, r2, r3
    f70a:	885b      	ldrh	r3, [r3, #2]
    f70c:	60bb      	str	r3, [r7, #8]
    if (lLength > usLen)
    f70e:	88ba      	ldrh	r2, [r7, #4]
    f710:	68bb      	ldr	r3, [r7, #8]
    f712:	429a      	cmp	r2, r3
    f714:	da01      	bge.n	f71a <appGet+0x5e>
    	lLength = (long)usLen;
    f716:	88bb      	ldrh	r3, [r7, #4]
    f718:	60bb      	str	r3, [r7, #8]
	xFileInfo.eCreationType = FMGPathAndName;            // File type with Path and Name
    f71a:	2300      	movs	r3, #0
    f71c:	613b      	str	r3, [r7, #16]
    strcpy((char*)xFileInfo.ucFilePath, PARAM_DISK);     // \PARAMDISK
    f71e:	f107 0310 	add.w	r3, r7, #16
    f722:	3304      	adds	r3, #4
    f724:	f243 225c 	movw	r2, #12892	; 0x325c
    f728:	f2c0 0202 	movt	r2, #2
    f72c:	ca07      	ldmia	r2, {r0, r1, r2}
    f72e:	c303      	stmia	r3!, {r0, r1}
    f730:	801a      	strh	r2, [r3, #0]
    strcpy((char*)xFileInfo.ucFileName, zAppTab);        // \appTab.par
    f732:	f243 2350 	movw	r3, #12880	; 0x3250
    f736:	f2c0 0302 	movt	r3, #2
    f73a:	f107 0225 	add.w	r2, r7, #37	; 0x25
    f73e:	cb03      	ldmia	r3!, {r0, r1}
    f740:	6010      	str	r0, [r2, #0]
    f742:	6051      	str	r1, [r2, #4]
    f744:	8819      	ldrh	r1, [r3, #0]
    f746:	789b      	ldrb	r3, [r3, #2]
    f748:	8111      	strh	r1, [r2, #8]
    f74a:	7293      	strb	r3, [r2, #10]
	iRet = FMG_ReadRecord(&xFileInfo, pvDat, &lLength, FMGMiddle, usKey-appBeg);
    f74c:	88fb      	ldrh	r3, [r7, #6]
    f74e:	1e59      	subs	r1, r3, #1
    f750:	f107 0210 	add.w	r2, r7, #16
    f754:	f107 0308 	add.w	r3, r7, #8
    f758:	9100      	str	r1, [sp, #0]
    f75a:	4610      	mov	r0, r2
    f75c:	6839      	ldr	r1, [r7, #0]
    f75e:	461a      	mov	r2, r3
    f760:	2301      	movs	r3, #1
    f762:	f00e f9c7 	bl	1daf4 <FMG_ReadRecord>
    f766:	60f8      	str	r0, [r7, #12]
	CHECK(iRet==FMG_SUCCESS, lblKO);	                 // Retrieve the parameter related to this key
    f768:	68fb      	ldr	r3, [r7, #12]
    f76a:	2b0a      	cmp	r3, #10
    f76c:	d102      	bne.n	f774 <appGet+0xb8>

	iRet = (int)lLength;                                 // Size of bytes retrieved.
    f76e:	68bb      	ldr	r3, [r7, #8]
    f770:	60fb      	str	r3, [r7, #12]
	goto lblEnd;
    f772:	e003      	b.n	f77c <appGet+0xc0>

	// Errors treatment 
    // ****************
lblKO:                                                   // Retrieve parameter failed
    iRet=-1;
    f774:	f04f 33ff 	mov.w	r3, #4294967295
    f778:	60fb      	str	r3, [r7, #12]
    goto lblEnd;
    f77a:	bf00      	nop
lblEnd:
    return iRet;
    f77c:	68fb      	ldr	r3, [r7, #12]
}
    f77e:	4618      	mov	r0, r3
    f780:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f784:	f2c0 0302 	movt	r3, #2
    f788:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    f78a:	681b      	ldr	r3, [r3, #0]
    f78c:	429a      	cmp	r2, r3
    f78e:	d001      	beq.n	f794 <appGet+0xd8>
    f790:	f7f9 fc08 	bl	8fa4 <__stack_chk_fail>
    f794:	f107 0740 	add.w	r7, r7, #64	; 0x40
    f798:	46bd      	mov	sp, r7
    f79a:	bd80      	pop	{r7, pc}

0000f79c <FMGCreateBatch>:
//  This function has no parameters.
//  This function has no return value.                                      
//****************************************************************************

void FMGCreateBatch(void)
{
    f79c:	b590      	push	{r4, r7, lr}
    f79e:	b085      	sub	sp, #20
    f7a0:	af02      	add	r7, sp, #8
    f7a2:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f7a6:	f2c0 0302 	movt	r3, #2
    f7aa:	681b      	ldr	r3, [r3, #0]
    f7ac:	607b      	str	r3, [r7, #4]
    // ***************
    int iRet;

	// FMG0161 Disk + BATCH File creation
    // **********************************
    iRet = FMG_CreateFileType(FMGBatch, FMG_VARIABLE_LENGTH, FMG_WITH_CKECKSUM); 
    f7ae:	2000      	movs	r0, #0
    f7b0:	2101      	movs	r1, #1
    f7b2:	2201      	movs	r2, #1
    f7b4:	f00d fb38 	bl	1ce28 <FMG_CreateFileType>
    f7b8:	6038      	str	r0, [r7, #0]
    CHECK((iRet==FMG_SUCCESS)||(iRet==FMG_FILE_ALREADY_EXIST), lblFmgKO);
    f7ba:	683b      	ldr	r3, [r7, #0]
    f7bc:	2b0a      	cmp	r3, #10
    f7be:	d002      	beq.n	f7c6 <FMGCreateBatch+0x2a>
    f7c0:	683b      	ldr	r3, [r7, #0]
    f7c2:	2b0c      	cmp	r3, #12
    f7c4:	d148      	bne.n	f858 <FMGCreateBatch+0xbc>
	
    if (iRet == FMG_SUCCESS)
    f7c6:	683b      	ldr	r3, [r7, #0]
    f7c8:	2b0a      	cmp	r3, #10
    f7ca:	d131      	bne.n	f830 <FMGCreateBatch+0x94>
    {
    	xFileInfo.eCreationType = FMGFileType;    // Creation file => File Type
    f7cc:	f64f 7340 	movw	r3, #65344	; 0xff40
    f7d0:	f2c0 0302 	movt	r3, #2
    f7d4:	2201      	movs	r2, #1
    f7d6:	601a      	str	r2, [r3, #0]
        xFileInfo.eFileType = FMGBatch;           // File Type = BATCH file
    f7d8:	f64f 7340 	movw	r3, #65344	; 0xff40
    f7dc:	f2c0 0302 	movt	r3, #2
    f7e0:	2200      	movs	r2, #0
    f7e2:	629a      	str	r2, [r3, #40]	; 0x28
    	iRet = FMG_AddRecord(&xFileInfo, (void*) &zBatch.iBatIdx, sizeof(int), FMGBegin, 0);
    f7e4:	2300      	movs	r3, #0
    f7e6:	9300      	str	r3, [sp, #0]
    f7e8:	f64f 7040 	movw	r0, #65344	; 0xff40
    f7ec:	f2c0 0002 	movt	r0, #2
    f7f0:	f643 11cc 	movw	r1, #14796	; 0x39cc
    f7f4:	f2c0 0102 	movt	r1, #2
    f7f8:	2204      	movs	r2, #4
    f7fa:	2300      	movs	r3, #0
    f7fc:	f00d fe48 	bl	1d490 <FMG_AddRecord>
    f800:	6038      	str	r0, [r7, #0]
    	CHECK(iRet==FMG_SUCCESS, lblFmgKO);
    f802:	683b      	ldr	r3, [r7, #0]
    f804:	2b0a      	cmp	r3, #10
    f806:	d127      	bne.n	f858 <FMGCreateBatch+0xbc>
    	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Batch Created", GL_ICON_INFORMATION, GL_BUTTON_VALID, 3*1000);
    f808:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    f80c:	f2c0 0302 	movt	r3, #2
    f810:	681b      	ldr	r3, [r3, #0]
    f812:	2201      	movs	r2, #1
    f814:	9200      	str	r2, [sp, #0]
    f816:	f640 32b8 	movw	r2, #3000	; 0xbb8
    f81a:	9201      	str	r2, [sp, #4]
    f81c:	4618      	mov	r0, r3
    f81e:	2100      	movs	r1, #0
    f820:	f643 4250 	movw	r2, #15440	; 0x3c50
    f824:	f2c0 0202 	movt	r2, #2
    f828:	2302      	movs	r3, #2
    f82a:	f011 fe7b 	bl	21524 <GL_Dialog_Message>
    }
    else
    	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Batch\nAlready Created", GL_ICON_WARNING, GL_BUTTON_VALID, 3*1000);

    goto lblEnd;
    f82e:	e028      	b.n	f882 <FMGCreateBatch+0xe6>
    	iRet = FMG_AddRecord(&xFileInfo, (void*) &zBatch.iBatIdx, sizeof(int), FMGBegin, 0);
    	CHECK(iRet==FMG_SUCCESS, lblFmgKO);
    	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Batch Created", GL_ICON_INFORMATION, GL_BUTTON_VALID, 3*1000);
    }
    else
    	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Batch\nAlready Created", GL_ICON_WARNING, GL_BUTTON_VALID, 3*1000);
    f830:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    f834:	f2c0 0302 	movt	r3, #2
    f838:	681b      	ldr	r3, [r3, #0]
    f83a:	2201      	movs	r2, #1
    f83c:	9200      	str	r2, [sp, #0]
    f83e:	f640 32b8 	movw	r2, #3000	; 0xbb8
    f842:	9201      	str	r2, [sp, #4]
    f844:	4618      	mov	r0, r3
    f846:	2100      	movs	r1, #0
    f848:	f643 4260 	movw	r2, #15456	; 0x3c60
    f84c:	f2c0 0202 	movt	r2, #2
    f850:	2303      	movs	r3, #3
    f852:	f011 fe67 	bl	21524 <GL_Dialog_Message>

    goto lblEnd;
    f856:	e014      	b.n	f882 <FMGCreateBatch+0xe6>
    
	// Errors treatment 
    // ****************
lblFmgKO:                                         // File Management error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, FMG_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
    f858:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    f85c:	f2c0 0302 	movt	r3, #2
    f860:	681c      	ldr	r4, [r3, #0]
    f862:	6838      	ldr	r0, [r7, #0]
    f864:	f000 fcc4 	bl	101f0 <FMG_ErrorMsg>
    f868:	4603      	mov	r3, r0
    f86a:	2201      	movs	r2, #1
    f86c:	9200      	str	r2, [sp, #0]
    f86e:	f241 3288 	movw	r2, #5000	; 0x1388
    f872:	9201      	str	r2, [sp, #4]
    f874:	4620      	mov	r0, r4
    f876:	2100      	movs	r1, #0
    f878:	461a      	mov	r2, r3
    f87a:	2304      	movs	r3, #4
    f87c:	f011 fe52 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
    f880:	bf00      	nop
lblEnd:
	return;
    f882:	bf00      	nop
}
    f884:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f888:	f2c0 0302 	movt	r3, #2
    f88c:	687a      	ldr	r2, [r7, #4]
    f88e:	681b      	ldr	r3, [r3, #0]
    f890:	429a      	cmp	r2, r3
    f892:	d001      	beq.n	f898 <FMGCreateBatch+0xfc>
    f894:	f7f9 fb86 	bl	8fa4 <__stack_chk_fail>
    f898:	f107 070c 	add.w	r7, r7, #12
    f89c:	46bd      	mov	sp, r7
    f89e:	bd90      	pop	{r4, r7, pc}

0000f8a0 <FMGDeleteBatch>:
//  This function has no parameters.
//  This function has no return value.                                      
//****************************************************************************

void FMGDeleteBatch(void)
{
    f8a0:	b590      	push	{r4, r7, lr}
    f8a2:	b085      	sub	sp, #20
    f8a4:	af02      	add	r7, sp, #8
    f8a6:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f8aa:	f2c0 0302 	movt	r3, #2
    f8ae:	681b      	ldr	r3, [r3, #0]
    f8b0:	607b      	str	r3, [r7, #4]
    // ***************
    int iRet;

    // BATCH File deletion
    // *******************
    iRet = FMG_DeleteFileType(FMGBatch); 
    f8b2:	2000      	movs	r0, #0
    f8b4:	f00d fbca 	bl	1d04c <FMG_DeleteFileType>
    f8b8:	6038      	str	r0, [r7, #0]
    CHECK(iRet==FMG_SUCCESS, lblFmgKO);
    f8ba:	683b      	ldr	r3, [r7, #0]
    f8bc:	2b0a      	cmp	r3, #10
    f8be:	d113      	bne.n	f8e8 <FMGDeleteBatch+0x48>
    GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Batch Deleted", GL_ICON_INFORMATION, GL_BUTTON_VALID, 3*1000);
    f8c0:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    f8c4:	f2c0 0302 	movt	r3, #2
    f8c8:	681b      	ldr	r3, [r3, #0]
    f8ca:	2201      	movs	r2, #1
    f8cc:	9200      	str	r2, [sp, #0]
    f8ce:	f640 32b8 	movw	r2, #3000	; 0xbb8
    f8d2:	9201      	str	r2, [sp, #4]
    f8d4:	4618      	mov	r0, r3
    f8d6:	2100      	movs	r1, #0
    f8d8:	f643 4278 	movw	r2, #15480	; 0x3c78
    f8dc:	f2c0 0202 	movt	r2, #2
    f8e0:	2302      	movs	r3, #2
    f8e2:	f011 fe1f 	bl	21524 <GL_Dialog_Message>

    goto lblEnd;
    f8e6:	e02b      	b.n	f940 <FMGDeleteBatch+0xa0>
    
	// Errors treatment 
    // ****************
lblFmgKO:                                 // File Management error
	if (iRet == FMG_FILE_DOES_NOT_EXIST)
    f8e8:	683b      	ldr	r3, [r7, #0]
    f8ea:	2b0b      	cmp	r3, #11
    f8ec:	d113      	bne.n	f916 <FMGDeleteBatch+0x76>
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Batch\nAlready Deleted", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
    f8ee:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    f8f2:	f2c0 0302 	movt	r3, #2
    f8f6:	681b      	ldr	r3, [r3, #0]
    f8f8:	2201      	movs	r2, #1
    f8fa:	9200      	str	r2, [sp, #0]
    f8fc:	f241 3288 	movw	r2, #5000	; 0x1388
    f900:	9201      	str	r2, [sp, #4]
    f902:	4618      	mov	r0, r3
    f904:	2100      	movs	r1, #0
    f906:	f643 4288 	movw	r2, #15496	; 0x3c88
    f90a:	f2c0 0202 	movt	r2, #2
    f90e:	2304      	movs	r3, #4
    f910:	f011 fe08 	bl	21524 <GL_Dialog_Message>
	else
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, FMG_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
	goto lblEnd;
    f914:	e013      	b.n	f93e <FMGDeleteBatch+0x9e>
    // ****************
lblFmgKO:                                 // File Management error
	if (iRet == FMG_FILE_DOES_NOT_EXIST)
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Batch\nAlready Deleted", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
	else
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, FMG_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
    f916:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    f91a:	f2c0 0302 	movt	r3, #2
    f91e:	681c      	ldr	r4, [r3, #0]
    f920:	6838      	ldr	r0, [r7, #0]
    f922:	f000 fc65 	bl	101f0 <FMG_ErrorMsg>
    f926:	4603      	mov	r3, r0
    f928:	2201      	movs	r2, #1
    f92a:	9200      	str	r2, [sp, #0]
    f92c:	f241 3288 	movw	r2, #5000	; 0x1388
    f930:	9201      	str	r2, [sp, #4]
    f932:	4620      	mov	r0, r4
    f934:	2100      	movs	r1, #0
    f936:	461a      	mov	r2, r3
    f938:	2304      	movs	r3, #4
    f93a:	f011 fdf3 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
    f93e:	bf00      	nop
lblEnd:
	return;
    f940:	bf00      	nop
}
    f942:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f946:	f2c0 0302 	movt	r3, #2
    f94a:	687a      	ldr	r2, [r7, #4]
    f94c:	681b      	ldr	r3, [r3, #0]
    f94e:	429a      	cmp	r2, r3
    f950:	d001      	beq.n	f956 <FMGDeleteBatch+0xb6>
    f952:	f7f9 fb27 	bl	8fa4 <__stack_chk_fail>
    f956:	f107 070c 	add.w	r7, r7, #12
    f95a:	46bd      	mov	sp, r7
    f95c:	bd90      	pop	{r4, r7, pc}
    f95e:	bf00      	nop

0000f960 <GetBatchIdx>:
//    >=0 : Return transaction's index.
//    <0  : Batch error.
//****************************************************************************

static int GetBatchIdx(void)
{
    f960:	b580      	push	{r7, lr}
    f962:	b086      	sub	sp, #24
    f964:	af02      	add	r7, sp, #8
    f966:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f96a:	f2c0 0302 	movt	r3, #2
    f96e:	681b      	ldr	r3, [r3, #0]
    f970:	60fb      	str	r3, [r7, #12]
	long lLength;
    int iRet, iBatchIdx;
	
    // Retrieve Idx from BATCH file
    // ****************************
    lLength = sizeof(int);    
    f972:	2304      	movs	r3, #4
    f974:	603b      	str	r3, [r7, #0]
	xFileInfo.eCreationType = FMGFileType;  // Creation file => File Type
    f976:	f64f 7340 	movw	r3, #65344	; 0xff40
    f97a:	f2c0 0302 	movt	r3, #2
    f97e:	2201      	movs	r2, #1
    f980:	601a      	str	r2, [r3, #0]
    xFileInfo.eFileType = FMGBatch;         // File Type = BATCH file
    f982:	f64f 7340 	movw	r3, #65344	; 0xff40
    f986:	f2c0 0302 	movt	r3, #2
    f98a:	2200      	movs	r2, #0
    f98c:	629a      	str	r2, [r3, #40]	; 0x28
    iRet = FMG_ReadRecord(&xFileInfo, &iBatchIdx, &lLength, FMGBegin, 0);
    f98e:	1d3a      	adds	r2, r7, #4
    f990:	463b      	mov	r3, r7
    f992:	2100      	movs	r1, #0
    f994:	9100      	str	r1, [sp, #0]
    f996:	f64f 7040 	movw	r0, #65344	; 0xff40
    f99a:	f2c0 0002 	movt	r0, #2
    f99e:	4611      	mov	r1, r2
    f9a0:	461a      	mov	r2, r3
    f9a2:	2300      	movs	r3, #0
    f9a4:	f00e f8a6 	bl	1daf4 <FMG_ReadRecord>
    f9a8:	60b8      	str	r0, [r7, #8]
	if (iRet == FMG_SUCCESS)
    f9aa:	68bb      	ldr	r3, [r7, #8]
    f9ac:	2b0a      	cmp	r3, #10
    f9ae:	d102      	bne.n	f9b6 <GetBatchIdx+0x56>
		iRet = iBatchIdx;                   // Read Batch Index (Transactions available)
    f9b0:	687b      	ldr	r3, [r7, #4]
    f9b2:	60bb      	str	r3, [r7, #8]
    f9b4:	e008      	b.n	f9c8 <GetBatchIdx+0x68>
	else if (iRet == FMG_READ_RECORD_ERROR)
    f9b6:	68bb      	ldr	r3, [r7, #8]
    f9b8:	2b19      	cmp	r3, #25
    f9ba:	d102      	bne.n	f9c2 <GetBatchIdx+0x62>
		iRet = 0;                           // Reset Batch Index (No transaction)
    f9bc:	2300      	movs	r3, #0
    f9be:	60bb      	str	r3, [r7, #8]
    f9c0:	e002      	b.n	f9c8 <GetBatchIdx+0x68>
	else
		iRet = -1;                          // Batch error
    f9c2:	f04f 33ff 	mov.w	r3, #4294967295
    f9c6:	60bb      	str	r3, [r7, #8]
	
    return iRet;
    f9c8:	68bb      	ldr	r3, [r7, #8]
}
    f9ca:	4618      	mov	r0, r3
    f9cc:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f9d0:	f2c0 0302 	movt	r3, #2
    f9d4:	68fa      	ldr	r2, [r7, #12]
    f9d6:	681b      	ldr	r3, [r3, #0]
    f9d8:	429a      	cmp	r2, r3
    f9da:	d001      	beq.n	f9e0 <GetBatchIdx+0x80>
    f9dc:	f7f9 fae2 	bl	8fa4 <__stack_chk_fail>
    f9e0:	f107 0710 	add.w	r7, r7, #16
    f9e4:	46bd      	mov	sp, r7
    f9e6:	bd80      	pop	{r7, pc}

0000f9e8 <SetBatchIdx>:
//    FMG_SUCCESS : Transaction's index updated.
//    Others  : Batch error.
//****************************************************************************

static int SetBatchIdx(int iBatchIdx)
{
    f9e8:	b580      	push	{r7, lr}
    f9ea:	b086      	sub	sp, #24
    f9ec:	af02      	add	r7, sp, #8
    f9ee:	6078      	str	r0, [r7, #4]
    f9f0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    f9f4:	f2c0 0302 	movt	r3, #2
    f9f8:	681b      	ldr	r3, [r3, #0]
    f9fa:	60fb      	str	r3, [r7, #12]
    // ***************
	int iRet;
	
	// Update and store Idx into BATCH file
	// ************************************
	xFileInfo.eCreationType = FMGFileType;  // Creation file => File Type
    f9fc:	f64f 7340 	movw	r3, #65344	; 0xff40
    fa00:	f2c0 0302 	movt	r3, #2
    fa04:	2201      	movs	r2, #1
    fa06:	601a      	str	r2, [r3, #0]
    xFileInfo.eFileType = FMGBatch;         // File Type = BATCH file
    fa08:	f64f 7340 	movw	r3, #65344	; 0xff40
    fa0c:	f2c0 0302 	movt	r3, #2
    fa10:	2200      	movs	r2, #0
    fa12:	629a      	str	r2, [r3, #40]	; 0x28
	iRet = FMG_ModifyRecord(&xFileInfo, &iBatchIdx, sizeof(int), FMGBegin, 0);	        	
    fa14:	1d3b      	adds	r3, r7, #4
    fa16:	2200      	movs	r2, #0
    fa18:	9200      	str	r2, [sp, #0]
    fa1a:	f64f 7040 	movw	r0, #65344	; 0xff40
    fa1e:	f2c0 0002 	movt	r0, #2
    fa22:	4619      	mov	r1, r3
    fa24:	2204      	movs	r2, #4
    fa26:	2300      	movs	r3, #0
    fa28:	f00d febe 	bl	1d7a8 <FMG_ModifyRecord>
    fa2c:	60b8      	str	r0, [r7, #8]
	if (iRet == FMG_READ_RECORD_ERROR)      // No more first record
    fa2e:	68bb      	ldr	r3, [r7, #8]
    fa30:	2b19      	cmp	r3, #25
    fa32:	d101      	bne.n	fa38 <SetBatchIdx+0x50>
		iRet = FMG_SUCCESS;                                                                        
    fa34:	230a      	movs	r3, #10
    fa36:	60bb      	str	r3, [r7, #8]
	
    return iRet;
    fa38:	68bb      	ldr	r3, [r7, #8]
}
    fa3a:	4618      	mov	r0, r3
    fa3c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    fa40:	f2c0 0302 	movt	r3, #2
    fa44:	68fa      	ldr	r2, [r7, #12]
    fa46:	681b      	ldr	r3, [r3, #0]
    fa48:	429a      	cmp	r2, r3
    fa4a:	d001      	beq.n	fa50 <SetBatchIdx+0x68>
    fa4c:	f7f9 faaa 	bl	8fa4 <__stack_chk_fail>
    fa50:	f107 0710 	add.w	r7, r7, #16
    fa54:	46bd      	mov	sp, r7
    fa56:	bd80      	pop	{r7, pc}

0000fa58 <FMGAddDelTransactions>:
//  This function has no parameters.
//  This function has no return value.                                      
//****************************************************************************

void FMGAddDelTransactions(void) 
{
    fa58:	b590      	push	{r4, r7, lr}
    fa5a:	b095      	sub	sp, #84	; 0x54
    fa5c:	af02      	add	r7, sp, #8
    fa5e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    fa62:	f2c0 0302 	movt	r3, #2
    fa66:	681b      	ldr	r3, [r3, #0]
    fa68:	647b      	str	r3, [r7, #68]	; 0x44
	// Local variables 
    // ***************
	T_GL_HWIDGET hScreen=NULL;
    fa6a:	2300      	movs	r3, #0
    fa6c:	603b      	str	r3, [r7, #0]
	char tcDisplay[50+1];
    int iKey, iRet, iBatchIdx;

    // Batch management
	// ****************
	hScreen = GoalCreateScreen(gGoalGraphicLibInstance, txBatch, NUMBER_OF_LINES(txBatch), GL_ENCODING_UTF8);
    fa6e:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    fa72:	f2c0 0302 	movt	r3, #2
    fa76:	681b      	ldr	r3, [r3, #0]
    fa78:	4618      	mov	r0, r3
    fa7a:	f243 2168 	movw	r1, #12904	; 0x3268
    fa7e:	f2c0 0102 	movt	r1, #2
    fa82:	2204      	movs	r2, #4
    fa84:	2300      	movs	r3, #0
    fa86:	f7fd fafd 	bl	d084 <GoalCreateScreen>
    fa8a:	4603      	mov	r3, r0
    fa8c:	603b      	str	r3, [r7, #0]
	CHECK(hScreen!=NULL, lblKO);                                           // Create screen and clear it
    fa8e:	683b      	ldr	r3, [r7, #0]
    fa90:	2b00      	cmp	r3, #0
    fa92:	f000 8194 	beq.w	fdbe <FMGAddDelTransactions+0x366>
	iRet = GoalClrScreen(hScreen, GL_COLOR_BLACK, KEY_CANCEL | KEY_DOWN | KEY_UP, false);
    fa96:	683b      	ldr	r3, [r7, #0]
    fa98:	4618      	mov	r0, r3
    fa9a:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    fa9e:	220e      	movs	r2, #14
    faa0:	2300      	movs	r3, #0
    faa2:	f7fd fc8d 	bl	d3c0 <GoalClrScreen>
    faa6:	6078      	str	r0, [r7, #4]
	CHECK(iRet>=0, lblKO);
    faa8:	687b      	ldr	r3, [r7, #4]
    faaa:	2b00      	cmp	r3, #0
    faac:	f2c0 8187 	blt.w	fdbe <FMGAddDelTransactions+0x366>

	iBatchIdx = GetBatchIdx();                                             // Read Batch Index
    fab0:	f7ff ff56 	bl	f960 <GetBatchIdx>
    fab4:	60b8      	str	r0, [r7, #8]
	CHECK(iBatchIdx>=0, lblKO);
    fab6:	68bb      	ldr	r3, [r7, #8]
    fab8:	2b00      	cmp	r3, #0
    faba:	f2c0 8180 	blt.w	fdbe <FMGAddDelTransactions+0x366>

    iRet = GoalDspLine(hScreen, 0, "Up to add", &txBatch[0], 0, false);    // Show press up to add transaction
    fabe:	683b      	ldr	r3, [r7, #0]
    fac0:	2200      	movs	r2, #0
    fac2:	9200      	str	r2, [sp, #0]
    fac4:	2200      	movs	r2, #0
    fac6:	9201      	str	r2, [sp, #4]
    fac8:	4618      	mov	r0, r3
    faca:	2100      	movs	r1, #0
    facc:	f643 42a0 	movw	r2, #15520	; 0x3ca0
    fad0:	f2c0 0202 	movt	r2, #2
    fad4:	f243 2368 	movw	r3, #12904	; 0x3268
    fad8:	f2c0 0302 	movt	r3, #2
    fadc:	f7fd fd8a 	bl	d5f4 <GoalDspLine>
    fae0:	6078      	str	r0, [r7, #4]
	CHECK(iRet>=0, lblKO);                                                 // Show transaction remaining
    fae2:	687b      	ldr	r3, [r7, #4]
    fae4:	2b00      	cmp	r3, #0
    fae6:	f2c0 816a 	blt.w	fdbe <FMGAddDelTransactions+0x366>
    sprintf(tcDisplay, "%d Transaction(s)", iBatchIdx);
    faea:	f107 0310 	add.w	r3, r7, #16
    faee:	4618      	mov	r0, r3
    faf0:	f643 41ac 	movw	r1, #15532	; 0x3cac
    faf4:	f2c0 0102 	movt	r1, #2
    faf8:	68ba      	ldr	r2, [r7, #8]
    fafa:	f7f9 e8dc 	blx	8cb4 <_init+0x154>
	iRet = GoalDspLine(hScreen, 2, "", &txBatch[2], 0, false);
    fafe:	683b      	ldr	r3, [r7, #0]
    fb00:	2200      	movs	r2, #0
    fb02:	9200      	str	r2, [sp, #0]
    fb04:	2200      	movs	r2, #0
    fb06:	9201      	str	r2, [sp, #4]
    fb08:	4618      	mov	r0, r3
    fb0a:	2102      	movs	r1, #2
    fb0c:	f643 42c0 	movw	r2, #15552	; 0x3cc0
    fb10:	f2c0 0202 	movt	r2, #2
    fb14:	4bb4      	ldr	r3, [pc, #720]	; (fde8 <FMGAddDelTransactions+0x390>)
    fb16:	f7fd fd6d 	bl	d5f4 <GoalDspLine>
    fb1a:	6078      	str	r0, [r7, #4]
	CHECK(iRet>=0, lblKO);
    fb1c:	687b      	ldr	r3, [r7, #4]
    fb1e:	2b00      	cmp	r3, #0
    fb20:	f2c0 814d 	blt.w	fdbe <FMGAddDelTransactions+0x366>
	if (iBatchIdx == 0)
    fb24:	68bb      	ldr	r3, [r7, #8]
    fb26:	2b00      	cmp	r3, #0
    fb28:	d119      	bne.n	fb5e <FMGAddDelTransactions+0x106>
	{
	    memset(tcDisplay, 0, sizeof(tcDisplay));
    fb2a:	f107 0310 	add.w	r3, r7, #16
    fb2e:	4618      	mov	r0, r3
    fb30:	2100      	movs	r1, #0
    fb32:	2233      	movs	r2, #51	; 0x33
    fb34:	f7f9 e842 	blx	8bbc <_init+0x5c>
		iRet = GoalDspLine(hScreen, 2, "Batch Empty !!!", &txBatch[2], 0, false);
    fb38:	683b      	ldr	r3, [r7, #0]
    fb3a:	2200      	movs	r2, #0
    fb3c:	9200      	str	r2, [sp, #0]
    fb3e:	2200      	movs	r2, #0
    fb40:	9201      	str	r2, [sp, #4]
    fb42:	4618      	mov	r0, r3
    fb44:	2102      	movs	r1, #2
    fb46:	f643 42c4 	movw	r2, #15556	; 0x3cc4
    fb4a:	f2c0 0202 	movt	r2, #2
    fb4e:	4ba6      	ldr	r3, [pc, #664]	; (fde8 <FMGAddDelTransactions+0x390>)
    fb50:	f7fd fd50 	bl	d5f4 <GoalDspLine>
    fb54:	6078      	str	r0, [r7, #4]
		CHECK(iRet>=0, lblKO);                                             // Warm message = Batch empty
    fb56:	687b      	ldr	r3, [r7, #4]
    fb58:	2b00      	cmp	r3, #0
    fb5a:	f2c0 8130 	blt.w	fdbe <FMGAddDelTransactions+0x366>
	}
	if (iBatchIdx == MAX_TRANS)
    fb5e:	68bb      	ldr	r3, [r7, #8]
    fb60:	2b0a      	cmp	r3, #10
    fb62:	d112      	bne.n	fb8a <FMGAddDelTransactions+0x132>
	{
		iRet = GoalDspLine(hScreen, 2, "Batch Full !!!", &txBatch[2], 0, false);
    fb64:	683b      	ldr	r3, [r7, #0]
    fb66:	2200      	movs	r2, #0
    fb68:	9200      	str	r2, [sp, #0]
    fb6a:	2200      	movs	r2, #0
    fb6c:	9201      	str	r2, [sp, #4]
    fb6e:	4618      	mov	r0, r3
    fb70:	2102      	movs	r1, #2
    fb72:	f643 42d4 	movw	r2, #15572	; 0x3cd4
    fb76:	f2c0 0202 	movt	r2, #2
    fb7a:	4b9b      	ldr	r3, [pc, #620]	; (fde8 <FMGAddDelTransactions+0x390>)
    fb7c:	f7fd fd3a 	bl	d5f4 <GoalDspLine>
    fb80:	6078      	str	r0, [r7, #4]
		CHECK(iRet>=0, lblKO);                                             // Warm message = Batch full
    fb82:	687b      	ldr	r3, [r7, #4]
    fb84:	2b00      	cmp	r3, #0
    fb86:	f2c0 811a 	blt.w	fdbe <FMGAddDelTransactions+0x366>
	}
   	iRet = GoalDspLine(hScreen, 3, "Down to del", &txBatch[3], 0, false);  // Show press down to delete transaction
    fb8a:	683b      	ldr	r3, [r7, #0]
    fb8c:	2200      	movs	r2, #0
    fb8e:	9200      	str	r2, [sp, #0]
    fb90:	2200      	movs	r2, #0
    fb92:	9201      	str	r2, [sp, #4]
    fb94:	4618      	mov	r0, r3
    fb96:	2103      	movs	r1, #3
    fb98:	f643 42e4 	movw	r2, #15588	; 0x3ce4
    fb9c:	f2c0 0202 	movt	r2, #2
    fba0:	4b92      	ldr	r3, [pc, #584]	; (fdec <FMGAddDelTransactions+0x394>)
    fba2:	f7fd fd27 	bl	d5f4 <GoalDspLine>
    fba6:	6078      	str	r0, [r7, #4]
    CHECK(iRet>=0, lblKO);
    fba8:	687b      	ldr	r3, [r7, #4]
    fbaa:	2b00      	cmp	r3, #0
    fbac:	f2c0 8107 	blt.w	fdbe <FMGAddDelTransactions+0x366>
    fbb0:	e000      	b.n	fbb4 <FMGAddDelTransactions+0x15c>
		    		CHECK(iRet>=0, lblKO);
		    		buzzer(10);
	            }
			}
		}
    }
    fbb2:	bf00      	nop
   	iRet = GoalDspLine(hScreen, 3, "Down to del", &txBatch[3], 0, false);  // Show press down to delete transaction
    CHECK(iRet>=0, lblKO);

    while(1) 
	{
    	iRet = GoalDspLine(hScreen, 1, tcDisplay, &txBatch[1], 0, true);
    fbb4:	683a      	ldr	r2, [r7, #0]
    fbb6:	f107 0310 	add.w	r3, r7, #16
    fbba:	2100      	movs	r1, #0
    fbbc:	9100      	str	r1, [sp, #0]
    fbbe:	2101      	movs	r1, #1
    fbc0:	9101      	str	r1, [sp, #4]
    fbc2:	4610      	mov	r0, r2
    fbc4:	2101      	movs	r1, #1
    fbc6:	461a      	mov	r2, r3
    fbc8:	4b89      	ldr	r3, [pc, #548]	; (fdf0 <FMGAddDelTransactions+0x398>)
    fbca:	f7fd fd13 	bl	d5f4 <GoalDspLine>
    fbce:	6078      	str	r0, [r7, #4]
    	CHECK(iRet>=0, lblKO);                                             // Show transaction recorded or deleted
    fbd0:	687b      	ldr	r3, [r7, #4]
    fbd2:	2b00      	cmp	r3, #0
    fbd4:	f2c0 80f3 	blt.w	fdbe <FMGAddDelTransactions+0x366>

		iKey = GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 30*1000, true);            // Wait for key pressed/touched (shortcut)
    fbd8:	683a      	ldr	r2, [r7, #0]
    fbda:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    fbde:	f2c0 0302 	movt	r3, #2
    fbe2:	681b      	ldr	r3, [r3, #0]
    fbe4:	2101      	movs	r1, #1
    fbe6:	9100      	str	r1, [sp, #0]
    fbe8:	4610      	mov	r0, r2
    fbea:	4619      	mov	r1, r3
    fbec:	2201      	movs	r2, #1
    fbee:	f247 5330 	movw	r3, #30000	; 0x7530
    fbf2:	f7fe f835 	bl	dc60 <GoalGetKey>
    fbf6:	60f8      	str	r0, [r7, #12]

		// Exit from the batch
		// ===================
        if(iKey==0)
    fbf8:	68fb      	ldr	r3, [r7, #12]
    fbfa:	2b00      	cmp	r3, #0
    fbfc:	f000 80db 	beq.w	fdb6 <FMGAddDelTransactions+0x35e>
            break;                                                         // Exit loop if nothing is pressed during 5s
        if (iKey==GL_KEY_CANCEL)
    fc00:	68fa      	ldr	r2, [r7, #12]
    fc02:	f64f 0351 	movw	r3, #63569	; 0xf851
    fc06:	429a      	cmp	r2, r3
    fc08:	f000 80d7 	beq.w	fdba <FMGAddDelTransactions+0x362>
            break;                                                         // Exit loop if red key is pressed

        // Add transactions into the batch
        // ===============================
        if (iKey==GL_KEY_UP)                                               // *** Key UP ***
    fc0c:	68fa      	ldr	r2, [r7, #12]
    fc0e:	f64f 0359 	movw	r3, #63577	; 0xf859
    fc12:	429a      	cmp	r2, r3
    fc14:	d175      	bne.n	fd02 <FMGAddDelTransactions+0x2aa>
		{
			if (iBatchIdx < MAX_TRANS)                                     // Add transaction
    fc16:	68bb      	ldr	r3, [r7, #8]
    fc18:	2b09      	cmp	r3, #9
    fc1a:	dc72      	bgt.n	fd02 <FMGAddDelTransactions+0x2aa>
			{        
	        	iRet = FMG_AddRecord(&xFileInfo, (void*) &zBatch.txTable[iBatchIdx], sizeof(ST_TRANSAC), FMGMiddle, iBatchIdx+1);
    fc1c:	68bb      	ldr	r3, [r7, #8]
    fc1e:	019a      	lsls	r2, r3, #6
    fc20:	f643 13cc 	movw	r3, #14796	; 0x39cc
    fc24:	f2c0 0302 	movt	r3, #2
    fc28:	18d3      	adds	r3, r2, r3
    fc2a:	3304      	adds	r3, #4
    fc2c:	68ba      	ldr	r2, [r7, #8]
    fc2e:	3201      	adds	r2, #1
    fc30:	9200      	str	r2, [sp, #0]
    fc32:	f64f 7040 	movw	r0, #65344	; 0xff40
    fc36:	f2c0 0002 	movt	r0, #2
    fc3a:	4619      	mov	r1, r3
    fc3c:	2240      	movs	r2, #64	; 0x40
    fc3e:	2301      	movs	r3, #1
    fc40:	f00d fc26 	bl	1d490 <FMG_AddRecord>
    fc44:	6078      	str	r0, [r7, #4]
	        	CHECK(iRet==FMG_SUCCESS, lblFmgKO);
    fc46:	687b      	ldr	r3, [r7, #4]
    fc48:	2b0a      	cmp	r3, #10
    fc4a:	f040 80d3 	bne.w	fdf4 <FMGAddDelTransactions+0x39c>
	        	iBatchIdx++;                                               // Inc Batch Index
    fc4e:	68bb      	ldr	r3, [r7, #8]
    fc50:	3301      	adds	r3, #1
    fc52:	60bb      	str	r3, [r7, #8]
	        	iRet = SetBatchIdx(iBatchIdx);                             // Save Batch Index
    fc54:	68b8      	ldr	r0, [r7, #8]
    fc56:	f7ff fec7 	bl	f9e8 <SetBatchIdx>
    fc5a:	6078      	str	r0, [r7, #4]
	        	CHECK(iRet==FMG_SUCCESS, lblFmgKO);
    fc5c:	687b      	ldr	r3, [r7, #4]
    fc5e:	2b0a      	cmp	r3, #10
    fc60:	f040 80c8 	bne.w	fdf4 <FMGAddDelTransactions+0x39c>
	        	sprintf(tcDisplay, "Transaction %d recorded", iBatchIdx);  // Transaction recorded
    fc64:	f107 0310 	add.w	r3, r7, #16
    fc68:	4618      	mov	r0, r3
    fc6a:	f643 41f0 	movw	r1, #15600	; 0x3cf0
    fc6e:	f2c0 0102 	movt	r1, #2
    fc72:	68ba      	ldr	r2, [r7, #8]
    fc74:	f7f9 e81e 	blx	8cb4 <_init+0x154>

	            if ((iBatchIdx > MAX_TRANS-3) && (iBatchIdx != MAX_TRANS)) // Batch almost full
    fc78:	68bb      	ldr	r3, [r7, #8]
    fc7a:	2b07      	cmp	r3, #7
    fc7c:	dd16      	ble.n	fcac <FMGAddDelTransactions+0x254>
    fc7e:	68bb      	ldr	r3, [r7, #8]
    fc80:	2b0a      	cmp	r3, #10
    fc82:	d013      	beq.n	fcac <FMGAddDelTransactions+0x254>
	            {
		    		iRet = GoalDspLine(hScreen, 2, "Batch almost Full !!!", &txBatch[2], 0, false);
    fc84:	683b      	ldr	r3, [r7, #0]
    fc86:	2200      	movs	r2, #0
    fc88:	9200      	str	r2, [sp, #0]
    fc8a:	2200      	movs	r2, #0
    fc8c:	9201      	str	r2, [sp, #4]
    fc8e:	4618      	mov	r0, r3
    fc90:	2102      	movs	r1, #2
    fc92:	f643 5208 	movw	r2, #15624	; 0x3d08
    fc96:	f2c0 0202 	movt	r2, #2
    fc9a:	4b53      	ldr	r3, [pc, #332]	; (fde8 <FMGAddDelTransactions+0x390>)
    fc9c:	f7fd fcaa 	bl	d5f4 <GoalDspLine>
    fca0:	6078      	str	r0, [r7, #4]
		    		CHECK(iRet>=0, lblKO);
    fca2:	687b      	ldr	r3, [r7, #4]
    fca4:	2b00      	cmp	r3, #0
    fca6:	f2c0 808a 	blt.w	fdbe <FMGAddDelTransactions+0x366>
    fcaa:	e02a      	b.n	fd02 <FMGAddDelTransactions+0x2aa>
	            }
	            else if (iBatchIdx == MAX_TRANS)                           // Batch full
    fcac:	68bb      	ldr	r3, [r7, #8]
    fcae:	2b0a      	cmp	r3, #10
    fcb0:	d115      	bne.n	fcde <FMGAddDelTransactions+0x286>
	            {
			    	iRet = GoalDspLine(hScreen, 2, "Batch Full !!!", &txBatch[2], 0, false);
    fcb2:	683b      	ldr	r3, [r7, #0]
    fcb4:	2200      	movs	r2, #0
    fcb6:	9200      	str	r2, [sp, #0]
    fcb8:	2200      	movs	r2, #0
    fcba:	9201      	str	r2, [sp, #4]
    fcbc:	4618      	mov	r0, r3
    fcbe:	2102      	movs	r1, #2
    fcc0:	f643 42d4 	movw	r2, #15572	; 0x3cd4
    fcc4:	f2c0 0202 	movt	r2, #2
    fcc8:	4b47      	ldr	r3, [pc, #284]	; (fde8 <FMGAddDelTransactions+0x390>)
    fcca:	f7fd fc93 	bl	d5f4 <GoalDspLine>
    fcce:	6078      	str	r0, [r7, #4]
			    	CHECK(iRet>=0, lblKO);
    fcd0:	687b      	ldr	r3, [r7, #4]
    fcd2:	2b00      	cmp	r3, #0
    fcd4:	db73      	blt.n	fdbe <FMGAddDelTransactions+0x366>
			    	buzzer(10);
    fcd6:	200a      	movs	r0, #10
    fcd8:	f010 f83c 	bl	1fd54 <buzzer>
    fcdc:	e011      	b.n	fd02 <FMGAddDelTransactions+0x2aa>
	            }
	            else
	            {
		    		iRet = GoalDspLine(hScreen, 2, "", &txBatch[2], 0, false);
    fcde:	683b      	ldr	r3, [r7, #0]
    fce0:	2200      	movs	r2, #0
    fce2:	9200      	str	r2, [sp, #0]
    fce4:	2200      	movs	r2, #0
    fce6:	9201      	str	r2, [sp, #4]
    fce8:	4618      	mov	r0, r3
    fcea:	2102      	movs	r1, #2
    fcec:	f643 42c0 	movw	r2, #15552	; 0x3cc0
    fcf0:	f2c0 0202 	movt	r2, #2
    fcf4:	4b3c      	ldr	r3, [pc, #240]	; (fde8 <FMGAddDelTransactions+0x390>)
    fcf6:	f7fd fc7d 	bl	d5f4 <GoalDspLine>
    fcfa:	6078      	str	r0, [r7, #4]
		    		CHECK(iRet>=0, lblKO);
    fcfc:	687b      	ldr	r3, [r7, #4]
    fcfe:	2b00      	cmp	r3, #0
    fd00:	db5d      	blt.n	fdbe <FMGAddDelTransactions+0x366>
			}
		}
				
		// Delete transactions from the batch
		// ==================================
		if (iKey==GL_KEY_DOWN)                                              // *** Key DOWN ***
    fd02:	68fa      	ldr	r2, [r7, #12]
    fd04:	f64f 035a 	movw	r3, #63578	; 0xf85a
    fd08:	429a      	cmp	r2, r3
    fd0a:	f47f af52 	bne.w	fbb2 <FMGAddDelTransactions+0x15a>
		{
        	if (iBatchIdx > 0)                                              // Delete transaction
    fd0e:	68bb      	ldr	r3, [r7, #8]
    fd10:	2b00      	cmp	r3, #0
    fd12:	f77f af4e 	ble.w	fbb2 <FMGAddDelTransactions+0x15a>
			{
				iBatchIdx--;                                                // Dec Batch Index
    fd16:	68bb      	ldr	r3, [r7, #8]
    fd18:	3b01      	subs	r3, #1
    fd1a:	60bb      	str	r3, [r7, #8]
	        	iRet = FMG_DeleteRecord(&xFileInfo, FMGMiddle, sizeof(ST_TRANSAC), iBatchIdx+1);
    fd1c:	68bb      	ldr	r3, [r7, #8]
    fd1e:	3301      	adds	r3, #1
    fd20:	f64f 7040 	movw	r0, #65344	; 0xff40
    fd24:	f2c0 0002 	movt	r0, #2
    fd28:	2101      	movs	r1, #1
    fd2a:	2240      	movs	r2, #64	; 0x40
    fd2c:	f00e f924 	bl	1df78 <FMG_DeleteRecord>
    fd30:	6078      	str	r0, [r7, #4]
	        	CHECK(iRet==FMG_SUCCESS, lblFmgKO);
    fd32:	687b      	ldr	r3, [r7, #4]
    fd34:	2b0a      	cmp	r3, #10
    fd36:	d15d      	bne.n	fdf4 <FMGAddDelTransactions+0x39c>
	        	iRet = SetBatchIdx(iBatchIdx);                              // Save Batch Index
    fd38:	68b8      	ldr	r0, [r7, #8]
    fd3a:	f7ff fe55 	bl	f9e8 <SetBatchIdx>
    fd3e:	6078      	str	r0, [r7, #4]
	        	CHECK(iRet==FMG_SUCCESS, lblFmgKO);
    fd40:	687b      	ldr	r3, [r7, #4]
    fd42:	2b0a      	cmp	r3, #10
    fd44:	d156      	bne.n	fdf4 <FMGAddDelTransactions+0x39c>
	        	sprintf(tcDisplay, "Transaction %d deleted", iBatchIdx+1);  // Transaction deleted
    fd46:	68bb      	ldr	r3, [r7, #8]
    fd48:	3301      	adds	r3, #1
    fd4a:	f107 0210 	add.w	r2, r7, #16
    fd4e:	4610      	mov	r0, r2
    fd50:	f643 5120 	movw	r1, #15648	; 0x3d20
    fd54:	f2c0 0102 	movt	r1, #2
    fd58:	461a      	mov	r2, r3
    fd5a:	f7f8 efac 	blx	8cb4 <_init+0x154>

	    		iRet = GoalDspLine(hScreen, 2, "", &txBatch[2], 0, false);
    fd5e:	683b      	ldr	r3, [r7, #0]
    fd60:	2200      	movs	r2, #0
    fd62:	9200      	str	r2, [sp, #0]
    fd64:	2200      	movs	r2, #0
    fd66:	9201      	str	r2, [sp, #4]
    fd68:	4618      	mov	r0, r3
    fd6a:	2102      	movs	r1, #2
    fd6c:	f643 42c0 	movw	r2, #15552	; 0x3cc0
    fd70:	f2c0 0202 	movt	r2, #2
    fd74:	4b1c      	ldr	r3, [pc, #112]	; (fde8 <FMGAddDelTransactions+0x390>)
    fd76:	f7fd fc3d 	bl	d5f4 <GoalDspLine>
    fd7a:	6078      	str	r0, [r7, #4]
	    		CHECK(iRet>=0, lblKO);
    fd7c:	687b      	ldr	r3, [r7, #4]
    fd7e:	2b00      	cmp	r3, #0
    fd80:	db1d      	blt.n	fdbe <FMGAddDelTransactions+0x366>

	            if (iBatchIdx == 0)                                         // Batch empty
    fd82:	68bb      	ldr	r3, [r7, #8]
    fd84:	2b00      	cmp	r3, #0
    fd86:	f47f af14 	bne.w	fbb2 <FMGAddDelTransactions+0x15a>
	            {
		    		iRet = GoalDspLine(hScreen, 2, "Batch Empty !!!", &txBatch[2], 0, false);
    fd8a:	683b      	ldr	r3, [r7, #0]
    fd8c:	2200      	movs	r2, #0
    fd8e:	9200      	str	r2, [sp, #0]
    fd90:	2200      	movs	r2, #0
    fd92:	9201      	str	r2, [sp, #4]
    fd94:	4618      	mov	r0, r3
    fd96:	2102      	movs	r1, #2
    fd98:	f643 42c4 	movw	r2, #15556	; 0x3cc4
    fd9c:	f2c0 0202 	movt	r2, #2
    fda0:	4b11      	ldr	r3, [pc, #68]	; (fde8 <FMGAddDelTransactions+0x390>)
    fda2:	f7fd fc27 	bl	d5f4 <GoalDspLine>
    fda6:	6078      	str	r0, [r7, #4]
		    		CHECK(iRet>=0, lblKO);
    fda8:	687b      	ldr	r3, [r7, #4]
    fdaa:	2b00      	cmp	r3, #0
    fdac:	db07      	blt.n	fdbe <FMGAddDelTransactions+0x366>
		    		buzzer(10);
    fdae:	200a      	movs	r0, #10
    fdb0:	f00f ffd0 	bl	1fd54 <buzzer>
	            }
			}
		}
    }
    fdb4:	e6fd      	b.n	fbb2 <FMGAddDelTransactions+0x15a>
		iKey = GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 30*1000, true);            // Wait for key pressed/touched (shortcut)

		// Exit from the batch
		// ===================
        if(iKey==0)
            break;                                                         // Exit loop if nothing is pressed during 5s
    fdb6:	bf00      	nop
    fdb8:	e000      	b.n	fdbc <FMGAddDelTransactions+0x364>
        if (iKey==GL_KEY_CANCEL)
            break;                                                         // Exit loop if red key is pressed
    fdba:	bf00      	nop
	            }
			}
		}
    }
    
    goto lblEnd;
    fdbc:	e02f      	b.n	fe1e <FMGAddDelTransactions+0x3c6>

	// Errors treatment 
    // ****************
lblKO:                               // None-classified low level error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Processing Error", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
    fdbe:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    fdc2:	f2c0 0302 	movt	r3, #2
    fdc6:	681b      	ldr	r3, [r3, #0]
    fdc8:	2201      	movs	r2, #1
    fdca:	9200      	str	r2, [sp, #0]
    fdcc:	f241 3288 	movw	r2, #5000	; 0x1388
    fdd0:	9201      	str	r2, [sp, #4]
    fdd2:	4618      	mov	r0, r3
    fdd4:	2100      	movs	r1, #0
    fdd6:	f643 5238 	movw	r2, #15672	; 0x3d38
    fdda:	f2c0 0202 	movt	r2, #2
    fdde:	2304      	movs	r3, #4
    fde0:	f011 fba0 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
    fde4:	e01b      	b.n	fe1e <FMGAddDelTransactions+0x3c6>
    fde6:	bf00      	nop
    fde8:	000233c0 	.word	0x000233c0
    fdec:	0002346c 	.word	0x0002346c
    fdf0:	00023314 	.word	0x00023314
lblFmgKO:                            // File Management error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, FMG_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
    fdf4:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    fdf8:	f2c0 0302 	movt	r3, #2
    fdfc:	681c      	ldr	r4, [r3, #0]
    fdfe:	6878      	ldr	r0, [r7, #4]
    fe00:	f000 f9f6 	bl	101f0 <FMG_ErrorMsg>
    fe04:	4603      	mov	r3, r0
    fe06:	2201      	movs	r2, #1
    fe08:	9200      	str	r2, [sp, #0]
    fe0a:	f241 3288 	movw	r2, #5000	; 0x1388
    fe0e:	9201      	str	r2, [sp, #4]
    fe10:	4620      	mov	r0, r4
    fe12:	2100      	movs	r1, #0
    fe14:	461a      	mov	r2, r3
    fe16:	2304      	movs	r3, #4
    fe18:	f011 fb84 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
    fe1c:	bf00      	nop
lblEnd: 
	if (hScreen)
    fe1e:	683b      	ldr	r3, [r7, #0]
    fe20:	2b00      	cmp	r3, #0
    fe22:	d003      	beq.n	fe2c <FMGAddDelTransactions+0x3d4>
		GoalDestroyScreen(&hScreen); // Destroy screen
    fe24:	463b      	mov	r3, r7
    fe26:	4618      	mov	r0, r3
    fe28:	f7fe f87c 	bl	df24 <GoalDestroyScreen>
}
    fe2c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    fe30:	f2c0 0302 	movt	r3, #2
    fe34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    fe36:	681b      	ldr	r3, [r3, #0]
    fe38:	429a      	cmp	r2, r3
    fe3a:	d001      	beq.n	fe40 <FMGAddDelTransactions+0x3e8>
    fe3c:	f7f9 f8b2 	bl	8fa4 <__stack_chk_fail>
    fe40:	f107 074c 	add.w	r7, r7, #76	; 0x4c
    fe44:	46bd      	mov	sp, r7
    fe46:	bd90      	pop	{r4, r7, pc}

0000fe48 <FMGReadTransactions>:
//  This function has no parameters.
//  This function has no return value.                                      
//****************************************************************************

void FMGReadTransactions(void) 
{
    fe48:	b590      	push	{r4, r7, lr}
    fe4a:	b0a7      	sub	sp, #156	; 0x9c
    fe4c:	af02      	add	r7, sp, #8
    fe4e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
    fe52:	f2c0 0302 	movt	r3, #2
    fe56:	681b      	ldr	r3, [r3, #0]
    fe58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	// Local variables 
    // ***************
	T_GL_HWIDGET hScreen=NULL;
    fe5c:	2300      	movs	r3, #0
    fe5e:	603b      	str	r3, [r7, #0]
    long lLength;
	int iKey, iRet, iBatchIdx, iIdx;

    // Batch management
	// ****************
	memset(&xTransac, 0, sizeof(ST_TRANSAC));
    fe60:	f107 0318 	add.w	r3, r7, #24
    fe64:	4618      	mov	r0, r3
    fe66:	2100      	movs	r1, #0
    fe68:	2240      	movs	r2, #64	; 0x40
    fe6a:	f7f8 eea8 	blx	8bbc <_init+0x5c>
    iIdx=1;                                                               // Transactions start at iIdx=1
    fe6e:	2301      	movs	r3, #1
    fe70:	60fb      	str	r3, [r7, #12]

	hScreen = GoalCreateScreen(gGoalGraphicLibInstance, txTrans, NUMBER_OF_LINES(txTrans), GL_ENCODING_UTF8);
    fe72:	f64f 63d8 	movw	r3, #65240	; 0xfed8
    fe76:	f2c0 0302 	movt	r3, #2
    fe7a:	681b      	ldr	r3, [r3, #0]
    fe7c:	4618      	mov	r0, r3
    fe7e:	f243 5118 	movw	r1, #13592	; 0x3518
    fe82:	f2c0 0102 	movt	r1, #2
    fe86:	2207      	movs	r2, #7
    fe88:	2300      	movs	r3, #0
    fe8a:	f7fd f8fb 	bl	d084 <GoalCreateScreen>
    fe8e:	4603      	mov	r3, r0
    fe90:	603b      	str	r3, [r7, #0]
	CHECK(hScreen!=NULL, lblKO);                                          // Create screen and clear it
    fe92:	683b      	ldr	r3, [r7, #0]
    fe94:	2b00      	cmp	r3, #0
    fe96:	f000 814b 	beq.w	10130 <FMGReadTransactions+0x2e8>
	iRet = GoalClrScreen(hScreen, GL_COLOR_BLACK, KEY_CANCEL | KEY_DOWN | KEY_UP, false);
    fe9a:	683b      	ldr	r3, [r7, #0]
    fe9c:	4618      	mov	r0, r3
    fe9e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    fea2:	220e      	movs	r2, #14
    fea4:	2300      	movs	r3, #0
    fea6:	f7fd fa8b 	bl	d3c0 <GoalClrScreen>
    feaa:	60b8      	str	r0, [r7, #8]
	CHECK(iRet>=0, lblKO);
    feac:	68bb      	ldr	r3, [r7, #8]
    feae:	2b00      	cmp	r3, #0
    feb0:	f2c0 813e 	blt.w	10130 <FMGReadTransactions+0x2e8>

	// Read first transaction
    // ======================
    iBatchIdx = GetBatchIdx();                                            // Read Batch Index
    feb4:	f7ff fd54 	bl	f960 <GetBatchIdx>
    feb8:	6138      	str	r0, [r7, #16]
    CHECK(iBatchIdx>=0, lblKO);
    feba:	693b      	ldr	r3, [r7, #16]
    febc:	2b00      	cmp	r3, #0
    febe:	f2c0 8137 	blt.w	10130 <FMGReadTransactions+0x2e8>
	CHECK(iBatchIdx!=0, lblEmpty);                                        // Check if batch empty
    fec2:	693b      	ldr	r3, [r7, #16]
    fec4:	2b00      	cmp	r3, #0
    fec6:	f000 8147 	beq.w	10158 <FMGReadTransactions+0x310>

    lLength = sizeof(ST_TRANSAC);                                         // Read first transaction
    feca:	2340      	movs	r3, #64	; 0x40
    fecc:	607b      	str	r3, [r7, #4]
	iRet = FMG_ReadRecord(&xFileInfo, &xTransac, &lLength, FMGMiddle, iIdx);
    fece:	f107 0218 	add.w	r2, r7, #24
    fed2:	1d3b      	adds	r3, r7, #4
    fed4:	68f9      	ldr	r1, [r7, #12]
    fed6:	9100      	str	r1, [sp, #0]
    fed8:	f64f 7040 	movw	r0, #65344	; 0xff40
    fedc:	f2c0 0002 	movt	r0, #2
    fee0:	4611      	mov	r1, r2
    fee2:	461a      	mov	r2, r3
    fee4:	2301      	movs	r3, #1
    fee6:	f00d fe05 	bl	1daf4 <FMG_ReadRecord>
    feea:	60b8      	str	r0, [r7, #8]
	CHECK(iRet==FMG_SUCCESS, lblFmgKO);
    feec:	68bb      	ldr	r3, [r7, #8]
    feee:	2b0a      	cmp	r3, #10
    fef0:	f040 8146 	bne.w	10180 <FMGReadTransactions+0x338>

	iRet = GoalDspLine(hScreen, 0, "Up to inc", &txTrans[0], 0, false);   // Show press up to read the next transaction
    fef4:	683b      	ldr	r3, [r7, #0]
    fef6:	2200      	movs	r2, #0
    fef8:	9200      	str	r2, [sp, #0]
    fefa:	2200      	movs	r2, #0
    fefc:	9201      	str	r2, [sp, #4]
    fefe:	4618      	mov	r0, r3
    ff00:	2100      	movs	r1, #0
    ff02:	f643 524c 	movw	r2, #15692	; 0x3d4c
    ff06:	f2c0 0202 	movt	r2, #2
    ff0a:	f243 5318 	movw	r3, #13592	; 0x3518
    ff0e:	f2c0 0302 	movt	r3, #2
    ff12:	f7fd fb6f 	bl	d5f4 <GoalDspLine>
    ff16:	60b8      	str	r0, [r7, #8]
	CHECK(iRet>=0, lblKO);
    ff18:	68bb      	ldr	r3, [r7, #8]
    ff1a:	2b00      	cmp	r3, #0
    ff1c:	f2c0 8108 	blt.w	10130 <FMGReadTransactions+0x2e8>

	iRet = GoalDspLine(hScreen, 6, "Down to dec", &txTrans[6], 0, false); // Show press down to read the previous transaction
    ff20:	683b      	ldr	r3, [r7, #0]
    ff22:	2200      	movs	r2, #0
    ff24:	9200      	str	r2, [sp, #0]
    ff26:	2200      	movs	r2, #0
    ff28:	9201      	str	r2, [sp, #4]
    ff2a:	4618      	mov	r0, r3
    ff2c:	2106      	movs	r1, #6
    ff2e:	f643 5258 	movw	r2, #15704	; 0x3d58
    ff32:	f2c0 0202 	movt	r2, #2
    ff36:	4ba8      	ldr	r3, [pc, #672]	; (101d8 <FMGReadTransactions+0x390>)
    ff38:	f7fd fb5c 	bl	d5f4 <GoalDspLine>
    ff3c:	60b8      	str	r0, [r7, #8]
	CHECK(iRet>=0, lblKO);
    ff3e:	68bb      	ldr	r3, [r7, #8]
    ff40:	2b00      	cmp	r3, #0
    ff42:	f2c0 80f5 	blt.w	10130 <FMGReadTransactions+0x2e8>
    ff46:	e000      	b.n	ff4a <FMGReadTransactions+0x102>
		        lLength = sizeof(ST_TRANSAC);
		    	iRet = FMG_ReadRecord(&xFileInfo, &xTransac, &lLength, FMGMiddle, iIdx);
		    	CHECK(iRet==FMG_SUCCESS, lblFmgKO);
			}
		}
    }
    ff48:	bf00      	nop

	// Scrolling transactions
	// ======================
    while(1) 
	{
        sprintf(tcDisplay, "TRANSACTION %02d", iIdx);                     // Show transaction
    ff4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
    ff4e:	4618      	mov	r0, r3
    ff50:	f643 5164 	movw	r1, #15716	; 0x3d64
    ff54:	f2c0 0102 	movt	r1, #2
    ff58:	68fa      	ldr	r2, [r7, #12]
    ff5a:	f7f8 eeac 	blx	8cb4 <_init+0x154>
    	iRet = GoalDspLine(hScreen, 1, tcDisplay, &txTrans[1], 0, false);
    ff5e:	683a      	ldr	r2, [r7, #0]
    ff60:	f107 0358 	add.w	r3, r7, #88	; 0x58
    ff64:	2100      	movs	r1, #0
    ff66:	9100      	str	r1, [sp, #0]
    ff68:	2100      	movs	r1, #0
    ff6a:	9101      	str	r1, [sp, #4]
    ff6c:	4610      	mov	r0, r2
    ff6e:	2101      	movs	r1, #1
    ff70:	461a      	mov	r2, r3
    ff72:	4b9a      	ldr	r3, [pc, #616]	; (101dc <FMGReadTransactions+0x394>)
    ff74:	f7fd fb3e 	bl	d5f4 <GoalDspLine>
    ff78:	60b8      	str	r0, [r7, #8]
    	CHECK(iRet>=0, lblKO);
    ff7a:	68bb      	ldr	r3, [r7, #8]
    ff7c:	2b00      	cmp	r3, #0
    ff7e:	f2c0 80d7 	blt.w	10130 <FMGReadTransactions+0x2e8>
    	sprintf(tcDisplay, "DATE: %s", xTransac.tcDate);
    ff82:	f107 0258 	add.w	r2, r7, #88	; 0x58
    ff86:	f107 0318 	add.w	r3, r7, #24
    ff8a:	4610      	mov	r0, r2
    ff8c:	f643 5178 	movw	r1, #15736	; 0x3d78
    ff90:	f2c0 0102 	movt	r1, #2
    ff94:	461a      	mov	r2, r3
    ff96:	f7f8 ee8e 	blx	8cb4 <_init+0x154>
        iRet = GoalDspLine(hScreen, 2, tcDisplay, &txTrans[2], 0, false);
    ff9a:	683a      	ldr	r2, [r7, #0]
    ff9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
    ffa0:	2100      	movs	r1, #0
    ffa2:	9100      	str	r1, [sp, #0]
    ffa4:	2100      	movs	r1, #0
    ffa6:	9101      	str	r1, [sp, #4]
    ffa8:	4610      	mov	r0, r2
    ffaa:	2102      	movs	r1, #2
    ffac:	461a      	mov	r2, r3
    ffae:	4b8c      	ldr	r3, [pc, #560]	; (101e0 <FMGReadTransactions+0x398>)
    ffb0:	f7fd fb20 	bl	d5f4 <GoalDspLine>
    ffb4:	60b8      	str	r0, [r7, #8]
    	CHECK(iRet>=0, lblKO);
    ffb6:	68bb      	ldr	r3, [r7, #8]
    ffb8:	2b00      	cmp	r3, #0
    ffba:	f2c0 80b9 	blt.w	10130 <FMGReadTransactions+0x2e8>
        sprintf(tcDisplay, "ACCOUNT #: %s", xTransac.tcAccount);
    ffbe:	f107 0258 	add.w	r2, r7, #88	; 0x58
    ffc2:	f107 0318 	add.w	r3, r7, #24
    ffc6:	3311      	adds	r3, #17
    ffc8:	4610      	mov	r0, r2
    ffca:	f643 5184 	movw	r1, #15748	; 0x3d84
    ffce:	f2c0 0102 	movt	r1, #2
    ffd2:	461a      	mov	r2, r3
    ffd4:	f7f8 ee6e 	blx	8cb4 <_init+0x154>
        iRet = GoalDspLine(hScreen, 3, tcDisplay, &txTrans[3], 0, false);
    ffd8:	683a      	ldr	r2, [r7, #0]
    ffda:	f107 0358 	add.w	r3, r7, #88	; 0x58
    ffde:	2100      	movs	r1, #0
    ffe0:	9100      	str	r1, [sp, #0]
    ffe2:	2100      	movs	r1, #0
    ffe4:	9101      	str	r1, [sp, #4]
    ffe6:	4610      	mov	r0, r2
    ffe8:	2103      	movs	r1, #3
    ffea:	461a      	mov	r2, r3
    ffec:	4b7d      	ldr	r3, [pc, #500]	; (101e4 <FMGReadTransactions+0x39c>)
    ffee:	f7fd fb01 	bl	d5f4 <GoalDspLine>
    fff2:	60b8      	str	r0, [r7, #8]
    	CHECK(iRet>=0, lblKO);
    fff4:	68bb      	ldr	r3, [r7, #8]
    fff6:	2b00      	cmp	r3, #0
    fff8:	f2c0 809a 	blt.w	10130 <FMGReadTransactions+0x2e8>
        sprintf(tcDisplay, "AMOUNT: %s", xTransac.tcAmount);
    fffc:	f107 0258 	add.w	r2, r7, #88	; 0x58
   10000:	f107 0318 	add.w	r3, r7, #24
   10004:	3322      	adds	r3, #34	; 0x22
   10006:	4610      	mov	r0, r2
   10008:	f643 5194 	movw	r1, #15764	; 0x3d94
   1000c:	f2c0 0102 	movt	r1, #2
   10010:	461a      	mov	r2, r3
   10012:	f7f8 ee50 	blx	8cb4 <_init+0x154>
        iRet = GoalDspLine(hScreen, 4, tcDisplay, &txTrans[4], 0, false);
   10016:	683a      	ldr	r2, [r7, #0]
   10018:	f107 0358 	add.w	r3, r7, #88	; 0x58
   1001c:	2100      	movs	r1, #0
   1001e:	9100      	str	r1, [sp, #0]
   10020:	2100      	movs	r1, #0
   10022:	9101      	str	r1, [sp, #4]
   10024:	4610      	mov	r0, r2
   10026:	2104      	movs	r1, #4
   10028:	461a      	mov	r2, r3
   1002a:	4b6f      	ldr	r3, [pc, #444]	; (101e8 <FMGReadTransactions+0x3a0>)
   1002c:	f7fd fae2 	bl	d5f4 <GoalDspLine>
   10030:	60b8      	str	r0, [r7, #8]
    	CHECK(iRet>=0, lblKO);
   10032:	68bb      	ldr	r3, [r7, #8]
   10034:	2b00      	cmp	r3, #0
   10036:	db7b      	blt.n	10130 <FMGReadTransactions+0x2e8>
        sprintf(tcDisplay, "TYPE: %s", xTransac.tcType);
   10038:	f107 0258 	add.w	r2, r7, #88	; 0x58
   1003c:	f107 0318 	add.w	r3, r7, #24
   10040:	3332      	adds	r3, #50	; 0x32
   10042:	4610      	mov	r0, r2
   10044:	f643 51a0 	movw	r1, #15776	; 0x3da0
   10048:	f2c0 0102 	movt	r1, #2
   1004c:	461a      	mov	r2, r3
   1004e:	f7f8 ee32 	blx	8cb4 <_init+0x154>
        iRet = GoalDspLine(hScreen, 5, tcDisplay, &txTrans[5], 0, true);
   10052:	683a      	ldr	r2, [r7, #0]
   10054:	f107 0358 	add.w	r3, r7, #88	; 0x58
   10058:	2100      	movs	r1, #0
   1005a:	9100      	str	r1, [sp, #0]
   1005c:	2101      	movs	r1, #1
   1005e:	9101      	str	r1, [sp, #4]
   10060:	4610      	mov	r0, r2
   10062:	2105      	movs	r1, #5
   10064:	461a      	mov	r2, r3
   10066:	4b61      	ldr	r3, [pc, #388]	; (101ec <FMGReadTransactions+0x3a4>)
   10068:	f7fd fac4 	bl	d5f4 <GoalDspLine>
   1006c:	60b8      	str	r0, [r7, #8]
    	CHECK(iRet>=0, lblKO);
   1006e:	68bb      	ldr	r3, [r7, #8]
   10070:	2b00      	cmp	r3, #0
   10072:	db5d      	blt.n	10130 <FMGReadTransactions+0x2e8>

		iKey = GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 30*1000, false);          // Wait for key pressed/touched (shortcut)
   10074:	683a      	ldr	r2, [r7, #0]
   10076:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   1007a:	f2c0 0302 	movt	r3, #2
   1007e:	681b      	ldr	r3, [r3, #0]
   10080:	2100      	movs	r1, #0
   10082:	9100      	str	r1, [sp, #0]
   10084:	4610      	mov	r0, r2
   10086:	4619      	mov	r1, r3
   10088:	2201      	movs	r2, #1
   1008a:	f247 5330 	movw	r3, #30000	; 0x7530
   1008e:	f7fd fde7 	bl	dc60 <GoalGetKey>
   10092:	6178      	str	r0, [r7, #20]

		// Exit from batch
		// ---------------
        if(iKey==0)
   10094:	697b      	ldr	r3, [r7, #20]
   10096:	2b00      	cmp	r3, #0
   10098:	d046      	beq.n	10128 <FMGReadTransactions+0x2e0>
            break;                                                        // Exit loop if nothing is pressed during 5s
        if(iKey==GL_KEY_CANCEL)
   1009a:	697a      	ldr	r2, [r7, #20]
   1009c:	f64f 0351 	movw	r3, #63569	; 0xf851
   100a0:	429a      	cmp	r2, r3
   100a2:	d043      	beq.n	1012c <FMGReadTransactions+0x2e4>
            break;                                                        // Exit loop if red key is pressed
       
        // Scrolling UP transactions
        // -------------------------
        if (iKey==GL_KEY_UP)                                              // *** Key UP ***
   100a4:	697a      	ldr	r2, [r7, #20]
   100a6:	f64f 0359 	movw	r3, #63577	; 0xf859
   100aa:	429a      	cmp	r2, r3
   100ac:	d11a      	bne.n	100e4 <FMGReadTransactions+0x29c>
		{
			if (iIdx < iBatchIdx)                                         // Reading transaction
   100ae:	68fa      	ldr	r2, [r7, #12]
   100b0:	693b      	ldr	r3, [r7, #16]
   100b2:	429a      	cmp	r2, r3
   100b4:	da16      	bge.n	100e4 <FMGReadTransactions+0x29c>
			{         
				iIdx++;
   100b6:	68fb      	ldr	r3, [r7, #12]
   100b8:	3301      	adds	r3, #1
   100ba:	60fb      	str	r3, [r7, #12]
		        lLength = sizeof(ST_TRANSAC);
   100bc:	2340      	movs	r3, #64	; 0x40
   100be:	607b      	str	r3, [r7, #4]
		    	iRet = FMG_ReadRecord(&xFileInfo, &xTransac, &lLength, FMGMiddle, iIdx);
   100c0:	f107 0218 	add.w	r2, r7, #24
   100c4:	1d3b      	adds	r3, r7, #4
   100c6:	68f9      	ldr	r1, [r7, #12]
   100c8:	9100      	str	r1, [sp, #0]
   100ca:	f64f 7040 	movw	r0, #65344	; 0xff40
   100ce:	f2c0 0002 	movt	r0, #2
   100d2:	4611      	mov	r1, r2
   100d4:	461a      	mov	r2, r3
   100d6:	2301      	movs	r3, #1
   100d8:	f00d fd0c 	bl	1daf4 <FMG_ReadRecord>
   100dc:	60b8      	str	r0, [r7, #8]
		    	CHECK(iRet==FMG_SUCCESS, lblFmgKO);
   100de:	68bb      	ldr	r3, [r7, #8]
   100e0:	2b0a      	cmp	r3, #10
   100e2:	d14d      	bne.n	10180 <FMGReadTransactions+0x338>
			}
		}
				
		// Scrolling DOWN transactions
		// ---------------------------
		if (iKey==GL_KEY_DOWN)                                            // *** Key DOWN ***
   100e4:	697a      	ldr	r2, [r7, #20]
   100e6:	f64f 035a 	movw	r3, #63578	; 0xf85a
   100ea:	429a      	cmp	r2, r3
   100ec:	f47f af2c 	bne.w	ff48 <FMGReadTransactions+0x100>
		{
        	if (iIdx > 1)                                                 // Reading transaction
   100f0:	68fb      	ldr	r3, [r7, #12]
   100f2:	2b01      	cmp	r3, #1
   100f4:	f77f af28 	ble.w	ff48 <FMGReadTransactions+0x100>
			{
				iIdx--;
   100f8:	68fb      	ldr	r3, [r7, #12]
   100fa:	3b01      	subs	r3, #1
   100fc:	60fb      	str	r3, [r7, #12]
		        lLength = sizeof(ST_TRANSAC);
   100fe:	2340      	movs	r3, #64	; 0x40
   10100:	607b      	str	r3, [r7, #4]
		    	iRet = FMG_ReadRecord(&xFileInfo, &xTransac, &lLength, FMGMiddle, iIdx);
   10102:	f107 0218 	add.w	r2, r7, #24
   10106:	1d3b      	adds	r3, r7, #4
   10108:	68f9      	ldr	r1, [r7, #12]
   1010a:	9100      	str	r1, [sp, #0]
   1010c:	f64f 7040 	movw	r0, #65344	; 0xff40
   10110:	f2c0 0002 	movt	r0, #2
   10114:	4611      	mov	r1, r2
   10116:	461a      	mov	r2, r3
   10118:	2301      	movs	r3, #1
   1011a:	f00d fceb 	bl	1daf4 <FMG_ReadRecord>
   1011e:	60b8      	str	r0, [r7, #8]
		    	CHECK(iRet==FMG_SUCCESS, lblFmgKO);
   10120:	68bb      	ldr	r3, [r7, #8]
   10122:	2b0a      	cmp	r3, #10
   10124:	d12c      	bne.n	10180 <FMGReadTransactions+0x338>
			}
		}
    }
   10126:	e70f      	b.n	ff48 <FMGReadTransactions+0x100>
		iKey = GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 30*1000, false);          // Wait for key pressed/touched (shortcut)

		// Exit from batch
		// ---------------
        if(iKey==0)
            break;                                                        // Exit loop if nothing is pressed during 5s
   10128:	bf00      	nop
   1012a:	e000      	b.n	1012e <FMGReadTransactions+0x2e6>
        if(iKey==GL_KEY_CANCEL)
            break;                                                        // Exit loop if red key is pressed
   1012c:	bf00      	nop
		    	CHECK(iRet==FMG_SUCCESS, lblFmgKO);
			}
		}
    }
    
    goto lblEnd;
   1012e:	e03c      	b.n	101aa <FMGReadTransactions+0x362>

	// Errors treatment 
    // ****************
lblKO:                               // None-classified low level error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Processing Error", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   10130:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   10134:	f2c0 0302 	movt	r3, #2
   10138:	681b      	ldr	r3, [r3, #0]
   1013a:	2201      	movs	r2, #1
   1013c:	9200      	str	r2, [sp, #0]
   1013e:	f241 3288 	movw	r2, #5000	; 0x1388
   10142:	9201      	str	r2, [sp, #4]
   10144:	4618      	mov	r0, r3
   10146:	2100      	movs	r1, #0
   10148:	f643 5238 	movw	r2, #15672	; 0x3d38
   1014c:	f2c0 0202 	movt	r2, #2
   10150:	2304      	movs	r3, #4
   10152:	f011 f9e7 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
   10156:	e028      	b.n	101aa <FMGReadTransactions+0x362>
lblEmpty:                            // Batch file empty
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Batch Empty !!!", GL_ICON_WARNING, GL_BUTTON_VALID, 3*1000);
   10158:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   1015c:	f2c0 0302 	movt	r3, #2
   10160:	681b      	ldr	r3, [r3, #0]
   10162:	2201      	movs	r2, #1
   10164:	9200      	str	r2, [sp, #0]
   10166:	f640 32b8 	movw	r2, #3000	; 0xbb8
   1016a:	9201      	str	r2, [sp, #4]
   1016c:	4618      	mov	r0, r3
   1016e:	2100      	movs	r1, #0
   10170:	f643 42c4 	movw	r2, #15556	; 0x3cc4
   10174:	f2c0 0202 	movt	r2, #2
   10178:	2303      	movs	r3, #3
   1017a:	f011 f9d3 	bl	21524 <GL_Dialog_Message>
    goto lblEnd;
   1017e:	e014      	b.n	101aa <FMGReadTransactions+0x362>
lblFmgKO:                            // File Management error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, FMG_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   10180:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   10184:	f2c0 0302 	movt	r3, #2
   10188:	681c      	ldr	r4, [r3, #0]
   1018a:	68b8      	ldr	r0, [r7, #8]
   1018c:	f000 f830 	bl	101f0 <FMG_ErrorMsg>
   10190:	4603      	mov	r3, r0
   10192:	2201      	movs	r2, #1
   10194:	9200      	str	r2, [sp, #0]
   10196:	f241 3288 	movw	r2, #5000	; 0x1388
   1019a:	9201      	str	r2, [sp, #4]
   1019c:	4620      	mov	r0, r4
   1019e:	2100      	movs	r1, #0
   101a0:	461a      	mov	r2, r3
   101a2:	2304      	movs	r3, #4
   101a4:	f011 f9be 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
   101a8:	bf00      	nop
lblEnd: 
	if (hScreen)
   101aa:	683b      	ldr	r3, [r7, #0]
   101ac:	2b00      	cmp	r3, #0
   101ae:	d003      	beq.n	101b8 <FMGReadTransactions+0x370>
		GoalDestroyScreen(&hScreen); // Destroy screen
   101b0:	463b      	mov	r3, r7
   101b2:	4618      	mov	r0, r3
   101b4:	f7fd feb6 	bl	df24 <GoalDestroyScreen>
}
   101b8:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   101bc:	f2c0 0302 	movt	r3, #2
   101c0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   101c4:	681b      	ldr	r3, [r3, #0]
   101c6:	429a      	cmp	r2, r3
   101c8:	d001      	beq.n	101ce <FMGReadTransactions+0x386>
   101ca:	f7f8 feeb 	bl	8fa4 <__stack_chk_fail>
   101ce:	f107 0794 	add.w	r7, r7, #148	; 0x94
   101d2:	46bd      	mov	sp, r7
   101d4:	bd90      	pop	{r4, r7, pc}
   101d6:	bf00      	nop
   101d8:	00023920 	.word	0x00023920
   101dc:	000235c4 	.word	0x000235c4
   101e0:	00023670 	.word	0x00023670
   101e4:	0002371c 	.word	0x0002371c
   101e8:	000237c8 	.word	0x000237c8
   101ec:	00023874 	.word	0x00023874

000101f0 <FMG_ErrorMsg>:
//  This function has return value.
//    A message string regarding the error value.
//****************************************************************************

char* FMG_ErrorMsg (int iValue) 
{
   101f0:	b580      	push	{r7, lr}
   101f2:	b084      	sub	sp, #16
   101f4:	af00      	add	r7, sp, #0
   101f6:	6078      	str	r0, [r7, #4]
   101f8:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   101fc:	f2c0 0302 	movt	r3, #2
   10200:	681b      	ldr	r3, [r3, #0]
   10202:	60fb      	str	r3, [r7, #12]
    // ***************
	char *pcError;
	
	// List error messages 
    // *******************
	switch (iValue)
   10204:	687b      	ldr	r3, [r7, #4]
   10206:	3301      	adds	r3, #1
   10208:	2b20      	cmp	r3, #32
   1020a:	f200 80c3 	bhi.w	10394 <FMG_ErrorMsg+0x1a4>
   1020e:	a201      	add	r2, pc, #4	; (adr r2, 10214 <FMG_ErrorMsg+0x24>)
   10210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10214:	00010299 	.word	0x00010299
   10218:	00010395 	.word	0x00010395
   1021c:	00010395 	.word	0x00010395
   10220:	00010395 	.word	0x00010395
   10224:	00010395 	.word	0x00010395
   10228:	00010395 	.word	0x00010395
   1022c:	00010395 	.word	0x00010395
   10230:	00010395 	.word	0x00010395
   10234:	00010395 	.word	0x00010395
   10238:	00010395 	.word	0x00010395
   1023c:	00010395 	.word	0x00010395
   10240:	00010395 	.word	0x00010395
   10244:	000102a5 	.word	0x000102a5
   10248:	000102b1 	.word	0x000102b1
   1024c:	000102bd 	.word	0x000102bd
   10250:	000102c9 	.word	0x000102c9
   10254:	000102d5 	.word	0x000102d5
   10258:	000102e1 	.word	0x000102e1
   1025c:	000102ed 	.word	0x000102ed
   10260:	000102f9 	.word	0x000102f9
   10264:	00010305 	.word	0x00010305
   10268:	00010311 	.word	0x00010311
   1026c:	0001031d 	.word	0x0001031d
   10270:	00010329 	.word	0x00010329
   10274:	00010335 	.word	0x00010335
   10278:	00010341 	.word	0x00010341
   1027c:	0001034d 	.word	0x0001034d
   10280:	00010359 	.word	0x00010359
   10284:	00010365 	.word	0x00010365
   10288:	00010371 	.word	0x00010371
   1028c:	0001037d 	.word	0x0001037d
   10290:	00010395 	.word	0x00010395
   10294:	00010389 	.word	0x00010389
	{
	case -1:                                   pcError="MEMORY FAILED";    break; // Key unknown from the data base
   10298:	f643 53dc 	movw	r3, #15836	; 0x3ddc
   1029c:	f2c0 0302 	movt	r3, #2
   102a0:	60bb      	str	r3, [r7, #8]
   102a2:	e07d      	b.n	103a0 <FMG_ErrorMsg+0x1b0>
	                       // ERRORS CODES
    // *** Generic errors ***
	case FMG_FILE_DOES_NOT_EXIST:              pcError="Telium_File_t NOT EXIST";   break;
   102a4:	f643 53ec 	movw	r3, #15852	; 0x3dec
   102a8:	f2c0 0302 	movt	r3, #2
   102ac:	60bb      	str	r3, [r7, #8]
   102ae:	e077      	b.n	103a0 <FMG_ErrorMsg+0x1b0>
	case FMG_FILE_ALREADY_EXIST:               pcError="Telium_File_t YET EXIST";   break;
   102b0:	f643 6304 	movw	r3, #15876	; 0x3e04
   102b4:	f2c0 0302 	movt	r3, #2
   102b8:	60bb      	str	r3, [r7, #8]
   102ba:	e071      	b.n	103a0 <FMG_ErrorMsg+0x1b0>
	case FMG_BAD_RECORD_TYPE:                  pcError="BAD RECORD TYPE";  break;
   102bc:	f643 631c 	movw	r3, #15900	; 0x3e1c
   102c0:	f2c0 0302 	movt	r3, #2
   102c4:	60bb      	str	r3, [r7, #8]
   102c6:	e06b      	b.n	103a0 <FMG_ErrorMsg+0x1b0>
	case FMG_BAD_CHECKSUM_TYPE:                pcError="BAD CHKSUM TYPE";  break;
   102c8:	f643 632c 	movw	r3, #15916	; 0x3e2c
   102cc:	f2c0 0302 	movt	r3, #2
   102d0:	60bb      	str	r3, [r7, #8]
   102d2:	e065      	b.n	103a0 <FMG_ErrorMsg+0x1b0>
	case FMG_BAD_FILE_TYPE:                    pcError="BAD Telium_File_t TYPE";    break;
   102d4:	f643 633c 	movw	r3, #15932	; 0x3e3c
   102d8:	f2c0 0302 	movt	r3, #2
   102dc:	60bb      	str	r3, [r7, #8]
   102de:	e05f      	b.n	103a0 <FMG_ErrorMsg+0x1b0>
	case FMG_BAD_RECORD_POSITION:              pcError="BAD RECORD INDEX"; break;
   102e0:	f643 6354 	movw	r3, #15956	; 0x3e54
   102e4:	f2c0 0302 	movt	r3, #2
   102e8:	60bb      	str	r3, [r7, #8]
   102ea:	e059      	b.n	103a0 <FMG_ErrorMsg+0x1b0>
	case FMG_BAD_CREATION_PARAM:               pcError="BAD CREATE PARAM"; break;
   102ec:	f643 6368 	movw	r3, #15976	; 0x3e68
   102f0:	f2c0 0302 	movt	r3, #2
   102f4:	60bb      	str	r3, [r7, #8]
   102f6:	e053      	b.n	103a0 <FMG_ErrorMsg+0x1b0>
	case FMG_BAD_PATH:                         pcError="BAD PATH";         break;
   102f8:	f643 637c 	movw	r3, #15996	; 0x3e7c
   102fc:	f2c0 0302 	movt	r3, #2
   10300:	60bb      	str	r3, [r7, #8]
   10302:	e04d      	b.n	103a0 <FMG_ErrorMsg+0x1b0>
	case FMG_OPEN_FILE_PROBLEM:                pcError="OPEN Telium_File_t ERROR";  break;
   10304:	f643 6388 	movw	r3, #16008	; 0x3e88
   10308:	f2c0 0302 	movt	r3, #2
   1030c:	60bb      	str	r3, [r7, #8]
   1030e:	e047      	b.n	103a0 <FMG_ErrorMsg+0x1b0>
	case FMG_CREATE_FILE_PROBLEM:              pcError="CREATE Telium_File_t ERR";  break;
   10310:	f643 63a4 	movw	r3, #16036	; 0x3ea4
   10314:	f2c0 0302 	movt	r3, #2
   10318:	60bb      	str	r3, [r7, #8]
   1031a:	e041      	b.n	103a0 <FMG_ErrorMsg+0x1b0>
	case FMG_DELETE_FILE_PROBLEM:              pcError="DELETE Telium_File_t ERR";  break;
   1031c:	f643 63c0 	movw	r3, #16064	; 0x3ec0
   10320:	f2c0 0302 	movt	r3, #2
   10324:	60bb      	str	r3, [r7, #8]
   10326:	e03b      	b.n	103a0 <FMG_ErrorMsg+0x1b0>
	case FMG_NB_FILE_PROBLEM:                  pcError="Telium_File_t INDEX ERROR"; break;
   10328:	f643 63dc 	movw	r3, #16092	; 0x3edc
   1032c:	f2c0 0302 	movt	r3, #2
   10330:	60bb      	str	r3, [r7, #8]
   10332:	e035      	b.n	103a0 <FMG_ErrorMsg+0x1b0>
	case FMG_MANAGEMENT_ERROR:                 pcError="Telium_File_t ERROR";       break;
   10334:	f643 63f8 	movw	r3, #16120	; 0x3ef8
   10338:	f2c0 0302 	movt	r3, #2
   1033c:	60bb      	str	r3, [r7, #8]
   1033e:	e02f      	b.n	103a0 <FMG_ErrorMsg+0x1b0>
	case FMG_ADD_RECORD_ERROR:                 pcError="ADD RECORD ERR";   break;
   10340:	f643 730c 	movw	r3, #16140	; 0x3f0c
   10344:	f2c0 0302 	movt	r3, #2
   10348:	60bb      	str	r3, [r7, #8]
   1034a:	e029      	b.n	103a0 <FMG_ErrorMsg+0x1b0>
	case FMG_READ_RECORD_ERROR:                pcError="READ RECORD ERR";  break;
   1034c:	f643 731c 	movw	r3, #16156	; 0x3f1c
   10350:	f2c0 0302 	movt	r3, #2
   10354:	60bb      	str	r3, [r7, #8]
   10356:	e023      	b.n	103a0 <FMG_ErrorMsg+0x1b0>
	case FMG_DELETE_RECORD_ERROR:              pcError="DEL RECORD ERR";   break;
   10358:	f643 732c 	movw	r3, #16172	; 0x3f2c
   1035c:	f2c0 0302 	movt	r3, #2
   10360:	60bb      	str	r3, [r7, #8]
   10362:	e01d      	b.n	103a0 <FMG_ErrorMsg+0x1b0>
	case FMG_CHECKSUM_PROBLEM:                 pcError="CHECKSUM ERROR";   break;
   10364:	f643 733c 	movw	r3, #16188	; 0x3f3c
   10368:	f2c0 0302 	movt	r3, #2
   1036c:	60bb      	str	r3, [r7, #8]
   1036e:	e017      	b.n	103a0 <FMG_ErrorMsg+0x1b0>
	case FMG_CORRUPTED_FILE:                   pcError="CORRUPTED Telium_File_t";   break;
   10370:	f643 734c 	movw	r3, #16204	; 0x3f4c
   10374:	f2c0 0302 	movt	r3, #2
   10378:	60bb      	str	r3, [r7, #8]
   1037a:	e011      	b.n	103a0 <FMG_ErrorMsg+0x1b0>
	case FMG_CORRUPTED_RECORD:                 pcError="CORRUPTED RECORD"; break;
   1037c:	f643 7364 	movw	r3, #16228	; 0x3f64
   10380:	f2c0 0302 	movt	r3, #2
   10384:	60bb      	str	r3, [r7, #8]
   10386:	e00b      	b.n	103a0 <FMG_ErrorMsg+0x1b0>
	case FMG_INIT_KO:                          pcError="FMG INIT ERROR";   break;
   10388:	f643 7378 	movw	r3, #16248	; 0x3f78
   1038c:	f2c0 0302 	movt	r3, #2
   10390:	60bb      	str	r3, [r7, #8]
   10392:	e005      	b.n	103a0 <FMG_ErrorMsg+0x1b0>
	// *** Other errors
	default:                                   pcError="ERROR UNKNOWN";    break;
   10394:	f643 7388 	movw	r3, #16264	; 0x3f88
   10398:	f2c0 0302 	movt	r3, #2
   1039c:	60bb      	str	r3, [r7, #8]
   1039e:	bf00      	nop
	}
	
	return pcError;
   103a0:	68bb      	ldr	r3, [r7, #8]
}
   103a2:	4618      	mov	r0, r3
   103a4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   103a8:	f2c0 0302 	movt	r3, #2
   103ac:	68fa      	ldr	r2, [r7, #12]
   103ae:	681b      	ldr	r3, [r3, #0]
   103b0:	429a      	cmp	r2, r3
   103b2:	d001      	beq.n	103b8 <FMG_ErrorMsg+0x1c8>
   103b4:	f7f8 fdf6 	bl	8fa4 <__stack_chk_fail>
   103b8:	f107 0710 	add.w	r7, r7, #16
   103bc:	46bd      	mov	sp, r7
   103be:	bd80      	pop	{r7, pc}

000103c0 <LL_ErrorMsg>:
//  This function has return value.
//    A message string regarding the error value.
//****************************************************************************

char* LL_ErrorMsg (int iValue) 
{
   103c0:	b580      	push	{r7, lr}
   103c2:	b084      	sub	sp, #16
   103c4:	af00      	add	r7, sp, #0
   103c6:	6078      	str	r0, [r7, #4]
   103c8:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   103cc:	f2c0 0302 	movt	r3, #2
   103d0:	681b      	ldr	r3, [r3, #0]
   103d2:	60fb      	str	r3, [r7, #12]
    // ***************
	char *pcError;
	
	// List error messages 
    // *******************
	switch (iValue)
   103d4:	687b      	ldr	r3, [r7, #4]
   103d6:	f46f 727e 	mvn.w	r2, #1016	; 0x3f8
   103da:	4293      	cmp	r3, r2
   103dc:	f000 8294 	beq.w	10908 <LL_ErrorMsg+0x548>
   103e0:	f46f 727e 	mvn.w	r2, #1016	; 0x3f8
   103e4:	4293      	cmp	r3, r2
   103e6:	f300 80f9 	bgt.w	105dc <LL_ErrorMsg+0x21c>
   103ea:	f64f 22e4 	movw	r2, #64228	; 0xfae4
   103ee:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   103f2:	4293      	cmp	r3, r2
   103f4:	f000 82ee 	beq.w	109d4 <LL_ErrorMsg+0x614>
   103f8:	f64f 22e4 	movw	r2, #64228	; 0xfae4
   103fc:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10400:	4293      	cmp	r3, r2
   10402:	dc78      	bgt.n	104f6 <LL_ErrorMsg+0x136>
   10404:	f64f 12bd 	movw	r2, #63933	; 0xf9bd
   10408:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   1040c:	4293      	cmp	r3, r2
   1040e:	f000 8317 	beq.w	10a40 <LL_ErrorMsg+0x680>
   10412:	f64f 12bd 	movw	r2, #63933	; 0xf9bd
   10416:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   1041a:	4293      	cmp	r3, r2
   1041c:	dc35      	bgt.n	1048a <LL_ErrorMsg+0xca>
   1041e:	f64f 125a 	movw	r2, #63834	; 0xf95a
   10422:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10426:	4293      	cmp	r3, r2
   10428:	f000 8322 	beq.w	10a70 <LL_ErrorMsg+0x6b0>
   1042c:	f64f 125a 	movw	r2, #63834	; 0xf95a
   10430:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10434:	4293      	cmp	r3, r2
   10436:	dc12      	bgt.n	1045e <LL_ErrorMsg+0x9e>
   10438:	f513 6fe1 	cmn.w	r3, #1800	; 0x708
   1043c:	f000 8324 	beq.w	10a88 <LL_ErrorMsg+0x6c8>
   10440:	f64f 1259 	movw	r2, #63833	; 0xf959
   10444:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10448:	4293      	cmp	r3, r2
   1044a:	f000 8317 	beq.w	10a7c <LL_ErrorMsg+0x6bc>
   1044e:	f64d 02f0 	movw	r2, #55536	; 0xd8f0
   10452:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10456:	4293      	cmp	r3, r2
   10458:	f000 831c 	beq.w	10a94 <LL_ErrorMsg+0x6d4>
   1045c:	e320      	b.n	10aa0 <LL_ErrorMsg+0x6e0>
   1045e:	f64f 12bb 	movw	r2, #63931	; 0xf9bb
   10462:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10466:	4293      	cmp	r3, r2
   10468:	f000 82f6 	beq.w	10a58 <LL_ErrorMsg+0x698>
   1046c:	f64f 12bb 	movw	r2, #63931	; 0xf9bb
   10470:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10474:	4293      	cmp	r3, r2
   10476:	f300 82e9 	bgt.w	10a4c <LL_ErrorMsg+0x68c>
   1047a:	f64f 125b 	movw	r2, #63835	; 0xf95b
   1047e:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10482:	4293      	cmp	r3, r2
   10484:	f000 82ee 	beq.w	10a64 <LL_ErrorMsg+0x6a4>
   10488:	e30a      	b.n	10aa0 <LL_ErrorMsg+0x6e0>
   1048a:	f64f 2222 	movw	r2, #64034	; 0xfa22
   1048e:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10492:	4293      	cmp	r3, r2
   10494:	f000 82bc 	beq.w	10a10 <LL_ErrorMsg+0x650>
   10498:	f64f 2222 	movw	r2, #64034	; 0xfa22
   1049c:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   104a0:	4293      	cmp	r3, r2
   104a2:	dc0e      	bgt.n	104c2 <LL_ErrorMsg+0x102>
   104a4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   104a8:	4293      	cmp	r3, r2
   104aa:	f000 82bd 	beq.w	10a28 <LL_ErrorMsg+0x668>
   104ae:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   104b2:	4293      	cmp	r3, r2
   104b4:	f2c0 82be 	blt.w	10a34 <LL_ErrorMsg+0x674>
   104b8:	f513 6fc8 	cmn.w	r3, #1600	; 0x640
   104bc:	f000 82ae 	beq.w	10a1c <LL_ErrorMsg+0x65c>
   104c0:	e2ee      	b.n	10aa0 <LL_ErrorMsg+0x6e0>
   104c2:	f64f 2224 	movw	r2, #64036	; 0xfa24
   104c6:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   104ca:	4293      	cmp	r3, r2
   104cc:	f000 8294 	beq.w	109f8 <LL_ErrorMsg+0x638>
   104d0:	f64f 2224 	movw	r2, #64036	; 0xfa24
   104d4:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   104d8:	4293      	cmp	r3, r2
   104da:	f2c0 8293 	blt.w	10a04 <LL_ErrorMsg+0x644>
   104de:	f513 6faf 	cmn.w	r3, #1400	; 0x578
   104e2:	f000 8283 	beq.w	109ec <LL_ErrorMsg+0x62c>
   104e6:	f64f 22e3 	movw	r2, #64227	; 0xfae3
   104ea:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   104ee:	4293      	cmp	r3, r2
   104f0:	f000 8276 	beq.w	109e0 <LL_ErrorMsg+0x620>
   104f4:	e2d4      	b.n	10aa0 <LL_ErrorMsg+0x6e0>
   104f6:	f64f 22ec 	movw	r2, #64236	; 0xfaec
   104fa:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   104fe:	4293      	cmp	r3, r2
   10500:	f000 8238 	beq.w	10974 <LL_ErrorMsg+0x5b4>
   10504:	f64f 22ec 	movw	r2, #64236	; 0xfaec
   10508:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   1050c:	4293      	cmp	r3, r2
   1050e:	dc24      	bgt.n	1055a <LL_ErrorMsg+0x19a>
   10510:	f513 6fa3 	cmn.w	r3, #1304	; 0x518
   10514:	f000 8246 	beq.w	109a4 <LL_ErrorMsg+0x5e4>
   10518:	f513 6fa3 	cmn.w	r3, #1304	; 0x518
   1051c:	dc0e      	bgt.n	1053c <LL_ErrorMsg+0x17c>
   1051e:	f64f 22e6 	movw	r2, #64230	; 0xfae6
   10522:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10526:	4293      	cmp	r3, r2
   10528:	f000 8248 	beq.w	109bc <LL_ErrorMsg+0x5fc>
   1052c:	f64f 22e6 	movw	r2, #64230	; 0xfae6
   10530:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10534:	4293      	cmp	r3, r2
   10536:	f300 823b 	bgt.w	109b0 <LL_ErrorMsg+0x5f0>
   1053a:	e245      	b.n	109c8 <LL_ErrorMsg+0x608>
   1053c:	f64f 22ea 	movw	r2, #64234	; 0xfaea
   10540:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10544:	4293      	cmp	r3, r2
   10546:	f000 8221 	beq.w	1098c <LL_ErrorMsg+0x5cc>
   1054a:	f64f 22ea 	movw	r2, #64234	; 0xfaea
   1054e:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10552:	4293      	cmp	r3, r2
   10554:	f300 8214 	bgt.w	10980 <LL_ErrorMsg+0x5c0>
   10558:	e21e      	b.n	10998 <LL_ErrorMsg+0x5d8>
   1055a:	f513 6f96 	cmn.w	r3, #1200	; 0x4b0
   1055e:	f000 81f1 	beq.w	10944 <LL_ErrorMsg+0x584>
   10562:	f513 6f96 	cmn.w	r3, #1200	; 0x4b0
   10566:	dc15      	bgt.n	10594 <LL_ErrorMsg+0x1d4>
   10568:	f64f 324e 	movw	r2, #64334	; 0xfb4e
   1056c:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10570:	4293      	cmp	r3, r2
   10572:	f000 81f3 	beq.w	1095c <LL_ErrorMsg+0x59c>
   10576:	f64f 324e 	movw	r2, #64334	; 0xfb4e
   1057a:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   1057e:	4293      	cmp	r3, r2
   10580:	f300 81e6 	bgt.w	10950 <LL_ErrorMsg+0x590>
   10584:	f64f 324d 	movw	r2, #64333	; 0xfb4d
   10588:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   1058c:	4293      	cmp	r3, r2
   1058e:	f000 81eb 	beq.w	10968 <LL_ErrorMsg+0x5a8>
   10592:	e285      	b.n	10aa0 <LL_ErrorMsg+0x6e0>
   10594:	f64f 32b4 	movw	r2, #64436	; 0xfbb4
   10598:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   1059c:	4293      	cmp	r3, r2
   1059e:	f000 81c5 	beq.w	1092c <LL_ErrorMsg+0x56c>
   105a2:	f64f 32b4 	movw	r2, #64436	; 0xfbb4
   105a6:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   105aa:	4293      	cmp	r3, r2
   105ac:	dc07      	bgt.n	105be <LL_ErrorMsg+0x1fe>
   105ae:	f64f 32b3 	movw	r2, #64435	; 0xfbb3
   105b2:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   105b6:	4293      	cmp	r3, r2
   105b8:	f000 81be 	beq.w	10938 <LL_ErrorMsg+0x578>
   105bc:	e270      	b.n	10aa0 <LL_ErrorMsg+0x6e0>
   105be:	f64f 4205 	movw	r2, #64517	; 0xfc05
   105c2:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   105c6:	4293      	cmp	r3, r2
   105c8:	f000 81aa 	beq.w	10920 <LL_ErrorMsg+0x560>
   105cc:	f64f 4206 	movw	r2, #64518	; 0xfc06
   105d0:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   105d4:	4293      	cmp	r3, r2
   105d6:	f000 819d 	beq.w	10914 <LL_ErrorMsg+0x554>
   105da:	e261      	b.n	10aa0 <LL_ErrorMsg+0x6e0>
   105dc:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
   105e0:	f000 812c 	beq.w	1083c <LL_ErrorMsg+0x47c>
   105e4:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
   105e8:	dc62      	bgt.n	106b0 <LL_ErrorMsg+0x2f0>
   105ea:	f46f 727c 	mvn.w	r2, #1008	; 0x3f0
   105ee:	4293      	cmp	r3, r2
   105f0:	f000 815a 	beq.w	108a8 <LL_ErrorMsg+0x4e8>
   105f4:	f46f 727c 	mvn.w	r2, #1008	; 0x3f0
   105f8:	4293      	cmp	r3, r2
   105fa:	dc26      	bgt.n	1064a <LL_ErrorMsg+0x28a>
   105fc:	f46f 727d 	mvn.w	r2, #1012	; 0x3f4
   10600:	4293      	cmp	r3, r2
   10602:	f000 8169 	beq.w	108d8 <LL_ErrorMsg+0x518>
   10606:	f46f 727d 	mvn.w	r2, #1012	; 0x3f4
   1060a:	4293      	cmp	r3, r2
   1060c:	dc0e      	bgt.n	1062c <LL_ErrorMsg+0x26c>
   1060e:	f64f 4209 	movw	r2, #64521	; 0xfc09
   10612:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10616:	4293      	cmp	r3, r2
   10618:	f000 816a 	beq.w	108f0 <LL_ErrorMsg+0x530>
   1061c:	f64f 4209 	movw	r2, #64521	; 0xfc09
   10620:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10624:	4293      	cmp	r3, r2
   10626:	f300 815d 	bgt.w	108e4 <LL_ErrorMsg+0x524>
   1062a:	e167      	b.n	108fc <LL_ErrorMsg+0x53c>
   1062c:	f64f 420d 	movw	r2, #64525	; 0xfc0d
   10630:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10634:	4293      	cmp	r3, r2
   10636:	f000 8143 	beq.w	108c0 <LL_ErrorMsg+0x500>
   1063a:	f64f 420d 	movw	r2, #64525	; 0xfc0d
   1063e:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10642:	4293      	cmp	r3, r2
   10644:	f300 8136 	bgt.w	108b4 <LL_ErrorMsg+0x4f4>
   10648:	e140      	b.n	108cc <LL_ErrorMsg+0x50c>
   1064a:	f46f 727b 	mvn.w	r2, #1004	; 0x3ec
   1064e:	4293      	cmp	r3, r2
   10650:	f000 8112 	beq.w	10878 <LL_ErrorMsg+0x4b8>
   10654:	f46f 727b 	mvn.w	r2, #1004	; 0x3ec
   10658:	4293      	cmp	r3, r2
   1065a:	dc0e      	bgt.n	1067a <LL_ErrorMsg+0x2ba>
   1065c:	f64f 4211 	movw	r2, #64529	; 0xfc11
   10660:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10664:	4293      	cmp	r3, r2
   10666:	f000 8113 	beq.w	10890 <LL_ErrorMsg+0x4d0>
   1066a:	f64f 4211 	movw	r2, #64529	; 0xfc11
   1066e:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10672:	4293      	cmp	r3, r2
   10674:	f300 8106 	bgt.w	10884 <LL_ErrorMsg+0x4c4>
   10678:	e110      	b.n	1089c <LL_ErrorMsg+0x4dc>
   1067a:	f64f 4215 	movw	r2, #64533	; 0xfc15
   1067e:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10682:	4293      	cmp	r3, r2
   10684:	f000 80ec 	beq.w	10860 <LL_ErrorMsg+0x4a0>
   10688:	f64f 4215 	movw	r2, #64533	; 0xfc15
   1068c:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10690:	4293      	cmp	r3, r2
   10692:	f2c0 80eb 	blt.w	1086c <LL_ErrorMsg+0x4ac>
   10696:	f64f 4216 	movw	r2, #64534	; 0xfc16
   1069a:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   1069e:	4293      	cmp	r3, r2
   106a0:	f000 80d8 	beq.w	10854 <LL_ErrorMsg+0x494>
   106a4:	f46f 727a 	mvn.w	r2, #1000	; 0x3e8
   106a8:	4293      	cmp	r3, r2
   106aa:	f000 80cd 	beq.w	10848 <LL_ErrorMsg+0x488>
   106ae:	e1f7      	b.n	10aa0 <LL_ErrorMsg+0x6e0>
   106b0:	f513 7f75 	cmn.w	r3, #980	; 0x3d4
   106b4:	d07a      	beq.n	107ac <LL_ErrorMsg+0x3ec>
   106b6:	f513 7f75 	cmn.w	r3, #980	; 0x3d4
   106ba:	dc31      	bgt.n	10720 <LL_ErrorMsg+0x360>
   106bc:	f64f 4222 	movw	r2, #64546	; 0xfc22
   106c0:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   106c4:	4293      	cmp	r3, r2
   106c6:	d059      	beq.n	1077c <LL_ErrorMsg+0x3bc>
   106c8:	f64f 4222 	movw	r2, #64546	; 0xfc22
   106cc:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   106d0:	4293      	cmp	r3, r2
   106d2:	dc0a      	bgt.n	106ea <LL_ErrorMsg+0x32a>
   106d4:	f513 7f78 	cmn.w	r3, #992	; 0x3e0
   106d8:	d05c      	beq.n	10794 <LL_ErrorMsg+0x3d4>
   106da:	f513 7f78 	cmn.w	r3, #992	; 0x3e0
   106de:	dc53      	bgt.n	10788 <LL_ErrorMsg+0x3c8>
   106e0:	f46f 7278 	mvn.w	r2, #992	; 0x3e0
   106e4:	4293      	cmp	r3, r2
   106e6:	d05b      	beq.n	107a0 <LL_ErrorMsg+0x3e0>
   106e8:	e1da      	b.n	10aa0 <LL_ErrorMsg+0x6e0>
   106ea:	f64f 4229 	movw	r2, #64553	; 0xfc29
   106ee:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   106f2:	4293      	cmp	r3, r2
   106f4:	d06c      	beq.n	107d0 <LL_ErrorMsg+0x410>
   106f6:	f64f 4229 	movw	r2, #64553	; 0xfc29
   106fa:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   106fe:	4293      	cmp	r3, r2
   10700:	dc03      	bgt.n	1070a <LL_ErrorMsg+0x34a>
   10702:	f513 7f76 	cmn.w	r3, #984	; 0x3d8
   10706:	d069      	beq.n	107dc <LL_ErrorMsg+0x41c>
   10708:	e1ca      	b.n	10aa0 <LL_ErrorMsg+0x6e0>
   1070a:	f64f 422a 	movw	r2, #64554	; 0xfc2a
   1070e:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10712:	4293      	cmp	r3, r2
   10714:	d056      	beq.n	107c4 <LL_ErrorMsg+0x404>
   10716:	f46f 7275 	mvn.w	r2, #980	; 0x3d4
   1071a:	4293      	cmp	r3, r2
   1071c:	d04c      	beq.n	107b8 <LL_ErrorMsg+0x3f8>
   1071e:	e1bf      	b.n	10aa0 <LL_ErrorMsg+0x6e0>
   10720:	f513 7f70 	cmn.w	r3, #960	; 0x3c0
   10724:	d072      	beq.n	1080c <LL_ErrorMsg+0x44c>
   10726:	f513 7f70 	cmn.w	r3, #960	; 0x3c0
   1072a:	dc0d      	bgt.n	10748 <LL_ErrorMsg+0x388>
   1072c:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
   10730:	4293      	cmp	r3, r2
   10732:	d05f      	beq.n	107f4 <LL_ErrorMsg+0x434>
   10734:	f513 7f72 	cmn.w	r3, #968	; 0x3c8
   10738:	d062      	beq.n	10800 <LL_ErrorMsg+0x440>
   1073a:	f64f 4236 	movw	r2, #64566	; 0xfc36
   1073e:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10742:	4293      	cmp	r3, r2
   10744:	d050      	beq.n	107e8 <LL_ErrorMsg+0x428>
   10746:	e1ab      	b.n	10aa0 <LL_ErrorMsg+0x6e0>
   10748:	f64f 4242 	movw	r2, #64578	; 0xfc42
   1074c:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10750:	4293      	cmp	r3, r2
   10752:	d067      	beq.n	10824 <LL_ErrorMsg+0x464>
   10754:	f64f 4242 	movw	r2, #64578	; 0xfc42
   10758:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   1075c:	4293      	cmp	r3, r2
   1075e:	db5b      	blt.n	10818 <LL_ErrorMsg+0x458>
   10760:	f46f 726f 	mvn.w	r2, #956	; 0x3bc
   10764:	4293      	cmp	r3, r2
   10766:	d063      	beq.n	10830 <LL_ErrorMsg+0x470>
   10768:	f1b3 3fff 	cmp.w	r3, #4294967295
   1076c:	f040 8198 	bne.w	10aa0 <LL_ErrorMsg+0x6e0>
	{
	case -1:                                    pcError="";                 break;  // Timeout/Cancel at GPRS level
   10770:	f643 7398 	movw	r3, #16280	; 0x3f98
   10774:	f2c0 0302 	movt	r3, #2
   10778:	60bb      	str	r3, [r7, #8]
   1077a:	e197      	b.n	10aac <LL_ErrorMsg+0x6ec>
	                       // STATUS CODES (re-define in Training.h)
	// *** GPRS status ***
	case LL_STATUS_GPRS_NO_SIM:                 pcError="NO SIM";           break;  // No SIM card is inserted in the terminal
   1077c:	f643 739c 	movw	r3, #16284	; 0x3f9c
   10780:	f2c0 0302 	movt	r3, #2
   10784:	60bb      	str	r3, [r7, #8]
   10786:	e191      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_STATUS_GPRS_ERR_SIM_LOCK:           pcError="SIM LOCKED";       break;  // The SIM card is locked, enter PUK from Manager menu
   10788:	f643 73a4 	movw	r3, #16292	; 0x3fa4
   1078c:	f2c0 0302 	movt	r3, #2
   10790:	60bb      	str	r3, [r7, #8]
   10792:	e18b      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_STATUS_GPRS_ERR_PPP:                pcError="GPRS PPP ERROR";   break;  // Error occurred during the PPP link establishment
   10794:	f643 73b0 	movw	r3, #16304	; 0x3fb0
   10798:	f2c0 0302 	movt	r3, #2
   1079c:	60bb      	str	r3, [r7, #8]
   1079e:	e185      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_STATUS_GPRS_ERR_UNKNOWN:            pcError="GPRS UNKNOWN ERR"; break;  // Error GPRS status unknown
   107a0:	f643 73c0 	movw	r3, #16320	; 0x3fc0
   107a4:	f2c0 0302 	movt	r3, #2
   107a8:	60bb      	str	r3, [r7, #8]
   107aa:	e17f      	b.n	10aac <LL_ErrorMsg+0x6ec>
	// *** ETHERNET status ***
	case LL_STATUS_ETH_AVAILABLE:               pcError="LINK AVAILABLE";   break;  // The Ethernet link is available and ready to perform a communication
   107ac:	f643 73d4 	movw	r3, #16340	; 0x3fd4
   107b0:	f2c0 0302 	movt	r3, #2
   107b4:	60bb      	str	r3, [r7, #8]
   107b6:	e179      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_STATUS_ETH_NO_DEFAULT_ROUTE:        pcError="NO DEFAULT ROUTE"; break;  // No default route is configured for Ethernet
   107b8:	f643 73e4 	movw	r3, #16356	; 0x3fe4
   107bc:	f2c0 0302 	movt	r3, #2
   107c0:	60bb      	str	r3, [r7, #8]
   107c2:	e173      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_STATUS_ETH_NOT_PLUGGED:             pcError="CABLE NOT PLUG";   break;  // The Ethernet cable is not plugged to the terminal
   107c4:	f643 73f8 	movw	r3, #16376	; 0x3ff8
   107c8:	f2c0 0302 	movt	r3, #2
   107cc:	60bb      	str	r3, [r7, #8]
   107ce:	e16d      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_STATUS_ETH_BASE_NOT_READY:          pcError="BASE NOT READY";   break;  // The link between the Ethernet base and the terminal is not ready yet
   107d0:	f244 0308 	movw	r3, #16392	; 0x4008
   107d4:	f2c0 0302 	movt	r3, #2
   107d8:	60bb      	str	r3, [r7, #8]
   107da:	e167      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_STATUS_ETH_OUT_OF_BASE:             pcError="OUT OF BASE";      break;  // An Ethernet link is available through a base, but the terminal needs to be on its cradle to use it
   107dc:	f244 0318 	movw	r3, #16408	; 0x4018
   107e0:	f2c0 0302 	movt	r3, #2
   107e4:	60bb      	str	r3, [r7, #8]
   107e6:	e161      	b.n	10aac <LL_ErrorMsg+0x6ec>
	// *** PHYSICAL status ***
	case LL_STATUS_PHY_PERIPHERAL_BUSY:         pcError="PERIPH BUSY";      break;  // The specified interface of the base is already used
   107e8:	f244 0324 	movw	r3, #16420	; 0x4024
   107ec:	f2c0 0302 	movt	r3, #2
   107f0:	60bb      	str	r3, [r7, #8]
   107f2:	e15b      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_STATUS_PHY_PERIPHERAL_OUT_OF_BASE:  pcError="OUT OF BASE";      break;  // The peripheral can't be used since the terminal is not on its cradle
   107f4:	f244 0318 	movw	r3, #16408	; 0x4018
   107f8:	f2c0 0302 	movt	r3, #2
   107fc:	60bb      	str	r3, [r7, #8]
   107fe:	e155      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_STATUS_PHY_CONVERTER_NOT_PLUGGED:   pcError="CONVERT NOT PLUG"; break;  // The converter is unplugged
   10800:	f244 0330 	movw	r3, #16432	; 0x4030
   10804:	f2c0 0302 	movt	r3, #2
   10808:	60bb      	str	r3, [r7, #8]
   1080a:	e14f      	b.n	10aac <LL_ErrorMsg+0x6ec>
	// *** BLUETOOTH status ***
	case LL_STATUS_BT_NO_BASE_ASSOCIATED:       pcError="NO BASE ASSOCIAT"; break;  // No base is associated with the terminal
   1080c:	f244 0344 	movw	r3, #16452	; 0x4044
   10810:	f2c0 0302 	movt	r3, #2
   10814:	60bb      	str	r3, [r7, #8]
   10816:	e149      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_STATUS_BT_PERIPHERAL_NOT_AVAILABLE: pcError="PB BASE ASSOCIAT"; break;  // The associated base does not have the specified communication interface
   10818:	f244 0358 	movw	r3, #16472	; 0x4058
   1081c:	f2c0 0302 	movt	r3, #2
   10820:	60bb      	str	r3, [r7, #8]
   10822:	e143      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_STATUS_BT_PERIPHERAL_BUSY:          pcError="BASE BUSY";        break;  // The specified interface of the base is already used
   10824:	f244 036c 	movw	r3, #16492	; 0x406c
   10828:	f2c0 0302 	movt	r3, #2
   1082c:	60bb      	str	r3, [r7, #8]
   1082e:	e13d      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_STATUS_BT_BASE_NOT_AVAILABLE:       pcError="BASE UNKNOWN";     break;  // The specified base is not available
   10830:	f244 0378 	movw	r3, #16504	; 0x4078
   10834:	f2c0 0302 	movt	r3, #2
   10838:	60bb      	str	r3, [r7, #8]
   1083a:	e137      	b.n	10aac <LL_ErrorMsg+0x6ec>
	                       // ERRORS CODES
    // *** Generic errors ***
	case LL_ERROR_INTERNAL_RESOURCE:            pcError="RESOURCE ERROR";   break;  // Error in resource allocation (Refer the diagnostic ticket for more information)
   1083c:	f244 0388 	movw	r3, #16520	; 0x4088
   10840:	f2c0 0302 	movt	r3, #2
   10844:	60bb      	str	r3, [r7, #8]
   10846:	e131      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_UNKNOWN_CONFIG:               pcError="UNKOWN CONFIG";    break;  // Unknown Link Layer configuration
   10848:	f244 0398 	movw	r3, #16536	; 0x4098
   1084c:	f2c0 0302 	movt	r3, #2
   10850:	60bb      	str	r3, [r7, #8]
   10852:	e12b      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_INVALID_HANDLE:               pcError="INVALID HANDLE";   break;  // The specified handle is not valid
   10854:	f244 03a8 	movw	r3, #16552	; 0x40a8
   10858:	f2c0 0302 	movt	r3, #2
   1085c:	60bb      	str	r3, [r7, #8]
   1085e:	e125      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_SERVICE_NOT_SUPPORTED:        pcError="INVALID SERVICE";  break;  // Service from the Link Layer is not supported
   10860:	f244 03b8 	movw	r3, #16568	; 0x40b8
   10864:	f2c0 0302 	movt	r3, #2
   10868:	60bb      	str	r3, [r7, #8]
   1086a:	e11f      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_TIMEOUT:                      pcError="TIMEOUT/CANCEL";   break;  // A timeout has expired
   1086c:	f244 03c8 	movw	r3, #16584	; 0x40c8
   10870:	f2c0 0302 	movt	r3, #2
   10874:	60bb      	str	r3, [r7, #8]
   10876:	e119      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_INVALID_PARAMETER:            pcError="INVALID PARAM";    break;  // The specified parameter is not valid
   10878:	f244 03d8 	movw	r3, #16600	; 0x40d8
   1087c:	f2c0 0302 	movt	r3, #2
   10880:	60bb      	str	r3, [r7, #8]
   10882:	e113      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_NOT_CONNECTED:                pcError="NOT CONNECT";      break;  // The communication has been disconnected (The link has been disconnected by the server)
   10884:	f244 03e8 	movw	r3, #16616	; 0x40e8
   10888:	f2c0 0302 	movt	r3, #2
   1088c:	60bb      	str	r3, [r7, #8]
   1088e:	e10d      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_ALREADY_CONNECTED:            pcError="ALREADY CONNECT";  break;  // You can not modify or delete a configuration that is in use (Disconnect it first)
   10890:	f244 03f4 	movw	r3, #16628	; 0x40f4
   10894:	f2c0 0302 	movt	r3, #2
   10898:	60bb      	str	r3, [r7, #8]
   1089a:	e107      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_DISCONNECTED:                 pcError="DISCONNECT";       break;  // The communication is disconnected due to a protocol or physical error
   1089c:	f244 1304 	movw	r3, #16644	; 0x4104
   108a0:	f2c0 0302 	movt	r3, #2
   108a4:	60bb      	str	r3, [r7, #8]
   108a6:	e101      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_BUSY:                         pcError="BUSY";             break;  // The communication is busy
   108a8:	f244 1310 	movw	r3, #16656	; 0x4110
   108ac:	f2c0 0302 	movt	r3, #2
   108b0:	60bb      	str	r3, [r7, #8]
   108b2:	e0fb      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_SERVICE_FORBIDDEN:            pcError="SERVICE REFUSED";  break;  // Service from the Link Layer is forbidden
   108b4:	f244 1318 	movw	r3, #16664	; 0x4118
   108b8:	f2c0 0302 	movt	r3, #2
   108bc:	60bb      	str	r3, [r7, #8]
   108be:	e0f5      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_NOT_READY:                    pcError="NOT READY";        break;  // The communication is not ready
   108c0:	f244 1328 	movw	r3, #16680	; 0x4128
   108c4:	f2c0 0302 	movt	r3, #2
   108c8:	60bb      	str	r3, [r7, #8]
   108ca:	e0ef      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_NETWORK_NOT_READY:            pcError="NETWRK NOT READY"; break;  // The physical network (GSM, GPRS...) is not ready to perform the requested
   108cc:	f244 1334 	movw	r3, #16692	; 0x4134
   108d0:	f2c0 0302 	movt	r3, #2
   108d4:	60bb      	str	r3, [r7, #8]
   108d6:	e0e9      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_NETWORK_NOT_SUPPORTED:        pcError="INVALID NETWORK";  break;  // The requested physical network is not supported by the terminal
   108d8:	f244 1348 	movw	r3, #16712	; 0x4148
   108dc:	f2c0 0302 	movt	r3, #2
   108e0:	60bb      	str	r3, [r7, #8]
   108e2:	e0e3      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_NETWORK_ALREADY_CONNECTED:    pcError="NETWORK CONNECT";  break;  // Only returned by LL_GPRS_Connect() (The connection on the GPRS/3G network is already OK)
   108e4:	f244 1358 	movw	r3, #16728	; 0x4158
   108e8:	f2c0 0302 	movt	r3, #2
   108ec:	60bb      	str	r3, [r7, #8]
   108ee:	e0dd      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_NETWORK_ERROR:                pcError="NETWORK ERROR";    break;  // Network error (Such as Ethernet cable not plugged, default route not configured...)
   108f0:	f244 1368 	movw	r3, #16744	; 0x4168
   108f4:	f2c0 0302 	movt	r3, #2
   108f8:	60bb      	str	r3, [r7, #8]
   108fa:	e0d7      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_DLL:                          pcError="SSL DLL MISSING";  break;  // The SSL DLL is not loaded in the terminal
   108fc:	f244 1378 	movw	r3, #16760	; 0x4178
   10900:	f2c0 0302 	movt	r3, #2
   10904:	60bb      	str	r3, [r7, #8]
   10906:	e0d1      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_OUTPUT_BUFFER_TOO_SHORT:      pcError="BUFFER TOO SHORT"; break;  // Internal error (The interface object size is too short)
   10908:	f244 1388 	movw	r3, #16776	; 0x4188
   1090c:	f2c0 0302 	movt	r3, #2
   10910:	60bb      	str	r3, [r7, #8]
   10912:	e0cb      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_SERVICE_CALL_FAILURE:         pcError="NO LINK LAYER";    break;  // Error calling the service (Please check that the LinkLayer component is loaded in the terminal)
   10914:	f244 139c 	movw	r3, #16796	; 0x419c
   10918:	f2c0 0302 	movt	r3, #2
   1091c:	60bb      	str	r3, [r7, #8]
   1091e:	e0c5      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_IP_VERSION_REQUIRED:          pcError="WRONG LINK LAYER"; break;  // The configuration requires the TCP/IP version of LinkLayer component
   10920:	f244 13ac 	movw	r3, #16812	; 0x41ac
   10924:	f2c0 0302 	movt	r3, #2
   10928:	60bb      	str	r3, [r7, #8]
   1092a:	e0bf      	b.n	10aac <LL_ErrorMsg+0x6ec>
	// *** Session errors ***
	case LL_SESSION_ERROR_TOO_MANY_PROTOCOLS:   pcError="TOO MANY PROTOCL"; break;  // Invalid session stack (It contains too many protocols)
   1092c:	f244 13c0 	movw	r3, #16832	; 0x41c0
   10930:	f2c0 0302 	movt	r3, #2
   10934:	60bb      	str	r3, [r7, #8]
   10936:	e0b9      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_SESSION_ERROR_UNKNOWN_PROTOCOL:     pcError="UNKNOWN PROTOCOL"; break;  // Invalid session stack (It contains an unknown protocol)
   10938:	f244 13d4 	movw	r3, #16852	; 0x41d4
   1093c:	f2c0 0302 	movt	r3, #2
   10940:	60bb      	str	r3, [r7, #8]
   10942:	e0b3      	b.n	10aac <LL_ErrorMsg+0x6ec>
	// *** Physical layer errors ***
	case LL_ERROR_PHYSICAL_OVERRUN_BUFFER:      pcError="OVERRUN BUFFER";   break;  // Overrun buffer error
   10944:	f244 13e8 	movw	r3, #16872	; 0x41e8
   10948:	f2c0 0302 	movt	r3, #2
   1094c:	60bb      	str	r3, [r7, #8]
   1094e:	e0ad      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_PHYSICAL_OVERRUN:             pcError="OVERRUN";          break;  // Overrun error (the stop bit is missing)
   10950:	f244 13f8 	movw	r3, #16888	; 0x41f8
   10954:	f2c0 0302 	movt	r3, #2
   10958:	60bb      	str	r3, [r7, #8]
   1095a:	e0a7      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_PHYSICAL_FRAMING:             pcError="FRAMING ERROR";    break;  // Framing error
   1095c:	f244 2300 	movw	r3, #16896	; 0x4200
   10960:	f2c0 0302 	movt	r3, #2
   10964:	60bb      	str	r3, [r7, #8]
   10966:	e0a1      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_PHYSICAL_PARITY:              pcError="PARITY ERROR";     break;  // Parity error
   10968:	f244 2310 	movw	r3, #16912	; 0x4210
   1096c:	f2c0 0302 	movt	r3, #2
   10970:	60bb      	str	r3, [r7, #8]
   10972:	e09b      	b.n	10aac <LL_ErrorMsg+0x6ec>
	// *** Modem errors ***
	case LL_MODEM_ERROR_SEND_BUFFER_OVERRUN:    pcError="AT CMD OVERRUN";   break;  // Overrun error of the sending buffer
   10974:	f244 2320 	movw	r3, #16928	; 0x4220
   10978:	f2c0 0302 	movt	r3, #2
   1097c:	60bb      	str	r3, [r7, #8]
   1097e:	e095      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_MODEM_ERROR_INIT_MODEM:             pcError="INIT MODEM ERR";   break;  // String AT command initialization failed
   10980:	f244 2330 	movw	r3, #16944	; 0x4230
   10984:	f2c0 0302 	movt	r3, #2
   10988:	60bb      	str	r3, [r7, #8]
   1098a:	e08f      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_MODEM_ERROR_RESPONSE_ERROR:         pcError="INVALID AT CMD";   break;  // The modem has returned an error
   1098c:	f244 2340 	movw	r3, #16960	; 0x4240
   10990:	f2c0 0302 	movt	r3, #2
   10994:	60bb      	str	r3, [r7, #8]
   10996:	e089      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_MODEM_ERROR_RESPONSE_BLACKLISTED:   pcError="RESP BLACKLISTED"; break;  // The dialed number is blacklisted
   10998:	f244 2350 	movw	r3, #16976	; 0x4250
   1099c:	f2c0 0302 	movt	r3, #2
   109a0:	60bb      	str	r3, [r7, #8]
   109a2:	e083      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_MODEM_ERROR_RESPONSE_DELAYED:       pcError="RESP DELAYED";     break;  // The modem has returned the DELAYED error
   109a4:	f244 2364 	movw	r3, #16996	; 0x4264
   109a8:	f2c0 0302 	movt	r3, #2
   109ac:	60bb      	str	r3, [r7, #8]
   109ae:	e07d      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_MODEM_ERROR_RESPONSE_NO_DIALTONE:   pcError="NO DIALTONE";      break;  // No dial tone error
   109b0:	f244 2374 	movw	r3, #17012	; 0x4274
   109b4:	f2c0 0302 	movt	r3, #2
   109b8:	60bb      	str	r3, [r7, #8]
   109ba:	e077      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_MODEM_ERROR_RESPONSE_BUSY:          pcError="LINE BUSY";        break;  // The PSTN line is busy
   109bc:	f244 2380 	movw	r3, #17024	; 0x4280
   109c0:	f2c0 0302 	movt	r3, #2
   109c4:	60bb      	str	r3, [r7, #8]
   109c6:	e071      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_MODEM_ERROR_RESPONSE_NO_ANSWER:     pcError="NO ANSWER";        break;  // No answer from the remote part
   109c8:	f244 238c 	movw	r3, #17036	; 0x428c
   109cc:	f2c0 0302 	movt	r3, #2
   109d0:	60bb      	str	r3, [r7, #8]
   109d2:	e06b      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_MODEM_ERROR_RESPONSE_NO_CARRIER:    pcError="NO CARRIER";       break;  // The communication has failed upon reception of NO CARRIER
   109d4:	f244 2398 	movw	r3, #17048	; 0x4298
   109d8:	f2c0 0302 	movt	r3, #2
   109dc:	60bb      	str	r3, [r7, #8]
   109de:	e065      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_MODEM_ERROR_RESPONSE_INVALID:       pcError="INVALID ANSWER";   break;  // The modem has returned an unexpected answer
   109e0:	f244 23a4 	movw	r3, #17060	; 0x42a4
   109e4:	f2c0 0302 	movt	r3, #2
   109e8:	60bb      	str	r3, [r7, #8]
   109ea:	e05f      	b.n	10aac <LL_ErrorMsg+0x6ec>
	// *** SDL errors ***
	case LL_HDLC_ERROR_CONNECT_TIMEOUT:         pcError="SDLC TIMEOUT";     break;  // The timeout of the HDLC connection has expired
   109ec:	f244 23b4 	movw	r3, #17076	; 0x42b4
   109f0:	f2c0 0302 	movt	r3, #2
   109f4:	60bb      	str	r3, [r7, #8]
   109f6:	e059      	b.n	10aac <LL_ErrorMsg+0x6ec>
	// *** PPP errors ***
	case LL_ERROR_PPP_CONNECT:                  pcError="PPP CONNECT ERR";  break;  // PPP connection error (Connection with the PPP provider failed (problem when negociating PPP options...))
   109f8:	f244 23c4 	movw	r3, #17092	; 0x42c4
   109fc:	f2c0 0302 	movt	r3, #2
   10a00:	60bb      	str	r3, [r7, #8]
   10a02:	e053      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_PPP_AUTHENTICATION:           pcError="PPP AUTH ERROR";   break;  // PPP authentication error (The login and the password are not valid)
   10a04:	f244 23d4 	movw	r3, #17108	; 0x42d4
   10a08:	f2c0 0302 	movt	r3, #2
   10a0c:	60bb      	str	r3, [r7, #8]
   10a0e:	e04d      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_PPP_RAS_MODE:                 pcError="PPP RAS ERROR";    break;  // PPP connection error during the exchange "CLIENT" <-> "CLIENTSERVER"
   10a10:	f244 23e4 	movw	r3, #17124	; 0x42e4
   10a14:	f2c0 0302 	movt	r3, #2
   10a18:	60bb      	str	r3, [r7, #8]
   10a1a:	e047      	b.n	10aac <LL_ErrorMsg+0x6ec>
	// *** TCP/IP errors ***
	case LL_ERROR_UNKNOWN_HOST:                 pcError="UNKNOWN HOST";     break;  // Unable to resolve the DNS name
   10a1c:	f244 23f4 	movw	r3, #17140	; 0x42f4
   10a20:	f2c0 0302 	movt	r3, #2
   10a24:	60bb      	str	r3, [r7, #8]
   10a26:	e041      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_CREATE_SOCKET:                pcError="SOCK CREATE ERR";  break;  // Error during the socket creation (Can be observed when too many sockets are used at the same time)
   10a28:	f244 3304 	movw	r3, #17156	; 0x4304
   10a2c:	f2c0 0302 	movt	r3, #2
   10a30:	60bb      	str	r3, [r7, #8]
   10a32:	e03b      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_CANNOT_CONNECT:               pcError="SOCK CONNECT ERR"; break;  // Error during the socket connection (Either the remote server is not responding, or settings problems (configuration parameters, wrong certificate in SSL...))
   10a34:	f244 3314 	movw	r3, #17172	; 0x4314
   10a38:	f2c0 0302 	movt	r3, #2
   10a3c:	60bb      	str	r3, [r7, #8]
   10a3e:	e035      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_CONNECTION_REFUSED:           pcError="CONNECT REFUSED";  break;  // The connection is refused by the remote server (In TCP, the 'errno' value of the socket is __ECONNREFUSED or In SSL, this can be caused by a failure during the SSL handshake)
   10a40:	f244 3328 	movw	r3, #17192	; 0x4328
   10a44:	f2c0 0302 	movt	r3, #2
   10a48:	60bb      	str	r3, [r7, #8]
   10a4a:	e02f      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_HOST_UNREACHABLE:             pcError="HOST UNREACHABLE"; break;  // The host is unreachable (Cannot access the server : The 'errno' value of the socket is __EHOSTUNREACH)
   10a4c:	f244 3338 	movw	r3, #17208	; 0x4338
   10a50:	f2c0 0302 	movt	r3, #2
   10a54:	60bb      	str	r3, [r7, #8]
   10a56:	e029      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_ERROR_NETWORK_UNREACHABLE:          pcError="NET UNREACHABLE";  break;  // The network is unreachable (Cannot access the server : The 'errno' value of the socket is __ENETUNREACH)
   10a58:	f244 334c 	movw	r3, #17228	; 0x434c
   10a5c:	f2c0 0302 	movt	r3, #2
   10a60:	60bb      	str	r3, [r7, #8]
   10a62:	e023      	b.n	10aac <LL_ErrorMsg+0x6ec>
	// *** X28 errors ***
	case LL_X28_LIB:                            pcError="X28 LIB";          break;  // The network as returned the X28 message "LIB"
   10a64:	f244 335c 	movw	r3, #17244	; 0x435c
   10a68:	f2c0 0302 	movt	r3, #2
   10a6c:	60bb      	str	r3, [r7, #8]
   10a6e:	e01d      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_X28_RESET:                          pcError="X28 RESET";        break;  // The network as returned the X28 message "RESET"
   10a70:	f244 3364 	movw	r3, #17252	; 0x4364
   10a74:	f2c0 0302 	movt	r3, #2
   10a78:	60bb      	str	r3, [r7, #8]
   10a7a:	e017      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_X28_CLR:                            pcError="X28 CLR";          break;  // The network as returned the X28 message "CLR"
   10a7c:	f244 3370 	movw	r3, #17264	; 0x4370
   10a80:	f2c0 0302 	movt	r3, #2
   10a84:	60bb      	str	r3, [r7, #8]
   10a86:	e011      	b.n	10aac <LL_ErrorMsg+0x6ec>
	// *** SSL errors ***
	case LL_ERROR_SSL_PROFILE:                  pcError="SSL PROFILE ERR";  break;  // The SSL profile cannot be loaded
   10a88:	f244 3378 	movw	r3, #17272	; 0x4378
   10a8c:	f2c0 0302 	movt	r3, #2
   10a90:	60bb      	str	r3, [r7, #8]
   10a92:	e00b      	b.n	10aac <LL_ErrorMsg+0x6ec>
	case LL_SSL_ERROR_SPECIFIC:                 pcError="SSL SPECIFIC ERR"; break;  // Base error for all SSL Specific error (from -9000 to -12000)
   10a94:	f244 3388 	movw	r3, #17288	; 0x4388
   10a98:	f2c0 0302 	movt	r3, #2
   10a9c:	60bb      	str	r3, [r7, #8]
   10a9e:	e005      	b.n	10aac <LL_ErrorMsg+0x6ec>
	// *** Other errors
	default:                                    pcError="ERROR UNKNOWN";    break;
   10aa0:	f643 7388 	movw	r3, #16264	; 0x3f88
   10aa4:	f2c0 0302 	movt	r3, #2
   10aa8:	60bb      	str	r3, [r7, #8]
   10aaa:	bf00      	nop
	}
	
	return pcError;
   10aac:	68bb      	ldr	r3, [r7, #8]
}
   10aae:	4618      	mov	r0, r3
   10ab0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   10ab4:	f2c0 0302 	movt	r3, #2
   10ab8:	68fa      	ldr	r2, [r7, #12]
   10aba:	681b      	ldr	r3, [r3, #0]
   10abc:	429a      	cmp	r2, r3
   10abe:	d001      	beq.n	10ac4 <LL_ErrorMsg+0x704>
   10ac0:	f7f8 fa70 	bl	8fa4 <__stack_chk_fail>
   10ac4:	f107 0710 	add.w	r7, r7, #16
   10ac8:	46bd      	mov	sp, r7
   10aca:	bd80      	pop	{r7, pc}

00010acc <SEC_ErrorMsg>:
//  This function has return value.
//    A message string regarding the error value.
//****************************************************************************

char* SEC_ErrorMsg (int iValue)
{
   10acc:	b580      	push	{r7, lr}
   10ace:	b084      	sub	sp, #16
   10ad0:	af00      	add	r7, sp, #0
   10ad2:	6078      	str	r0, [r7, #4]
   10ad4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   10ad8:	f2c0 0302 	movt	r3, #2
   10adc:	681b      	ldr	r3, [r3, #0]
   10ade:	60fb      	str	r3, [r7, #12]
    // ***************
	char *pcError;

	// List error messages
    // *******************
	switch (iValue)
   10ae0:	687b      	ldr	r3, [r7, #4]
   10ae2:	f64f 32f9 	movw	r2, #64505	; 0xfbf9
   10ae6:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10aea:	4293      	cmp	r3, r2
   10aec:	f000 8093 	beq.w	10c16 <SEC_ErrorMsg+0x14a>
   10af0:	f64f 32f9 	movw	r2, #64505	; 0xfbf9
   10af4:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10af8:	4293      	cmp	r3, r2
   10afa:	dc36      	bgt.n	10b6a <SEC_ErrorMsg+0x9e>
   10afc:	f64f 32f4 	movw	r2, #64500	; 0xfbf4
   10b00:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10b04:	4293      	cmp	r3, r2
   10b06:	f000 80a4 	beq.w	10c52 <SEC_ErrorMsg+0x186>
   10b0a:	f64f 32f4 	movw	r2, #64500	; 0xfbf4
   10b0e:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10b12:	4293      	cmp	r3, r2
   10b14:	dc15      	bgt.n	10b42 <SEC_ErrorMsg+0x76>
   10b16:	f64f 32f2 	movw	r2, #64498	; 0xfbf2
   10b1a:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10b1e:	4293      	cmp	r3, r2
   10b20:	f000 80a3 	beq.w	10c6a <SEC_ErrorMsg+0x19e>
   10b24:	f64f 32f2 	movw	r2, #64498	; 0xfbf2
   10b28:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10b2c:	4293      	cmp	r3, r2
   10b2e:	f300 8096 	bgt.w	10c5e <SEC_ErrorMsg+0x192>
   10b32:	f64f 32f1 	movw	r2, #64497	; 0xfbf1
   10b36:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10b3a:	4293      	cmp	r3, r2
   10b3c:	f000 809b 	beq.w	10c76 <SEC_ErrorMsg+0x1aa>
   10b40:	e09f      	b.n	10c82 <SEC_ErrorMsg+0x1b6>
   10b42:	f64f 32f6 	movw	r2, #64502	; 0xfbf6
   10b46:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10b4a:	4293      	cmp	r3, r2
   10b4c:	d075      	beq.n	10c3a <SEC_ErrorMsg+0x16e>
   10b4e:	f64f 32f6 	movw	r2, #64502	; 0xfbf6
   10b52:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10b56:	4293      	cmp	r3, r2
   10b58:	db75      	blt.n	10c46 <SEC_ErrorMsg+0x17a>
   10b5a:	f46f 6281 	mvn.w	r2, #1032	; 0x408
   10b5e:	4293      	cmp	r3, r2
   10b60:	d065      	beq.n	10c2e <SEC_ErrorMsg+0x162>
   10b62:	f513 6f81 	cmn.w	r3, #1032	; 0x408
   10b66:	d05c      	beq.n	10c22 <SEC_ErrorMsg+0x156>
   10b68:	e08b      	b.n	10c82 <SEC_ErrorMsg+0x1b6>
   10b6a:	f64f 32fd 	movw	r2, #64509	; 0xfbfd
   10b6e:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10b72:	4293      	cmp	r3, r2
   10b74:	d037      	beq.n	10be6 <SEC_ErrorMsg+0x11a>
   10b76:	f64f 32fd 	movw	r2, #64509	; 0xfbfd
   10b7a:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10b7e:	4293      	cmp	r3, r2
   10b80:	dc0c      	bgt.n	10b9c <SEC_ErrorMsg+0xd0>
   10b82:	f64f 32fb 	movw	r2, #64507	; 0xfbfb
   10b86:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10b8a:	4293      	cmp	r3, r2
   10b8c:	d037      	beq.n	10bfe <SEC_ErrorMsg+0x132>
   10b8e:	f64f 32fb 	movw	r2, #64507	; 0xfbfb
   10b92:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10b96:	4293      	cmp	r3, r2
   10b98:	dc2b      	bgt.n	10bf2 <SEC_ErrorMsg+0x126>
   10b9a:	e036      	b.n	10c0a <SEC_ErrorMsg+0x13e>
   10b9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
   10ba0:	4293      	cmp	r3, r2
   10ba2:	d014      	beq.n	10bce <SEC_ErrorMsg+0x102>
   10ba4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
   10ba8:	4293      	cmp	r3, r2
   10baa:	db16      	blt.n	10bda <SEC_ErrorMsg+0x10e>
   10bac:	f513 6f80 	cmn.w	r3, #1024	; 0x400
   10bb0:	d007      	beq.n	10bc2 <SEC_ErrorMsg+0xf6>
   10bb2:	2b01      	cmp	r3, #1
   10bb4:	d165      	bne.n	10c82 <SEC_ErrorMsg+0x1b6>
	{
                            // ERRORS CODES
	// *** Schemes common errors ***
	case 1:                         pcError="SCHEME MISSING\n"
   10bb6:	f244 339c 	movw	r3, #17308	; 0x439c
   10bba:	f2c0 0302 	movt	r3, #2
   10bbe:	60bb      	str	r3, [r7, #8]
			                                "OR WRONG PROFILE"; break;
   10bc0:	e0cc      	b.n	10d5c <SEC_ErrorMsg+0x290>
	case ERR_ID_NOT_FOUND:          pcError="ID NOT FOUND";     break;
   10bc2:	f244 33bc 	movw	r3, #17340	; 0x43bc
   10bc6:	f2c0 0302 	movt	r3, #2
   10bca:	60bb      	str	r3, [r7, #8]
   10bcc:	e0c6      	b.n	10d5c <SEC_ErrorMsg+0x290>
	case ERR_PIN_CODE_NOT_FOUND:    pcError="PIN NOT FOUND";    break;
   10bce:	f244 33cc 	movw	r3, #17356	; 0x43cc
   10bd2:	f2c0 0302 	movt	r3, #2
   10bd6:	60bb      	str	r3, [r7, #8]
   10bd8:	e0c0      	b.n	10d5c <SEC_ErrorMsg+0x290>
	case ERR_BAD_PIN_CODE_LEN:      pcError="PIN BAD LENGTH";   break;
   10bda:	f244 33dc 	movw	r3, #17372	; 0x43dc
   10bde:	f2c0 0302 	movt	r3, #2
   10be2:	60bb      	str	r3, [r7, #8]
   10be4:	e0ba      	b.n	10d5c <SEC_ErrorMsg+0x290>
	case ERR_BAD_IAPP_OPERATION:    pcError="IAPP FAILED";      break;
   10be6:	f244 33ec 	movw	r3, #17388	; 0x43ec
   10bea:	f2c0 0302 	movt	r3, #2
   10bee:	60bb      	str	r3, [r7, #8]
   10bf0:	e0b4      	b.n	10d5c <SEC_ErrorMsg+0x290>
	case ERR_UNKNOW_FORMAT:         pcError="UNKNOWN FORMAT";   break;
   10bf2:	f244 33f8 	movw	r3, #17400	; 0x43f8
   10bf6:	f2c0 0302 	movt	r3, #2
   10bfa:	60bb      	str	r3, [r7, #8]
   10bfc:	e0ae      	b.n	10d5c <SEC_ErrorMsg+0x290>
	case ERR_DUKPT_END_OF_LIFE:     pcError="DUKPT EXPIRED";    break;
   10bfe:	f244 4308 	movw	r3, #17416	; 0x4408
   10c02:	f2c0 0302 	movt	r3, #2
   10c06:	60bb      	str	r3, [r7, #8]
   10c08:	e0a8      	b.n	10d5c <SEC_ErrorMsg+0x290>
	case ERR_BAD_ACTION_TYPE:       pcError="BAD ACTION TYPE";  break;
   10c0a:	f244 4318 	movw	r3, #17432	; 0x4418
   10c0e:	f2c0 0302 	movt	r3, #2
   10c12:	60bb      	str	r3, [r7, #8]
   10c14:	e0a2      	b.n	10d5c <SEC_ErrorMsg+0x290>
	case ERR_ENTRY_CANCELED:        pcError="ENTRY CANCELED";   break;
   10c16:	f244 4328 	movw	r3, #17448	; 0x4428
   10c1a:	f2c0 0302 	movt	r3, #2
   10c1e:	60bb      	str	r3, [r7, #8]
   10c20:	e09c      	b.n	10d5c <SEC_ErrorMsg+0x290>
	case ERR_TIMEOUT:               pcError="TIMEOUT EXPIRED";  break;
   10c22:	f244 4338 	movw	r3, #17464	; 0x4438
   10c26:	f2c0 0302 	movt	r3, #2
   10c2a:	60bb      	str	r3, [r7, #8]
   10c2c:	e096      	b.n	10d5c <SEC_ErrorMsg+0x290>
	case ERR_BAD_IHM_OPERATION:     pcError="HMI FAILED";       break;
   10c2e:	f244 4348 	movw	r3, #17480	; 0x4448
   10c32:	f2c0 0302 	movt	r3, #2
   10c36:	60bb      	str	r3, [r7, #8]
   10c38:	e090      	b.n	10d5c <SEC_ErrorMsg+0x290>
	case ERR_SYSTEM:                pcError="SYSTEM ERROR";     break;
   10c3a:	f244 4354 	movw	r3, #17492	; 0x4454
   10c3e:	f2c0 0302 	movt	r3, #2
   10c42:	60bb      	str	r3, [r7, #8]
   10c44:	e08a      	b.n	10d5c <SEC_ErrorMsg+0x290>
	case ERR_BAD_PARAM:             pcError="BAD PARAMETER";    break;
   10c46:	f244 4364 	movw	r3, #17508	; 0x4464
   10c4a:	f2c0 0302 	movt	r3, #2
   10c4e:	60bb      	str	r3, [r7, #8]
   10c50:	e084      	b.n	10d5c <SEC_ErrorMsg+0x290>
	case ERR_MAC_VERIFY:            pcError="MAC VERIFY KO";    break;
   10c52:	f244 4374 	movw	r3, #17524	; 0x4474
   10c56:	f2c0 0302 	movt	r3, #2
   10c5a:	60bb      	str	r3, [r7, #8]
   10c5c:	e07e      	b.n	10d5c <SEC_ErrorMsg+0x290>
	case ERR_MAC_KEY:               pcError="MAC KEY FAILED";   break;
   10c5e:	f244 4384 	movw	r3, #17540	; 0x4484
   10c62:	f2c0 0302 	movt	r3, #2
   10c66:	60bb      	str	r3, [r7, #8]
   10c68:	e078      	b.n	10d5c <SEC_ErrorMsg+0x290>
	case ERR_DUKPT_NOT_IN_FUNCTION: pcError="DUKPT MISSING";    break;
   10c6a:	f244 4394 	movw	r3, #17556	; 0x4494
   10c6e:	f2c0 0302 	movt	r3, #2
   10c72:	60bb      	str	r3, [r7, #8]
   10c74:	e072      	b.n	10d5c <SEC_ErrorMsg+0x290>
	case ERR_DIFFERENCE:            pcError="ERROR MISMATCHED"; break;
   10c76:	f244 43a4 	movw	r3, #17572	; 0x44a4
   10c7a:	f2c0 0302 	movt	r3, #2
   10c7e:	60bb      	str	r3, [r7, #8]
   10c80:	e06c      	b.n	10d5c <SEC_ErrorMsg+0x290>
#ifndef __FRAMEWORK_TELIUM_PLUS__
	case C_UTLV_TYPE_NOT_TLV:		pcError="NO TLV TYPE";      break;
	case C_UTLV_TYPE_NO_SECRET:     pcError="NO SECRET TYPE";   break;
#endif
	default:
		switch (iValue)
   10c82:	687b      	ldr	r3, [r7, #4]
   10c84:	330c      	adds	r3, #12
   10c86:	2b0b      	cmp	r3, #11
   10c88:	d862      	bhi.n	10d50 <SEC_ErrorMsg+0x284>
   10c8a:	a201      	add	r2, pc, #4	; (adr r2, 10c90 <SEC_ErrorMsg+0x1c4>)
   10c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10c90:	00010d45 	.word	0x00010d45
   10c94:	00010d39 	.word	0x00010d39
   10c98:	00010d2d 	.word	0x00010d2d
   10c9c:	00010d21 	.word	0x00010d21
   10ca0:	00010d15 	.word	0x00010d15
   10ca4:	00010d09 	.word	0x00010d09
   10ca8:	00010cfd 	.word	0x00010cfd
   10cac:	00010cf1 	.word	0x00010cf1
   10cb0:	00010ce5 	.word	0x00010ce5
   10cb4:	00010cd9 	.word	0x00010cd9
   10cb8:	00010ccd 	.word	0x00010ccd
   10cbc:	00010cc1 	.word	0x00010cc1
		{
		// *** Schemes loading errors ***
		case -1:                    pcError="ID FULL";          break;
   10cc0:	f244 43b8 	movw	r3, #17592	; 0x44b8
   10cc4:	f2c0 0302 	movt	r3, #2
   10cc8:	60bb      	str	r3, [r7, #8]
   10cca:	e047      	b.n	10d5c <SEC_ErrorMsg+0x290>
		case -2:                    pcError="ID ALREADY EXIST"; break;
   10ccc:	f244 43c0 	movw	r3, #17600	; 0x44c0
   10cd0:	f2c0 0302 	movt	r3, #2
   10cd4:	60bb      	str	r3, [r7, #8]
   10cd6:	e041      	b.n	10d5c <SEC_ErrorMsg+0x290>
		case -3:                    pcError="ID UNKNOWN";       break;
   10cd8:	f244 43d4 	movw	r3, #17620	; 0x44d4
   10cdc:	f2c0 0302 	movt	r3, #2
   10ce0:	60bb      	str	r3, [r7, #8]
   10ce2:	e03b      	b.n	10d5c <SEC_ErrorMsg+0x290>
		case -4:                    pcError="NO MORE MEMORY";   break;
   10ce4:	f244 43e0 	movw	r3, #17632	; 0x44e0
   10ce8:	f2c0 0302 	movt	r3, #2
   10cec:	60bb      	str	r3, [r7, #8]
   10cee:	e035      	b.n	10d5c <SEC_ErrorMsg+0x290>
		case -5:                    pcError="BAD INIT";         break;
   10cf0:	f244 43f0 	movw	r3, #17648	; 0x44f0
   10cf4:	f2c0 0302 	movt	r3, #2
   10cf8:	60bb      	str	r3, [r7, #8]
   10cfa:	e02f      	b.n	10d5c <SEC_ErrorMsg+0x290>
		case -6:                    pcError="JUST DOWNLOADED";  break;
   10cfc:	f244 43fc 	movw	r3, #17660	; 0x44fc
   10d00:	f2c0 0302 	movt	r3, #2
   10d04:	60bb      	str	r3, [r7, #8]
   10d06:	e029      	b.n	10d5c <SEC_ErrorMsg+0x290>
		case -7:                    pcError="BAD PARAMETER";    break;
   10d08:	f244 4364 	movw	r3, #17508	; 0x4464
   10d0c:	f2c0 0302 	movt	r3, #2
   10d10:	60bb      	str	r3, [r7, #8]
   10d12:	e023      	b.n	10d5c <SEC_ErrorMsg+0x290>
		case -8:                    pcError="GLOBAL ERROR";     break;
   10d14:	f244 530c 	movw	r3, #17676	; 0x450c
   10d18:	f2c0 0302 	movt	r3, #2
   10d1c:	60bb      	str	r3, [r7, #8]
   10d1e:	e01d      	b.n	10d5c <SEC_ErrorMsg+0x290>
		case -9:                    pcError="SCHEMES MISSING";  break;
   10d20:	f244 531c 	movw	r3, #17692	; 0x451c
   10d24:	f2c0 0302 	movt	r3, #2
   10d28:	60bb      	str	r3, [r7, #8]
   10d2a:	e017      	b.n	10d5c <SEC_ErrorMsg+0x290>
		case -10:                   pcError="ERROR ADDRESS";    break;
   10d2c:	f244 532c 	movw	r3, #17708	; 0x452c
   10d30:	f2c0 0302 	movt	r3, #2
   10d34:	60bb      	str	r3, [r7, #8]
   10d36:	e011      	b.n	10d5c <SEC_ErrorMsg+0x290>
		case -11:                   pcError="WARNING ADDRESS";  break;
   10d38:	f244 533c 	movw	r3, #17724	; 0x453c
   10d3c:	f2c0 0302 	movt	r3, #2
   10d40:	60bb      	str	r3, [r7, #8]
   10d42:	e00b      	b.n	10d5c <SEC_ErrorMsg+0x290>
		case -12:                   pcError="CERTIFICATE KO";   break;
   10d44:	f244 534c 	movw	r3, #17740	; 0x454c
   10d48:	f2c0 0302 	movt	r3, #2
   10d4c:	60bb      	str	r3, [r7, #8]
   10d4e:	e005      	b.n	10d5c <SEC_ErrorMsg+0x290>
		default:                    pcError="ERROR UNKNOWN";    break;
   10d50:	f643 7388 	movw	r3, #16264	; 0x3f88
   10d54:	f2c0 0302 	movt	r3, #2
   10d58:	60bb      	str	r3, [r7, #8]
   10d5a:	bf00      	nop
		}
	}

	return pcError;
   10d5c:	68bb      	ldr	r3, [r7, #8]
}
   10d5e:	4618      	mov	r0, r3
   10d60:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   10d64:	f2c0 0302 	movt	r3, #2
   10d68:	68fa      	ldr	r2, [r7, #12]
   10d6a:	681b      	ldr	r3, [r3, #0]
   10d6c:	429a      	cmp	r2, r3
   10d6e:	d001      	beq.n	10d74 <SEC_ErrorMsg+0x2a8>
   10d70:	f7f8 f918 	bl	8fa4 <__stack_chk_fail>
   10d74:	f107 0710 	add.w	r7, r7, #16
   10d78:	46bd      	mov	sp, r7
   10d7a:	bd80      	pop	{r7, pc}

00010d7c <OpenConverter>:
//     NULL if converter not found or wrong parameter.
//     Driver file if converter found.
//****************************************************************************

Telium_File_t *OpenConverter(char *pcName, byte ucSize)
{
   10d7c:	b590      	push	{r4, r7, lr}
   10d7e:	b087      	sub	sp, #28
   10d80:	af00      	add	r7, sp, #0
   10d82:	6078      	str	r0, [r7, #4]
   10d84:	460b      	mov	r3, r1
   10d86:	70fb      	strb	r3, [r7, #3]
   10d88:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   10d8c:	f2c0 0302 	movt	r3, #2
   10d90:	681b      	ldr	r3, [r3, #0]
   10d92:	617b      	str	r3, [r7, #20]
	Telium_File_t *hCom;
	byte ucSta;

	// Converter detection in progress
	// *******************************
	for (i=0; i<NUMBER_OF_ITEMS(tzConverter); i++)
   10d94:	2300      	movs	r3, #0
   10d96:	60fb      	str	r3, [r7, #12]
   10d98:	e03d      	b.n	10e16 <OpenConverter+0x9a>
	{
		hCom = Telium_Fopen(tzConverter[i], "rw*");                 // Open converter peripheral
   10d9a:	f24f 334c 	movw	r3, #62284	; 0xf34c
   10d9e:	f2c0 0302 	movt	r3, #2
   10da2:	68fa      	ldr	r2, [r7, #12]
   10da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10da8:	4618      	mov	r0, r3
   10daa:	f244 515c 	movw	r1, #17756	; 0x455c
   10dae:	f2c0 0102 	movt	r1, #2
   10db2:	f00e fdb3 	bl	1f91c <Telium_Fopen>
   10db6:	6138      	str	r0, [r7, #16]
		if(hCom)
   10db8:	693b      	ldr	r3, [r7, #16]
   10dba:	2b00      	cmp	r3, #0
   10dbc:	d028      	beq.n	10e10 <OpenConverter+0x94>
		{
			Telium_Status(hCom, &ucSta);                           // Check if converter recognized
   10dbe:	f107 030b 	add.w	r3, r7, #11
   10dc2:	6938      	ldr	r0, [r7, #16]
   10dc4:	4619      	mov	r1, r3
   10dc6:	f00e fed1 	bl	1fb6c <Telium_Status>
			if ( (ucSta & USB_PRESENT) == USB_PRESENT)
   10dca:	7afb      	ldrb	r3, [r7, #11]
   10dcc:	f003 0301 	and.w	r3, r3, #1
   10dd0:	2b00      	cmp	r3, #0
   10dd2:	d01a      	beq.n	10e0a <OpenConverter+0x8e>
			{
				if (ucSize > strlen((char*)tzConverter[i]))
   10dd4:	78fc      	ldrb	r4, [r7, #3]
   10dd6:	f24f 334c 	movw	r3, #62284	; 0xf34c
   10dda:	f2c0 0302 	movt	r3, #2
   10dde:	68fa      	ldr	r2, [r7, #12]
   10de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10de4:	4618      	mov	r0, r3
   10de6:	f7f7 ef4e 	blx	8c84 <_init+0x124>
   10dea:	4603      	mov	r3, r0
   10dec:	429c      	cmp	r4, r3
   10dee:	d90f      	bls.n	10e10 <OpenConverter+0x94>
				{
					strcpy (pcName, (char*)tzConverter[i]);	 // Return driver name and driver file
   10df0:	f24f 334c 	movw	r3, #62284	; 0xf34c
   10df4:	f2c0 0302 	movt	r3, #2
   10df8:	68fa      	ldr	r2, [r7, #12]
   10dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10dfe:	6878      	ldr	r0, [r7, #4]
   10e00:	4619      	mov	r1, r3
   10e02:	f7f7 ef0e 	blx	8c20 <_init+0xc0>
					return hCom;
   10e06:	693b      	ldr	r3, [r7, #16]
   10e08:	e009      	b.n	10e1e <OpenConverter+0xa2>
				}
			}
			else
				Telium_Fclose(hCom);                                // Close converter unrecognized
   10e0a:	6938      	ldr	r0, [r7, #16]
   10e0c:	f00e fd54 	bl	1f8b8 <Telium_Fclose>
	Telium_File_t *hCom;
	byte ucSta;

	// Converter detection in progress
	// *******************************
	for (i=0; i<NUMBER_OF_ITEMS(tzConverter); i++)
   10e10:	68fb      	ldr	r3, [r7, #12]
   10e12:	3301      	adds	r3, #1
   10e14:	60fb      	str	r3, [r7, #12]
   10e16:	68fb      	ldr	r3, [r7, #12]
   10e18:	2b04      	cmp	r3, #4
   10e1a:	d9be      	bls.n	10d9a <OpenConverter+0x1e>
			else
				Telium_Fclose(hCom);                                // Close converter unrecognized
		}
	}

	return NULL;                                             // Converter not found
   10e1c:	2300      	movs	r3, #0
}
   10e1e:	4618      	mov	r0, r3
   10e20:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   10e24:	f2c0 0302 	movt	r3, #2
   10e28:	697a      	ldr	r2, [r7, #20]
   10e2a:	681b      	ldr	r3, [r3, #0]
   10e2c:	429a      	cmp	r2, r3
   10e2e:	d001      	beq.n	10e34 <OpenConverter+0xb8>
   10e30:	f7f8 f8b8 	bl	8fa4 <__stack_chk_fail>
   10e34:	f107 071c 	add.w	r7, r7, #28
   10e38:	46bd      	mov	sp, r7
   10e3a:	bd90      	pop	{r4, r7, pc}

00010e3c <BitOn>:
//     ucIdx (I-) : Related bit number
//  This function has no return value.
//****************************************************************************

static void BitOn (char *pcBuf, byte ucIdx)
{
   10e3c:	b580      	push	{r7, lr}
   10e3e:	b084      	sub	sp, #16
   10e40:	af00      	add	r7, sp, #0
   10e42:	6078      	str	r0, [r7, #4]
   10e44:	460b      	mov	r3, r1
   10e46:	70fb      	strb	r3, [r7, #3]
   10e48:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   10e4c:	f2c0 0302 	movt	r3, #2
   10e50:	681b      	ldr	r3, [r3, #0]
   10e52:	60fb      	str	r3, [r7, #12]
    ucIdx--;
   10e54:	78fb      	ldrb	r3, [r7, #3]
   10e56:	3b01      	subs	r3, #1
   10e58:	70fb      	strb	r3, [r7, #3]
    while(ucIdx >= 8) 
   10e5a:	e005      	b.n	10e68 <BitOn+0x2c>
    {
        pcBuf++;
   10e5c:	687b      	ldr	r3, [r7, #4]
   10e5e:	3301      	adds	r3, #1
   10e60:	607b      	str	r3, [r7, #4]
        ucIdx -= 8;
   10e62:	78fb      	ldrb	r3, [r7, #3]
   10e64:	3b08      	subs	r3, #8
   10e66:	70fb      	strb	r3, [r7, #3]
//****************************************************************************

static void BitOn (char *pcBuf, byte ucIdx)
{
    ucIdx--;
    while(ucIdx >= 8) 
   10e68:	78fb      	ldrb	r3, [r7, #3]
   10e6a:	2b07      	cmp	r3, #7
   10e6c:	d8f6      	bhi.n	10e5c <BitOn+0x20>
    {
        pcBuf++;
        ucIdx -= 8;
    }
    *pcBuf |= (0x01 << (7 - ucIdx));
   10e6e:	687b      	ldr	r3, [r7, #4]
   10e70:	781b      	ldrb	r3, [r3, #0]
   10e72:	b2da      	uxtb	r2, r3
   10e74:	78fb      	ldrb	r3, [r7, #3]
   10e76:	f1c3 0307 	rsb	r3, r3, #7
   10e7a:	2101      	movs	r1, #1
   10e7c:	fa01 f303 	lsl.w	r3, r1, r3
   10e80:	b2db      	uxtb	r3, r3
   10e82:	4313      	orrs	r3, r2
   10e84:	b2db      	uxtb	r3, r3
   10e86:	b2da      	uxtb	r2, r3
   10e88:	687b      	ldr	r3, [r7, #4]
   10e8a:	701a      	strb	r2, [r3, #0]
}
   10e8c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   10e90:	f2c0 0302 	movt	r3, #2
   10e94:	68fa      	ldr	r2, [r7, #12]
   10e96:	681b      	ldr	r3, [r3, #0]
   10e98:	429a      	cmp	r2, r3
   10e9a:	d001      	beq.n	10ea0 <BitOn+0x64>
   10e9c:	f7f8 f882 	bl	8fa4 <__stack_chk_fail>
   10ea0:	f107 0710 	add.w	r7, r7, #16
   10ea4:	46bd      	mov	sp, r7
   10ea6:	bd80      	pop	{r7, pc}

00010ea8 <BitOff>:
//     ucIdx (I-) : Related bit number
//  This function has no return value.
//****************************************************************************

static void BitOff (char *pcBuf, byte ucIdx)
{
   10ea8:	b580      	push	{r7, lr}
   10eaa:	b084      	sub	sp, #16
   10eac:	af00      	add	r7, sp, #0
   10eae:	6078      	str	r0, [r7, #4]
   10eb0:	460b      	mov	r3, r1
   10eb2:	70fb      	strb	r3, [r7, #3]
   10eb4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   10eb8:	f2c0 0302 	movt	r3, #2
   10ebc:	681b      	ldr	r3, [r3, #0]
   10ebe:	60fb      	str	r3, [r7, #12]
    ucIdx--;
   10ec0:	78fb      	ldrb	r3, [r7, #3]
   10ec2:	3b01      	subs	r3, #1
   10ec4:	70fb      	strb	r3, [r7, #3]
    while(ucIdx >= 8) 
   10ec6:	e005      	b.n	10ed4 <BitOff+0x2c>
    {
        pcBuf++;
   10ec8:	687b      	ldr	r3, [r7, #4]
   10eca:	3301      	adds	r3, #1
   10ecc:	607b      	str	r3, [r7, #4]
        ucIdx -= 8;
   10ece:	78fb      	ldrb	r3, [r7, #3]
   10ed0:	3b08      	subs	r3, #8
   10ed2:	70fb      	strb	r3, [r7, #3]
//****************************************************************************

static void BitOff (char *pcBuf, byte ucIdx)
{
    ucIdx--;
    while(ucIdx >= 8) 
   10ed4:	78fb      	ldrb	r3, [r7, #3]
   10ed6:	2b07      	cmp	r3, #7
   10ed8:	d8f6      	bhi.n	10ec8 <BitOff+0x20>
    {
        pcBuf++;
        ucIdx -= 8;
    }
    *pcBuf &= ~(0x01 << (7 - ucIdx));
   10eda:	687b      	ldr	r3, [r7, #4]
   10edc:	781b      	ldrb	r3, [r3, #0]
   10ede:	b2da      	uxtb	r2, r3
   10ee0:	78fb      	ldrb	r3, [r7, #3]
   10ee2:	f1c3 0307 	rsb	r3, r3, #7
   10ee6:	2101      	movs	r1, #1
   10ee8:	fa01 f303 	lsl.w	r3, r1, r3
   10eec:	b2db      	uxtb	r3, r3
   10eee:	43db      	mvns	r3, r3
   10ef0:	b2db      	uxtb	r3, r3
   10ef2:	4013      	ands	r3, r2
   10ef4:	b2db      	uxtb	r3, r3
   10ef6:	b2da      	uxtb	r2, r3
   10ef8:	687b      	ldr	r3, [r7, #4]
   10efa:	701a      	strb	r2, [r3, #0]
}
   10efc:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   10f00:	f2c0 0302 	movt	r3, #2
   10f04:	68fa      	ldr	r2, [r7, #12]
   10f06:	681b      	ldr	r3, [r3, #0]
   10f08:	429a      	cmp	r2, r3
   10f0a:	d001      	beq.n	10f10 <BitOff+0x68>
   10f0c:	f7f8 f84a 	bl	8fa4 <__stack_chk_fail>
   10f10:	f107 0710 	add.w	r7, r7, #16
   10f14:	46bd      	mov	sp, r7
   10f16:	bd80      	pop	{r7, pc}

00010f18 <BitTest>:
//    0   : if the related bit is off
//    !=0 : otherwise 
//****************************************************************************

static byte BitTest (const char *pcBuf, byte ucIdx)
{
   10f18:	b580      	push	{r7, lr}
   10f1a:	b084      	sub	sp, #16
   10f1c:	af00      	add	r7, sp, #0
   10f1e:	6078      	str	r0, [r7, #4]
   10f20:	460b      	mov	r3, r1
   10f22:	70fb      	strb	r3, [r7, #3]
   10f24:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   10f28:	f2c0 0302 	movt	r3, #2
   10f2c:	681b      	ldr	r3, [r3, #0]
   10f2e:	60fb      	str	r3, [r7, #12]
    ucIdx--;
   10f30:	78fb      	ldrb	r3, [r7, #3]
   10f32:	3b01      	subs	r3, #1
   10f34:	70fb      	strb	r3, [r7, #3]
    while(ucIdx >= 8) 
   10f36:	e005      	b.n	10f44 <BitTest+0x2c>
    {
        pcBuf++;
   10f38:	687b      	ldr	r3, [r7, #4]
   10f3a:	3301      	adds	r3, #1
   10f3c:	607b      	str	r3, [r7, #4]
        ucIdx -= 8;
   10f3e:	78fb      	ldrb	r3, [r7, #3]
   10f40:	3b08      	subs	r3, #8
   10f42:	70fb      	strb	r3, [r7, #3]
//****************************************************************************

static byte BitTest (const char *pcBuf, byte ucIdx)
{
    ucIdx--;
    while(ucIdx >= 8) 
   10f44:	78fb      	ldrb	r3, [r7, #3]
   10f46:	2b07      	cmp	r3, #7
   10f48:	d8f6      	bhi.n	10f38 <BitTest+0x20>
    {
        pcBuf++;
        ucIdx -= 8;
    }
    return ((*pcBuf) >> (7 - ucIdx)) & 0x01;
   10f4a:	687b      	ldr	r3, [r7, #4]
   10f4c:	781b      	ldrb	r3, [r3, #0]
   10f4e:	461a      	mov	r2, r3
   10f50:	78fb      	ldrb	r3, [r7, #3]
   10f52:	f1c3 0307 	rsb	r3, r3, #7
   10f56:	fa42 f303 	asr.w	r3, r2, r3
   10f5a:	b2db      	uxtb	r3, r3
   10f5c:	f003 0301 	and.w	r3, r3, #1
   10f60:	b2db      	uxtb	r3, r3
}
   10f62:	4618      	mov	r0, r3
   10f64:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   10f68:	f2c0 0302 	movt	r3, #2
   10f6c:	68fa      	ldr	r2, [r7, #12]
   10f6e:	681b      	ldr	r3, [r3, #0]
   10f70:	429a      	cmp	r2, r3
   10f72:	d001      	beq.n	10f78 <BitTest+0x60>
   10f74:	f7f8 f816 	bl	8fa4 <__stack_chk_fail>
   10f78:	f107 0710 	add.w	r7, r7, #16
   10f7c:	46bd      	mov	sp, r7
   10f7e:	bd80      	pop	{r7, pc}

00010f80 <SetParity>:
//     ucTyp (I-) : Even or Odd parity
//  This function has no return value.
//****************************************************************************

void SetParity (char *pcBuf, word usDim, byte ucPar, byte ucTyp)
{
   10f80:	b580      	push	{r7, lr}
   10f82:	b084      	sub	sp, #16
   10f84:	af00      	add	r7, sp, #0
   10f86:	6078      	str	r0, [r7, #4]
   10f88:	8079      	strh	r1, [r7, #2]
   10f8a:	707a      	strb	r2, [r7, #1]
   10f8c:	703b      	strb	r3, [r7, #0]
   10f8e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   10f92:	f2c0 0302 	movt	r3, #2
   10f96:	681b      	ldr	r3, [r3, #0]
   10f98:	60fb      	str	r3, [r7, #12]
    // ***************
    byte ucCnt, ucIdx;

    // Set parity in progress
    // **********************
    while(usDim--) 
   10f9a:	e049      	b.n	11030 <SetParity+0xb0>
    {
        ucCnt=0;
   10f9c:	2300      	movs	r3, #0
   10f9e:	72bb      	strb	r3, [r7, #10]
        for (ucIdx=1; ucIdx<=8; ucIdx++) 
   10fa0:	2301      	movs	r3, #1
   10fa2:	72fb      	strb	r3, [r7, #11]
   10fa4:	e013      	b.n	10fce <SetParity+0x4e>
        {
            if (ucIdx == ucPar)
   10fa6:	7afa      	ldrb	r2, [r7, #11]
   10fa8:	787b      	ldrb	r3, [r7, #1]
   10faa:	429a      	cmp	r2, r3
   10fac:	d00b      	beq.n	10fc6 <SetParity+0x46>
                continue;
            if (BitTest(pcBuf, ucIdx))
   10fae:	7afb      	ldrb	r3, [r7, #11]
   10fb0:	6878      	ldr	r0, [r7, #4]
   10fb2:	4619      	mov	r1, r3
   10fb4:	f7ff ffb0 	bl	10f18 <BitTest>
   10fb8:	4603      	mov	r3, r0
   10fba:	2b00      	cmp	r3, #0
   10fbc:	d004      	beq.n	10fc8 <SetParity+0x48>
                ucCnt++;
   10fbe:	7abb      	ldrb	r3, [r7, #10]
   10fc0:	3301      	adds	r3, #1
   10fc2:	72bb      	strb	r3, [r7, #10]
   10fc4:	e000      	b.n	10fc8 <SetParity+0x48>
    {
        ucCnt=0;
        for (ucIdx=1; ucIdx<=8; ucIdx++) 
        {
            if (ucIdx == ucPar)
                continue;
   10fc6:	bf00      	nop
    // Set parity in progress
    // **********************
    while(usDim--) 
    {
        ucCnt=0;
        for (ucIdx=1; ucIdx<=8; ucIdx++) 
   10fc8:	7afb      	ldrb	r3, [r7, #11]
   10fca:	3301      	adds	r3, #1
   10fcc:	72fb      	strb	r3, [r7, #11]
   10fce:	7afb      	ldrb	r3, [r7, #11]
   10fd0:	2b08      	cmp	r3, #8
   10fd2:	d9e8      	bls.n	10fa6 <SetParity+0x26>
            if (ucIdx == ucPar)
                continue;
            if (BitTest(pcBuf, ucIdx))
                ucCnt++;
        }
        switch (ucTyp) 
   10fd4:	783b      	ldrb	r3, [r7, #0]
   10fd6:	2b45      	cmp	r3, #69	; 0x45
   10fd8:	d002      	beq.n	10fe0 <SetParity+0x60>
   10fda:	2b4f      	cmp	r3, #79	; 0x4f
   10fdc:	d012      	beq.n	11004 <SetParity+0x84>
   10fde:	e023      	b.n	11028 <SetParity+0xa8>
        {
        case 'E':
        	if (ucCnt % 2)
   10fe0:	7abb      	ldrb	r3, [r7, #10]
   10fe2:	f003 0301 	and.w	r3, r3, #1
   10fe6:	b2db      	uxtb	r3, r3
   10fe8:	2b00      	cmp	r3, #0
   10fea:	d005      	beq.n	10ff8 <SetParity+0x78>
        		BitOn(pcBuf, ucPar);  // An even parity bit is set to 1 if the number of ones in a given set of bits is odd
   10fec:	787b      	ldrb	r3, [r7, #1]
   10fee:	6878      	ldr	r0, [r7, #4]
   10ff0:	4619      	mov	r1, r3
   10ff2:	f7ff ff23 	bl	10e3c <BitOn>
        	else
                BitOff(pcBuf, ucPar);
            break;
   10ff6:	e018      	b.n	1102a <SetParity+0xaa>
        {
        case 'E':
        	if (ucCnt % 2)
        		BitOn(pcBuf, ucPar);  // An even parity bit is set to 1 if the number of ones in a given set of bits is odd
        	else
                BitOff(pcBuf, ucPar);
   10ff8:	787b      	ldrb	r3, [r7, #1]
   10ffa:	6878      	ldr	r0, [r7, #4]
   10ffc:	4619      	mov	r1, r3
   10ffe:	f7ff ff53 	bl	10ea8 <BitOff>
            break;
   11002:	e012      	b.n	1102a <SetParity+0xaa>
        case 'O':
            if (ucCnt % 2)
   11004:	7abb      	ldrb	r3, [r7, #10]
   11006:	f003 0301 	and.w	r3, r3, #1
   1100a:	b2db      	uxtb	r3, r3
   1100c:	2b00      	cmp	r3, #0
   1100e:	d005      	beq.n	1101c <SetParity+0x9c>
            	BitOff(pcBuf, ucPar);
   11010:	787b      	ldrb	r3, [r7, #1]
   11012:	6878      	ldr	r0, [r7, #4]
   11014:	4619      	mov	r1, r3
   11016:	f7ff ff47 	bl	10ea8 <BitOff>
            else
                BitOn(pcBuf, ucPar);  // An odd parity bit is set to 1 if the number of ones in a given set of bits is even
            break;
   1101a:	e006      	b.n	1102a <SetParity+0xaa>
            break;
        case 'O':
            if (ucCnt % 2)
            	BitOff(pcBuf, ucPar);
            else
                BitOn(pcBuf, ucPar);  // An odd parity bit is set to 1 if the number of ones in a given set of bits is even
   1101c:	787b      	ldrb	r3, [r7, #1]
   1101e:	6878      	ldr	r0, [r7, #4]
   11020:	4619      	mov	r1, r3
   11022:	f7ff ff0b 	bl	10e3c <BitOn>
            break;
   11026:	e000      	b.n	1102a <SetParity+0xaa>
        default:
        	break;
   11028:	bf00      	nop
        }
        pcBuf++;
   1102a:	687b      	ldr	r3, [r7, #4]
   1102c:	3301      	adds	r3, #1
   1102e:	607b      	str	r3, [r7, #4]
    // ***************
    byte ucCnt, ucIdx;

    // Set parity in progress
    // **********************
    while(usDim--) 
   11030:	887b      	ldrh	r3, [r7, #2]
   11032:	2b00      	cmp	r3, #0
   11034:	bf0c      	ite	eq
   11036:	2300      	moveq	r3, #0
   11038:	2301      	movne	r3, #1
   1103a:	b2db      	uxtb	r3, r3
   1103c:	887a      	ldrh	r2, [r7, #2]
   1103e:	3a01      	subs	r2, #1
   11040:	807a      	strh	r2, [r7, #2]
   11042:	2b00      	cmp	r3, #0
   11044:	d1aa      	bne.n	10f9c <SetParity+0x1c>
        default:
        	break;
        }
        pcBuf++;
    }
}
   11046:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1104a:	f2c0 0302 	movt	r3, #2
   1104e:	68fa      	ldr	r2, [r7, #12]
   11050:	681b      	ldr	r3, [r3, #0]
   11052:	429a      	cmp	r2, r3
   11054:	d001      	beq.n	1105a <SetParity+0xda>
   11056:	f7f7 ffa5 	bl	8fa4 <__stack_chk_fail>
   1105a:	f107 0710 	add.w	r7, r7, #16
   1105e:	46bd      	mov	sp, r7
   11060:	bd80      	pop	{r7, pc}
   11062:	bf00      	nop

00011064 <CheckParity>:
//    1 : if parity is OK 
//    0 : if parity NOK
//****************************************************************************

byte CheckParity (const char *pcBuf, word usDim, byte ucPar, byte ucTyp)
{
   11064:	b580      	push	{r7, lr}
   11066:	b084      	sub	sp, #16
   11068:	af00      	add	r7, sp, #0
   1106a:	6078      	str	r0, [r7, #4]
   1106c:	8079      	strh	r1, [r7, #2]
   1106e:	707a      	strb	r2, [r7, #1]
   11070:	703b      	strb	r3, [r7, #0]
   11072:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   11076:	f2c0 0302 	movt	r3, #2
   1107a:	681b      	ldr	r3, [r3, #0]
   1107c:	60fb      	str	r3, [r7, #12]
    byte ucCnt, ucIdx;
    byte ucRet;

    // Check parity in progress
    // ************************
    ucRet=1;
   1107e:	2301      	movs	r3, #1
   11080:	72fb      	strb	r3, [r7, #11]
    while (usDim--) 
   11082:	e035      	b.n	110f0 <CheckParity+0x8c>
    {
        ucCnt=0;
   11084:	2300      	movs	r3, #0
   11086:	727b      	strb	r3, [r7, #9]
        for (ucIdx=1; ucIdx<=8; ucIdx++) 
   11088:	2301      	movs	r3, #1
   1108a:	72bb      	strb	r3, [r7, #10]
   1108c:	e00d      	b.n	110aa <CheckParity+0x46>
        {
            if (BitTest(pcBuf, ucIdx))
   1108e:	7abb      	ldrb	r3, [r7, #10]
   11090:	6878      	ldr	r0, [r7, #4]
   11092:	4619      	mov	r1, r3
   11094:	f7ff ff40 	bl	10f18 <BitTest>
   11098:	4603      	mov	r3, r0
   1109a:	2b00      	cmp	r3, #0
   1109c:	d002      	beq.n	110a4 <CheckParity+0x40>
                ucCnt++;
   1109e:	7a7b      	ldrb	r3, [r7, #9]
   110a0:	3301      	adds	r3, #1
   110a2:	727b      	strb	r3, [r7, #9]
    // ************************
    ucRet=1;
    while (usDim--) 
    {
        ucCnt=0;
        for (ucIdx=1; ucIdx<=8; ucIdx++) 
   110a4:	7abb      	ldrb	r3, [r7, #10]
   110a6:	3301      	adds	r3, #1
   110a8:	72bb      	strb	r3, [r7, #10]
   110aa:	7abb      	ldrb	r3, [r7, #10]
   110ac:	2b08      	cmp	r3, #8
   110ae:	d9ee      	bls.n	1108e <CheckParity+0x2a>
        {
            if (BitTest(pcBuf, ucIdx))
                ucCnt++;
        }
        switch(ucTyp)
   110b0:	783b      	ldrb	r3, [r7, #0]
   110b2:	2b45      	cmp	r3, #69	; 0x45
   110b4:	d00a      	beq.n	110cc <CheckParity+0x68>
   110b6:	2b4f      	cmp	r3, #79	; 0x4f
   110b8:	d111      	bne.n	110de <CheckParity+0x7a>
        {
        case 'O' :
        	if (!(ucCnt%2)) // Making the total number of ones, including the parity bit, odd
   110ba:	7a7b      	ldrb	r3, [r7, #9]
   110bc:	f003 0301 	and.w	r3, r3, #1
   110c0:	b2db      	uxtb	r3, r3
   110c2:	2b00      	cmp	r3, #0
   110c4:	d10e      	bne.n	110e4 <CheckParity+0x80>
        		ucRet=0;
   110c6:	2300      	movs	r3, #0
   110c8:	72fb      	strb	r3, [r7, #11]
        	break;
   110ca:	e00b      	b.n	110e4 <CheckParity+0x80>
		case 'E':
		    if (ucCnt%2)    // Making the total number of ones, including the parity bit, even
   110cc:	7a7b      	ldrb	r3, [r7, #9]
   110ce:	f003 0301 	and.w	r3, r3, #1
   110d2:	b2db      	uxtb	r3, r3
   110d4:	2b00      	cmp	r3, #0
   110d6:	d007      	beq.n	110e8 <CheckParity+0x84>
		    	ucRet=0;
   110d8:	2300      	movs	r3, #0
   110da:	72fb      	strb	r3, [r7, #11]
        	break;
   110dc:	e004      	b.n	110e8 <CheckParity+0x84>
		default:            // Unknown parity
			ucRet=0;
   110de:	2300      	movs	r3, #0
   110e0:	72fb      	strb	r3, [r7, #11]
            break;
   110e2:	e002      	b.n	110ea <CheckParity+0x86>
        switch(ucTyp)
        {
        case 'O' :
        	if (!(ucCnt%2)) // Making the total number of ones, including the parity bit, odd
        		ucRet=0;
        	break;
   110e4:	bf00      	nop
   110e6:	e000      	b.n	110ea <CheckParity+0x86>
		case 'E':
		    if (ucCnt%2)    // Making the total number of ones, including the parity bit, even
		    	ucRet=0;
        	break;
   110e8:	bf00      	nop
		default:            // Unknown parity
			ucRet=0;
            break;
        }
        pcBuf++;
   110ea:	687b      	ldr	r3, [r7, #4]
   110ec:	3301      	adds	r3, #1
   110ee:	607b      	str	r3, [r7, #4]
    byte ucRet;

    // Check parity in progress
    // ************************
    ucRet=1;
    while (usDim--) 
   110f0:	887b      	ldrh	r3, [r7, #2]
   110f2:	2b00      	cmp	r3, #0
   110f4:	bf0c      	ite	eq
   110f6:	2300      	moveq	r3, #0
   110f8:	2301      	movne	r3, #1
   110fa:	b2db      	uxtb	r3, r3
   110fc:	887a      	ldrh	r2, [r7, #2]
   110fe:	3a01      	subs	r2, #1
   11100:	807a      	strh	r2, [r7, #2]
   11102:	2b00      	cmp	r3, #0
   11104:	d1be      	bne.n	11084 <CheckParity+0x20>
            break;
        }
        pcBuf++;
    }
    
    return ucRet;
   11106:	7afb      	ldrb	r3, [r7, #11]
}
   11108:	4618      	mov	r0, r3
   1110a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1110e:	f2c0 0302 	movt	r3, #2
   11112:	68fa      	ldr	r2, [r7, #12]
   11114:	681b      	ldr	r3, [r3, #0]
   11116:	429a      	cmp	r2, r3
   11118:	d001      	beq.n	1111e <CheckParity+0xba>
   1111a:	f7f7 ff43 	bl	8fa4 <__stack_chk_fail>
   1111e:	f107 0710 	add.w	r7, r7, #16
   11122:	46bd      	mov	sp, r7
   11124:	bd80      	pop	{r7, pc}
   11126:	bf00      	nop

00011128 <parseStr>:
//    NULL : Parsing failed
//    !NULL : Pointer to the end of string extracted.
//****************************************************************************

const char *parseStr(char ucToken, char *pcDst, const char *pcSrc, int iDim)
{
   11128:	b580      	push	{r7, lr}
   1112a:	b086      	sub	sp, #24
   1112c:	af00      	add	r7, sp, #0
   1112e:	60b9      	str	r1, [r7, #8]
   11130:	607a      	str	r2, [r7, #4]
   11132:	603b      	str	r3, [r7, #0]
   11134:	4603      	mov	r3, r0
   11136:	73fb      	strb	r3, [r7, #15]
   11138:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1113c:	f2c0 0302 	movt	r3, #2
   11140:	681b      	ldr	r3, [r3, #0]
   11142:	617b      	str	r3, [r7, #20]
    while(*pcSrc)
   11144:	e01a      	b.n	1117c <parseStr+0x54>
    {
    	if (iDim == 0)        // Buffer pcDst overflow
   11146:	683b      	ldr	r3, [r7, #0]
   11148:	2b00      	cmp	r3, #0
   1114a:	d101      	bne.n	11150 <parseStr+0x28>
    		return NULL;      // Parsing failed
   1114c:	2300      	movs	r3, #0
   1114e:	e01d      	b.n	1118c <parseStr+0x64>

        if(*pcSrc == ucToken) // Token found
   11150:	687b      	ldr	r3, [r7, #4]
   11152:	781b      	ldrb	r3, [r3, #0]
   11154:	7bfa      	ldrb	r2, [r7, #15]
   11156:	429a      	cmp	r2, r3
   11158:	d103      	bne.n	11162 <parseStr+0x3a>
        {
            pcSrc++;          // Skip token
   1115a:	687b      	ldr	r3, [r7, #4]
   1115c:	3301      	adds	r3, #1
   1115e:	607b      	str	r3, [r7, #4]
            break;
   11160:	e010      	b.n	11184 <parseStr+0x5c>
        }

        *pcDst++ = *pcSrc++;
   11162:	687b      	ldr	r3, [r7, #4]
   11164:	781a      	ldrb	r2, [r3, #0]
   11166:	68bb      	ldr	r3, [r7, #8]
   11168:	701a      	strb	r2, [r3, #0]
   1116a:	68bb      	ldr	r3, [r7, #8]
   1116c:	3301      	adds	r3, #1
   1116e:	60bb      	str	r3, [r7, #8]
   11170:	687b      	ldr	r3, [r7, #4]
   11172:	3301      	adds	r3, #1
   11174:	607b      	str	r3, [r7, #4]
        iDim--;
   11176:	683b      	ldr	r3, [r7, #0]
   11178:	3b01      	subs	r3, #1
   1117a:	603b      	str	r3, [r7, #0]
//    !NULL : Pointer to the end of string extracted.
//****************************************************************************

const char *parseStr(char ucToken, char *pcDst, const char *pcSrc, int iDim)
{
    while(*pcSrc)
   1117c:	687b      	ldr	r3, [r7, #4]
   1117e:	781b      	ldrb	r3, [r3, #0]
   11180:	2b00      	cmp	r3, #0
   11182:	d1e0      	bne.n	11146 <parseStr+0x1e>

        *pcDst++ = *pcSrc++;
        iDim--;
    }

    *pcDst=0;
   11184:	68bb      	ldr	r3, [r7, #8]
   11186:	2200      	movs	r2, #0
   11188:	701a      	strb	r2, [r3, #0]
    return pcSrc;
   1118a:	687b      	ldr	r3, [r7, #4]
}
   1118c:	4618      	mov	r0, r3
   1118e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   11192:	f2c0 0302 	movt	r3, #2
   11196:	697a      	ldr	r2, [r7, #20]
   11198:	681b      	ldr	r3, [r3, #0]
   1119a:	429a      	cmp	r2, r3
   1119c:	d001      	beq.n	111a2 <parseStr+0x7a>
   1119e:	f7f7 ff01 	bl	8fa4 <__stack_chk_fail>
   111a2:	f107 0718 	add.w	r7, r7, #24
   111a6:	46bd      	mov	sp, r7
   111a8:	bd80      	pop	{r7, pc}
   111aa:	bf00      	nop

000111ac <UintToIp>:
//  This function has return value.
//    A string buffer regarding the IP address.
//****************************************************************************

char* UintToIp(doubleword uiVal)
{
   111ac:	b580      	push	{r7, lr}
   111ae:	b086      	sub	sp, #24
   111b0:	af02      	add	r7, sp, #8
   111b2:	6078      	str	r0, [r7, #4]
   111b4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   111b8:	f2c0 0302 	movt	r3, #2
   111bc:	681b      	ldr	r3, [r3, #0]
   111be:	60fb      	str	r3, [r7, #12]
    // ***************
	byte ucVal1, ucVal2, ucVal3, ucVal4;

	// Conversion unsigned long to Ip address
	// **************************************
	ucVal1 = uiVal%256;
   111c0:	687b      	ldr	r3, [r7, #4]
   111c2:	723b      	strb	r3, [r7, #8]
	ucVal2 = (uiVal/256)%256;
   111c4:	687b      	ldr	r3, [r7, #4]
   111c6:	0a1b      	lsrs	r3, r3, #8
   111c8:	727b      	strb	r3, [r7, #9]
	ucVal3 = (uiVal/(256*256))%256;
   111ca:	687b      	ldr	r3, [r7, #4]
   111cc:	0c1b      	lsrs	r3, r3, #16
   111ce:	72bb      	strb	r3, [r7, #10]
	ucVal4 = (uiVal/(256*256*256))%256;
   111d0:	687b      	ldr	r3, [r7, #4]
   111d2:	0e1b      	lsrs	r3, r3, #24
   111d4:	72fb      	strb	r3, [r7, #11]

	memset(tcIp, 0, sizeof(tcIp));
   111d6:	f64f 706c 	movw	r0, #65388	; 0xff6c
   111da:	f2c0 0002 	movt	r0, #2
   111de:	2100      	movs	r1, #0
   111e0:	2210      	movs	r2, #16
   111e2:	f7f7 ecec 	blx	8bbc <_init+0x5c>
	sprintf (tcIp, "%d.%d.%d.%d", ucVal4, ucVal3, ucVal2, ucVal1);
   111e6:	7afa      	ldrb	r2, [r7, #11]
   111e8:	7abb      	ldrb	r3, [r7, #10]
   111ea:	7a78      	ldrb	r0, [r7, #9]
   111ec:	7a39      	ldrb	r1, [r7, #8]
   111ee:	9000      	str	r0, [sp, #0]
   111f0:	9101      	str	r1, [sp, #4]
   111f2:	f64f 706c 	movw	r0, #65388	; 0xff6c
   111f6:	f2c0 0002 	movt	r0, #2
   111fa:	f244 5160 	movw	r1, #17760	; 0x4560
   111fe:	f2c0 0102 	movt	r1, #2
   11202:	f7f7 ed58 	blx	8cb4 <_init+0x154>

	return tcIp;
   11206:	f64f 736c 	movw	r3, #65388	; 0xff6c
   1120a:	f2c0 0302 	movt	r3, #2
}
   1120e:	4618      	mov	r0, r3
   11210:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   11214:	f2c0 0302 	movt	r3, #2
   11218:	68fa      	ldr	r2, [r7, #12]
   1121a:	681b      	ldr	r3, [r3, #0]
   1121c:	429a      	cmp	r2, r3
   1121e:	d001      	beq.n	11224 <UintToIp+0x78>
   11220:	f7f7 fec0 	bl	8fa4 <__stack_chk_fail>
   11224:	f107 0710 	add.w	r7, r7, #16
   11228:	46bd      	mov	sp, r7
   1122a:	bd80      	pop	{r7, pc}

0001122c <IpToUint>:
//  This function has return value.
//    An unsigned long regarding the IP address.
//****************************************************************************

doubleword IpToUint(const char *pcStr)
{
   1122c:	b590      	push	{r4, r7, lr}
   1122e:	b089      	sub	sp, #36	; 0x24
   11230:	af00      	add	r7, sp, #0
   11232:	6078      	str	r0, [r7, #4]
   11234:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   11238:	f2c0 0302 	movt	r3, #2
   1123c:	681b      	ldr	r3, [r3, #0]
   1123e:	61fb      	str	r3, [r7, #28]
	// Local variables
    // ***************
	char tcStr1[3+1], tcStr2[3+1], tcStr3[3+1], tcStr4[3+1];
	doubleword uiVal=0;
   11240:	2300      	movs	r3, #0
   11242:	60bb      	str	r3, [r7, #8]
	
	// Conversion Ip address to unsigned int
	// *************************************
	if (*pcStr)
   11244:	687b      	ldr	r3, [r7, #4]
   11246:	781b      	ldrb	r3, [r3, #0]
   11248:	2b00      	cmp	r3, #0
   1124a:	d072      	beq.n	11332 <IpToUint+0x106>
	{
		memset(tcStr4, 0, sizeof(tcStr4));
   1124c:	f107 0318 	add.w	r3, r7, #24
   11250:	4618      	mov	r0, r3
   11252:	2100      	movs	r1, #0
   11254:	2204      	movs	r2, #4
   11256:	f7f7 ecb2 	blx	8bbc <_init+0x5c>
		pcStr = parseStr('.', tcStr4, pcStr, sizeof(tcStr4));
   1125a:	f107 0318 	add.w	r3, r7, #24
   1125e:	202e      	movs	r0, #46	; 0x2e
   11260:	4619      	mov	r1, r3
   11262:	687a      	ldr	r2, [r7, #4]
   11264:	2304      	movs	r3, #4
   11266:	f7ff ff5f 	bl	11128 <parseStr>
   1126a:	6078      	str	r0, [r7, #4]
	    if(pcStr==NULL)
   1126c:	687b      	ldr	r3, [r7, #4]
   1126e:	2b00      	cmp	r3, #0
   11270:	d101      	bne.n	11276 <IpToUint+0x4a>
	    	return 0;
   11272:	2300      	movs	r3, #0
   11274:	e05e      	b.n	11334 <IpToUint+0x108>
	    memset(tcStr3, 0, sizeof(tcStr3));
   11276:	f107 0314 	add.w	r3, r7, #20
   1127a:	4618      	mov	r0, r3
   1127c:	2100      	movs	r1, #0
   1127e:	2204      	movs	r2, #4
   11280:	f7f7 ec9c 	blx	8bbc <_init+0x5c>
	    pcStr = parseStr('.', tcStr3, pcStr, sizeof(tcStr3));
   11284:	f107 0314 	add.w	r3, r7, #20
   11288:	202e      	movs	r0, #46	; 0x2e
   1128a:	4619      	mov	r1, r3
   1128c:	687a      	ldr	r2, [r7, #4]
   1128e:	2304      	movs	r3, #4
   11290:	f7ff ff4a 	bl	11128 <parseStr>
   11294:	6078      	str	r0, [r7, #4]
	    if(pcStr==NULL)
   11296:	687b      	ldr	r3, [r7, #4]
   11298:	2b00      	cmp	r3, #0
   1129a:	d101      	bne.n	112a0 <IpToUint+0x74>
	    	return 0;
   1129c:	2300      	movs	r3, #0
   1129e:	e049      	b.n	11334 <IpToUint+0x108>
	    memset(tcStr2, 0, sizeof(tcStr2));
   112a0:	f107 0310 	add.w	r3, r7, #16
   112a4:	4618      	mov	r0, r3
   112a6:	2100      	movs	r1, #0
   112a8:	2204      	movs	r2, #4
   112aa:	f7f7 ec88 	blx	8bbc <_init+0x5c>
	    pcStr = parseStr('.', tcStr2, pcStr, sizeof(tcStr2));
   112ae:	f107 0310 	add.w	r3, r7, #16
   112b2:	202e      	movs	r0, #46	; 0x2e
   112b4:	4619      	mov	r1, r3
   112b6:	687a      	ldr	r2, [r7, #4]
   112b8:	2304      	movs	r3, #4
   112ba:	f7ff ff35 	bl	11128 <parseStr>
   112be:	6078      	str	r0, [r7, #4]
	    if(pcStr==NULL)
   112c0:	687b      	ldr	r3, [r7, #4]
   112c2:	2b00      	cmp	r3, #0
   112c4:	d101      	bne.n	112ca <IpToUint+0x9e>
	    	return 0;
   112c6:	2300      	movs	r3, #0
   112c8:	e034      	b.n	11334 <IpToUint+0x108>
	    memset(tcStr1, 0, sizeof(tcStr1));
   112ca:	f107 030c 	add.w	r3, r7, #12
   112ce:	4618      	mov	r0, r3
   112d0:	2100      	movs	r1, #0
   112d2:	2204      	movs	r2, #4
   112d4:	f7f7 ec72 	blx	8bbc <_init+0x5c>
	    pcStr = parseStr('.', tcStr1, pcStr, sizeof(tcStr1));
   112d8:	f107 030c 	add.w	r3, r7, #12
   112dc:	202e      	movs	r0, #46	; 0x2e
   112de:	4619      	mov	r1, r3
   112e0:	687a      	ldr	r2, [r7, #4]
   112e2:	2304      	movs	r3, #4
   112e4:	f7ff ff20 	bl	11128 <parseStr>
   112e8:	6078      	str	r0, [r7, #4]
	    if(pcStr==NULL)
   112ea:	687b      	ldr	r3, [r7, #4]
   112ec:	2b00      	cmp	r3, #0
   112ee:	d101      	bne.n	112f4 <IpToUint+0xc8>
	    	return 0;
   112f0:	2300      	movs	r3, #0
   112f2:	e01f      	b.n	11334 <IpToUint+0x108>

	    uiVal = atoi(tcStr4)*256*256*256 + atoi(tcStr3)*256*256 + atoi(tcStr2)*256 + atoi(tcStr1);
   112f4:	f107 0318 	add.w	r3, r7, #24
   112f8:	4618      	mov	r0, r3
   112fa:	f7f7 ec54 	blx	8ba4 <_init+0x44>
   112fe:	4603      	mov	r3, r0
   11300:	021c      	lsls	r4, r3, #8
   11302:	f107 0314 	add.w	r3, r7, #20
   11306:	4618      	mov	r0, r3
   11308:	f7f7 ec4c 	blx	8ba4 <_init+0x44>
   1130c:	4603      	mov	r3, r0
   1130e:	18e3      	adds	r3, r4, r3
   11310:	021c      	lsls	r4, r3, #8
   11312:	f107 0310 	add.w	r3, r7, #16
   11316:	4618      	mov	r0, r3
   11318:	f7f7 ec44 	blx	8ba4 <_init+0x44>
   1131c:	4603      	mov	r3, r0
   1131e:	18e3      	adds	r3, r4, r3
   11320:	021c      	lsls	r4, r3, #8
   11322:	f107 030c 	add.w	r3, r7, #12
   11326:	4618      	mov	r0, r3
   11328:	f7f7 ec3c 	blx	8ba4 <_init+0x44>
   1132c:	4603      	mov	r3, r0
   1132e:	18e3      	adds	r3, r4, r3
   11330:	60bb      	str	r3, [r7, #8]
	}

	return uiVal;
   11332:	68bb      	ldr	r3, [r7, #8]
}
   11334:	4618      	mov	r0, r3
   11336:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1133a:	f2c0 0302 	movt	r3, #2
   1133e:	69fa      	ldr	r2, [r7, #28]
   11340:	681b      	ldr	r3, [r3, #0]
   11342:	429a      	cmp	r2, r3
   11344:	d001      	beq.n	1134a <IpToUint+0x11e>
   11346:	f7f7 fe2d 	bl	8fa4 <__stack_chk_fail>
   1134a:	f107 0724 	add.w	r7, r7, #36	; 0x24
   1134e:	46bd      	mov	sp, r7
   11350:	bd90      	pop	{r4, r7, pc}
   11352:	bf00      	nop

00011354 <ParamExist>:
//     true : Parameter file present
//     false : Parameter file absent
//****************************************************************************

int ParamExist(word usAppliType, char *pcFamilyName)
{
   11354:	b580      	push	{r7, lr}
   11356:	b096      	sub	sp, #88	; 0x58
   11358:	af00      	add	r7, sp, #0
   1135a:	4603      	mov	r3, r0
   1135c:	6039      	str	r1, [r7, #0]
   1135e:	80fb      	strh	r3, [r7, #6]
   11360:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   11364:	f2c0 0302 	movt	r3, #2
   11368:	681b      	ldr	r3, [r3, #0]
   1136a:	657b      	str	r3, [r7, #84]	; 0x54
	object_descriptor_t xObj;
	int iRet;

	// Search parameter file
	// *********************
	iRet = ObjectGetDescriptor (OBJECT_TYPE_PARAM, usAppliType, &xObj);
   1136c:	88fa      	ldrh	r2, [r7, #6]
   1136e:	f107 0310 	add.w	r3, r7, #16
   11372:	2003      	movs	r0, #3
   11374:	4611      	mov	r1, r2
   11376:	461a      	mov	r2, r3
   11378:	f00f fbf6 	bl	20b68 <ObjectGetDescriptor>
   1137c:	60f8      	str	r0, [r7, #12]

	if (iRet == 0)
   1137e:	68fb      	ldr	r3, [r7, #12]
   11380:	2b00      	cmp	r3, #0
   11382:	d10b      	bne.n	1139c <ParamExist+0x48>
	{
		if (strcmp ((char*)xObj.appli_family, pcFamilyName) == 0)
   11384:	f107 0310 	add.w	r3, r7, #16
   11388:	332d      	adds	r3, #45	; 0x2d
   1138a:	4618      	mov	r0, r3
   1138c:	6839      	ldr	r1, [r7, #0]
   1138e:	f7f7 eca6 	blx	8cdc <_init+0x17c>
   11392:	4603      	mov	r3, r0
   11394:	2b00      	cmp	r3, #0
   11396:	d101      	bne.n	1139c <ParamExist+0x48>
			return TRUE; // Parameter file present in SYSTEM disk
   11398:	2301      	movs	r3, #1
   1139a:	e000      	b.n	1139e <ParamExist+0x4a>
	}

	return FALSE;        // Parameter file absent from SYSTEM disk
   1139c:	2300      	movs	r3, #0
}
   1139e:	4618      	mov	r0, r3
   113a0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   113a4:	f2c0 0302 	movt	r3, #2
   113a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   113aa:	681b      	ldr	r3, [r3, #0]
   113ac:	429a      	cmp	r2, r3
   113ae:	d001      	beq.n	113b4 <ParamExist+0x60>
   113b0:	f7f7 fdf8 	bl	8fa4 <__stack_chk_fail>
   113b4:	f107 0758 	add.w	r7, r7, #88	; 0x58
   113b8:	46bd      	mov	sp, r7
   113ba:	bd80      	pop	{r7, pc}

000113bc <AppliExist>:
//     TRUE : Application file present
//     FALSE : Application file absent
//****************************************************************************

int AppliExist(word usAppliType)
{
   113bc:	b580      	push	{r7, lr}
   113be:	b096      	sub	sp, #88	; 0x58
   113c0:	af00      	add	r7, sp, #0
   113c2:	4603      	mov	r3, r0
   113c4:	80fb      	strh	r3, [r7, #6]
   113c6:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   113ca:	f2c0 0302 	movt	r3, #2
   113ce:	681b      	ldr	r3, [r3, #0]
   113d0:	657b      	str	r3, [r7, #84]	; 0x54
	object_descriptor_t xObj;
	int iRet;

	// Search parameter file
	// *********************
	iRet = ObjectGetDescriptor (OBJECT_TYPE_APPLI, usAppliType, &xObj);
   113d2:	88fa      	ldrh	r2, [r7, #6]
   113d4:	f107 0310 	add.w	r3, r7, #16
   113d8:	2001      	movs	r0, #1
   113da:	4611      	mov	r1, r2
   113dc:	461a      	mov	r2, r3
   113de:	f00f fbc3 	bl	20b68 <ObjectGetDescriptor>
   113e2:	60f8      	str	r0, [r7, #12]

	if (iRet == 0)
   113e4:	68fb      	ldr	r3, [r7, #12]
   113e6:	2b00      	cmp	r3, #0
   113e8:	d101      	bne.n	113ee <AppliExist+0x32>
		return TRUE;    // Application file present in SYSTEM disk
   113ea:	2301      	movs	r3, #1
   113ec:	e000      	b.n	113f0 <AppliExist+0x34>

	return FALSE;       // Application file absent from SYSTEM disk
   113ee:	2300      	movs	r3, #0
}
   113f0:	4618      	mov	r0, r3
   113f2:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   113f6:	f2c0 0302 	movt	r3, #2
   113fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   113fc:	681b      	ldr	r3, [r3, #0]
   113fe:	429a      	cmp	r2, r3
   11400:	d001      	beq.n	11406 <AppliExist+0x4a>
   11402:	f7f7 fdcf 	bl	8fa4 <__stack_chk_fail>
   11406:	f107 0758 	add.w	r7, r7, #88	; 0x58
   1140a:	46bd      	mov	sp, r7
   1140c:	bd80      	pop	{r7, pc}
   1140e:	bf00      	nop

00011410 <TimerStart>:
//     >=0 : TimerStart done
//     <0  : TimerStart failed
//****************************************************************************

long TimerStart(byte ucTimerNbr, long lDelay)
{
   11410:	b580      	push	{r7, lr}
   11412:	b086      	sub	sp, #24
   11414:	af00      	add	r7, sp, #0
   11416:	4603      	mov	r3, r0
   11418:	6039      	str	r1, [r7, #0]
   1141a:	71fb      	strb	r3, [r7, #7]
   1141c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   11420:	f2c0 0302 	movt	r3, #2
   11424:	681b      	ldr	r3, [r3, #0]
   11426:	617b      	str	r3, [r7, #20]
    // ***************
	T_OSL_TIMESTP llTimer;

    // Start timer in progress
    // ***********************
    CHECK(ucTimerNbr<TMR_NBR, lblKO);
   11428:	79fb      	ldrb	r3, [r7, #7]
   1142a:	2b03      	cmp	r3, #3
   1142c:	d82c      	bhi.n	11488 <TimerStart+0x78>

    // Get the current timer value
    // ===========================
    llTimer = OSL_TimeStp_Now();    // In 1ns ticks.
   1142e:	f010 fdf4 	bl	2201a <OSL_TimeStp_Now>
   11432:	e9c7 0102 	strd	r0, r1, [r7, #8]

    // Set the timer to a 'period' into the future
    // ===========================================
    llTimer += (T_OSL_TIMESTP) lDelay*1000*1000;
   11436:	6839      	ldr	r1, [r7, #0]
   11438:	460a      	mov	r2, r1
   1143a:	17d3      	asrs	r3, r2, #31
   1143c:	f244 2140 	movw	r1, #16960	; 0x4240
   11440:	f2c0 010f 	movt	r1, #15
   11444:	fb01 f003 	mul.w	r0, r1, r3
   11448:	2100      	movs	r1, #0
   1144a:	fb01 f102 	mul.w	r1, r1, r2
   1144e:	1840      	adds	r0, r0, r1
   11450:	f244 2140 	movw	r1, #16960	; 0x4240
   11454:	f2c0 010f 	movt	r1, #15
   11458:	fba2 2301 	umull	r2, r3, r2, r1
   1145c:	18c1      	adds	r1, r0, r3
   1145e:	460b      	mov	r3, r1
   11460:	edd7 0b02 	vldr	d16, [r7, #8]
   11464:	ec43 2b31 	vmov	d17, r2, r3
   11468:	ef70 08a1 	vadd.i64	d16, d16, d17
   1146c:	edc7 0b02 	vstr	d16, [r7, #8]

    // Assign it to the proper timer
    // =============================
    tllTimer[ucTimerNbr]= llTimer;
   11470:	79fa      	ldrb	r2, [r7, #7]
   11472:	f64f 7380 	movw	r3, #65408	; 0xff80
   11476:	f2c0 0302 	movt	r3, #2
   1147a:	00d2      	lsls	r2, r2, #3
   1147c:	1899      	adds	r1, r3, r2
   1147e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   11482:	e9c1 2300 	strd	r2, r3, [r1]

    goto lblEnd;
   11486:	e002      	b.n	1148e <TimerStart+0x7e>

	// Errors treatment 
    // ****************
lblKO:
    lDelay=-1;
   11488:	f04f 33ff 	mov.w	r3, #4294967295
   1148c:	603b      	str	r3, [r7, #0]
lblEnd:
    return lDelay;
   1148e:	683b      	ldr	r3, [r7, #0]
}
   11490:	4618      	mov	r0, r3
   11492:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   11496:	f2c0 0302 	movt	r3, #2
   1149a:	697a      	ldr	r2, [r7, #20]
   1149c:	681b      	ldr	r3, [r3, #0]
   1149e:	429a      	cmp	r2, r3
   114a0:	d001      	beq.n	114a6 <TimerStart+0x96>
   114a2:	f7f7 fd7f 	bl	8fa4 <__stack_chk_fail>
   114a6:	f107 0718 	add.w	r7, r7, #24
   114aa:	46bd      	mov	sp, r7
   114ac:	bd80      	pop	{r7, pc}
   114ae:	bf00      	nop

000114b0 <TimerGet>:
//     >=0 : The number of milliseconds rest
//     <0  : TimerGet failed
//****************************************************************************

long TimerGet(byte ucTimerNbr)
{
   114b0:	b580      	push	{r7, lr}
   114b2:	b08a      	sub	sp, #40	; 0x28
   114b4:	af00      	add	r7, sp, #0
   114b6:	4603      	mov	r3, r0
   114b8:	71fb      	strb	r3, [r7, #7]
   114ba:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   114be:	f2c0 0302 	movt	r3, #2
   114c2:	681b      	ldr	r3, [r3, #0]
   114c4:	627b      	str	r3, [r7, #36]	; 0x24
	T_OSL_TIMESTP llTimerEnd, llTimer;
    long lRet;
    
    // Get timer in progress
    // *********************
    CHECK(ucTimerNbr<TMR_NBR, lblKO);
   114c6:	79fb      	ldrb	r3, [r7, #7]
   114c8:	2b03      	cmp	r3, #3
   114ca:	d821      	bhi.n	11510 <TimerGet+0x60>

    // Get the remaining timer value before expiration
    // ===============================================
    llTimerEnd = tllTimer[ucTimerNbr];  // Retrieve the timer value to reach (ns)
   114cc:	79fa      	ldrb	r2, [r7, #7]
   114ce:	f64f 7380 	movw	r3, #65408	; 0xff80
   114d2:	f2c0 0302 	movt	r3, #2
   114d6:	00d2      	lsls	r2, r2, #3
   114d8:	189b      	adds	r3, r3, r2
   114da:	e9d3 2300 	ldrd	r2, r3, [r3]
   114de:	e9c7 2304 	strd	r2, r3, [r7, #16]

    llTimer = OSL_TimeStp_Now();        // Get the current timer value (ns).
   114e2:	f010 fd9a 	bl	2201a <OSL_TimeStp_Now>
   114e6:	e9c7 0106 	strd	r0, r1, [r7, #24]

    if(llTimer < llTimerEnd)
   114ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   114ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   114f2:	4290      	cmp	r0, r2
   114f4:	eb71 0c03 	sbcs.w	ip, r1, r3
   114f8:	da07      	bge.n	1150a <TimerGet+0x5a>
    	lRet = OSL_TimeStp_ElapsedMs(llTimer, llTimerEnd);  // Return the remaining value (ms)
   114fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   114fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   11502:	f010 fd7a 	bl	21ffa <OSL_TimeStp_ElapsedMs>
   11506:	60f8      	str	r0, [r7, #12]
    else
    	lRet = 0;                                           // Timer expired
    
    goto lblEnd;
   11508:	e005      	b.n	11516 <TimerGet+0x66>
    llTimer = OSL_TimeStp_Now();        // Get the current timer value (ns).

    if(llTimer < llTimerEnd)
    	lRet = OSL_TimeStp_ElapsedMs(llTimer, llTimerEnd);  // Return the remaining value (ms)
    else
    	lRet = 0;                                           // Timer expired
   1150a:	2300      	movs	r3, #0
   1150c:	60fb      	str	r3, [r7, #12]
    
    goto lblEnd;
   1150e:	e002      	b.n	11516 <TimerGet+0x66>

	// Errors treatment 
    // ****************
lblKO:
    lRet=-1;
   11510:	f04f 33ff 	mov.w	r3, #4294967295
   11514:	60fb      	str	r3, [r7, #12]
lblEnd:
    return lRet;
   11516:	68fb      	ldr	r3, [r7, #12]
}
   11518:	4618      	mov	r0, r3
   1151a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1151e:	f2c0 0302 	movt	r3, #2
   11522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11524:	681b      	ldr	r3, [r3, #0]
   11526:	429a      	cmp	r2, r3
   11528:	d001      	beq.n	1152e <TimerGet+0x7e>
   1152a:	f7f7 fd3b 	bl	8fa4 <__stack_chk_fail>
   1152e:	f107 0728 	add.w	r7, r7, #40	; 0x28
   11532:	46bd      	mov	sp, r7
   11534:	bd80      	pop	{r7, pc}
   11536:	bf00      	nop

00011538 <TimerStop>:
//     >=0 : TimerStop done
//     <0  : TimerStop failed
//****************************************************************************

int TimerStop(byte ucTimerNbr)
{
   11538:	b580      	push	{r7, lr}
   1153a:	b084      	sub	sp, #16
   1153c:	af00      	add	r7, sp, #0
   1153e:	4603      	mov	r3, r0
   11540:	71fb      	strb	r3, [r7, #7]
   11542:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   11546:	f2c0 0302 	movt	r3, #2
   1154a:	681b      	ldr	r3, [r3, #0]
   1154c:	60fb      	str	r3, [r7, #12]
    // ***************
    int iRet;
	
	// Stop timer in progress
	// **********************
    CHECK(ucTimerNbr<TMR_NBR, lblKO);
   1154e:	79fb      	ldrb	r3, [r7, #7]
   11550:	2b03      	cmp	r3, #3
   11552:	d80d      	bhi.n	11570 <TimerStop+0x38>
    
    tllTimer[ucTimerNbr] = 0;
   11554:	79fa      	ldrb	r2, [r7, #7]
   11556:	f64f 7380 	movw	r3, #65408	; 0xff80
   1155a:	f2c0 0302 	movt	r3, #2
   1155e:	00d2      	lsls	r2, r2, #3
   11560:	189b      	adds	r3, r3, r2
   11562:	efc0 0010 	vmov.i32	d16, #0	; 0x00000000
   11566:	edc3 0b00 	vstr	d16, [r3]
    
    iRet=0;
   1156a:	2300      	movs	r3, #0
   1156c:	60bb      	str	r3, [r7, #8]
    goto lblEnd;
   1156e:	e002      	b.n	11576 <TimerStop+0x3e>

	// Errors treatment 
    // ****************
lblKO:
    iRet=-1;
   11570:	f04f 33ff 	mov.w	r3, #4294967295
   11574:	60bb      	str	r3, [r7, #8]
lblEnd:
    return iRet; 
   11576:	68bb      	ldr	r3, [r7, #8]
}
   11578:	4618      	mov	r0, r3
   1157a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1157e:	f2c0 0302 	movt	r3, #2
   11582:	68fa      	ldr	r2, [r7, #12]
   11584:	681b      	ldr	r3, [r3, #0]
   11586:	429a      	cmp	r2, r3
   11588:	d001      	beq.n	1158e <TimerStop+0x56>
   1158a:	f7f7 fd0b 	bl	8fa4 <__stack_chk_fail>
   1158e:	f107 0710 	add.w	r7, r7, #16
   11592:	46bd      	mov	sp, r7
   11594:	bd80      	pop	{r7, pc}
   11596:	bf00      	nop

00011598 <Timer>:
//  This function has no parameters.
//  This function has no return value.
//****************************************************************************

void Timer(void)
{
   11598:	b590      	push	{r4, r7, lr}
   1159a:	b08d      	sub	sp, #52	; 0x34
   1159c:	af02      	add	r7, sp, #8
   1159e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   115a2:	f2c0 0302 	movt	r3, #2
   115a6:	681b      	ldr	r3, [r3, #0]
   115a8:	627b      	str	r3, [r7, #36]	; 0x24
	// Local variables 
    // ***************
	T_GL_HWIDGET xScreen=NULL;
   115aa:	2300      	movs	r3, #0
   115ac:	607b      	str	r3, [r7, #4]
	long lRet0;
    int iRet;
    
    // Timer demo in progress
    // **********************
	xScreen = GoalCreateScreen(gGoalGraphicLibInstance, txCounter, NUMBER_OF_LINES(txCounter), GL_ENCODING_UTF8);
   115ae:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   115b2:	f2c0 0302 	movt	r3, #2
   115b6:	681b      	ldr	r3, [r3, #0]
   115b8:	4618      	mov	r0, r3
   115ba:	f244 516c 	movw	r1, #17772	; 0x456c
   115be:	f2c0 0102 	movt	r1, #2
   115c2:	2203      	movs	r2, #3
   115c4:	2300      	movs	r3, #0
   115c6:	f7fb fd5d 	bl	d084 <GoalCreateScreen>
   115ca:	4603      	mov	r3, r0
   115cc:	607b      	str	r3, [r7, #4]
	CHECK(xScreen!=NULL, lblKO);       // Create screen and clear it
   115ce:	687b      	ldr	r3, [r7, #4]
   115d0:	2b00      	cmp	r3, #0
   115d2:	f000 8097 	beq.w	11704 <Timer+0x16c>
	iRet = GoalClrScreen(xScreen, GL_COLOR_BLACK, KEY_CANCEL, false);
   115d6:	687b      	ldr	r3, [r7, #4]
   115d8:	4618      	mov	r0, r3
   115da:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
   115de:	2202      	movs	r2, #2
   115e0:	2300      	movs	r3, #0
   115e2:	f7fb feed 	bl	d3c0 <GoalClrScreen>
   115e6:	60b8      	str	r0, [r7, #8]
	CHECK(iRet>=0, lblKO);
   115e8:	68bb      	ldr	r3, [r7, #8]
   115ea:	2b00      	cmp	r3, #0
   115ec:	f2c0 808a 	blt.w	11704 <Timer+0x16c>

    iRet = GoalDspLine(xScreen, 0, "Expiration Time", &txCounter[0], 0, false);
   115f0:	687b      	ldr	r3, [r7, #4]
   115f2:	2200      	movs	r2, #0
   115f4:	9200      	str	r2, [sp, #0]
   115f6:	2200      	movs	r2, #0
   115f8:	9201      	str	r2, [sp, #4]
   115fa:	4618      	mov	r0, r3
   115fc:	2100      	movs	r1, #0
   115fe:	f244 7270 	movw	r2, #18288	; 0x4770
   11602:	f2c0 0202 	movt	r2, #2
   11606:	f244 536c 	movw	r3, #17772	; 0x456c
   1160a:	f2c0 0302 	movt	r3, #2
   1160e:	f7fb fff1 	bl	d5f4 <GoalDspLine>
   11612:	60b8      	str	r0, [r7, #8]
	CHECK(iRet>=0, lblKO);
   11614:	68bb      	ldr	r3, [r7, #8]
   11616:	2b00      	cmp	r3, #0
   11618:	db74      	blt.n	11704 <Timer+0x16c>
    lRet0 = TimerStart(0, 15*1000);    // Timer0 starts to 15s
   1161a:	2000      	movs	r0, #0
   1161c:	f643 2198 	movw	r1, #15000	; 0x3a98
   11620:	f7ff fef6 	bl	11410 <TimerStart>
   11624:	60f8      	str	r0, [r7, #12]
    CHECK(lRet0>=0, lblKO);
   11626:	68fb      	ldr	r3, [r7, #12]
   11628:	2b00      	cmp	r3, #0
   1162a:	db6b      	blt.n	11704 <Timer+0x16c>
    while ((lRet0=TimerGet(0)) > 0)    // Check Timer0
   1162c:	e03b      	b.n	116a6 <Timer+0x10e>
    {
    	CHECK(lRet0>=0, lblKO);
   1162e:	68fb      	ldr	r3, [r7, #12]
   11630:	2b00      	cmp	r3, #0
   11632:	db67      	blt.n	11704 <Timer+0x16c>
    	
        // Display Remaining Time
    	// ======================
        sprintf(tcDisplay, "%2ld.%03ld Sec", lRet0/1000, lRet0%1000);
   11634:	68fa      	ldr	r2, [r7, #12]
   11636:	f644 53d3 	movw	r3, #19923	; 0x4dd3
   1163a:	f2c1 0362 	movt	r3, #4194	; 0x1062
   1163e:	fb83 1302 	smull	r1, r3, r3, r2
   11642:	1199      	asrs	r1, r3, #6
   11644:	17d3      	asrs	r3, r2, #31
   11646:	1acc      	subs	r4, r1, r3
   11648:	68fa      	ldr	r2, [r7, #12]
   1164a:	f644 53d3 	movw	r3, #19923	; 0x4dd3
   1164e:	f2c1 0362 	movt	r3, #4194	; 0x1062
   11652:	fb83 1302 	smull	r1, r3, r3, r2
   11656:	1199      	asrs	r1, r3, #6
   11658:	17d3      	asrs	r3, r2, #31
   1165a:	1acb      	subs	r3, r1, r3
   1165c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11660:	fb01 f303 	mul.w	r3, r1, r3
   11664:	1ad3      	subs	r3, r2, r3
   11666:	f107 0210 	add.w	r2, r7, #16
   1166a:	4610      	mov	r0, r2
   1166c:	f244 7180 	movw	r1, #18304	; 0x4780
   11670:	f2c0 0102 	movt	r1, #2
   11674:	4622      	mov	r2, r4
   11676:	f7f7 eb1e 	blx	8cb4 <_init+0x154>
    	iRet = GoalDspLine(xScreen, 1, tcDisplay, &txCounter[1], 0, true);
   1167a:	687a      	ldr	r2, [r7, #4]
   1167c:	f107 0310 	add.w	r3, r7, #16
   11680:	2100      	movs	r1, #0
   11682:	9100      	str	r1, [sp, #0]
   11684:	2101      	movs	r1, #1
   11686:	9101      	str	r1, [sp, #4]
   11688:	4610      	mov	r0, r2
   1168a:	2101      	movs	r1, #1
   1168c:	461a      	mov	r2, r3
   1168e:	4b34      	ldr	r3, [pc, #208]	; (11760 <Timer+0x1c8>)
   11690:	f7fb ffb0 	bl	d5f4 <GoalDspLine>
   11694:	60b8      	str	r0, [r7, #8]
		CHECK(iRet>=0, lblKO);
   11696:	68bb      	ldr	r3, [r7, #8]
   11698:	2b00      	cmp	r3, #0
   1169a:	db33      	blt.n	11704 <Timer+0x16c>
		CHECK(iRet!=GL_KEY_CANCEL, lblEnd);    // Exit on cancel key
   1169c:	68ba      	ldr	r2, [r7, #8]
   1169e:	f64f 0351 	movw	r3, #63569	; 0xf851
   116a2:	429a      	cmp	r2, r3
   116a4:	d043      	beq.n	1172e <Timer+0x196>

    iRet = GoalDspLine(xScreen, 0, "Expiration Time", &txCounter[0], 0, false);
	CHECK(iRet>=0, lblKO);
    lRet0 = TimerStart(0, 15*1000);    // Timer0 starts to 15s
    CHECK(lRet0>=0, lblKO);
    while ((lRet0=TimerGet(0)) > 0)    // Check Timer0
   116a6:	2000      	movs	r0, #0
   116a8:	f7ff ff02 	bl	114b0 <TimerGet>
   116ac:	60f8      	str	r0, [r7, #12]
   116ae:	68fb      	ldr	r3, [r7, #12]
   116b0:	2b00      	cmp	r3, #0
   116b2:	dcbc      	bgt.n	1162e <Timer+0x96>
    	iRet = GoalDspLine(xScreen, 1, tcDisplay, &txCounter[1], 0, true);
		CHECK(iRet>=0, lblKO);
		CHECK(iRet!=GL_KEY_CANCEL, lblEnd);    // Exit on cancel key
    }

	iRet = GoalDspLine(xScreen, 1, " 0.000 Sec", &txCounter[1], 0, false);
   116b4:	687b      	ldr	r3, [r7, #4]
   116b6:	2200      	movs	r2, #0
   116b8:	9200      	str	r2, [sp, #0]
   116ba:	2200      	movs	r2, #0
   116bc:	9201      	str	r2, [sp, #4]
   116be:	4618      	mov	r0, r3
   116c0:	2101      	movs	r1, #1
   116c2:	f244 7290 	movw	r2, #18320	; 0x4790
   116c6:	f2c0 0202 	movt	r2, #2
   116ca:	4b25      	ldr	r3, [pc, #148]	; (11760 <Timer+0x1c8>)
   116cc:	f7fb ff92 	bl	d5f4 <GoalDspLine>
   116d0:	60b8      	str	r0, [r7, #8]
	CHECK(iRet>=0, lblKO);
   116d2:	68bb      	ldr	r3, [r7, #8]
   116d4:	2b00      	cmp	r3, #0
   116d6:	db15      	blt.n	11704 <Timer+0x16c>
    buzzer(10);
   116d8:	200a      	movs	r0, #10
   116da:	f00e fb3b 	bl	1fd54 <buzzer>
	iRet = GoalDspLine(xScreen, 2, "Timer expired !!!", &txCounter[2], 5*1000, true);
   116de:	687b      	ldr	r3, [r7, #4]
   116e0:	f241 3288 	movw	r2, #5000	; 0x1388
   116e4:	9200      	str	r2, [sp, #0]
   116e6:	2201      	movs	r2, #1
   116e8:	9201      	str	r2, [sp, #4]
   116ea:	4618      	mov	r0, r3
   116ec:	2102      	movs	r1, #2
   116ee:	f244 729c 	movw	r2, #18332	; 0x479c
   116f2:	f2c0 0202 	movt	r2, #2
   116f6:	4b1b      	ldr	r3, [pc, #108]	; (11764 <Timer+0x1cc>)
   116f8:	f7fb ff7c 	bl	d5f4 <GoalDspLine>
   116fc:	60b8      	str	r0, [r7, #8]
	CHECK(iRet>=0, lblKO);
   116fe:	68bb      	ldr	r3, [r7, #8]
   11700:	2b00      	cmp	r3, #0
   11702:	da13      	bge.n	1172c <Timer+0x194>
	goto lblEnd;

	// Errors treatment 
    // ****************
lblKO:                                 // None-classified low level error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Processing Error", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   11704:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   11708:	f2c0 0302 	movt	r3, #2
   1170c:	681b      	ldr	r3, [r3, #0]
   1170e:	2201      	movs	r2, #1
   11710:	9200      	str	r2, [sp, #0]
   11712:	f241 3288 	movw	r2, #5000	; 0x1388
   11716:	9201      	str	r2, [sp, #4]
   11718:	4618      	mov	r0, r3
   1171a:	2100      	movs	r1, #0
   1171c:	f244 72b0 	movw	r2, #18352	; 0x47b0
   11720:	f2c0 0202 	movt	r2, #2
   11724:	2304      	movs	r3, #4
   11726:	f00f fefd 	bl	21524 <GL_Dialog_Message>
   1172a:	e000      	b.n	1172e <Timer+0x196>
	CHECK(iRet>=0, lblKO);
    buzzer(10);
	iRet = GoalDspLine(xScreen, 2, "Timer expired !!!", &txCounter[2], 5*1000, true);
	CHECK(iRet>=0, lblKO);

	goto lblEnd;
   1172c:	bf00      	nop
	// Errors treatment 
    // ****************
lblKO:                                 // None-classified low level error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Processing Error", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
lblEnd:
    TimerStop(0);                      // Stop Timer0
   1172e:	2000      	movs	r0, #0
   11730:	f7ff ff02 	bl	11538 <TimerStop>

	if (xScreen)
   11734:	687b      	ldr	r3, [r7, #4]
   11736:	2b00      	cmp	r3, #0
   11738:	d003      	beq.n	11742 <Timer+0x1aa>
		GoalDestroyScreen(&xScreen);   // Destroy screen
   1173a:	1d3b      	adds	r3, r7, #4
   1173c:	4618      	mov	r0, r3
   1173e:	f7fc fbf1 	bl	df24 <GoalDestroyScreen>
}
   11742:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   11746:	f2c0 0302 	movt	r3, #2
   1174a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1174c:	681b      	ldr	r3, [r3, #0]
   1174e:	429a      	cmp	r2, r3
   11750:	d001      	beq.n	11756 <Timer+0x1be>
   11752:	f7f7 fc27 	bl	8fa4 <__stack_chk_fail>
   11756:	f107 072c 	add.w	r7, r7, #44	; 0x2c
   1175a:	46bd      	mov	sp, r7
   1175c:	bd90      	pop	{r4, r7, pc}
   1175e:	bf00      	nop
   11760:	00024618 	.word	0x00024618
   11764:	000246c4 	.word	0x000246c4

00011768 <isoFmt>:
		LLLBCD,                     // 125
		LLLBCD,                     // 126
		LLLBCD,                     // 127
		8                           // 128 Message Authentication Code (MAC)
};
int isoFmt(byte bit) {
   11768:	b580      	push	{r7, lr}
   1176a:	b084      	sub	sp, #16
   1176c:	af00      	add	r7, sp, #0
   1176e:	4603      	mov	r3, r0
   11770:	71fb      	strb	r3, [r7, #7]
   11772:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   11776:	f2c0 0302 	movt	r3, #2
   1177a:	681b      	ldr	r3, [r3, #0]
   1177c:	60fb      	str	r3, [r7, #12]
	VERIFY(isoBitBeg < bit);
	VERIFY(bit < isoBitEnd);
	return fmt[bit - 1];
   1177e:	79fb      	ldrb	r3, [r7, #7]
   11780:	1e5a      	subs	r2, r3, #1
   11782:	f24f 3360 	movw	r3, #62304	; 0xf360
   11786:	f2c0 0302 	movt	r3, #2
   1178a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
   1178e:	4618      	mov	r0, r3
   11790:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   11794:	f2c0 0302 	movt	r3, #2
   11798:	68fa      	ldr	r2, [r7, #12]
   1179a:	681b      	ldr	r3, [r3, #0]
   1179c:	429a      	cmp	r2, r3
   1179e:	d001      	beq.n	117a4 <isoFmt+0x3c>
   117a0:	f7f7 fc00 	bl	8fa4 <__stack_chk_fail>
   117a4:	f107 0710 	add.w	r7, r7, #16
   117a8:	46bd      	mov	sp, r7
   117aa:	bd80      	pop	{r7, pc}

000117ac <isoFmt_Gateway>:
int isoFmt_Gateway(byte bit) {
   117ac:	b580      	push	{r7, lr}
   117ae:	b084      	sub	sp, #16
   117b0:	af00      	add	r7, sp, #0
   117b2:	4603      	mov	r3, r0
   117b4:	71fb      	strb	r3, [r7, #7]
   117b6:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   117ba:	f2c0 0302 	movt	r3, #2
   117be:	681b      	ldr	r3, [r3, #0]
   117c0:	60fb      	str	r3, [r7, #12]
	VERIFY(isoBitBeg < bit);
	VERIFY(bit < isoBitEnd);
	return fmt_Gateway[bit - 1];
   117c2:	79fb      	ldrb	r3, [r7, #7]
   117c4:	1e5a      	subs	r2, r3, #1
   117c6:	f24f 5360 	movw	r3, #62816	; 0xf560
   117ca:	f2c0 0302 	movt	r3, #2
   117ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
   117d2:	4618      	mov	r0, r3
   117d4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   117d8:	f2c0 0302 	movt	r3, #2
   117dc:	68fa      	ldr	r2, [r7, #12]
   117de:	681b      	ldr	r3, [r3, #0]
   117e0:	429a      	cmp	r2, r3
   117e2:	d001      	beq.n	117e8 <isoFmt_Gateway+0x3c>
   117e4:	f7f7 fbde 	bl	8fa4 <__stack_chk_fail>
   117e8:	f107 0710 	add.w	r7, r7, #16
   117ec:	46bd      	mov	sp, r7
   117ee:	bd80      	pop	{r7, pc}

000117f0 <getPanVal>:
static int thereis_F;




static int getPanVal(tBuffer * val) {
   117f0:	b590      	push	{r4, r7, lr}
   117f2:	b0cb      	sub	sp, #300	; 0x12c
   117f4:	af00      	add	r7, sp, #0
   117f6:	1d3b      	adds	r3, r7, #4
   117f8:	6018      	str	r0, [r3, #0]
   117fa:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   117fe:	f2c0 0302 	movt	r3, #2
   11802:	681b      	ldr	r3, [r3, #0]
   11804:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	byte buf[256];
	byte bcd[lenPan];


	VERIFY(val);
	ret = mapGet(traPan, buf, 256);
   11808:	f107 040c 	add.w	r4, r7, #12
   1180c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   11810:	201c      	movs	r0, #28
   11812:	4619      	mov	r1, r3
   11814:	f44f 7280 	mov.w	r2, #256	; 0x100
   11818:	f004 fe60 	bl	164dc <mapGet>
   1181c:	6020      	str	r0, [r4, #0]
	CHK;
   1181e:	f107 030c 	add.w	r3, r7, #12
   11822:	681b      	ldr	r3, [r3, #0]
   11824:	2b00      	cmp	r3, #0
   11826:	db4a      	blt.n	118be <getPanVal+0xce>
	VERIFY(strlen((char *) buf) <= 256);
   11828:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1182c:	4618      	mov	r0, r3
   1182e:	f7f7 ea2a 	blx	8c84 <_init+0x124>
	bufReset(val);
   11832:	1d3b      	adds	r3, r7, #4
   11834:	6818      	ldr	r0, [r3, #0]
   11836:	f001 fbb5 	bl	12fa4 <bufReset>

	ret = strlen((char *) buf);
   1183a:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1183e:	4618      	mov	r0, r3
   11840:	f7f7 ea20 	blx	8c84 <_init+0x124>
   11844:	4602      	mov	r2, r0
   11846:	f107 030c 	add.w	r3, r7, #12
   1184a:	601a      	str	r2, [r3, #0]
	if(ret % 2 != 0)
   1184c:	f107 030c 	add.w	r3, r7, #12
   11850:	681b      	ldr	r3, [r3, #0]
   11852:	f003 0301 	and.w	r3, r3, #1
   11856:	2b00      	cmp	r3, #0
   11858:	d006      	beq.n	11868 <getPanVal+0x78>
		ret++;
   1185a:	f107 030c 	add.w	r3, r7, #12
   1185e:	f107 020c 	add.w	r2, r7, #12
   11862:	6812      	ldr	r2, [r2, #0]
   11864:	3201      	adds	r2, #1
   11866:	601a      	str	r2, [r3, #0]

	hex2bin(bcd, (char *)buf, ret/2);
   11868:	f107 030c 	add.w	r3, r7, #12
   1186c:	681b      	ldr	r3, [r3, #0]
   1186e:	2b00      	cmp	r3, #0
   11870:	da00      	bge.n	11874 <getPanVal+0x84>
   11872:	3301      	adds	r3, #1
   11874:	105b      	asrs	r3, r3, #1
   11876:	f107 0110 	add.w	r1, r7, #16
   1187a:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1187e:	4608      	mov	r0, r1
   11880:	4611      	mov	r1, r2
   11882:	461a      	mov	r2, r3
   11884:	f001 f96e 	bl	12b64 <hex2bin>

	ret = bufApp(val, bcd, ret/2);
   11888:	f107 030c 	add.w	r3, r7, #12
   1188c:	681b      	ldr	r3, [r3, #0]
   1188e:	2b00      	cmp	r3, #0
   11890:	da00      	bge.n	11894 <getPanVal+0xa4>
   11892:	3301      	adds	r3, #1
   11894:	105b      	asrs	r3, r3, #1
   11896:	f107 040c 	add.w	r4, r7, #12
   1189a:	1d39      	adds	r1, r7, #4
   1189c:	f107 0210 	add.w	r2, r7, #16
   118a0:	6808      	ldr	r0, [r1, #0]
   118a2:	4611      	mov	r1, r2
   118a4:	461a      	mov	r2, r3
   118a6:	f001 fd5d 	bl	13364 <bufApp>
   118aa:	6020      	str	r0, [r4, #0]
	CHK;
   118ac:	f107 030c 	add.w	r3, r7, #12
   118b0:	681b      	ldr	r3, [r3, #0]
   118b2:	2b00      	cmp	r3, #0
   118b4:	db03      	blt.n	118be <getPanVal+0xce>

	return ret;
   118b6:	f107 030c 	add.w	r3, r7, #12
   118ba:	681b      	ldr	r3, [r3, #0]
   118bc:	e001      	b.n	118c2 <getPanVal+0xd2>
	lblKO:
	return -1;
   118be:	f04f 33ff 	mov.w	r3, #4294967295
}
   118c2:	4618      	mov	r0, r3
   118c4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   118c8:	f2c0 0302 	movt	r3, #2
   118cc:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
   118d0:	681b      	ldr	r3, [r3, #0]
   118d2:	429a      	cmp	r2, r3
   118d4:	d001      	beq.n	118da <getPanVal+0xea>
   118d6:	f7f7 fb65 	bl	8fa4 <__stack_chk_fail>
   118da:	f507 7796 	add.w	r7, r7, #300	; 0x12c
   118de:	46bd      	mov	sp, r7
   118e0:	bd90      	pop	{r4, r7, pc}
   118e2:	bf00      	nop

000118e4 <getAmt>:


static int getAmt(tBuffer * val) {
   118e4:	b580      	push	{r7, lr}
   118e6:	b08c      	sub	sp, #48	; 0x30
   118e8:	af00      	add	r7, sp, #0
   118ea:	6078      	str	r0, [r7, #4]
   118ec:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   118f0:	f2c0 0302 	movt	r3, #2
   118f4:	681b      	ldr	r3, [r3, #0]
   118f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	byte bcd[lenAmtBcd];
	word Amtkey;

	VERIFY(val);

	memset(amt, 0, sizeof(amt));
   118f8:	f107 031c 	add.w	r3, r7, #28
   118fc:	4618      	mov	r0, r3
   118fe:	2100      	movs	r1, #0
   11900:	220d      	movs	r2, #13
   11902:	f7f7 e95c 	blx	8bbc <_init+0x5c>
	//          Amtkey = logTraAmt;
	//          TipAmtkey = logTipAmt;
	//          break;
	//      case 'T':
	default:
		Amtkey = traAmt;
   11906:	231b      	movs	r3, #27
   11908:	81fb      	strh	r3, [r7, #14]
		break;
   1190a:	bf00      	nop
	}

	MAPGET(Amtkey, amt, lblKO);
   1190c:	89fa      	ldrh	r2, [r7, #14]
   1190e:	f107 031c 	add.w	r3, r7, #28
   11912:	4610      	mov	r0, r2
   11914:	4619      	mov	r1, r3
   11916:	220d      	movs	r2, #13
   11918:	f004 fde0 	bl	164dc <mapGet>
   1191c:	6138      	str	r0, [r7, #16]
   1191e:	693b      	ldr	r3, [r7, #16]
   11920:	2b00      	cmp	r3, #0
   11922:	db1d      	blt.n	11960 <getAmt+0x7c>

	fmtPad(amt, -lenAmt, '0');
   11924:	f107 031c 	add.w	r3, r7, #28
   11928:	4618      	mov	r0, r3
   1192a:	f06f 010b 	mvn.w	r1, #11
   1192e:	2230      	movs	r2, #48	; 0x30
   11930:	f002 faa4 	bl	13e7c <fmtPad>
	hex2bin(bcd, amt, 0);
   11934:	f107 0214 	add.w	r2, r7, #20
   11938:	f107 031c 	add.w	r3, r7, #28
   1193c:	4610      	mov	r0, r2
   1193e:	4619      	mov	r1, r3
   11940:	2200      	movs	r2, #0
   11942:	f001 f90f 	bl	12b64 <hex2bin>

	ret = bufApp(val, bcd, lenAmtBcd);
   11946:	f107 0314 	add.w	r3, r7, #20
   1194a:	6878      	ldr	r0, [r7, #4]
   1194c:	4619      	mov	r1, r3
   1194e:	2206      	movs	r2, #6
   11950:	f001 fd08 	bl	13364 <bufApp>
   11954:	6138      	str	r0, [r7, #16]
	CHK;
   11956:	693b      	ldr	r3, [r7, #16]
   11958:	2b00      	cmp	r3, #0
   1195a:	db01      	blt.n	11960 <getAmt+0x7c>

	return ret;
   1195c:	693b      	ldr	r3, [r7, #16]
   1195e:	e001      	b.n	11964 <getAmt+0x80>
	lblKO:
	return -1;
   11960:	f04f 33ff 	mov.w	r3, #4294967295
}
   11964:	4618      	mov	r0, r3
   11966:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1196a:	f2c0 0302 	movt	r3, #2
   1196e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   11970:	681b      	ldr	r3, [r3, #0]
   11972:	429a      	cmp	r2, r3
   11974:	d001      	beq.n	1197a <getAmt+0x96>
   11976:	f7f7 fb15 	bl	8fa4 <__stack_chk_fail>
   1197a:	f107 0730 	add.w	r7, r7, #48	; 0x30
   1197e:	46bd      	mov	sp, r7
   11980:	bd80      	pop	{r7, pc}
   11982:	bf00      	nop

00011984 <getPIN>:


static int getPIN(tBuffer * val) {
   11984:	b580      	push	{r7, lr}
   11986:	b088      	sub	sp, #32
   11988:	af00      	add	r7, sp, #0
   1198a:	6078      	str	r0, [r7, #4]
   1198c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   11990:	f2c0 0302 	movt	r3, #2
   11994:	681b      	ldr	r3, [r3, #0]
   11996:	61fb      	str	r3, [r7, #28]
	byte PIN[1 + lenPinBlk];
	//	char tmp[2 * lenPIN + 1];

	VERIFY(val);

	ret = mapGet(traPinBlk, PIN, sizeof(PIN));
   11998:	f107 0310 	add.w	r3, r7, #16
   1199c:	201e      	movs	r0, #30
   1199e:	4619      	mov	r1, r3
   119a0:	2209      	movs	r2, #9
   119a2:	f004 fd9b 	bl	164dc <mapGet>
   119a6:	60f8      	str	r0, [r7, #12]
	CHK;
   119a8:	68fb      	ldr	r3, [r7, #12]
   119aa:	2b00      	cmp	r3, #0
   119ac:	db0c      	blt.n	119c8 <getPIN+0x44>

	//	CHECK(*PIN == lenPinBlk, lblKO);
	//	bin2hex(tmp, (byte *) PIN + 1, lenPinBlk);
	//	ret = bufApp(val, (byte *) tmp, lenPinBlk);
	//	CHK;
	ret = bufApp(val, PIN, lenPinBlk);
   119ae:	f107 0310 	add.w	r3, r7, #16
   119b2:	6878      	ldr	r0, [r7, #4]
   119b4:	4619      	mov	r1, r3
   119b6:	2208      	movs	r2, #8
   119b8:	f001 fcd4 	bl	13364 <bufApp>
   119bc:	60f8      	str	r0, [r7, #12]
	CHK;
   119be:	68fb      	ldr	r3, [r7, #12]
   119c0:	2b00      	cmp	r3, #0
   119c2:	db01      	blt.n	119c8 <getPIN+0x44>

	return ret;
   119c4:	68fb      	ldr	r3, [r7, #12]
   119c6:	e001      	b.n	119cc <getPIN+0x48>
	lblKO:
	return -1;
   119c8:	f04f 33ff 	mov.w	r3, #4294967295
}
   119cc:	4618      	mov	r0, r3
   119ce:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   119d2:	f2c0 0302 	movt	r3, #2
   119d6:	69fa      	ldr	r2, [r7, #28]
   119d8:	681b      	ldr	r3, [r3, #0]
   119da:	429a      	cmp	r2, r3
   119dc:	d001      	beq.n	119e2 <getPIN+0x5e>
   119de:	f7f7 fae1 	bl	8fa4 <__stack_chk_fail>
   119e2:	f107 0720 	add.w	r7, r7, #32
   119e6:	46bd      	mov	sp, r7
   119e8:	bd80      	pop	{r7, pc}
   119ea:	bf00      	nop

000119ec <getPrcCod>:


static int getPrcCod(tBuffer * val) {
   119ec:	b580      	push	{r7, lr}
   119ee:	b088      	sub	sp, #32
   119f0:	af00      	add	r7, sp, #0
   119f2:	6078      	str	r0, [r7, #4]
   119f4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   119f8:	f2c0 0302 	movt	r3, #2
   119fc:	681b      	ldr	r3, [r3, #0]
   119fe:	61fb      	str	r3, [r7, #28]
	byte PrcCod[1 + lenPrcCod];
	char PrcCodStr[1 + (lenPrcCod*2)];

	VERIFY(val);

	memset(PrcCodStr, 0, sizeof(PrcCodStr));
   11a00:	f107 0314 	add.w	r3, r7, #20
   11a04:	4618      	mov	r0, r3
   11a06:	2100      	movs	r1, #0
   11a08:	2207      	movs	r2, #7
   11a0a:	f7f7 e8d8 	blx	8bbc <_init+0x5c>
	memset(PrcCod,0,sizeof(PrcCod));
   11a0e:	f107 0310 	add.w	r3, r7, #16
   11a12:	4618      	mov	r0, r3
   11a14:	2100      	movs	r1, #0
   11a16:	2204      	movs	r2, #4
   11a18:	f7f7 e8d0 	blx	8bbc <_init+0x5c>

	strcpy(PrcCodStr, "000000");
   11a1c:	f244 72c4 	movw	r2, #18372	; 0x47c4
   11a20:	f2c0 0202 	movt	r2, #2
   11a24:	f107 0314 	add.w	r3, r7, #20
   11a28:	e892 0003 	ldmia.w	r2, {r0, r1}
   11a2c:	6018      	str	r0, [r3, #0]
   11a2e:	3304      	adds	r3, #4
   11a30:	8019      	strh	r1, [r3, #0]
   11a32:	3302      	adds	r3, #2
   11a34:	0c0a      	lsrs	r2, r1, #16
   11a36:	701a      	strb	r2, [r3, #0]

	hex2bin(PrcCod, PrcCodStr, 0);
   11a38:	f107 0210 	add.w	r2, r7, #16
   11a3c:	f107 0314 	add.w	r3, r7, #20
   11a40:	4610      	mov	r0, r2
   11a42:	4619      	mov	r1, r3
   11a44:	2200      	movs	r2, #0
   11a46:	f001 f88d 	bl	12b64 <hex2bin>

	ret = bufApp(val, PrcCod, lenPrcCod);
   11a4a:	f107 0310 	add.w	r3, r7, #16
   11a4e:	6878      	ldr	r0, [r7, #4]
   11a50:	4619      	mov	r1, r3
   11a52:	2203      	movs	r2, #3
   11a54:	f001 fc86 	bl	13364 <bufApp>
   11a58:	60f8      	str	r0, [r7, #12]
	CHK;
   11a5a:	68fb      	ldr	r3, [r7, #12]
   11a5c:	2b00      	cmp	r3, #0
   11a5e:	db01      	blt.n	11a64 <getPrcCod+0x78>

	return ret;
   11a60:	68fb      	ldr	r3, [r7, #12]
   11a62:	e001      	b.n	11a68 <getPrcCod+0x7c>
	lblKO:
	return -1;
   11a64:	f04f 33ff 	mov.w	r3, #4294967295
}
   11a68:	4618      	mov	r0, r3
   11a6a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   11a6e:	f2c0 0302 	movt	r3, #2
   11a72:	69fa      	ldr	r2, [r7, #28]
   11a74:	681b      	ldr	r3, [r3, #0]
   11a76:	429a      	cmp	r2, r3
   11a78:	d001      	beq.n	11a7e <getPrcCod+0x92>
   11a7a:	f7f7 fa93 	bl	8fa4 <__stack_chk_fail>
   11a7e:	f107 0720 	add.w	r7, r7, #32
   11a82:	46bd      	mov	sp, r7
   11a84:	bd80      	pop	{r7, pc}
   11a86:	bf00      	nop

00011a88 <getTrack2>:


static int getTrack2(tBuffer * val) {
   11a88:	b580      	push	{r7, lr}
   11a8a:	b098      	sub	sp, #96	; 0x60
   11a8c:	af00      	add	r7, sp, #0
   11a8e:	6078      	str	r0, [r7, #4]
   11a90:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   11a94:	f2c0 0302 	movt	r3, #2
   11a98:	681b      	ldr	r3, [r3, #0]
   11a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
	int ret, ctr, len;
	char track2[lenTrk2 + 1];
	byte bcdTrack2[(lenTrk2 + 1) / 2];
	word key;
	int x = 0;
   11a9c:	2300      	movs	r3, #0
   11a9e:	617b      	str	r3, [r7, #20]

	memset(track2, 0, sizeof(track2));
   11aa0:	f107 0330 	add.w	r3, r7, #48	; 0x30
   11aa4:	4618      	mov	r0, r3
   11aa6:	2100      	movs	r1, #0
   11aa8:	2229      	movs	r2, #41	; 0x29
   11aaa:	f7f7 e888 	blx	8bbc <_init+0x5c>
	memset(bcdTrack2, 0, sizeof(bcdTrack2));
   11aae:	f107 031c 	add.w	r3, r7, #28
   11ab2:	4618      	mov	r0, r3
   11ab4:	2100      	movs	r1, #0
   11ab6:	2214      	movs	r2, #20
   11ab8:	f7f7 e880 	blx	8bbc <_init+0x5c>

	thereis_F = 0;
   11abc:	f64f 73a4 	movw	r3, #65444	; 0xffa4
   11ac0:	f2c0 0302 	movt	r3, #2
   11ac4:	2200      	movs	r2, #0
   11ac6:	601a      	str	r2, [r3, #0]
	//          break;
	//      case 'L':
	//          key = logTrk2;
	//          break;
	default:
		key = traTrk2;
   11ac8:	231d      	movs	r3, #29
   11aca:	817b      	strh	r3, [r7, #10]
		break;
   11acc:	bf00      	nop
	}

	ret = mapGet(key, track2, sizeof(track2));
   11ace:	897a      	ldrh	r2, [r7, #10]
   11ad0:	f107 0330 	add.w	r3, r7, #48	; 0x30
   11ad4:	4610      	mov	r0, r2
   11ad6:	4619      	mov	r1, r3
   11ad8:	2229      	movs	r2, #41	; 0x29
   11ada:	f004 fcff 	bl	164dc <mapGet>
   11ade:	61b8      	str	r0, [r7, #24]
	CHK;
   11ae0:	69bb      	ldr	r3, [r7, #24]
   11ae2:	2b00      	cmp	r3, #0
   11ae4:	f2c0 80c0 	blt.w	11c68 <getTrack2+0x1e0>

	len = strlen(track2);
   11ae8:	f107 0330 	add.w	r3, r7, #48	; 0x30
   11aec:	4618      	mov	r0, r3
   11aee:	f7f7 e8ca 	blx	8c84 <_init+0x124>
   11af2:	4603      	mov	r3, r0
   11af4:	613b      	str	r3, [r7, #16]
	for (ctr = 0; ctr < len; ctr++) {
   11af6:	2300      	movs	r3, #0
   11af8:	60fb      	str	r3, [r7, #12]
   11afa:	e070      	b.n	11bde <getTrack2+0x156>
		if(track2[ctr] == '=') {
   11afc:	f107 0230 	add.w	r2, r7, #48	; 0x30
   11b00:	68fb      	ldr	r3, [r7, #12]
   11b02:	18d3      	adds	r3, r2, r3
   11b04:	781b      	ldrb	r3, [r3, #0]
   11b06:	2b3d      	cmp	r3, #61	; 0x3d
   11b08:	d105      	bne.n	11b16 <getTrack2+0x8e>
			track2[ctr] = 'D';
   11b0a:	f107 0230 	add.w	r2, r7, #48	; 0x30
   11b0e:	68fb      	ldr	r3, [r7, #12]
   11b10:	18d3      	adds	r3, r2, r3
   11b12:	2244      	movs	r2, #68	; 0x44
   11b14:	701a      	strb	r2, [r3, #0]
		}
		if(track2[ctr] == 'F') {
   11b16:	f107 0230 	add.w	r2, r7, #48	; 0x30
   11b1a:	68fb      	ldr	r3, [r7, #12]
   11b1c:	18d3      	adds	r3, r2, r3
   11b1e:	781b      	ldrb	r3, [r3, #0]
   11b20:	2b46      	cmp	r3, #70	; 0x46
   11b22:	d11e      	bne.n	11b62 <getTrack2+0xda>
			thereis_F = 1;
   11b24:	f64f 73a4 	movw	r3, #65444	; 0xffa4
   11b28:	f2c0 0302 	movt	r3, #2
   11b2c:	2201      	movs	r2, #1
   11b2e:	601a      	str	r2, [r3, #0]
			for (x = 1; x < (len-ctr); x++) {
   11b30:	2301      	movs	r3, #1
   11b32:	617b      	str	r3, [r7, #20]
   11b34:	e00b      	b.n	11b4e <getTrack2+0xc6>
				track2[ctr+x] = 0x0;
   11b36:	68fa      	ldr	r2, [r7, #12]
   11b38:	697b      	ldr	r3, [r7, #20]
   11b3a:	18d3      	adds	r3, r2, r3
   11b3c:	f107 0260 	add.w	r2, r7, #96	; 0x60
   11b40:	18d3      	adds	r3, r2, r3
   11b42:	2200      	movs	r2, #0
   11b44:	f803 2c30 	strb.w	r2, [r3, #-48]
		if(track2[ctr] == '=') {
			track2[ctr] = 'D';
		}
		if(track2[ctr] == 'F') {
			thereis_F = 1;
			for (x = 1; x < (len-ctr); x++) {
   11b48:	697b      	ldr	r3, [r7, #20]
   11b4a:	3301      	adds	r3, #1
   11b4c:	617b      	str	r3, [r7, #20]
   11b4e:	693a      	ldr	r2, [r7, #16]
   11b50:	68fb      	ldr	r3, [r7, #12]
   11b52:	1ad2      	subs	r2, r2, r3
   11b54:	697b      	ldr	r3, [r7, #20]
   11b56:	429a      	cmp	r2, r3
   11b58:	dced      	bgt.n	11b36 <getTrack2+0xae>
				track2[ctr+x] = 0x0;
			}
			len = ctr + 1;
   11b5a:	68fb      	ldr	r3, [r7, #12]
   11b5c:	3301      	adds	r3, #1
   11b5e:	613b      	str	r3, [r7, #16]
			break;
   11b60:	e041      	b.n	11be6 <getTrack2+0x15e>
		} else if ((track2[ctr] >= 'A' && track2[ctr] <= 'Z') || (track2[ctr] >= 'a' && track2[ctr] <= 'z')){
   11b62:	f107 0230 	add.w	r2, r7, #48	; 0x30
   11b66:	68fb      	ldr	r3, [r7, #12]
   11b68:	18d3      	adds	r3, r2, r3
   11b6a:	781b      	ldrb	r3, [r3, #0]
   11b6c:	2b40      	cmp	r3, #64	; 0x40
   11b6e:	d906      	bls.n	11b7e <getTrack2+0xf6>
   11b70:	f107 0230 	add.w	r2, r7, #48	; 0x30
   11b74:	68fb      	ldr	r3, [r7, #12]
   11b76:	18d3      	adds	r3, r2, r3
   11b78:	781b      	ldrb	r3, [r3, #0]
   11b7a:	2b5a      	cmp	r3, #90	; 0x5a
   11b7c:	d90d      	bls.n	11b9a <getTrack2+0x112>
   11b7e:	f107 0230 	add.w	r2, r7, #48	; 0x30
   11b82:	68fb      	ldr	r3, [r7, #12]
   11b84:	18d3      	adds	r3, r2, r3
   11b86:	781b      	ldrb	r3, [r3, #0]
   11b88:	2b60      	cmp	r3, #96	; 0x60
   11b8a:	d925      	bls.n	11bd8 <getTrack2+0x150>
   11b8c:	f107 0230 	add.w	r2, r7, #48	; 0x30
   11b90:	68fb      	ldr	r3, [r7, #12]
   11b92:	18d3      	adds	r3, r2, r3
   11b94:	781b      	ldrb	r3, [r3, #0]
   11b96:	2b7a      	cmp	r3, #122	; 0x7a
   11b98:	d81e      	bhi.n	11bd8 <getTrack2+0x150>
			if(track2[ctr] != 'D') {
   11b9a:	f107 0230 	add.w	r2, r7, #48	; 0x30
   11b9e:	68fb      	ldr	r3, [r7, #12]
   11ba0:	18d3      	adds	r3, r2, r3
   11ba2:	781b      	ldrb	r3, [r3, #0]
   11ba4:	2b44      	cmp	r3, #68	; 0x44
   11ba6:	d017      	beq.n	11bd8 <getTrack2+0x150>
				for (x = 0; x < (len-ctr); x++) {
   11ba8:	2300      	movs	r3, #0
   11baa:	617b      	str	r3, [r7, #20]
   11bac:	e00b      	b.n	11bc6 <getTrack2+0x13e>
					track2[ctr+x] = 0x0;
   11bae:	68fa      	ldr	r2, [r7, #12]
   11bb0:	697b      	ldr	r3, [r7, #20]
   11bb2:	18d3      	adds	r3, r2, r3
   11bb4:	f107 0260 	add.w	r2, r7, #96	; 0x60
   11bb8:	18d3      	adds	r3, r2, r3
   11bba:	2200      	movs	r2, #0
   11bbc:	f803 2c30 	strb.w	r2, [r3, #-48]
			}
			len = ctr + 1;
			break;
		} else if ((track2[ctr] >= 'A' && track2[ctr] <= 'Z') || (track2[ctr] >= 'a' && track2[ctr] <= 'z')){
			if(track2[ctr] != 'D') {
				for (x = 0; x < (len-ctr); x++) {
   11bc0:	697b      	ldr	r3, [r7, #20]
   11bc2:	3301      	adds	r3, #1
   11bc4:	617b      	str	r3, [r7, #20]
   11bc6:	693a      	ldr	r2, [r7, #16]
   11bc8:	68fb      	ldr	r3, [r7, #12]
   11bca:	1ad2      	subs	r2, r2, r3
   11bcc:	697b      	ldr	r3, [r7, #20]
   11bce:	429a      	cmp	r2, r3
   11bd0:	dced      	bgt.n	11bae <getTrack2+0x126>
					track2[ctr+x] = 0x0;
				}
				len = ctr;
   11bd2:	68fb      	ldr	r3, [r7, #12]
   11bd4:	613b      	str	r3, [r7, #16]
				break;
   11bd6:	e006      	b.n	11be6 <getTrack2+0x15e>

	ret = mapGet(key, track2, sizeof(track2));
	CHK;

	len = strlen(track2);
	for (ctr = 0; ctr < len; ctr++) {
   11bd8:	68fb      	ldr	r3, [r7, #12]
   11bda:	3301      	adds	r3, #1
   11bdc:	60fb      	str	r3, [r7, #12]
   11bde:	68fa      	ldr	r2, [r7, #12]
   11be0:	693b      	ldr	r3, [r7, #16]
   11be2:	429a      	cmp	r2, r3
   11be4:	db8a      	blt.n	11afc <getTrack2+0x74>
				break;
			}
		}
	}

	if((len % 2 != 0) && (!thereis_F)){
   11be6:	693b      	ldr	r3, [r7, #16]
   11be8:	f003 0301 	and.w	r3, r3, #1
   11bec:	2b00      	cmp	r3, #0
   11bee:	d01d      	beq.n	11c2c <getTrack2+0x1a4>
   11bf0:	f64f 73a4 	movw	r3, #65444	; 0xffa4
   11bf4:	f2c0 0302 	movt	r3, #2
   11bf8:	681b      	ldr	r3, [r3, #0]
   11bfa:	2b00      	cmp	r3, #0
   11bfc:	d116      	bne.n	11c2c <getTrack2+0x1a4>
		thereis_F = 1;
   11bfe:	f64f 73a4 	movw	r3, #65444	; 0xffa4
   11c02:	f2c0 0302 	movt	r3, #2
   11c06:	2201      	movs	r2, #1
   11c08:	601a      	str	r2, [r3, #0]
		track2[len] = 'F'; //to remove error on MTIP transactions that dont need a zero at the end
   11c0a:	f107 0230 	add.w	r2, r7, #48	; 0x30
   11c0e:	693b      	ldr	r3, [r7, #16]
   11c10:	18d3      	adds	r3, r2, r3
   11c12:	2246      	movs	r2, #70	; 0x46
   11c14:	701a      	strb	r2, [r3, #0]
		track2[len+1] = 0x0;
   11c16:	693b      	ldr	r3, [r7, #16]
   11c18:	3301      	adds	r3, #1
   11c1a:	f107 0260 	add.w	r2, r7, #96	; 0x60
   11c1e:	18d3      	adds	r3, r2, r3
   11c20:	2200      	movs	r2, #0
   11c22:	f803 2c30 	strb.w	r2, [r3, #-48]
		len = len + 1;
   11c26:	693b      	ldr	r3, [r7, #16]
   11c28:	3301      	adds	r3, #1
   11c2a:	613b      	str	r3, [r7, #16]


	//	ret = bufAppStr(val, track2);
	//	CHK;

	hex2bin(bcdTrack2,track2,0);
   11c2c:	f107 021c 	add.w	r2, r7, #28
   11c30:	f107 0330 	add.w	r3, r7, #48	; 0x30
   11c34:	4610      	mov	r0, r2
   11c36:	4619      	mov	r1, r3
   11c38:	2200      	movs	r2, #0
   11c3a:	f000 ff93 	bl	12b64 <hex2bin>
	len = len / 2;
   11c3e:	693b      	ldr	r3, [r7, #16]
   11c40:	2b00      	cmp	r3, #0
   11c42:	da00      	bge.n	11c46 <getTrack2+0x1be>
   11c44:	3301      	adds	r3, #1
   11c46:	105b      	asrs	r3, r3, #1
   11c48:	613b      	str	r3, [r7, #16]
	ret = bufApp(val, (byte *) bcdTrack2, len);
   11c4a:	f107 031c 	add.w	r3, r7, #28
   11c4e:	6878      	ldr	r0, [r7, #4]
   11c50:	4619      	mov	r1, r3
   11c52:	693a      	ldr	r2, [r7, #16]
   11c54:	f001 fb86 	bl	13364 <bufApp>
   11c58:	61b8      	str	r0, [r7, #24]
	CHK;
   11c5a:	69bb      	ldr	r3, [r7, #24]
   11c5c:	2b00      	cmp	r3, #0
   11c5e:	db03      	blt.n	11c68 <getTrack2+0x1e0>

	ret = len;
   11c60:	693b      	ldr	r3, [r7, #16]
   11c62:	61bb      	str	r3, [r7, #24]

	return ret;
   11c64:	69bb      	ldr	r3, [r7, #24]
   11c66:	e001      	b.n	11c6c <getTrack2+0x1e4>
	lblKO:
	return -1;
   11c68:	f04f 33ff 	mov.w	r3, #4294967295
}
   11c6c:	4618      	mov	r0, r3
   11c6e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   11c72:	f2c0 0302 	movt	r3, #2
   11c76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   11c78:	681b      	ldr	r3, [r3, #0]
   11c7a:	429a      	cmp	r2, r3
   11c7c:	d001      	beq.n	11c82 <getTrack2+0x1fa>
   11c7e:	f7f7 f991 	bl	8fa4 <__stack_chk_fail>
   11c82:	f107 0760 	add.w	r7, r7, #96	; 0x60
   11c86:	46bd      	mov	sp, r7
   11c88:	bd80      	pop	{r7, pc}
   11c8a:	bf00      	nop

00011c8c <getFld>:



static int getFld(tBuffer * val, byte bit) {
   11c8c:	b580      	push	{r7, lr}
   11c8e:	b084      	sub	sp, #16
   11c90:	af00      	add	r7, sp, #0
   11c92:	6078      	str	r0, [r7, #4]
   11c94:	460b      	mov	r3, r1
   11c96:	70fb      	strb	r3, [r7, #3]
   11c98:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   11c9c:	f2c0 0302 	movt	r3, #2
   11ca0:	681b      	ldr	r3, [r3, #0]
   11ca2:	60fb      	str	r3, [r7, #12]

	VERIFY(val);
	bufReset(val);
   11ca4:	6878      	ldr	r0, [r7, #4]
   11ca6:	f001 f97d 	bl	12fa4 <bufReset>
	switch (bit) {
   11caa:	78fb      	ldrb	r3, [r7, #3]
   11cac:	3b02      	subs	r3, #2
   11cae:	2b32      	cmp	r3, #50	; 0x32
   11cb0:	f200 8083 	bhi.w	11dba <getFld+0x12e>
   11cb4:	a201      	add	r2, pc, #4	; (adr r2, 11cbc <getFld+0x30>)
   11cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11cba:	bf00      	nop
   11cbc:	00011d89 	.word	0x00011d89
   11cc0:	00011d93 	.word	0x00011d93
   11cc4:	00011d9d 	.word	0x00011d9d
   11cc8:	00011dbb 	.word	0x00011dbb
   11ccc:	00011dbb 	.word	0x00011dbb
   11cd0:	00011dbb 	.word	0x00011dbb
   11cd4:	00011dbb 	.word	0x00011dbb
   11cd8:	00011dbb 	.word	0x00011dbb
   11cdc:	00011dbb 	.word	0x00011dbb
   11ce0:	00011dbb 	.word	0x00011dbb
   11ce4:	00011dbb 	.word	0x00011dbb
   11ce8:	00011dbb 	.word	0x00011dbb
   11cec:	00011dbb 	.word	0x00011dbb
   11cf0:	00011dbb 	.word	0x00011dbb
   11cf4:	00011dbb 	.word	0x00011dbb
   11cf8:	00011dbb 	.word	0x00011dbb
   11cfc:	00011dbb 	.word	0x00011dbb
   11d00:	00011dbb 	.word	0x00011dbb
   11d04:	00011dbb 	.word	0x00011dbb
   11d08:	00011dbb 	.word	0x00011dbb
   11d0c:	00011dbb 	.word	0x00011dbb
   11d10:	00011dbb 	.word	0x00011dbb
   11d14:	00011dbb 	.word	0x00011dbb
   11d18:	00011dbb 	.word	0x00011dbb
   11d1c:	00011dbb 	.word	0x00011dbb
   11d20:	00011dbb 	.word	0x00011dbb
   11d24:	00011dbb 	.word	0x00011dbb
   11d28:	00011dbb 	.word	0x00011dbb
   11d2c:	00011dbb 	.word	0x00011dbb
   11d30:	00011dbb 	.word	0x00011dbb
   11d34:	00011dbb 	.word	0x00011dbb
   11d38:	00011dbb 	.word	0x00011dbb
   11d3c:	00011dbb 	.word	0x00011dbb
   11d40:	00011da7 	.word	0x00011da7
   11d44:	00011dbb 	.word	0x00011dbb
   11d48:	00011dbb 	.word	0x00011dbb
   11d4c:	00011dbb 	.word	0x00011dbb
   11d50:	00011dbb 	.word	0x00011dbb
   11d54:	00011dbb 	.word	0x00011dbb
   11d58:	00011dbb 	.word	0x00011dbb
   11d5c:	00011dbb 	.word	0x00011dbb
   11d60:	00011dbb 	.word	0x00011dbb
   11d64:	00011dbb 	.word	0x00011dbb
   11d68:	00011dbb 	.word	0x00011dbb
   11d6c:	00011dbb 	.word	0x00011dbb
   11d70:	00011dbb 	.word	0x00011dbb
   11d74:	00011dbb 	.word	0x00011dbb
   11d78:	00011dbb 	.word	0x00011dbb
   11d7c:	00011dbb 	.word	0x00011dbb
   11d80:	00011dbb 	.word	0x00011dbb
   11d84:	00011db1 	.word	0x00011db1
	case isoPan:
		return getPanVal(val);
   11d88:	6878      	ldr	r0, [r7, #4]
   11d8a:	f7ff fd31 	bl	117f0 <getPanVal>
   11d8e:	4603      	mov	r3, r0
   11d90:	e016      	b.n	11dc0 <getFld+0x134>
	case isoPrcCod:
		return getPrcCod(val);
   11d92:	6878      	ldr	r0, [r7, #4]
   11d94:	f7ff fe2a 	bl	119ec <getPrcCod>
   11d98:	4603      	mov	r3, r0
   11d9a:	e011      	b.n	11dc0 <getFld+0x134>
	case isoAmt:
		return getAmt(val);
   11d9c:	6878      	ldr	r0, [r7, #4]
   11d9e:	f7ff fda1 	bl	118e4 <getAmt>
   11da2:	4603      	mov	r3, r0
   11da4:	e00c      	b.n	11dc0 <getFld+0x134>
	case isoTrk2:
		return getTrack2(val);
   11da6:	6878      	ldr	r0, [r7, #4]
   11da8:	f7ff fe6e 	bl	11a88 <getTrack2>
   11dac:	4603      	mov	r3, r0
   11dae:	e007      	b.n	11dc0 <getFld+0x134>
	case isoPinDat:          //052  PIN
		return getPIN(val);
   11db0:	6878      	ldr	r0, [r7, #4]
   11db2:	f7ff fde7 	bl	11984 <getPIN>
   11db6:	4603      	mov	r3, r0
   11db8:	e002      	b.n	11dc0 <getFld+0x134>
	default:
		break;
   11dba:	bf00      	nop
	}
	return -1;
   11dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
   11dc0:	4618      	mov	r0, r3
   11dc2:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   11dc6:	f2c0 0302 	movt	r3, #2
   11dca:	68fa      	ldr	r2, [r7, #12]
   11dcc:	681b      	ldr	r3, [r3, #0]
   11dce:	429a      	cmp	r2, r3
   11dd0:	d001      	beq.n	11dd6 <getFld+0x14a>
   11dd2:	f7f7 f8e7 	bl	8fa4 <__stack_chk_fail>
   11dd6:	f107 0710 	add.w	r7, r7, #16
   11dda:	46bd      	mov	sp, r7
   11ddc:	bd80      	pop	{r7, pc}
   11dde:	bf00      	nop

00011de0 <getLen_>:


word getLen_(byte bit,int fmt){
   11de0:	b580      	push	{r7, lr}
   11de2:	b084      	sub	sp, #16
   11de4:	af00      	add	r7, sp, #0
   11de6:	4603      	mov	r3, r0
   11de8:	6039      	str	r1, [r7, #0]
   11dea:	71fb      	strb	r3, [r7, #7]
   11dec:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   11df0:	f2c0 0302 	movt	r3, #2
   11df4:	681b      	ldr	r3, [r3, #0]
   11df6:	60fb      	str	r3, [r7, #12]
	word returnData=0;
   11df8:	2300      	movs	r3, #0
   11dfa:	817b      	strh	r3, [r7, #10]

	switch (bit) {
   11dfc:	79fb      	ldrb	r3, [r7, #7]
   11dfe:	3b1c      	subs	r3, #28
   11e00:	2b19      	cmp	r3, #25
   11e02:	d80b      	bhi.n	11e1c <getLen_+0x3c>
   11e04:	2201      	movs	r2, #1
   11e06:	409a      	lsls	r2, r3
   11e08:	f64e 6301 	movw	r3, #60929	; 0xee01
   11e0c:	f2c0 3320 	movt	r3, #800	; 0x320
   11e10:	4013      	ands	r3, r2
   11e12:	2b00      	cmp	r3, #0
   11e14:	d002      	beq.n	11e1c <getLen_+0x3c>
	case 37: case 38: case 39: case 41:
	case 42: case 43: case 49: case 52: case 53:
	case 28:
		returnData=fmt;
   11e16:	683b      	ldr	r3, [r7, #0]
   11e18:	817b      	strh	r3, [r7, #10]
		break;
   11e1a:	e00e      	b.n	11e3a <getLen_+0x5a>
	default:
		if(fmt % 2 != 0)
   11e1c:	683b      	ldr	r3, [r7, #0]
   11e1e:	f003 0301 	and.w	r3, r3, #1
   11e22:	2b00      	cmp	r3, #0
   11e24:	d002      	beq.n	11e2c <getLen_+0x4c>
			fmt++;
   11e26:	683b      	ldr	r3, [r7, #0]
   11e28:	3301      	adds	r3, #1
   11e2a:	603b      	str	r3, [r7, #0]
		returnData= fmt / 2;
   11e2c:	683b      	ldr	r3, [r7, #0]
   11e2e:	2b00      	cmp	r3, #0
   11e30:	da00      	bge.n	11e34 <getLen_+0x54>
   11e32:	3301      	adds	r3, #1
   11e34:	105b      	asrs	r3, r3, #1
   11e36:	817b      	strh	r3, [r7, #10]
		break;
   11e38:	bf00      	nop
	}

	return returnData;
   11e3a:	897b      	ldrh	r3, [r7, #10]
}
   11e3c:	4618      	mov	r0, r3
   11e3e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   11e42:	f2c0 0302 	movt	r3, #2
   11e46:	68fa      	ldr	r2, [r7, #12]
   11e48:	681b      	ldr	r3, [r3, #0]
   11e4a:	429a      	cmp	r2, r3
   11e4c:	d001      	beq.n	11e52 <getLen_+0x72>
   11e4e:	f7f7 f8a9 	bl	8fa4 <__stack_chk_fail>
   11e52:	f107 0710 	add.w	r7, r7, #16
   11e56:	46bd      	mov	sp, r7
   11e58:	bd80      	pop	{r7, pc}
   11e5a:	bf00      	nop

00011e5c <getLen_fmt>:


int getLen_fmt(byte bit,int len){
   11e5c:	b580      	push	{r7, lr}
   11e5e:	b084      	sub	sp, #16
   11e60:	af00      	add	r7, sp, #0
   11e62:	4603      	mov	r3, r0
   11e64:	6039      	str	r1, [r7, #0]
   11e66:	71fb      	strb	r3, [r7, #7]
   11e68:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   11e6c:	f2c0 0302 	movt	r3, #2
   11e70:	681b      	ldr	r3, [r3, #0]
   11e72:	60fb      	str	r3, [r7, #12]

	if(bit==35){
   11e74:	79fb      	ldrb	r3, [r7, #7]
   11e76:	2b23      	cmp	r3, #35	; 0x23
   11e78:	d118      	bne.n	11eac <getLen_fmt+0x50>
		len=len*2;
   11e7a:	683b      	ldr	r3, [r7, #0]
   11e7c:	005b      	lsls	r3, r3, #1
   11e7e:	603b      	str	r3, [r7, #0]
		if (thereis_F)
   11e80:	f64f 73a4 	movw	r3, #65444	; 0xffa4
   11e84:	f2c0 0302 	movt	r3, #2
   11e88:	681b      	ldr	r3, [r3, #0]
   11e8a:	2b00      	cmp	r3, #0
   11e8c:	d002      	beq.n	11e94 <getLen_fmt+0x38>
			len = len - 1;
   11e8e:	683b      	ldr	r3, [r7, #0]
   11e90:	3b01      	subs	r3, #1
   11e92:	603b      	str	r3, [r7, #0]
		if(len>37)len=37;
   11e94:	683b      	ldr	r3, [r7, #0]
   11e96:	2b25      	cmp	r3, #37	; 0x25
   11e98:	dd01      	ble.n	11e9e <getLen_fmt+0x42>
   11e9a:	2325      	movs	r3, #37	; 0x25
   11e9c:	603b      	str	r3, [r7, #0]

		thereis_F = 0; //notify that 'f' was processed
   11e9e:	f64f 73a4 	movw	r3, #65444	; 0xffa4
   11ea2:	f2c0 0302 	movt	r3, #2
   11ea6:	2200      	movs	r2, #0
   11ea8:	601a      	str	r2, [r3, #0]
   11eaa:	e00a      	b.n	11ec2 <getLen_fmt+0x66>
	}else if(bit==2){
   11eac:	79fb      	ldrb	r3, [r7, #7]
   11eae:	2b02      	cmp	r3, #2
   11eb0:	d107      	bne.n	11ec2 <getLen_fmt+0x66>
		len=len*2;
   11eb2:	683b      	ldr	r3, [r7, #0]
   11eb4:	005b      	lsls	r3, r3, #1
   11eb6:	603b      	str	r3, [r7, #0]
		if(len>19)len=19;
   11eb8:	683b      	ldr	r3, [r7, #0]
   11eba:	2b13      	cmp	r3, #19
   11ebc:	dd01      	ble.n	11ec2 <getLen_fmt+0x66>
   11ebe:	2313      	movs	r3, #19
   11ec0:	603b      	str	r3, [r7, #0]
	}

	return len;
   11ec2:	683b      	ldr	r3, [r7, #0]
}
   11ec4:	4618      	mov	r0, r3
   11ec6:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   11eca:	f2c0 0302 	movt	r3, #2
   11ece:	68fa      	ldr	r2, [r7, #12]
   11ed0:	681b      	ldr	r3, [r3, #0]
   11ed2:	429a      	cmp	r2, r3
   11ed4:	d001      	beq.n	11eda <getLen_fmt+0x7e>
   11ed6:	f7f7 f865 	bl	8fa4 <__stack_chk_fail>
   11eda:	f107 0710 	add.w	r7, r7, #16
   11ede:	46bd      	mov	sp, r7
   11ee0:	bd80      	pop	{r7, pc}
   11ee2:	bf00      	nop

00011ee4 <appFld>:



static int appFld(tBuffer * req, byte bit, const tBuffer * val) {
   11ee4:	b590      	push	{r4, r7, lr}
   11ee6:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
   11eea:	af00      	add	r7, sp, #0
   11eec:	f107 030c 	add.w	r3, r7, #12
   11ef0:	6018      	str	r0, [r3, #0]
   11ef2:	1d3b      	adds	r3, r7, #4
   11ef4:	601a      	str	r2, [r3, #0]
   11ef6:	f107 030b 	add.w	r3, r7, #11
   11efa:	460a      	mov	r2, r1
   11efc:	701a      	strb	r2, [r3, #0]
   11efe:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   11f02:	f2c0 0302 	movt	r3, #2
   11f06:	681b      	ldr	r3, [r3, #0]
   11f08:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	int ret = 0;
   11f0c:	f107 0314 	add.w	r3, r7, #20
   11f10:	2200      	movs	r2, #0
   11f12:	601a      	str	r2, [r3, #0]
	byte buf[1024];
	byte bcd[5 + 1];
	word len;
	byte cnt;

	memset(bcd, 0, sizeof(bcd));
   11f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
   11f18:	4618      	mov	r0, r3
   11f1a:	2100      	movs	r1, #0
   11f1c:	2206      	movs	r2, #6
   11f1e:	f7f6 ee4e 	blx	8bbc <_init+0x5c>
	memset(buf, 0, sizeof(buf));
   11f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   11f26:	4618      	mov	r0, r3
   11f28:	2100      	movs	r1, #0
   11f2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11f2e:	f7f6 ee46 	blx	8bbc <_init+0x5c>
	memset(tmp, 0, sizeof(tmp));
   11f32:	f107 031c 	add.w	r3, r7, #28
   11f36:	4618      	mov	r0, r3
   11f38:	2100      	movs	r1, #0
   11f3a:	2206      	movs	r2, #6
   11f3c:	f7f6 ee3e 	blx	8bbc <_init+0x5c>

	fmt = isoFmt(bit);
   11f40:	f107 0418 	add.w	r4, r7, #24
   11f44:	f107 030b 	add.w	r3, r7, #11
   11f48:	781b      	ldrb	r3, [r3, #0]
   11f4a:	4618      	mov	r0, r3
   11f4c:	f7ff fc0c 	bl	11768 <isoFmt>
   11f50:	6020      	str	r0, [r4, #0]

	if(fmt < 0) {               //LLVAR or LLLVAR
   11f52:	f107 0318 	add.w	r3, r7, #24
   11f56:	681b      	ldr	r3, [r3, #0]
   11f58:	2b00      	cmp	r3, #0
   11f5a:	da77      	bge.n	1204c <appFld+0x168>
		len = bufLen(val);
   11f5c:	f107 0412 	add.w	r4, r7, #18
   11f60:	1d3b      	adds	r3, r7, #4
   11f62:	6818      	ldr	r0, [r3, #0]
   11f64:	f001 f8a2 	bl	130ac <bufLen>
   11f68:	4603      	mov	r3, r0
   11f6a:	8023      	strh	r3, [r4, #0]

		cnt = -fmt;
   11f6c:	f107 0318 	add.w	r3, r7, #24
   11f70:	681b      	ldr	r3, [r3, #0]
   11f72:	b2da      	uxtb	r2, r3
   11f74:	f107 0311 	add.w	r3, r7, #17
   11f78:	4252      	negs	r2, r2
   11f7a:	701a      	strb	r2, [r3, #0]
		VERIFY(cnt);

		len = getLen_fmt(bit,len);
   11f7c:	f107 0312 	add.w	r3, r7, #18
   11f80:	881b      	ldrh	r3, [r3, #0]
   11f82:	f107 020b 	add.w	r2, r7, #11
   11f86:	7812      	ldrb	r2, [r2, #0]
   11f88:	4610      	mov	r0, r2
   11f8a:	4619      	mov	r1, r3
   11f8c:	f7ff ff66 	bl	11e5c <getLen_fmt>
   11f90:	4602      	mov	r2, r0
   11f92:	f107 0312 	add.w	r3, r7, #18
   11f96:	801a      	strh	r2, [r3, #0]

		memcpy(buf, bufPtr(val), len);
   11f98:	1d3b      	adds	r3, r7, #4
   11f9a:	6818      	ldr	r0, [r3, #0]
   11f9c:	f001 f86a 	bl	13074 <bufPtr>
   11fa0:	4602      	mov	r2, r0
   11fa2:	f107 0312 	add.w	r3, r7, #18
   11fa6:	881b      	ldrh	r3, [r3, #0]
   11fa8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   11fac:	4608      	mov	r0, r1
   11fae:	4611      	mov	r1, r2
   11fb0:	461a      	mov	r2, r3
   11fb2:	f7f6 ee62 	blx	8c78 <_init+0x118>
		num2dec(tmp, len,(cnt - 1) * 2);
   11fb6:	f107 0312 	add.w	r3, r7, #18
   11fba:	881a      	ldrh	r2, [r3, #0]
   11fbc:	f107 0311 	add.w	r3, r7, #17
   11fc0:	781b      	ldrb	r3, [r3, #0]
   11fc2:	3b01      	subs	r3, #1
   11fc4:	b2db      	uxtb	r3, r3
   11fc6:	005b      	lsls	r3, r3, #1
   11fc8:	b2db      	uxtb	r3, r3
   11fca:	f107 011c 	add.w	r1, r7, #28
   11fce:	4608      	mov	r0, r1
   11fd0:	4611      	mov	r1, r2
   11fd2:	461a      	mov	r2, r3
   11fd4:	f000 fae2 	bl	1259c <num2dec>
		hex2bin(bcd, tmp, 0);
   11fd8:	f107 0224 	add.w	r2, r7, #36	; 0x24
   11fdc:	f107 031c 	add.w	r3, r7, #28
   11fe0:	4610      	mov	r0, r2
   11fe2:	4619      	mov	r1, r3
   11fe4:	2200      	movs	r2, #0
   11fe6:	f000 fdbd 	bl	12b64 <hex2bin>

		ret = bufApp(req, bcd, cnt - 1);
   11fea:	f107 0311 	add.w	r3, r7, #17
   11fee:	781b      	ldrb	r3, [r3, #0]
   11ff0:	3b01      	subs	r3, #1
   11ff2:	f107 0414 	add.w	r4, r7, #20
   11ff6:	f107 010c 	add.w	r1, r7, #12
   11ffa:	f107 0224 	add.w	r2, r7, #36	; 0x24
   11ffe:	6808      	ldr	r0, [r1, #0]
   12000:	4611      	mov	r1, r2
   12002:	461a      	mov	r2, r3
   12004:	f001 f9ae 	bl	13364 <bufApp>
   12008:	6020      	str	r0, [r4, #0]

		if(bit==35 || bit==2){ // custom length of postilion
   1200a:	f107 030b 	add.w	r3, r7, #11
   1200e:	781b      	ldrb	r3, [r3, #0]
   12010:	2b23      	cmp	r3, #35	; 0x23
   12012:	d004      	beq.n	1201e <appFld+0x13a>
   12014:	f107 030b 	add.w	r3, r7, #11
   12018:	781b      	ldrb	r3, [r3, #0]
   1201a:	2b02      	cmp	r3, #2
   1201c:	d132      	bne.n	12084 <appFld+0x1a0>
			if(len % 2 != 0) len++;
   1201e:	f107 0312 	add.w	r3, r7, #18
   12022:	881b      	ldrh	r3, [r3, #0]
   12024:	f003 0301 	and.w	r3, r3, #1
   12028:	b29b      	uxth	r3, r3
   1202a:	2b00      	cmp	r3, #0
   1202c:	d006      	beq.n	1203c <appFld+0x158>
   1202e:	f107 0312 	add.w	r3, r7, #18
   12032:	f107 0212 	add.w	r2, r7, #18
   12036:	8812      	ldrh	r2, [r2, #0]
   12038:	3201      	adds	r2, #1
   1203a:	801a      	strh	r2, [r3, #0]
			len=len/2;
   1203c:	f107 0312 	add.w	r3, r7, #18
   12040:	f107 0212 	add.w	r2, r7, #18
   12044:	8812      	ldrh	r2, [r2, #0]
   12046:	0852      	lsrs	r2, r2, #1
   12048:	801a      	strh	r2, [r3, #0]
   1204a:	e01b      	b.n	12084 <appFld+0x1a0>
		}
	} else {
		len = getLen_(bit,fmt);///(kev-Code) Modification
   1204c:	f107 0412 	add.w	r4, r7, #18
   12050:	f107 030b 	add.w	r3, r7, #11
   12054:	781a      	ldrb	r2, [r3, #0]
   12056:	f107 0318 	add.w	r3, r7, #24
   1205a:	4610      	mov	r0, r2
   1205c:	6819      	ldr	r1, [r3, #0]
   1205e:	f7ff febf 	bl	11de0 <getLen_>
   12062:	4603      	mov	r3, r0
   12064:	8023      	strh	r3, [r4, #0]
		memcpy(buf, bufPtr(val), len);
   12066:	1d3b      	adds	r3, r7, #4
   12068:	6818      	ldr	r0, [r3, #0]
   1206a:	f001 f803 	bl	13074 <bufPtr>
   1206e:	4602      	mov	r2, r0
   12070:	f107 0312 	add.w	r3, r7, #18
   12074:	881b      	ldrh	r3, [r3, #0]
   12076:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1207a:	4608      	mov	r0, r1
   1207c:	4611      	mov	r1, r2
   1207e:	461a      	mov	r2, r3
   12080:	f7f6 edfa 	blx	8c78 <_init+0x118>
	}

	ret = bufApp(req, buf, len);
   12084:	f107 0312 	add.w	r3, r7, #18
   12088:	881b      	ldrh	r3, [r3, #0]
   1208a:	f107 0414 	add.w	r4, r7, #20
   1208e:	f107 010c 	add.w	r1, r7, #12
   12092:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   12096:	6808      	ldr	r0, [r1, #0]
   12098:	4611      	mov	r1, r2
   1209a:	461a      	mov	r2, r3
   1209c:	f001 f962 	bl	13364 <bufApp>
   120a0:	6020      	str	r0, [r4, #0]
	CHK;
   120a2:	f107 0314 	add.w	r3, r7, #20
   120a6:	681b      	ldr	r3, [r3, #0]
   120a8:	2b00      	cmp	r3, #0
   120aa:	db06      	blt.n	120ba <appFld+0x1d6>

	return bufLen(req);
   120ac:	f107 030c 	add.w	r3, r7, #12
   120b0:	6818      	ldr	r0, [r3, #0]
   120b2:	f000 fffb 	bl	130ac <bufLen>
   120b6:	4603      	mov	r3, r0
   120b8:	e001      	b.n	120be <appFld+0x1da>
	lblKO:
	return -1;
   120ba:	f04f 33ff 	mov.w	r3, #4294967295
}
   120be:	4618      	mov	r0, r3
   120c0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   120c4:	f2c0 0302 	movt	r3, #2
   120c8:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
   120cc:	681b      	ldr	r3, [r3, #0]
   120ce:	429a      	cmp	r2, r3
   120d0:	d001      	beq.n	120d6 <appFld+0x1f2>
   120d2:	f7f6 ff67 	bl	8fa4 <__stack_chk_fail>
   120d6:	f107 0734 	add.w	r7, r7, #52	; 0x34
   120da:	f507 6780 	add.w	r7, r7, #1024	; 0x400
   120de:	46bd      	mov	sp, r7
   120e0:	bd90      	pop	{r4, r7, pc}
   120e2:	bf00      	nop

000120e4 <reqBuild>:

int reqBuild(tBuffer * req) {
   120e4:	b5b0      	push	{r4, r5, r7, lr}
   120e6:	f5ad 6d90 	sub.w	sp, sp, #1152	; 0x480
   120ea:	af00      	add	r7, sp, #0
   120ec:	1d3b      	adds	r3, r7, #4
   120ee:	6018      	str	r0, [r3, #0]
   120f0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   120f4:	f2c0 0302 	movt	r3, #2
   120f8:	681b      	ldr	r3, [r3, #0]
   120fa:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
	int ret;
	byte bit = 0;
   120fe:	f107 030f 	add.w	r3, r7, #15
   12102:	2200      	movs	r2, #0
   12104:	701a      	strb	r2, [r3, #0]
	char mtiStr[4 + lenMti];
	char BitmapStr[4 + (lenBitmap*4)];
	tBuffer buf;
	byte dat[999 + 1];
	char keyStr[40];
	card bitLen = 0;
   12106:	f107 0310 	add.w	r3, r7, #16
   1210a:	2200      	movs	r2, #0
   1210c:	601a      	str	r2, [r3, #0]

	VERIFY(req);

	//    ret = mapGetByte(regLocType, LocationType);
	//    CHK;
	memset(dat, 0, sizeof(dat));
   1210e:	f107 0394 	add.w	r3, r7, #148	; 0x94
   12112:	4618      	mov	r0, r3
   12114:	2100      	movs	r1, #0
   12116:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1211a:	f7f6 ed50 	blx	8bbc <_init+0x5c>
	memset(mti, 0, sizeof(mti));
   1211e:	f107 0324 	add.w	r3, r7, #36	; 0x24
   12122:	4618      	mov	r0, r3
   12124:	2100      	movs	r1, #0
   12126:	2205      	movs	r2, #5
   12128:	f7f6 ed48 	blx	8bbc <_init+0x5c>
	memset(keyStr, 0, sizeof(keyStr));
   1212c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   12130:	4618      	mov	r0, r3
   12132:	2100      	movs	r1, #0
   12134:	2228      	movs	r2, #40	; 0x28
   12136:	f7f6 ed42 	blx	8bbc <_init+0x5c>
	memset(mtiStr, 0, sizeof(mtiStr));
   1213a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1213e:	4618      	mov	r0, r3
   12140:	2100      	movs	r1, #0
   12142:	2208      	movs	r2, #8
   12144:	f7f6 ed3a 	blx	8bbc <_init+0x5c>
	memset(Bitmap, 0, sizeof(Bitmap));
   12148:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1214c:	4618      	mov	r0, r3
   1214e:	2100      	movs	r1, #0
   12150:	2211      	movs	r2, #17
   12152:	f7f6 ed34 	blx	8bbc <_init+0x5c>
	memset(BitmapStr, 0, sizeof(BitmapStr));
   12156:	f107 0348 	add.w	r3, r7, #72	; 0x48
   1215a:	4618      	mov	r0, r3
   1215c:	2100      	movs	r1, #0
   1215e:	2224      	movs	r2, #36	; 0x24
   12160:	f7f6 ed2c 	blx	8bbc <_init+0x5c>
	memset(bitLenStr, 0, sizeof(bitLenStr));
   12164:	f107 0320 	add.w	r3, r7, #32
   12168:	4618      	mov	r0, r3
   1216a:	2100      	movs	r1, #0
   1216c:	2203      	movs	r2, #3
   1216e:	f7f6 ed26 	blx	8bbc <_init+0x5c>


	//get the MTI of the transaction
	strcpy(mtiStr, "1200");
   12172:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   12176:	f244 72cc 	movw	r2, #18380	; 0x47cc
   1217a:	f2c0 0202 	movt	r2, #2
   1217e:	e892 0003 	ldmia.w	r2, {r0, r1}
   12182:	6018      	str	r0, [r3, #0]
   12184:	3304      	adds	r3, #4
   12186:	7019      	strb	r1, [r3, #0]
	hex2bin(mti, mtiStr, 0);
   12188:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1218c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   12190:	4610      	mov	r0, r2
   12192:	4619      	mov	r1, r3
   12194:	2200      	movs	r2, #0
   12196:	f000 fce5 	bl	12b64 <hex2bin>
	ret = bufApp(req, mti + 1, 2);
   1219a:	f107 0414 	add.w	r4, r7, #20
   1219e:	1d3a      	adds	r2, r7, #4
   121a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
   121a4:	3301      	adds	r3, #1
   121a6:	6810      	ldr	r0, [r2, #0]
   121a8:	4619      	mov	r1, r3
   121aa:	2202      	movs	r2, #2
   121ac:	f001 f8da 	bl	13364 <bufApp>
   121b0:	6020      	str	r0, [r4, #0]


	strcpy( BitmapStr, "087000000000001000");
   121b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
   121b6:	f244 73d4 	movw	r3, #18388	; 0x47d4
   121ba:	f2c0 0302 	movt	r3, #2
   121be:	4614      	mov	r4, r2
   121c0:	461d      	mov	r5, r3
   121c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   121c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   121c6:	682b      	ldr	r3, [r5, #0]
   121c8:	461a      	mov	r2, r3
   121ca:	8022      	strh	r2, [r4, #0]
   121cc:	3402      	adds	r4, #2
   121ce:	0c1b      	lsrs	r3, r3, #16
   121d0:	7023      	strb	r3, [r4, #0]
	memset(Bitmap, 0, sizeof(Bitmap));
   121d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
   121d6:	4618      	mov	r0, r3
   121d8:	2100      	movs	r1, #0
   121da:	2211      	movs	r2, #17
   121dc:	f7f6 ecee 	blx	8bbc <_init+0x5c>
	hex2bin(Bitmap, BitmapStr, 0);
   121e0:	f107 0234 	add.w	r2, r7, #52	; 0x34
   121e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
   121e8:	4610      	mov	r0, r2
   121ea:	4619      	mov	r1, r3
   121ec:	2200      	movs	r2, #0
   121ee:	f000 fcb9 	bl	12b64 <hex2bin>

	//get length of the bitmap
	bin2hex(bitLenStr, Bitmap,1);
   121f2:	f107 0220 	add.w	r2, r7, #32
   121f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
   121fa:	4610      	mov	r0, r2
   121fc:	4619      	mov	r1, r3
   121fe:	2201      	movs	r2, #1
   12200:	f000 fc60 	bl	12ac4 <bin2hex>
	hex2num(&bitLen, bitLenStr, 0);
   12204:	f107 0210 	add.w	r2, r7, #16
   12208:	f107 0320 	add.w	r3, r7, #32
   1220c:	4610      	mov	r0, r2
   1220e:	4619      	mov	r1, r3
   12210:	2200      	movs	r2, #0
   12212:	f000 fbdf 	bl	129d4 <hex2num>

	ret = bufApp(req, Bitmap + 1, bitLen);
   12216:	f107 0310 	add.w	r3, r7, #16
   1221a:	681b      	ldr	r3, [r3, #0]
   1221c:	f107 0414 	add.w	r4, r7, #20
   12220:	1d39      	adds	r1, r7, #4
   12222:	f107 0234 	add.w	r2, r7, #52	; 0x34
   12226:	3201      	adds	r2, #1
   12228:	6808      	ldr	r0, [r1, #0]
   1222a:	4611      	mov	r1, r2
   1222c:	461a      	mov	r2, r3
   1222e:	f001 f899 	bl	13364 <bufApp>
   12232:	6020      	str	r0, [r4, #0]
	CHK;
   12234:	f107 0314 	add.w	r3, r7, #20
   12238:	681b      	ldr	r3, [r3, #0]
   1223a:	2b00      	cmp	r3, #0
   1223c:	db5f      	blt.n	122fe <reqBuild+0x21a>

	for (bit = 2; bit <= bitLen * lenBitmap; bit++) {
   1223e:	f107 030f 	add.w	r3, r7, #15
   12242:	2202      	movs	r2, #2
   12244:	701a      	strb	r2, [r3, #0]
   12246:	e04b      	b.n	122e0 <reqBuild+0x1fc>
		if(!bitTest(Bitmap + 1, bit))
   12248:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1224c:	1c5a      	adds	r2, r3, #1
   1224e:	f107 030f 	add.w	r3, r7, #15
   12252:	781b      	ldrb	r3, [r3, #0]
   12254:	4610      	mov	r0, r2
   12256:	4619      	mov	r1, r3
   12258:	f001 fc84 	bl	13b64 <bitTest>
   1225c:	4603      	mov	r3, r0
   1225e:	2b00      	cmp	r3, #0
   12260:	d036      	beq.n	122d0 <reqBuild+0x1ec>
			continue;

		//clear buffer to hold data
		memset(dat, 0, sizeof(dat));
   12262:	f107 0394 	add.w	r3, r7, #148	; 0x94
   12266:	4618      	mov	r0, r3
   12268:	2100      	movs	r1, #0
   1226a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1226e:	f7f6 eca6 	blx	8bbc <_init+0x5c>
		bufInit(&buf, dat, sizeof(dat));   //initialize temporary buffer for current field
   12272:	f107 0218 	add.w	r2, r7, #24
   12276:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1227a:	4610      	mov	r0, r2
   1227c:	4619      	mov	r1, r3
   1227e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12282:	f000 feb3 	bl	12fec <bufInit>

		//get field data
		ret = getFld(&buf, bit);
   12286:	f107 0414 	add.w	r4, r7, #20
   1228a:	f107 0218 	add.w	r2, r7, #24
   1228e:	f107 030f 	add.w	r3, r7, #15
   12292:	781b      	ldrb	r3, [r3, #0]
   12294:	4610      	mov	r0, r2
   12296:	4619      	mov	r1, r3
   12298:	f7ff fcf8 	bl	11c8c <getFld>
   1229c:	6020      	str	r0, [r4, #0]
		CHK;                    //retrieve the value from the data base
   1229e:	f107 0314 	add.w	r3, r7, #20
   122a2:	681b      	ldr	r3, [r3, #0]
   122a4:	2b00      	cmp	r3, #0
   122a6:	db2a      	blt.n	122fe <reqBuild+0x21a>

		//append to request
		ret = appFld(req, bit, &buf);
   122a8:	f107 0414 	add.w	r4, r7, #20
   122ac:	1d39      	adds	r1, r7, #4
   122ae:	f107 030f 	add.w	r3, r7, #15
   122b2:	781a      	ldrb	r2, [r3, #0]
   122b4:	f107 0318 	add.w	r3, r7, #24
   122b8:	6808      	ldr	r0, [r1, #0]
   122ba:	4611      	mov	r1, r2
   122bc:	461a      	mov	r2, r3
   122be:	f7ff fe11 	bl	11ee4 <appFld>
   122c2:	6020      	str	r0, [r4, #0]
		CHK;                    //append it to the iso message
   122c4:	f107 0314 	add.w	r3, r7, #20
   122c8:	681b      	ldr	r3, [r3, #0]
   122ca:	2b00      	cmp	r3, #0
   122cc:	db17      	blt.n	122fe <reqBuild+0x21a>
   122ce:	e000      	b.n	122d2 <reqBuild+0x1ee>
	ret = bufApp(req, Bitmap + 1, bitLen);
	CHK;

	for (bit = 2; bit <= bitLen * lenBitmap; bit++) {
		if(!bitTest(Bitmap + 1, bit))
			continue;
   122d0:	bf00      	nop
	hex2num(&bitLen, bitLenStr, 0);

	ret = bufApp(req, Bitmap + 1, bitLen);
	CHK;

	for (bit = 2; bit <= bitLen * lenBitmap; bit++) {
   122d2:	f107 030f 	add.w	r3, r7, #15
   122d6:	f107 020f 	add.w	r2, r7, #15
   122da:	7812      	ldrb	r2, [r2, #0]
   122dc:	3201      	adds	r2, #1
   122de:	701a      	strb	r2, [r3, #0]
   122e0:	f107 030f 	add.w	r3, r7, #15
   122e4:	781a      	ldrb	r2, [r3, #0]
   122e6:	f107 0310 	add.w	r3, r7, #16
   122ea:	681b      	ldr	r3, [r3, #0]
   122ec:	00db      	lsls	r3, r3, #3
   122ee:	429a      	cmp	r2, r3
   122f0:	d9aa      	bls.n	12248 <reqBuild+0x164>
		//append to request
		ret = appFld(req, bit, &buf);
		CHK;                    //append it to the iso message
	}

	return bufLen(req);
   122f2:	1d3b      	adds	r3, r7, #4
   122f4:	6818      	ldr	r0, [r3, #0]
   122f6:	f000 fed9 	bl	130ac <bufLen>
   122fa:	4603      	mov	r3, r0
   122fc:	e001      	b.n	12302 <reqBuild+0x21e>
	lblKO:
	return -1;
   122fe:	f04f 33ff 	mov.w	r3, #4294967295
}
   12302:	4618      	mov	r0, r3
   12304:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12308:	f2c0 0302 	movt	r3, #2
   1230c:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
   12310:	681b      	ldr	r3, [r3, #0]
   12312:	429a      	cmp	r2, r3
   12314:	d001      	beq.n	1231a <reqBuild+0x236>
   12316:	f7f6 fe45 	bl	8fa4 <__stack_chk_fail>
   1231a:	f507 6790 	add.w	r7, r7, #1152	; 0x480
   1231e:	46bd      	mov	sp, r7
   12320:	bdb0      	pop	{r4, r5, r7, pc}
   12322:	bf00      	nop

00012324 <doTransaction>:

void doTransaction(void){
   12324:	b590      	push	{r4, r7, lr}
   12326:	f5ad 5dc1 	sub.w	sp, sp, #6176	; 0x1820
   1232a:	b087      	sub	sp, #28
   1232c:	af00      	add	r7, sp, #0
   1232e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12332:	f2c0 0302 	movt	r3, #2
   12336:	681b      	ldr	r3, [r3, #0]
   12338:	f507 51c1 	add.w	r1, r7, #6176	; 0x1820
   1233c:	f101 0114 	add.w	r1, r1, #20
   12340:	600b      	str	r3, [r1, #0]
	tBuffer bRsp;    // Response Buffer
	byte dRsp[(1024 * 3) + 3]; // Response data
	tBuffer bTPDUReq;// TPDU Request Buffer
	byte dTPDUReq[lenTPDU + lenBCDMsg + 1];
	byte bytTPDU[6 + 1];
	int ret = 0;
   12342:	f107 0318 	add.w	r3, r7, #24
   12346:	3b18      	subs	r3, #24
   12348:	2200      	movs	r2, #0
   1234a:	601a      	str	r2, [r3, #0]


	memset(dRsp, 0, sizeof(dRsp));
   1234c:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
   12350:	4618      	mov	r0, r3
   12352:	2100      	movs	r1, #0
   12354:	f640 4203 	movw	r2, #3075	; 0xc03
   12358:	f7f6 ec30 	blx	8bbc <_init+0x5c>
	memset(dReq, 0, sizeof(dReq));
   1235c:	f107 0338 	add.w	r3, r7, #56	; 0x38
   12360:	3b0c      	subs	r3, #12
   12362:	4618      	mov	r0, r3
   12364:	2100      	movs	r1, #0
   12366:	f640 4201 	movw	r2, #3073	; 0xc01
   1236a:	f7f6 ec28 	blx	8bbc <_init+0x5c>
	memset(bytTPDU, 0, sizeof(bytTPDU));
   1236e:	f107 0338 	add.w	r3, r7, #56	; 0x38
   12372:	3b1c      	subs	r3, #28
   12374:	4618      	mov	r0, r3
   12376:	2100      	movs	r1, #0
   12378:	2207      	movs	r2, #7
   1237a:	f7f6 ec20 	blx	8bbc <_init+0x5c>
//	memset(strTPDU, 0, sizeof(strTPDU));
	memset(dTPDUReq, 0, sizeof(dTPDUReq));
   1237e:	f107 0338 	add.w	r3, r7, #56	; 0x38
   12382:	3b14      	subs	r3, #20
   12384:	4618      	mov	r0, r3
   12386:	2100      	movs	r1, #0
   12388:	2208      	movs	r2, #8
   1238a:	f7f6 ec18 	blx	8bbc <_init+0x5c>
//	memset(tpduHead, 0, sizeof(tpduHead));

	//initialize request buffer
	bufInit(&bRsp, dRsp, sizeof(dRsp));
   1238e:	f107 0318 	add.w	r3, r7, #24
   12392:	3b0c      	subs	r3, #12
   12394:	f507 6243 	add.w	r2, r7, #3120	; 0xc30
   12398:	4618      	mov	r0, r3
   1239a:	4611      	mov	r1, r2
   1239c:	f640 4203 	movw	r2, #3075	; 0xc03
   123a0:	f000 fe24 	bl	12fec <bufInit>
	bufInit(&bReq, dReq, sizeof(dReq));
   123a4:	f107 0218 	add.w	r2, r7, #24
   123a8:	3a14      	subs	r2, #20
   123aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
   123ae:	3b0c      	subs	r3, #12
   123b0:	4610      	mov	r0, r2
   123b2:	4619      	mov	r1, r3
   123b4:	f640 4201 	movw	r2, #3073	; 0xc01
   123b8:	f000 fe18 	bl	12fec <bufInit>
	bufInit(&bTPDUReq, dTPDUReq, sizeof(dTPDUReq));
   123bc:	f107 0218 	add.w	r2, r7, #24
   123c0:	3a04      	subs	r2, #4
   123c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
   123c6:	3b14      	subs	r3, #20
   123c8:	4610      	mov	r0, r2
   123ca:	4619      	mov	r1, r3
   123cc:	2208      	movs	r2, #8
   123ce:	f000 fe0d 	bl	12fec <bufInit>

	ret = reqBuild(&bReq);
   123d2:	f107 0418 	add.w	r4, r7, #24
   123d6:	3c18      	subs	r4, #24
   123d8:	f107 0318 	add.w	r3, r7, #24
   123dc:	3b14      	subs	r3, #20
   123de:	4618      	mov	r0, r3
   123e0:	f7ff fe80 	bl	120e4 <reqBuild>
   123e4:	6020      	str	r0, [r4, #0]

	MAPPUTSTR(traMessagePack, dReq, lblKO);
   123e6:	f107 0418 	add.w	r4, r7, #24
   123ea:	3c18      	subs	r4, #24
   123ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
   123f0:	3b0c      	subs	r3, #12
   123f2:	201f      	movs	r0, #31
   123f4:	4619      	mov	r1, r3
   123f6:	2200      	movs	r2, #0
   123f8:	f004 f8e2 	bl	165c0 <mapPut>
   123fc:	6020      	str	r0, [r4, #0]
   123fe:	f107 0318 	add.w	r3, r7, #24
   12402:	3b18      	subs	r3, #24
   12404:	681b      	ldr	r3, [r3, #0]
   12406:	2b00      	cmp	r3, #0
   12408:	db01      	blt.n	1240e <doTransaction+0xea>

	ComGPRS();
   1240a:	f7f9 ffd9 	bl	c3c0 <ComGPRS>

	lblKO:;
}
   1240e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12412:	f2c0 0302 	movt	r3, #2
   12416:	f507 51c1 	add.w	r1, r7, #6176	; 0x1820
   1241a:	f101 0114 	add.w	r1, r1, #20
   1241e:	680a      	ldr	r2, [r1, #0]
   12420:	681b      	ldr	r3, [r3, #0]
   12422:	429a      	cmp	r2, r3
   12424:	d001      	beq.n	1242a <doTransaction+0x106>
   12426:	f7f6 fdbd 	bl	8fa4 <__stack_chk_fail>
   1242a:	f107 073c 	add.w	r7, r7, #60	; 0x3c
   1242e:	f507 57c0 	add.w	r7, r7, #6144	; 0x1800
   12432:	46bd      	mov	sp, r7
   12434:	bd90      	pop	{r4, r7, pc}
   12436:	bf00      	nop

00012438 <bPtr>:


//#undef trcOpt
//#define trcOpt (TRCOPT & BIT(trcTBX))

const byte *bPtr(byte val) {
   12438:	b580      	push	{r7, lr}
   1243a:	b084      	sub	sp, #16
   1243c:	af00      	add	r7, sp, #0
   1243e:	4603      	mov	r3, r0
   12440:	71fb      	strb	r3, [r7, #7]
   12442:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12446:	f2c0 0302 	movt	r3, #2
   1244a:	681b      	ldr	r3, [r3, #0]
   1244c:	60fb      	str	r3, [r7, #12]
	static byte x;

	x = val;
   1244e:	f64f 73ce 	movw	r3, #65486	; 0xffce
   12452:	f2c0 0302 	movt	r3, #2
   12456:	79fa      	ldrb	r2, [r7, #7]
   12458:	701a      	strb	r2, [r3, #0]
	return &x;
   1245a:	f64f 73ce 	movw	r3, #65486	; 0xffce
   1245e:	f2c0 0302 	movt	r3, #2
}
   12462:	4618      	mov	r0, r3
   12464:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12468:	f2c0 0302 	movt	r3, #2
   1246c:	68fa      	ldr	r2, [r7, #12]
   1246e:	681b      	ldr	r3, [r3, #0]
   12470:	429a      	cmp	r2, r3
   12472:	d001      	beq.n	12478 <bPtr+0x40>
   12474:	f7f6 fd96 	bl	8fa4 <__stack_chk_fail>
   12478:	f107 0710 	add.w	r7, r7, #16
   1247c:	46bd      	mov	sp, r7
   1247e:	bd80      	pop	{r7, pc}

00012480 <wPtr>:

const word *wPtr(word val) {
   12480:	b580      	push	{r7, lr}
   12482:	b084      	sub	sp, #16
   12484:	af00      	add	r7, sp, #0
   12486:	4603      	mov	r3, r0
   12488:	80fb      	strh	r3, [r7, #6]
   1248a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1248e:	f2c0 0302 	movt	r3, #2
   12492:	681b      	ldr	r3, [r3, #0]
   12494:	60fb      	str	r3, [r7, #12]
	static word x;

	x = val;
   12496:	f64f 73cc 	movw	r3, #65484	; 0xffcc
   1249a:	f2c0 0302 	movt	r3, #2
   1249e:	88fa      	ldrh	r2, [r7, #6]
   124a0:	801a      	strh	r2, [r3, #0]
	return &x;
   124a2:	f64f 73cc 	movw	r3, #65484	; 0xffcc
   124a6:	f2c0 0302 	movt	r3, #2
}
   124aa:	4618      	mov	r0, r3
   124ac:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   124b0:	f2c0 0302 	movt	r3, #2
   124b4:	68fa      	ldr	r2, [r7, #12]
   124b6:	681b      	ldr	r3, [r3, #0]
   124b8:	429a      	cmp	r2, r3
   124ba:	d001      	beq.n	124c0 <wPtr+0x40>
   124bc:	f7f6 fd72 	bl	8fa4 <__stack_chk_fail>
   124c0:	f107 0710 	add.w	r7, r7, #16
   124c4:	46bd      	mov	sp, r7
   124c6:	bd80      	pop	{r7, pc}

000124c8 <cPtr>:

const card *cPtr(card val) {
   124c8:	b580      	push	{r7, lr}
   124ca:	b084      	sub	sp, #16
   124cc:	af00      	add	r7, sp, #0
   124ce:	6078      	str	r0, [r7, #4]
   124d0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   124d4:	f2c0 0302 	movt	r3, #2
   124d8:	681b      	ldr	r3, [r3, #0]
   124da:	60fb      	str	r3, [r7, #12]
	static card x;

	x = val;
   124dc:	f64f 73c8 	movw	r3, #65480	; 0xffc8
   124e0:	f2c0 0302 	movt	r3, #2
   124e4:	687a      	ldr	r2, [r7, #4]
   124e6:	601a      	str	r2, [r3, #0]
	return &x;
   124e8:	f64f 73c8 	movw	r3, #65480	; 0xffc8
   124ec:	f2c0 0302 	movt	r3, #2
}
   124f0:	4618      	mov	r0, r3
   124f2:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   124f6:	f2c0 0302 	movt	r3, #2
   124fa:	68fa      	ldr	r2, [r7, #12]
   124fc:	681b      	ldr	r3, [r3, #0]
   124fe:	429a      	cmp	r2, r3
   12500:	d001      	beq.n	12506 <cPtr+0x3e>
   12502:	f7f6 fd4f 	bl	8fa4 <__stack_chk_fail>
   12506:	f107 0710 	add.w	r7, r7, #16
   1250a:	46bd      	mov	sp, r7
   1250c:	bd80      	pop	{r7, pc}
   1250e:	bf00      	nop

00012510 <dPtr>:

const byte *dPtr(const char *s) {
   12510:	b580      	push	{r7, lr}
   12512:	b084      	sub	sp, #16
   12514:	af00      	add	r7, sp, #0
   12516:	6078      	str	r0, [r7, #4]
   12518:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1251c:	f2c0 0302 	movt	r3, #2
   12520:	681b      	ldr	r3, [r3, #0]
   12522:	60fb      	str	r3, [r7, #12]
	return (byte *) s;
   12524:	687b      	ldr	r3, [r7, #4]
}
   12526:	4618      	mov	r0, r3
   12528:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1252c:	f2c0 0302 	movt	r3, #2
   12530:	68fa      	ldr	r2, [r7, #12]
   12532:	681b      	ldr	r3, [r3, #0]
   12534:	429a      	cmp	r2, r3
   12536:	d001      	beq.n	1253c <dPtr+0x2c>
   12538:	f7f6 fd34 	bl	8fa4 <__stack_chk_fail>
   1253c:	f107 0710 	add.w	r7, r7, #16
   12540:	46bd      	mov	sp, r7
   12542:	bd80      	pop	{r7, pc}

00012544 <getNumLen>:

//get number of digits in the numeric value based on base
static byte getNumLen(card num, byte base) {
   12544:	b580      	push	{r7, lr}
   12546:	b084      	sub	sp, #16
   12548:	af00      	add	r7, sp, #0
   1254a:	6078      	str	r0, [r7, #4]
   1254c:	460b      	mov	r3, r1
   1254e:	70fb      	strb	r3, [r7, #3]
   12550:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12554:	f2c0 0302 	movt	r3, #2
   12558:	681b      	ldr	r3, [r3, #0]
   1255a:	60fb      	str	r3, [r7, #12]
	byte ret;

	ret = 0;
   1255c:	2300      	movs	r3, #0
   1255e:	72fb      	strb	r3, [r7, #11]
	while(num) {
   12560:	e009      	b.n	12576 <getNumLen+0x32>
		ret++;
   12562:	7afb      	ldrb	r3, [r7, #11]
   12564:	3301      	adds	r3, #1
   12566:	72fb      	strb	r3, [r7, #11]
		num /= base;
   12568:	78fb      	ldrb	r3, [r7, #3]
   1256a:	6878      	ldr	r0, [r7, #4]
   1256c:	4619      	mov	r1, r3
   1256e:	f00f ede6 	blx	2213c <__aeabi_uidiv>
   12572:	4603      	mov	r3, r0
   12574:	607b      	str	r3, [r7, #4]
//get number of digits in the numeric value based on base
static byte getNumLen(card num, byte base) {
	byte ret;

	ret = 0;
	while(num) {
   12576:	687b      	ldr	r3, [r7, #4]
   12578:	2b00      	cmp	r3, #0
   1257a:	d1f2      	bne.n	12562 <getNumLen+0x1e>
		ret++;
		num /= base;
	}
	return ret;
   1257c:	7afb      	ldrb	r3, [r7, #11]
}
   1257e:	4618      	mov	r0, r3
   12580:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12584:	f2c0 0302 	movt	r3, #2
   12588:	68fa      	ldr	r2, [r7, #12]
   1258a:	681b      	ldr	r3, [r3, #0]
   1258c:	429a      	cmp	r2, r3
   1258e:	d001      	beq.n	12594 <getNumLen+0x50>
   12590:	f7f6 fd08 	bl	8fa4 <__stack_chk_fail>
   12594:	f107 0710 	add.w	r7, r7, #16
   12598:	46bd      	mov	sp, r7
   1259a:	bd80      	pop	{r7, pc}

0001259c <num2dec>:
 *    - 0 otherwise.
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0004.c
 */
byte num2dec(char *dec, card num, byte len) {
   1259c:	b580      	push	{r7, lr}
   1259e:	b086      	sub	sp, #24
   125a0:	af00      	add	r7, sp, #0
   125a2:	60f8      	str	r0, [r7, #12]
   125a4:	60b9      	str	r1, [r7, #8]
   125a6:	4613      	mov	r3, r2
   125a8:	71fb      	strb	r3, [r7, #7]
   125aa:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   125ae:	f2c0 0302 	movt	r3, #2
   125b2:	681b      	ldr	r3, [r3, #0]
   125b4:	617b      	str	r3, [r7, #20]

	VERIFY(dec);

	//normally len is the length of the acceptor
	//if len is large, destination is zero padded from left
	if(!len) {                  //calculate len to be equal to the number of decimal digits in num
   125b6:	79fb      	ldrb	r3, [r7, #7]
   125b8:	2b00      	cmp	r3, #0
   125ba:	d10a      	bne.n	125d2 <num2dec+0x36>
		len = getNumLen(num, 10);
   125bc:	68b8      	ldr	r0, [r7, #8]
   125be:	210a      	movs	r1, #10
   125c0:	f7ff ffc0 	bl	12544 <getNumLen>
   125c4:	4603      	mov	r3, r0
   125c6:	71fb      	strb	r3, [r7, #7]
		if(!len)
   125c8:	79fb      	ldrb	r3, [r7, #7]
   125ca:	2b00      	cmp	r3, #0
   125cc:	d101      	bne.n	125d2 <num2dec+0x36>
			len = 1;            //zero should be convertod to "0"
   125ce:	2301      	movs	r3, #1
   125d0:	71fb      	strb	r3, [r7, #7]
	}

	ret = len;                  //number of bytes processed is returned
   125d2:	79fb      	ldrb	r3, [r7, #7]
   125d4:	74fb      	strb	r3, [r7, #19]
	idx = len;
   125d6:	79fb      	ldrb	r3, [r7, #7]
   125d8:	74bb      	strb	r3, [r7, #18]
	dec[idx] = 0;
   125da:	7cbb      	ldrb	r3, [r7, #18]
   125dc:	68fa      	ldr	r2, [r7, #12]
   125de:	18d3      	adds	r3, r2, r3
   125e0:	2200      	movs	r2, #0
   125e2:	701a      	strb	r2, [r3, #0]
	while(idx--) {              //fill dec from right to left
   125e4:	e01c      	b.n	12620 <num2dec+0x84>
		dec[idx] = (char) ((num % 10) + '0');
   125e6:	7cbb      	ldrb	r3, [r7, #18]
   125e8:	68fa      	ldr	r2, [r7, #12]
   125ea:	18d0      	adds	r0, r2, r3
   125ec:	68b9      	ldr	r1, [r7, #8]
   125ee:	f64c 43cd 	movw	r3, #52429	; 0xcccd
   125f2:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
   125f6:	fba3 2301 	umull	r2, r3, r3, r1
   125fa:	08da      	lsrs	r2, r3, #3
   125fc:	4613      	mov	r3, r2
   125fe:	009b      	lsls	r3, r3, #2
   12600:	189b      	adds	r3, r3, r2
   12602:	005b      	lsls	r3, r3, #1
   12604:	1aca      	subs	r2, r1, r3
   12606:	b2d3      	uxtb	r3, r2
   12608:	3330      	adds	r3, #48	; 0x30
   1260a:	b2db      	uxtb	r3, r3
   1260c:	7003      	strb	r3, [r0, #0]
		num /= 10;
   1260e:	68ba      	ldr	r2, [r7, #8]
   12610:	f64c 43cd 	movw	r3, #52429	; 0xcccd
   12614:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
   12618:	fba3 1302 	umull	r1, r3, r3, r2
   1261c:	08db      	lsrs	r3, r3, #3
   1261e:	60bb      	str	r3, [r7, #8]
	}

	ret = len;                  //number of bytes processed is returned
	idx = len;
	dec[idx] = 0;
	while(idx--) {              //fill dec from right to left
   12620:	7cbb      	ldrb	r3, [r7, #18]
   12622:	2b00      	cmp	r3, #0
   12624:	bf0c      	ite	eq
   12626:	2300      	moveq	r3, #0
   12628:	2301      	movne	r3, #1
   1262a:	b2db      	uxtb	r3, r3
   1262c:	7cba      	ldrb	r2, [r7, #18]
   1262e:	3a01      	subs	r2, #1
   12630:	74ba      	strb	r2, [r7, #18]
   12632:	2b00      	cmp	r3, #0
   12634:	d1d7      	bne.n	125e6 <num2dec+0x4a>
		dec[idx] = (char) ((num % 10) + '0');
		num /= 10;
	}
	CHECK(!num, lblKO);         //error: len too small
   12636:	68bb      	ldr	r3, [r7, #8]
   12638:	2b00      	cmp	r3, #0
   1263a:	d101      	bne.n	12640 <num2dec+0xa4>
	return ret;
   1263c:	7cfb      	ldrb	r3, [r7, #19]
   1263e:	e000      	b.n	12642 <num2dec+0xa6>
	lblKO:
	return 0;
   12640:	2300      	movs	r3, #0
}
   12642:	4618      	mov	r0, r3
   12644:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12648:	f2c0 0302 	movt	r3, #2
   1264c:	697a      	ldr	r2, [r7, #20]
   1264e:	681b      	ldr	r3, [r3, #0]
   12650:	429a      	cmp	r2, r3
   12652:	d001      	beq.n	12658 <num2dec+0xbc>
   12654:	f7f6 fca6 	bl	8fa4 <__stack_chk_fail>
   12658:	f107 0718 	add.w	r7, r7, #24
   1265c:	46bd      	mov	sp, r7
   1265e:	bd80      	pop	{r7, pc}

00012660 <chr2nib>:

static byte chr2nib(char chr) { //convert hexadecimal character to nibble
   12660:	b580      	push	{r7, lr}
   12662:	b084      	sub	sp, #16
   12664:	af00      	add	r7, sp, #0
   12666:	4603      	mov	r3, r0
   12668:	71fb      	strb	r3, [r7, #7]
   1266a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1266e:	f2c0 0302 	movt	r3, #2
   12672:	681b      	ldr	r3, [r3, #0]
   12674:	60fb      	str	r3, [r7, #12]
	switch (chr) {
   12676:	79fb      	ldrb	r3, [r7, #7]
   12678:	3b30      	subs	r3, #48	; 0x30
   1267a:	2b36      	cmp	r3, #54	; 0x36
   1267c:	d87c      	bhi.n	12778 <chr2nib+0x118>
   1267e:	a201      	add	r2, pc, #4	; (adr r2, 12684 <chr2nib+0x24>)
   12680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12684:	00012761 	.word	0x00012761
   12688:	00012761 	.word	0x00012761
   1268c:	00012761 	.word	0x00012761
   12690:	00012761 	.word	0x00012761
   12694:	00012761 	.word	0x00012761
   12698:	00012761 	.word	0x00012761
   1269c:	00012761 	.word	0x00012761
   126a0:	00012761 	.word	0x00012761
   126a4:	00012761 	.word	0x00012761
   126a8:	00012761 	.word	0x00012761
   126ac:	00012779 	.word	0x00012779
   126b0:	00012779 	.word	0x00012779
   126b4:	00012779 	.word	0x00012779
   126b8:	00012779 	.word	0x00012779
   126bc:	00012779 	.word	0x00012779
   126c0:	00012779 	.word	0x00012779
   126c4:	00012779 	.word	0x00012779
   126c8:	00012769 	.word	0x00012769
   126cc:	00012769 	.word	0x00012769
   126d0:	00012769 	.word	0x00012769
   126d4:	00012769 	.word	0x00012769
   126d8:	00012769 	.word	0x00012769
   126dc:	00012769 	.word	0x00012769
   126e0:	00012779 	.word	0x00012779
   126e4:	00012779 	.word	0x00012779
   126e8:	00012779 	.word	0x00012779
   126ec:	00012779 	.word	0x00012779
   126f0:	00012779 	.word	0x00012779
   126f4:	00012779 	.word	0x00012779
   126f8:	00012779 	.word	0x00012779
   126fc:	00012779 	.word	0x00012779
   12700:	00012779 	.word	0x00012779
   12704:	00012779 	.word	0x00012779
   12708:	00012779 	.word	0x00012779
   1270c:	00012779 	.word	0x00012779
   12710:	00012779 	.word	0x00012779
   12714:	00012779 	.word	0x00012779
   12718:	00012779 	.word	0x00012779
   1271c:	00012779 	.word	0x00012779
   12720:	00012779 	.word	0x00012779
   12724:	00012779 	.word	0x00012779
   12728:	00012779 	.word	0x00012779
   1272c:	00012779 	.word	0x00012779
   12730:	00012779 	.word	0x00012779
   12734:	00012779 	.word	0x00012779
   12738:	00012779 	.word	0x00012779
   1273c:	00012779 	.word	0x00012779
   12740:	00012779 	.word	0x00012779
   12744:	00012779 	.word	0x00012779
   12748:	00012771 	.word	0x00012771
   1274c:	00012771 	.word	0x00012771
   12750:	00012771 	.word	0x00012771
   12754:	00012771 	.word	0x00012771
   12758:	00012771 	.word	0x00012771
   1275c:	00012771 	.word	0x00012771
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
		return (byte) (chr - '0');
   12760:	79fb      	ldrb	r3, [r7, #7]
   12762:	3b30      	subs	r3, #48	; 0x30
   12764:	b2db      	uxtb	r3, r3
   12766:	e009      	b.n	1277c <chr2nib+0x11c>
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
		return (byte) (chr - 'A' + 10);
   12768:	79fb      	ldrb	r3, [r7, #7]
   1276a:	3b37      	subs	r3, #55	; 0x37
   1276c:	b2db      	uxtb	r3, r3
   1276e:	e005      	b.n	1277c <chr2nib+0x11c>
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
		return (byte) (chr - 'a' + 10);
   12770:	79fb      	ldrb	r3, [r7, #7]
   12772:	3b57      	subs	r3, #87	; 0x57
   12774:	b2db      	uxtb	r3, r3
   12776:	e001      	b.n	1277c <chr2nib+0x11c>
	default:
		break;
   12778:	bf00      	nop
	}
	return 0x10;                //KO
   1277a:	2310      	movs	r3, #16
}
   1277c:	4618      	mov	r0, r3
   1277e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12782:	f2c0 0302 	movt	r3, #2
   12786:	68fa      	ldr	r2, [r7, #12]
   12788:	681b      	ldr	r3, [r3, #0]
   1278a:	429a      	cmp	r2, r3
   1278c:	d001      	beq.n	12792 <chr2nib+0x132>
   1278e:	f7f6 fc09 	bl	8fa4 <__stack_chk_fail>
   12792:	f107 0710 	add.w	r7, r7, #16
   12796:	46bd      	mov	sp, r7
   12798:	bd80      	pop	{r7, pc}
   1279a:	bf00      	nop

0001279c <nib2chr>:

static char nib2chr(byte nib) { //convert nibble to hexadecimal character
   1279c:	b580      	push	{r7, lr}
   1279e:	b084      	sub	sp, #16
   127a0:	af00      	add	r7, sp, #0
   127a2:	4603      	mov	r3, r0
   127a4:	71fb      	strb	r3, [r7, #7]
   127a6:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   127aa:	f2c0 0302 	movt	r3, #2
   127ae:	681b      	ldr	r3, [r3, #0]
   127b0:	60fb      	str	r3, [r7, #12]
	VERIFY(nib <= 0x0F);
	if(nib < 10)
   127b2:	79fb      	ldrb	r3, [r7, #7]
   127b4:	2b09      	cmp	r3, #9
   127b6:	d803      	bhi.n	127c0 <nib2chr+0x24>
		return (char) ('0' + nib);
   127b8:	79fb      	ldrb	r3, [r7, #7]
   127ba:	3330      	adds	r3, #48	; 0x30
   127bc:	b2db      	uxtb	r3, r3
   127be:	e002      	b.n	127c6 <nib2chr+0x2a>
	return (char) ('A' + (nib - 10));
   127c0:	79fb      	ldrb	r3, [r7, #7]
   127c2:	3337      	adds	r3, #55	; 0x37
   127c4:	b2db      	uxtb	r3, r3
}
   127c6:	4618      	mov	r0, r3
   127c8:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   127cc:	f2c0 0302 	movt	r3, #2
   127d0:	68fa      	ldr	r2, [r7, #12]
   127d2:	681b      	ldr	r3, [r3, #0]
   127d4:	429a      	cmp	r2, r3
   127d6:	d001      	beq.n	127dc <nib2chr+0x40>
   127d8:	f7f6 fbe4 	bl	8fa4 <__stack_chk_fail>
   127dc:	f107 0710 	add.w	r7, r7, #16
   127e0:	46bd      	mov	sp, r7
   127e2:	bd80      	pop	{r7, pc}

000127e4 <dec2num>:
 *    - 0 otherwise.
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0004.c
 */
byte dec2num(card * num, const char *dec, byte len) {
   127e4:	b580      	push	{r7, lr}
   127e6:	b086      	sub	sp, #24
   127e8:	af00      	add	r7, sp, #0
   127ea:	60f8      	str	r0, [r7, #12]
   127ec:	60b9      	str	r1, [r7, #8]
   127ee:	4613      	mov	r3, r2
   127f0:	71fb      	strb	r3, [r7, #7]
   127f2:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   127f6:	f2c0 0302 	movt	r3, #2
   127fa:	681b      	ldr	r3, [r3, #0]
   127fc:	617b      	str	r3, [r7, #20]

	VERIFY(num);
	VERIFY(dec);

	//normally len is the number of characters to get from source string
	if(!len)
   127fe:	79fb      	ldrb	r3, [r7, #7]
   12800:	2b00      	cmp	r3, #0
   12802:	d104      	bne.n	1280e <dec2num+0x2a>
		len = (byte) strlen(dec);   //calcualte length if missing
   12804:	68b8      	ldr	r0, [r7, #8]
   12806:	f7f6 ea3e 	blx	8c84 <_init+0x124>
   1280a:	4603      	mov	r3, r0
   1280c:	71fb      	strb	r3, [r7, #7]

	ret = 0;
   1280e:	2300      	movs	r3, #0
   12810:	74bb      	strb	r3, [r7, #18]
	*num = 0;
   12812:	68fb      	ldr	r3, [r7, #12]
   12814:	2200      	movs	r2, #0
   12816:	601a      	str	r2, [r3, #0]
	while((*dec == ' ') || (*dec == '\t')) {    //skip blank characters
   12818:	e00b      	b.n	12832 <dec2num+0x4e>
		dec++;
   1281a:	68bb      	ldr	r3, [r7, #8]
   1281c:	3301      	adds	r3, #1
   1281e:	60bb      	str	r3, [r7, #8]
		ret++;
   12820:	7cbb      	ldrb	r3, [r7, #18]
   12822:	3301      	adds	r3, #1
   12824:	74bb      	strb	r3, [r7, #18]
		CHECK(len, lblKO);      //the input is empty
   12826:	79fb      	ldrb	r3, [r7, #7]
   12828:	2b00      	cmp	r3, #0
   1282a:	d057      	beq.n	128dc <dec2num+0xf8>
		len--;
   1282c:	79fb      	ldrb	r3, [r7, #7]
   1282e:	3b01      	subs	r3, #1
   12830:	71fb      	strb	r3, [r7, #7]
	if(!len)
		len = (byte) strlen(dec);   //calcualte length if missing

	ret = 0;
	*num = 0;
	while((*dec == ' ') || (*dec == '\t')) {    //skip blank characters
   12832:	68bb      	ldr	r3, [r7, #8]
   12834:	781b      	ldrb	r3, [r3, #0]
   12836:	2b20      	cmp	r3, #32
   12838:	d0ef      	beq.n	1281a <dec2num+0x36>
   1283a:	68bb      	ldr	r3, [r7, #8]
   1283c:	781b      	ldrb	r3, [r3, #0]
   1283e:	2b09      	cmp	r3, #9
   12840:	d0eb      	beq.n	1281a <dec2num+0x36>
		ret++;
		CHECK(len, lblKO);      //the input is empty
		len--;
	}

	while(*dec) {               //main loop: perform the conversion
   12842:	e03f      	b.n	128c4 <dec2num+0xe0>
		if(*dec < '0')
   12844:	68bb      	ldr	r3, [r7, #8]
   12846:	781b      	ldrb	r3, [r3, #0]
   12848:	2b2f      	cmp	r3, #47	; 0x2f
   1284a:	d940      	bls.n	128ce <dec2num+0xea>
			break;
		if(*dec > '9')
   1284c:	68bb      	ldr	r3, [r7, #8]
   1284e:	781b      	ldrb	r3, [r3, #0]
   12850:	2b39      	cmp	r3, #57	; 0x39
   12852:	d83e      	bhi.n	128d2 <dec2num+0xee>
			break;
		tmp = chr2nib(*dec++);  //convert one more character
   12854:	68bb      	ldr	r3, [r7, #8]
   12856:	781b      	ldrb	r3, [r3, #0]
   12858:	68ba      	ldr	r2, [r7, #8]
   1285a:	3201      	adds	r2, #1
   1285c:	60ba      	str	r2, [r7, #8]
   1285e:	4618      	mov	r0, r3
   12860:	f7ff fefe 	bl	12660 <chr2nib>
   12864:	4603      	mov	r3, r0
   12866:	74fb      	strb	r3, [r7, #19]
		VERIFY(tmp <= 10);
		CHECK(tmp < 10, lblKO); //validity check
   12868:	7cfb      	ldrb	r3, [r7, #19]
   1286a:	2b09      	cmp	r3, #9
   1286c:	d836      	bhi.n	128dc <dec2num+0xf8>
		CHECK(*num <= 0xFFFFFFFFL / 10, lblKO); //dec exceeds 0xFFFFFFFFL
   1286e:	68fb      	ldr	r3, [r7, #12]
   12870:	681a      	ldr	r2, [r3, #0]
   12872:	f649 1399 	movw	r3, #39321	; 0x9999
   12876:	f6c1 1399 	movt	r3, #6553	; 0x1999
   1287a:	429a      	cmp	r2, r3
   1287c:	d82e      	bhi.n	128dc <dec2num+0xf8>
		CHECK(!((*num == 0xFFFFFFFFL / 10) && (tmp > 5)), lblKO);   //dec exceeds 0xFFFFFFFFL
   1287e:	68fb      	ldr	r3, [r7, #12]
   12880:	681a      	ldr	r2, [r3, #0]
   12882:	f649 1399 	movw	r3, #39321	; 0x9999
   12886:	f6c1 1399 	movt	r3, #6553	; 0x1999
   1288a:	429a      	cmp	r2, r3
   1288c:	d102      	bne.n	12894 <dec2num+0xb0>
   1288e:	7cfb      	ldrb	r3, [r7, #19]
   12890:	2b05      	cmp	r3, #5
   12892:	d823      	bhi.n	128dc <dec2num+0xf8>
		*num *= 10;             //OK, we can shift it left
   12894:	68fb      	ldr	r3, [r7, #12]
   12896:	681a      	ldr	r2, [r3, #0]
   12898:	4613      	mov	r3, r2
   1289a:	009b      	lsls	r3, r3, #2
   1289c:	189b      	adds	r3, r3, r2
   1289e:	005b      	lsls	r3, r3, #1
   128a0:	461a      	mov	r2, r3
   128a2:	68fb      	ldr	r3, [r7, #12]
   128a4:	601a      	str	r2, [r3, #0]
		*num += tmp;            //OK, let us do it
   128a6:	68fb      	ldr	r3, [r7, #12]
   128a8:	681a      	ldr	r2, [r3, #0]
   128aa:	7cfb      	ldrb	r3, [r7, #19]
   128ac:	18d2      	adds	r2, r2, r3
   128ae:	68fb      	ldr	r3, [r7, #12]
   128b0:	601a      	str	r2, [r3, #0]
		ret++;                  //one more digit processed
   128b2:	7cbb      	ldrb	r3, [r7, #18]
   128b4:	3301      	adds	r3, #1
   128b6:	74bb      	strb	r3, [r7, #18]
		len--;
   128b8:	79fb      	ldrb	r3, [r7, #7]
   128ba:	3b01      	subs	r3, #1
   128bc:	71fb      	strb	r3, [r7, #7]
		if(!len)
   128be:	79fb      	ldrb	r3, [r7, #7]
   128c0:	2b00      	cmp	r3, #0
   128c2:	d008      	beq.n	128d6 <dec2num+0xf2>
		ret++;
		CHECK(len, lblKO);      //the input is empty
		len--;
	}

	while(*dec) {               //main loop: perform the conversion
   128c4:	68bb      	ldr	r3, [r7, #8]
   128c6:	781b      	ldrb	r3, [r3, #0]
   128c8:	2b00      	cmp	r3, #0
   128ca:	d1bb      	bne.n	12844 <dec2num+0x60>
   128cc:	e004      	b.n	128d8 <dec2num+0xf4>
		if(*dec < '0')
			break;
   128ce:	bf00      	nop
   128d0:	e002      	b.n	128d8 <dec2num+0xf4>
		if(*dec > '9')
			break;
   128d2:	bf00      	nop
   128d4:	e000      	b.n	128d8 <dec2num+0xf4>
		*num *= 10;             //OK, we can shift it left
		*num += tmp;            //OK, let us do it
		ret++;                  //one more digit processed
		len--;
		if(!len)
			break;
   128d6:	bf00      	nop
	}

	return ret;
   128d8:	7cbb      	ldrb	r3, [r7, #18]
   128da:	e000      	b.n	128de <dec2num+0xfa>
	lblKO:
	return 0;
   128dc:	2300      	movs	r3, #0
}
   128de:	4618      	mov	r0, r3
   128e0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   128e4:	f2c0 0302 	movt	r3, #2
   128e8:	697a      	ldr	r2, [r7, #20]
   128ea:	681b      	ldr	r3, [r3, #0]
   128ec:	429a      	cmp	r2, r3
   128ee:	d001      	beq.n	128f4 <dec2num+0x110>
   128f0:	f7f6 fb58 	bl	8fa4 <__stack_chk_fail>
   128f4:	f107 0718 	add.w	r7, r7, #24
   128f8:	46bd      	mov	sp, r7
   128fa:	bd80      	pop	{r7, pc}

000128fc <num2hex>:
 *    - 0 otherwise.
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0004.c
 */
byte num2hex(char *hex, card num, byte len) {
   128fc:	b580      	push	{r7, lr}
   128fe:	b086      	sub	sp, #24
   12900:	af00      	add	r7, sp, #0
   12902:	60f8      	str	r0, [r7, #12]
   12904:	60b9      	str	r1, [r7, #8]
   12906:	4613      	mov	r3, r2
   12908:	71fb      	strb	r3, [r7, #7]
   1290a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1290e:	f2c0 0302 	movt	r3, #2
   12912:	681b      	ldr	r3, [r3, #0]
   12914:	617b      	str	r3, [r7, #20]

	VERIFY(hex);

	//normally len is the length of the acceptor
	//if len is large, destination is zero padded from left
	if(!len) {                  //calculate len to be equal to the number of hexadecimal digits in num
   12916:	79fb      	ldrb	r3, [r7, #7]
   12918:	2b00      	cmp	r3, #0
   1291a:	d10a      	bne.n	12932 <num2hex+0x36>
		len = getNumLen(num, 16);
   1291c:	68b8      	ldr	r0, [r7, #8]
   1291e:	2110      	movs	r1, #16
   12920:	f7ff fe10 	bl	12544 <getNumLen>
   12924:	4603      	mov	r3, r0
   12926:	71fb      	strb	r3, [r7, #7]
		if(!len)
   12928:	79fb      	ldrb	r3, [r7, #7]
   1292a:	2b00      	cmp	r3, #0
   1292c:	d101      	bne.n	12932 <num2hex+0x36>
			len = 1;            //zero should be convertod to "0"
   1292e:	2301      	movs	r3, #1
   12930:	71fb      	strb	r3, [r7, #7]
	}

	ret = len;
   12932:	79fb      	ldrb	r3, [r7, #7]
   12934:	74fb      	strb	r3, [r7, #19]
	idx = len;
   12936:	79fb      	ldrb	r3, [r7, #7]
   12938:	74bb      	strb	r3, [r7, #18]
	hex[idx] = 0;
   1293a:	7cbb      	ldrb	r3, [r7, #18]
   1293c:	68fa      	ldr	r2, [r7, #12]
   1293e:	18d3      	adds	r3, r2, r3
   12940:	2200      	movs	r2, #0
   12942:	701a      	strb	r2, [r3, #0]
	while(idx--) {              //fill hex from right to left
   12944:	e026      	b.n	12994 <num2hex+0x98>
		hex[idx] = (byte) (num % 16);
   12946:	7cbb      	ldrb	r3, [r7, #18]
   12948:	68fa      	ldr	r2, [r7, #12]
   1294a:	18d3      	adds	r3, r2, r3
   1294c:	68ba      	ldr	r2, [r7, #8]
   1294e:	b2d2      	uxtb	r2, r2
   12950:	f002 020f 	and.w	r2, r2, #15
   12954:	b2d2      	uxtb	r2, r2
   12956:	701a      	strb	r2, [r3, #0]
		if(hex[idx] < 10)
   12958:	7cbb      	ldrb	r3, [r7, #18]
   1295a:	68fa      	ldr	r2, [r7, #12]
   1295c:	18d3      	adds	r3, r2, r3
   1295e:	781b      	ldrb	r3, [r3, #0]
   12960:	2b09      	cmp	r3, #9
   12962:	d80a      	bhi.n	1297a <num2hex+0x7e>
			hex[idx] += (char) '0';
   12964:	7cbb      	ldrb	r3, [r7, #18]
   12966:	68fa      	ldr	r2, [r7, #12]
   12968:	18d3      	adds	r3, r2, r3
   1296a:	7cba      	ldrb	r2, [r7, #18]
   1296c:	68f9      	ldr	r1, [r7, #12]
   1296e:	188a      	adds	r2, r1, r2
   12970:	7812      	ldrb	r2, [r2, #0]
   12972:	3230      	adds	r2, #48	; 0x30
   12974:	b2d2      	uxtb	r2, r2
   12976:	701a      	strb	r2, [r3, #0]
   12978:	e009      	b.n	1298e <num2hex+0x92>
		else
			hex[idx] += (char) ('A' - 10);
   1297a:	7cbb      	ldrb	r3, [r7, #18]
   1297c:	68fa      	ldr	r2, [r7, #12]
   1297e:	18d3      	adds	r3, r2, r3
   12980:	7cba      	ldrb	r2, [r7, #18]
   12982:	68f9      	ldr	r1, [r7, #12]
   12984:	188a      	adds	r2, r1, r2
   12986:	7812      	ldrb	r2, [r2, #0]
   12988:	3237      	adds	r2, #55	; 0x37
   1298a:	b2d2      	uxtb	r2, r2
   1298c:	701a      	strb	r2, [r3, #0]
		num /= 16;
   1298e:	68bb      	ldr	r3, [r7, #8]
   12990:	091b      	lsrs	r3, r3, #4
   12992:	60bb      	str	r3, [r7, #8]
	}

	ret = len;
	idx = len;
	hex[idx] = 0;
	while(idx--) {              //fill hex from right to left
   12994:	7cbb      	ldrb	r3, [r7, #18]
   12996:	2b00      	cmp	r3, #0
   12998:	bf0c      	ite	eq
   1299a:	2300      	moveq	r3, #0
   1299c:	2301      	movne	r3, #1
   1299e:	b2db      	uxtb	r3, r3
   129a0:	7cba      	ldrb	r2, [r7, #18]
   129a2:	3a01      	subs	r2, #1
   129a4:	74ba      	strb	r2, [r7, #18]
   129a6:	2b00      	cmp	r3, #0
   129a8:	d1cd      	bne.n	12946 <num2hex+0x4a>
			hex[idx] += (char) '0';
		else
			hex[idx] += (char) ('A' - 10);
		num /= 16;
	}
	CHECK(!num, lblKO);         //error: len is too small
   129aa:	68bb      	ldr	r3, [r7, #8]
   129ac:	2b00      	cmp	r3, #0
   129ae:	d101      	bne.n	129b4 <num2hex+0xb8>
	return ret;
   129b0:	7cfb      	ldrb	r3, [r7, #19]
   129b2:	e000      	b.n	129b6 <num2hex+0xba>
	lblKO:
	return 0;
   129b4:	2300      	movs	r3, #0
}
   129b6:	4618      	mov	r0, r3
   129b8:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   129bc:	f2c0 0302 	movt	r3, #2
   129c0:	697a      	ldr	r2, [r7, #20]
   129c2:	681b      	ldr	r3, [r3, #0]
   129c4:	429a      	cmp	r2, r3
   129c6:	d001      	beq.n	129cc <num2hex+0xd0>
   129c8:	f7f6 faec 	bl	8fa4 <__stack_chk_fail>
   129cc:	f107 0718 	add.w	r7, r7, #24
   129d0:	46bd      	mov	sp, r7
   129d2:	bd80      	pop	{r7, pc}

000129d4 <hex2num>:
 *    - 0 otherwise.
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0004.c
 */
byte hex2num(card * num, const char *hex, byte len) {
   129d4:	b580      	push	{r7, lr}
   129d6:	b086      	sub	sp, #24
   129d8:	af00      	add	r7, sp, #0
   129da:	60f8      	str	r0, [r7, #12]
   129dc:	60b9      	str	r1, [r7, #8]
   129de:	4613      	mov	r3, r2
   129e0:	71fb      	strb	r3, [r7, #7]
   129e2:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   129e6:	f2c0 0302 	movt	r3, #2
   129ea:	681b      	ldr	r3, [r3, #0]
   129ec:	617b      	str	r3, [r7, #20]

	VERIFY(num);
	VERIFY(hex);

	//normally len is the number of characters to get from source string
	if(!len)
   129ee:	79fb      	ldrb	r3, [r7, #7]
   129f0:	2b00      	cmp	r3, #0
   129f2:	d104      	bne.n	129fe <hex2num+0x2a>
		len = (byte) strlen(hex);   //calcualte length if missing
   129f4:	68b8      	ldr	r0, [r7, #8]
   129f6:	f7f6 e946 	blx	8c84 <_init+0x124>
   129fa:	4603      	mov	r3, r0
   129fc:	71fb      	strb	r3, [r7, #7]

	ret = 0;
   129fe:	2300      	movs	r3, #0
   12a00:	74bb      	strb	r3, [r7, #18]
	*num = 0;
   12a02:	68fb      	ldr	r3, [r7, #12]
   12a04:	2200      	movs	r2, #0
   12a06:	601a      	str	r2, [r3, #0]
	while((*hex == ' ') || (*hex == '\t')) {    //skip blank characters
   12a08:	e00b      	b.n	12a22 <hex2num+0x4e>
		hex++;
   12a0a:	68bb      	ldr	r3, [r7, #8]
   12a0c:	3301      	adds	r3, #1
   12a0e:	60bb      	str	r3, [r7, #8]
		ret++;
   12a10:	7cbb      	ldrb	r3, [r7, #18]
   12a12:	3301      	adds	r3, #1
   12a14:	74bb      	strb	r3, [r7, #18]
		CHECK(len, lblKO);      //the input is empty
   12a16:	79fb      	ldrb	r3, [r7, #7]
   12a18:	2b00      	cmp	r3, #0
   12a1a:	d042      	beq.n	12aa2 <hex2num+0xce>
		len--;
   12a1c:	79fb      	ldrb	r3, [r7, #7]
   12a1e:	3b01      	subs	r3, #1
   12a20:	71fb      	strb	r3, [r7, #7]
	if(!len)
		len = (byte) strlen(hex);   //calcualte length if missing

	ret = 0;
	*num = 0;
	while((*hex == ' ') || (*hex == '\t')) {    //skip blank characters
   12a22:	68bb      	ldr	r3, [r7, #8]
   12a24:	781b      	ldrb	r3, [r3, #0]
   12a26:	2b20      	cmp	r3, #32
   12a28:	d0ef      	beq.n	12a0a <hex2num+0x36>
   12a2a:	68bb      	ldr	r3, [r7, #8]
   12a2c:	781b      	ldrb	r3, [r3, #0]
   12a2e:	2b09      	cmp	r3, #9
   12a30:	d0eb      	beq.n	12a0a <hex2num+0x36>
		ret++;
		CHECK(len, lblKO);      //the input is empty
		len--;
	}

	while(*hex) {               //main loop: perform the conversion
   12a32:	e02e      	b.n	12a92 <hex2num+0xbe>
		tmp = chr2nib(*hex++);  //convert one more character
   12a34:	68bb      	ldr	r3, [r7, #8]
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	68ba      	ldr	r2, [r7, #8]
   12a3a:	3201      	adds	r2, #1
   12a3c:	60ba      	str	r2, [r7, #8]
   12a3e:	4618      	mov	r0, r3
   12a40:	f7ff fe0e 	bl	12660 <chr2nib>
   12a44:	4603      	mov	r3, r0
   12a46:	74fb      	strb	r3, [r7, #19]
		VERIFY(tmp <= 0x10);
		CHECK(tmp < 0x10, lblKO);   //validity check
   12a48:	7cfb      	ldrb	r3, [r7, #19]
   12a4a:	2b0f      	cmp	r3, #15
   12a4c:	d829      	bhi.n	12aa2 <hex2num+0xce>
		CHECK(*num < 0xFFFFFFFL, lblKO);    //is it too large?
   12a4e:	68fb      	ldr	r3, [r7, #12]
   12a50:	681a      	ldr	r2, [r3, #0]
   12a52:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   12a56:	f6c0 73ff 	movt	r3, #4095	; 0xfff
   12a5a:	429a      	cmp	r2, r3
   12a5c:	d821      	bhi.n	12aa2 <hex2num+0xce>
		*num *= 16;             //OK, we can shift it left
   12a5e:	68fb      	ldr	r3, [r7, #12]
   12a60:	681b      	ldr	r3, [r3, #0]
   12a62:	011a      	lsls	r2, r3, #4
   12a64:	68fb      	ldr	r3, [r7, #12]
   12a66:	601a      	str	r2, [r3, #0]
		CHECK(*num < 0xFFFFFFFFL - tmp, lblKO); //can we add one more digit?
   12a68:	68fb      	ldr	r3, [r7, #12]
   12a6a:	681a      	ldr	r2, [r3, #0]
   12a6c:	7cfb      	ldrb	r3, [r7, #19]
   12a6e:	43db      	mvns	r3, r3
   12a70:	429a      	cmp	r2, r3
   12a72:	d216      	bcs.n	12aa2 <hex2num+0xce>
		*num += tmp;            //OK, let us do it
   12a74:	68fb      	ldr	r3, [r7, #12]
   12a76:	681a      	ldr	r2, [r3, #0]
   12a78:	7cfb      	ldrb	r3, [r7, #19]
   12a7a:	18d2      	adds	r2, r2, r3
   12a7c:	68fb      	ldr	r3, [r7, #12]
   12a7e:	601a      	str	r2, [r3, #0]
		ret++;                  //one more digit processed
   12a80:	7cbb      	ldrb	r3, [r7, #18]
   12a82:	3301      	adds	r3, #1
   12a84:	74bb      	strb	r3, [r7, #18]
		len--;
   12a86:	79fb      	ldrb	r3, [r7, #7]
   12a88:	3b01      	subs	r3, #1
   12a8a:	71fb      	strb	r3, [r7, #7]
		if(!len)
   12a8c:	79fb      	ldrb	r3, [r7, #7]
   12a8e:	2b00      	cmp	r3, #0
   12a90:	d004      	beq.n	12a9c <hex2num+0xc8>
		ret++;
		CHECK(len, lblKO);      //the input is empty
		len--;
	}

	while(*hex) {               //main loop: perform the conversion
   12a92:	68bb      	ldr	r3, [r7, #8]
   12a94:	781b      	ldrb	r3, [r3, #0]
   12a96:	2b00      	cmp	r3, #0
   12a98:	d1cc      	bne.n	12a34 <hex2num+0x60>
   12a9a:	e000      	b.n	12a9e <hex2num+0xca>
		CHECK(*num < 0xFFFFFFFFL - tmp, lblKO); //can we add one more digit?
		*num += tmp;            //OK, let us do it
		ret++;                  //one more digit processed
		len--;
		if(!len)
			break;
   12a9c:	bf00      	nop
	}

	return ret;
   12a9e:	7cbb      	ldrb	r3, [r7, #18]
   12aa0:	e000      	b.n	12aa4 <hex2num+0xd0>
	lblKO:
	return 0;
   12aa2:	2300      	movs	r3, #0
}
   12aa4:	4618      	mov	r0, r3
   12aa6:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12aaa:	f2c0 0302 	movt	r3, #2
   12aae:	697a      	ldr	r2, [r7, #20]
   12ab0:	681b      	ldr	r3, [r3, #0]
   12ab2:	429a      	cmp	r2, r3
   12ab4:	d001      	beq.n	12aba <hex2num+0xe6>
   12ab6:	f7f6 fa75 	bl	8fa4 <__stack_chk_fail>
   12aba:	f107 0718 	add.w	r7, r7, #24
   12abe:	46bd      	mov	sp, r7
   12ac0:	bd80      	pop	{r7, pc}
   12ac2:	bf00      	nop

00012ac4 <bin2hex>:
 *    - strlen(hex). There is no possibility of errors: any input data are acceptable.
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0004.c
 */
int bin2hex(char *hex, const byte * bin, int len) {
   12ac4:	b580      	push	{r7, lr}
   12ac6:	b088      	sub	sp, #32
   12ac8:	af00      	add	r7, sp, #0
   12aca:	60f8      	str	r0, [r7, #12]
   12acc:	60b9      	str	r1, [r7, #8]
   12ace:	607a      	str	r2, [r7, #4]
   12ad0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12ad4:	f2c0 0302 	movt	r3, #2
   12ad8:	681b      	ldr	r3, [r3, #0]
   12ada:	61fb      	str	r3, [r7, #28]
	VERIFY(bin);
	VERIFY(len);

	//normally len is the number of characters to get from source string
	//if(!len) len= strlen((char *)bin); //is not allowed
	ret = len + len;            //each byte is converted into 2 characters
   12adc:	687a      	ldr	r2, [r7, #4]
   12ade:	687b      	ldr	r3, [r7, #4]
   12ae0:	18d3      	adds	r3, r2, r3
   12ae2:	61bb      	str	r3, [r7, #24]
	while(len--) {
   12ae4:	e020      	b.n	12b28 <bin2hex+0x64>
		tmp = *bin++;           //get a byte
   12ae6:	68bb      	ldr	r3, [r7, #8]
   12ae8:	781b      	ldrb	r3, [r3, #0]
   12aea:	75fb      	strb	r3, [r7, #23]
   12aec:	68bb      	ldr	r3, [r7, #8]
   12aee:	3301      	adds	r3, #1
   12af0:	60bb      	str	r3, [r7, #8]
		*hex++ = nib2chr((byte) (tmp / 16));    //convert first nibble
   12af2:	7dfb      	ldrb	r3, [r7, #23]
   12af4:	091b      	lsrs	r3, r3, #4
   12af6:	b2db      	uxtb	r3, r3
   12af8:	4618      	mov	r0, r3
   12afa:	f7ff fe4f 	bl	1279c <nib2chr>
   12afe:	4603      	mov	r3, r0
   12b00:	461a      	mov	r2, r3
   12b02:	68fb      	ldr	r3, [r7, #12]
   12b04:	701a      	strb	r2, [r3, #0]
   12b06:	68fb      	ldr	r3, [r7, #12]
   12b08:	3301      	adds	r3, #1
   12b0a:	60fb      	str	r3, [r7, #12]
		*hex++ = nib2chr((byte) (tmp % 16));    //convert second nibble
   12b0c:	7dfb      	ldrb	r3, [r7, #23]
   12b0e:	f003 030f 	and.w	r3, r3, #15
   12b12:	b2db      	uxtb	r3, r3
   12b14:	4618      	mov	r0, r3
   12b16:	f7ff fe41 	bl	1279c <nib2chr>
   12b1a:	4603      	mov	r3, r0
   12b1c:	461a      	mov	r2, r3
   12b1e:	68fb      	ldr	r3, [r7, #12]
   12b20:	701a      	strb	r2, [r3, #0]
   12b22:	68fb      	ldr	r3, [r7, #12]
   12b24:	3301      	adds	r3, #1
   12b26:	60fb      	str	r3, [r7, #12]
	VERIFY(len);

	//normally len is the number of characters to get from source string
	//if(!len) len= strlen((char *)bin); //is not allowed
	ret = len + len;            //each byte is converted into 2 characters
	while(len--) {
   12b28:	687b      	ldr	r3, [r7, #4]
   12b2a:	2b00      	cmp	r3, #0
   12b2c:	bf0c      	ite	eq
   12b2e:	2300      	moveq	r3, #0
   12b30:	2301      	movne	r3, #1
   12b32:	b2db      	uxtb	r3, r3
   12b34:	687a      	ldr	r2, [r7, #4]
   12b36:	3a01      	subs	r2, #1
   12b38:	607a      	str	r2, [r7, #4]
   12b3a:	2b00      	cmp	r3, #0
   12b3c:	d1d3      	bne.n	12ae6 <bin2hex+0x22>
		tmp = *bin++;           //get a byte
		*hex++ = nib2chr((byte) (tmp / 16));    //convert first nibble
		*hex++ = nib2chr((byte) (tmp % 16));    //convert second nibble
	}
	*hex = 0;
   12b3e:	68fb      	ldr	r3, [r7, #12]
   12b40:	2200      	movs	r2, #0
   12b42:	701a      	strb	r2, [r3, #0]
	return ret;
   12b44:	69bb      	ldr	r3, [r7, #24]
}
   12b46:	4618      	mov	r0, r3
   12b48:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12b4c:	f2c0 0302 	movt	r3, #2
   12b50:	69fa      	ldr	r2, [r7, #28]
   12b52:	681b      	ldr	r3, [r3, #0]
   12b54:	429a      	cmp	r2, r3
   12b56:	d001      	beq.n	12b5c <bin2hex+0x98>
   12b58:	f7f6 fa24 	bl	8fa4 <__stack_chk_fail>
   12b5c:	f107 0720 	add.w	r7, r7, #32
   12b60:	46bd      	mov	sp, r7
   12b62:	bd80      	pop	{r7, pc}

00012b64 <hex2bin>:
 *    - 0 otherwise.
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0004.c
 */
int hex2bin(byte * bin, const char *hex, int len) {
   12b64:	b580      	push	{r7, lr}
   12b66:	b088      	sub	sp, #32
   12b68:	af00      	add	r7, sp, #0
   12b6a:	60f8      	str	r0, [r7, #12]
   12b6c:	60b9      	str	r1, [r7, #8]
   12b6e:	607a      	str	r2, [r7, #4]
   12b70:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12b74:	f2c0 0302 	movt	r3, #2
   12b78:	681b      	ldr	r3, [r3, #0]
   12b7a:	61fb      	str	r3, [r7, #28]

	VERIFY(bin);
	VERIFY(hex);

	//if non-zero, len is the length of acceptor buffer bin
	if(!len) {                  //calcualte length if missing
   12b7c:	687b      	ldr	r3, [r7, #4]
   12b7e:	2b00      	cmp	r3, #0
   12b80:	d104      	bne.n	12b8c <hex2bin+0x28>
		len = strlen(hex);
   12b82:	68b8      	ldr	r0, [r7, #8]
   12b84:	f7f6 e87e 	blx	8c84 <_init+0x124>
   12b88:	4603      	mov	r3, r0
   12b8a:	607b      	str	r3, [r7, #4]
		//CHECK(len % 2 == 0, lblKO); //there should be 2 source characters for each output byte
		//len /= 2;
	}
	ret = 0;
   12b8c:	2300      	movs	r3, #0
   12b8e:	61bb      	str	r3, [r7, #24]
	while(len--) {
   12b90:	e02b      	b.n	12bea <hex2bin+0x86>
		tmp = chr2nib(*hex++);  //get first nibble
   12b92:	68bb      	ldr	r3, [r7, #8]
   12b94:	781b      	ldrb	r3, [r3, #0]
   12b96:	68ba      	ldr	r2, [r7, #8]
   12b98:	3201      	adds	r2, #1
   12b9a:	60ba      	str	r2, [r7, #8]
   12b9c:	4618      	mov	r0, r3
   12b9e:	f7ff fd5f 	bl	12660 <chr2nib>
   12ba2:	4603      	mov	r3, r0
   12ba4:	75fb      	strb	r3, [r7, #23]
		if(tmp >= 0x10)
   12ba6:	7dfb      	ldrb	r3, [r7, #23]
   12ba8:	2b0f      	cmp	r3, #15
   12baa:	d82a      	bhi.n	12c02 <hex2bin+0x9e>
			break;
		*bin = (byte) (tmp << 4);
   12bac:	7dfb      	ldrb	r3, [r7, #23]
   12bae:	011b      	lsls	r3, r3, #4
   12bb0:	b2da      	uxtb	r2, r3
   12bb2:	68fb      	ldr	r3, [r7, #12]
   12bb4:	701a      	strb	r2, [r3, #0]

		tmp = chr2nib(*hex++);  //get second nibble
   12bb6:	68bb      	ldr	r3, [r7, #8]
   12bb8:	781b      	ldrb	r3, [r3, #0]
   12bba:	68ba      	ldr	r2, [r7, #8]
   12bbc:	3201      	adds	r2, #1
   12bbe:	60ba      	str	r2, [r7, #8]
   12bc0:	4618      	mov	r0, r3
   12bc2:	f7ff fd4d 	bl	12660 <chr2nib>
   12bc6:	4603      	mov	r3, r0
   12bc8:	75fb      	strb	r3, [r7, #23]
		CHECK(tmp < 0x10, lblKO);
   12bca:	7dfb      	ldrb	r3, [r7, #23]
   12bcc:	2b0f      	cmp	r3, #15
   12bce:	d81b      	bhi.n	12c08 <hex2bin+0xa4>
		*bin |= tmp;
   12bd0:	68fb      	ldr	r3, [r7, #12]
   12bd2:	781a      	ldrb	r2, [r3, #0]
   12bd4:	7dfb      	ldrb	r3, [r7, #23]
   12bd6:	4313      	orrs	r3, r2
   12bd8:	b2da      	uxtb	r2, r3
   12bda:	68fb      	ldr	r3, [r7, #12]
   12bdc:	701a      	strb	r2, [r3, #0]

		bin++;
   12bde:	68fb      	ldr	r3, [r7, #12]
   12be0:	3301      	adds	r3, #1
   12be2:	60fb      	str	r3, [r7, #12]
		ret++;
   12be4:	69bb      	ldr	r3, [r7, #24]
   12be6:	3301      	adds	r3, #1
   12be8:	61bb      	str	r3, [r7, #24]
		len = strlen(hex);
		//CHECK(len % 2 == 0, lblKO); //there should be 2 source characters for each output byte
		//len /= 2;
	}
	ret = 0;
	while(len--) {
   12bea:	687b      	ldr	r3, [r7, #4]
   12bec:	2b00      	cmp	r3, #0
   12bee:	bf0c      	ite	eq
   12bf0:	2300      	moveq	r3, #0
   12bf2:	2301      	movne	r3, #1
   12bf4:	b2db      	uxtb	r3, r3
   12bf6:	687a      	ldr	r2, [r7, #4]
   12bf8:	3a01      	subs	r2, #1
   12bfa:	607a      	str	r2, [r7, #4]
   12bfc:	2b00      	cmp	r3, #0
   12bfe:	d1c8      	bne.n	12b92 <hex2bin+0x2e>
   12c00:	e000      	b.n	12c04 <hex2bin+0xa0>
		tmp = chr2nib(*hex++);  //get first nibble
		if(tmp >= 0x10)
			break;
   12c02:	bf00      	nop
		*bin |= tmp;

		bin++;
		ret++;
	}
	return ret;
   12c04:	69bb      	ldr	r3, [r7, #24]
   12c06:	e000      	b.n	12c0a <hex2bin+0xa6>
	lblKO:
	return 0;
   12c08:	2300      	movs	r3, #0
}
   12c0a:	4618      	mov	r0, r3
   12c0c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12c10:	f2c0 0302 	movt	r3, #2
   12c14:	69fa      	ldr	r2, [r7, #28]
   12c16:	681b      	ldr	r3, [r3, #0]
   12c18:	429a      	cmp	r2, r3
   12c1a:	d001      	beq.n	12c20 <hex2bin+0xbc>
   12c1c:	f7f6 f9c2 	bl	8fa4 <__stack_chk_fail>
   12c20:	f107 0720 	add.w	r7, r7, #32
   12c24:	46bd      	mov	sp, r7
   12c26:	bd80      	pop	{r7, pc}

00012c28 <Hex2Text>:
 *        - hex contains an invalid character (non-hexadecimal digit).
 * \return
 *    - number of bytes written into bin if OK.
 *    - 0 otherwise.
 */
int Hex2Text(char * Text, const char *hex, int len) {
   12c28:	b580      	push	{r7, lr}
   12c2a:	b092      	sub	sp, #72	; 0x48
   12c2c:	af00      	add	r7, sp, #0
   12c2e:	60f8      	str	r0, [r7, #12]
   12c30:	60b9      	str	r1, [r7, #8]
   12c32:	607a      	str	r2, [r7, #4]
   12c34:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12c38:	f2c0 0302 	movt	r3, #2
   12c3c:	681b      	ldr	r3, [r3, #0]
   12c3e:	647b      	str	r3, [r7, #68]	; 0x44
	int var = 0;
   12c40:	2300      	movs	r3, #0
   12c42:	613b      	str	r3, [r7, #16]
	int length = 0;
   12c44:	2300      	movs	r3, #0
   12c46:	617b      	str	r3, [r7, #20]
	byte binaryData[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, };
   12c48:	f107 0318 	add.w	r3, r7, #24
   12c4c:	2200      	movs	r2, #0
   12c4e:	601a      	str	r2, [r3, #0]
   12c50:	3304      	adds	r3, #4
   12c52:	2200      	movs	r2, #0
   12c54:	601a      	str	r2, [r3, #0]
   12c56:	3304      	adds	r3, #4
   12c58:	2200      	movs	r2, #0
   12c5a:	601a      	str	r2, [r3, #0]
   12c5c:	3304      	adds	r3, #4
   12c5e:	2200      	movs	r2, #0
   12c60:	601a      	str	r2, [r3, #0]
   12c62:	3304      	adds	r3, #4
   12c64:	2200      	movs	r2, #0
   12c66:	601a      	str	r2, [r3, #0]
   12c68:	3304      	adds	r3, #4
   12c6a:	2200      	movs	r2, #0
   12c6c:	601a      	str	r2, [r3, #0]
   12c6e:	3304      	adds	r3, #4
   12c70:	2200      	movs	r2, #0
   12c72:	601a      	str	r2, [r3, #0]
   12c74:	3304      	adds	r3, #4
   12c76:	2200      	movs	r2, #0
   12c78:	601a      	str	r2, [r3, #0]
   12c7a:	3304      	adds	r3, #4
   12c7c:	2200      	movs	r2, #0
   12c7e:	601a      	str	r2, [r3, #0]
   12c80:	3304      	adds	r3, #4
   12c82:	2200      	movs	r2, #0
   12c84:	601a      	str	r2, [r3, #0]
   12c86:	3304      	adds	r3, #4
   12c88:	2200      	movs	r2, #0
   12c8a:	601a      	str	r2, [r3, #0]
   12c8c:	3304      	adds	r3, #4

	if (len == 0)
   12c8e:	687b      	ldr	r3, [r7, #4]
   12c90:	2b00      	cmp	r3, #0
   12c92:	d105      	bne.n	12ca0 <Hex2Text+0x78>
		length = strlen(hex);
   12c94:	68b8      	ldr	r0, [r7, #8]
   12c96:	f7f5 eff6 	blx	8c84 <_init+0x124>
   12c9a:	4603      	mov	r3, r0
   12c9c:	617b      	str	r3, [r7, #20]
   12c9e:	e001      	b.n	12ca4 <Hex2Text+0x7c>
	else {
		length = len;
   12ca0:	687b      	ldr	r3, [r7, #4]
   12ca2:	617b      	str	r3, [r7, #20]
	}

	hex2bin(binaryData, hex, (length / 2));
   12ca4:	697b      	ldr	r3, [r7, #20]
   12ca6:	2b00      	cmp	r3, #0
   12ca8:	da00      	bge.n	12cac <Hex2Text+0x84>
   12caa:	3301      	adds	r3, #1
   12cac:	105b      	asrs	r3, r3, #1
   12cae:	f107 0218 	add.w	r2, r7, #24
   12cb2:	4610      	mov	r0, r2
   12cb4:	68b9      	ldr	r1, [r7, #8]
   12cb6:	461a      	mov	r2, r3
   12cb8:	f7ff ff54 	bl	12b64 <hex2bin>
	for (var = 0; var < (length / 2); var++) {
   12cbc:	2300      	movs	r3, #0
   12cbe:	613b      	str	r3, [r7, #16]
   12cc0:	e012      	b.n	12ce8 <Hex2Text+0xc0>
		Telium_Sprintf(&Text[var],"%c",binaryData[var]);
   12cc2:	693b      	ldr	r3, [r7, #16]
   12cc4:	68fa      	ldr	r2, [r7, #12]
   12cc6:	18d2      	adds	r2, r2, r3
   12cc8:	f107 0118 	add.w	r1, r7, #24
   12ccc:	693b      	ldr	r3, [r7, #16]
   12cce:	18cb      	adds	r3, r1, r3
   12cd0:	781b      	ldrb	r3, [r3, #0]
   12cd2:	4610      	mov	r0, r2
   12cd4:	f244 71e8 	movw	r1, #18408	; 0x47e8
   12cd8:	f2c0 0102 	movt	r1, #2
   12cdc:	461a      	mov	r2, r3
   12cde:	f00d fced 	bl	206bc <Telium_Sprintf>
	else {
		length = len;
	}

	hex2bin(binaryData, hex, (length / 2));
	for (var = 0; var < (length / 2); var++) {
   12ce2:	693b      	ldr	r3, [r7, #16]
   12ce4:	3301      	adds	r3, #1
   12ce6:	613b      	str	r3, [r7, #16]
   12ce8:	697b      	ldr	r3, [r7, #20]
   12cea:	2b00      	cmp	r3, #0
   12cec:	da00      	bge.n	12cf0 <Hex2Text+0xc8>
   12cee:	3301      	adds	r3, #1
   12cf0:	105b      	asrs	r3, r3, #1
   12cf2:	461a      	mov	r2, r3
   12cf4:	693b      	ldr	r3, [r7, #16]
   12cf6:	429a      	cmp	r2, r3
   12cf8:	dce3      	bgt.n	12cc2 <Hex2Text+0x9a>
		Telium_Sprintf(&Text[var],"%c",binaryData[var]);
	}

	return var;
   12cfa:	693b      	ldr	r3, [r7, #16]
}
   12cfc:	4618      	mov	r0, r3
   12cfe:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12d02:	f2c0 0302 	movt	r3, #2
   12d06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   12d08:	681b      	ldr	r3, [r3, #0]
   12d0a:	429a      	cmp	r2, r3
   12d0c:	d001      	beq.n	12d12 <Hex2Text+0xea>
   12d0e:	f7f6 f949 	bl	8fa4 <__stack_chk_fail>
   12d12:	f107 0748 	add.w	r7, r7, #72	; 0x48
   12d16:	46bd      	mov	sp, r7
   12d18:	bd80      	pop	{r7, pc}
   12d1a:	bf00      	nop

00012d1c <bin2num>:
 *    - len. There is no possibility of errors: any input data are acceptable.
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0004.c
 */
byte bin2num(card * num, const byte * bin, byte len) {
   12d1c:	b580      	push	{r7, lr}
   12d1e:	b086      	sub	sp, #24
   12d20:	af00      	add	r7, sp, #0
   12d22:	60f8      	str	r0, [r7, #12]
   12d24:	60b9      	str	r1, [r7, #8]
   12d26:	4613      	mov	r3, r2
   12d28:	71fb      	strb	r3, [r7, #7]
   12d2a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12d2e:	f2c0 0302 	movt	r3, #2
   12d32:	681b      	ldr	r3, [r3, #0]
   12d34:	617b      	str	r3, [r7, #20]
	VERIFY(bin);
	VERIFY(len);                //there is no way to calculate default value of len
	VERIFY(len <= 4);

	//len is the number of characters to get from source string
	ret = len;
   12d36:	79fb      	ldrb	r3, [r7, #7]
   12d38:	74fb      	strb	r3, [r7, #19]
	*num = 0;
   12d3a:	68fb      	ldr	r3, [r7, #12]
   12d3c:	2200      	movs	r2, #0
   12d3e:	601a      	str	r2, [r3, #0]
	while(len--) {
   12d40:	e00e      	b.n	12d60 <bin2num+0x44>
		*num *= 256;
   12d42:	68fb      	ldr	r3, [r7, #12]
   12d44:	681b      	ldr	r3, [r3, #0]
   12d46:	021a      	lsls	r2, r3, #8
   12d48:	68fb      	ldr	r3, [r7, #12]
   12d4a:	601a      	str	r2, [r3, #0]
		*num += *bin++;
   12d4c:	68fb      	ldr	r3, [r7, #12]
   12d4e:	681a      	ldr	r2, [r3, #0]
   12d50:	68bb      	ldr	r3, [r7, #8]
   12d52:	781b      	ldrb	r3, [r3, #0]
   12d54:	18d2      	adds	r2, r2, r3
   12d56:	68fb      	ldr	r3, [r7, #12]
   12d58:	601a      	str	r2, [r3, #0]
   12d5a:	68bb      	ldr	r3, [r7, #8]
   12d5c:	3301      	adds	r3, #1
   12d5e:	60bb      	str	r3, [r7, #8]
	VERIFY(len <= 4);

	//len is the number of characters to get from source string
	ret = len;
	*num = 0;
	while(len--) {
   12d60:	79fb      	ldrb	r3, [r7, #7]
   12d62:	2b00      	cmp	r3, #0
   12d64:	bf0c      	ite	eq
   12d66:	2300      	moveq	r3, #0
   12d68:	2301      	movne	r3, #1
   12d6a:	b2db      	uxtb	r3, r3
   12d6c:	79fa      	ldrb	r2, [r7, #7]
   12d6e:	3a01      	subs	r2, #1
   12d70:	71fa      	strb	r2, [r7, #7]
   12d72:	2b00      	cmp	r3, #0
   12d74:	d1e5      	bne.n	12d42 <bin2num+0x26>
		*num *= 256;
		*num += *bin++;
	}
	return ret;
   12d76:	7cfb      	ldrb	r3, [r7, #19]
}
   12d78:	4618      	mov	r0, r3
   12d7a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12d7e:	f2c0 0302 	movt	r3, #2
   12d82:	697a      	ldr	r2, [r7, #20]
   12d84:	681b      	ldr	r3, [r3, #0]
   12d86:	429a      	cmp	r2, r3
   12d88:	d001      	beq.n	12d8e <bin2num+0x72>
   12d8a:	f7f6 f90b 	bl	8fa4 <__stack_chk_fail>
   12d8e:	f107 0718 	add.w	r7, r7, #24
   12d92:	46bd      	mov	sp, r7
   12d94:	bd80      	pop	{r7, pc}
   12d96:	bf00      	nop

00012d98 <num2bin>:
 *    - 0 otherwise.
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0004.c
 */
byte num2bin(byte * bin, card num, byte len) {
   12d98:	b580      	push	{r7, lr}
   12d9a:	b086      	sub	sp, #24
   12d9c:	af00      	add	r7, sp, #0
   12d9e:	60f8      	str	r0, [r7, #12]
   12da0:	60b9      	str	r1, [r7, #8]
   12da2:	4613      	mov	r3, r2
   12da4:	71fb      	strb	r3, [r7, #7]
   12da6:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12daa:	f2c0 0302 	movt	r3, #2
   12dae:	681b      	ldr	r3, [r3, #0]
   12db0:	617b      	str	r3, [r7, #20]
	VERIFY(bin);
	VERIFY(len);                //there is no way to calculate default value of len
	VERIFY(len <= 4);

	//len is the length of acceptor buffer bib
	ret = len;
   12db2:	79fb      	ldrb	r3, [r7, #7]
   12db4:	74fb      	strb	r3, [r7, #19]
	while(len--) {              //fill bin from right to left in direct order
   12db6:	e008      	b.n	12dca <num2bin+0x32>
		bin[len] = (byte) (num % 256);
   12db8:	79fb      	ldrb	r3, [r7, #7]
   12dba:	68fa      	ldr	r2, [r7, #12]
   12dbc:	18d3      	adds	r3, r2, r3
   12dbe:	68ba      	ldr	r2, [r7, #8]
   12dc0:	b2d2      	uxtb	r2, r2
   12dc2:	701a      	strb	r2, [r3, #0]
		num /= 256;
   12dc4:	68bb      	ldr	r3, [r7, #8]
   12dc6:	0a1b      	lsrs	r3, r3, #8
   12dc8:	60bb      	str	r3, [r7, #8]
	VERIFY(len);                //there is no way to calculate default value of len
	VERIFY(len <= 4);

	//len is the length of acceptor buffer bib
	ret = len;
	while(len--) {              //fill bin from right to left in direct order
   12dca:	79fb      	ldrb	r3, [r7, #7]
   12dcc:	2b00      	cmp	r3, #0
   12dce:	bf0c      	ite	eq
   12dd0:	2300      	moveq	r3, #0
   12dd2:	2301      	movne	r3, #1
   12dd4:	b2db      	uxtb	r3, r3
   12dd6:	79fa      	ldrb	r2, [r7, #7]
   12dd8:	3a01      	subs	r2, #1
   12dda:	71fa      	strb	r2, [r7, #7]
   12ddc:	2b00      	cmp	r3, #0
   12dde:	d1eb      	bne.n	12db8 <num2bin+0x20>
		bin[len] = (byte) (num % 256);
		num /= 256;
	}
	CHECK(!num, lblKO);         //error: len is too small
   12de0:	68bb      	ldr	r3, [r7, #8]
   12de2:	2b00      	cmp	r3, #0
   12de4:	d101      	bne.n	12dea <num2bin+0x52>
	return ret;
   12de6:	7cfb      	ldrb	r3, [r7, #19]
   12de8:	e000      	b.n	12dec <num2bin+0x54>
	lblKO:
	return 0;
   12dea:	2300      	movs	r3, #0
}
   12dec:	4618      	mov	r0, r3
   12dee:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12df2:	f2c0 0302 	movt	r3, #2
   12df6:	697a      	ldr	r2, [r7, #20]
   12df8:	681b      	ldr	r3, [r3, #0]
   12dfa:	429a      	cmp	r2, r3
   12dfc:	d001      	beq.n	12e02 <num2bin+0x6a>
   12dfe:	f7f6 f8d1 	bl	8fa4 <__stack_chk_fail>
   12e02:	f107 0718 	add.w	r7, r7, #24
   12e06:	46bd      	mov	sp, r7
   12e08:	bd80      	pop	{r7, pc}
   12e0a:	bf00      	nop

00012e0c <tmrStart>:
 * \return non-negative value if OK; negative otherwise
 * \header sys\\sys.h
 * \source sys\\i32.c sys\\tlm.c
 * \test tcab0001.c
 */
int tmrStart(byte tmr, int dly) {
   12e0c:	b580      	push	{r7, lr}
   12e0e:	b086      	sub	sp, #24
   12e10:	af00      	add	r7, sp, #0
   12e12:	4603      	mov	r3, r0
   12e14:	6039      	str	r1, [r7, #0]
   12e16:	71fb      	strb	r3, [r7, #7]
   12e18:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12e1c:	f2c0 0302 	movt	r3, #2
   12e20:	681b      	ldr	r3, [r3, #0]
   12e22:	617b      	str	r3, [r7, #20]
	tTimer cnt;

	VERIFY(tmr < tmrN);

	/* Get the current timer value */
	cnt.hi = 0;
   12e24:	2300      	movs	r3, #0
   12e26:	60fb      	str	r3, [r7, #12]
	//    cnt.lo = get_tick_counter();    // In 10ms ticks.
	cnt.lo = GTL_StdTimer_GetCurrent();
   12e28:	f00f f902 	bl	22030 <GTL_StdTimer_GetCurrent>
   12e2c:	4603      	mov	r3, r0
   12e2e:	613b      	str	r3, [r7, #16]

	/* Set the timer a 'period' into the future */
	cnt.lo += dly;
   12e30:	693a      	ldr	r2, [r7, #16]
   12e32:	683b      	ldr	r3, [r7, #0]
   12e34:	18d3      	adds	r3, r2, r3
   12e36:	613b      	str	r3, [r7, #16]

	/* If an overflow occurs, adjust the high tick counter */
	//if ((unsigned int)dly > (0xffffffffL - cnt.lo))
	if(cnt.lo < (card) dly)
   12e38:	693a      	ldr	r2, [r7, #16]
   12e3a:	683b      	ldr	r3, [r7, #0]
   12e3c:	429a      	cmp	r2, r3
   12e3e:	d202      	bcs.n	12e46 <tmrStart+0x3a>
		(cnt.hi)++;
   12e40:	68fb      	ldr	r3, [r7, #12]
   12e42:	3301      	adds	r3, #1
   12e44:	60fb      	str	r3, [r7, #12]

	/* Assign it to the proper timer */
	timer[tmr].hi = cnt.hi;
   12e46:	79fa      	ldrb	r2, [r7, #7]
   12e48:	68f9      	ldr	r1, [r7, #12]
   12e4a:	f64f 73a8 	movw	r3, #65448	; 0xffa8
   12e4e:	f2c0 0302 	movt	r3, #2
   12e52:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	timer[tmr].lo = cnt.lo;
   12e56:	79fb      	ldrb	r3, [r7, #7]
   12e58:	6939      	ldr	r1, [r7, #16]
   12e5a:	f64f 72a8 	movw	r2, #65448	; 0xffa8
   12e5e:	f2c0 0202 	movt	r2, #2
   12e62:	00db      	lsls	r3, r3, #3
   12e64:	18d3      	adds	r3, r2, r3
   12e66:	6059      	str	r1, [r3, #4]

	return dly;
   12e68:	683b      	ldr	r3, [r7, #0]
}
   12e6a:	4618      	mov	r0, r3
   12e6c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12e70:	f2c0 0302 	movt	r3, #2
   12e74:	697a      	ldr	r2, [r7, #20]
   12e76:	681b      	ldr	r3, [r3, #0]
   12e78:	429a      	cmp	r2, r3
   12e7a:	d001      	beq.n	12e80 <tmrStart+0x74>
   12e7c:	f7f6 f892 	bl	8fa4 <__stack_chk_fail>
   12e80:	f107 0718 	add.w	r7, r7, #24
   12e84:	46bd      	mov	sp, r7
   12e86:	bd80      	pop	{r7, pc}

00012e88 <tmrGet>:
 *    - otherwise the number of centiseconds rest.
 * \header sys\\sys.h
 * \source sys\\i32.c sys\\tlm.c
 * \test tcab0001.c
 */
int tmrGet(byte tmr) {
   12e88:	b580      	push	{r7, lr}
   12e8a:	b086      	sub	sp, #24
   12e8c:	af00      	add	r7, sp, #0
   12e8e:	4603      	mov	r3, r0
   12e90:	71fb      	strb	r3, [r7, #7]
   12e92:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12e96:	f2c0 0302 	movt	r3, #2
   12e9a:	681b      	ldr	r3, [r3, #0]
   12e9c:	617b      	str	r3, [r7, #20]
	tTimer cnt;

	VERIFY(tmr < 4);

	/* Get the new time */
	cnt.hi = timer[tmr].hi;
   12e9e:	79fa      	ldrb	r2, [r7, #7]
   12ea0:	f64f 73a8 	movw	r3, #65448	; 0xffa8
   12ea4:	f2c0 0302 	movt	r3, #2
   12ea8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   12eac:	60fb      	str	r3, [r7, #12]
	cnt.lo = timer[tmr].lo;
   12eae:	79fb      	ldrb	r3, [r7, #7]
   12eb0:	f64f 72a8 	movw	r2, #65448	; 0xffa8
   12eb4:	f2c0 0202 	movt	r2, #2
   12eb8:	00db      	lsls	r3, r3, #3
   12eba:	18d3      	adds	r3, r2, r3
   12ebc:	685b      	ldr	r3, [r3, #4]
   12ebe:	613b      	str	r3, [r7, #16]

	lo = GTL_StdTimer_GetCurrent();  //telium_get_tick_counter() ;    // In 10ms ticks.
   12ec0:	f00f f8b6 	bl	22030 <GTL_StdTimer_GetCurrent>
   12ec4:	60b8      	str	r0, [r7, #8]

	if(lo < cnt.lo)
   12ec6:	693a      	ldr	r2, [r7, #16]
   12ec8:	68bb      	ldr	r3, [r7, #8]
   12eca:	429a      	cmp	r2, r3
   12ecc:	d903      	bls.n	12ed6 <tmrGet+0x4e>
		return (cnt.lo - lo);
   12ece:	693a      	ldr	r2, [r7, #16]
   12ed0:	68bb      	ldr	r3, [r7, #8]
   12ed2:	1ad3      	subs	r3, r2, r3
   12ed4:	e000      	b.n	12ed8 <tmrGet+0x50>
	return 0;
   12ed6:	2300      	movs	r3, #0
}
   12ed8:	4618      	mov	r0, r3
   12eda:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12ede:	f2c0 0302 	movt	r3, #2
   12ee2:	697a      	ldr	r2, [r7, #20]
   12ee4:	681b      	ldr	r3, [r3, #0]
   12ee6:	429a      	cmp	r2, r3
   12ee8:	d001      	beq.n	12eee <tmrGet+0x66>
   12eea:	f7f6 f85b 	bl	8fa4 <__stack_chk_fail>
   12eee:	f107 0718 	add.w	r7, r7, #24
   12ef2:	46bd      	mov	sp, r7
   12ef4:	bd80      	pop	{r7, pc}
   12ef6:	bf00      	nop

00012ef8 <tmrStop>:
 * \return no
 * \header sys\\sys.h
 * \source sys\\i32.c sys\\tlm.c
 * \test tcab0001.c
 */
void tmrStop(byte tmr) {
   12ef8:	b580      	push	{r7, lr}
   12efa:	b084      	sub	sp, #16
   12efc:	af00      	add	r7, sp, #0
   12efe:	4603      	mov	r3, r0
   12f00:	71fb      	strb	r3, [r7, #7]
   12f02:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12f06:	f2c0 0302 	movt	r3, #2
   12f0a:	681b      	ldr	r3, [r3, #0]
   12f0c:	60fb      	str	r3, [r7, #12]
	VERIFY(tmr < 4);
	timer[tmr].hi = 0;
   12f0e:	79fa      	ldrb	r2, [r7, #7]
   12f10:	f64f 73a8 	movw	r3, #65448	; 0xffa8
   12f14:	f2c0 0302 	movt	r3, #2
   12f18:	2100      	movs	r1, #0
   12f1a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	timer[tmr].lo = 0;
   12f1e:	79fb      	ldrb	r3, [r7, #7]
   12f20:	f64f 72a8 	movw	r2, #65448	; 0xffa8
   12f24:	f2c0 0202 	movt	r2, #2
   12f28:	00db      	lsls	r3, r3, #3
   12f2a:	18d3      	adds	r3, r2, r3
   12f2c:	2200      	movs	r2, #0
   12f2e:	605a      	str	r2, [r3, #4]
}
   12f30:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12f34:	f2c0 0302 	movt	r3, #2
   12f38:	68fa      	ldr	r2, [r7, #12]
   12f3a:	681b      	ldr	r3, [r3, #0]
   12f3c:	429a      	cmp	r2, r3
   12f3e:	d001      	beq.n	12f44 <tmrStop+0x4c>
   12f40:	f7f6 f830 	bl	8fa4 <__stack_chk_fail>
   12f44:	f107 0710 	add.w	r7, r7, #16
   12f48:	46bd      	mov	sp, r7
   12f4a:	bd80      	pop	{r7, pc}

00012f4c <tmrPause>:

void tmrPause(byte sec) {
   12f4c:	b580      	push	{r7, lr}
   12f4e:	b084      	sub	sp, #16
   12f50:	af00      	add	r7, sp, #0
   12f52:	4603      	mov	r3, r0
   12f54:	71fb      	strb	r3, [r7, #7]
   12f56:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12f5a:	f2c0 0302 	movt	r3, #2
   12f5e:	681b      	ldr	r3, [r3, #0]
   12f60:	60fb      	str	r3, [r7, #12]
	tmrStart(0, sec * 100);     //start 0th timer for sec seconds
   12f62:	79fb      	ldrb	r3, [r7, #7]
   12f64:	2264      	movs	r2, #100	; 0x64
   12f66:	fb02 f303 	mul.w	r3, r2, r3
   12f6a:	2000      	movs	r0, #0
   12f6c:	4619      	mov	r1, r3
   12f6e:	f7ff ff4d 	bl	12e0c <tmrStart>
	while(tmrGet(0));           //wait until the 0th timer stops
   12f72:	bf00      	nop
   12f74:	2000      	movs	r0, #0
   12f76:	f7ff ff87 	bl	12e88 <tmrGet>
   12f7a:	4603      	mov	r3, r0
   12f7c:	2b00      	cmp	r3, #0
   12f7e:	d1f9      	bne.n	12f74 <tmrPause+0x28>
	tmrStop(0);                 //close the 0th timer
   12f80:	2000      	movs	r0, #0
   12f82:	f7ff ffb9 	bl	12ef8 <tmrStop>
}
   12f86:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12f8a:	f2c0 0302 	movt	r3, #2
   12f8e:	68fa      	ldr	r2, [r7, #12]
   12f90:	681b      	ldr	r3, [r3, #0]
   12f92:	429a      	cmp	r2, r3
   12f94:	d001      	beq.n	12f9a <tmrPause+0x4e>
   12f96:	f7f6 f805 	bl	8fa4 <__stack_chk_fail>
   12f9a:	f107 0710 	add.w	r7, r7, #16
   12f9e:	46bd      	mov	sp, r7
   12fa0:	bd80      	pop	{r7, pc}
   12fa2:	bf00      	nop

00012fa4 <bufReset>:
 * \return N/A
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0009.c
 **/
void bufReset(tBuffer * buf) {
   12fa4:	b580      	push	{r7, lr}
   12fa6:	b084      	sub	sp, #16
   12fa8:	af00      	add	r7, sp, #0
   12faa:	6078      	str	r0, [r7, #4]
   12fac:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12fb0:	f2c0 0302 	movt	r3, #2
   12fb4:	681b      	ldr	r3, [r3, #0]
   12fb6:	60fb      	str	r3, [r7, #12]
	VERIFY(buf);
	VERIFY(buf->ptr);
	VERIFY(buf->dim);

	memset(buf->ptr, 0, buf->dim);
   12fb8:	687b      	ldr	r3, [r7, #4]
   12fba:	681a      	ldr	r2, [r3, #0]
   12fbc:	687b      	ldr	r3, [r7, #4]
   12fbe:	889b      	ldrh	r3, [r3, #4]
   12fc0:	4610      	mov	r0, r2
   12fc2:	2100      	movs	r1, #0
   12fc4:	461a      	mov	r2, r3
   12fc6:	f7f5 edfa 	blx	8bbc <_init+0x5c>
	buf->pos = 0;
   12fca:	687b      	ldr	r3, [r7, #4]
   12fcc:	2200      	movs	r2, #0
   12fce:	80da      	strh	r2, [r3, #6]
}
   12fd0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12fd4:	f2c0 0302 	movt	r3, #2
   12fd8:	68fa      	ldr	r2, [r7, #12]
   12fda:	681b      	ldr	r3, [r3, #0]
   12fdc:	429a      	cmp	r2, r3
   12fde:	d001      	beq.n	12fe4 <bufReset+0x40>
   12fe0:	f7f5 ffe0 	bl	8fa4 <__stack_chk_fail>
   12fe4:	f107 0710 	add.w	r7, r7, #16
   12fe8:	46bd      	mov	sp, r7
   12fea:	bd80      	pop	{r7, pc}

00012fec <bufInit>:
 * \return N/A
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0009.c
 */
void bufInit(tBuffer * buf, byte * ptr, word dim) {
   12fec:	b580      	push	{r7, lr}
   12fee:	b086      	sub	sp, #24
   12ff0:	af00      	add	r7, sp, #0
   12ff2:	60f8      	str	r0, [r7, #12]
   12ff4:	60b9      	str	r1, [r7, #8]
   12ff6:	4613      	mov	r3, r2
   12ff8:	80fb      	strh	r3, [r7, #6]
   12ffa:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   12ffe:	f2c0 0302 	movt	r3, #2
   13002:	681b      	ldr	r3, [r3, #0]
   13004:	617b      	str	r3, [r7, #20]
	VERIFY(buf);
	VERIFY(ptr);
	VERIFY(dim);
	buf->ptr = ptr;
   13006:	68fb      	ldr	r3, [r7, #12]
   13008:	68ba      	ldr	r2, [r7, #8]
   1300a:	601a      	str	r2, [r3, #0]
	buf->dim = dim;
   1300c:	68fb      	ldr	r3, [r7, #12]
   1300e:	88fa      	ldrh	r2, [r7, #6]
   13010:	809a      	strh	r2, [r3, #4]
	buf->pos = 0;
   13012:	68fb      	ldr	r3, [r7, #12]
   13014:	2200      	movs	r2, #0
   13016:	80da      	strh	r2, [r3, #6]

	bufReset(buf);
   13018:	68f8      	ldr	r0, [r7, #12]
   1301a:	f7ff ffc3 	bl	12fa4 <bufReset>
}
   1301e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13022:	f2c0 0302 	movt	r3, #2
   13026:	697a      	ldr	r2, [r7, #20]
   13028:	681b      	ldr	r3, [r3, #0]
   1302a:	429a      	cmp	r2, r3
   1302c:	d001      	beq.n	13032 <bufInit+0x46>
   1302e:	f7f5 ffb9 	bl	8fa4 <__stack_chk_fail>
   13032:	f107 0718 	add.w	r7, r7, #24
   13036:	46bd      	mov	sp, r7
   13038:	bd80      	pop	{r7, pc}
   1303a:	bf00      	nop

0001303c <bufDim>:
 * \return buffer dimension
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0009.c
 */
word bufDim(const tBuffer * buf) {
   1303c:	b580      	push	{r7, lr}
   1303e:	b084      	sub	sp, #16
   13040:	af00      	add	r7, sp, #0
   13042:	6078      	str	r0, [r7, #4]
   13044:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13048:	f2c0 0302 	movt	r3, #2
   1304c:	681b      	ldr	r3, [r3, #0]
   1304e:	60fb      	str	r3, [r7, #12]
	VERIFY(buf);
	VERIFY(buf->dim);
	return buf->dim;
   13050:	687b      	ldr	r3, [r7, #4]
   13052:	889b      	ldrh	r3, [r3, #4]
}
   13054:	4618      	mov	r0, r3
   13056:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1305a:	f2c0 0302 	movt	r3, #2
   1305e:	68fa      	ldr	r2, [r7, #12]
   13060:	681b      	ldr	r3, [r3, #0]
   13062:	429a      	cmp	r2, r3
   13064:	d001      	beq.n	1306a <bufDim+0x2e>
   13066:	f7f5 ff9d 	bl	8fa4 <__stack_chk_fail>
   1306a:	f107 0710 	add.w	r7, r7, #16
   1306e:	46bd      	mov	sp, r7
   13070:	bd80      	pop	{r7, pc}
   13072:	bf00      	nop

00013074 <bufPtr>:
 * \return pointer to the buffer data
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0009.c
 */
const byte *bufPtr(const tBuffer * buf) {
   13074:	b580      	push	{r7, lr}
   13076:	b084      	sub	sp, #16
   13078:	af00      	add	r7, sp, #0
   1307a:	6078      	str	r0, [r7, #4]
   1307c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13080:	f2c0 0302 	movt	r3, #2
   13084:	681b      	ldr	r3, [r3, #0]
   13086:	60fb      	str	r3, [r7, #12]
	VERIFY(buf);
	VERIFY(buf->ptr);
	return buf->ptr;
   13088:	687b      	ldr	r3, [r7, #4]
   1308a:	681b      	ldr	r3, [r3, #0]
}
   1308c:	4618      	mov	r0, r3
   1308e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13092:	f2c0 0302 	movt	r3, #2
   13096:	68fa      	ldr	r2, [r7, #12]
   13098:	681b      	ldr	r3, [r3, #0]
   1309a:	429a      	cmp	r2, r3
   1309c:	d001      	beq.n	130a2 <bufPtr+0x2e>
   1309e:	f7f5 ff81 	bl	8fa4 <__stack_chk_fail>
   130a2:	f107 0710 	add.w	r7, r7, #16
   130a6:	46bd      	mov	sp, r7
   130a8:	bd80      	pop	{r7, pc}
   130aa:	bf00      	nop

000130ac <bufLen>:
 * \return current buffer position
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0009.c
 **/
word bufLen(const tBuffer * buf) {
   130ac:	b580      	push	{r7, lr}
   130ae:	b084      	sub	sp, #16
   130b0:	af00      	add	r7, sp, #0
   130b2:	6078      	str	r0, [r7, #4]
   130b4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   130b8:	f2c0 0302 	movt	r3, #2
   130bc:	681b      	ldr	r3, [r3, #0]
   130be:	60fb      	str	r3, [r7, #12]
	VERIFY(buf);
	return buf->pos;
   130c0:	687b      	ldr	r3, [r7, #4]
   130c2:	88db      	ldrh	r3, [r3, #6]
}
   130c4:	4618      	mov	r0, r3
   130c6:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   130ca:	f2c0 0302 	movt	r3, #2
   130ce:	68fa      	ldr	r2, [r7, #12]
   130d0:	681b      	ldr	r3, [r3, #0]
   130d2:	429a      	cmp	r2, r3
   130d4:	d001      	beq.n	130da <bufLen+0x2e>
   130d6:	f7f5 ff65 	bl	8fa4 <__stack_chk_fail>
   130da:	f107 0710 	add.w	r7, r7, #16
   130de:	46bd      	mov	sp, r7
   130e0:	bd80      	pop	{r7, pc}
   130e2:	bf00      	nop

000130e4 <bufSet>:
 * \return current buffer position if OK; negative if overflow
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0009.c
 **/
int bufSet(tBuffer * buf, byte val, word num) {
   130e4:	b580      	push	{r7, lr}
   130e6:	b084      	sub	sp, #16
   130e8:	af00      	add	r7, sp, #0
   130ea:	6078      	str	r0, [r7, #4]
   130ec:	4613      	mov	r3, r2
   130ee:	460a      	mov	r2, r1
   130f0:	70fa      	strb	r2, [r7, #3]
   130f2:	803b      	strh	r3, [r7, #0]
   130f4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   130f8:	f2c0 0302 	movt	r3, #2
   130fc:	681b      	ldr	r3, [r3, #0]
   130fe:	60fb      	str	r3, [r7, #12]
	VERIFY(buf);
	VERIFY(buf->ptr);
	VERIFY(buf->dim);

	CHECK(buf->pos + num <= buf->dim, lblKO);
   13100:	687b      	ldr	r3, [r7, #4]
   13102:	88db      	ldrh	r3, [r3, #6]
   13104:	461a      	mov	r2, r3
   13106:	883b      	ldrh	r3, [r7, #0]
   13108:	18d2      	adds	r2, r2, r3
   1310a:	687b      	ldr	r3, [r7, #4]
   1310c:	889b      	ldrh	r3, [r3, #4]
   1310e:	429a      	cmp	r2, r3
   13110:	dc15      	bgt.n	1313e <bufSet+0x5a>
	memset(buf->ptr + buf->pos, val, num);
   13112:	687b      	ldr	r3, [r7, #4]
   13114:	681a      	ldr	r2, [r3, #0]
   13116:	687b      	ldr	r3, [r7, #4]
   13118:	88db      	ldrh	r3, [r3, #6]
   1311a:	18d1      	adds	r1, r2, r3
   1311c:	78fa      	ldrb	r2, [r7, #3]
   1311e:	883b      	ldrh	r3, [r7, #0]
   13120:	4608      	mov	r0, r1
   13122:	4611      	mov	r1, r2
   13124:	461a      	mov	r2, r3
   13126:	f7f5 ed4a 	blx	8bbc <_init+0x5c>
	buf->pos += num;
   1312a:	687b      	ldr	r3, [r7, #4]
   1312c:	88da      	ldrh	r2, [r3, #6]
   1312e:	883b      	ldrh	r3, [r7, #0]
   13130:	18d3      	adds	r3, r2, r3
   13132:	b29a      	uxth	r2, r3
   13134:	687b      	ldr	r3, [r7, #4]
   13136:	80da      	strh	r2, [r3, #6]
	return buf->pos;
   13138:	687b      	ldr	r3, [r7, #4]
   1313a:	88db      	ldrh	r3, [r3, #6]
   1313c:	e001      	b.n	13142 <bufSet+0x5e>
	lblKO:return -1;
   1313e:	f04f 33ff 	mov.w	r3, #4294967295
}
   13142:	4618      	mov	r0, r3
   13144:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13148:	f2c0 0302 	movt	r3, #2
   1314c:	68fa      	ldr	r2, [r7, #12]
   1314e:	681b      	ldr	r3, [r3, #0]
   13150:	429a      	cmp	r2, r3
   13152:	d001      	beq.n	13158 <bufSet+0x74>
   13154:	f7f5 ff26 	bl	8fa4 <__stack_chk_fail>
   13158:	f107 0710 	add.w	r7, r7, #16
   1315c:	46bd      	mov	sp, r7
   1315e:	bd80      	pop	{r7, pc}

00013160 <bufIns>:
 * \return current buffer position if OK; negative if overflow
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0009.c
 */
int bufIns(tBuffer * buf, word ofs, const byte * dat, int len) {
   13160:	b580      	push	{r7, lr}
   13162:	b086      	sub	sp, #24
   13164:	af00      	add	r7, sp, #0
   13166:	60f8      	str	r0, [r7, #12]
   13168:	607a      	str	r2, [r7, #4]
   1316a:	603b      	str	r3, [r7, #0]
   1316c:	460b      	mov	r3, r1
   1316e:	817b      	strh	r3, [r7, #10]
   13170:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13174:	f2c0 0302 	movt	r3, #2
   13178:	681b      	ldr	r3, [r3, #0]
   1317a:	617b      	str	r3, [r7, #20]
	VERIFY(buf);
	VERIFY(buf->ptr);
	VERIFY(buf->dim);
	VERIFY(ofs <= buf->pos);

	num = (word) len;           //number of bytes from dat to operate
   1317c:	683b      	ldr	r3, [r7, #0]
   1317e:	827b      	strh	r3, [r7, #18]
	if(len <= 0) {              //calculate it if a special case
   13180:	683b      	ldr	r3, [r7, #0]
   13182:	2b00      	cmp	r3, #0
   13184:	dc04      	bgt.n	13190 <bufIns+0x30>
		VERIFY(len >= -1);
		num = (word) strlen((char *) dat);
   13186:	6878      	ldr	r0, [r7, #4]
   13188:	f7f5 ed7c 	blx	8c84 <_init+0x124>
   1318c:	4603      	mov	r3, r0
   1318e:	827b      	strh	r3, [r7, #18]
	}

	CHECK(buf->pos + num <= buf->dim, lblKO);   //is there enough space?
   13190:	68fb      	ldr	r3, [r7, #12]
   13192:	88db      	ldrh	r3, [r3, #6]
   13194:	461a      	mov	r2, r3
   13196:	8a7b      	ldrh	r3, [r7, #18]
   13198:	18d2      	adds	r2, r2, r3
   1319a:	68fb      	ldr	r3, [r7, #12]
   1319c:	889b      	ldrh	r3, [r3, #4]
   1319e:	429a      	cmp	r2, r3
   131a0:	dc42      	bgt.n	13228 <bufIns+0xc8>
	if(!len) {                  //special case: add zero at the end
   131a2:	683b      	ldr	r3, [r7, #0]
   131a4:	2b00      	cmp	r3, #0
   131a6:	d108      	bne.n	131ba <bufIns+0x5a>
		VERIFY(ofs == buf->pos);    //adding ending zero is valid only in case of append
		CHECK(buf->pos + num < buf->dim, lblKO);
   131a8:	68fb      	ldr	r3, [r7, #12]
   131aa:	88db      	ldrh	r3, [r3, #6]
   131ac:	461a      	mov	r2, r3
   131ae:	8a7b      	ldrh	r3, [r7, #18]
   131b0:	18d2      	adds	r2, r2, r3
   131b2:	68fb      	ldr	r3, [r7, #12]
   131b4:	889b      	ldrh	r3, [r3, #4]
   131b6:	429a      	cmp	r2, r3
   131b8:	da36      	bge.n	13228 <bufIns+0xc8>
	}

	if(ofs != buf->pos) {       //if not at the end, the data will be inserted
   131ba:	68fb      	ldr	r3, [r7, #12]
   131bc:	88db      	ldrh	r3, [r3, #6]
   131be:	897a      	ldrh	r2, [r7, #10]
   131c0:	429a      	cmp	r2, r3
   131c2:	d013      	beq.n	131ec <bufIns+0x8c>
		memmove(buf->ptr + ofs + num, buf->ptr + ofs, buf->pos - ofs);
   131c4:	68fb      	ldr	r3, [r7, #12]
   131c6:	681a      	ldr	r2, [r3, #0]
   131c8:	8979      	ldrh	r1, [r7, #10]
   131ca:	8a7b      	ldrh	r3, [r7, #18]
   131cc:	18cb      	adds	r3, r1, r3
   131ce:	18d1      	adds	r1, r2, r3
   131d0:	68fb      	ldr	r3, [r7, #12]
   131d2:	681a      	ldr	r2, [r3, #0]
   131d4:	897b      	ldrh	r3, [r7, #10]
   131d6:	18d2      	adds	r2, r2, r3
   131d8:	68fb      	ldr	r3, [r7, #12]
   131da:	88db      	ldrh	r3, [r3, #6]
   131dc:	4618      	mov	r0, r3
   131de:	897b      	ldrh	r3, [r7, #10]
   131e0:	1ac3      	subs	r3, r0, r3
   131e2:	4608      	mov	r0, r1
   131e4:	4611      	mov	r1, r2
   131e6:	461a      	mov	r2, r3
   131e8:	f7f5 ed06 	blx	8bf8 <_init+0x98>
	}

	memcpy(buf->ptr + ofs, dat, num);   //now perform the copy operation
   131ec:	68fb      	ldr	r3, [r7, #12]
   131ee:	681a      	ldr	r2, [r3, #0]
   131f0:	897b      	ldrh	r3, [r7, #10]
   131f2:	18d2      	adds	r2, r2, r3
   131f4:	8a7b      	ldrh	r3, [r7, #18]
   131f6:	4610      	mov	r0, r2
   131f8:	6879      	ldr	r1, [r7, #4]
   131fa:	461a      	mov	r2, r3
   131fc:	f7f5 ed3c 	blx	8c78 <_init+0x118>
	buf->pos += num;            //and move current position
   13200:	68fb      	ldr	r3, [r7, #12]
   13202:	88da      	ldrh	r2, [r3, #6]
   13204:	8a7b      	ldrh	r3, [r7, #18]
   13206:	18d3      	adds	r3, r2, r3
   13208:	b29a      	uxth	r2, r3
   1320a:	68fb      	ldr	r3, [r7, #12]
   1320c:	80da      	strh	r2, [r3, #6]
	if(!len) {                  //for the special case append zero
   1320e:	683b      	ldr	r3, [r7, #0]
   13210:	2b00      	cmp	r3, #0
   13212:	d106      	bne.n	13222 <bufIns+0xc2>
		VERIFY(buf->pos < buf->dim);
		buf->ptr[buf->pos] = 0;
   13214:	68fb      	ldr	r3, [r7, #12]
   13216:	681a      	ldr	r2, [r3, #0]
   13218:	68fb      	ldr	r3, [r7, #12]
   1321a:	88db      	ldrh	r3, [r3, #6]
   1321c:	18d3      	adds	r3, r2, r3
   1321e:	2200      	movs	r2, #0
   13220:	701a      	strb	r2, [r3, #0]
	}

	return buf->pos;
   13222:	68fb      	ldr	r3, [r7, #12]
   13224:	88db      	ldrh	r3, [r3, #6]
   13226:	e001      	b.n	1322c <bufIns+0xcc>
	lblKO:return -1;
   13228:	f04f 33ff 	mov.w	r3, #4294967295
}
   1322c:	4618      	mov	r0, r3
   1322e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13232:	f2c0 0302 	movt	r3, #2
   13236:	697a      	ldr	r2, [r7, #20]
   13238:	681b      	ldr	r3, [r3, #0]
   1323a:	429a      	cmp	r2, r3
   1323c:	d001      	beq.n	13242 <bufIns+0xe2>
   1323e:	f7f5 feb1 	bl	8fa4 <__stack_chk_fail>
   13242:	f107 0718 	add.w	r7, r7, #24
   13246:	46bd      	mov	sp, r7
   13248:	bd80      	pop	{r7, pc}
   1324a:	bf00      	nop

0001324c <bufOwr>:
 * \return current buffer position if OK; -1 if overflow
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0009.c
 */
int bufOwr(tBuffer * buf, word ofs, const byte * dat, int len) {
   1324c:	b580      	push	{r7, lr}
   1324e:	b088      	sub	sp, #32
   13250:	af00      	add	r7, sp, #0
   13252:	60f8      	str	r0, [r7, #12]
   13254:	607a      	str	r2, [r7, #4]
   13256:	603b      	str	r3, [r7, #0]
   13258:	460b      	mov	r3, r1
   1325a:	817b      	strh	r3, [r7, #10]
   1325c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13260:	f2c0 0302 	movt	r3, #2
   13264:	681b      	ldr	r3, [r3, #0]
   13266:	61fb      	str	r3, [r7, #28]
	int ret;
	word oldPos;

	VERIFY(buf);

	oldPos = buf->pos;
   13268:	68fb      	ldr	r3, [r7, #12]
   1326a:	88db      	ldrh	r3, [r3, #6]
   1326c:	82fb      	strh	r3, [r7, #22]
	buf->pos = ofs;
   1326e:	68fb      	ldr	r3, [r7, #12]
   13270:	897a      	ldrh	r2, [r7, #10]
   13272:	80da      	strh	r2, [r3, #6]

	ret = bufIns(buf, ofs, dat, len);
   13274:	897b      	ldrh	r3, [r7, #10]
   13276:	68f8      	ldr	r0, [r7, #12]
   13278:	4619      	mov	r1, r3
   1327a:	687a      	ldr	r2, [r7, #4]
   1327c:	683b      	ldr	r3, [r7, #0]
   1327e:	f7ff ff6f 	bl	13160 <bufIns>
   13282:	61b8      	str	r0, [r7, #24]
	CHECK(ret != -1, lblKO);
   13284:	69bb      	ldr	r3, [r7, #24]
   13286:	f1b3 3fff 	cmp.w	r3, #4294967295
   1328a:	d00a      	beq.n	132a2 <bufOwr+0x56>

	if(oldPos > buf->pos) {
   1328c:	68fb      	ldr	r3, [r7, #12]
   1328e:	88db      	ldrh	r3, [r3, #6]
   13290:	8afa      	ldrh	r2, [r7, #22]
   13292:	429a      	cmp	r2, r3
   13294:	d902      	bls.n	1329c <bufOwr+0x50>
		buf->pos = oldPos;
   13296:	68fb      	ldr	r3, [r7, #12]
   13298:	8afa      	ldrh	r2, [r7, #22]
   1329a:	80da      	strh	r2, [r3, #6]
	}

	return buf->pos;
   1329c:	68fb      	ldr	r3, [r7, #12]
   1329e:	88db      	ldrh	r3, [r3, #6]
   132a0:	e004      	b.n	132ac <bufOwr+0x60>

	lblKO:
	// bufIns failed : restore the original position
	buf->pos = oldPos;
   132a2:	68fb      	ldr	r3, [r7, #12]
   132a4:	8afa      	ldrh	r2, [r7, #22]
   132a6:	80da      	strh	r2, [r3, #6]
	return -1;
   132a8:	f04f 33ff 	mov.w	r3, #4294967295
}
   132ac:	4618      	mov	r0, r3
   132ae:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   132b2:	f2c0 0302 	movt	r3, #2
   132b6:	69fa      	ldr	r2, [r7, #28]
   132b8:	681b      	ldr	r3, [r3, #0]
   132ba:	429a      	cmp	r2, r3
   132bc:	d001      	beq.n	132c2 <bufOwr+0x76>
   132be:	f7f5 fe71 	bl	8fa4 <__stack_chk_fail>
   132c2:	f107 0720 	add.w	r7, r7, #32
   132c6:	46bd      	mov	sp, r7
   132c8:	bd80      	pop	{r7, pc}
   132ca:	bf00      	nop

000132cc <bufDel>:
 * \return current buffer position
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcgs0021.c
 */
int bufDel(tBuffer * buf, word ofs, int len) {
   132cc:	b580      	push	{r7, lr}
   132ce:	b086      	sub	sp, #24
   132d0:	af00      	add	r7, sp, #0
   132d2:	60f8      	str	r0, [r7, #12]
   132d4:	460b      	mov	r3, r1
   132d6:	607a      	str	r2, [r7, #4]
   132d8:	817b      	strh	r3, [r7, #10]
   132da:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   132de:	f2c0 0302 	movt	r3, #2
   132e2:	681b      	ldr	r3, [r3, #0]
   132e4:	617b      	str	r3, [r7, #20]
	VERIFY(buf->ptr);
	VERIFY(buf->dim);
	VERIFY(ofs <= buf->pos);
	VERIFY(len >= 0);

	if(len == 0 || (ofs + len > buf->pos)) {    //"erase" all after ofs
   132e6:	687b      	ldr	r3, [r7, #4]
   132e8:	2b00      	cmp	r3, #0
   132ea:	d006      	beq.n	132fa <bufDel+0x2e>
   132ec:	897a      	ldrh	r2, [r7, #10]
   132ee:	687b      	ldr	r3, [r7, #4]
   132f0:	18d2      	adds	r2, r2, r3
   132f2:	68fb      	ldr	r3, [r7, #12]
   132f4:	88db      	ldrh	r3, [r3, #6]
   132f6:	429a      	cmp	r2, r3
   132f8:	dd05      	ble.n	13306 <bufDel+0x3a>
		buf->pos = ofs;
   132fa:	68fb      	ldr	r3, [r7, #12]
   132fc:	897a      	ldrh	r2, [r7, #10]
   132fe:	80da      	strh	r2, [r3, #6]
		return buf->pos;
   13300:	68fb      	ldr	r3, [r7, #12]
   13302:	88db      	ldrh	r3, [r3, #6]
   13304:	e01f      	b.n	13346 <bufDel+0x7a>
	}

	memmove(buf->ptr + ofs, buf->ptr + ofs + len, buf->pos - ofs - len);
   13306:	68fb      	ldr	r3, [r7, #12]
   13308:	681a      	ldr	r2, [r3, #0]
   1330a:	897b      	ldrh	r3, [r7, #10]
   1330c:	18d1      	adds	r1, r2, r3
   1330e:	68fb      	ldr	r3, [r7, #12]
   13310:	681a      	ldr	r2, [r3, #0]
   13312:	8978      	ldrh	r0, [r7, #10]
   13314:	687b      	ldr	r3, [r7, #4]
   13316:	18c3      	adds	r3, r0, r3
   13318:	18d2      	adds	r2, r2, r3
   1331a:	68fb      	ldr	r3, [r7, #12]
   1331c:	88db      	ldrh	r3, [r3, #6]
   1331e:	4618      	mov	r0, r3
   13320:	897b      	ldrh	r3, [r7, #10]
   13322:	1ac0      	subs	r0, r0, r3
   13324:	687b      	ldr	r3, [r7, #4]
   13326:	1ac3      	subs	r3, r0, r3
   13328:	4608      	mov	r0, r1
   1332a:	4611      	mov	r1, r2
   1332c:	461a      	mov	r2, r3
   1332e:	f7f5 ec64 	blx	8bf8 <_init+0x98>
	buf->pos -= len;
   13332:	68fb      	ldr	r3, [r7, #12]
   13334:	88da      	ldrh	r2, [r3, #6]
   13336:	687b      	ldr	r3, [r7, #4]
   13338:	b29b      	uxth	r3, r3
   1333a:	1ad3      	subs	r3, r2, r3
   1333c:	b29a      	uxth	r2, r3
   1333e:	68fb      	ldr	r3, [r7, #12]
   13340:	80da      	strh	r2, [r3, #6]
	return buf->pos;
   13342:	68fb      	ldr	r3, [r7, #12]
   13344:	88db      	ldrh	r3, [r3, #6]
}
   13346:	4618      	mov	r0, r3
   13348:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1334c:	f2c0 0302 	movt	r3, #2
   13350:	697a      	ldr	r2, [r7, #20]
   13352:	681b      	ldr	r3, [r3, #0]
   13354:	429a      	cmp	r2, r3
   13356:	d001      	beq.n	1335c <bufDel+0x90>
   13358:	f7f5 fe24 	bl	8fa4 <__stack_chk_fail>
   1335c:	f107 0718 	add.w	r7, r7, #24
   13360:	46bd      	mov	sp, r7
   13362:	bd80      	pop	{r7, pc}

00013364 <bufApp>:
 * \return current buffer position if OK; negative if overflow
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0009.c
 */
int bufApp(tBuffer * buf, const byte * dat, int len) {
   13364:	b580      	push	{r7, lr}
   13366:	b086      	sub	sp, #24
   13368:	af00      	add	r7, sp, #0
   1336a:	60f8      	str	r0, [r7, #12]
   1336c:	60b9      	str	r1, [r7, #8]
   1336e:	607a      	str	r2, [r7, #4]
   13370:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13374:	f2c0 0302 	movt	r3, #2
   13378:	681b      	ldr	r3, [r3, #0]
   1337a:	617b      	str	r3, [r7, #20]
	return bufIns(buf, buf->pos, dat, len);
   1337c:	68fb      	ldr	r3, [r7, #12]
   1337e:	88db      	ldrh	r3, [r3, #6]
   13380:	68f8      	ldr	r0, [r7, #12]
   13382:	4619      	mov	r1, r3
   13384:	68ba      	ldr	r2, [r7, #8]
   13386:	687b      	ldr	r3, [r7, #4]
   13388:	f7ff feea 	bl	13160 <bufIns>
   1338c:	4603      	mov	r3, r0
}
   1338e:	4618      	mov	r0, r3
   13390:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13394:	f2c0 0302 	movt	r3, #2
   13398:	697a      	ldr	r2, [r7, #20]
   1339a:	681b      	ldr	r3, [r3, #0]
   1339c:	429a      	cmp	r2, r3
   1339e:	d001      	beq.n	133a4 <bufApp+0x40>
   133a0:	f7f5 fe00 	bl	8fa4 <__stack_chk_fail>
   133a4:	f107 0718 	add.w	r7, r7, #24
   133a8:	46bd      	mov	sp, r7
   133aa:	bd80      	pop	{r7, pc}

000133ac <bufCat>:
 * \return current buffer position if OK; negative if overflow
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0009.c
 */
int bufCat(tBuffer * dst, tBuffer * src) {
   133ac:	b5b0      	push	{r4, r5, r7, lr}
   133ae:	b084      	sub	sp, #16
   133b0:	af00      	add	r7, sp, #0
   133b2:	6078      	str	r0, [r7, #4]
   133b4:	6039      	str	r1, [r7, #0]
   133b6:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   133ba:	f2c0 0302 	movt	r3, #2
   133be:	681b      	ldr	r3, [r3, #0]
   133c0:	60fb      	str	r3, [r7, #12]
	return bufIns(dst, dst->pos, bufPtr(src), bufLen(src));
   133c2:	687b      	ldr	r3, [r7, #4]
   133c4:	88dd      	ldrh	r5, [r3, #6]
   133c6:	6838      	ldr	r0, [r7, #0]
   133c8:	f7ff fe54 	bl	13074 <bufPtr>
   133cc:	4604      	mov	r4, r0
   133ce:	6838      	ldr	r0, [r7, #0]
   133d0:	f7ff fe6c 	bl	130ac <bufLen>
   133d4:	4603      	mov	r3, r0
   133d6:	6878      	ldr	r0, [r7, #4]
   133d8:	4629      	mov	r1, r5
   133da:	4622      	mov	r2, r4
   133dc:	f7ff fec0 	bl	13160 <bufIns>
   133e0:	4603      	mov	r3, r0
}
   133e2:	4618      	mov	r0, r3
   133e4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   133e8:	f2c0 0302 	movt	r3, #2
   133ec:	68fa      	ldr	r2, [r7, #12]
   133ee:	681b      	ldr	r3, [r3, #0]
   133f0:	429a      	cmp	r2, r3
   133f2:	d001      	beq.n	133f8 <bufCat+0x4c>
   133f4:	f7f5 fdd6 	bl	8fa4 <__stack_chk_fail>
   133f8:	f107 0710 	add.w	r7, r7, #16
   133fc:	46bd      	mov	sp, r7
   133fe:	bdb0      	pop	{r4, r5, r7, pc}

00013400 <bufCpy>:
 * \return current buffer position if OK; negative if overflow
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0009.c
 */
int bufCpy(tBuffer * buf, const byte * dat, int len) {
   13400:	b580      	push	{r7, lr}
   13402:	b086      	sub	sp, #24
   13404:	af00      	add	r7, sp, #0
   13406:	60f8      	str	r0, [r7, #12]
   13408:	60b9      	str	r1, [r7, #8]
   1340a:	607a      	str	r2, [r7, #4]
   1340c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13410:	f2c0 0302 	movt	r3, #2
   13414:	681b      	ldr	r3, [r3, #0]
   13416:	617b      	str	r3, [r7, #20]
	bufReset(buf);
   13418:	68f8      	ldr	r0, [r7, #12]
   1341a:	f7ff fdc3 	bl	12fa4 <bufReset>
	return bufApp(buf, dat, len);
   1341e:	68f8      	ldr	r0, [r7, #12]
   13420:	68b9      	ldr	r1, [r7, #8]
   13422:	687a      	ldr	r2, [r7, #4]
   13424:	f7ff ff9e 	bl	13364 <bufApp>
   13428:	4603      	mov	r3, r0
}
   1342a:	4618      	mov	r0, r3
   1342c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13430:	f2c0 0302 	movt	r3, #2
   13434:	697a      	ldr	r2, [r7, #20]
   13436:	681b      	ldr	r3, [r3, #0]
   13438:	429a      	cmp	r2, r3
   1343a:	d001      	beq.n	13440 <bufCpy+0x40>
   1343c:	f7f5 fdb2 	bl	8fa4 <__stack_chk_fail>
   13440:	f107 0718 	add.w	r7, r7, #24
   13444:	46bd      	mov	sp, r7
   13446:	bd80      	pop	{r7, pc}

00013448 <bufGet>:

int bufGet(tBuffer * buf, byte * dat) {
   13448:	b580      	push	{r7, lr}
   1344a:	b084      	sub	sp, #16
   1344c:	af00      	add	r7, sp, #0
   1344e:	6078      	str	r0, [r7, #4]
   13450:	6039      	str	r1, [r7, #0]
   13452:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13456:	f2c0 0302 	movt	r3, #2
   1345a:	681b      	ldr	r3, [r3, #0]
   1345c:	60fb      	str	r3, [r7, #12]
	VERIFY(buf);
	VERIFY(dat);
	VERIFY(buf->ptr);
	memcpy(dat, buf->ptr, buf->pos);
   1345e:	687b      	ldr	r3, [r7, #4]
   13460:	681a      	ldr	r2, [r3, #0]
   13462:	687b      	ldr	r3, [r7, #4]
   13464:	88db      	ldrh	r3, [r3, #6]
   13466:	6838      	ldr	r0, [r7, #0]
   13468:	4611      	mov	r1, r2
   1346a:	461a      	mov	r2, r3
   1346c:	f7f5 ec04 	blx	8c78 <_init+0x118>
	return buf->pos;
   13470:	687b      	ldr	r3, [r7, #4]
   13472:	88db      	ldrh	r3, [r3, #6]
}
   13474:	4618      	mov	r0, r3
   13476:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1347a:	f2c0 0302 	movt	r3, #2
   1347e:	68fa      	ldr	r2, [r7, #12]
   13480:	681b      	ldr	r3, [r3, #0]
   13482:	429a      	cmp	r2, r3
   13484:	d001      	beq.n	1348a <bufGet+0x42>
   13486:	f7f5 fd8d 	bl	8fa4 <__stack_chk_fail>
   1348a:	f107 0710 	add.w	r7, r7, #16
   1348e:	46bd      	mov	sp, r7
   13490:	bd80      	pop	{r7, pc}
   13492:	bf00      	nop

00013494 <queReset>:
 * \return N/A
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0010.c
 */
void queReset(tQueue * que) {
   13494:	b580      	push	{r7, lr}
   13496:	b084      	sub	sp, #16
   13498:	af00      	add	r7, sp, #0
   1349a:	6078      	str	r0, [r7, #4]
   1349c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   134a0:	f2c0 0302 	movt	r3, #2
   134a4:	681b      	ldr	r3, [r3, #0]
   134a6:	60fb      	str	r3, [r7, #12]
	VERIFY(que);
	VERIFY(que->buf);

	que->cur = que->put = que->get = 0;
   134a8:	687b      	ldr	r3, [r7, #4]
   134aa:	2200      	movs	r2, #0
   134ac:	811a      	strh	r2, [r3, #8]
   134ae:	687b      	ldr	r3, [r7, #4]
   134b0:	891a      	ldrh	r2, [r3, #8]
   134b2:	687b      	ldr	r3, [r7, #4]
   134b4:	80da      	strh	r2, [r3, #6]
   134b6:	687b      	ldr	r3, [r7, #4]
   134b8:	88da      	ldrh	r2, [r3, #6]
   134ba:	687b      	ldr	r3, [r7, #4]
   134bc:	809a      	strh	r2, [r3, #4]
	bufReset(que->buf);
   134be:	687b      	ldr	r3, [r7, #4]
   134c0:	681b      	ldr	r3, [r3, #0]
   134c2:	4618      	mov	r0, r3
   134c4:	f7ff fd6e 	bl	12fa4 <bufReset>
}
   134c8:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   134cc:	f2c0 0302 	movt	r3, #2
   134d0:	68fa      	ldr	r2, [r7, #12]
   134d2:	681b      	ldr	r3, [r3, #0]
   134d4:	429a      	cmp	r2, r3
   134d6:	d001      	beq.n	134dc <queReset+0x48>
   134d8:	f7f5 fd64 	bl	8fa4 <__stack_chk_fail>
   134dc:	f107 0710 	add.w	r7, r7, #16
   134e0:	46bd      	mov	sp, r7
   134e2:	bd80      	pop	{r7, pc}

000134e4 <queInit>:
 * \return N/A
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0010.c
 */
void queInit(tQueue * que, tBuffer * buf) {
   134e4:	b580      	push	{r7, lr}
   134e6:	b084      	sub	sp, #16
   134e8:	af00      	add	r7, sp, #0
   134ea:	6078      	str	r0, [r7, #4]
   134ec:	6039      	str	r1, [r7, #0]
   134ee:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   134f2:	f2c0 0302 	movt	r3, #2
   134f6:	681b      	ldr	r3, [r3, #0]
   134f8:	60fb      	str	r3, [r7, #12]
	VERIFY(que);
	VERIFY(buf);

	que->buf = buf;
   134fa:	687b      	ldr	r3, [r7, #4]
   134fc:	683a      	ldr	r2, [r7, #0]
   134fe:	601a      	str	r2, [r3, #0]
	queReset(que);
   13500:	6878      	ldr	r0, [r7, #4]
   13502:	f7ff ffc7 	bl	13494 <queReset>
}
   13506:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1350a:	f2c0 0302 	movt	r3, #2
   1350e:	68fa      	ldr	r2, [r7, #12]
   13510:	681b      	ldr	r3, [r3, #0]
   13512:	429a      	cmp	r2, r3
   13514:	d001      	beq.n	1351a <queInit+0x36>
   13516:	f7f5 fd45 	bl	8fa4 <__stack_chk_fail>
   1351a:	f107 0710 	add.w	r7, r7, #16
   1351e:	46bd      	mov	sp, r7
   13520:	bd80      	pop	{r7, pc}
   13522:	bf00      	nop

00013524 <quePut>:
 * \return number of bytes put into the queue; negative value if overflow
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0010.c
 */
int quePut(tQueue * que, const byte * dat, int len) {
   13524:	b580      	push	{r7, lr}
   13526:	b088      	sub	sp, #32
   13528:	af00      	add	r7, sp, #0
   1352a:	60f8      	str	r0, [r7, #12]
   1352c:	60b9      	str	r1, [r7, #8]
   1352e:	607a      	str	r2, [r7, #4]
   13530:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13534:	f2c0 0302 	movt	r3, #2
   13538:	681b      	ldr	r3, [r3, #0]
   1353a:	61fb      	str	r3, [r7, #28]
	byte tmp[2];

	VERIFY(que);
	VERIFY(que->buf);

	if(!len)
   1353c:	687b      	ldr	r3, [r7, #4]
   1353e:	2b00      	cmp	r3, #0
   13540:	d104      	bne.n	1354c <quePut+0x28>
		len = strlen((char *) dat); //calculate len if needed
   13542:	68b8      	ldr	r0, [r7, #8]
   13544:	f7f5 eb9e 	blx	8c84 <_init+0x124>
   13548:	4603      	mov	r3, r0
   1354a:	607b      	str	r3, [r7, #4]
	tmp[0] = (byte) (len / 256);    //get highest byte
   1354c:	687b      	ldr	r3, [r7, #4]
   1354e:	2b00      	cmp	r3, #0
   13550:	da00      	bge.n	13554 <quePut+0x30>
   13552:	33ff      	adds	r3, #255	; 0xff
   13554:	121b      	asrs	r3, r3, #8
   13556:	b2db      	uxtb	r3, r3
   13558:	763b      	strb	r3, [r7, #24]
	tmp[1] = (byte) (len % 256);    //get lowest byte
   1355a:	687a      	ldr	r2, [r7, #4]
   1355c:	23ff      	movs	r3, #255	; 0xff
   1355e:	f2c8 0300 	movt	r3, #32768	; 0x8000
   13562:	4013      	ands	r3, r2
   13564:	2b00      	cmp	r3, #0
   13566:	da03      	bge.n	13570 <quePut+0x4c>
   13568:	3b01      	subs	r3, #1
   1356a:	f063 03ff 	orn	r3, r3, #255	; 0xff
   1356e:	3301      	adds	r3, #1
   13570:	b2db      	uxtb	r3, r3
   13572:	767b      	strb	r3, [r7, #25]

	ret = bufApp(que->buf, tmp, 2); //save element length in direct byte order
   13574:	68fb      	ldr	r3, [r7, #12]
   13576:	681a      	ldr	r2, [r3, #0]
   13578:	f107 0318 	add.w	r3, r7, #24
   1357c:	4610      	mov	r0, r2
   1357e:	4619      	mov	r1, r3
   13580:	2202      	movs	r2, #2
   13582:	f7ff feef 	bl	13364 <bufApp>
   13586:	6178      	str	r0, [r7, #20]
	CHECK(ret > 0, lblKO);
   13588:	697b      	ldr	r3, [r7, #20]
   1358a:	2b00      	cmp	r3, #0
   1358c:	dd18      	ble.n	135c0 <quePut+0x9c>

	ret = bufApp(que->buf, dat, len);   //save the data itself
   1358e:	68fb      	ldr	r3, [r7, #12]
   13590:	681b      	ldr	r3, [r3, #0]
   13592:	4618      	mov	r0, r3
   13594:	68b9      	ldr	r1, [r7, #8]
   13596:	687a      	ldr	r2, [r7, #4]
   13598:	f7ff fee4 	bl	13364 <bufApp>
   1359c:	6178      	str	r0, [r7, #20]
	CHECK(ret > 0, lblKO);
   1359e:	697b      	ldr	r3, [r7, #20]
   135a0:	2b00      	cmp	r3, #0
   135a2:	dd0d      	ble.n	135c0 <quePut+0x9c>

	que->put++;                 //increment number of put elements
   135a4:	68fb      	ldr	r3, [r7, #12]
   135a6:	88db      	ldrh	r3, [r3, #6]
   135a8:	3301      	adds	r3, #1
   135aa:	b29a      	uxth	r2, r3
   135ac:	68fb      	ldr	r3, [r7, #12]
   135ae:	80da      	strh	r2, [r3, #6]
	que->get++;                 //increment number of get elements
   135b0:	68fb      	ldr	r3, [r7, #12]
   135b2:	891b      	ldrh	r3, [r3, #8]
   135b4:	3301      	adds	r3, #1
   135b6:	b29a      	uxth	r2, r3
   135b8:	68fb      	ldr	r3, [r7, #12]
   135ba:	811a      	strh	r2, [r3, #8]

	return len;
   135bc:	687b      	ldr	r3, [r7, #4]
   135be:	e001      	b.n	135c4 <quePut+0xa0>
	lblKO:return -1;
   135c0:	f04f 33ff 	mov.w	r3, #4294967295
}
   135c4:	4618      	mov	r0, r3
   135c6:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   135ca:	f2c0 0302 	movt	r3, #2
   135ce:	69fa      	ldr	r2, [r7, #28]
   135d0:	681b      	ldr	r3, [r3, #0]
   135d2:	429a      	cmp	r2, r3
   135d4:	d001      	beq.n	135da <quePut+0xb6>
   135d6:	f7f5 fce5 	bl	8fa4 <__stack_chk_fail>
   135da:	f107 0720 	add.w	r7, r7, #32
   135de:	46bd      	mov	sp, r7
   135e0:	bd80      	pop	{r7, pc}
   135e2:	bf00      	nop

000135e4 <queNxt>:
 * \return the length of the next data element; zero if the current element is the last
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0010.c
 */
word queNxt(const tQueue * que) {
   135e4:	b580      	push	{r7, lr}
   135e6:	b086      	sub	sp, #24
   135e8:	af00      	add	r7, sp, #0
   135ea:	6078      	str	r0, [r7, #4]
   135ec:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   135f0:	f2c0 0302 	movt	r3, #2
   135f4:	681b      	ldr	r3, [r3, #0]
   135f6:	617b      	str	r3, [r7, #20]
	word len;

	VERIFY(que);
	VERIFY(que->buf);

	if(!que->get)
   135f8:	687b      	ldr	r3, [r7, #4]
   135fa:	891b      	ldrh	r3, [r3, #8]
   135fc:	2b00      	cmp	r3, #0
   135fe:	d101      	bne.n	13604 <queNxt+0x20>
		return 0;
   13600:	2300      	movs	r3, #0
   13602:	e019      	b.n	13638 <queNxt+0x54>

	ptr = bufPtr(que->buf) + que->cur;  //ptr points to the length in direct order
   13604:	687b      	ldr	r3, [r7, #4]
   13606:	681b      	ldr	r3, [r3, #0]
   13608:	4618      	mov	r0, r3
   1360a:	f7ff fd33 	bl	13074 <bufPtr>
   1360e:	4602      	mov	r2, r0
   13610:	687b      	ldr	r3, [r7, #4]
   13612:	889b      	ldrh	r3, [r3, #4]
   13614:	18d3      	adds	r3, r2, r3
   13616:	613b      	str	r3, [r7, #16]
	len = *ptr++;               //get highest byte
   13618:	693b      	ldr	r3, [r7, #16]
   1361a:	781b      	ldrb	r3, [r3, #0]
   1361c:	81fb      	strh	r3, [r7, #14]
   1361e:	693b      	ldr	r3, [r7, #16]
   13620:	3301      	adds	r3, #1
   13622:	613b      	str	r3, [r7, #16]
	len *= (word) 256;
   13624:	89fb      	ldrh	r3, [r7, #14]
   13626:	021b      	lsls	r3, r3, #8
   13628:	81fb      	strh	r3, [r7, #14]
	len += *ptr;                //and now get lowest byte
   1362a:	693b      	ldr	r3, [r7, #16]
   1362c:	781b      	ldrb	r3, [r3, #0]
   1362e:	461a      	mov	r2, r3
   13630:	89fb      	ldrh	r3, [r7, #14]
   13632:	18d3      	adds	r3, r2, r3
   13634:	81fb      	strh	r3, [r7, #14]

	return len;
   13636:	89fb      	ldrh	r3, [r7, #14]
}
   13638:	4618      	mov	r0, r3
   1363a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1363e:	f2c0 0302 	movt	r3, #2
   13642:	697a      	ldr	r2, [r7, #20]
   13644:	681b      	ldr	r3, [r3, #0]
   13646:	429a      	cmp	r2, r3
   13648:	d001      	beq.n	1364e <queNxt+0x6a>
   1364a:	f7f5 fcab 	bl	8fa4 <__stack_chk_fail>
   1364e:	f107 0718 	add.w	r7, r7, #24
   13652:	46bd      	mov	sp, r7
   13654:	bd80      	pop	{r7, pc}
   13656:	bf00      	nop

00013658 <queGet>:
 * \return length of data element retrieved; negative value if there is no more data elements to be retrieved
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0010.c
 */
int queGet(tQueue * que, byte * dat) {
   13658:	b580      	push	{r7, lr}
   1365a:	b084      	sub	sp, #16
   1365c:	af00      	add	r7, sp, #0
   1365e:	6078      	str	r0, [r7, #4]
   13660:	6039      	str	r1, [r7, #0]
   13662:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13666:	f2c0 0302 	movt	r3, #2
   1366a:	681b      	ldr	r3, [r3, #0]
   1366c:	60fb      	str	r3, [r7, #12]
	word len;

	VERIFY(que);
	VERIFY(dat);
	VERIFY(que->buf);
	CHECK(que->get, lblKO);     //are there any element to get?
   1366e:	687b      	ldr	r3, [r7, #4]
   13670:	891b      	ldrh	r3, [r3, #8]
   13672:	2b00      	cmp	r3, #0
   13674:	d028      	beq.n	136c8 <queGet+0x70>

	len = queNxt(que);          //retrieve the length of the next element
   13676:	6878      	ldr	r0, [r7, #4]
   13678:	f7ff ffb4 	bl	135e4 <queNxt>
   1367c:	4603      	mov	r3, r0
   1367e:	817b      	strh	r3, [r7, #10]
	que->cur += (word) 2;       //skip the length
   13680:	687b      	ldr	r3, [r7, #4]
   13682:	889b      	ldrh	r3, [r3, #4]
   13684:	3302      	adds	r3, #2
   13686:	b29a      	uxth	r2, r3
   13688:	687b      	ldr	r3, [r7, #4]
   1368a:	809a      	strh	r2, [r3, #4]

	memcpy(dat, bufPtr(que->buf) + que->cur, len);  //copy data into destination buffer
   1368c:	687b      	ldr	r3, [r7, #4]
   1368e:	681b      	ldr	r3, [r3, #0]
   13690:	4618      	mov	r0, r3
   13692:	f7ff fcef 	bl	13074 <bufPtr>
   13696:	4602      	mov	r2, r0
   13698:	687b      	ldr	r3, [r7, #4]
   1369a:	889b      	ldrh	r3, [r3, #4]
   1369c:	18d2      	adds	r2, r2, r3
   1369e:	897b      	ldrh	r3, [r7, #10]
   136a0:	6838      	ldr	r0, [r7, #0]
   136a2:	4611      	mov	r1, r2
   136a4:	461a      	mov	r2, r3
   136a6:	f7f5 eae8 	blx	8c78 <_init+0x118>
	que->cur += len;            //move current position
   136aa:	687b      	ldr	r3, [r7, #4]
   136ac:	889a      	ldrh	r2, [r3, #4]
   136ae:	897b      	ldrh	r3, [r7, #10]
   136b0:	18d3      	adds	r3, r2, r3
   136b2:	b29a      	uxth	r2, r3
   136b4:	687b      	ldr	r3, [r7, #4]
   136b6:	809a      	strh	r2, [r3, #4]

	que->get--;                 //decrement number of elements to get
   136b8:	687b      	ldr	r3, [r7, #4]
   136ba:	891b      	ldrh	r3, [r3, #8]
   136bc:	3b01      	subs	r3, #1
   136be:	b29a      	uxth	r2, r3
   136c0:	687b      	ldr	r3, [r7, #4]
   136c2:	811a      	strh	r2, [r3, #8]

	return len;
   136c4:	897b      	ldrh	r3, [r7, #10]
   136c6:	e001      	b.n	136cc <queGet+0x74>
	lblKO:return -1;
   136c8:	f04f 33ff 	mov.w	r3, #4294967295
}
   136cc:	4618      	mov	r0, r3
   136ce:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   136d2:	f2c0 0302 	movt	r3, #2
   136d6:	68fa      	ldr	r2, [r7, #12]
   136d8:	681b      	ldr	r3, [r3, #0]
   136da:	429a      	cmp	r2, r3
   136dc:	d001      	beq.n	136e2 <queGet+0x8a>
   136de:	f7f5 fc61 	bl	8fa4 <__stack_chk_fail>
   136e2:	f107 0710 	add.w	r7, r7, #16
   136e6:	46bd      	mov	sp, r7
   136e8:	bd80      	pop	{r7, pc}
   136ea:	bf00      	nop

000136ec <queLen>:
 * \return the number of data elements waiting to be retrieved
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0010.c
 */
word queLen(const tQueue * que) {
   136ec:	b580      	push	{r7, lr}
   136ee:	b084      	sub	sp, #16
   136f0:	af00      	add	r7, sp, #0
   136f2:	6078      	str	r0, [r7, #4]
   136f4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   136f8:	f2c0 0302 	movt	r3, #2
   136fc:	681b      	ldr	r3, [r3, #0]
   136fe:	60fb      	str	r3, [r7, #12]
	VERIFY(que);
	return que->get;
   13700:	687b      	ldr	r3, [r7, #4]
   13702:	891b      	ldrh	r3, [r3, #8]
}
   13704:	4618      	mov	r0, r3
   13706:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1370a:	f2c0 0302 	movt	r3, #2
   1370e:	68fa      	ldr	r2, [r7, #12]
   13710:	681b      	ldr	r3, [r3, #0]
   13712:	429a      	cmp	r2, r3
   13714:	d001      	beq.n	1371a <queLen+0x2e>
   13716:	f7f5 fc45 	bl	8fa4 <__stack_chk_fail>
   1371a:	f107 0710 	add.w	r7, r7, #16
   1371e:	46bd      	mov	sp, r7
   13720:	bd80      	pop	{r7, pc}
   13722:	bf00      	nop

00013724 <queRewind>:
 * \return N/A
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0010.c
 */
void queRewind(tQueue * que) {
   13724:	b580      	push	{r7, lr}
   13726:	b084      	sub	sp, #16
   13728:	af00      	add	r7, sp, #0
   1372a:	6078      	str	r0, [r7, #4]
   1372c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13730:	f2c0 0302 	movt	r3, #2
   13734:	681b      	ldr	r3, [r3, #0]
   13736:	60fb      	str	r3, [r7, #12]
	VERIFY(que);
	que->cur = 0;
   13738:	687b      	ldr	r3, [r7, #4]
   1373a:	2200      	movs	r2, #0
   1373c:	809a      	strh	r2, [r3, #4]
	que->get = que->put;
   1373e:	687b      	ldr	r3, [r7, #4]
   13740:	88da      	ldrh	r2, [r3, #6]
   13742:	687b      	ldr	r3, [r7, #4]
   13744:	811a      	strh	r2, [r3, #8]
}
   13746:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1374a:	f2c0 0302 	movt	r3, #2
   1374e:	68fa      	ldr	r2, [r7, #12]
   13750:	681b      	ldr	r3, [r3, #0]
   13752:	429a      	cmp	r2, r3
   13754:	d001      	beq.n	1375a <queRewind+0x36>
   13756:	f7f5 fc25 	bl	8fa4 <__stack_chk_fail>
   1375a:	f107 0710 	add.w	r7, r7, #16
   1375e:	46bd      	mov	sp, r7
   13760:	bd80      	pop	{r7, pc}
   13762:	bf00      	nop

00013764 <quePutTag>:
 *    - que!=0
 * \return number of bytes put into the queue (sizeof(card)); negative value if overflow
 * \header sys\\sys.h
 * \source sys\\tbx.c
 */
int quePutTag(tQueue * que, card tag) {
   13764:	b580      	push	{r7, lr}
   13766:	b084      	sub	sp, #16
   13768:	af00      	add	r7, sp, #0
   1376a:	6078      	str	r0, [r7, #4]
   1376c:	6039      	str	r1, [r7, #0]
   1376e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13772:	f2c0 0302 	movt	r3, #2
   13776:	681b      	ldr	r3, [r3, #0]
   13778:	60fb      	str	r3, [r7, #12]
	int ret;

	VERIFY(que);

	ret = quePut(que, (byte *) & tag, sizeof(card));
   1377a:	463b      	mov	r3, r7
   1377c:	6878      	ldr	r0, [r7, #4]
   1377e:	4619      	mov	r1, r3
   13780:	2204      	movs	r2, #4
   13782:	f7ff fecf 	bl	13524 <quePut>
   13786:	60b8      	str	r0, [r7, #8]
	CHECK(ret >= 0, lblKO);
   13788:	68bb      	ldr	r3, [r7, #8]
   1378a:	2b00      	cmp	r3, #0
   1378c:	db01      	blt.n	13792 <quePutTag+0x2e>

	return ret;
   1378e:	68bb      	ldr	r3, [r7, #8]
   13790:	e001      	b.n	13796 <quePutTag+0x32>
	lblKO:return -1;
   13792:	f04f 33ff 	mov.w	r3, #4294967295
}
   13796:	4618      	mov	r0, r3
   13798:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1379c:	f2c0 0302 	movt	r3, #2
   137a0:	68fa      	ldr	r2, [r7, #12]
   137a2:	681b      	ldr	r3, [r3, #0]
   137a4:	429a      	cmp	r2, r3
   137a6:	d001      	beq.n	137ac <quePutTag+0x48>
   137a8:	f7f5 fbfc 	bl	8fa4 <__stack_chk_fail>
   137ac:	f107 0710 	add.w	r7, r7, #16
   137b0:	46bd      	mov	sp, r7
   137b2:	bd80      	pop	{r7, pc}

000137b4 <quePutTlv>:
 *    - tag!=0
 * \return number of bytes put into the queue; negative value if overflow
 * \header sys\\sys.h
 * \source sys\\tbx.c
 */
int quePutTlv(tQueue * que, card tag, word len, byte * val) {
   137b4:	b580      	push	{r7, lr}
   137b6:	b086      	sub	sp, #24
   137b8:	af00      	add	r7, sp, #0
   137ba:	60f8      	str	r0, [r7, #12]
   137bc:	60b9      	str	r1, [r7, #8]
   137be:	603b      	str	r3, [r7, #0]
   137c0:	4613      	mov	r3, r2
   137c2:	80fb      	strh	r3, [r7, #6]
   137c4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   137c8:	f2c0 0302 	movt	r3, #2
   137cc:	681b      	ldr	r3, [r3, #0]
   137ce:	617b      	str	r3, [r7, #20]
	int ret;

	VERIFY(que);
	VERIFY(val);

	if(!len)
   137d0:	88fb      	ldrh	r3, [r7, #6]
   137d2:	2b00      	cmp	r3, #0
   137d4:	d104      	bne.n	137e0 <quePutTlv+0x2c>
		len = (word) strlen((char *) val);
   137d6:	6838      	ldr	r0, [r7, #0]
   137d8:	f7f5 ea54 	blx	8c84 <_init+0x124>
   137dc:	4603      	mov	r3, r0
   137de:	80fb      	strh	r3, [r7, #6]

	if(len < 1)
   137e0:	88fb      	ldrh	r3, [r7, #6]
   137e2:	2b00      	cmp	r3, #0
   137e4:	d101      	bne.n	137ea <quePutTlv+0x36>
		return 0;
   137e6:	2300      	movs	r3, #0
   137e8:	e018      	b.n	1381c <quePutTlv+0x68>

	VERIFY(len);

	ret = quePut(que, (byte *) & tag, sizeof(card));
   137ea:	f107 0308 	add.w	r3, r7, #8
   137ee:	68f8      	ldr	r0, [r7, #12]
   137f0:	4619      	mov	r1, r3
   137f2:	2204      	movs	r2, #4
   137f4:	f7ff fe96 	bl	13524 <quePut>
   137f8:	6138      	str	r0, [r7, #16]
	CHECK(ret >= 0, lblKO);
   137fa:	693b      	ldr	r3, [r7, #16]
   137fc:	2b00      	cmp	r3, #0
   137fe:	db0b      	blt.n	13818 <quePutTlv+0x64>

	ret = quePut(que, val, len);
   13800:	88fb      	ldrh	r3, [r7, #6]
   13802:	68f8      	ldr	r0, [r7, #12]
   13804:	6839      	ldr	r1, [r7, #0]
   13806:	461a      	mov	r2, r3
   13808:	f7ff fe8c 	bl	13524 <quePut>
   1380c:	6138      	str	r0, [r7, #16]
	CHECK(ret >= 0, lblKO);
   1380e:	693b      	ldr	r3, [r7, #16]
   13810:	2b00      	cmp	r3, #0
   13812:	db01      	blt.n	13818 <quePutTlv+0x64>

	return ret;
   13814:	693b      	ldr	r3, [r7, #16]
   13816:	e001      	b.n	1381c <quePutTlv+0x68>
	lblKO:return -1;
   13818:	f04f 33ff 	mov.w	r3, #4294967295
}
   1381c:	4618      	mov	r0, r3
   1381e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13822:	f2c0 0302 	movt	r3, #2
   13826:	697a      	ldr	r2, [r7, #20]
   13828:	681b      	ldr	r3, [r3, #0]
   1382a:	429a      	cmp	r2, r3
   1382c:	d001      	beq.n	13832 <quePutTlv+0x7e>
   1382e:	f7f5 fbb9 	bl	8fa4 <__stack_chk_fail>
   13832:	f107 0718 	add.w	r7, r7, #24
   13836:	46bd      	mov	sp, r7
   13838:	bd80      	pop	{r7, pc}
   1383a:	bf00      	nop

0001383c <queGetTag>:
 *    - queNxt(que)==sizeof(card)
 * \return number of bytes retrieved (sizeof(card)); negative value if failure
 * \header sys\\sys.h
 * \source sys\\tbx.c
 */
int queGetTag(tQueue * que, card * tag) {
   1383c:	b580      	push	{r7, lr}
   1383e:	b084      	sub	sp, #16
   13840:	af00      	add	r7, sp, #0
   13842:	6078      	str	r0, [r7, #4]
   13844:	6039      	str	r1, [r7, #0]
   13846:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1384a:	f2c0 0302 	movt	r3, #2
   1384e:	681b      	ldr	r3, [r3, #0]
   13850:	60fb      	str	r3, [r7, #12]
	int ret;

	VERIFY(queLen(que));
   13852:	6878      	ldr	r0, [r7, #4]
   13854:	f7ff ff4a 	bl	136ec <queLen>
	VERIFY(queNxt(que) == sizeof(card));
   13858:	6878      	ldr	r0, [r7, #4]
   1385a:	f7ff fec3 	bl	135e4 <queNxt>

	ret = queGet(que, (byte *) tag);
   1385e:	6878      	ldr	r0, [r7, #4]
   13860:	6839      	ldr	r1, [r7, #0]
   13862:	f7ff fef9 	bl	13658 <queGet>
   13866:	60b8      	str	r0, [r7, #8]
	VERIFY(ret == sizeof(card));

	return ret;
   13868:	68bb      	ldr	r3, [r7, #8]
}
   1386a:	4618      	mov	r0, r3
   1386c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13870:	f2c0 0302 	movt	r3, #2
   13874:	68fa      	ldr	r2, [r7, #12]
   13876:	681b      	ldr	r3, [r3, #0]
   13878:	429a      	cmp	r2, r3
   1387a:	d001      	beq.n	13880 <queGetTag+0x44>
   1387c:	f7f5 fb92 	bl	8fa4 <__stack_chk_fail>
   13880:	f107 0710 	add.w	r7, r7, #16
   13884:	46bd      	mov	sp, r7
   13886:	bd80      	pop	{r7, pc}

00013888 <queGetTlv>:
 *    - val!=0
 * \return number of bytes retrieved; negative value if failure
 * \header sys\\sys.h
 * \source sys\\tbx.c
 */
int queGetTlv(tQueue * que, card * tag, word * len, byte * val) {
   13888:	b580      	push	{r7, lr}
   1388a:	b086      	sub	sp, #24
   1388c:	af00      	add	r7, sp, #0
   1388e:	60f8      	str	r0, [r7, #12]
   13890:	60b9      	str	r1, [r7, #8]
   13892:	607a      	str	r2, [r7, #4]
   13894:	603b      	str	r3, [r7, #0]
   13896:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1389a:	f2c0 0302 	movt	r3, #2
   1389e:	681b      	ldr	r3, [r3, #0]
   138a0:	617b      	str	r3, [r7, #20]
	int ret;

	VERIFY(queLen(que) >= 2);
   138a2:	68f8      	ldr	r0, [r7, #12]
   138a4:	f7ff ff22 	bl	136ec <queLen>

	ret = queGetTag(que, tag);
   138a8:	68f8      	ldr	r0, [r7, #12]
   138aa:	68b9      	ldr	r1, [r7, #8]
   138ac:	f7ff ffc6 	bl	1383c <queGetTag>
   138b0:	6138      	str	r0, [r7, #16]
	VERIFY(ret == sizeof(card));

	ret = queGet(que, val);
   138b2:	68f8      	ldr	r0, [r7, #12]
   138b4:	6839      	ldr	r1, [r7, #0]
   138b6:	f7ff fecf 	bl	13658 <queGet>
   138ba:	6138      	str	r0, [r7, #16]
	VERIFY(ret > 0);

	*len = (word) ret;
   138bc:	693b      	ldr	r3, [r7, #16]
   138be:	b29a      	uxth	r2, r3
   138c0:	687b      	ldr	r3, [r7, #4]
   138c2:	801a      	strh	r2, [r3, #0]

	return ret;
   138c4:	693b      	ldr	r3, [r7, #16]
}
   138c6:	4618      	mov	r0, r3
   138c8:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   138cc:	f2c0 0302 	movt	r3, #2
   138d0:	697a      	ldr	r2, [r7, #20]
   138d2:	681b      	ldr	r3, [r3, #0]
   138d4:	429a      	cmp	r2, r3
   138d6:	d001      	beq.n	138dc <queGetTlv+0x54>
   138d8:	f7f5 fb64 	bl	8fa4 <__stack_chk_fail>
   138dc:	f107 0718 	add.w	r7, r7, #24
   138e0:	46bd      	mov	sp, r7
   138e2:	bd80      	pop	{r7, pc}

000138e4 <queFindTlv>:
 * \param val (O) pointer to the data containing tag value
 * \return number of bytes retrieved; 0 if tag is not found in the queue
 * \header sys\\sys.h
 * \source sys\\tbx.c
 */
word queFindTlv(tQueue * que, card tag, byte * val) {
   138e4:	b580      	push	{r7, lr}
   138e6:	b088      	sub	sp, #32
   138e8:	af00      	add	r7, sp, #0
   138ea:	60f8      	str	r0, [r7, #12]
   138ec:	60b9      	str	r1, [r7, #8]
   138ee:	607a      	str	r2, [r7, #4]
   138f0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   138f4:	f2c0 0302 	movt	r3, #2
   138f8:	681b      	ldr	r3, [r3, #0]
   138fa:	61fb      	str	r3, [r7, #28]
	card tmp;
	word len = 0;
   138fc:	2300      	movs	r3, #0
   138fe:	82fb      	strh	r3, [r7, #22]

	queRewind(que);
   13900:	68f8      	ldr	r0, [r7, #12]
   13902:	f7ff ff0f 	bl	13724 <queRewind>
	while(queLen(que)) {
   13906:	e00f      	b.n	13928 <queFindTlv+0x44>
		queGetTlv(que, &tmp, &len, val);
   13908:	f107 0218 	add.w	r2, r7, #24
   1390c:	f107 0316 	add.w	r3, r7, #22
   13910:	68f8      	ldr	r0, [r7, #12]
   13912:	4611      	mov	r1, r2
   13914:	461a      	mov	r2, r3
   13916:	687b      	ldr	r3, [r7, #4]
   13918:	f7ff ffb6 	bl	13888 <queGetTlv>
		VERIFY(len <= 256);

		if(tag == tmp) {
   1391c:	69bb      	ldr	r3, [r7, #24]
   1391e:	68ba      	ldr	r2, [r7, #8]
   13920:	429a      	cmp	r2, r3
   13922:	d101      	bne.n	13928 <queFindTlv+0x44>
			return len;
   13924:	8afb      	ldrh	r3, [r7, #22]
   13926:	e00a      	b.n	1393e <queFindTlv+0x5a>
word queFindTlv(tQueue * que, card tag, byte * val) {
	card tmp;
	word len = 0;

	queRewind(que);
	while(queLen(que)) {
   13928:	68f8      	ldr	r0, [r7, #12]
   1392a:	f7ff fedf 	bl	136ec <queLen>
   1392e:	4603      	mov	r3, r0
   13930:	2b00      	cmp	r3, #0
   13932:	d1e9      	bne.n	13908 <queFindTlv+0x24>
		if(tag == tmp) {
			return len;
		}
	}

	len = 0;
   13934:	2300      	movs	r3, #0
   13936:	82fb      	strh	r3, [r7, #22]
	val = 0;
   13938:	2300      	movs	r3, #0
   1393a:	607b      	str	r3, [r7, #4]
	return len;
   1393c:	8afb      	ldrh	r3, [r7, #22]
}
   1393e:	4618      	mov	r0, r3
   13940:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13944:	f2c0 0302 	movt	r3, #2
   13948:	69fa      	ldr	r2, [r7, #28]
   1394a:	681b      	ldr	r3, [r3, #0]
   1394c:	429a      	cmp	r2, r3
   1394e:	d001      	beq.n	13954 <queFindTlv+0x70>
   13950:	f7f5 fb28 	bl	8fa4 <__stack_chk_fail>
   13954:	f107 0720 	add.w	r7, r7, #32
   13958:	46bd      	mov	sp, r7
   1395a:	bd80      	pop	{r7, pc}

0001395c <queMergeTlv>:
 * \param que2 (I) TLV data to be copied
 * \return number of elements in merged queue if OK; negative value if failure
 * \header sys\\sys.h
 * \source sys\\tbx.c
 */
int queMergeTlv(tQueue * que1, tQueue * que2) {
   1395c:	b590      	push	{r4, r7, lr}
   1395e:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
   13962:	af00      	add	r7, sp, #0
   13964:	1d3b      	adds	r3, r7, #4
   13966:	6018      	str	r0, [r3, #0]
   13968:	463b      	mov	r3, r7
   1396a:	6019      	str	r1, [r3, #0]
   1396c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13970:	f2c0 0302 	movt	r3, #2
   13974:	681b      	ldr	r3, [r3, #0]
   13976:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	card tag1, tag2;
	word len1, len2;
	byte buf1[256], buf2[256];

	//Check que1 if tags from que2 are already present
	queRewind(que2);
   1397a:	463b      	mov	r3, r7
   1397c:	6818      	ldr	r0, [r3, #0]
   1397e:	f7ff fed1 	bl	13724 <queRewind>
	while(queLen(que2)) {
   13982:	e054      	b.n	13a2e <queMergeTlv+0xd2>
		memset(buf2, 0, sizeof(buf2));
   13984:	f507 738e 	add.w	r3, r7, #284	; 0x11c
   13988:	4618      	mov	r0, r3
   1398a:	2100      	movs	r1, #0
   1398c:	f44f 7280 	mov.w	r2, #256	; 0x100
   13990:	f7f5 e914 	blx	8bbc <_init+0x5c>
		ret = queGetTlv(que2, &tag2, &len2, buf2);
   13994:	f107 0418 	add.w	r4, r7, #24
   13998:	4638      	mov	r0, r7
   1399a:	f107 0114 	add.w	r1, r7, #20
   1399e:	f107 020e 	add.w	r2, r7, #14
   139a2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
   139a6:	6800      	ldr	r0, [r0, #0]
   139a8:	f7ff ff6e 	bl	13888 <queGetTlv>
   139ac:	6020      	str	r0, [r4, #0]
		VERIFY(ret >= 0);
		VERIFY(ret == len2);
		CHECK(len2 <= 256, lblKO);
   139ae:	f107 030e 	add.w	r3, r7, #14
   139b2:	881b      	ldrh	r3, [r3, #0]
   139b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   139b8:	d84e      	bhi.n	13a58 <queMergeTlv+0xfc>

		queRewind(que1);
   139ba:	1d3b      	adds	r3, r7, #4
   139bc:	6818      	ldr	r0, [r3, #0]
   139be:	f7ff feb1 	bl	13724 <queRewind>
		while(queLen(que1)) {
   139c2:	e021      	b.n	13a08 <queMergeTlv+0xac>
			memset(buf1, 0, sizeof(buf1));
   139c4:	f107 031c 	add.w	r3, r7, #28
   139c8:	4618      	mov	r0, r3
   139ca:	2100      	movs	r1, #0
   139cc:	f44f 7280 	mov.w	r2, #256	; 0x100
   139d0:	f7f5 e8f4 	blx	8bbc <_init+0x5c>
			ret = queGetTlv(que1, &tag1, &len1, buf1);
   139d4:	f107 0418 	add.w	r4, r7, #24
   139d8:	1d38      	adds	r0, r7, #4
   139da:	f107 0110 	add.w	r1, r7, #16
   139de:	f107 020c 	add.w	r2, r7, #12
   139e2:	f107 031c 	add.w	r3, r7, #28
   139e6:	6800      	ldr	r0, [r0, #0]
   139e8:	f7ff ff4e 	bl	13888 <queGetTlv>
   139ec:	6020      	str	r0, [r4, #0]
			VERIFY(ret >= 0);
			VERIFY(ret == len1);
			CHECK(len1 <= 256, lblKO);
   139ee:	f107 030c 	add.w	r3, r7, #12
   139f2:	881b      	ldrh	r3, [r3, #0]
   139f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   139f8:	d82e      	bhi.n	13a58 <queMergeTlv+0xfc>

			if(tag1 == tag2) {
   139fa:	f107 0310 	add.w	r3, r7, #16
   139fe:	681a      	ldr	r2, [r3, #0]
   13a00:	f107 0314 	add.w	r3, r7, #20
   13a04:	681b      	ldr	r3, [r3, #0]
   13a06:	429a      	cmp	r2, r3
		VERIFY(ret >= 0);
		VERIFY(ret == len2);
		CHECK(len2 <= 256, lblKO);

		queRewind(que1);
		while(queLen(que1)) {
   13a08:	1d3b      	adds	r3, r7, #4
   13a0a:	6818      	ldr	r0, [r3, #0]
   13a0c:	f7ff fe6e 	bl	136ec <queLen>
   13a10:	4603      	mov	r3, r0
   13a12:	2b00      	cmp	r3, #0
   13a14:	d1d6      	bne.n	139c4 <queMergeTlv+0x68>
			if(tag1 == tag2) {
				continue;
			}
		}

		quePutTlv(que1, tag2, len2, buf2);  //add tag if not present on main queue
   13a16:	f107 0314 	add.w	r3, r7, #20
   13a1a:	6819      	ldr	r1, [r3, #0]
   13a1c:	f107 030e 	add.w	r3, r7, #14
   13a20:	881a      	ldrh	r2, [r3, #0]
   13a22:	1d38      	adds	r0, r7, #4
   13a24:	f507 738e 	add.w	r3, r7, #284	; 0x11c
   13a28:	6800      	ldr	r0, [r0, #0]
   13a2a:	f7ff fec3 	bl	137b4 <quePutTlv>
	word len1, len2;
	byte buf1[256], buf2[256];

	//Check que1 if tags from que2 are already present
	queRewind(que2);
	while(queLen(que2)) {
   13a2e:	463b      	mov	r3, r7
   13a30:	6818      	ldr	r0, [r3, #0]
   13a32:	f7ff fe5b 	bl	136ec <queLen>
   13a36:	4603      	mov	r3, r0
   13a38:	2b00      	cmp	r3, #0
   13a3a:	d1a3      	bne.n	13984 <queMergeTlv+0x28>
		}

		quePutTlv(que1, tag2, len2, buf2);  //add tag if not present on main queue
	}

	queRewind(que1);
   13a3c:	1d3b      	adds	r3, r7, #4
   13a3e:	6818      	ldr	r0, [r3, #0]
   13a40:	f7ff fe70 	bl	13724 <queRewind>
	ret = queLen(que1);
   13a44:	1d3b      	adds	r3, r7, #4
   13a46:	6818      	ldr	r0, [r3, #0]
   13a48:	f7ff fe50 	bl	136ec <queLen>
   13a4c:	4603      	mov	r3, r0
   13a4e:	461a      	mov	r2, r3
   13a50:	f107 0318 	add.w	r3, r7, #24
   13a54:	601a      	str	r2, [r3, #0]
	goto lblEnd;
   13a56:	e004      	b.n	13a62 <queMergeTlv+0x106>

	lblKO:
	ret = -1;
   13a58:	f107 0318 	add.w	r3, r7, #24
   13a5c:	f04f 32ff 	mov.w	r2, #4294967295
   13a60:	601a      	str	r2, [r3, #0]
	lblEnd:
	return ret;
   13a62:	f107 0318 	add.w	r3, r7, #24
   13a66:	681b      	ldr	r3, [r3, #0]
}
   13a68:	4618      	mov	r0, r3
   13a6a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13a6e:	f2c0 0302 	movt	r3, #2
   13a72:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
   13a76:	681b      	ldr	r3, [r3, #0]
   13a78:	429a      	cmp	r2, r3
   13a7a:	d001      	beq.n	13a80 <queMergeTlv+0x124>
   13a7c:	f7f5 fa92 	bl	8fa4 <__stack_chk_fail>
   13a80:	f507 7709 	add.w	r7, r7, #548	; 0x224
   13a84:	46bd      	mov	sp, r7
   13a86:	bd90      	pop	{r4, r7, pc}

00013a88 <bitOn>:
 * \param idx (I) Related bit number.
 * \return N/A
 * \header sys\\sys.h
 * \source sys\\tbx.c
 */
void bitOn(byte * buf, byte idx) {
   13a88:	b580      	push	{r7, lr}
   13a8a:	b084      	sub	sp, #16
   13a8c:	af00      	add	r7, sp, #0
   13a8e:	6078      	str	r0, [r7, #4]
   13a90:	460b      	mov	r3, r1
   13a92:	70fb      	strb	r3, [r7, #3]
   13a94:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13a98:	f2c0 0302 	movt	r3, #2
   13a9c:	681b      	ldr	r3, [r3, #0]
   13a9e:	60fb      	str	r3, [r7, #12]
	VERIFY(buf);
	VERIFY(idx);
	idx--;
   13aa0:	78fb      	ldrb	r3, [r7, #3]
   13aa2:	3b01      	subs	r3, #1
   13aa4:	70fb      	strb	r3, [r7, #3]
	while(idx >= 8) {
   13aa6:	e005      	b.n	13ab4 <bitOn+0x2c>
		buf++;
   13aa8:	687b      	ldr	r3, [r7, #4]
   13aaa:	3301      	adds	r3, #1
   13aac:	607b      	str	r3, [r7, #4]
		idx -= 8;
   13aae:	78fb      	ldrb	r3, [r7, #3]
   13ab0:	3b08      	subs	r3, #8
   13ab2:	70fb      	strb	r3, [r7, #3]
 */
void bitOn(byte * buf, byte idx) {
	VERIFY(buf);
	VERIFY(idx);
	idx--;
	while(idx >= 8) {
   13ab4:	78fb      	ldrb	r3, [r7, #3]
   13ab6:	2b07      	cmp	r3, #7
   13ab8:	d8f6      	bhi.n	13aa8 <bitOn+0x20>
		buf++;
		idx -= 8;
	}
	*buf |= (0x01 << (7 - idx));
   13aba:	687b      	ldr	r3, [r7, #4]
   13abc:	781b      	ldrb	r3, [r3, #0]
   13abe:	b2da      	uxtb	r2, r3
   13ac0:	78fb      	ldrb	r3, [r7, #3]
   13ac2:	f1c3 0307 	rsb	r3, r3, #7
   13ac6:	2101      	movs	r1, #1
   13ac8:	fa01 f303 	lsl.w	r3, r1, r3
   13acc:	b2db      	uxtb	r3, r3
   13ace:	4313      	orrs	r3, r2
   13ad0:	b2db      	uxtb	r3, r3
   13ad2:	b2da      	uxtb	r2, r3
   13ad4:	687b      	ldr	r3, [r7, #4]
   13ad6:	701a      	strb	r2, [r3, #0]
}
   13ad8:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13adc:	f2c0 0302 	movt	r3, #2
   13ae0:	68fa      	ldr	r2, [r7, #12]
   13ae2:	681b      	ldr	r3, [r3, #0]
   13ae4:	429a      	cmp	r2, r3
   13ae6:	d001      	beq.n	13aec <bitOn+0x64>
   13ae8:	f7f5 fa5c 	bl	8fa4 <__stack_chk_fail>
   13aec:	f107 0710 	add.w	r7, r7, #16
   13af0:	46bd      	mov	sp, r7
   13af2:	bd80      	pop	{r7, pc}

00013af4 <bitOff>:
 * \param       idx (I) Related bit number.
 * \return N/A
 * \header sys\\sys.h
 * \source sys\\tbx.c
 */
void bitOff(byte * buf, byte idx) {
   13af4:	b580      	push	{r7, lr}
   13af6:	b084      	sub	sp, #16
   13af8:	af00      	add	r7, sp, #0
   13afa:	6078      	str	r0, [r7, #4]
   13afc:	460b      	mov	r3, r1
   13afe:	70fb      	strb	r3, [r7, #3]
   13b00:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13b04:	f2c0 0302 	movt	r3, #2
   13b08:	681b      	ldr	r3, [r3, #0]
   13b0a:	60fb      	str	r3, [r7, #12]
	VERIFY(buf);
	VERIFY(idx);
	idx--;
   13b0c:	78fb      	ldrb	r3, [r7, #3]
   13b0e:	3b01      	subs	r3, #1
   13b10:	70fb      	strb	r3, [r7, #3]
	while(idx >= 8) {
   13b12:	e005      	b.n	13b20 <bitOff+0x2c>
		buf++;
   13b14:	687b      	ldr	r3, [r7, #4]
   13b16:	3301      	adds	r3, #1
   13b18:	607b      	str	r3, [r7, #4]
		idx -= 8;
   13b1a:	78fb      	ldrb	r3, [r7, #3]
   13b1c:	3b08      	subs	r3, #8
   13b1e:	70fb      	strb	r3, [r7, #3]
 */
void bitOff(byte * buf, byte idx) {
	VERIFY(buf);
	VERIFY(idx);
	idx--;
	while(idx >= 8) {
   13b20:	78fb      	ldrb	r3, [r7, #3]
   13b22:	2b07      	cmp	r3, #7
   13b24:	d8f6      	bhi.n	13b14 <bitOff+0x20>
		buf++;
		idx -= 8;
	}
	*buf &= ~(0x01 << (7 - idx));
   13b26:	687b      	ldr	r3, [r7, #4]
   13b28:	781b      	ldrb	r3, [r3, #0]
   13b2a:	b2da      	uxtb	r2, r3
   13b2c:	78fb      	ldrb	r3, [r7, #3]
   13b2e:	f1c3 0307 	rsb	r3, r3, #7
   13b32:	2101      	movs	r1, #1
   13b34:	fa01 f303 	lsl.w	r3, r1, r3
   13b38:	b2db      	uxtb	r3, r3
   13b3a:	43db      	mvns	r3, r3
   13b3c:	b2db      	uxtb	r3, r3
   13b3e:	4013      	ands	r3, r2
   13b40:	b2db      	uxtb	r3, r3
   13b42:	b2da      	uxtb	r2, r3
   13b44:	687b      	ldr	r3, [r7, #4]
   13b46:	701a      	strb	r2, [r3, #0]
}
   13b48:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13b4c:	f2c0 0302 	movt	r3, #2
   13b50:	68fa      	ldr	r2, [r7, #12]
   13b52:	681b      	ldr	r3, [r3, #0]
   13b54:	429a      	cmp	r2, r3
   13b56:	d001      	beq.n	13b5c <bitOff+0x68>
   13b58:	f7f5 fa24 	bl	8fa4 <__stack_chk_fail>
   13b5c:	f107 0710 	add.w	r7, r7, #16
   13b60:	46bd      	mov	sp, r7
   13b62:	bd80      	pop	{r7, pc}

00013b64 <bitTest>:
 *    - zero if the related bit is off.
 *    - non-zero otherwise.
 * \header sys\\sys.h
 * \source sys\\tbx.c
 */
byte bitTest(const byte * buf, byte idx) {
   13b64:	b580      	push	{r7, lr}
   13b66:	b084      	sub	sp, #16
   13b68:	af00      	add	r7, sp, #0
   13b6a:	6078      	str	r0, [r7, #4]
   13b6c:	460b      	mov	r3, r1
   13b6e:	70fb      	strb	r3, [r7, #3]
   13b70:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13b74:	f2c0 0302 	movt	r3, #2
   13b78:	681b      	ldr	r3, [r3, #0]
   13b7a:	60fb      	str	r3, [r7, #12]
	VERIFY(buf);
	VERIFY(idx);
	idx--;
   13b7c:	78fb      	ldrb	r3, [r7, #3]
   13b7e:	3b01      	subs	r3, #1
   13b80:	70fb      	strb	r3, [r7, #3]
	while(idx >= 8) {
   13b82:	e005      	b.n	13b90 <bitTest+0x2c>
		buf++;
   13b84:	687b      	ldr	r3, [r7, #4]
   13b86:	3301      	adds	r3, #1
   13b88:	607b      	str	r3, [r7, #4]
		idx -= 8;
   13b8a:	78fb      	ldrb	r3, [r7, #3]
   13b8c:	3b08      	subs	r3, #8
   13b8e:	70fb      	strb	r3, [r7, #3]
 */
byte bitTest(const byte * buf, byte idx) {
	VERIFY(buf);
	VERIFY(idx);
	idx--;
	while(idx >= 8) {
   13b90:	78fb      	ldrb	r3, [r7, #3]
   13b92:	2b07      	cmp	r3, #7
   13b94:	d8f6      	bhi.n	13b84 <bitTest+0x20>
		buf++;
		idx -= 8;
	}
	return ((*buf) >> (7 - idx)) & 0x01;
   13b96:	687b      	ldr	r3, [r7, #4]
   13b98:	781b      	ldrb	r3, [r3, #0]
   13b9a:	461a      	mov	r2, r3
   13b9c:	78fb      	ldrb	r3, [r7, #3]
   13b9e:	f1c3 0307 	rsb	r3, r3, #7
   13ba2:	fa42 f303 	asr.w	r3, r2, r3
   13ba6:	b2db      	uxtb	r3, r3
   13ba8:	f003 0301 	and.w	r3, r3, #1
   13bac:	b2db      	uxtb	r3, r3
}
   13bae:	4618      	mov	r0, r3
   13bb0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13bb4:	f2c0 0302 	movt	r3, #2
   13bb8:	68fa      	ldr	r2, [r7, #12]
   13bba:	681b      	ldr	r3, [r3, #0]
   13bbc:	429a      	cmp	r2, r3
   13bbe:	d001      	beq.n	13bc4 <bitTest+0x60>
   13bc0:	f7f5 f9f0 	bl	8fa4 <__stack_chk_fail>
   13bc4:	f107 0710 	add.w	r7, r7, #16
   13bc8:	46bd      	mov	sp, r7
   13bca:	bd80      	pop	{r7, pc}

00013bcc <tbxParity>:
 * \param typ (I) Even or Odd parity
 * \return no
 * \sa Header: sys\\sys.h
 * \sa Source: sys\\tbx.c
 */
void tbxParity(byte * buf, word dim, byte par, byte typ) {  //set parity bits
   13bcc:	b580      	push	{r7, lr}
   13bce:	b084      	sub	sp, #16
   13bd0:	af00      	add	r7, sp, #0
   13bd2:	6078      	str	r0, [r7, #4]
   13bd4:	8079      	strh	r1, [r7, #2]
   13bd6:	707a      	strb	r2, [r7, #1]
   13bd8:	703b      	strb	r3, [r7, #0]
   13bda:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13bde:	f2c0 0302 	movt	r3, #2
   13be2:	681b      	ldr	r3, [r3, #0]
   13be4:	60fb      	str	r3, [r7, #12]
	byte cnt, idx;

	VERIFY(buf);
	while(dim--) {
   13be6:	e045      	b.n	13c74 <tbxParity+0xa8>
		cnt = 0;
   13be8:	2300      	movs	r3, #0
   13bea:	72bb      	strb	r3, [r7, #10]
		for (idx = 1; idx <= 8; idx++) {
   13bec:	2301      	movs	r3, #1
   13bee:	72fb      	strb	r3, [r7, #11]
   13bf0:	e013      	b.n	13c1a <tbxParity+0x4e>
			if(idx == par)
   13bf2:	7afa      	ldrb	r2, [r7, #11]
   13bf4:	787b      	ldrb	r3, [r7, #1]
   13bf6:	429a      	cmp	r2, r3
   13bf8:	d00b      	beq.n	13c12 <tbxParity+0x46>
				continue;
			if(bitTest(buf, idx))
   13bfa:	7afb      	ldrb	r3, [r7, #11]
   13bfc:	6878      	ldr	r0, [r7, #4]
   13bfe:	4619      	mov	r1, r3
   13c00:	f7ff ffb0 	bl	13b64 <bitTest>
   13c04:	4603      	mov	r3, r0
   13c06:	2b00      	cmp	r3, #0
   13c08:	d004      	beq.n	13c14 <tbxParity+0x48>
				cnt++;
   13c0a:	7abb      	ldrb	r3, [r7, #10]
   13c0c:	3301      	adds	r3, #1
   13c0e:	72bb      	strb	r3, [r7, #10]
   13c10:	e000      	b.n	13c14 <tbxParity+0x48>
	VERIFY(buf);
	while(dim--) {
		cnt = 0;
		for (idx = 1; idx <= 8; idx++) {
			if(idx == par)
				continue;
   13c12:	bf00      	nop
	byte cnt, idx;

	VERIFY(buf);
	while(dim--) {
		cnt = 0;
		for (idx = 1; idx <= 8; idx++) {
   13c14:	7afb      	ldrb	r3, [r7, #11]
   13c16:	3301      	adds	r3, #1
   13c18:	72fb      	strb	r3, [r7, #11]
   13c1a:	7afb      	ldrb	r3, [r7, #11]
   13c1c:	2b08      	cmp	r3, #8
   13c1e:	d9e8      	bls.n	13bf2 <tbxParity+0x26>
			if(idx == par)
				continue;
			if(bitTest(buf, idx))
				cnt++;
		}
		switch (typ) {
   13c20:	783b      	ldrb	r3, [r7, #0]
   13c22:	2b45      	cmp	r3, #69	; 0x45
   13c24:	d111      	bne.n	13c4a <tbxParity+0x7e>
		case 'E':
			if(cnt % 2)
   13c26:	7abb      	ldrb	r3, [r7, #10]
   13c28:	f003 0301 	and.w	r3, r3, #1
   13c2c:	b2db      	uxtb	r3, r3
   13c2e:	2b00      	cmp	r3, #0
   13c30:	d005      	beq.n	13c3e <tbxParity+0x72>
				bitOff(buf, par);
   13c32:	787b      	ldrb	r3, [r7, #1]
   13c34:	6878      	ldr	r0, [r7, #4]
   13c36:	4619      	mov	r1, r3
   13c38:	f7ff ff5c 	bl	13af4 <bitOff>
			else
				bitOn(buf, par);
			break;
   13c3c:	e017      	b.n	13c6e <tbxParity+0xa2>
		switch (typ) {
		case 'E':
			if(cnt % 2)
				bitOff(buf, par);
			else
				bitOn(buf, par);
   13c3e:	787b      	ldrb	r3, [r7, #1]
   13c40:	6878      	ldr	r0, [r7, #4]
   13c42:	4619      	mov	r1, r3
   13c44:	f7ff ff20 	bl	13a88 <bitOn>
			break;
   13c48:	e011      	b.n	13c6e <tbxParity+0xa2>
		case 'O':
		default:
			if(cnt % 2)
   13c4a:	7abb      	ldrb	r3, [r7, #10]
   13c4c:	f003 0301 	and.w	r3, r3, #1
   13c50:	b2db      	uxtb	r3, r3
   13c52:	2b00      	cmp	r3, #0
   13c54:	d005      	beq.n	13c62 <tbxParity+0x96>
				bitOn(buf, par);
   13c56:	787b      	ldrb	r3, [r7, #1]
   13c58:	6878      	ldr	r0, [r7, #4]
   13c5a:	4619      	mov	r1, r3
   13c5c:	f7ff ff14 	bl	13a88 <bitOn>
			else
				bitOff(buf, par);
			break;
   13c60:	e004      	b.n	13c6c <tbxParity+0xa0>
		case 'O':
		default:
			if(cnt % 2)
				bitOn(buf, par);
			else
				bitOff(buf, par);
   13c62:	787b      	ldrb	r3, [r7, #1]
   13c64:	6878      	ldr	r0, [r7, #4]
   13c66:	4619      	mov	r1, r3
   13c68:	f7ff ff44 	bl	13af4 <bitOff>
			break;
   13c6c:	bf00      	nop
		}

		buf++;
   13c6e:	687b      	ldr	r3, [r7, #4]
   13c70:	3301      	adds	r3, #1
   13c72:	607b      	str	r3, [r7, #4]
 */
void tbxParity(byte * buf, word dim, byte par, byte typ) {  //set parity bits
	byte cnt, idx;

	VERIFY(buf);
	while(dim--) {
   13c74:	887b      	ldrh	r3, [r7, #2]
   13c76:	2b00      	cmp	r3, #0
   13c78:	bf0c      	ite	eq
   13c7a:	2300      	moveq	r3, #0
   13c7c:	2301      	movne	r3, #1
   13c7e:	b2db      	uxtb	r3, r3
   13c80:	887a      	ldrh	r2, [r7, #2]
   13c82:	3a01      	subs	r2, #1
   13c84:	807a      	strh	r2, [r7, #2]
   13c86:	2b00      	cmp	r3, #0
   13c88:	d1ae      	bne.n	13be8 <tbxParity+0x1c>
			break;
		}

		buf++;
	}
}
   13c8a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13c8e:	f2c0 0302 	movt	r3, #2
   13c92:	68fa      	ldr	r2, [r7, #12]
   13c94:	681b      	ldr	r3, [r3, #0]
   13c96:	429a      	cmp	r2, r3
   13c98:	d001      	beq.n	13c9e <tbxParity+0xd2>
   13c9a:	f7f5 f983 	bl	8fa4 <__stack_chk_fail>
   13c9e:	f107 0710 	add.w	r7, r7, #16
   13ca2:	46bd      	mov	sp, r7
   13ca4:	bd80      	pop	{r7, pc}
   13ca6:	bf00      	nop

00013ca8 <tbxCheckParity>:
 * \param typ (I) Even or Odd parity
 * \return 1 if parity is OK, 0 if parity NOK;
 * \sa Header: sys\\sys.h
 * \sa Source: sys\\tbx.c
 */
byte tbxCheckParity(byte * buf, word dim, byte par, byte typ) { //check parity bits
   13ca8:	b580      	push	{r7, lr}
   13caa:	b084      	sub	sp, #16
   13cac:	af00      	add	r7, sp, #0
   13cae:	6078      	str	r0, [r7, #4]
   13cb0:	8079      	strh	r1, [r7, #2]
   13cb2:	707a      	strb	r2, [r7, #1]
   13cb4:	703b      	strb	r3, [r7, #0]
   13cb6:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13cba:	f2c0 0302 	movt	r3, #2
   13cbe:	681b      	ldr	r3, [r3, #0]
   13cc0:	60fb      	str	r3, [r7, #12]
	byte ret;
	byte cnt, idx;

	VERIFY(buf);
	ret = 1;
   13cc2:	2301      	movs	r3, #1
   13cc4:	727b      	strb	r3, [r7, #9]
	while(dim--) {
   13cc6:	e03b      	b.n	13d40 <tbxCheckParity+0x98>
		cnt = 0;
   13cc8:	2300      	movs	r3, #0
   13cca:	72bb      	strb	r3, [r7, #10]
		for (idx = 1; idx <= 8; idx++) {
   13ccc:	2301      	movs	r3, #1
   13cce:	72fb      	strb	r3, [r7, #11]
   13cd0:	e013      	b.n	13cfa <tbxCheckParity+0x52>
			if(idx == par)
   13cd2:	7afa      	ldrb	r2, [r7, #11]
   13cd4:	787b      	ldrb	r3, [r7, #1]
   13cd6:	429a      	cmp	r2, r3
   13cd8:	d00b      	beq.n	13cf2 <tbxCheckParity+0x4a>
				continue;
			if(bitTest(buf, idx))
   13cda:	7afb      	ldrb	r3, [r7, #11]
   13cdc:	6878      	ldr	r0, [r7, #4]
   13cde:	4619      	mov	r1, r3
   13ce0:	f7ff ff40 	bl	13b64 <bitTest>
   13ce4:	4603      	mov	r3, r0
   13ce6:	2b00      	cmp	r3, #0
   13ce8:	d004      	beq.n	13cf4 <tbxCheckParity+0x4c>
				cnt++;
   13cea:	7abb      	ldrb	r3, [r7, #10]
   13cec:	3301      	adds	r3, #1
   13cee:	72bb      	strb	r3, [r7, #10]
   13cf0:	e000      	b.n	13cf4 <tbxCheckParity+0x4c>
	ret = 1;
	while(dim--) {
		cnt = 0;
		for (idx = 1; idx <= 8; idx++) {
			if(idx == par)
				continue;
   13cf2:	bf00      	nop

	VERIFY(buf);
	ret = 1;
	while(dim--) {
		cnt = 0;
		for (idx = 1; idx <= 8; idx++) {
   13cf4:	7afb      	ldrb	r3, [r7, #11]
   13cf6:	3301      	adds	r3, #1
   13cf8:	72fb      	strb	r3, [r7, #11]
   13cfa:	7afb      	ldrb	r3, [r7, #11]
   13cfc:	2b08      	cmp	r3, #8
   13cfe:	d9e8      	bls.n	13cd2 <tbxCheckParity+0x2a>
			if(idx == par)
				continue;
			if(bitTest(buf, idx))
				cnt++;
		}
		bitTest(buf, par);
   13d00:	787b      	ldrb	r3, [r7, #1]
   13d02:	6878      	ldr	r0, [r7, #4]
   13d04:	4619      	mov	r1, r3
   13d06:	f7ff ff2d 	bl	13b64 <bitTest>
		switch (typ) {
   13d0a:	783b      	ldrb	r3, [r7, #0]
   13d0c:	2b4f      	cmp	r3, #79	; 0x4f
   13d0e:	d108      	bne.n	13d22 <tbxCheckParity+0x7a>
		case 'O':
			if(!(cnt % 2))
   13d10:	7abb      	ldrb	r3, [r7, #10]
   13d12:	f003 0301 	and.w	r3, r3, #1
   13d16:	b2db      	uxtb	r3, r3
   13d18:	2b00      	cmp	r3, #0
   13d1a:	d10b      	bne.n	13d34 <tbxCheckParity+0x8c>
				ret = 0;
   13d1c:	2300      	movs	r3, #0
   13d1e:	727b      	strb	r3, [r7, #9]
			break;
   13d20:	e008      	b.n	13d34 <tbxCheckParity+0x8c>
		case 'E':
		default:
			if(cnt % 2)
   13d22:	7abb      	ldrb	r3, [r7, #10]
   13d24:	f003 0301 	and.w	r3, r3, #1
   13d28:	b2db      	uxtb	r3, r3
   13d2a:	2b00      	cmp	r3, #0
   13d2c:	d004      	beq.n	13d38 <tbxCheckParity+0x90>
				ret = 0;
   13d2e:	2300      	movs	r3, #0
   13d30:	727b      	strb	r3, [r7, #9]
			break;
   13d32:	e001      	b.n	13d38 <tbxCheckParity+0x90>
		bitTest(buf, par);
		switch (typ) {
		case 'O':
			if(!(cnt % 2))
				ret = 0;
			break;
   13d34:	bf00      	nop
   13d36:	e000      	b.n	13d3a <tbxCheckParity+0x92>
		case 'E':
		default:
			if(cnt % 2)
				ret = 0;
			break;
   13d38:	bf00      	nop
		}
		buf++;
   13d3a:	687b      	ldr	r3, [r7, #4]
   13d3c:	3301      	adds	r3, #1
   13d3e:	607b      	str	r3, [r7, #4]
	byte ret;
	byte cnt, idx;

	VERIFY(buf);
	ret = 1;
	while(dim--) {
   13d40:	887b      	ldrh	r3, [r7, #2]
   13d42:	2b00      	cmp	r3, #0
   13d44:	bf0c      	ite	eq
   13d46:	2300      	moveq	r3, #0
   13d48:	2301      	movne	r3, #1
   13d4a:	b2db      	uxtb	r3, r3
   13d4c:	887a      	ldrh	r2, [r7, #2]
   13d4e:	3a01      	subs	r2, #1
   13d50:	807a      	strh	r2, [r7, #2]
   13d52:	2b00      	cmp	r3, #0
   13d54:	d1b8      	bne.n	13cc8 <tbxCheckParity+0x20>
				ret = 0;
			break;
		}
		buf++;
	}
	return ret;
   13d56:	7a7b      	ldrb	r3, [r7, #9]
}
   13d58:	4618      	mov	r0, r3
   13d5a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13d5e:	f2c0 0302 	movt	r3, #2
   13d62:	68fa      	ldr	r2, [r7, #12]
   13d64:	681b      	ldr	r3, [r3, #0]
   13d66:	429a      	cmp	r2, r3
   13d68:	d001      	beq.n	13d6e <tbxCheckParity+0xc6>
   13d6a:	f7f5 f91b 	bl	8fa4 <__stack_chk_fail>
   13d6e:	f107 0710 	add.w	r7, r7, #16
   13d72:	46bd      	mov	sp, r7
   13d74:	bd80      	pop	{r7, pc}
   13d76:	bf00      	nop

00013d78 <fmtSbs>:
 *    - strlen(dst)
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\fmt.c
 * \test tcab0024.c
 */
int fmtSbs(char *dst, const char *src, byte ofs, byte len) {
   13d78:	b580      	push	{r7, lr}
   13d7a:	b086      	sub	sp, #24
   13d7c:	af00      	add	r7, sp, #0
   13d7e:	60f8      	str	r0, [r7, #12]
   13d80:	60b9      	str	r1, [r7, #8]
   13d82:	71fa      	strb	r2, [r7, #7]
   13d84:	71bb      	strb	r3, [r7, #6]
   13d86:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13d8a:	f2c0 0302 	movt	r3, #2
   13d8e:	681b      	ldr	r3, [r3, #0]
   13d90:	617b      	str	r3, [r7, #20]
	VERIFY(dst);
	VERIFY(src);

	memcpy(dst, src + ofs, len);
   13d92:	79fb      	ldrb	r3, [r7, #7]
   13d94:	68ba      	ldr	r2, [r7, #8]
   13d96:	18d2      	adds	r2, r2, r3
   13d98:	79bb      	ldrb	r3, [r7, #6]
   13d9a:	68f8      	ldr	r0, [r7, #12]
   13d9c:	4611      	mov	r1, r2
   13d9e:	461a      	mov	r2, r3
   13da0:	f7f4 ef6a 	blx	8c78 <_init+0x118>
	dst[len] = 0;
   13da4:	79bb      	ldrb	r3, [r7, #6]
   13da6:	68fa      	ldr	r2, [r7, #12]
   13da8:	18d3      	adds	r3, r2, r3
   13daa:	2200      	movs	r2, #0
   13dac:	701a      	strb	r2, [r3, #0]

	return strlen(dst);
   13dae:	68f8      	ldr	r0, [r7, #12]
   13db0:	f7f4 ef68 	blx	8c84 <_init+0x124>
   13db4:	4603      	mov	r3, r0
}
   13db6:	4618      	mov	r0, r3
   13db8:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13dbc:	f2c0 0302 	movt	r3, #2
   13dc0:	697a      	ldr	r2, [r7, #20]
   13dc2:	681b      	ldr	r3, [r3, #0]
   13dc4:	429a      	cmp	r2, r3
   13dc6:	d001      	beq.n	13dcc <fmtSbs+0x54>
   13dc8:	f7f5 f8ec 	bl	8fa4 <__stack_chk_fail>
   13dcc:	f107 0718 	add.w	r7, r7, #24
   13dd0:	46bd      	mov	sp, r7
   13dd2:	bd80      	pop	{r7, pc}

00013dd4 <fmtTok>:
 *    - strlen(dst)
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\fmt.c
 * \test tcab0024.c
 */
int fmtTok(char *dst, const char *src, const char *sep) {
   13dd4:	b580      	push	{r7, lr}
   13dd6:	b088      	sub	sp, #32
   13dd8:	af00      	add	r7, sp, #0
   13dda:	60f8      	str	r0, [r7, #12]
   13ddc:	60b9      	str	r1, [r7, #8]
   13dde:	607a      	str	r2, [r7, #4]
   13de0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13de4:	f2c0 0302 	movt	r3, #2
   13de8:	681b      	ldr	r3, [r3, #0]
   13dea:	61fb      	str	r3, [r7, #28]
	const char *ptr;

	VERIFY(src);
	VERIFY(sep);

	len = 0;
   13dec:	2300      	movs	r3, #0
   13dee:	617b      	str	r3, [r7, #20]
	while(*src) {
   13df0:	e027      	b.n	13e42 <fmtTok+0x6e>
		ptr = sep;
   13df2:	687b      	ldr	r3, [r7, #4]
   13df4:	61bb      	str	r3, [r7, #24]
		while(*ptr) {
   13df6:	e008      	b.n	13e0a <fmtTok+0x36>
			if(*src == *ptr)
   13df8:	68bb      	ldr	r3, [r7, #8]
   13dfa:	781a      	ldrb	r2, [r3, #0]
   13dfc:	69bb      	ldr	r3, [r7, #24]
   13dfe:	781b      	ldrb	r3, [r3, #0]
   13e00:	429a      	cmp	r2, r3
   13e02:	d007      	beq.n	13e14 <fmtTok+0x40>
				break;
			ptr++;
   13e04:	69bb      	ldr	r3, [r7, #24]
   13e06:	3301      	adds	r3, #1
   13e08:	61bb      	str	r3, [r7, #24]
	VERIFY(sep);

	len = 0;
	while(*src) {
		ptr = sep;
		while(*ptr) {
   13e0a:	69bb      	ldr	r3, [r7, #24]
   13e0c:	781b      	ldrb	r3, [r3, #0]
   13e0e:	2b00      	cmp	r3, #0
   13e10:	d1f2      	bne.n	13df8 <fmtTok+0x24>
   13e12:	e000      	b.n	13e16 <fmtTok+0x42>
			if(*src == *ptr)
				break;
   13e14:	bf00      	nop
			ptr++;
		}
		if(*src == *ptr)
   13e16:	68bb      	ldr	r3, [r7, #8]
   13e18:	781a      	ldrb	r2, [r3, #0]
   13e1a:	69bb      	ldr	r3, [r7, #24]
   13e1c:	781b      	ldrb	r3, [r3, #0]
   13e1e:	429a      	cmp	r2, r3
   13e20:	d014      	beq.n	13e4c <fmtTok+0x78>
			break;
		if(dst)
   13e22:	68fb      	ldr	r3, [r7, #12]
   13e24:	2b00      	cmp	r3, #0
   13e26:	d006      	beq.n	13e36 <fmtTok+0x62>
			*dst++ = *src;
   13e28:	68bb      	ldr	r3, [r7, #8]
   13e2a:	781a      	ldrb	r2, [r3, #0]
   13e2c:	68fb      	ldr	r3, [r7, #12]
   13e2e:	701a      	strb	r2, [r3, #0]
   13e30:	68fb      	ldr	r3, [r7, #12]
   13e32:	3301      	adds	r3, #1
   13e34:	60fb      	str	r3, [r7, #12]
		src++;
   13e36:	68bb      	ldr	r3, [r7, #8]
   13e38:	3301      	adds	r3, #1
   13e3a:	60bb      	str	r3, [r7, #8]
		len++;
   13e3c:	697b      	ldr	r3, [r7, #20]
   13e3e:	3301      	adds	r3, #1
   13e40:	617b      	str	r3, [r7, #20]

	VERIFY(src);
	VERIFY(sep);

	len = 0;
	while(*src) {
   13e42:	68bb      	ldr	r3, [r7, #8]
   13e44:	781b      	ldrb	r3, [r3, #0]
   13e46:	2b00      	cmp	r3, #0
   13e48:	d1d3      	bne.n	13df2 <fmtTok+0x1e>
   13e4a:	e000      	b.n	13e4e <fmtTok+0x7a>
			if(*src == *ptr)
				break;
			ptr++;
		}
		if(*src == *ptr)
			break;
   13e4c:	bf00      	nop
		if(dst)
			*dst++ = *src;
		src++;
		len++;
	}
	if(dst)
   13e4e:	68fb      	ldr	r3, [r7, #12]
   13e50:	2b00      	cmp	r3, #0
   13e52:	d002      	beq.n	13e5a <fmtTok+0x86>
		*dst = 0;
   13e54:	68fb      	ldr	r3, [r7, #12]
   13e56:	2200      	movs	r2, #0
   13e58:	701a      	strb	r2, [r3, #0]
	return len;
   13e5a:	697b      	ldr	r3, [r7, #20]
}
   13e5c:	4618      	mov	r0, r3
   13e5e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13e62:	f2c0 0302 	movt	r3, #2
   13e66:	69fa      	ldr	r2, [r7, #28]
   13e68:	681b      	ldr	r3, [r3, #0]
   13e6a:	429a      	cmp	r2, r3
   13e6c:	d001      	beq.n	13e72 <fmtTok+0x9e>
   13e6e:	f7f5 f899 	bl	8fa4 <__stack_chk_fail>
   13e72:	f107 0720 	add.w	r7, r7, #32
   13e76:	46bd      	mov	sp, r7
   13e78:	bd80      	pop	{r7, pc}
   13e7a:	bf00      	nop

00013e7c <fmtPad>:
 *    - the length of the result string strlen(str)
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\fmt.c
 * \test tcab0024.c
 */
int fmtPad(char *str, int len, char chr) {
   13e7c:	b580      	push	{r7, lr}
   13e7e:	b088      	sub	sp, #32
   13e80:	af00      	add	r7, sp, #0
   13e82:	60f8      	str	r0, [r7, #12]
   13e84:	60b9      	str	r1, [r7, #8]
   13e86:	4613      	mov	r3, r2
   13e88:	71fb      	strb	r3, [r7, #7]
   13e8a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13e8e:	f2c0 0302 	movt	r3, #2
   13e92:	681b      	ldr	r3, [r3, #0]
   13e94:	61fb      	str	r3, [r7, #28]
	char dir;                   //pad direction (left or right)

	VERIFY(str);
	VERIFY(len != 0);

	dir = 'r';
   13e96:	2372      	movs	r3, #114	; 0x72
   13e98:	74fb      	strb	r3, [r7, #19]
	if(len < 0) {               //left pad?
   13e9a:	68bb      	ldr	r3, [r7, #8]
   13e9c:	2b00      	cmp	r3, #0
   13e9e:	da04      	bge.n	13eaa <fmtPad+0x2e>
		dir = 'l';
   13ea0:	236c      	movs	r3, #108	; 0x6c
   13ea2:	74fb      	strb	r3, [r7, #19]
		len = -len;
   13ea4:	68bb      	ldr	r3, [r7, #8]
   13ea6:	425b      	negs	r3, r3
   13ea8:	60bb      	str	r3, [r7, #8]
	}
	str[len] = 0;
   13eaa:	68bb      	ldr	r3, [r7, #8]
   13eac:	68fa      	ldr	r2, [r7, #12]
   13eae:	18d3      	adds	r3, r2, r3
   13eb0:	2200      	movs	r2, #0
   13eb2:	701a      	strb	r2, [r3, #0]

	dim = strlen(str);
   13eb4:	68f8      	ldr	r0, [r7, #12]
   13eb6:	f7f4 eee6 	blx	8c84 <_init+0x124>
   13eba:	4603      	mov	r3, r0
   13ebc:	61bb      	str	r3, [r7, #24]
	if(dim >= len)
   13ebe:	69ba      	ldr	r2, [r7, #24]
   13ec0:	68bb      	ldr	r3, [r7, #8]
   13ec2:	429a      	cmp	r2, r3
   13ec4:	db01      	blt.n	13eca <fmtPad+0x4e>
		return dim;             //string is long enough - nothing to pad
   13ec6:	69bb      	ldr	r3, [r7, #24]
   13ec8:	e021      	b.n	13f0e <fmtPad+0x92>

	ptr = str;                  //ptr will pont to the start of padding
   13eca:	68fb      	ldr	r3, [r7, #12]
   13ecc:	617b      	str	r3, [r7, #20]
	if(dir == 'l')
   13ece:	7cfb      	ldrb	r3, [r7, #19]
   13ed0:	2b6c      	cmp	r3, #108	; 0x6c
   13ed2:	d10b      	bne.n	13eec <fmtPad+0x70>
		memmove(str + len - dim, str, dim); //left padding: move characters to the right
   13ed4:	68ba      	ldr	r2, [r7, #8]
   13ed6:	69bb      	ldr	r3, [r7, #24]
   13ed8:	1ad3      	subs	r3, r2, r3
   13eda:	68fa      	ldr	r2, [r7, #12]
   13edc:	18d2      	adds	r2, r2, r3
   13ede:	69bb      	ldr	r3, [r7, #24]
   13ee0:	4610      	mov	r0, r2
   13ee2:	68f9      	ldr	r1, [r7, #12]
   13ee4:	461a      	mov	r2, r3
   13ee6:	f7f4 ee88 	blx	8bf8 <_init+0x98>
   13eea:	e003      	b.n	13ef4 <fmtPad+0x78>
	else
		ptr += dim;             //right padding: move the padding pointer to the end of the string
   13eec:	69bb      	ldr	r3, [r7, #24]
   13eee:	697a      	ldr	r2, [r7, #20]
   13ef0:	18d3      	adds	r3, r2, r3
   13ef2:	617b      	str	r3, [r7, #20]

	memset(ptr, chr, len - dim);    //now pad dim characters chr starting from ptr
   13ef4:	79fa      	ldrb	r2, [r7, #7]
   13ef6:	68b9      	ldr	r1, [r7, #8]
   13ef8:	69bb      	ldr	r3, [r7, #24]
   13efa:	1acb      	subs	r3, r1, r3
   13efc:	6978      	ldr	r0, [r7, #20]
   13efe:	4611      	mov	r1, r2
   13f00:	461a      	mov	r2, r3
   13f02:	f7f4 ee5c 	blx	8bbc <_init+0x5c>

	return strlen(str);
   13f06:	68f8      	ldr	r0, [r7, #12]
   13f08:	f7f4 eebc 	blx	8c84 <_init+0x124>
   13f0c:	4603      	mov	r3, r0
}
   13f0e:	4618      	mov	r0, r3
   13f10:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13f14:	f2c0 0302 	movt	r3, #2
   13f18:	69fa      	ldr	r2, [r7, #28]
   13f1a:	681b      	ldr	r3, [r3, #0]
   13f1c:	429a      	cmp	r2, r3
   13f1e:	d001      	beq.n	13f24 <fmtPad+0xa8>
   13f20:	f7f5 f840 	bl	8fa4 <__stack_chk_fail>
   13f24:	f107 0720 	add.w	r7, r7, #32
   13f28:	46bd      	mov	sp, r7
   13f2a:	bd80      	pop	{r7, pc}

00013f2c <fmtCnt>:
 *    - strlen(str)
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\fmt.c
 * \test tcab0024.c
 */
int fmtCnt(char *str, int len, char chr) {
   13f2c:	b580      	push	{r7, lr}
   13f2e:	b088      	sub	sp, #32
   13f30:	af00      	add	r7, sp, #0
   13f32:	60f8      	str	r0, [r7, #12]
   13f34:	60b9      	str	r1, [r7, #8]
   13f36:	4613      	mov	r3, r2
   13f38:	71fb      	strb	r3, [r7, #7]
   13f3a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   13f3e:	f2c0 0302 	movt	r3, #2
   13f42:	681b      	ldr	r3, [r3, #0]
   13f44:	61fb      	str	r3, [r7, #28]
	char *ptr;

	VERIFY(str);
	VERIFY(len != 0);

	idx = strlen(str);
   13f46:	68f8      	ldr	r0, [r7, #12]
   13f48:	f7f4 ee9c 	blx	8c84 <_init+0x124>
   13f4c:	4603      	mov	r3, r0
   13f4e:	75fb      	strb	r3, [r7, #23]
	while(idx--) {              //remove trailing chr
   13f50:	e00b      	b.n	13f6a <fmtCnt+0x3e>
		if(str[idx] != chr)
   13f52:	7dfb      	ldrb	r3, [r7, #23]
   13f54:	68fa      	ldr	r2, [r7, #12]
   13f56:	18d3      	adds	r3, r2, r3
   13f58:	781b      	ldrb	r3, [r3, #0]
   13f5a:	79fa      	ldrb	r2, [r7, #7]
   13f5c:	429a      	cmp	r2, r3
   13f5e:	d110      	bne.n	13f82 <fmtCnt+0x56>
			break;
		str[idx] = 0;
   13f60:	7dfb      	ldrb	r3, [r7, #23]
   13f62:	68fa      	ldr	r2, [r7, #12]
   13f64:	18d3      	adds	r3, r2, r3
   13f66:	2200      	movs	r2, #0
   13f68:	701a      	strb	r2, [r3, #0]

	VERIFY(str);
	VERIFY(len != 0);

	idx = strlen(str);
	while(idx--) {              //remove trailing chr
   13f6a:	7dfb      	ldrb	r3, [r7, #23]
   13f6c:	2b00      	cmp	r3, #0
   13f6e:	bf0c      	ite	eq
   13f70:	2300      	moveq	r3, #0
   13f72:	2301      	movne	r3, #1
   13f74:	b2db      	uxtb	r3, r3
   13f76:	7dfa      	ldrb	r2, [r7, #23]
   13f78:	3a01      	subs	r2, #1
   13f7a:	75fa      	strb	r2, [r7, #23]
   13f7c:	2b00      	cmp	r3, #0
   13f7e:	d1e8      	bne.n	13f52 <fmtCnt+0x26>
   13f80:	e000      	b.n	13f84 <fmtCnt+0x58>
		if(str[idx] != chr)
			break;
   13f82:	bf00      	nop
		str[idx] = 0;
	}

	idx = 0;
   13f84:	2300      	movs	r3, #0
   13f86:	75fb      	strb	r3, [r7, #23]
	while(str[idx] == chr)
   13f88:	e002      	b.n	13f90 <fmtCnt+0x64>
		idx++;                  //calculate leading chr
   13f8a:	7dfb      	ldrb	r3, [r7, #23]
   13f8c:	3301      	adds	r3, #1
   13f8e:	75fb      	strb	r3, [r7, #23]
			break;
		str[idx] = 0;
	}

	idx = 0;
	while(str[idx] == chr)
   13f90:	7dfb      	ldrb	r3, [r7, #23]
   13f92:	68fa      	ldr	r2, [r7, #12]
   13f94:	18d3      	adds	r3, r2, r3
   13f96:	781b      	ldrb	r3, [r3, #0]
   13f98:	79fa      	ldrb	r2, [r7, #7]
   13f9a:	429a      	cmp	r2, r3
   13f9c:	d0f5      	beq.n	13f8a <fmtCnt+0x5e>
		idx++;                  //calculate leading chr

	if(idx) {
   13f9e:	7dfb      	ldrb	r3, [r7, #23]
   13fa0:	2b00      	cmp	r3, #0
   13fa2:	d017      	beq.n	13fd4 <fmtCnt+0xa8>
		ptr = str;
   13fa4:	68fb      	ldr	r3, [r7, #12]
   13fa6:	61bb      	str	r3, [r7, #24]
		while(str[idx]) {
   13fa8:	e00b      	b.n	13fc2 <fmtCnt+0x96>
			*ptr++ = str[idx++];
   13faa:	7dfb      	ldrb	r3, [r7, #23]
   13fac:	68fa      	ldr	r2, [r7, #12]
   13fae:	18d3      	adds	r3, r2, r3
   13fb0:	781a      	ldrb	r2, [r3, #0]
   13fb2:	69bb      	ldr	r3, [r7, #24]
   13fb4:	701a      	strb	r2, [r3, #0]
   13fb6:	69bb      	ldr	r3, [r7, #24]
   13fb8:	3301      	adds	r3, #1
   13fba:	61bb      	str	r3, [r7, #24]
   13fbc:	7dfb      	ldrb	r3, [r7, #23]
   13fbe:	3301      	adds	r3, #1
   13fc0:	75fb      	strb	r3, [r7, #23]
	while(str[idx] == chr)
		idx++;                  //calculate leading chr

	if(idx) {
		ptr = str;
		while(str[idx]) {
   13fc2:	7dfb      	ldrb	r3, [r7, #23]
   13fc4:	68fa      	ldr	r2, [r7, #12]
   13fc6:	18d3      	adds	r3, r2, r3
   13fc8:	781b      	ldrb	r3, [r3, #0]
   13fca:	2b00      	cmp	r3, #0
   13fcc:	d1ed      	bne.n	13faa <fmtCnt+0x7e>
			*ptr++ = str[idx++];
		}
		*ptr = 0;
   13fce:	69bb      	ldr	r3, [r7, #24]
   13fd0:	2200      	movs	r2, #0
   13fd2:	701a      	strb	r2, [r3, #0]
	}

	idx = strlen(str);
   13fd4:	68f8      	ldr	r0, [r7, #12]
   13fd6:	f7f4 ee56 	blx	8c84 <_init+0x124>
   13fda:	4603      	mov	r3, r0
   13fdc:	75fb      	strb	r3, [r7, #23]
	while(idx < len) {
   13fde:	e034      	b.n	1404a <fmtCnt+0x11e>
		if(idx % 2) {
   13fe0:	7dfb      	ldrb	r3, [r7, #23]
   13fe2:	f003 0301 	and.w	r3, r3, #1
   13fe6:	b2db      	uxtb	r3, r3
   13fe8:	2b00      	cmp	r3, #0
   13fea:	d010      	beq.n	1400e <fmtCnt+0xe2>
			str[idx++] = chr;
   13fec:	7dfb      	ldrb	r3, [r7, #23]
   13fee:	68fa      	ldr	r2, [r7, #12]
   13ff0:	18d3      	adds	r3, r2, r3
   13ff2:	79fa      	ldrb	r2, [r7, #7]
   13ff4:	701a      	strb	r2, [r3, #0]
   13ff6:	7dfb      	ldrb	r3, [r7, #23]
   13ff8:	3301      	adds	r3, #1
   13ffa:	75fb      	strb	r3, [r7, #23]
			str[idx++] = 0;
   13ffc:	7dfb      	ldrb	r3, [r7, #23]
   13ffe:	68fa      	ldr	r2, [r7, #12]
   14000:	18d3      	adds	r3, r2, r3
   14002:	2200      	movs	r2, #0
   14004:	701a      	strb	r2, [r3, #0]
   14006:	7dfb      	ldrb	r3, [r7, #23]
   14008:	3301      	adds	r3, #1
   1400a:	75fb      	strb	r3, [r7, #23]
   1400c:	e018      	b.n	14040 <fmtCnt+0x114>
		} else {
			str[idx + 1] = 0;
   1400e:	7dfb      	ldrb	r3, [r7, #23]
   14010:	3301      	adds	r3, #1
   14012:	68fa      	ldr	r2, [r7, #12]
   14014:	18d3      	adds	r3, r2, r3
   14016:	2200      	movs	r2, #0
   14018:	701a      	strb	r2, [r3, #0]
			while(idx) {
   1401a:	e00b      	b.n	14034 <fmtCnt+0x108>
				str[idx] = str[idx - 1];
   1401c:	7dfb      	ldrb	r3, [r7, #23]
   1401e:	68fa      	ldr	r2, [r7, #12]
   14020:	18d3      	adds	r3, r2, r3
   14022:	7dfa      	ldrb	r2, [r7, #23]
   14024:	3a01      	subs	r2, #1
   14026:	68f9      	ldr	r1, [r7, #12]
   14028:	188a      	adds	r2, r1, r2
   1402a:	7812      	ldrb	r2, [r2, #0]
   1402c:	701a      	strb	r2, [r3, #0]
				idx--;
   1402e:	7dfb      	ldrb	r3, [r7, #23]
   14030:	3b01      	subs	r3, #1
   14032:	75fb      	strb	r3, [r7, #23]
		if(idx % 2) {
			str[idx++] = chr;
			str[idx++] = 0;
		} else {
			str[idx + 1] = 0;
			while(idx) {
   14034:	7dfb      	ldrb	r3, [r7, #23]
   14036:	2b00      	cmp	r3, #0
   14038:	d1f0      	bne.n	1401c <fmtCnt+0xf0>
				str[idx] = str[idx - 1];
				idx--;
			}
			*str = chr;
   1403a:	68fb      	ldr	r3, [r7, #12]
   1403c:	79fa      	ldrb	r2, [r7, #7]
   1403e:	701a      	strb	r2, [r3, #0]
		}
		idx = strlen(str);
   14040:	68f8      	ldr	r0, [r7, #12]
   14042:	f7f4 ee20 	blx	8c84 <_init+0x124>
   14046:	4603      	mov	r3, r0
   14048:	75fb      	strb	r3, [r7, #23]
		}
		*ptr = 0;
	}

	idx = strlen(str);
	while(idx < len) {
   1404a:	7dfa      	ldrb	r2, [r7, #23]
   1404c:	68bb      	ldr	r3, [r7, #8]
   1404e:	429a      	cmp	r2, r3
   14050:	dbc6      	blt.n	13fe0 <fmtCnt+0xb4>
			}
			*str = chr;
		}
		idx = strlen(str);
	}
	return len;
   14052:	68bb      	ldr	r3, [r7, #8]
}
   14054:	4618      	mov	r0, r3
   14056:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1405a:	f2c0 0302 	movt	r3, #2
   1405e:	69fa      	ldr	r2, [r7, #28]
   14060:	681b      	ldr	r3, [r3, #0]
   14062:	429a      	cmp	r2, r3
   14064:	d001      	beq.n	1406a <fmtCnt+0x13e>
   14066:	f7f4 ff9d 	bl	8fa4 <__stack_chk_fail>
   1406a:	f107 0720 	add.w	r7, r7, #32
   1406e:	46bd      	mov	sp, r7
   14070:	bd80      	pop	{r7, pc}
   14072:	bf00      	nop

00014074 <fmtIns>:
 *    - the length of the resulting string strlen(dst)
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\fmt.c
 * \test tcgs0007.c
 */
int fmtIns(char *dst, const char *bgd, const char *ins, byte ofs, int len) {
   14074:	b590      	push	{r4, r7, lr}
   14076:	b08b      	sub	sp, #44	; 0x2c
   14078:	af00      	add	r7, sp, #0
   1407a:	6178      	str	r0, [r7, #20]
   1407c:	6139      	str	r1, [r7, #16]
   1407e:	60fa      	str	r2, [r7, #12]
   14080:	72fb      	strb	r3, [r7, #11]
   14082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14084:	607b      	str	r3, [r7, #4]
   14086:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1408a:	f2c0 0302 	movt	r3, #2
   1408e:	681b      	ldr	r3, [r3, #0]
   14090:	627b      	str	r3, [r7, #36]	; 0x24

	VERIFY(dst);
	VERIFY(ins);
	VERIFY(bgd);

	if(len == 0)
   14092:	687b      	ldr	r3, [r7, #4]
   14094:	2b00      	cmp	r3, #0
   14096:	d109      	bne.n	140ac <fmtIns+0x38>
		len = strlen(bgd) + strlen(ins);
   14098:	6938      	ldr	r0, [r7, #16]
   1409a:	f7f4 edf4 	blx	8c84 <_init+0x124>
   1409e:	4604      	mov	r4, r0
   140a0:	68f8      	ldr	r0, [r7, #12]
   140a2:	f7f4 edf0 	blx	8c84 <_init+0x124>
   140a6:	4603      	mov	r3, r0
   140a8:	18e3      	adds	r3, r4, r3
   140aa:	607b      	str	r3, [r7, #4]
	VERIFY(ofs < len);
	lenIns = strlen(ins);
   140ac:	68f8      	ldr	r0, [r7, #12]
   140ae:	f7f4 edea 	blx	8c84 <_init+0x124>
   140b2:	4603      	mov	r3, r0
   140b4:	623b      	str	r3, [r7, #32]
	lenIns = (lenIns < len - ofs) ? lenIns : (len - ofs);
   140b6:	7afb      	ldrb	r3, [r7, #11]
   140b8:	687a      	ldr	r2, [r7, #4]
   140ba:	1ad3      	subs	r3, r2, r3
   140bc:	6a3a      	ldr	r2, [r7, #32]
   140be:	429a      	cmp	r2, r3
   140c0:	bfb8      	it	lt
   140c2:	4613      	movlt	r3, r2
   140c4:	623b      	str	r3, [r7, #32]

	memcpy(dst, bgd, ofs);
   140c6:	7afb      	ldrb	r3, [r7, #11]
   140c8:	6978      	ldr	r0, [r7, #20]
   140ca:	6939      	ldr	r1, [r7, #16]
   140cc:	461a      	mov	r2, r3
   140ce:	f7f4 edd4 	blx	8c78 <_init+0x118>
	for (idx = len - 1; idx >= ofs + lenIns; idx--)
   140d2:	687b      	ldr	r3, [r7, #4]
   140d4:	b29b      	uxth	r3, r3
   140d6:	3b01      	subs	r3, #1
   140d8:	83fb      	strh	r3, [r7, #30]
   140da:	e00f      	b.n	140fc <fmtIns+0x88>
		memcpy(dst + idx, bgd + idx - lenIns, 1);
   140dc:	8bfb      	ldrh	r3, [r7, #30]
   140de:	697a      	ldr	r2, [r7, #20]
   140e0:	18d2      	adds	r2, r2, r3
   140e2:	8bf9      	ldrh	r1, [r7, #30]
   140e4:	6a3b      	ldr	r3, [r7, #32]
   140e6:	1acb      	subs	r3, r1, r3
   140e8:	6939      	ldr	r1, [r7, #16]
   140ea:	18cb      	adds	r3, r1, r3
   140ec:	4610      	mov	r0, r2
   140ee:	4619      	mov	r1, r3
   140f0:	2201      	movs	r2, #1
   140f2:	f7f4 edc2 	blx	8c78 <_init+0x118>
	VERIFY(ofs < len);
	lenIns = strlen(ins);
	lenIns = (lenIns < len - ofs) ? lenIns : (len - ofs);

	memcpy(dst, bgd, ofs);
	for (idx = len - 1; idx >= ofs + lenIns; idx--)
   140f6:	8bfb      	ldrh	r3, [r7, #30]
   140f8:	3b01      	subs	r3, #1
   140fa:	83fb      	strh	r3, [r7, #30]
   140fc:	8bfa      	ldrh	r2, [r7, #30]
   140fe:	7af9      	ldrb	r1, [r7, #11]
   14100:	6a3b      	ldr	r3, [r7, #32]
   14102:	18cb      	adds	r3, r1, r3
   14104:	429a      	cmp	r2, r3
   14106:	dae9      	bge.n	140dc <fmtIns+0x68>
		memcpy(dst + idx, bgd + idx - lenIns, 1);
	memcpy(dst + ofs, ins, lenIns);
   14108:	7afb      	ldrb	r3, [r7, #11]
   1410a:	697a      	ldr	r2, [r7, #20]
   1410c:	18d2      	adds	r2, r2, r3
   1410e:	6a3b      	ldr	r3, [r7, #32]
   14110:	4610      	mov	r0, r2
   14112:	68f9      	ldr	r1, [r7, #12]
   14114:	461a      	mov	r2, r3
   14116:	f7f4 edb0 	blx	8c78 <_init+0x118>
	memset(dst + len, 0, 1);
   1411a:	687b      	ldr	r3, [r7, #4]
   1411c:	697a      	ldr	r2, [r7, #20]
   1411e:	18d3      	adds	r3, r2, r3
   14120:	4618      	mov	r0, r3
   14122:	2100      	movs	r1, #0
   14124:	2201      	movs	r2, #1
   14126:	f7f4 ed4a 	blx	8bbc <_init+0x5c>

	return strlen(dst);
   1412a:	6978      	ldr	r0, [r7, #20]
   1412c:	f7f4 edaa 	blx	8c84 <_init+0x124>
   14130:	4603      	mov	r3, r0
}
   14132:	4618      	mov	r0, r3
   14134:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14138:	f2c0 0302 	movt	r3, #2
   1413c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1413e:	681b      	ldr	r3, [r3, #0]
   14140:	429a      	cmp	r2, r3
   14142:	d001      	beq.n	14148 <fmtIns+0xd4>
   14144:	f7f4 ff2e 	bl	8fa4 <__stack_chk_fail>
   14148:	f107 072c 	add.w	r7, r7, #44	; 0x2c
   1414c:	46bd      	mov	sp, r7
   1414e:	bd90      	pop	{r4, r7, pc}

00014150 <fmtAmt>:
 * It means that decimals are separated by '.', and thousands are not separated.
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\fmt.c
 * \test tcab0024.c, tcgs0017.c
 */
int fmtAmt(char *dst, const char *src, byte exp, const char *sep) {
   14150:	b590      	push	{r4, r7, lr}
   14152:	b09b      	sub	sp, #108	; 0x6c
   14154:	af02      	add	r7, sp, #8
   14156:	60f8      	str	r0, [r7, #12]
   14158:	60b9      	str	r1, [r7, #8]
   1415a:	603b      	str	r3, [r7, #0]
   1415c:	4613      	mov	r3, r2
   1415e:	71fb      	strb	r3, [r7, #7]
   14160:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14164:	f2c0 0302 	movt	r3, #2
   14168:	681b      	ldr	r3, [r3, #0]
   1416a:	65fb      	str	r3, [r7, #92]	; 0x5c
	int ret;
	int len;
	char tmp[prtW + 1];
	char _dst[prtW + 1];
	char decSep[2] = { '.', 0 };    //decimal separator
   1416c:	232e      	movs	r3, #46	; 0x2e
   1416e:	773b      	strb	r3, [r7, #28]
   14170:	2300      	movs	r3, #0
   14172:	777b      	strb	r3, [r7, #29]
	char thsSep[2] = { 0, 0 };  //thousand separator
   14174:	2300      	movs	r3, #0
   14176:	f887 3020 	strb.w	r3, [r7, #32]
   1417a:	2300      	movs	r3, #0
   1417c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	//    byte isSign = 0;

	VERIFY(dst);
	VERIFY(src);

	memset(_dst, 0, prtW + 1);
   14180:	f107 0340 	add.w	r3, r7, #64	; 0x40
   14184:	4618      	mov	r0, r3
   14186:	2100      	movs	r1, #0
   14188:	2219      	movs	r2, #25
   1418a:	f7f4 ed18 	blx	8bbc <_init+0x5c>
	if(*src == '-' || *src == '+') {
   1418e:	68bb      	ldr	r3, [r7, #8]
   14190:	781b      	ldrb	r3, [r3, #0]
   14192:	2b2d      	cmp	r3, #45	; 0x2d
   14194:	d003      	beq.n	1419e <fmtAmt+0x4e>
   14196:	68bb      	ldr	r3, [r7, #8]
   14198:	781b      	ldrb	r3, [r3, #0]
   1419a:	2b2b      	cmp	r3, #43	; 0x2b
   1419c:	d114      	bne.n	141c8 <fmtAmt+0x78>
		char sign[2] = { 0, 0 };
   1419e:	2300      	movs	r3, #0
   141a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   141a4:	2300      	movs	r3, #0
   141a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		//        isSign = 1;
		sign[0] = *src;
   141aa:	68bb      	ldr	r3, [r7, #8]
   141ac:	781b      	ldrb	r3, [r3, #0]
   141ae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		strcpy(_dst, sign);
   141b2:	f107 0240 	add.w	r2, r7, #64	; 0x40
   141b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
   141ba:	4610      	mov	r0, r2
   141bc:	4619      	mov	r1, r3
   141be:	f7f4 ed30 	blx	8c20 <_init+0xc0>
		src++;
   141c2:	68bb      	ldr	r3, [r7, #8]
   141c4:	3301      	adds	r3, #1
   141c6:	60bb      	str	r3, [r7, #8]
	}

	ret = fmtTok(0, src, "123456789");
   141c8:	2000      	movs	r0, #0
   141ca:	68b9      	ldr	r1, [r7, #8]
   141cc:	f244 72ec 	movw	r2, #18412	; 0x47ec
   141d0:	f2c0 0202 	movt	r2, #2
   141d4:	f7ff fdfe 	bl	13dd4 <fmtTok>
   141d8:	61b8      	str	r0, [r7, #24]
	src += ret;
   141da:	69bb      	ldr	r3, [r7, #24]
   141dc:	68ba      	ldr	r2, [r7, #8]
   141de:	18d3      	adds	r3, r2, r3
   141e0:	60bb      	str	r3, [r7, #8]
	len = strlen(src);
   141e2:	68b8      	ldr	r0, [r7, #8]
   141e4:	f7f4 ed4e 	blx	8c84 <_init+0x124>
   141e8:	4603      	mov	r3, r0
   141ea:	617b      	str	r3, [r7, #20]

	memset(tmp, 0, sizeof(tmp));
   141ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
   141f0:	4618      	mov	r0, r3
   141f2:	2100      	movs	r1, #0
   141f4:	2219      	movs	r2, #25
   141f6:	f7f4 ece2 	blx	8bbc <_init+0x5c>
	if(len) {
   141fa:	697b      	ldr	r3, [r7, #20]
   141fc:	2b00      	cmp	r3, #0
   141fe:	d01c      	beq.n	1423a <fmtAmt+0xea>
		if(len <= exp) {
   14200:	79fa      	ldrb	r2, [r7, #7]
   14202:	697b      	ldr	r3, [r7, #20]
   14204:	429a      	cmp	r2, r3
   14206:	db11      	blt.n	1422c <fmtAmt+0xdc>
			memset(tmp, '0', exp - len + 1);
   14208:	79fa      	ldrb	r2, [r7, #7]
   1420a:	697b      	ldr	r3, [r7, #20]
   1420c:	1ad3      	subs	r3, r2, r3
   1420e:	3301      	adds	r3, #1
   14210:	f107 0224 	add.w	r2, r7, #36	; 0x24
   14214:	4610      	mov	r0, r2
   14216:	2130      	movs	r1, #48	; 0x30
   14218:	461a      	mov	r2, r3
   1421a:	f7f4 ecd0 	blx	8bbc <_init+0x5c>
			strcat(tmp, src);
   1421e:	f107 0324 	add.w	r3, r7, #36	; 0x24
   14222:	4618      	mov	r0, r3
   14224:	68b9      	ldr	r1, [r7, #8]
   14226:	f7f4 ed08 	blx	8c38 <_init+0xd8>
   1422a:	e00f      	b.n	1424c <fmtAmt+0xfc>
		} else
			strcpy(tmp, src);
   1422c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   14230:	4618      	mov	r0, r3
   14232:	68b9      	ldr	r1, [r7, #8]
   14234:	f7f4 ecf4 	blx	8c20 <_init+0xc0>
   14238:	e008      	b.n	1424c <fmtAmt+0xfc>
	} else {
		memset(tmp, '0', exp + 1);
   1423a:	79fb      	ldrb	r3, [r7, #7]
   1423c:	3301      	adds	r3, #1
   1423e:	f107 0224 	add.w	r2, r7, #36	; 0x24
   14242:	4610      	mov	r0, r2
   14244:	2130      	movs	r1, #48	; 0x30
   14246:	461a      	mov	r2, r3
   14248:	f7f4 ecb8 	blx	8bbc <_init+0x5c>
	}
	len = strlen(tmp);
   1424c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   14250:	4618      	mov	r0, r3
   14252:	f7f4 ed18 	blx	8c84 <_init+0x124>
   14256:	4603      	mov	r3, r0
   14258:	617b      	str	r3, [r7, #20]

	if(sep && sep[0]) {
   1425a:	683b      	ldr	r3, [r7, #0]
   1425c:	2b00      	cmp	r3, #0
   1425e:	d00f      	beq.n	14280 <fmtAmt+0x130>
   14260:	683b      	ldr	r3, [r7, #0]
   14262:	781b      	ldrb	r3, [r3, #0]
   14264:	2b00      	cmp	r3, #0
   14266:	d00b      	beq.n	14280 <fmtAmt+0x130>
		decSep[0] = sep[0];
   14268:	683b      	ldr	r3, [r7, #0]
   1426a:	781b      	ldrb	r3, [r3, #0]
   1426c:	773b      	strb	r3, [r7, #28]
		if(sep[1]) {
   1426e:	683b      	ldr	r3, [r7, #0]
   14270:	3301      	adds	r3, #1
   14272:	781b      	ldrb	r3, [r3, #0]
   14274:	2b00      	cmp	r3, #0
   14276:	d003      	beq.n	14280 <fmtAmt+0x130>
			thsSep[0] = sep[1];
   14278:	683b      	ldr	r3, [r7, #0]
   1427a:	785b      	ldrb	r3, [r3, #1]
   1427c:	f887 3020 	strb.w	r3, [r7, #32]
		} else {
			//            VERIFY(isSign + len + !!exp <= prtW);
		}
	}

	if(exp && exp < len) {
   14280:	79fb      	ldrb	r3, [r7, #7]
   14282:	2b00      	cmp	r3, #0
   14284:	d015      	beq.n	142b2 <fmtAmt+0x162>
   14286:	79fa      	ldrb	r2, [r7, #7]
   14288:	697b      	ldr	r3, [r7, #20]
   1428a:	429a      	cmp	r2, r3
   1428c:	da11      	bge.n	142b2 <fmtAmt+0x162>
		fmtIns(tmp, tmp, decSep, (byte) (len - exp), prtW);
   1428e:	697b      	ldr	r3, [r7, #20]
   14290:	b2da      	uxtb	r2, r3
   14292:	79fb      	ldrb	r3, [r7, #7]
   14294:	1ad3      	subs	r3, r2, r3
   14296:	b2db      	uxtb	r3, r3
   14298:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1429c:	f107 0124 	add.w	r1, r7, #36	; 0x24
   142a0:	f107 021c 	add.w	r2, r7, #28
   142a4:	2418      	movs	r4, #24
   142a6:	9400      	str	r4, [sp, #0]
   142a8:	f7ff fee4 	bl	14074 <fmtIns>
		len++;
   142ac:	697b      	ldr	r3, [r7, #20]
   142ae:	3301      	adds	r3, #1
   142b0:	617b      	str	r3, [r7, #20]
	}
	if(thsSep[0]) {
   142b2:	f897 3020 	ldrb.w	r3, [r7, #32]
   142b6:	2b00      	cmp	r3, #0
   142b8:	d01d      	beq.n	142f6 <fmtAmt+0x1a6>
		for (len -= 3 + (exp ? (exp + 1) : 0); len > 0; len -= 3) {
   142ba:	79fb      	ldrb	r3, [r7, #7]
   142bc:	2b00      	cmp	r3, #0
   142be:	d002      	beq.n	142c6 <fmtAmt+0x176>
   142c0:	79fb      	ldrb	r3, [r7, #7]
   142c2:	3304      	adds	r3, #4
   142c4:	e000      	b.n	142c8 <fmtAmt+0x178>
   142c6:	2303      	movs	r3, #3
   142c8:	697a      	ldr	r2, [r7, #20]
   142ca:	1ad3      	subs	r3, r2, r3
   142cc:	617b      	str	r3, [r7, #20]
   142ce:	e00f      	b.n	142f0 <fmtAmt+0x1a0>
			ret = fmtIns(tmp, tmp, thsSep, (byte) len, prtW);
   142d0:	697b      	ldr	r3, [r7, #20]
   142d2:	b2db      	uxtb	r3, r3
   142d4:	f107 0024 	add.w	r0, r7, #36	; 0x24
   142d8:	f107 0124 	add.w	r1, r7, #36	; 0x24
   142dc:	f107 0220 	add.w	r2, r7, #32
   142e0:	2418      	movs	r4, #24
   142e2:	9400      	str	r4, [sp, #0]
   142e4:	f7ff fec6 	bl	14074 <fmtIns>
   142e8:	61b8      	str	r0, [r7, #24]
	if(exp && exp < len) {
		fmtIns(tmp, tmp, decSep, (byte) (len - exp), prtW);
		len++;
	}
	if(thsSep[0]) {
		for (len -= 3 + (exp ? (exp + 1) : 0); len > 0; len -= 3) {
   142ea:	697b      	ldr	r3, [r7, #20]
   142ec:	3b03      	subs	r3, #3
   142ee:	617b      	str	r3, [r7, #20]
   142f0:	697b      	ldr	r3, [r7, #20]
   142f2:	2b00      	cmp	r3, #0
   142f4:	dcec      	bgt.n	142d0 <fmtAmt+0x180>
#ifdef __CURR__
	if(exp) {
		strcat(_dst, __CURR__);
	}
#endif
	strcat(_dst, tmp);          //concatenate the prefix and the decimals
   142f6:	f107 0240 	add.w	r2, r7, #64	; 0x40
   142fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
   142fe:	4610      	mov	r0, r2
   14300:	4619      	mov	r1, r3
   14302:	f7f4 ec9a 	blx	8c38 <_init+0xd8>
	strcpy(dst, _dst);
   14306:	f107 0340 	add.w	r3, r7, #64	; 0x40
   1430a:	68f8      	ldr	r0, [r7, #12]
   1430c:	4619      	mov	r1, r3
   1430e:	f7f4 ec88 	blx	8c20 <_init+0xc0>
	return strlen(dst);
   14312:	68f8      	ldr	r0, [r7, #12]
   14314:	f7f4 ecb6 	blx	8c84 <_init+0x124>
   14318:	4603      	mov	r3, r0
}
   1431a:	4618      	mov	r0, r3
   1431c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14320:	f2c0 0302 	movt	r3, #2
   14324:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   14326:	681b      	ldr	r3, [r3, #0]
   14328:	429a      	cmp	r2, r3
   1432a:	d001      	beq.n	14330 <fmtAmt+0x1e0>
   1432c:	f7f4 fe3a 	bl	8fa4 <__stack_chk_fail>
   14330:	f107 0764 	add.w	r7, r7, #100	; 0x64
   14334:	46bd      	mov	sp, r7
   14336:	bd90      	pop	{r4, r7, pc}

00014338 <fmtMut>:
 *    - the length of the resulting string strlen(dst)
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\fmt.c
 * \test tcab0024.c
 */
int fmtMut(char *dst, const char *fgd, const char *bgd, const char *ctl) {
   14338:	b580      	push	{r7, lr}
   1433a:	b086      	sub	sp, #24
   1433c:	af00      	add	r7, sp, #0
   1433e:	60f8      	str	r0, [r7, #12]
   14340:	60b9      	str	r1, [r7, #8]
   14342:	607a      	str	r2, [r7, #4]
   14344:	603b      	str	r3, [r7, #0]
   14346:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1434a:	f2c0 0302 	movt	r3, #2
   1434e:	681b      	ldr	r3, [r3, #0]
   14350:	617b      	str	r3, [r7, #20]
	VERIFY(dst);
	VERIFY(fgd);
	VERIFY(bgd);
	VERIFY(ctl);

	idx = 0;
   14352:	2300      	movs	r3, #0
   14354:	747b      	strb	r3, [r7, #17]
	len = 0;
   14356:	2300      	movs	r3, #0
   14358:	74bb      	strb	r3, [r7, #18]
	while(*ctl) {
   1435a:	e053      	b.n	14404 <fmtMut+0xcc>
		if(('a' <= (*ctl)) && ((*ctl) <= 'z')) {    //foreground index
   1435c:	683b      	ldr	r3, [r7, #0]
   1435e:	781b      	ldrb	r3, [r3, #0]
   14360:	2b60      	cmp	r3, #96	; 0x60
   14362:	d91d      	bls.n	143a0 <fmtMut+0x68>
   14364:	683b      	ldr	r3, [r7, #0]
   14366:	781b      	ldrb	r3, [r3, #0]
   14368:	2b7a      	cmp	r3, #122	; 0x7a
   1436a:	d819      	bhi.n	143a0 <fmtMut+0x68>
			ref = (*ctl) - 'a';
   1436c:	683b      	ldr	r3, [r7, #0]
   1436e:	781b      	ldrb	r3, [r3, #0]
   14370:	3b61      	subs	r3, #97	; 0x61
   14372:	74fb      	strb	r3, [r7, #19]
			if(strlen(fgd) <= ref)
   14374:	68b8      	ldr	r0, [r7, #8]
   14376:	f7f4 ec86 	blx	8c84 <_init+0x124>
   1437a:	4602      	mov	r2, r0
   1437c:	7cfb      	ldrb	r3, [r7, #19]
   1437e:	429a      	cmp	r2, r3
   14380:	d805      	bhi.n	1438e <fmtMut+0x56>
				dst[idx] = ' '; //fgd too small
   14382:	7c7b      	ldrb	r3, [r7, #17]
   14384:	68fa      	ldr	r2, [r7, #12]
   14386:	18d3      	adds	r3, r2, r3
   14388:	2220      	movs	r2, #32
   1438a:	701a      	strb	r2, [r3, #0]
	idx = 0;
	len = 0;
	while(*ctl) {
		if(('a' <= (*ctl)) && ((*ctl) <= 'z')) {    //foreground index
			ref = (*ctl) - 'a';
			if(strlen(fgd) <= ref)
   1438c:	e031      	b.n	143f2 <fmtMut+0xba>
				dst[idx] = ' '; //fgd too small
			else
				dst[idx] = fgd[ref];
   1438e:	7c7b      	ldrb	r3, [r7, #17]
   14390:	68fa      	ldr	r2, [r7, #12]
   14392:	18d3      	adds	r3, r2, r3
   14394:	7cfa      	ldrb	r2, [r7, #19]
   14396:	68b9      	ldr	r1, [r7, #8]
   14398:	188a      	adds	r2, r1, r2
   1439a:	7812      	ldrb	r2, [r2, #0]
   1439c:	701a      	strb	r2, [r3, #0]
	idx = 0;
	len = 0;
	while(*ctl) {
		if(('a' <= (*ctl)) && ((*ctl) <= 'z')) {    //foreground index
			ref = (*ctl) - 'a';
			if(strlen(fgd) <= ref)
   1439e:	e028      	b.n	143f2 <fmtMut+0xba>
				dst[idx] = ' '; //fgd too small
			else
				dst[idx] = fgd[ref];
		} else if(('A' <= (*ctl)) && ((*ctl) <= 'Z')) { //background index
   143a0:	683b      	ldr	r3, [r7, #0]
   143a2:	781b      	ldrb	r3, [r3, #0]
   143a4:	2b40      	cmp	r3, #64	; 0x40
   143a6:	d917      	bls.n	143d8 <fmtMut+0xa0>
   143a8:	683b      	ldr	r3, [r7, #0]
   143aa:	781b      	ldrb	r3, [r3, #0]
   143ac:	2b5a      	cmp	r3, #90	; 0x5a
   143ae:	d813      	bhi.n	143d8 <fmtMut+0xa0>
			ref = (*ctl) - 'A';
   143b0:	683b      	ldr	r3, [r7, #0]
   143b2:	781b      	ldrb	r3, [r3, #0]
   143b4:	3b41      	subs	r3, #65	; 0x41
   143b6:	74fb      	strb	r3, [r7, #19]
			if(strlen(bgd) <= ref)
   143b8:	6878      	ldr	r0, [r7, #4]
   143ba:	f7f4 ec64 	blx	8c84 <_init+0x124>
   143be:	4602      	mov	r2, r0
   143c0:	7cfb      	ldrb	r3, [r7, #19]
   143c2:	429a      	cmp	r2, r3
   143c4:	d923      	bls.n	1440e <fmtMut+0xd6>
				break;          //bgd too short
			else
				dst[idx] = bgd[ref];
   143c6:	7c7b      	ldrb	r3, [r7, #17]
   143c8:	68fa      	ldr	r2, [r7, #12]
   143ca:	18d3      	adds	r3, r2, r3
   143cc:	7cfa      	ldrb	r2, [r7, #19]
   143ce:	6879      	ldr	r1, [r7, #4]
   143d0:	188a      	adds	r2, r1, r2
   143d2:	7812      	ldrb	r2, [r2, #0]
   143d4:	701a      	strb	r2, [r3, #0]
				dst[idx] = ' '; //fgd too small
			else
				dst[idx] = fgd[ref];
		} else if(('A' <= (*ctl)) && ((*ctl) <= 'Z')) { //background index
			ref = (*ctl) - 'A';
			if(strlen(bgd) <= ref)
   143d6:	e00c      	b.n	143f2 <fmtMut+0xba>
				break;          //bgd too short
			else
				dst[idx] = bgd[ref];
		} else {
			if(strlen(fgd) <= len)
   143d8:	68b8      	ldr	r0, [r7, #8]
   143da:	f7f4 ec54 	blx	8c84 <_init+0x124>
   143de:	4602      	mov	r2, r0
   143e0:	7cbb      	ldrb	r3, [r7, #18]
   143e2:	429a      	cmp	r2, r3
   143e4:	d915      	bls.n	14412 <fmtMut+0xda>
				break;          //fgd too short
			else
				dst[idx] = *ctl;
   143e6:	7c7b      	ldrb	r3, [r7, #17]
   143e8:	68fa      	ldr	r2, [r7, #12]
   143ea:	18d3      	adds	r3, r2, r3
   143ec:	683a      	ldr	r2, [r7, #0]
   143ee:	7812      	ldrb	r2, [r2, #0]
   143f0:	701a      	strb	r2, [r3, #0]
		}
		idx++;
   143f2:	7c7b      	ldrb	r3, [r7, #17]
   143f4:	3301      	adds	r3, #1
   143f6:	747b      	strb	r3, [r7, #17]
		ctl++;
   143f8:	683b      	ldr	r3, [r7, #0]
   143fa:	3301      	adds	r3, #1
   143fc:	603b      	str	r3, [r7, #0]
		len++;
   143fe:	7cbb      	ldrb	r3, [r7, #18]
   14400:	3301      	adds	r3, #1
   14402:	74bb      	strb	r3, [r7, #18]
	VERIFY(bgd);
	VERIFY(ctl);

	idx = 0;
	len = 0;
	while(*ctl) {
   14404:	683b      	ldr	r3, [r7, #0]
   14406:	781b      	ldrb	r3, [r3, #0]
   14408:	2b00      	cmp	r3, #0
   1440a:	d1a7      	bne.n	1435c <fmtMut+0x24>
   1440c:	e002      	b.n	14414 <fmtMut+0xdc>
			else
				dst[idx] = fgd[ref];
		} else if(('A' <= (*ctl)) && ((*ctl) <= 'Z')) { //background index
			ref = (*ctl) - 'A';
			if(strlen(bgd) <= ref)
				break;          //bgd too short
   1440e:	bf00      	nop
   14410:	e000      	b.n	14414 <fmtMut+0xdc>
			else
				dst[idx] = bgd[ref];
		} else {
			if(strlen(fgd) <= len)
				break;          //fgd too short
   14412:	bf00      	nop
		}
		idx++;
		ctl++;
		len++;
	}
	dst[idx] = 0;               //add ending zero
   14414:	7c7b      	ldrb	r3, [r7, #17]
   14416:	68fa      	ldr	r2, [r7, #12]
   14418:	18d3      	adds	r3, r2, r3
   1441a:	2200      	movs	r2, #0
   1441c:	701a      	strb	r2, [r3, #0]
	return idx;
   1441e:	7c7b      	ldrb	r3, [r7, #17]
}
   14420:	4618      	mov	r0, r3
   14422:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14426:	f2c0 0302 	movt	r3, #2
   1442a:	697a      	ldr	r2, [r7, #20]
   1442c:	681b      	ldr	r3, [r3, #0]
   1442e:	429a      	cmp	r2, r3
   14430:	d001      	beq.n	14436 <fmtMut+0xfe>
   14432:	f7f4 fdb7 	bl	8fa4 <__stack_chk_fail>
   14436:	f107 0718 	add.w	r7, r7, #24
   1443a:	46bd      	mov	sp, r7
   1443c:	bd80      	pop	{r7, pc}
   1443e:	bf00      	nop

00014440 <fmtDel>:
 *    - the length of the resulting string strlen(dst)
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\fmt.c
 * \test tcgs0007.c
 */
int fmtDel(char *dst, const char *src, byte ofs, int len) {
   14440:	b590      	push	{r4, r7, lr}
   14442:	b087      	sub	sp, #28
   14444:	af00      	add	r7, sp, #0
   14446:	60f8      	str	r0, [r7, #12]
   14448:	60b9      	str	r1, [r7, #8]
   1444a:	603b      	str	r3, [r7, #0]
   1444c:	4613      	mov	r3, r2
   1444e:	71fb      	strb	r3, [r7, #7]
   14450:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14454:	f2c0 0302 	movt	r3, #2
   14458:	681b      	ldr	r3, [r3, #0]
   1445a:	617b      	str	r3, [r7, #20]

	VERIFY(src);
	VERIFY(dst);
	VERIFY(len > 0);

	if((word) (ofs + len) >= strlen(src)) {
   1445c:	79fb      	ldrb	r3, [r7, #7]
   1445e:	b29a      	uxth	r2, r3
   14460:	683b      	ldr	r3, [r7, #0]
   14462:	b29b      	uxth	r3, r3
   14464:	18d3      	adds	r3, r2, r3
   14466:	b29b      	uxth	r3, r3
   14468:	461c      	mov	r4, r3
   1446a:	68b8      	ldr	r0, [r7, #8]
   1446c:	f7f4 ec0a 	blx	8c84 <_init+0x124>
   14470:	4603      	mov	r3, r0
   14472:	429c      	cmp	r4, r3
   14474:	d30f      	bcc.n	14496 <fmtDel+0x56>
		memcpy(dst, src, ofs);
   14476:	79fb      	ldrb	r3, [r7, #7]
   14478:	68f8      	ldr	r0, [r7, #12]
   1447a:	68b9      	ldr	r1, [r7, #8]
   1447c:	461a      	mov	r2, r3
   1447e:	f7f4 ebfc 	blx	8c78 <_init+0x118>
		dst[ofs] = 0;
   14482:	79fb      	ldrb	r3, [r7, #7]
   14484:	68fa      	ldr	r2, [r7, #12]
   14486:	18d3      	adds	r3, r2, r3
   14488:	2200      	movs	r2, #0
   1448a:	701a      	strb	r2, [r3, #0]
		return strlen(dst);
   1448c:	68f8      	ldr	r0, [r7, #12]
   1448e:	f7f4 ebfa 	blx	8c84 <_init+0x124>
   14492:	4603      	mov	r3, r0
   14494:	e027      	b.n	144e6 <fmtDel+0xa6>
	}
	memcpy(dst, src, ofs);
   14496:	79fb      	ldrb	r3, [r7, #7]
   14498:	68f8      	ldr	r0, [r7, #12]
   1449a:	68b9      	ldr	r1, [r7, #8]
   1449c:	461a      	mov	r2, r3
   1449e:	f7f4 ebec 	blx	8c78 <_init+0x118>
	for (idx = ofs + len; idx <= strlen(src); idx++) {
   144a2:	79fb      	ldrb	r3, [r7, #7]
   144a4:	b29a      	uxth	r2, r3
   144a6:	683b      	ldr	r3, [r7, #0]
   144a8:	b29b      	uxth	r3, r3
   144aa:	18d3      	adds	r3, r2, r3
   144ac:	827b      	strh	r3, [r7, #18]
   144ae:	e00f      	b.n	144d0 <fmtDel+0x90>
		memcpy(dst + idx - len, src + idx, 1);
   144b0:	8a7a      	ldrh	r2, [r7, #18]
   144b2:	683b      	ldr	r3, [r7, #0]
   144b4:	1ad3      	subs	r3, r2, r3
   144b6:	68fa      	ldr	r2, [r7, #12]
   144b8:	18d2      	adds	r2, r2, r3
   144ba:	8a7b      	ldrh	r3, [r7, #18]
   144bc:	68b9      	ldr	r1, [r7, #8]
   144be:	18cb      	adds	r3, r1, r3
   144c0:	4610      	mov	r0, r2
   144c2:	4619      	mov	r1, r3
   144c4:	2201      	movs	r2, #1
   144c6:	f7f4 ebd8 	blx	8c78 <_init+0x118>
		memcpy(dst, src, ofs);
		dst[ofs] = 0;
		return strlen(dst);
	}
	memcpy(dst, src, ofs);
	for (idx = ofs + len; idx <= strlen(src); idx++) {
   144ca:	8a7b      	ldrh	r3, [r7, #18]
   144cc:	3301      	adds	r3, #1
   144ce:	827b      	strh	r3, [r7, #18]
   144d0:	8a7c      	ldrh	r4, [r7, #18]
   144d2:	68b8      	ldr	r0, [r7, #8]
   144d4:	f7f4 ebd6 	blx	8c84 <_init+0x124>
   144d8:	4603      	mov	r3, r0
   144da:	429c      	cmp	r4, r3
   144dc:	d9e8      	bls.n	144b0 <fmtDel+0x70>
		memcpy(dst + idx - len, src + idx, 1);
	}
	return strlen(dst);
   144de:	68f8      	ldr	r0, [r7, #12]
   144e0:	f7f4 ebd0 	blx	8c84 <_init+0x124>
   144e4:	4603      	mov	r3, r0
}
   144e6:	4618      	mov	r0, r3
   144e8:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   144ec:	f2c0 0302 	movt	r3, #2
   144f0:	697a      	ldr	r2, [r7, #20]
   144f2:	681b      	ldr	r3, [r3, #0]
   144f4:	429a      	cmp	r2, r3
   144f6:	d001      	beq.n	144fc <fmtDel+0xbc>
   144f8:	f7f4 fd54 	bl	8fa4 <__stack_chk_fail>
   144fc:	f107 071c 	add.w	r7, r7, #28
   14500:	46bd      	mov	sp, r7
   14502:	bd90      	pop	{r4, r7, pc}

00014504 <fmtTcp>:
 *    - the length of the resulting string strlen(dst)
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\fmt.c
 */

int fmtTcp(char *dst, char *src, int len) {
   14504:	b580      	push	{r7, lr}
   14506:	b086      	sub	sp, #24
   14508:	af00      	add	r7, sp, #0
   1450a:	60f8      	str	r0, [r7, #12]
   1450c:	60b9      	str	r1, [r7, #8]
   1450e:	607a      	str	r2, [r7, #4]
   14510:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14514:	f2c0 0302 	movt	r3, #2
   14518:	681b      	ldr	r3, [r3, #0]
   1451a:	617b      	str	r3, [r7, #20]
	int dim;

	VERIFY(src);
	VERIFY(len <= dspW);

	for (dim = 0; dim < len; dim++) // Verify the size of the address
   1451c:	2300      	movs	r3, #0
   1451e:	613b      	str	r3, [r7, #16]
   14520:	e020      	b.n	14564 <fmtTcp+0x60>
	{
		if(dim != 0 && (dim + 1) % 4 == 0 && *src != '.') {
   14522:	693b      	ldr	r3, [r7, #16]
   14524:	2b00      	cmp	r3, #0
   14526:	d010      	beq.n	1454a <fmtTcp+0x46>
   14528:	693b      	ldr	r3, [r7, #16]
   1452a:	3301      	adds	r3, #1
   1452c:	f003 0303 	and.w	r3, r3, #3
   14530:	2b00      	cmp	r3, #0
   14532:	d10a      	bne.n	1454a <fmtTcp+0x46>
   14534:	68bb      	ldr	r3, [r7, #8]
   14536:	781b      	ldrb	r3, [r3, #0]
   14538:	2b2e      	cmp	r3, #46	; 0x2e
   1453a:	d006      	beq.n	1454a <fmtTcp+0x46>
			*dst = '.';         // Add a dot every 4 inputs - the index starts at 0
   1453c:	68fb      	ldr	r3, [r7, #12]
   1453e:	222e      	movs	r2, #46	; 0x2e
   14540:	701a      	strb	r2, [r3, #0]
			len++;
   14542:	687b      	ldr	r3, [r7, #4]
   14544:	3301      	adds	r3, #1
   14546:	607b      	str	r3, [r7, #4]
   14548:	e006      	b.n	14558 <fmtTcp+0x54>
		} else {
			*dst = *src;
   1454a:	68bb      	ldr	r3, [r7, #8]
   1454c:	781a      	ldrb	r2, [r3, #0]
   1454e:	68fb      	ldr	r3, [r7, #12]
   14550:	701a      	strb	r2, [r3, #0]
			src++;
   14552:	68bb      	ldr	r3, [r7, #8]
   14554:	3301      	adds	r3, #1
   14556:	60bb      	str	r3, [r7, #8]
		}

		dst++;
   14558:	68fb      	ldr	r3, [r7, #12]
   1455a:	3301      	adds	r3, #1
   1455c:	60fb      	str	r3, [r7, #12]
	int dim;

	VERIFY(src);
	VERIFY(len <= dspW);

	for (dim = 0; dim < len; dim++) // Verify the size of the address
   1455e:	693b      	ldr	r3, [r7, #16]
   14560:	3301      	adds	r3, #1
   14562:	613b      	str	r3, [r7, #16]
   14564:	693a      	ldr	r2, [r7, #16]
   14566:	687b      	ldr	r3, [r7, #4]
   14568:	429a      	cmp	r2, r3
   1456a:	dbda      	blt.n	14522 <fmtTcp+0x1e>
			src++;
		}

		dst++;
	}
	*dst = 0;
   1456c:	68fb      	ldr	r3, [r7, #12]
   1456e:	2200      	movs	r2, #0
   14570:	701a      	strb	r2, [r3, #0]
	dim--;
   14572:	693b      	ldr	r3, [r7, #16]
   14574:	3b01      	subs	r3, #1
   14576:	613b      	str	r3, [r7, #16]
	return dim;
   14578:	693b      	ldr	r3, [r7, #16]
}
   1457a:	4618      	mov	r0, r3
   1457c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14580:	f2c0 0302 	movt	r3, #2
   14584:	697a      	ldr	r2, [r7, #20]
   14586:	681b      	ldr	r3, [r3, #0]
   14588:	429a      	cmp	r2, r3
   1458a:	d001      	beq.n	14590 <fmtTcp+0x8c>
   1458c:	f7f4 fd0a 	bl	8fa4 <__stack_chk_fail>
   14590:	f107 0718 	add.w	r7, r7, #24
   14594:	46bd      	mov	sp, r7
   14596:	bd80      	pop	{r7, pc}

00014598 <fmtDate>:

int fmtDate(char *dst, char *src, int len) {
   14598:	b580      	push	{r7, lr}
   1459a:	b086      	sub	sp, #24
   1459c:	af00      	add	r7, sp, #0
   1459e:	60f8      	str	r0, [r7, #12]
   145a0:	60b9      	str	r1, [r7, #8]
   145a2:	607a      	str	r2, [r7, #4]
   145a4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   145a8:	f2c0 0302 	movt	r3, #2
   145ac:	681b      	ldr	r3, [r3, #0]
   145ae:	617b      	str	r3, [r7, #20]
	int dim;

	VERIFY(src);
	VERIFY(len <= dspW);

	for (dim = 0; dim < len; dim++) // Verify the size of the address
   145b0:	2300      	movs	r3, #0
   145b2:	613b      	str	r3, [r7, #16]
   145b4:	e02a      	b.n	1460c <fmtDate+0x74>
	{
		if(dim != 0 && (dim + 1) % 3 == 0 && *src != '/') {
   145b6:	693b      	ldr	r3, [r7, #16]
   145b8:	2b00      	cmp	r3, #0
   145ba:	d01a      	beq.n	145f2 <fmtDate+0x5a>
   145bc:	693b      	ldr	r3, [r7, #16]
   145be:	1c59      	adds	r1, r3, #1
   145c0:	f245 5356 	movw	r3, #21846	; 0x5556
   145c4:	f2c5 5355 	movt	r3, #21845	; 0x5555
   145c8:	fb83 0201 	smull	r0, r2, r3, r1
   145cc:	17cb      	asrs	r3, r1, #31
   145ce:	1ad2      	subs	r2, r2, r3
   145d0:	4613      	mov	r3, r2
   145d2:	005b      	lsls	r3, r3, #1
   145d4:	189b      	adds	r3, r3, r2
   145d6:	1aca      	subs	r2, r1, r3
   145d8:	2a00      	cmp	r2, #0
   145da:	d10a      	bne.n	145f2 <fmtDate+0x5a>
   145dc:	68bb      	ldr	r3, [r7, #8]
   145de:	781b      	ldrb	r3, [r3, #0]
   145e0:	2b2f      	cmp	r3, #47	; 0x2f
   145e2:	d006      	beq.n	145f2 <fmtDate+0x5a>
			*dst = '/';         // Add a dot every 4 inputs - the index starts at 0
   145e4:	68fb      	ldr	r3, [r7, #12]
   145e6:	222f      	movs	r2, #47	; 0x2f
   145e8:	701a      	strb	r2, [r3, #0]
			len++;
   145ea:	687b      	ldr	r3, [r7, #4]
   145ec:	3301      	adds	r3, #1
   145ee:	607b      	str	r3, [r7, #4]
   145f0:	e006      	b.n	14600 <fmtDate+0x68>
		} else {
			*dst = *src;
   145f2:	68bb      	ldr	r3, [r7, #8]
   145f4:	781a      	ldrb	r2, [r3, #0]
   145f6:	68fb      	ldr	r3, [r7, #12]
   145f8:	701a      	strb	r2, [r3, #0]
			src++;
   145fa:	68bb      	ldr	r3, [r7, #8]
   145fc:	3301      	adds	r3, #1
   145fe:	60bb      	str	r3, [r7, #8]
		}

		dst++;
   14600:	68fb      	ldr	r3, [r7, #12]
   14602:	3301      	adds	r3, #1
   14604:	60fb      	str	r3, [r7, #12]
	int dim;

	VERIFY(src);
	VERIFY(len <= dspW);

	for (dim = 0; dim < len; dim++) // Verify the size of the address
   14606:	693b      	ldr	r3, [r7, #16]
   14608:	3301      	adds	r3, #1
   1460a:	613b      	str	r3, [r7, #16]
   1460c:	693a      	ldr	r2, [r7, #16]
   1460e:	687b      	ldr	r3, [r7, #4]
   14610:	429a      	cmp	r2, r3
   14612:	dbd0      	blt.n	145b6 <fmtDate+0x1e>
			src++;
		}

		dst++;
	}
	*dst = 0;
   14614:	68fb      	ldr	r3, [r7, #12]
   14616:	2200      	movs	r2, #0
   14618:	701a      	strb	r2, [r3, #0]
	dim--;
   1461a:	693b      	ldr	r3, [r7, #16]
   1461c:	3b01      	subs	r3, #1
   1461e:	613b      	str	r3, [r7, #16]
	return dim;
   14620:	693b      	ldr	r3, [r7, #16]
}
   14622:	4618      	mov	r0, r3
   14624:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14628:	f2c0 0302 	movt	r3, #2
   1462c:	697a      	ldr	r2, [r7, #20]
   1462e:	681b      	ldr	r3, [r3, #0]
   14630:	429a      	cmp	r2, r3
   14632:	d001      	beq.n	14638 <fmtDate+0xa0>
   14634:	f7f4 fcb6 	bl	8fa4 <__stack_chk_fail>
   14638:	f107 0718 	add.w	r7, r7, #24
   1463c:	46bd      	mov	sp, r7
   1463e:	bd80      	pop	{r7, pc}

00014640 <fmtTime>:

int fmtTime(char *dst, char *src, int len) {
   14640:	b580      	push	{r7, lr}
   14642:	b086      	sub	sp, #24
   14644:	af00      	add	r7, sp, #0
   14646:	60f8      	str	r0, [r7, #12]
   14648:	60b9      	str	r1, [r7, #8]
   1464a:	607a      	str	r2, [r7, #4]
   1464c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14650:	f2c0 0302 	movt	r3, #2
   14654:	681b      	ldr	r3, [r3, #0]
   14656:	617b      	str	r3, [r7, #20]
	int dim;

	VERIFY(src);
	VERIFY(len <= dspW);

	for (dim = 0; dim < len; dim++) {// Verify the size of the address
   14658:	2300      	movs	r3, #0
   1465a:	613b      	str	r3, [r7, #16]
   1465c:	e02a      	b.n	146b4 <fmtTime+0x74>

		if(dim != 0 && (dim + 1) % 3 == 0 && *src != ':') {
   1465e:	693b      	ldr	r3, [r7, #16]
   14660:	2b00      	cmp	r3, #0
   14662:	d01a      	beq.n	1469a <fmtTime+0x5a>
   14664:	693b      	ldr	r3, [r7, #16]
   14666:	1c59      	adds	r1, r3, #1
   14668:	f245 5356 	movw	r3, #21846	; 0x5556
   1466c:	f2c5 5355 	movt	r3, #21845	; 0x5555
   14670:	fb83 0201 	smull	r0, r2, r3, r1
   14674:	17cb      	asrs	r3, r1, #31
   14676:	1ad2      	subs	r2, r2, r3
   14678:	4613      	mov	r3, r2
   1467a:	005b      	lsls	r3, r3, #1
   1467c:	189b      	adds	r3, r3, r2
   1467e:	1aca      	subs	r2, r1, r3
   14680:	2a00      	cmp	r2, #0
   14682:	d10a      	bne.n	1469a <fmtTime+0x5a>
   14684:	68bb      	ldr	r3, [r7, #8]
   14686:	781b      	ldrb	r3, [r3, #0]
   14688:	2b3a      	cmp	r3, #58	; 0x3a
   1468a:	d006      	beq.n	1469a <fmtTime+0x5a>
			*dst = ':';         // Add a dot every 4 inputs - the index starts at 0
   1468c:	68fb      	ldr	r3, [r7, #12]
   1468e:	223a      	movs	r2, #58	; 0x3a
   14690:	701a      	strb	r2, [r3, #0]
			len++;
   14692:	687b      	ldr	r3, [r7, #4]
   14694:	3301      	adds	r3, #1
   14696:	607b      	str	r3, [r7, #4]
   14698:	e006      	b.n	146a8 <fmtTime+0x68>
		} else {
			*dst = *src;
   1469a:	68bb      	ldr	r3, [r7, #8]
   1469c:	781a      	ldrb	r2, [r3, #0]
   1469e:	68fb      	ldr	r3, [r7, #12]
   146a0:	701a      	strb	r2, [r3, #0]
			src++;
   146a2:	68bb      	ldr	r3, [r7, #8]
   146a4:	3301      	adds	r3, #1
   146a6:	60bb      	str	r3, [r7, #8]
		}

		dst++;
   146a8:	68fb      	ldr	r3, [r7, #12]
   146aa:	3301      	adds	r3, #1
   146ac:	60fb      	str	r3, [r7, #12]
	int dim;

	VERIFY(src);
	VERIFY(len <= dspW);

	for (dim = 0; dim < len; dim++) {// Verify the size of the address
   146ae:	693b      	ldr	r3, [r7, #16]
   146b0:	3301      	adds	r3, #1
   146b2:	613b      	str	r3, [r7, #16]
   146b4:	693a      	ldr	r2, [r7, #16]
   146b6:	687b      	ldr	r3, [r7, #4]
   146b8:	429a      	cmp	r2, r3
   146ba:	dbd0      	blt.n	1465e <fmtTime+0x1e>
			src++;
		}

		dst++;
	}
	*dst = 0;
   146bc:	68fb      	ldr	r3, [r7, #12]
   146be:	2200      	movs	r2, #0
   146c0:	701a      	strb	r2, [r3, #0]
	dim--;
   146c2:	693b      	ldr	r3, [r7, #16]
   146c4:	3b01      	subs	r3, #1
   146c6:	613b      	str	r3, [r7, #16]
	return dim;
   146c8:	693b      	ldr	r3, [r7, #16]
}
   146ca:	4618      	mov	r0, r3
   146cc:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   146d0:	f2c0 0302 	movt	r3, #2
   146d4:	697a      	ldr	r2, [r7, #20]
   146d6:	681b      	ldr	r3, [r3, #0]
   146d8:	429a      	cmp	r2, r3
   146da:	d001      	beq.n	146e0 <fmtTime+0xa0>
   146dc:	f7f4 fc62 	bl	8fa4 <__stack_chk_fail>
   146e0:	f107 0718 	add.w	r7, r7, #24
   146e4:	46bd      	mov	sp, r7
   146e6:	bd80      	pop	{r7, pc}

000146e8 <isSorted>:
 * \return
 *    - 1 if a<b<c and 0 otherwise.
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\std.c
 */
byte isSorted(word a, word b, word c) {
   146e8:	b580      	push	{r7, lr}
   146ea:	b084      	sub	sp, #16
   146ec:	af00      	add	r7, sp, #0
   146ee:	4613      	mov	r3, r2
   146f0:	4602      	mov	r2, r0
   146f2:	80fa      	strh	r2, [r7, #6]
   146f4:	460a      	mov	r2, r1
   146f6:	80ba      	strh	r2, [r7, #4]
   146f8:	807b      	strh	r3, [r7, #2]
   146fa:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   146fe:	f2c0 0302 	movt	r3, #2
   14702:	681b      	ldr	r3, [r3, #0]
   14704:	60fb      	str	r3, [r7, #12]
	if(b < a)
   14706:	88ba      	ldrh	r2, [r7, #4]
   14708:	88fb      	ldrh	r3, [r7, #6]
   1470a:	429a      	cmp	r2, r3
   1470c:	d201      	bcs.n	14712 <isSorted+0x2a>
		return 0;
   1470e:	2300      	movs	r3, #0
   14710:	e006      	b.n	14720 <isSorted+0x38>
	if(c < b)
   14712:	887a      	ldrh	r2, [r7, #2]
   14714:	88bb      	ldrh	r3, [r7, #4]
   14716:	429a      	cmp	r2, r3
   14718:	d201      	bcs.n	1471e <isSorted+0x36>
		return 0;
   1471a:	2300      	movs	r3, #0
   1471c:	e000      	b.n	14720 <isSorted+0x38>
	return 1;
   1471e:	2301      	movs	r3, #1
}
   14720:	4618      	mov	r0, r3
   14722:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14726:	f2c0 0302 	movt	r3, #2
   1472a:	68fa      	ldr	r2, [r7, #12]
   1472c:	681b      	ldr	r3, [r3, #0]
   1472e:	429a      	cmp	r2, r3
   14730:	d001      	beq.n	14736 <isSorted+0x4e>
   14732:	f7f4 fc37 	bl	8fa4 <__stack_chk_fail>
   14736:	f107 0710 	add.w	r7, r7, #16
   1473a:	46bd      	mov	sp, r7
   1473c:	bd80      	pop	{r7, pc}
   1473e:	bf00      	nop

00014740 <negStr>:


static void negStr(char *str) { //convert str into it supplementary
   14740:	b580      	push	{r7, lr}
   14742:	b090      	sub	sp, #64	; 0x40
   14744:	af00      	add	r7, sp, #0
   14746:	6078      	str	r0, [r7, #4]
   14748:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1474c:	f2c0 0302 	movt	r3, #2
   14750:	681b      	ldr	r3, [r3, #0]
   14752:	63fb      	str	r3, [r7, #60]	; 0x3c
	char tmp[16 + 1];
	char dst[16 + 1];

	VERIFY(str);

	strcpy(tmp, str);
   14754:	f107 0314 	add.w	r3, r7, #20
   14758:	4618      	mov	r0, r3
   1475a:	6879      	ldr	r1, [r7, #4]
   1475c:	f7f4 ea60 	blx	8c20 <_init+0xc0>
	fmtPad(tmp, -16, '0');      //left pad by zeroes to length 16
   14760:	f107 0314 	add.w	r3, r7, #20
   14764:	4618      	mov	r0, r3
   14766:	f06f 010f 	mvn.w	r1, #15
   1476a:	2230      	movs	r2, #48	; 0x30
   1476c:	f7ff fb86 	bl	13e7c <fmtPad>

	i = 16;
   14770:	2310      	movs	r3, #16
   14772:	73bb      	strb	r3, [r7, #14]
	p = 0;
   14774:	2300      	movs	r3, #0
   14776:	73fb      	strb	r3, [r7, #15]
	memset(dst, 0, 16 + 1);
   14778:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1477c:	4618      	mov	r0, r3
   1477e:	2100      	movs	r1, #0
   14780:	2211      	movs	r2, #17
   14782:	f7f4 ea1c 	blx	8bbc <_init+0x5c>
	while(i--) {
   14786:	e023      	b.n	147d0 <negStr+0x90>
		VERIFY(tmp[i] <= '9');
		VERIFY(tmp[i] >= '0');
		n = tmp[i] - '0';
   14788:	7bbb      	ldrb	r3, [r7, #14]
   1478a:	f107 0140 	add.w	r1, r7, #64	; 0x40
   1478e:	18cb      	adds	r3, r1, r3
   14790:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
   14794:	3b30      	subs	r3, #48	; 0x30
   14796:	613b      	str	r3, [r7, #16]

		n = -n;
   14798:	693b      	ldr	r3, [r7, #16]
   1479a:	425b      	negs	r3, r3
   1479c:	613b      	str	r3, [r7, #16]
		n -= p;
   1479e:	7bfb      	ldrb	r3, [r7, #15]
   147a0:	693a      	ldr	r2, [r7, #16]
   147a2:	1ad3      	subs	r3, r2, r3
   147a4:	613b      	str	r3, [r7, #16]
		if(n < 0) {
   147a6:	693b      	ldr	r3, [r7, #16]
   147a8:	2b00      	cmp	r3, #0
   147aa:	da05      	bge.n	147b8 <negStr+0x78>
			n += 10;
   147ac:	693b      	ldr	r3, [r7, #16]
   147ae:	330a      	adds	r3, #10
   147b0:	613b      	str	r3, [r7, #16]
			VERIFY(n >= 0);
			p = 1;
   147b2:	2301      	movs	r3, #1
   147b4:	73fb      	strb	r3, [r7, #15]
   147b6:	e001      	b.n	147bc <negStr+0x7c>
		} else
			p = 0;
   147b8:	2300      	movs	r3, #0
   147ba:	73fb      	strb	r3, [r7, #15]

		VERIFY(n >= 0);
		VERIFY(n < 10);
		dst[i] = n + '0';
   147bc:	7bbb      	ldrb	r3, [r7, #14]
   147be:	693a      	ldr	r2, [r7, #16]
   147c0:	b2d2      	uxtb	r2, r2
   147c2:	3230      	adds	r2, #48	; 0x30
   147c4:	b2d2      	uxtb	r2, r2
   147c6:	f107 0140 	add.w	r1, r7, #64	; 0x40
   147ca:	18cb      	adds	r3, r1, r3
   147cc:	f803 2c18 	strb.w	r2, [r3, #-24]
	fmtPad(tmp, -16, '0');      //left pad by zeroes to length 16

	i = 16;
	p = 0;
	memset(dst, 0, 16 + 1);
	while(i--) {
   147d0:	7bbb      	ldrb	r3, [r7, #14]
   147d2:	2b00      	cmp	r3, #0
   147d4:	bf0c      	ite	eq
   147d6:	2300      	moveq	r3, #0
   147d8:	2301      	movne	r3, #1
   147da:	b2db      	uxtb	r3, r3
   147dc:	7bba      	ldrb	r2, [r7, #14]
   147de:	3a01      	subs	r2, #1
   147e0:	73ba      	strb	r2, [r7, #14]
   147e2:	2b00      	cmp	r3, #0
   147e4:	d1d0      	bne.n	14788 <negStr+0x48>
		VERIFY(n >= 0);
		VERIFY(n < 10);
		dst[i] = n + '0';
	}

	VERIFY(strlen(dst) <= 16);
   147e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
   147ea:	4618      	mov	r0, r3
   147ec:	f7f4 ea4a 	blx	8c84 <_init+0x124>
	strcpy(str, dst);
   147f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
   147f4:	6878      	ldr	r0, [r7, #4]
   147f6:	4619      	mov	r1, r3
   147f8:	f7f4 ea12 	blx	8c20 <_init+0xc0>
}
   147fc:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14800:	f2c0 0302 	movt	r3, #2
   14804:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14806:	681b      	ldr	r3, [r3, #0]
   14808:	429a      	cmp	r2, r3
   1480a:	d001      	beq.n	14810 <negStr+0xd0>
   1480c:	f7f4 fbca 	bl	8fa4 <__stack_chk_fail>
   14810:	f107 0740 	add.w	r7, r7, #64	; 0x40
   14814:	46bd      	mov	sp, r7
   14816:	bd80      	pop	{r7, pc}

00014818 <neg2sup>:

static void neg2sup(char *str) {    //if negative, convert it to supplementary
   14818:	b580      	push	{r7, lr}
   1481a:	b084      	sub	sp, #16
   1481c:	af00      	add	r7, sp, #0
   1481e:	6078      	str	r0, [r7, #4]
   14820:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14824:	f2c0 0302 	movt	r3, #2
   14828:	681b      	ldr	r3, [r3, #0]
   1482a:	60fb      	str	r3, [r7, #12]
	VERIFY(str);
	if(str[0] != '-')
   1482c:	687b      	ldr	r3, [r7, #4]
   1482e:	781b      	ldrb	r3, [r3, #0]
   14830:	2b2d      	cmp	r3, #45	; 0x2d
   14832:	d106      	bne.n	14842 <neg2sup+0x2a>
		return;                 //non-negative - nothing to do
	*str = '0';
   14834:	687b      	ldr	r3, [r7, #4]
   14836:	2230      	movs	r2, #48	; 0x30
   14838:	701a      	strb	r2, [r3, #0]
	negStr(str);
   1483a:	6878      	ldr	r0, [r7, #4]
   1483c:	f7ff ff80 	bl	14740 <negStr>
   14840:	e000      	b.n	14844 <neg2sup+0x2c>
}

static void neg2sup(char *str) {    //if negative, convert it to supplementary
	VERIFY(str);
	if(str[0] != '-')
		return;                 //non-negative - nothing to do
   14842:	bf00      	nop
	*str = '0';
	negStr(str);
}
   14844:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14848:	f2c0 0302 	movt	r3, #2
   1484c:	68fa      	ldr	r2, [r7, #12]
   1484e:	681b      	ldr	r3, [r3, #0]
   14850:	429a      	cmp	r2, r3
   14852:	d001      	beq.n	14858 <neg2sup+0x40>
   14854:	f7f4 fba6 	bl	8fa4 <__stack_chk_fail>
   14858:	f107 0710 	add.w	r7, r7, #16
   1485c:	46bd      	mov	sp, r7
   1485e:	bd80      	pop	{r7, pc}

00014860 <sup2neg>:

static void sup2neg(char *str) {    //if supplementary, add '-' sign
   14860:	b580      	push	{r7, lr}
   14862:	b08a      	sub	sp, #40	; 0x28
   14864:	af00      	add	r7, sp, #0
   14866:	6078      	str	r0, [r7, #4]
   14868:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1486c:	f2c0 0302 	movt	r3, #2
   14870:	681b      	ldr	r3, [r3, #0]
   14872:	627b      	str	r3, [r7, #36]	; 0x24
	byte i;
	char tmp[16 + 1];

	VERIFY(str);
	if(strlen(str) < 16)
   14874:	6878      	ldr	r0, [r7, #4]
   14876:	f7f4 ea06 	blx	8c84 <_init+0x124>
   1487a:	4603      	mov	r3, r0
   1487c:	2b0f      	cmp	r3, #15
   1487e:	d937      	bls.n	148f0 <sup2neg+0x90>
		return;                 //non-negative - nothing to do
	if(str[0] < '5')
   14880:	687b      	ldr	r3, [r7, #4]
   14882:	781b      	ldrb	r3, [r3, #0]
   14884:	2b34      	cmp	r3, #52	; 0x34
   14886:	d933      	bls.n	148f0 <sup2neg+0x90>
		return;                 //non-negative - nothing to do
	negStr(str);
   14888:	6878      	ldr	r0, [r7, #4]
   1488a:	f7ff ff59 	bl	14740 <negStr>

	i = 0;
   1488e:	2300      	movs	r3, #0
   14890:	73fb      	strb	r3, [r7, #15]
	while(str[i]) {             //the leading zeroes are to be skipped
   14892:	e008      	b.n	148a6 <sup2neg+0x46>
		if(str[i] != '0')
   14894:	7bfb      	ldrb	r3, [r7, #15]
   14896:	687a      	ldr	r2, [r7, #4]
   14898:	18d3      	adds	r3, r2, r3
   1489a:	781b      	ldrb	r3, [r3, #0]
   1489c:	2b30      	cmp	r3, #48	; 0x30
   1489e:	d109      	bne.n	148b4 <sup2neg+0x54>
			break;
		i++;
   148a0:	7bfb      	ldrb	r3, [r7, #15]
   148a2:	3301      	adds	r3, #1
   148a4:	73fb      	strb	r3, [r7, #15]
	if(str[0] < '5')
		return;                 //non-negative - nothing to do
	negStr(str);

	i = 0;
	while(str[i]) {             //the leading zeroes are to be skipped
   148a6:	7bfb      	ldrb	r3, [r7, #15]
   148a8:	687a      	ldr	r2, [r7, #4]
   148aa:	18d3      	adds	r3, r2, r3
   148ac:	781b      	ldrb	r3, [r3, #0]
   148ae:	2b00      	cmp	r3, #0
   148b0:	d1f0      	bne.n	14894 <sup2neg+0x34>
   148b2:	e000      	b.n	148b6 <sup2neg+0x56>
		if(str[i] != '0')
			break;
   148b4:	bf00      	nop
		i++;
	}
	strcpy(tmp, str + i);
   148b6:	7bfb      	ldrb	r3, [r7, #15]
   148b8:	687a      	ldr	r2, [r7, #4]
   148ba:	18d3      	adds	r3, r2, r3
   148bc:	f107 0210 	add.w	r2, r7, #16
   148c0:	4610      	mov	r0, r2
   148c2:	4619      	mov	r1, r3
   148c4:	f7f4 e9ac 	blx	8c20 <_init+0xc0>
	strcpy(str, tmp);
   148c8:	f107 0310 	add.w	r3, r7, #16
   148cc:	6878      	ldr	r0, [r7, #4]
   148ce:	4619      	mov	r1, r3
   148d0:	f7f4 e9a6 	blx	8c20 <_init+0xc0>

	VERIFY(strlen(str) + 1 <= 16);
   148d4:	6878      	ldr	r0, [r7, #4]
   148d6:	f7f4 e9d6 	blx	8c84 <_init+0x124>
	fmtPad(str, -(int) (strlen(str) + 1), '-'); //add leading '-'
   148da:	6878      	ldr	r0, [r7, #4]
   148dc:	f7f4 e9d2 	blx	8c84 <_init+0x124>
   148e0:	4603      	mov	r3, r0
   148e2:	3301      	adds	r3, #1
   148e4:	425b      	negs	r3, r3
   148e6:	6878      	ldr	r0, [r7, #4]
   148e8:	4619      	mov	r1, r3
   148ea:	222d      	movs	r2, #45	; 0x2d
   148ec:	f7ff fac6 	bl	13e7c <fmtPad>
}
   148f0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   148f4:	f2c0 0302 	movt	r3, #2
   148f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   148fa:	681b      	ldr	r3, [r3, #0]
   148fc:	429a      	cmp	r2, r3
   148fe:	d001      	beq.n	14904 <sup2neg+0xa4>
   14900:	f7f4 fb50 	bl	8fa4 <__stack_chk_fail>
   14904:	f107 0728 	add.w	r7, r7, #40	; 0x28
   14908:	46bd      	mov	sp, r7
   1490a:	bd80      	pop	{r7, pc}

0001490c <addSup>:

static byte addSup(char *dst, const char *arg1, const char *arg2) { //add two values converted into supplementaries if necessary
   1490c:	b580      	push	{r7, lr}
   1490e:	b096      	sub	sp, #88	; 0x58
   14910:	af00      	add	r7, sp, #0
   14912:	60f8      	str	r0, [r7, #12]
   14914:	60b9      	str	r1, [r7, #8]
   14916:	607a      	str	r2, [r7, #4]
   14918:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1491c:	f2c0 0302 	movt	r3, #2
   14920:	681b      	ldr	r3, [r3, #0]
   14922:	657b      	str	r3, [r7, #84]	; 0x54

	VERIFY(dst);
	VERIFY(arg1);
	VERIFY(arg2);

	strcpy(tmp1, arg1);
   14924:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14928:	4618      	mov	r0, r3
   1492a:	68b9      	ldr	r1, [r7, #8]
   1492c:	f7f4 e978 	blx	8c20 <_init+0xc0>
	fmtPad(tmp1, -16, '0');     //left pad by zeroes to length 16
   14930:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14934:	4618      	mov	r0, r3
   14936:	f06f 010f 	mvn.w	r1, #15
   1493a:	2230      	movs	r2, #48	; 0x30
   1493c:	f7ff fa9e 	bl	13e7c <fmtPad>

	strcpy(tmp2, arg2);
   14940:	f107 0340 	add.w	r3, r7, #64	; 0x40
   14944:	4618      	mov	r0, r3
   14946:	6879      	ldr	r1, [r7, #4]
   14948:	f7f4 e96a 	blx	8c20 <_init+0xc0>
	fmtPad(tmp2, -16, '0');     //left pad by zeroes to length 16
   1494c:	f107 0340 	add.w	r3, r7, #64	; 0x40
   14950:	4618      	mov	r0, r3
   14952:	f06f 010f 	mvn.w	r1, #15
   14956:	2230      	movs	r2, #48	; 0x30
   14958:	f7ff fa90 	bl	13e7c <fmtPad>

	i = 16;
   1495c:	2310      	movs	r3, #16
   1495e:	757b      	strb	r3, [r7, #21]
	p = 0;
   14960:	2300      	movs	r3, #0
   14962:	75fb      	strb	r3, [r7, #23]
	memset(tmp, 0, 16 + 1);
   14964:	f107 0318 	add.w	r3, r7, #24
   14968:	4618      	mov	r0, r3
   1496a:	2100      	movs	r1, #0
   1496c:	2211      	movs	r2, #17
   1496e:	f7f4 e926 	blx	8bbc <_init+0x5c>
	while(i--) {                //perform the addition
   14972:	e02a      	b.n	149ca <addSup+0xbe>
		VERIFY(tmp1[i] <= '9');
		VERIFY(tmp1[i] >= '0');
		n = tmp1[i] - '0';
   14974:	7d7b      	ldrb	r3, [r7, #21]
   14976:	f107 0158 	add.w	r1, r7, #88	; 0x58
   1497a:	18cb      	adds	r3, r1, r3
   1497c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
   14980:	3b30      	subs	r3, #48	; 0x30
   14982:	75bb      	strb	r3, [r7, #22]

		VERIFY(tmp2[i] <= '9');
		VERIFY(tmp2[i] >= '0');
		n += tmp2[i] - '0';
   14984:	7d7b      	ldrb	r3, [r7, #21]
   14986:	f107 0258 	add.w	r2, r7, #88	; 0x58
   1498a:	18d3      	adds	r3, r2, r3
   1498c:	f813 2c18 	ldrb.w	r2, [r3, #-24]
   14990:	7dbb      	ldrb	r3, [r7, #22]
   14992:	18d3      	adds	r3, r2, r3
   14994:	b2db      	uxtb	r3, r3
   14996:	3b30      	subs	r3, #48	; 0x30
   14998:	75bb      	strb	r3, [r7, #22]

		n += p;
   1499a:	7dba      	ldrb	r2, [r7, #22]
   1499c:	7dfb      	ldrb	r3, [r7, #23]
   1499e:	18d3      	adds	r3, r2, r3
   149a0:	75bb      	strb	r3, [r7, #22]
		if(n >= 10) {
   149a2:	7dbb      	ldrb	r3, [r7, #22]
   149a4:	2b09      	cmp	r3, #9
   149a6:	d905      	bls.n	149b4 <addSup+0xa8>
			VERIFY(n <= 19);
			n -= 10;
   149a8:	7dbb      	ldrb	r3, [r7, #22]
   149aa:	3b0a      	subs	r3, #10
   149ac:	75bb      	strb	r3, [r7, #22]
			p = 1;
   149ae:	2301      	movs	r3, #1
   149b0:	75fb      	strb	r3, [r7, #23]
   149b2:	e001      	b.n	149b8 <addSup+0xac>
		} else
			p = 0;
   149b4:	2300      	movs	r3, #0
   149b6:	75fb      	strb	r3, [r7, #23]

		VERIFY(n < 10);
		tmp[i] = n + '0';
   149b8:	7d7b      	ldrb	r3, [r7, #21]
   149ba:	7dba      	ldrb	r2, [r7, #22]
   149bc:	3230      	adds	r2, #48	; 0x30
   149be:	b2d2      	uxtb	r2, r2
   149c0:	f107 0158 	add.w	r1, r7, #88	; 0x58
   149c4:	18cb      	adds	r3, r1, r3
   149c6:	f803 2c40 	strb.w	r2, [r3, #-64]
	fmtPad(tmp2, -16, '0');     //left pad by zeroes to length 16

	i = 16;
	p = 0;
	memset(tmp, 0, 16 + 1);
	while(i--) {                //perform the addition
   149ca:	7d7b      	ldrb	r3, [r7, #21]
   149cc:	2b00      	cmp	r3, #0
   149ce:	bf0c      	ite	eq
   149d0:	2300      	moveq	r3, #0
   149d2:	2301      	movne	r3, #1
   149d4:	b2db      	uxtb	r3, r3
   149d6:	7d7a      	ldrb	r2, [r7, #21]
   149d8:	3a01      	subs	r2, #1
   149da:	757a      	strb	r2, [r7, #21]
   149dc:	2b00      	cmp	r3, #0
   149de:	d1c9      	bne.n	14974 <addSup+0x68>

		VERIFY(n < 10);
		tmp[i] = n + '0';
	}

	i = 0;
   149e0:	2300      	movs	r3, #0
   149e2:	757b      	strb	r3, [r7, #21]
	while(tmp[i]) {             //the leading zeroes are to be skipped
   149e4:	e00a      	b.n	149fc <addSup+0xf0>
		if(tmp[i] != '0')
   149e6:	7d7b      	ldrb	r3, [r7, #21]
   149e8:	f107 0258 	add.w	r2, r7, #88	; 0x58
   149ec:	18d3      	adds	r3, r2, r3
   149ee:	f813 3c40 	ldrb.w	r3, [r3, #-64]
   149f2:	2b30      	cmp	r3, #48	; 0x30
   149f4:	d10b      	bne.n	14a0e <addSup+0x102>
			break;
		i++;
   149f6:	7d7b      	ldrb	r3, [r7, #21]
   149f8:	3301      	adds	r3, #1
   149fa:	757b      	strb	r3, [r7, #21]
		VERIFY(n < 10);
		tmp[i] = n + '0';
	}

	i = 0;
	while(tmp[i]) {             //the leading zeroes are to be skipped
   149fc:	7d7b      	ldrb	r3, [r7, #21]
   149fe:	f107 0158 	add.w	r1, r7, #88	; 0x58
   14a02:	18cb      	adds	r3, r1, r3
   14a04:	f813 3c40 	ldrb.w	r3, [r3, #-64]
   14a08:	2b00      	cmp	r3, #0
   14a0a:	d1ec      	bne.n	149e6 <addSup+0xda>
   14a0c:	e000      	b.n	14a10 <addSup+0x104>
		if(tmp[i] != '0')
			break;
   14a0e:	bf00      	nop
		i++;
	}

	VERIFY(strlen(tmp + i) <= 16);
   14a10:	7d7b      	ldrb	r3, [r7, #21]
   14a12:	f107 0218 	add.w	r2, r7, #24
   14a16:	18d3      	adds	r3, r2, r3
   14a18:	4618      	mov	r0, r3
   14a1a:	f7f4 e934 	blx	8c84 <_init+0x124>
	if(!*(tmp + i))             //full zero string
   14a1e:	7d7b      	ldrb	r3, [r7, #21]
   14a20:	f107 0218 	add.w	r2, r7, #24
   14a24:	18d3      	adds	r3, r2, r3
   14a26:	781b      	ldrb	r3, [r3, #0]
   14a28:	2b00      	cmp	r3, #0
   14a2a:	d107      	bne.n	14a3c <addSup+0x130>
		strcpy(dst, "0");
   14a2c:	68fa      	ldr	r2, [r7, #12]
   14a2e:	f244 73f8 	movw	r3, #18424	; 0x47f8
   14a32:	f2c0 0302 	movt	r3, #2
   14a36:	881b      	ldrh	r3, [r3, #0]
   14a38:	8013      	strh	r3, [r2, #0]
   14a3a:	e007      	b.n	14a4c <addSup+0x140>
	else
		strcpy(dst, tmp + i);
   14a3c:	7d7b      	ldrb	r3, [r7, #21]
   14a3e:	f107 0218 	add.w	r2, r7, #24
   14a42:	18d3      	adds	r3, r2, r3
   14a44:	68f8      	ldr	r0, [r7, #12]
   14a46:	4619      	mov	r1, r3
   14a48:	f7f4 e8ea 	blx	8c20 <_init+0xc0>
	return strlen(dst);
   14a4c:	68f8      	ldr	r0, [r7, #12]
   14a4e:	f7f4 e91a 	blx	8c84 <_init+0x124>
   14a52:	4603      	mov	r3, r0
   14a54:	b2db      	uxtb	r3, r3
}
   14a56:	4618      	mov	r0, r3
   14a58:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14a5c:	f2c0 0302 	movt	r3, #2
   14a60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   14a62:	681b      	ldr	r3, [r3, #0]
   14a64:	429a      	cmp	r2, r3
   14a66:	d001      	beq.n	14a6c <addSup+0x160>
   14a68:	f7f4 fa9c 	bl	8fa4 <__stack_chk_fail>
   14a6c:	f107 0758 	add.w	r7, r7, #88	; 0x58
   14a70:	46bd      	mov	sp, r7
   14a72:	bd80      	pop	{r7, pc}

00014a74 <addStr>:
 *    - strlen(dst)
 *
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\std.c
 */
byte addStr(char *dst, const char *arg1, const char *arg2) {
   14a74:	b580      	push	{r7, lr}
   14a76:	b090      	sub	sp, #64	; 0x40
   14a78:	af00      	add	r7, sp, #0
   14a7a:	60f8      	str	r0, [r7, #12]
   14a7c:	60b9      	str	r1, [r7, #8]
   14a7e:	607a      	str	r2, [r7, #4]
   14a80:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14a84:	f2c0 0302 	movt	r3, #2
   14a88:	681b      	ldr	r3, [r3, #0]
   14a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	char tmp2[16 + 1];

	VERIFY(dst);
	VERIFY(arg1);
	VERIFY(arg2);
	VERIFY(strlen(arg1) <= 16);
   14a8c:	68b8      	ldr	r0, [r7, #8]
   14a8e:	f7f4 e8fa 	blx	8c84 <_init+0x124>
	VERIFY(strlen(arg2) <= 16);
   14a92:	6878      	ldr	r0, [r7, #4]
   14a94:	f7f4 e8f6 	blx	8c84 <_init+0x124>

	strcpy(tmp1, arg1);
   14a98:	f107 0314 	add.w	r3, r7, #20
   14a9c:	4618      	mov	r0, r3
   14a9e:	68b9      	ldr	r1, [r7, #8]
   14aa0:	f7f4 e8be 	blx	8c20 <_init+0xc0>
	neg2sup(tmp1);
   14aa4:	f107 0314 	add.w	r3, r7, #20
   14aa8:	4618      	mov	r0, r3
   14aaa:	f7ff feb5 	bl	14818 <neg2sup>

	strcpy(tmp2, arg2);
   14aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
   14ab2:	4618      	mov	r0, r3
   14ab4:	6879      	ldr	r1, [r7, #4]
   14ab6:	f7f4 e8b4 	blx	8c20 <_init+0xc0>
	neg2sup(tmp2);
   14aba:	f107 0328 	add.w	r3, r7, #40	; 0x28
   14abe:	4618      	mov	r0, r3
   14ac0:	f7ff feaa 	bl	14818 <neg2sup>

	i = addSup(dst, tmp1, tmp2);
   14ac4:	f107 0214 	add.w	r2, r7, #20
   14ac8:	f107 0328 	add.w	r3, r7, #40	; 0x28
   14acc:	68f8      	ldr	r0, [r7, #12]
   14ace:	4611      	mov	r1, r2
   14ad0:	461a      	mov	r2, r3
   14ad2:	f7ff ff1b 	bl	1490c <addSup>
   14ad6:	4603      	mov	r3, r0
   14ad8:	74fb      	strb	r3, [r7, #19]
	sup2neg(dst);
   14ada:	68f8      	ldr	r0, [r7, #12]
   14adc:	f7ff fec0 	bl	14860 <sup2neg>
	return i;
   14ae0:	7cfb      	ldrb	r3, [r7, #19]
}
   14ae2:	4618      	mov	r0, r3
   14ae4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14ae8:	f2c0 0302 	movt	r3, #2
   14aec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14aee:	681b      	ldr	r3, [r3, #0]
   14af0:	429a      	cmp	r2, r3
   14af2:	d001      	beq.n	14af8 <addStr+0x84>
   14af4:	f7f4 fa56 	bl	8fa4 <__stack_chk_fail>
   14af8:	f107 0740 	add.w	r7, r7, #64	; 0x40
   14afc:	46bd      	mov	sp, r7
   14afe:	bd80      	pop	{r7, pc}

00014b00 <subStr>:
 *    - strlen(dst)
 *
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\std.c
 */
byte subStr(char *dst, const char *arg1, const char *arg2) {
   14b00:	b580      	push	{r7, lr}
   14b02:	b090      	sub	sp, #64	; 0x40
   14b04:	af00      	add	r7, sp, #0
   14b06:	60f8      	str	r0, [r7, #12]
   14b08:	60b9      	str	r1, [r7, #8]
   14b0a:	607a      	str	r2, [r7, #4]
   14b0c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14b10:	f2c0 0302 	movt	r3, #2
   14b14:	681b      	ldr	r3, [r3, #0]
   14b16:	63fb      	str	r3, [r7, #60]	; 0x3c
	char tmp2[16 + 1];

	VERIFY(dst);
	VERIFY(arg1);
	VERIFY(arg2);
	VERIFY(strlen(arg1) <= 16);
   14b18:	68b8      	ldr	r0, [r7, #8]
   14b1a:	f7f4 e8b4 	blx	8c84 <_init+0x124>
	VERIFY(strlen(arg2) <= 16);
   14b1e:	6878      	ldr	r0, [r7, #4]
   14b20:	f7f4 e8b0 	blx	8c84 <_init+0x124>

	strcpy(tmp1, arg1);
   14b24:	f107 0314 	add.w	r3, r7, #20
   14b28:	4618      	mov	r0, r3
   14b2a:	68b9      	ldr	r1, [r7, #8]
   14b2c:	f7f4 e878 	blx	8c20 <_init+0xc0>
	neg2sup(tmp1);
   14b30:	f107 0314 	add.w	r3, r7, #20
   14b34:	4618      	mov	r0, r3
   14b36:	f7ff fe6f 	bl	14818 <neg2sup>

	strcpy(tmp2, arg2);
   14b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
   14b3e:	4618      	mov	r0, r3
   14b40:	6879      	ldr	r1, [r7, #4]
   14b42:	f7f4 e86e 	blx	8c20 <_init+0xc0>
	neg2sup(tmp2);
   14b46:	f107 0328 	add.w	r3, r7, #40	; 0x28
   14b4a:	4618      	mov	r0, r3
   14b4c:	f7ff fe64 	bl	14818 <neg2sup>
	negStr(tmp2);
   14b50:	f107 0328 	add.w	r3, r7, #40	; 0x28
   14b54:	4618      	mov	r0, r3
   14b56:	f7ff fdf3 	bl	14740 <negStr>

	i = addSup(dst, tmp1, tmp2);
   14b5a:	f107 0214 	add.w	r2, r7, #20
   14b5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
   14b62:	68f8      	ldr	r0, [r7, #12]
   14b64:	4611      	mov	r1, r2
   14b66:	461a      	mov	r2, r3
   14b68:	f7ff fed0 	bl	1490c <addSup>
   14b6c:	4603      	mov	r3, r0
   14b6e:	74fb      	strb	r3, [r7, #19]
	sup2neg(dst);
   14b70:	68f8      	ldr	r0, [r7, #12]
   14b72:	f7ff fe75 	bl	14860 <sup2neg>
	return i;
   14b76:	7cfb      	ldrb	r3, [r7, #19]
}
   14b78:	4618      	mov	r0, r3
   14b7a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14b7e:	f2c0 0302 	movt	r3, #2
   14b82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14b84:	681b      	ldr	r3, [r3, #0]
   14b86:	429a      	cmp	r2, r3
   14b88:	d001      	beq.n	14b8e <subStr+0x8e>
   14b8a:	f7f4 fa0b 	bl	8fa4 <__stack_chk_fail>
   14b8e:	f107 0740 	add.w	r7, r7, #64	; 0x40
   14b92:	46bd      	mov	sp, r7
   14b94:	bd80      	pop	{r7, pc}
   14b96:	bf00      	nop

00014b98 <stdPow>:

/**
 * \todo To be documented
 */
card stdPow(int num, int exp) {
   14b98:	b580      	push	{r7, lr}
   14b9a:	b086      	sub	sp, #24
   14b9c:	af00      	add	r7, sp, #0
   14b9e:	6078      	str	r0, [r7, #4]
   14ba0:	6039      	str	r1, [r7, #0]
   14ba2:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14ba6:	f2c0 0302 	movt	r3, #2
   14baa:	681b      	ldr	r3, [r3, #0]
   14bac:	617b      	str	r3, [r7, #20]
	int i;
	card c = 1;
   14bae:	2301      	movs	r3, #1
   14bb0:	613b      	str	r3, [r7, #16]

	for (i = 1; i <= exp; i++, c *= num);
   14bb2:	2301      	movs	r3, #1
   14bb4:	60fb      	str	r3, [r7, #12]
   14bb6:	e007      	b.n	14bc8 <stdPow+0x30>
   14bb8:	68fb      	ldr	r3, [r7, #12]
   14bba:	3301      	adds	r3, #1
   14bbc:	60fb      	str	r3, [r7, #12]
   14bbe:	687a      	ldr	r2, [r7, #4]
   14bc0:	693b      	ldr	r3, [r7, #16]
   14bc2:	fb02 f303 	mul.w	r3, r2, r3
   14bc6:	613b      	str	r3, [r7, #16]
   14bc8:	68fa      	ldr	r2, [r7, #12]
   14bca:	683b      	ldr	r3, [r7, #0]
   14bcc:	429a      	cmp	r2, r3
   14bce:	ddf3      	ble.n	14bb8 <stdPow+0x20>
	return c;
   14bd0:	693b      	ldr	r3, [r7, #16]
}
   14bd2:	4618      	mov	r0, r3
   14bd4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14bd8:	f2c0 0302 	movt	r3, #2
   14bdc:	697a      	ldr	r2, [r7, #20]
   14bde:	681b      	ldr	r3, [r3, #0]
   14be0:	429a      	cmp	r2, r3
   14be2:	d001      	beq.n	14be8 <stdPow+0x50>
   14be4:	f7f4 f9de 	bl	8fa4 <__stack_chk_fail>
   14be8:	f107 0718 	add.w	r7, r7, #24
   14bec:	46bd      	mov	sp, r7
   14bee:	bd80      	pop	{r7, pc}

00014bf0 <stdLrc>:
 * \return
 *    - lrc checksum calculated
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\std.c
 */
byte stdLrc(const byte * buf, int len) {
   14bf0:	b580      	push	{r7, lr}
   14bf2:	b084      	sub	sp, #16
   14bf4:	af00      	add	r7, sp, #0
   14bf6:	6078      	str	r0, [r7, #4]
   14bf8:	6039      	str	r1, [r7, #0]
   14bfa:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14bfe:	f2c0 0302 	movt	r3, #2
   14c02:	681b      	ldr	r3, [r3, #0]
   14c04:	60fb      	str	r3, [r7, #12]
	byte lrc;

	VERIFY(buf);
	lrc = 0;
   14c06:	2300      	movs	r3, #0
   14c08:	72fb      	strb	r3, [r7, #11]
	while(len--)
   14c0a:	e007      	b.n	14c1c <stdLrc+0x2c>
		lrc ^= *buf++;
   14c0c:	687b      	ldr	r3, [r7, #4]
   14c0e:	781a      	ldrb	r2, [r3, #0]
   14c10:	7afb      	ldrb	r3, [r7, #11]
   14c12:	4053      	eors	r3, r2
   14c14:	72fb      	strb	r3, [r7, #11]
   14c16:	687b      	ldr	r3, [r7, #4]
   14c18:	3301      	adds	r3, #1
   14c1a:	607b      	str	r3, [r7, #4]
byte stdLrc(const byte * buf, int len) {
	byte lrc;

	VERIFY(buf);
	lrc = 0;
	while(len--)
   14c1c:	683b      	ldr	r3, [r7, #0]
   14c1e:	2b00      	cmp	r3, #0
   14c20:	bf0c      	ite	eq
   14c22:	2300      	moveq	r3, #0
   14c24:	2301      	movne	r3, #1
   14c26:	b2db      	uxtb	r3, r3
   14c28:	683a      	ldr	r2, [r7, #0]
   14c2a:	3a01      	subs	r2, #1
   14c2c:	603a      	str	r2, [r7, #0]
   14c2e:	2b00      	cmp	r3, #0
   14c30:	d1ec      	bne.n	14c0c <stdLrc+0x1c>
		lrc ^= *buf++;
	return lrc;
   14c32:	7afb      	ldrb	r3, [r7, #11]
}
   14c34:	4618      	mov	r0, r3
   14c36:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14c3a:	f2c0 0302 	movt	r3, #2
   14c3e:	68fa      	ldr	r2, [r7, #12]
   14c40:	681b      	ldr	r3, [r3, #0]
   14c42:	429a      	cmp	r2, r3
   14c44:	d001      	beq.n	14c4a <stdLrc+0x5a>
   14c46:	f7f4 f9ad 	bl	8fa4 <__stack_chk_fail>
   14c4a:	f107 0710 	add.w	r7, r7, #16
   14c4e:	46bd      	mov	sp, r7
   14c50:	bd80      	pop	{r7, pc}
   14c52:	bf00      	nop

00014c54 <trk2Lrc>:
 *    - lrc checksum calculated
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\std.c
 * \test tcnl0028.c
 */
byte trk2Lrc(const byte * buf, int len) {
   14c54:	b580      	push	{r7, lr}
   14c56:	b084      	sub	sp, #16
   14c58:	af00      	add	r7, sp, #0
   14c5a:	6078      	str	r0, [r7, #4]
   14c5c:	6039      	str	r1, [r7, #0]
   14c5e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14c62:	f2c0 0302 	movt	r3, #2
   14c66:	681b      	ldr	r3, [r3, #0]
   14c68:	60fb      	str	r3, [r7, #12]
	byte lrc;
	byte a = 0;
   14c6a:	2300      	movs	r3, #0
   14c6c:	72fb      	strb	r3, [r7, #11]

	VERIFY(buf);
	lrc = 0;
   14c6e:	2300      	movs	r3, #0
   14c70:	72bb      	strb	r3, [r7, #10]
	while(len--) {
   14c72:	e009      	b.n	14c88 <trk2Lrc+0x34>
		a = *buf;
   14c74:	687b      	ldr	r3, [r7, #4]
   14c76:	781b      	ldrb	r3, [r3, #0]
   14c78:	72fb      	strb	r3, [r7, #11]
		lrc ^= a;
   14c7a:	7aba      	ldrb	r2, [r7, #10]
   14c7c:	7afb      	ldrb	r3, [r7, #11]
   14c7e:	4053      	eors	r3, r2
   14c80:	72bb      	strb	r3, [r7, #10]
		buf++;
   14c82:	687b      	ldr	r3, [r7, #4]
   14c84:	3301      	adds	r3, #1
   14c86:	607b      	str	r3, [r7, #4]
	byte lrc;
	byte a = 0;

	VERIFY(buf);
	lrc = 0;
	while(len--) {
   14c88:	683b      	ldr	r3, [r7, #0]
   14c8a:	2b00      	cmp	r3, #0
   14c8c:	bf0c      	ite	eq
   14c8e:	2300      	moveq	r3, #0
   14c90:	2301      	movne	r3, #1
   14c92:	b2db      	uxtb	r3, r3
   14c94:	683a      	ldr	r2, [r7, #0]
   14c96:	3a01      	subs	r2, #1
   14c98:	603a      	str	r2, [r7, #0]
   14c9a:	2b00      	cmp	r3, #0
   14c9c:	d1ea      	bne.n	14c74 <trk2Lrc+0x20>
		a = *buf;
		lrc ^= a;
		buf++;
	}
	lrc = lrc & 0x0F;
   14c9e:	7abb      	ldrb	r3, [r7, #10]
   14ca0:	f003 030f 	and.w	r3, r3, #15
   14ca4:	72bb      	strb	r3, [r7, #10]
	lrc = lrc + 0x30;
   14ca6:	7abb      	ldrb	r3, [r7, #10]
   14ca8:	3330      	adds	r3, #48	; 0x30
   14caa:	72bb      	strb	r3, [r7, #10]
	return lrc;
   14cac:	7abb      	ldrb	r3, [r7, #10]

}
   14cae:	4618      	mov	r0, r3
   14cb0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14cb4:	f2c0 0302 	movt	r3, #2
   14cb8:	68fa      	ldr	r2, [r7, #12]
   14cba:	681b      	ldr	r3, [r3, #0]
   14cbc:	429a      	cmp	r2, r3
   14cbe:	d001      	beq.n	14cc4 <trk2Lrc+0x70>
   14cc0:	f7f4 f970 	bl	8fa4 <__stack_chk_fail>
   14cc4:	f107 0710 	add.w	r7, r7, #16
   14cc8:	46bd      	mov	sp, r7
   14cca:	bd80      	pop	{r7, pc}

00014ccc <stdGetAcc>:
 *    - negative otherwise (short pan).
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\std.c
 */
#define lenAcc 12
byte stdGetAcc(byte * acc, const char *pan) {
   14ccc:	b580      	push	{r7, lr}
   14cce:	b08a      	sub	sp, #40	; 0x28
   14cd0:	af00      	add	r7, sp, #0
   14cd2:	6078      	str	r0, [r7, #4]
   14cd4:	6039      	str	r1, [r7, #0]
   14cd6:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14cda:	f2c0 0302 	movt	r3, #2
   14cde:	681b      	ldr	r3, [r3, #0]
   14ce0:	627b      	str	r3, [r7, #36]	; 0x24

	VERIFY(acc);
	VERIFY(pan);
	VERIFY(strlen(pan));

	memset(acc, 0, 8);
   14ce2:	6878      	ldr	r0, [r7, #4]
   14ce4:	2100      	movs	r1, #0
   14ce6:	2208      	movs	r2, #8
   14ce8:	f7f3 ef68 	blx	8bbc <_init+0x5c>

	idx = strlen(pan) - 1;      //non include Luhn code
   14cec:	6838      	ldr	r0, [r7, #0]
   14cee:	f7f3 efca 	blx	8c84 <_init+0x124>
   14cf2:	4603      	mov	r3, r0
   14cf4:	b2db      	uxtb	r3, r3
   14cf6:	3b01      	subs	r3, #1
   14cf8:	73fb      	strb	r3, [r7, #15]
	if(idx < lenAcc)
   14cfa:	7bfb      	ldrb	r3, [r7, #15]
   14cfc:	2b0b      	cmp	r3, #11
   14cfe:	d801      	bhi.n	14d04 <stdGetAcc+0x38>
		return 0;               //pan too short
   14d00:	2300      	movs	r3, #0
   14d02:	e01d      	b.n	14d40 <stdGetAcc+0x74>

	idx -= lenAcc;
   14d04:	7bfb      	ldrb	r3, [r7, #15]
   14d06:	3b0c      	subs	r3, #12
   14d08:	73fb      	strb	r3, [r7, #15]
	ret = fmtSbs(asc, pan, idx, lenAcc);
   14d0a:	f107 0214 	add.w	r2, r7, #20
   14d0e:	7bfb      	ldrb	r3, [r7, #15]
   14d10:	4610      	mov	r0, r2
   14d12:	6839      	ldr	r1, [r7, #0]
   14d14:	461a      	mov	r2, r3
   14d16:	230c      	movs	r3, #12
   14d18:	f7ff f82e 	bl	13d78 <fmtSbs>
   14d1c:	6138      	str	r0, [r7, #16]
	VERIFY(ret == lenAcc);
	VERIFY(strlen(asc) == lenAcc);
   14d1e:	f107 0314 	add.w	r3, r7, #20
   14d22:	4618      	mov	r0, r3
   14d24:	f7f3 efae 	blx	8c84 <_init+0x124>

	ret = hex2bin(acc + 2, asc, lenAcc / 2);
   14d28:	687b      	ldr	r3, [r7, #4]
   14d2a:	1c9a      	adds	r2, r3, #2
   14d2c:	f107 0314 	add.w	r3, r7, #20
   14d30:	4610      	mov	r0, r2
   14d32:	4619      	mov	r1, r3
   14d34:	2206      	movs	r2, #6
   14d36:	f7fd ff15 	bl	12b64 <hex2bin>
   14d3a:	6138      	str	r0, [r7, #16]
	VERIFY(ret == (lenAcc / 2));

	return (byte) ret;
   14d3c:	693b      	ldr	r3, [r7, #16]
   14d3e:	b2db      	uxtb	r3, r3
}
   14d40:	4618      	mov	r0, r3
   14d42:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14d46:	f2c0 0302 	movt	r3, #2
   14d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   14d4c:	681b      	ldr	r3, [r3, #0]
   14d4e:	429a      	cmp	r2, r3
   14d50:	d001      	beq.n	14d56 <stdGetAcc+0x8a>
   14d52:	f7f4 f927 	bl	8fa4 <__stack_chk_fail>
   14d56:	f107 0728 	add.w	r7, r7, #40	; 0x28
   14d5a:	46bd      	mov	sp, r7
   14d5c:	bd80      	pop	{r7, pc}
   14d5e:	bf00      	nop

00014d60 <stdLuhnCheck>:
 *    - 0 otherwise.
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\std.c
 * \test tcab0053.c
 */
byte stdLuhnCheck(const char *pan) {
   14d60:	b580      	push	{r7, lr}
   14d62:	b086      	sub	sp, #24
   14d64:	af00      	add	r7, sp, #0
   14d66:	6078      	str	r0, [r7, #4]
   14d68:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14d6c:	f2c0 0302 	movt	r3, #2
   14d70:	681b      	ldr	r3, [r3, #0]
   14d72:	617b      	str	r3, [r7, #20]
	byte odd;                   //odd/even flag
	byte tmp;

	VERIFY(pan);

	len = strlen(pan);
   14d74:	6878      	ldr	r0, [r7, #4]
   14d76:	f7f3 ef86 	blx	8c84 <_init+0x124>
   14d7a:	4603      	mov	r3, r0
   14d7c:	74fb      	strb	r3, [r7, #19]
	if(!len)
   14d7e:	7cfb      	ldrb	r3, [r7, #19]
   14d80:	2b00      	cmp	r3, #0
   14d82:	d101      	bne.n	14d88 <stdLuhnCheck+0x28>
		return 0;               //empty pan
   14d84:	2300      	movs	r3, #0
   14d86:	e065      	b.n	14e54 <stdLuhnCheck+0xf4>
	idx = len;
   14d88:	7cfb      	ldrb	r3, [r7, #19]
   14d8a:	73fb      	strb	r3, [r7, #15]
	sum = 0;
   14d8c:	2300      	movs	r3, #0
   14d8e:	743b      	strb	r3, [r7, #16]
	odd = 1;
   14d90:	2301      	movs	r3, #1
   14d92:	747b      	strb	r3, [r7, #17]
	while(idx--) {
   14d94:	e040      	b.n	14e18 <stdLuhnCheck+0xb8>
		if(pan[idx] < '0')
   14d96:	7bfb      	ldrb	r3, [r7, #15]
   14d98:	687a      	ldr	r2, [r7, #4]
   14d9a:	18d3      	adds	r3, r2, r3
   14d9c:	781b      	ldrb	r3, [r3, #0]
   14d9e:	2b2f      	cmp	r3, #47	; 0x2f
   14da0:	d801      	bhi.n	14da6 <stdLuhnCheck+0x46>
			return 0;           //invalid character
   14da2:	2300      	movs	r3, #0
   14da4:	e056      	b.n	14e54 <stdLuhnCheck+0xf4>
		if(pan[idx] > '9')
   14da6:	7bfb      	ldrb	r3, [r7, #15]
   14da8:	687a      	ldr	r2, [r7, #4]
   14daa:	18d3      	adds	r3, r2, r3
   14dac:	781b      	ldrb	r3, [r3, #0]
   14dae:	2b39      	cmp	r3, #57	; 0x39
   14db0:	d901      	bls.n	14db6 <stdLuhnCheck+0x56>
			return 0;           //invalid character
   14db2:	2300      	movs	r3, #0
   14db4:	e04e      	b.n	14e54 <stdLuhnCheck+0xf4>
		tmp = pan[idx] - '0';
   14db6:	7bfb      	ldrb	r3, [r7, #15]
   14db8:	687a      	ldr	r2, [r7, #4]
   14dba:	18d3      	adds	r3, r2, r3
   14dbc:	781b      	ldrb	r3, [r3, #0]
   14dbe:	3b30      	subs	r3, #48	; 0x30
   14dc0:	74bb      	strb	r3, [r7, #18]
		if(!odd) {
   14dc2:	7c7b      	ldrb	r3, [r7, #17]
   14dc4:	2b00      	cmp	r3, #0
   14dc6:	d11c      	bne.n	14e02 <stdLuhnCheck+0xa2>
			tmp += tmp;
   14dc8:	7cba      	ldrb	r2, [r7, #18]
   14dca:	7cbb      	ldrb	r3, [r7, #18]
   14dcc:	18d3      	adds	r3, r2, r3
   14dce:	74bb      	strb	r3, [r7, #18]
			tmp = (tmp % 10) + (tmp / 10);
   14dd0:	7cba      	ldrb	r2, [r7, #18]
   14dd2:	f64c 43cd 	movw	r3, #52429	; 0xcccd
   14dd6:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
   14dda:	fba3 0302 	umull	r0, r3, r3, r2
   14dde:	08d9      	lsrs	r1, r3, #3
   14de0:	460b      	mov	r3, r1
   14de2:	009b      	lsls	r3, r3, #2
   14de4:	185b      	adds	r3, r3, r1
   14de6:	005b      	lsls	r3, r3, #1
   14de8:	1ad3      	subs	r3, r2, r3
   14dea:	b2da      	uxtb	r2, r3
   14dec:	7cb9      	ldrb	r1, [r7, #18]
   14dee:	f64c 43cd 	movw	r3, #52429	; 0xcccd
   14df2:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
   14df6:	fba3 0301 	umull	r0, r3, r3, r1
   14dfa:	08db      	lsrs	r3, r3, #3
   14dfc:	b2db      	uxtb	r3, r3
   14dfe:	18d3      	adds	r3, r2, r3
   14e00:	74bb      	strb	r3, [r7, #18]
		}
		sum += tmp;
   14e02:	7c3a      	ldrb	r2, [r7, #16]
   14e04:	7cbb      	ldrb	r3, [r7, #18]
   14e06:	18d3      	adds	r3, r2, r3
   14e08:	743b      	strb	r3, [r7, #16]
		odd = !odd;
   14e0a:	7c7b      	ldrb	r3, [r7, #17]
   14e0c:	2b00      	cmp	r3, #0
   14e0e:	bf14      	ite	ne
   14e10:	2300      	movne	r3, #0
   14e12:	2301      	moveq	r3, #1
   14e14:	b2db      	uxtb	r3, r3
   14e16:	747b      	strb	r3, [r7, #17]
	if(!len)
		return 0;               //empty pan
	idx = len;
	sum = 0;
	odd = 1;
	while(idx--) {
   14e18:	7bfb      	ldrb	r3, [r7, #15]
   14e1a:	2b00      	cmp	r3, #0
   14e1c:	bf0c      	ite	eq
   14e1e:	2300      	moveq	r3, #0
   14e20:	2301      	movne	r3, #1
   14e22:	b2db      	uxtb	r3, r3
   14e24:	7bfa      	ldrb	r2, [r7, #15]
   14e26:	3a01      	subs	r2, #1
   14e28:	73fa      	strb	r2, [r7, #15]
   14e2a:	2b00      	cmp	r3, #0
   14e2c:	d1b3      	bne.n	14d96 <stdLuhnCheck+0x36>
			tmp = (tmp % 10) + (tmp / 10);
		}
		sum += tmp;
		odd = !odd;
	}
	if(sum % 10 == 0)
   14e2e:	7c3a      	ldrb	r2, [r7, #16]
   14e30:	f64c 43cd 	movw	r3, #52429	; 0xcccd
   14e34:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
   14e38:	fba3 1302 	umull	r1, r3, r3, r2
   14e3c:	08d9      	lsrs	r1, r3, #3
   14e3e:	460b      	mov	r3, r1
   14e40:	009b      	lsls	r3, r3, #2
   14e42:	185b      	adds	r3, r3, r1
   14e44:	005b      	lsls	r3, r3, #1
   14e46:	1ad3      	subs	r3, r2, r3
   14e48:	b2db      	uxtb	r3, r3
   14e4a:	2b00      	cmp	r3, #0
   14e4c:	d101      	bne.n	14e52 <stdLuhnCheck+0xf2>
		return 1;
   14e4e:	2301      	movs	r3, #1
   14e50:	e000      	b.n	14e54 <stdLuhnCheck+0xf4>
	return 0;
   14e52:	2300      	movs	r3, #0
}
   14e54:	4618      	mov	r0, r3
   14e56:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14e5a:	f2c0 0302 	movt	r3, #2
   14e5e:	697a      	ldr	r2, [r7, #20]
   14e60:	681b      	ldr	r3, [r3, #0]
   14e62:	429a      	cmp	r2, r3
   14e64:	d001      	beq.n	14e6a <stdLuhnCheck+0x10a>
   14e66:	f7f4 f89d 	bl	8fa4 <__stack_chk_fail>
   14e6a:	f107 0718 	add.w	r7, r7, #24
   14e6e:	46bd      	mov	sp, r7
   14e70:	bd80      	pop	{r7, pc}
   14e72:	bf00      	nop

00014e74 <stdArgMsgCrc16>:

/**
 * \todo To be documented
 */
void stdArgMsgCrc16(word * crc_val) {
   14e74:	b580      	push	{r7, lr}
   14e76:	b084      	sub	sp, #16
   14e78:	af00      	add	r7, sp, #0
   14e7a:	6078      	str	r0, [r7, #4]
   14e7c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14e80:	f2c0 0302 	movt	r3, #2
   14e84:	681b      	ldr	r3, [r3, #0]
   14e86:	60fb      	str	r3, [r7, #12]
	word i = 0, flag;
   14e88:	2300      	movs	r3, #0
   14e8a:	813b      	strh	r3, [r7, #8]

	for (i = 0; i < 16; i++) {
   14e8c:	2300      	movs	r3, #0
   14e8e:	813b      	strh	r3, [r7, #8]
   14e90:	e01b      	b.n	14eca <stdArgMsgCrc16+0x56>
		flag = (crc_val[0] & 0x8000);
   14e92:	687b      	ldr	r3, [r7, #4]
   14e94:	881b      	ldrh	r3, [r3, #0]
   14e96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
   14e9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   14e9e:	817b      	strh	r3, [r7, #10]
		crc_val[0] <<= 1;
   14ea0:	687b      	ldr	r3, [r7, #4]
   14ea2:	881b      	ldrh	r3, [r3, #0]
   14ea4:	005b      	lsls	r3, r3, #1
   14ea6:	b29a      	uxth	r2, r3
   14ea8:	687b      	ldr	r3, [r7, #4]
   14eaa:	801a      	strh	r2, [r3, #0]
		if(flag)
   14eac:	897b      	ldrh	r3, [r7, #10]
   14eae:	2b00      	cmp	r3, #0
   14eb0:	d008      	beq.n	14ec4 <stdArgMsgCrc16+0x50>
			crc_val[0] ^= 0x1021;
   14eb2:	687b      	ldr	r3, [r7, #4]
   14eb4:	881b      	ldrh	r3, [r3, #0]
   14eb6:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
   14eba:	f083 0301 	eor.w	r3, r3, #1
   14ebe:	b29a      	uxth	r2, r3
   14ec0:	687b      	ldr	r3, [r7, #4]
   14ec2:	801a      	strh	r2, [r3, #0]
 * \todo To be documented
 */
void stdArgMsgCrc16(word * crc_val) {
	word i = 0, flag;

	for (i = 0; i < 16; i++) {
   14ec4:	893b      	ldrh	r3, [r7, #8]
   14ec6:	3301      	adds	r3, #1
   14ec8:	813b      	strh	r3, [r7, #8]
   14eca:	893b      	ldrh	r3, [r7, #8]
   14ecc:	2b0f      	cmp	r3, #15
   14ece:	d9e0      	bls.n	14e92 <stdArgMsgCrc16+0x1e>
		flag = (crc_val[0] & 0x8000);
		crc_val[0] <<= 1;
		if(flag)
			crc_val[0] ^= 0x1021;
	}
}
   14ed0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14ed4:	f2c0 0302 	movt	r3, #2
   14ed8:	68fa      	ldr	r2, [r7, #12]
   14eda:	681b      	ldr	r3, [r3, #0]
   14edc:	429a      	cmp	r2, r3
   14ede:	d001      	beq.n	14ee4 <stdArgMsgCrc16+0x70>
   14ee0:	f7f4 f860 	bl	8fa4 <__stack_chk_fail>
   14ee4:	f107 0710 	add.w	r7, r7, #16
   14ee8:	46bd      	mov	sp, r7
   14eea:	bd80      	pop	{r7, pc}

00014eec <stdCrc16>:

/** Crc16(Xmodem) calculation according to CCITT-1021
 * \todo To be documented
 * \test tcnl0015.C
 */
word stdCrc16(const byte * buf, word len, byte augment_message_for_crc) {
   14eec:	b580      	push	{r7, lr}
   14eee:	b086      	sub	sp, #24
   14ef0:	af00      	add	r7, sp, #0
   14ef2:	6078      	str	r0, [r7, #4]
   14ef4:	4613      	mov	r3, r2
   14ef6:	460a      	mov	r2, r1
   14ef8:	807a      	strh	r2, [r7, #2]
   14efa:	707b      	strb	r3, [r7, #1]
   14efc:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14f00:	f2c0 0302 	movt	r3, #2
   14f04:	681b      	ldr	r3, [r3, #0]
   14f06:	617b      	str	r3, [r7, #20]

	word crc_val = 0x0000;
   14f08:	2300      	movs	r3, #0
   14f0a:	81bb      	strh	r3, [r7, #12]
	word i = 0;
   14f0c:	2300      	movs	r3, #0
   14f0e:	81fb      	strh	r3, [r7, #14]
	word shifter, flag;

	crc_val = 0;
   14f10:	2300      	movs	r3, #0
   14f12:	81bb      	strh	r3, [r7, #12]
	do {
		for (shifter = 0x80; shifter; shifter >>= 1) {
   14f14:	2380      	movs	r3, #128	; 0x80
   14f16:	823b      	strh	r3, [r7, #16]
   14f18:	e028      	b.n	14f6c <stdCrc16+0x80>
			flag = ((crc_val) & 0x8000);
   14f1a:	89bb      	ldrh	r3, [r7, #12]
   14f1c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
   14f20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   14f24:	827b      	strh	r3, [r7, #18]
			(crc_val) <<= 1;
   14f26:	89bb      	ldrh	r3, [r7, #12]
   14f28:	005b      	lsls	r3, r3, #1
   14f2a:	b29b      	uxth	r3, r3
   14f2c:	81bb      	strh	r3, [r7, #12]
			(crc_val) |= ((shifter & buf[i]) ? 1 : 0);
   14f2e:	8a3a      	ldrh	r2, [r7, #16]
   14f30:	89fb      	ldrh	r3, [r7, #14]
   14f32:	6879      	ldr	r1, [r7, #4]
   14f34:	18cb      	adds	r3, r1, r3
   14f36:	781b      	ldrb	r3, [r3, #0]
   14f38:	4013      	ands	r3, r2
   14f3a:	2b00      	cmp	r3, #0
   14f3c:	bf0c      	ite	eq
   14f3e:	2300      	moveq	r3, #0
   14f40:	2301      	movne	r3, #1
   14f42:	b2db      	uxtb	r3, r3
   14f44:	461a      	mov	r2, r3
   14f46:	89bb      	ldrh	r3, [r7, #12]
   14f48:	b29b      	uxth	r3, r3
   14f4a:	4313      	orrs	r3, r2
   14f4c:	b29b      	uxth	r3, r3
   14f4e:	b29b      	uxth	r3, r3
   14f50:	81bb      	strh	r3, [r7, #12]
			if(flag)
   14f52:	8a7b      	ldrh	r3, [r7, #18]
   14f54:	2b00      	cmp	r3, #0
   14f56:	d006      	beq.n	14f66 <stdCrc16+0x7a>
				(crc_val) ^= 0x1021;
   14f58:	89bb      	ldrh	r3, [r7, #12]
   14f5a:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
   14f5e:	f083 0301 	eor.w	r3, r3, #1
   14f62:	b29b      	uxth	r3, r3
   14f64:	81bb      	strh	r3, [r7, #12]
	word i = 0;
	word shifter, flag;

	crc_val = 0;
	do {
		for (shifter = 0x80; shifter; shifter >>= 1) {
   14f66:	8a3b      	ldrh	r3, [r7, #16]
   14f68:	085b      	lsrs	r3, r3, #1
   14f6a:	823b      	strh	r3, [r7, #16]
   14f6c:	8a3b      	ldrh	r3, [r7, #16]
   14f6e:	2b00      	cmp	r3, #0
   14f70:	d1d3      	bne.n	14f1a <stdCrc16+0x2e>
			(crc_val) |= ((shifter & buf[i]) ? 1 : 0);
			if(flag)
				(crc_val) ^= 0x1021;
		}

	} while(++i < len);
   14f72:	89fb      	ldrh	r3, [r7, #14]
   14f74:	3301      	adds	r3, #1
   14f76:	81fb      	strh	r3, [r7, #14]
   14f78:	89fa      	ldrh	r2, [r7, #14]
   14f7a:	887b      	ldrh	r3, [r7, #2]
   14f7c:	429a      	cmp	r2, r3
   14f7e:	d3c9      	bcc.n	14f14 <stdCrc16+0x28>
	if(augment_message_for_crc) {
   14f80:	787b      	ldrb	r3, [r7, #1]
   14f82:	2b00      	cmp	r3, #0
   14f84:	d004      	beq.n	14f90 <stdCrc16+0xa4>
		stdArgMsgCrc16(&crc_val);
   14f86:	f107 030c 	add.w	r3, r7, #12
   14f8a:	4618      	mov	r0, r3
   14f8c:	f7ff ff72 	bl	14e74 <stdArgMsgCrc16>
	}

	return crc_val;
   14f90:	89bb      	ldrh	r3, [r7, #12]
}
   14f92:	4618      	mov	r0, r3
   14f94:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14f98:	f2c0 0302 	movt	r3, #2
   14f9c:	697a      	ldr	r2, [r7, #20]
   14f9e:	681b      	ldr	r3, [r3, #0]
   14fa0:	429a      	cmp	r2, r3
   14fa2:	d001      	beq.n	14fa8 <stdCrc16+0xbc>
   14fa4:	f7f3 fffe 	bl	8fa4 <__stack_chk_fail>
   14fa8:	f107 0718 	add.w	r7, r7, #24
   14fac:	46bd      	mov	sp, r7
   14fae:	bd80      	pop	{r7, pc}

00014fb0 <xor>:
 * \return no
 * \sa Header: sys\\sys.h
 * \sa Source: sys\\tbx.c
 * \test tcab0057.c
 */
void xor(const byte * b1, const byte * b2, byte * dst, word len) {
   14fb0:	b580      	push	{r7, lr}
   14fb2:	b086      	sub	sp, #24
   14fb4:	af00      	add	r7, sp, #0
   14fb6:	60f8      	str	r0, [r7, #12]
   14fb8:	60b9      	str	r1, [r7, #8]
   14fba:	607a      	str	r2, [r7, #4]
   14fbc:	807b      	strh	r3, [r7, #2]
   14fbe:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   14fc2:	f2c0 0302 	movt	r3, #2
   14fc6:	681b      	ldr	r3, [r3, #0]
   14fc8:	617b      	str	r3, [r7, #20]
	VERIFY(b1);
	VERIFY(b2);
	VERIFY(dst);
	while(len--)
   14fca:	e010      	b.n	14fee <xor+0x3e>
		*dst++ = *b1++ ^ *b2++;
   14fcc:	68fb      	ldr	r3, [r7, #12]
   14fce:	781a      	ldrb	r2, [r3, #0]
   14fd0:	68bb      	ldr	r3, [r7, #8]
   14fd2:	781b      	ldrb	r3, [r3, #0]
   14fd4:	4053      	eors	r3, r2
   14fd6:	b2da      	uxtb	r2, r3
   14fd8:	687b      	ldr	r3, [r7, #4]
   14fda:	701a      	strb	r2, [r3, #0]
   14fdc:	687b      	ldr	r3, [r7, #4]
   14fde:	3301      	adds	r3, #1
   14fe0:	607b      	str	r3, [r7, #4]
   14fe2:	68fb      	ldr	r3, [r7, #12]
   14fe4:	3301      	adds	r3, #1
   14fe6:	60fb      	str	r3, [r7, #12]
   14fe8:	68bb      	ldr	r3, [r7, #8]
   14fea:	3301      	adds	r3, #1
   14fec:	60bb      	str	r3, [r7, #8]
 */
void xor(const byte * b1, const byte * b2, byte * dst, word len) {
	VERIFY(b1);
	VERIFY(b2);
	VERIFY(dst);
	while(len--)
   14fee:	887b      	ldrh	r3, [r7, #2]
   14ff0:	2b00      	cmp	r3, #0
   14ff2:	bf0c      	ite	eq
   14ff4:	2300      	moveq	r3, #0
   14ff6:	2301      	movne	r3, #1
   14ff8:	b2db      	uxtb	r3, r3
   14ffa:	887a      	ldrh	r2, [r7, #2]
   14ffc:	3a01      	subs	r2, #1
   14ffe:	807a      	strh	r2, [r7, #2]
   15000:	2b00      	cmp	r3, #0
   15002:	d1e3      	bne.n	14fcc <xor+0x1c>
		*dst++ = *b1++ ^ *b2++;
}
   15004:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15008:	f2c0 0302 	movt	r3, #2
   1500c:	697a      	ldr	r2, [r7, #20]
   1500e:	681b      	ldr	r3, [r3, #0]
   15010:	429a      	cmp	r2, r3
   15012:	d001      	beq.n	15018 <xor+0x68>
   15014:	f7f3 ffc6 	bl	8fa4 <__stack_chk_fail>
   15018:	f107 0718 	add.w	r7, r7, #24
   1501c:	46bd      	mov	sp, r7
   1501e:	bd80      	pop	{r7, pc}

00015020 <stdParity>:
 * \return no
 * \sa Header: sys\\sys.h
 * \sa Source: sys\\std.c
 * \test tcab0057.c
 */
void stdParity(byte * buf, word dim, byte par) {    //set parity bits
   15020:	b580      	push	{r7, lr}
   15022:	b084      	sub	sp, #16
   15024:	af00      	add	r7, sp, #0
   15026:	6078      	str	r0, [r7, #4]
   15028:	4613      	mov	r3, r2
   1502a:	460a      	mov	r2, r1
   1502c:	807a      	strh	r2, [r7, #2]
   1502e:	707b      	strb	r3, [r7, #1]
   15030:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15034:	f2c0 0302 	movt	r3, #2
   15038:	681b      	ldr	r3, [r3, #0]
   1503a:	60fb      	str	r3, [r7, #12]
	byte cnt, idx;

	VERIFY(buf);
	while(dim--) {
   1503c:	e02f      	b.n	1509e <stdParity+0x7e>
		cnt = 0;
   1503e:	2300      	movs	r3, #0
   15040:	72bb      	strb	r3, [r7, #10]
		for (idx = 1; idx < 8; idx++) {
   15042:	2301      	movs	r3, #1
   15044:	72fb      	strb	r3, [r7, #11]
   15046:	e013      	b.n	15070 <stdParity+0x50>
			if(idx == par)
   15048:	7afa      	ldrb	r2, [r7, #11]
   1504a:	787b      	ldrb	r3, [r7, #1]
   1504c:	429a      	cmp	r2, r3
   1504e:	d00b      	beq.n	15068 <stdParity+0x48>
				continue;
			if(bitTest(buf, idx))
   15050:	7afb      	ldrb	r3, [r7, #11]
   15052:	6878      	ldr	r0, [r7, #4]
   15054:	4619      	mov	r1, r3
   15056:	f7fe fd85 	bl	13b64 <bitTest>
   1505a:	4603      	mov	r3, r0
   1505c:	2b00      	cmp	r3, #0
   1505e:	d004      	beq.n	1506a <stdParity+0x4a>
				cnt++;
   15060:	7abb      	ldrb	r3, [r7, #10]
   15062:	3301      	adds	r3, #1
   15064:	72bb      	strb	r3, [r7, #10]
   15066:	e000      	b.n	1506a <stdParity+0x4a>
	VERIFY(buf);
	while(dim--) {
		cnt = 0;
		for (idx = 1; idx < 8; idx++) {
			if(idx == par)
				continue;
   15068:	bf00      	nop
	byte cnt, idx;

	VERIFY(buf);
	while(dim--) {
		cnt = 0;
		for (idx = 1; idx < 8; idx++) {
   1506a:	7afb      	ldrb	r3, [r7, #11]
   1506c:	3301      	adds	r3, #1
   1506e:	72fb      	strb	r3, [r7, #11]
   15070:	7afb      	ldrb	r3, [r7, #11]
   15072:	2b07      	cmp	r3, #7
   15074:	d9e8      	bls.n	15048 <stdParity+0x28>
			if(idx == par)
				continue;
			if(bitTest(buf, idx))
				cnt++;
		}
		if(cnt % 2)
   15076:	7abb      	ldrb	r3, [r7, #10]
   15078:	f003 0301 	and.w	r3, r3, #1
   1507c:	b2db      	uxtb	r3, r3
   1507e:	2b00      	cmp	r3, #0
   15080:	d005      	beq.n	1508e <stdParity+0x6e>
			bitOff(buf, par);
   15082:	787b      	ldrb	r3, [r7, #1]
   15084:	6878      	ldr	r0, [r7, #4]
   15086:	4619      	mov	r1, r3
   15088:	f7fe fd34 	bl	13af4 <bitOff>
   1508c:	e004      	b.n	15098 <stdParity+0x78>
		else
			bitOn(buf, par);
   1508e:	787b      	ldrb	r3, [r7, #1]
   15090:	6878      	ldr	r0, [r7, #4]
   15092:	4619      	mov	r1, r3
   15094:	f7fe fcf8 	bl	13a88 <bitOn>
		buf++;
   15098:	687b      	ldr	r3, [r7, #4]
   1509a:	3301      	adds	r3, #1
   1509c:	607b      	str	r3, [r7, #4]
 */
void stdParity(byte * buf, word dim, byte par) {    //set parity bits
	byte cnt, idx;

	VERIFY(buf);
	while(dim--) {
   1509e:	887b      	ldrh	r3, [r7, #2]
   150a0:	2b00      	cmp	r3, #0
   150a2:	bf0c      	ite	eq
   150a4:	2300      	moveq	r3, #0
   150a6:	2301      	movne	r3, #1
   150a8:	b2db      	uxtb	r3, r3
   150aa:	887a      	ldrh	r2, [r7, #2]
   150ac:	3a01      	subs	r2, #1
   150ae:	807a      	strh	r2, [r7, #2]
   150b0:	2b00      	cmp	r3, #0
   150b2:	d1c4      	bne.n	1503e <stdParity+0x1e>
			bitOff(buf, par);
		else
			bitOn(buf, par);
		buf++;
	}
}
   150b4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   150b8:	f2c0 0302 	movt	r3, #2
   150bc:	68fa      	ldr	r2, [r7, #12]
   150be:	681b      	ldr	r3, [r3, #0]
   150c0:	429a      	cmp	r2, r3
   150c2:	d001      	beq.n	150c8 <stdParity+0xa8>
   150c4:	f7f3 ff6e 	bl	8fa4 <__stack_chk_fail>
   150c8:	f107 0710 	add.w	r7, r7, #16
   150cc:	46bd      	mov	sp, r7
   150ce:	bd80      	pop	{r7, pc}

000150d0 <justdes2>:

static void justdes2(byte * dst, const byte * src, const byte * key, int ctl) {
   150d0:	b580      	push	{r7, lr}
   150d2:	b08c      	sub	sp, #48	; 0x30
   150d4:	af00      	add	r7, sp, #0
   150d6:	60f8      	str	r0, [r7, #12]
   150d8:	60b9      	str	r1, [r7, #8]
   150da:	607a      	str	r2, [r7, #4]
   150dc:	603b      	str	r3, [r7, #0]
   150de:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   150e2:	f2c0 0302 	movt	r3, #2
   150e6:	681b      	ldr	r3, [r3, #0]
   150e8:	62fb      	str	r3, [r7, #44]	; 0x2c
			0x8C0F78A0, 0x0D3095EF, 0x7A506B8E, 0x8445D610,
			0x5223AB47, 0x724C0C34, 0x45AF54BC, 0x38DBF9CB
	};

	/* initial permutations IP and PC1 */
	l = r = c = d = 0;
   150ea:	2300      	movs	r3, #0
   150ec:	61bb      	str	r3, [r7, #24]
   150ee:	69bb      	ldr	r3, [r7, #24]
   150f0:	617b      	str	r3, [r7, #20]
   150f2:	697b      	ldr	r3, [r7, #20]
   150f4:	61fb      	str	r3, [r7, #28]
   150f6:	69fb      	ldr	r3, [r7, #28]
   150f8:	623b      	str	r3, [r7, #32]
	i = 7;
   150fa:	2307      	movs	r3, #7
   150fc:	627b      	str	r3, [r7, #36]	; 0x24
	do {
		x = src[i];
   150fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15100:	68ba      	ldr	r2, [r7, #8]
   15102:	18d3      	adds	r3, r2, r3
   15104:	781b      	ldrb	r3, [r3, #0]
   15106:	62bb      	str	r3, [r7, #40]	; 0x28
		l = l << 1 | (x & 1 << 0) | (x & 1 << 2) << 6 | (x & 1 << 4) << 12 | (x
   15108:	6a3b      	ldr	r3, [r7, #32]
   1510a:	005a      	lsls	r2, r3, #1
   1510c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1510e:	f003 0301 	and.w	r3, r3, #1
   15112:	431a      	orrs	r2, r3
   15114:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15116:	f003 0304 	and.w	r3, r3, #4
   1511a:	019b      	lsls	r3, r3, #6
   1511c:	431a      	orrs	r2, r3
   1511e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15120:	f003 0310 	and.w	r3, r3, #16
   15124:	031b      	lsls	r3, r3, #12
   15126:	431a      	orrs	r2, r3
				&
   15128:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1512a:	f003 0340 	and.w	r3, r3, #64	; 0x40
				1
				<<
				6)
				<< 18;
   1512e:	049b      	lsls	r3, r3, #18
	/* initial permutations IP and PC1 */
	l = r = c = d = 0;
	i = 7;
	do {
		x = src[i];
		l = l << 1 | (x & 1 << 0) | (x & 1 << 2) << 6 | (x & 1 << 4) << 12 | (x
   15130:	4313      	orrs	r3, r2
   15132:	623b      	str	r3, [r7, #32]
				&
				1
				<<
				6)
				<< 18;
		r = r << 1 | (x & 1 << 1) >> 1 | (x & 1 << 3) << 5 | (x & 1 << 5) << 11
   15134:	69fb      	ldr	r3, [r7, #28]
   15136:	005a      	lsls	r2, r3, #1
   15138:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1513a:	f003 0302 	and.w	r3, r3, #2
   1513e:	085b      	lsrs	r3, r3, #1
   15140:	431a      	orrs	r2, r3
   15142:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15144:	f003 0308 	and.w	r3, r3, #8
   15148:	015b      	lsls	r3, r3, #5
   1514a:	431a      	orrs	r2, r3
   1514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1514e:	f003 0320 	and.w	r3, r3, #32
   15152:	02db      	lsls	r3, r3, #11
   15154:	431a      	orrs	r2, r3
				| (x & 1 << 7) << 17;
   15156:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15158:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1515c:	045b      	lsls	r3, r3, #17
				&
				1
				<<
				6)
				<< 18;
		r = r << 1 | (x & 1 << 1) >> 1 | (x & 1 << 3) << 5 | (x & 1 << 5) << 11
   1515e:	4313      	orrs	r3, r2
   15160:	61fb      	str	r3, [r7, #28]
				| (x & 1 << 7) << 17;
		x = key[i];
   15162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15164:	687a      	ldr	r2, [r7, #4]
   15166:	18d3      	adds	r3, r2, r3
   15168:	781b      	ldrb	r3, [r3, #0]
   1516a:	62bb      	str	r3, [r7, #40]	; 0x28
		c = c << 1 | (x & 1 << 7) << 17 | (x & 1 << 6) << 10 | (x & 1 << 5) << 3
   1516c:	697b      	ldr	r3, [r7, #20]
   1516e:	005a      	lsls	r2, r3, #1
   15170:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15172:	f003 0380 	and.w	r3, r3, #128	; 0x80
   15176:	045b      	lsls	r3, r3, #17
   15178:	431a      	orrs	r2, r3
   1517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1517c:	f003 0340 	and.w	r3, r3, #64	; 0x40
   15180:	029b      	lsls	r3, r3, #10
   15182:	431a      	orrs	r2, r3
   15184:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15186:	f003 0320 	and.w	r3, r3, #32
   1518a:	00db      	lsls	r3, r3, #3
   1518c:	431a      	orrs	r2, r3
				| (x & 1 << 4) >> 4;
   1518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15190:	f003 0310 	and.w	r3, r3, #16
   15194:	091b      	lsrs	r3, r3, #4
				6)
				<< 18;
		r = r << 1 | (x & 1 << 1) >> 1 | (x & 1 << 3) << 5 | (x & 1 << 5) << 11
				| (x & 1 << 7) << 17;
		x = key[i];
		c = c << 1 | (x & 1 << 7) << 17 | (x & 1 << 6) << 10 | (x & 1 << 5) << 3
   15196:	4313      	orrs	r3, r2
   15198:	617b      	str	r3, [r7, #20]
				| (x & 1 << 4) >> 4;
		d = d << 1 | (x & 1 << 1) << 19 | (x & 1 << 2) << 10 | (x & 1 << 3) <<
   1519a:	69bb      	ldr	r3, [r7, #24]
   1519c:	005a      	lsls	r2, r3, #1
   1519e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   151a0:	f003 0302 	and.w	r3, r3, #2
   151a4:	04db      	lsls	r3, r3, #19
   151a6:	431a      	orrs	r2, r3
   151a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   151aa:	f003 0304 	and.w	r3, r3, #4
   151ae:	029b      	lsls	r3, r3, #10
   151b0:	431a      	orrs	r2, r3
   151b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   151b4:	f003 0308 	and.w	r3, r3, #8
   151b8:	005b      	lsls	r3, r3, #1
   151ba:	4313      	orrs	r3, r2
   151bc:	61bb      	str	r3, [r7, #24]
				1;
	} while(--i >= 0);
   151be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   151c0:	3b01      	subs	r3, #1
   151c2:	627b      	str	r3, [r7, #36]	; 0x24
   151c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   151c6:	2b00      	cmp	r3, #0
   151c8:	da99      	bge.n	150fe <justdes2+0x2e>
	d |= c & 0x0F;
   151ca:	697b      	ldr	r3, [r7, #20]
   151cc:	f003 030f 	and.w	r3, r3, #15
   151d0:	69ba      	ldr	r2, [r7, #24]
   151d2:	4313      	orrs	r3, r2
   151d4:	61bb      	str	r3, [r7, #24]
	c >>= 4;
   151d6:	697b      	ldr	r3, [r7, #20]
   151d8:	091b      	lsrs	r3, r3, #4
   151da:	617b      	str	r3, [r7, #20]
	i = 24;
   151dc:	2318      	movs	r3, #24
   151de:	627b      	str	r3, [r7, #36]	; 0x24
	/* first round is special: one left shift on encipher, no shift en decipher */
	if(ctl != 0)
   151e0:	683b      	ldr	r3, [r7, #0]
   151e2:	2b00      	cmp	r3, #0
   151e4:	d112      	bne.n	1520c <justdes2+0x13c>
   151e6:	e000      	b.n	151ea <justdes2+0x11a>
	r = x;
	/* decide/perform key shifts */
	if((i & 7) == 0) {
		i -= 2;
		if(ctl == 0)
			goto leftby1;
   151e8:	bf00      	nop
	i = 24;
	/* first round is special: one left shift on encipher, no shift en decipher */
	if(ctl != 0)
		goto startround;
	leftby1:
	c = c << 1 | ((c >> 27) & 1);
   151ea:	697b      	ldr	r3, [r7, #20]
   151ec:	005a      	lsls	r2, r3, #1
   151ee:	697b      	ldr	r3, [r7, #20]
   151f0:	0edb      	lsrs	r3, r3, #27
   151f2:	f003 0301 	and.w	r3, r3, #1
   151f6:	4313      	orrs	r3, r2
   151f8:	617b      	str	r3, [r7, #20]
	d = d << 1 | ((d >> 27) & 1);
   151fa:	69bb      	ldr	r3, [r7, #24]
   151fc:	005a      	lsls	r2, r3, #1
   151fe:	69bb      	ldr	r3, [r7, #24]
   15200:	0edb      	lsrs	r3, r3, #27
   15202:	f003 0301 	and.w	r3, r3, #1
   15206:	4313      	orrs	r3, r2
   15208:	61bb      	str	r3, [r7, #24]
   1520a:	e000      	b.n	1520e <justdes2+0x13e>
	d |= c & 0x0F;
	c >>= 4;
	i = 24;
	/* first round is special: one left shift on encipher, no shift en decipher */
	if(ctl != 0)
		goto startround;
   1520c:	bf00      	nop
	leftby1:
	c = c << 1 | ((c >> 27) & 1);
	d = d << 1 | ((d >> 27) & 1);
	startround:
	/* a round - apply PC2, the S-boxes and permutation E */
	x = (s[((r >> 26 & 62) | (r & 1)) ^
   1520e:	69fb      	ldr	r3, [r7, #28]
   15210:	0e9b      	lsrs	r3, r3, #26
   15212:	f003 023e 	and.w	r2, r3, #62	; 0x3e
   15216:	69fb      	ldr	r3, [r7, #28]
   15218:	f003 0301 	and.w	r3, r3, #1
   1521c:	431a      	orrs	r2, r3
		   ((c >> 6 & 32) | (c >> 13 & 16) | (c >> 1 & 8) | (c >> 25 & 4) |
   1521e:	697b      	ldr	r3, [r7, #20]
   15220:	099b      	lsrs	r3, r3, #6
   15222:	f003 0120 	and.w	r1, r3, #32
   15226:	697b      	ldr	r3, [r7, #20]
   15228:	0b5b      	lsrs	r3, r3, #13
   1522a:	f003 0310 	and.w	r3, r3, #16
   1522e:	4319      	orrs	r1, r3
   15230:	697b      	ldr	r3, [r7, #20]
   15232:	085b      	lsrs	r3, r3, #1
   15234:	f003 0308 	and.w	r3, r3, #8
   15238:	4319      	orrs	r1, r3
   1523a:	697b      	ldr	r3, [r7, #20]
   1523c:	0e5b      	lsrs	r3, r3, #25
   1523e:	f003 0304 	and.w	r3, r3, #4
   15242:	4319      	orrs	r1, r3
				   (c >> 22 & 2) | (c >> 14 & 1))] & 0x00808202) ^ l;
   15244:	697b      	ldr	r3, [r7, #20]
   15246:	0d9b      	lsrs	r3, r3, #22
   15248:	f003 0302 	and.w	r3, r3, #2
	c = c << 1 | ((c >> 27) & 1);
	d = d << 1 | ((d >> 27) & 1);
	startround:
	/* a round - apply PC2, the S-boxes and permutation E */
	x = (s[((r >> 26 & 62) | (r & 1)) ^
		   ((c >> 6 & 32) | (c >> 13 & 16) | (c >> 1 & 8) | (c >> 25 & 4) |
   1524c:	4319      	orrs	r1, r3
				   (c >> 22 & 2) | (c >> 14 & 1))] & 0x00808202) ^ l;
   1524e:	697b      	ldr	r3, [r7, #20]
   15250:	0b9b      	lsrs	r3, r3, #14
   15252:	f003 0301 	and.w	r3, r3, #1
   15256:	430b      	orrs	r3, r1
	leftby1:
	c = c << 1 | ((c >> 27) & 1);
	d = d << 1 | ((d >> 27) & 1);
	startround:
	/* a round - apply PC2, the S-boxes and permutation E */
	x = (s[((r >> 26 & 62) | (r & 1)) ^
   15258:	405a      	eors	r2, r3
   1525a:	f644 2374 	movw	r3, #19060	; 0x4a74
   1525e:	f2c0 0302 	movt	r3, #2
   15262:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		   ((c >> 6 & 32) | (c >> 13 & 16) | (c >> 1 & 8) | (c >> 25 & 4) |
				   (c >> 22 & 2) | (c >> 14 & 1))] & 0x00808202) ^ l;
   15266:	f248 2302 	movw	r3, #33282	; 0x8202
   1526a:	f2c0 0380 	movt	r3, #128	; 0x80
   1526e:	4013      	ands	r3, r2
	leftby1:
	c = c << 1 | ((c >> 27) & 1);
	d = d << 1 | ((d >> 27) & 1);
	startround:
	/* a round - apply PC2, the S-boxes and permutation E */
	x = (s[((r >> 26 & 62) | (r & 1)) ^
   15270:	6a3a      	ldr	r2, [r7, #32]
   15272:	4053      	eors	r3, r2
   15274:	62bb      	str	r3, [r7, #40]	; 0x28
		   ((c >> 6 & 32) | (c >> 13 & 16) | (c >> 1 & 8) | (c >> 25 & 4) |
				   (c >> 22 & 2) | (c >> 14 & 1))] & 0x00808202) ^ l;
	x ^= s[(r >> 23 & 63) ^
   15276:	69fb      	ldr	r3, [r7, #28]
   15278:	0ddb      	lsrs	r3, r3, #23
   1527a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		   ((c >> 20 & 32) | (c << 4 & 16) | (c >> 10 & 8) | (c >> 20 & 4) |
   1527e:	697b      	ldr	r3, [r7, #20]
   15280:	0d1b      	lsrs	r3, r3, #20
   15282:	f003 0120 	and.w	r1, r3, #32
   15286:	697b      	ldr	r3, [r7, #20]
   15288:	011b      	lsls	r3, r3, #4
   1528a:	f003 0310 	and.w	r3, r3, #16
   1528e:	4319      	orrs	r1, r3
   15290:	697b      	ldr	r3, [r7, #20]
   15292:	0a9b      	lsrs	r3, r3, #10
   15294:	f003 0308 	and.w	r3, r3, #8
   15298:	4319      	orrs	r1, r3
   1529a:	697b      	ldr	r3, [r7, #20]
   1529c:	0d1b      	lsrs	r3, r3, #20
   1529e:	f003 0304 	and.w	r3, r3, #4
   152a2:	4319      	orrs	r1, r3
				   (c >> 6 & 2)
   152a4:	697b      	ldr	r3, [r7, #20]
   152a6:	099b      	lsrs	r3, r3, #6
   152a8:	f003 0302 	and.w	r3, r3, #2
	/* a round - apply PC2, the S-boxes and permutation E */
	x = (s[((r >> 26 & 62) | (r & 1)) ^
		   ((c >> 6 & 32) | (c >> 13 & 16) | (c >> 1 & 8) | (c >> 25 & 4) |
				   (c >> 22 & 2) | (c >> 14 & 1))] & 0x00808202) ^ l;
	x ^= s[(r >> 23 & 63) ^
		   ((c >> 20 & 32) | (c << 4 & 16) | (c >> 10 & 8) | (c >> 20 & 4) |
   152ac:	4319      	orrs	r1, r3
				   (c >> 6 & 2)
				   | (c >> 18 & 1))] & 0x40084010;
   152ae:	697b      	ldr	r3, [r7, #20]
   152b0:	0c9b      	lsrs	r3, r3, #18
   152b2:	f003 0301 	and.w	r3, r3, #1
   152b6:	430b      	orrs	r3, r1
	startround:
	/* a round - apply PC2, the S-boxes and permutation E */
	x = (s[((r >> 26 & 62) | (r & 1)) ^
		   ((c >> 6 & 32) | (c >> 13 & 16) | (c >> 1 & 8) | (c >> 25 & 4) |
				   (c >> 22 & 2) | (c >> 14 & 1))] & 0x00808202) ^ l;
	x ^= s[(r >> 23 & 63) ^
   152b8:	405a      	eors	r2, r3
   152ba:	f644 2374 	movw	r3, #19060	; 0x4a74
   152be:	f2c0 0302 	movt	r3, #2
   152c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		   ((c >> 20 & 32) | (c << 4 & 16) | (c >> 10 & 8) | (c >> 20 & 4) |
				   (c >> 6 & 2)
				   | (c >> 18 & 1))] & 0x40084010;
   152c6:	f244 0310 	movw	r3, #16400	; 0x4010
   152ca:	f2c4 0308 	movt	r3, #16392	; 0x4008
   152ce:	4013      	ands	r3, r2
	startround:
	/* a round - apply PC2, the S-boxes and permutation E */
	x = (s[((r >> 26 & 62) | (r & 1)) ^
		   ((c >> 6 & 32) | (c >> 13 & 16) | (c >> 1 & 8) | (c >> 25 & 4) |
				   (c >> 22 & 2) | (c >> 14 & 1))] & 0x00808202) ^ l;
	x ^= s[(r >> 23 & 63) ^
   152d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   152d2:	4053      	eors	r3, r2
   152d4:	62bb      	str	r3, [r7, #40]	; 0x28
		   ((c >> 20 & 32) | (c << 4 & 16) | (c >> 10 & 8) | (c >> 20 & 4) |
				   (c >> 6 & 2)
				   | (c >> 18 & 1))] & 0x40084010;
	x ^= s[(r >> 19 & 63) ^
   152d6:	69fb      	ldr	r3, [r7, #28]
   152d8:	0cdb      	lsrs	r3, r3, #19
   152da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		   ((c & 32) | (c >> 5 & 16) | (c >> 13 & 8) | (c >> 22 & 4) |
   152de:	697b      	ldr	r3, [r7, #20]
   152e0:	f003 0120 	and.w	r1, r3, #32
   152e4:	697b      	ldr	r3, [r7, #20]
   152e6:	095b      	lsrs	r3, r3, #5
   152e8:	f003 0310 	and.w	r3, r3, #16
   152ec:	4319      	orrs	r1, r3
   152ee:	697b      	ldr	r3, [r7, #20]
   152f0:	0b5b      	lsrs	r3, r3, #13
   152f2:	f003 0308 	and.w	r3, r3, #8
   152f6:	4319      	orrs	r1, r3
   152f8:	697b      	ldr	r3, [r7, #20]
   152fa:	0d9b      	lsrs	r3, r3, #22
   152fc:	f003 0304 	and.w	r3, r3, #4
   15300:	4319      	orrs	r1, r3
				   (c >> 1 & 2) | (c >> 20 & 1))] & 0x04010104;
   15302:	697b      	ldr	r3, [r7, #20]
   15304:	085b      	lsrs	r3, r3, #1
   15306:	f003 0302 	and.w	r3, r3, #2
	x ^= s[(r >> 23 & 63) ^
		   ((c >> 20 & 32) | (c << 4 & 16) | (c >> 10 & 8) | (c >> 20 & 4) |
				   (c >> 6 & 2)
				   | (c >> 18 & 1))] & 0x40084010;
	x ^= s[(r >> 19 & 63) ^
		   ((c & 32) | (c >> 5 & 16) | (c >> 13 & 8) | (c >> 22 & 4) |
   1530a:	4319      	orrs	r1, r3
				   (c >> 1 & 2) | (c >> 20 & 1))] & 0x04010104;
   1530c:	697b      	ldr	r3, [r7, #20]
   1530e:	0d1b      	lsrs	r3, r3, #20
   15310:	f003 0301 	and.w	r3, r3, #1
   15314:	430b      	orrs	r3, r1
				   (c >> 22 & 2) | (c >> 14 & 1))] & 0x00808202) ^ l;
	x ^= s[(r >> 23 & 63) ^
		   ((c >> 20 & 32) | (c << 4 & 16) | (c >> 10 & 8) | (c >> 20 & 4) |
				   (c >> 6 & 2)
				   | (c >> 18 & 1))] & 0x40084010;
	x ^= s[(r >> 19 & 63) ^
   15316:	405a      	eors	r2, r3
   15318:	f644 2374 	movw	r3, #19060	; 0x4a74
   1531c:	f2c0 0302 	movt	r3, #2
   15320:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		   ((c & 32) | (c >> 5 & 16) | (c >> 13 & 8) | (c >> 22 & 4) |
				   (c >> 1 & 2) | (c >> 20 & 1))] & 0x04010104;
   15324:	f44f 7382 	mov.w	r3, #260	; 0x104
   15328:	f2c0 4301 	movt	r3, #1025	; 0x401
   1532c:	4013      	ands	r3, r2
				   (c >> 22 & 2) | (c >> 14 & 1))] & 0x00808202) ^ l;
	x ^= s[(r >> 23 & 63) ^
		   ((c >> 20 & 32) | (c << 4 & 16) | (c >> 10 & 8) | (c >> 20 & 4) |
				   (c >> 6 & 2)
				   | (c >> 18 & 1))] & 0x40084010;
	x ^= s[(r >> 19 & 63) ^
   1532e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15330:	4053      	eors	r3, r2
   15332:	62bb      	str	r3, [r7, #40]	; 0x28
		   ((c & 32) | (c >> 5 & 16) | (c >> 13 & 8) | (c >> 22 & 4) |
				   (c >> 1 & 2) | (c >> 20 & 1))] & 0x04010104;
	x ^= s[(r >> 15 & 63) ^
   15334:	69fb      	ldr	r3, [r7, #28]
   15336:	0bdb      	lsrs	r3, r3, #15
   15338:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		   ((c >> 7 & 32) | (c >> 17 & 16) | (c << 2 & 8) | (c >> 6 & 4) |
   1533c:	697b      	ldr	r3, [r7, #20]
   1533e:	09db      	lsrs	r3, r3, #7
   15340:	f003 0120 	and.w	r1, r3, #32
   15344:	697b      	ldr	r3, [r7, #20]
   15346:	0c5b      	lsrs	r3, r3, #17
   15348:	f003 0310 	and.w	r3, r3, #16
   1534c:	4319      	orrs	r1, r3
   1534e:	697b      	ldr	r3, [r7, #20]
   15350:	009b      	lsls	r3, r3, #2
   15352:	f003 0308 	and.w	r3, r3, #8
   15356:	4319      	orrs	r1, r3
   15358:	697b      	ldr	r3, [r7, #20]
   1535a:	099b      	lsrs	r3, r3, #6
   1535c:	f003 0304 	and.w	r3, r3, #4
   15360:	4319      	orrs	r1, r3
				   (c >> 14 & 2) | (c >> 26 & 1))] & 0x80401040;
   15362:	697b      	ldr	r3, [r7, #20]
   15364:	0b9b      	lsrs	r3, r3, #14
   15366:	f003 0302 	and.w	r3, r3, #2
				   | (c >> 18 & 1))] & 0x40084010;
	x ^= s[(r >> 19 & 63) ^
		   ((c & 32) | (c >> 5 & 16) | (c >> 13 & 8) | (c >> 22 & 4) |
				   (c >> 1 & 2) | (c >> 20 & 1))] & 0x04010104;
	x ^= s[(r >> 15 & 63) ^
		   ((c >> 7 & 32) | (c >> 17 & 16) | (c << 2 & 8) | (c >> 6 & 4) |
   1536a:	4319      	orrs	r1, r3
				   (c >> 14 & 2) | (c >> 26 & 1))] & 0x80401040;
   1536c:	697b      	ldr	r3, [r7, #20]
   1536e:	0e9b      	lsrs	r3, r3, #26
   15370:	f003 0301 	and.w	r3, r3, #1
   15374:	430b      	orrs	r3, r1
				   (c >> 6 & 2)
				   | (c >> 18 & 1))] & 0x40084010;
	x ^= s[(r >> 19 & 63) ^
		   ((c & 32) | (c >> 5 & 16) | (c >> 13 & 8) | (c >> 22 & 4) |
				   (c >> 1 & 2) | (c >> 20 & 1))] & 0x04010104;
	x ^= s[(r >> 15 & 63) ^
   15376:	405a      	eors	r2, r3
   15378:	f644 2374 	movw	r3, #19060	; 0x4a74
   1537c:	f2c0 0302 	movt	r3, #2
   15380:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		   ((c >> 7 & 32) | (c >> 17 & 16) | (c << 2 & 8) | (c >> 6 & 4) |
				   (c >> 14 & 2) | (c >> 26 & 1))] & 0x80401040;
   15384:	f44f 5382 	mov.w	r3, #4160	; 0x1040
   15388:	f2c8 0340 	movt	r3, #32832	; 0x8040
   1538c:	4013      	ands	r3, r2
				   (c >> 6 & 2)
				   | (c >> 18 & 1))] & 0x40084010;
	x ^= s[(r >> 19 & 63) ^
		   ((c & 32) | (c >> 5 & 16) | (c >> 13 & 8) | (c >> 22 & 4) |
				   (c >> 1 & 2) | (c >> 20 & 1))] & 0x04010104;
	x ^= s[(r >> 15 & 63) ^
   1538e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15390:	4053      	eors	r3, r2
   15392:	62bb      	str	r3, [r7, #40]	; 0x28
		   ((c >> 7 & 32) | (c >> 17 & 16) | (c << 2 & 8) | (c >> 6 & 4) |
				   (c >> 14 & 2) | (c >> 26 & 1))] & 0x80401040;
	x ^= s[(r >> 11 & 63) ^
   15394:	69fb      	ldr	r3, [r7, #28]
   15396:	0adb      	lsrs	r3, r3, #11
   15398:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		   ((d >> 10 & 32) | (d & 16) | (d >> 22 & 8) | (d >> 17 & 4) |
   1539c:	69bb      	ldr	r3, [r7, #24]
   1539e:	0a9b      	lsrs	r3, r3, #10
   153a0:	f003 0120 	and.w	r1, r3, #32
   153a4:	69bb      	ldr	r3, [r7, #24]
   153a6:	f003 0310 	and.w	r3, r3, #16
   153aa:	4319      	orrs	r1, r3
   153ac:	69bb      	ldr	r3, [r7, #24]
   153ae:	0d9b      	lsrs	r3, r3, #22
   153b0:	f003 0308 	and.w	r3, r3, #8
   153b4:	4319      	orrs	r1, r3
   153b6:	69bb      	ldr	r3, [r7, #24]
   153b8:	0c5b      	lsrs	r3, r3, #17
   153ba:	f003 0304 	and.w	r3, r3, #4
   153be:	4319      	orrs	r1, r3
				   (d >> 8 & 2) | (d >> 1 & 1))] & 0x21040080;
   153c0:	69bb      	ldr	r3, [r7, #24]
   153c2:	0a1b      	lsrs	r3, r3, #8
   153c4:	f003 0302 	and.w	r3, r3, #2
				   (c >> 1 & 2) | (c >> 20 & 1))] & 0x04010104;
	x ^= s[(r >> 15 & 63) ^
		   ((c >> 7 & 32) | (c >> 17 & 16) | (c << 2 & 8) | (c >> 6 & 4) |
				   (c >> 14 & 2) | (c >> 26 & 1))] & 0x80401040;
	x ^= s[(r >> 11 & 63) ^
		   ((d >> 10 & 32) | (d & 16) | (d >> 22 & 8) | (d >> 17 & 4) |
   153c8:	4319      	orrs	r1, r3
				   (d >> 8 & 2) | (d >> 1 & 1))] & 0x21040080;
   153ca:	69bb      	ldr	r3, [r7, #24]
   153cc:	085b      	lsrs	r3, r3, #1
   153ce:	f003 0301 	and.w	r3, r3, #1
   153d2:	430b      	orrs	r3, r1
		   ((c & 32) | (c >> 5 & 16) | (c >> 13 & 8) | (c >> 22 & 4) |
				   (c >> 1 & 2) | (c >> 20 & 1))] & 0x04010104;
	x ^= s[(r >> 15 & 63) ^
		   ((c >> 7 & 32) | (c >> 17 & 16) | (c << 2 & 8) | (c >> 6 & 4) |
				   (c >> 14 & 2) | (c >> 26 & 1))] & 0x80401040;
	x ^= s[(r >> 11 & 63) ^
   153d4:	405a      	eors	r2, r3
   153d6:	f644 2374 	movw	r3, #19060	; 0x4a74
   153da:	f2c0 0302 	movt	r3, #2
   153de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		   ((d >> 10 & 32) | (d & 16) | (d >> 22 & 8) | (d >> 17 & 4) |
				   (d >> 8 & 2) | (d >> 1 & 1))] & 0x21040080;
   153e2:	2380      	movs	r3, #128	; 0x80
   153e4:	f2c2 1304 	movt	r3, #8452	; 0x2104
   153e8:	4013      	ands	r3, r2
		   ((c & 32) | (c >> 5 & 16) | (c >> 13 & 8) | (c >> 22 & 4) |
				   (c >> 1 & 2) | (c >> 20 & 1))] & 0x04010104;
	x ^= s[(r >> 15 & 63) ^
		   ((c >> 7 & 32) | (c >> 17 & 16) | (c << 2 & 8) | (c >> 6 & 4) |
				   (c >> 14 & 2) | (c >> 26 & 1))] & 0x80401040;
	x ^= s[(r >> 11 & 63) ^
   153ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
   153ec:	4053      	eors	r3, r2
   153ee:	62bb      	str	r3, [r7, #40]	; 0x28
		   ((d >> 10 & 32) | (d & 16) | (d >> 22 & 8) | (d >> 17 & 4) |
				   (d >> 8 & 2) | (d >> 1 & 1))] & 0x21040080;
	x ^= s[(r >> 7 & 63) ^
   153f0:	69fb      	ldr	r3, [r7, #28]
   153f2:	09db      	lsrs	r3, r3, #7
   153f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		   ((d >> 21 & 32) | (d >> 12 & 16) | (d >> 2 & 8) | (d >> 9 & 4) |
   153f8:	69bb      	ldr	r3, [r7, #24]
   153fa:	0d5b      	lsrs	r3, r3, #21
   153fc:	f003 0120 	and.w	r1, r3, #32
   15400:	69bb      	ldr	r3, [r7, #24]
   15402:	0b1b      	lsrs	r3, r3, #12
   15404:	f003 0310 	and.w	r3, r3, #16
   15408:	4319      	orrs	r1, r3
   1540a:	69bb      	ldr	r3, [r7, #24]
   1540c:	089b      	lsrs	r3, r3, #2
   1540e:	f003 0308 	and.w	r3, r3, #8
   15412:	4319      	orrs	r1, r3
   15414:	69bb      	ldr	r3, [r7, #24]
   15416:	0a5b      	lsrs	r3, r3, #9
   15418:	f003 0304 	and.w	r3, r3, #4
   1541c:	4319      	orrs	r1, r3
				   (d >> 22 & 2)
   1541e:	69bb      	ldr	r3, [r7, #24]
   15420:	0d9b      	lsrs	r3, r3, #22
   15422:	f003 0302 	and.w	r3, r3, #2
				   (c >> 14 & 2) | (c >> 26 & 1))] & 0x80401040;
	x ^= s[(r >> 11 & 63) ^
		   ((d >> 10 & 32) | (d & 16) | (d >> 22 & 8) | (d >> 17 & 4) |
				   (d >> 8 & 2) | (d >> 1 & 1))] & 0x21040080;
	x ^= s[(r >> 7 & 63) ^
		   ((d >> 21 & 32) | (d >> 12 & 16) | (d >> 2 & 8) | (d >> 9 & 4) |
   15426:	4319      	orrs	r1, r3
				   (d >> 22 & 2)
				   | (d >> 8 & 1))] & 0x10202008;
   15428:	69bb      	ldr	r3, [r7, #24]
   1542a:	0a1b      	lsrs	r3, r3, #8
   1542c:	f003 0301 	and.w	r3, r3, #1
   15430:	430b      	orrs	r3, r1
		   ((c >> 7 & 32) | (c >> 17 & 16) | (c << 2 & 8) | (c >> 6 & 4) |
				   (c >> 14 & 2) | (c >> 26 & 1))] & 0x80401040;
	x ^= s[(r >> 11 & 63) ^
		   ((d >> 10 & 32) | (d & 16) | (d >> 22 & 8) | (d >> 17 & 4) |
				   (d >> 8 & 2) | (d >> 1 & 1))] & 0x21040080;
	x ^= s[(r >> 7 & 63) ^
   15432:	405a      	eors	r2, r3
   15434:	f644 2374 	movw	r3, #19060	; 0x4a74
   15438:	f2c0 0302 	movt	r3, #2
   1543c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		   ((d >> 21 & 32) | (d >> 12 & 16) | (d >> 2 & 8) | (d >> 9 & 4) |
				   (d >> 22 & 2)
				   | (d >> 8 & 1))] & 0x10202008;
   15440:	f242 0308 	movw	r3, #8200	; 0x2008
   15444:	f2c1 0320 	movt	r3, #4128	; 0x1020
   15448:	4013      	ands	r3, r2
		   ((c >> 7 & 32) | (c >> 17 & 16) | (c << 2 & 8) | (c >> 6 & 4) |
				   (c >> 14 & 2) | (c >> 26 & 1))] & 0x80401040;
	x ^= s[(r >> 11 & 63) ^
		   ((d >> 10 & 32) | (d & 16) | (d >> 22 & 8) | (d >> 17 & 4) |
				   (d >> 8 & 2) | (d >> 1 & 1))] & 0x21040080;
	x ^= s[(r >> 7 & 63) ^
   1544a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1544c:	4053      	eors	r3, r2
   1544e:	62bb      	str	r3, [r7, #40]	; 0x28
		   ((d >> 21 & 32) | (d >> 12 & 16) | (d >> 2 & 8) | (d >> 9 & 4) |
				   (d >> 22 & 2)
				   | (d >> 8 & 1))] & 0x10202008;
	x ^= s[(r >> 3 & 63) ^
   15450:	69fb      	ldr	r3, [r7, #28]
   15452:	08db      	lsrs	r3, r3, #3
   15454:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		   ((d >> 7 & 32) | (d >> 3 & 16) | (d >> 14 & 8) | (d << 2 & 4) |
   15458:	69bb      	ldr	r3, [r7, #24]
   1545a:	09db      	lsrs	r3, r3, #7
   1545c:	f003 0120 	and.w	r1, r3, #32
   15460:	69bb      	ldr	r3, [r7, #24]
   15462:	08db      	lsrs	r3, r3, #3
   15464:	f003 0310 	and.w	r3, r3, #16
   15468:	4319      	orrs	r1, r3
   1546a:	69bb      	ldr	r3, [r7, #24]
   1546c:	0b9b      	lsrs	r3, r3, #14
   1546e:	f003 0308 	and.w	r3, r3, #8
   15472:	4319      	orrs	r1, r3
   15474:	69bb      	ldr	r3, [r7, #24]
   15476:	009b      	lsls	r3, r3, #2
   15478:	f003 0304 	and.w	r3, r3, #4
   1547c:	4319      	orrs	r1, r3
				   (d >> 21 & 2) | (d >> 3 & 1))] & 0x02100401;
   1547e:	69bb      	ldr	r3, [r7, #24]
   15480:	0d5b      	lsrs	r3, r3, #21
   15482:	f003 0302 	and.w	r3, r3, #2
	x ^= s[(r >> 7 & 63) ^
		   ((d >> 21 & 32) | (d >> 12 & 16) | (d >> 2 & 8) | (d >> 9 & 4) |
				   (d >> 22 & 2)
				   | (d >> 8 & 1))] & 0x10202008;
	x ^= s[(r >> 3 & 63) ^
		   ((d >> 7 & 32) | (d >> 3 & 16) | (d >> 14 & 8) | (d << 2 & 4) |
   15486:	4319      	orrs	r1, r3
				   (d >> 21 & 2) | (d >> 3 & 1))] & 0x02100401;
   15488:	69bb      	ldr	r3, [r7, #24]
   1548a:	08db      	lsrs	r3, r3, #3
   1548c:	f003 0301 	and.w	r3, r3, #1
   15490:	430b      	orrs	r3, r1
				   (d >> 8 & 2) | (d >> 1 & 1))] & 0x21040080;
	x ^= s[(r >> 7 & 63) ^
		   ((d >> 21 & 32) | (d >> 12 & 16) | (d >> 2 & 8) | (d >> 9 & 4) |
				   (d >> 22 & 2)
				   | (d >> 8 & 1))] & 0x10202008;
	x ^= s[(r >> 3 & 63) ^
   15492:	405a      	eors	r2, r3
   15494:	f644 2374 	movw	r3, #19060	; 0x4a74
   15498:	f2c0 0302 	movt	r3, #2
   1549c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		   ((d >> 7 & 32) | (d >> 3 & 16) | (d >> 14 & 8) | (d << 2 & 4) |
				   (d >> 21 & 2) | (d >> 3 & 1))] & 0x02100401;
   154a0:	f240 4301 	movw	r3, #1025	; 0x401
   154a4:	f2c0 2310 	movt	r3, #528	; 0x210
   154a8:	4013      	ands	r3, r2
				   (d >> 8 & 2) | (d >> 1 & 1))] & 0x21040080;
	x ^= s[(r >> 7 & 63) ^
		   ((d >> 21 & 32) | (d >> 12 & 16) | (d >> 2 & 8) | (d >> 9 & 4) |
				   (d >> 22 & 2)
				   | (d >> 8 & 1))] & 0x10202008;
	x ^= s[(r >> 3 & 63) ^
   154aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   154ac:	4053      	eors	r3, r2
   154ae:	62bb      	str	r3, [r7, #40]	; 0x28
		   ((d >> 7 & 32) | (d >> 3 & 16) | (d >> 14 & 8) | (d << 2 & 4) |
				   (d >> 21 & 2) | (d >> 3 & 1))] & 0x02100401;
	x ^= s[((r & 31) | (r >> 26 & 32)) ^
   154b0:	69fb      	ldr	r3, [r7, #28]
   154b2:	f003 021f 	and.w	r2, r3, #31
   154b6:	69fb      	ldr	r3, [r7, #28]
   154b8:	0e9b      	lsrs	r3, r3, #26
   154ba:	f003 0320 	and.w	r3, r3, #32
   154be:	431a      	orrs	r2, r3
		   ((d >> 19 & 32) | (d >> 6 & 16) | (d >> 11 & 8) | (d >> 4 & 4) |
   154c0:	69bb      	ldr	r3, [r7, #24]
   154c2:	0cdb      	lsrs	r3, r3, #19
   154c4:	f003 0120 	and.w	r1, r3, #32
   154c8:	69bb      	ldr	r3, [r7, #24]
   154ca:	099b      	lsrs	r3, r3, #6
   154cc:	f003 0310 	and.w	r3, r3, #16
   154d0:	4319      	orrs	r1, r3
   154d2:	69bb      	ldr	r3, [r7, #24]
   154d4:	0adb      	lsrs	r3, r3, #11
   154d6:	f003 0308 	and.w	r3, r3, #8
   154da:	4319      	orrs	r1, r3
   154dc:	69bb      	ldr	r3, [r7, #24]
   154de:	091b      	lsrs	r3, r3, #4
   154e0:	f003 0304 	and.w	r3, r3, #4
   154e4:	4319      	orrs	r1, r3
				   (d >> 19 & 2)
   154e6:	69bb      	ldr	r3, [r7, #24]
   154e8:	0cdb      	lsrs	r3, r3, #19
   154ea:	f003 0302 	and.w	r3, r3, #2
				   | (d >> 8 & 1))] & 0x10202008;
	x ^= s[(r >> 3 & 63) ^
		   ((d >> 7 & 32) | (d >> 3 & 16) | (d >> 14 & 8) | (d << 2 & 4) |
				   (d >> 21 & 2) | (d >> 3 & 1))] & 0x02100401;
	x ^= s[((r & 31) | (r >> 26 & 32)) ^
		   ((d >> 19 & 32) | (d >> 6 & 16) | (d >> 11 & 8) | (d >> 4 & 4) |
   154ee:	4319      	orrs	r1, r3
				   (d >> 19 & 2)
				   | (d >> 27 & 1))] & 0x08020820;
   154f0:	69bb      	ldr	r3, [r7, #24]
   154f2:	0edb      	lsrs	r3, r3, #27
   154f4:	f003 0301 	and.w	r3, r3, #1
   154f8:	430b      	orrs	r3, r1
				   (d >> 22 & 2)
				   | (d >> 8 & 1))] & 0x10202008;
	x ^= s[(r >> 3 & 63) ^
		   ((d >> 7 & 32) | (d >> 3 & 16) | (d >> 14 & 8) | (d << 2 & 4) |
				   (d >> 21 & 2) | (d >> 3 & 1))] & 0x02100401;
	x ^= s[((r & 31) | (r >> 26 & 32)) ^
   154fa:	405a      	eors	r2, r3
   154fc:	f644 2374 	movw	r3, #19060	; 0x4a74
   15500:	f2c0 0302 	movt	r3, #2
   15504:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		   ((d >> 19 & 32) | (d >> 6 & 16) | (d >> 11 & 8) | (d >> 4 & 4) |
				   (d >> 19 & 2)
				   | (d >> 27 & 1))] & 0x08020820;
   15508:	f44f 6302 	mov.w	r3, #2080	; 0x820
   1550c:	f6c0 0302 	movt	r3, #2050	; 0x802
   15510:	4013      	ands	r3, r2
				   (d >> 22 & 2)
				   | (d >> 8 & 1))] & 0x10202008;
	x ^= s[(r >> 3 & 63) ^
		   ((d >> 7 & 32) | (d >> 3 & 16) | (d >> 14 & 8) | (d << 2 & 4) |
				   (d >> 21 & 2) | (d >> 3 & 1))] & 0x02100401;
	x ^= s[((r & 31) | (r >> 26 & 32)) ^
   15512:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15514:	4053      	eors	r3, r2
   15516:	62bb      	str	r3, [r7, #40]	; 0x28
		   ((d >> 19 & 32) | (d >> 6 & 16) | (d >> 11 & 8) | (d >> 4 & 4) |
				   (d >> 19 & 2)
				   | (d >> 27 & 1))] & 0x08020820;
	l = r;
   15518:	69fb      	ldr	r3, [r7, #28]
   1551a:	623b      	str	r3, [r7, #32]
	r = x;
   1551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1551e:	61fb      	str	r3, [r7, #28]
	/* decide/perform key shifts */
	if((i & 7) == 0) {
   15520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15522:	f003 0307 	and.w	r3, r3, #7
   15526:	2b00      	cmp	r3, #0
   15528:	d117      	bne.n	1555a <justdes2+0x48a>
		i -= 2;
   1552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1552c:	3b02      	subs	r3, #2
   1552e:	627b      	str	r3, [r7, #36]	; 0x24
		if(ctl == 0)
   15530:	683b      	ldr	r3, [r7, #0]
   15532:	2b00      	cmp	r3, #0
   15534:	f43f ae58 	beq.w	151e8 <justdes2+0x118>
			goto leftby1;
		c = c >> 1 | (c & 1) << 27;
   15538:	697b      	ldr	r3, [r7, #20]
   1553a:	085a      	lsrs	r2, r3, #1
   1553c:	697b      	ldr	r3, [r7, #20]
   1553e:	f003 0301 	and.w	r3, r3, #1
   15542:	06db      	lsls	r3, r3, #27
   15544:	4313      	orrs	r3, r2
   15546:	617b      	str	r3, [r7, #20]
		d = d >> 1 | (d & 1) << 27;
   15548:	69bb      	ldr	r3, [r7, #24]
   1554a:	085a      	lsrs	r2, r3, #1
   1554c:	69bb      	ldr	r3, [r7, #24]
   1554e:	f003 0301 	and.w	r3, r3, #1
   15552:	06db      	lsls	r3, r3, #27
   15554:	4313      	orrs	r3, r2
   15556:	61bb      	str	r3, [r7, #24]
		goto startround;
   15558:	e659      	b.n	1520e <justdes2+0x13e>
	}
	if(i != 6) {
   1555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1555c:	2b06      	cmp	r3, #6
   1555e:	d027      	beq.n	155b0 <justdes2+0x4e0>
		--i;
   15560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15562:	3b01      	subs	r3, #1
   15564:	627b      	str	r3, [r7, #36]	; 0x24
		if(ctl == 0) {
   15566:	683b      	ldr	r3, [r7, #0]
   15568:	2b00      	cmp	r3, #0
   1556a:	d110      	bne.n	1558e <justdes2+0x4be>
			c = c << 2 | (c >> 26 & 3);
   1556c:	697b      	ldr	r3, [r7, #20]
   1556e:	009a      	lsls	r2, r3, #2
   15570:	697b      	ldr	r3, [r7, #20]
   15572:	0e9b      	lsrs	r3, r3, #26
   15574:	f003 0303 	and.w	r3, r3, #3
   15578:	4313      	orrs	r3, r2
   1557a:	617b      	str	r3, [r7, #20]
			d = d << 2 | (d >> 26 & 3);
   1557c:	69bb      	ldr	r3, [r7, #24]
   1557e:	009a      	lsls	r2, r3, #2
   15580:	69bb      	ldr	r3, [r7, #24]
   15582:	0e9b      	lsrs	r3, r3, #26
   15584:	f003 0303 	and.w	r3, r3, #3
   15588:	4313      	orrs	r3, r2
   1558a:	61bb      	str	r3, [r7, #24]
			goto startround;
   1558c:	e63f      	b.n	1520e <justdes2+0x13e>
		} else {
			c = c >> 2 | (c & 3) << 26;
   1558e:	697b      	ldr	r3, [r7, #20]
   15590:	089a      	lsrs	r2, r3, #2
   15592:	697b      	ldr	r3, [r7, #20]
   15594:	f003 0303 	and.w	r3, r3, #3
   15598:	069b      	lsls	r3, r3, #26
   1559a:	4313      	orrs	r3, r2
   1559c:	617b      	str	r3, [r7, #20]
			d = d >> 2 | (d & 3) << 26;
   1559e:	69bb      	ldr	r3, [r7, #24]
   155a0:	089a      	lsrs	r2, r3, #2
   155a2:	69bb      	ldr	r3, [r7, #24]
   155a4:	f003 0303 	and.w	r3, r3, #3
   155a8:	069b      	lsls	r3, r3, #26
   155aa:	4313      	orrs	r3, r2
   155ac:	61bb      	str	r3, [r7, #24]
			goto startround;
   155ae:	e62e      	b.n	1520e <justdes2+0x13e>
		}
	}
	/* final swap and permutations IP` */
	i = 7;
   155b0:	2307      	movs	r3, #7
   155b2:	627b      	str	r3, [r7, #36]	; 0x24
	do {
		*dst++ =
				(byte) ((r & 1 << 0) | (r >> 6 & 1 << 2) | (r >> 12 & 1 << 4) |
   155b4:	69fb      	ldr	r3, [r7, #28]
   155b6:	b2db      	uxtb	r3, r3
   155b8:	f003 0301 	and.w	r3, r3, #1
   155bc:	b2da      	uxtb	r2, r3
   155be:	69fb      	ldr	r3, [r7, #28]
   155c0:	099b      	lsrs	r3, r3, #6
   155c2:	b2db      	uxtb	r3, r3
   155c4:	f003 0304 	and.w	r3, r3, #4
   155c8:	b2db      	uxtb	r3, r3
   155ca:	4313      	orrs	r3, r2
   155cc:	b2da      	uxtb	r2, r3
   155ce:	69fb      	ldr	r3, [r7, #28]
   155d0:	0b1b      	lsrs	r3, r3, #12
   155d2:	b2db      	uxtb	r3, r3
   155d4:	f003 0310 	and.w	r3, r3, #16
   155d8:	b2db      	uxtb	r3, r3
   155da:	4313      	orrs	r3, r2
   155dc:	b2da      	uxtb	r2, r3
						(r >> 18 & 1 << 6) | (l << 1 & 1 << 1) | (l >> 5 & 1 << 3) |
   155de:	69fb      	ldr	r3, [r7, #28]
   155e0:	0c9b      	lsrs	r3, r3, #18
	}
	/* final swap and permutations IP` */
	i = 7;
	do {
		*dst++ =
				(byte) ((r & 1 << 0) | (r >> 6 & 1 << 2) | (r >> 12 & 1 << 4) |
   155e2:	b2db      	uxtb	r3, r3
   155e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
   155e8:	b2db      	uxtb	r3, r3
   155ea:	4313      	orrs	r3, r2
   155ec:	b2da      	uxtb	r2, r3
   155ee:	6a3b      	ldr	r3, [r7, #32]
   155f0:	b2db      	uxtb	r3, r3
   155f2:	005b      	lsls	r3, r3, #1
   155f4:	b2db      	uxtb	r3, r3
   155f6:	f003 0302 	and.w	r3, r3, #2
   155fa:	b2db      	uxtb	r3, r3
   155fc:	4313      	orrs	r3, r2
   155fe:	b2da      	uxtb	r2, r3
						(r >> 18 & 1 << 6) | (l << 1 & 1 << 1) | (l >> 5 & 1 << 3) |
   15600:	6a3b      	ldr	r3, [r7, #32]
   15602:	095b      	lsrs	r3, r3, #5
	}
	/* final swap and permutations IP` */
	i = 7;
	do {
		*dst++ =
				(byte) ((r & 1 << 0) | (r >> 6 & 1 << 2) | (r >> 12 & 1 << 4) |
   15604:	b2db      	uxtb	r3, r3
   15606:	f003 0308 	and.w	r3, r3, #8
   1560a:	b2db      	uxtb	r3, r3
   1560c:	4313      	orrs	r3, r2
   1560e:	b2da      	uxtb	r2, r3
						(r >> 18 & 1 << 6) | (l << 1 & 1 << 1) | (l >> 5 & 1 << 3) |
						(l >> 11 & 1 << 5) | (l >> 17 & 1 << 7));
   15610:	6a3b      	ldr	r3, [r7, #32]
   15612:	0adb      	lsrs	r3, r3, #11
	}
	/* final swap and permutations IP` */
	i = 7;
	do {
		*dst++ =
				(byte) ((r & 1 << 0) | (r >> 6 & 1 << 2) | (r >> 12 & 1 << 4) |
   15614:	b2db      	uxtb	r3, r3
   15616:	f003 0320 	and.w	r3, r3, #32
   1561a:	b2db      	uxtb	r3, r3
   1561c:	4313      	orrs	r3, r2
   1561e:	b2da      	uxtb	r2, r3
						(r >> 18 & 1 << 6) | (l << 1 & 1 << 1) | (l >> 5 & 1 << 3) |
						(l >> 11 & 1 << 5) | (l >> 17 & 1 << 7));
   15620:	6a3b      	ldr	r3, [r7, #32]
   15622:	0c5b      	lsrs	r3, r3, #17
	}
	/* final swap and permutations IP` */
	i = 7;
	do {
		*dst++ =
				(byte) ((r & 1 << 0) | (r >> 6 & 1 << 2) | (r >> 12 & 1 << 4) |
   15624:	b2db      	uxtb	r3, r3
   15626:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   1562a:	b2db      	uxtb	r3, r3
   1562c:	4313      	orrs	r3, r2
   1562e:	b2da      	uxtb	r2, r3
		}
	}
	/* final swap and permutations IP` */
	i = 7;
	do {
		*dst++ =
   15630:	68fb      	ldr	r3, [r7, #12]
   15632:	701a      	strb	r2, [r3, #0]
   15634:	68fb      	ldr	r3, [r7, #12]
   15636:	3301      	adds	r3, #1
   15638:	60fb      	str	r3, [r7, #12]
				(byte) ((r & 1 << 0) | (r >> 6 & 1 << 2) | (r >> 12 & 1 << 4) |
						(r >> 18 & 1 << 6) | (l << 1 & 1 << 1) | (l >> 5 & 1 << 3) |
						(l >> 11 & 1 << 5) | (l >> 17 & 1 << 7));
		l >>= 1;
   1563a:	6a3b      	ldr	r3, [r7, #32]
   1563c:	085b      	lsrs	r3, r3, #1
   1563e:	623b      	str	r3, [r7, #32]
		r >>= 1;
   15640:	69fb      	ldr	r3, [r7, #28]
   15642:	085b      	lsrs	r3, r3, #1
   15644:	61fb      	str	r3, [r7, #28]
	} while(--i >= 0);
   15646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15648:	3b01      	subs	r3, #1
   1564a:	627b      	str	r3, [r7, #36]	; 0x24
   1564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1564e:	2b00      	cmp	r3, #0
   15650:	dab0      	bge.n	155b4 <justdes2+0x4e4>
}
   15652:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15656:	f2c0 0302 	movt	r3, #2
   1565a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1565c:	681b      	ldr	r3, [r3, #0]
   1565e:	429a      	cmp	r2, r3
   15660:	d001      	beq.n	15666 <justdes2+0x596>
   15662:	f7f3 fc9f 	bl	8fa4 <__stack_chk_fail>
   15666:	f107 0730 	add.w	r7, r7, #48	; 0x30
   1566a:	46bd      	mov	sp, r7
   1566c:	bd80      	pop	{r7, pc}
   1566e:	bf00      	nop

00015670 <stdDES>:
 * \return no
 * \sa Header: sys\\sys.h
 * \sa Source: sys\\std.c
 * \test tcab0057.c
 */
void stdDES(byte * dst, byte * src, byte * key) {
   15670:	b580      	push	{r7, lr}
   15672:	b086      	sub	sp, #24
   15674:	af00      	add	r7, sp, #0
   15676:	60f8      	str	r0, [r7, #12]
   15678:	60b9      	str	r1, [r7, #8]
   1567a:	607a      	str	r2, [r7, #4]
   1567c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15680:	f2c0 0302 	movt	r3, #2
   15684:	681b      	ldr	r3, [r3, #0]
   15686:	617b      	str	r3, [r7, #20]
	justdes2(dst, src, key, 0);
   15688:	68f8      	ldr	r0, [r7, #12]
   1568a:	68b9      	ldr	r1, [r7, #8]
   1568c:	687a      	ldr	r2, [r7, #4]
   1568e:	2300      	movs	r3, #0
   15690:	f7ff fd1e 	bl	150d0 <justdes2>
}
   15694:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15698:	f2c0 0302 	movt	r3, #2
   1569c:	697a      	ldr	r2, [r7, #20]
   1569e:	681b      	ldr	r3, [r3, #0]
   156a0:	429a      	cmp	r2, r3
   156a2:	d001      	beq.n	156a8 <stdDES+0x38>
   156a4:	f7f3 fc7e 	bl	8fa4 <__stack_chk_fail>
   156a8:	f107 0718 	add.w	r7, r7, #24
   156ac:	46bd      	mov	sp, r7
   156ae:	bd80      	pop	{r7, pc}

000156b0 <stdSED>:
 * \return no
 * \sa Header: sys\\sys.h
 * \sa Source: sys\\std.c
 * \test tcab0057.c
 */
void stdSED(byte * dst, byte * src, byte * key) {
   156b0:	b580      	push	{r7, lr}
   156b2:	b086      	sub	sp, #24
   156b4:	af00      	add	r7, sp, #0
   156b6:	60f8      	str	r0, [r7, #12]
   156b8:	60b9      	str	r1, [r7, #8]
   156ba:	607a      	str	r2, [r7, #4]
   156bc:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   156c0:	f2c0 0302 	movt	r3, #2
   156c4:	681b      	ldr	r3, [r3, #0]
   156c6:	617b      	str	r3, [r7, #20]
	justdes2(dst, src, key, 1);
   156c8:	68f8      	ldr	r0, [r7, #12]
   156ca:	68b9      	ldr	r1, [r7, #8]
   156cc:	687a      	ldr	r2, [r7, #4]
   156ce:	2301      	movs	r3, #1
   156d0:	f7ff fcfe 	bl	150d0 <justdes2>
}
   156d4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   156d8:	f2c0 0302 	movt	r3, #2
   156dc:	697a      	ldr	r2, [r7, #20]
   156de:	681b      	ldr	r3, [r3, #0]
   156e0:	429a      	cmp	r2, r3
   156e2:	d001      	beq.n	156e8 <stdSED+0x38>
   156e4:	f7f3 fc5e 	bl	8fa4 <__stack_chk_fail>
   156e8:	f107 0718 	add.w	r7, r7, #24
   156ec:	46bd      	mov	sp, r7
   156ee:	bd80      	pop	{r7, pc}

000156f0 <stdEDE>:
 * \return no
 * \sa Header: sys\\sys.h
 * \sa Source: sys\\std.c
 * \test tcab0057.c
 */
void stdEDE(byte * dst, byte * src, byte * key) {
   156f0:	b580      	push	{r7, lr}
   156f2:	b088      	sub	sp, #32
   156f4:	af00      	add	r7, sp, #0
   156f6:	60f8      	str	r0, [r7, #12]
   156f8:	60b9      	str	r1, [r7, #8]
   156fa:	607a      	str	r2, [r7, #4]
   156fc:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15700:	f2c0 0302 	movt	r3, #2
   15704:	681b      	ldr	r3, [r3, #0]
   15706:	61fb      	str	r3, [r7, #28]
	byte tmp[8];

	stdDES(dst, src, key);
   15708:	68f8      	ldr	r0, [r7, #12]
   1570a:	68b9      	ldr	r1, [r7, #8]
   1570c:	687a      	ldr	r2, [r7, #4]
   1570e:	f7ff ffaf 	bl	15670 <stdDES>
	stdSED(tmp, dst, key + 8);
   15712:	687b      	ldr	r3, [r7, #4]
   15714:	3308      	adds	r3, #8
   15716:	f107 0214 	add.w	r2, r7, #20
   1571a:	4610      	mov	r0, r2
   1571c:	68f9      	ldr	r1, [r7, #12]
   1571e:	461a      	mov	r2, r3
   15720:	f7ff ffc6 	bl	156b0 <stdSED>
	stdDES(dst, tmp, key);
   15724:	f107 0314 	add.w	r3, r7, #20
   15728:	68f8      	ldr	r0, [r7, #12]
   1572a:	4619      	mov	r1, r3
   1572c:	687a      	ldr	r2, [r7, #4]
   1572e:	f7ff ff9f 	bl	15670 <stdDES>
}
   15732:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15736:	f2c0 0302 	movt	r3, #2
   1573a:	69fa      	ldr	r2, [r7, #28]
   1573c:	681b      	ldr	r3, [r3, #0]
   1573e:	429a      	cmp	r2, r3
   15740:	d001      	beq.n	15746 <stdEDE+0x56>
   15742:	f7f3 fc2f 	bl	8fa4 <__stack_chk_fail>
   15746:	f107 0720 	add.w	r7, r7, #32
   1574a:	46bd      	mov	sp, r7
   1574c:	bd80      	pop	{r7, pc}
   1574e:	bf00      	nop

00015750 <stdDED>:
 * \return no
 * \sa Header: sys\\sys.h
 * \sa Source: sys\\std.c
 * \test tcab0057.c
 */
void stdDED(byte * dst, byte * src, byte * key) {
   15750:	b580      	push	{r7, lr}
   15752:	b088      	sub	sp, #32
   15754:	af00      	add	r7, sp, #0
   15756:	60f8      	str	r0, [r7, #12]
   15758:	60b9      	str	r1, [r7, #8]
   1575a:	607a      	str	r2, [r7, #4]
   1575c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15760:	f2c0 0302 	movt	r3, #2
   15764:	681b      	ldr	r3, [r3, #0]
   15766:	61fb      	str	r3, [r7, #28]
	byte tmp[8];

	stdSED(dst, src, key);
   15768:	68f8      	ldr	r0, [r7, #12]
   1576a:	68b9      	ldr	r1, [r7, #8]
   1576c:	687a      	ldr	r2, [r7, #4]
   1576e:	f7ff ff9f 	bl	156b0 <stdSED>
	stdDES(tmp, dst, key + 8);
   15772:	687b      	ldr	r3, [r7, #4]
   15774:	3308      	adds	r3, #8
   15776:	f107 0214 	add.w	r2, r7, #20
   1577a:	4610      	mov	r0, r2
   1577c:	68f9      	ldr	r1, [r7, #12]
   1577e:	461a      	mov	r2, r3
   15780:	f7ff ff76 	bl	15670 <stdDES>
	stdSED(dst, tmp, key);
   15784:	f107 0314 	add.w	r3, r7, #20
   15788:	68f8      	ldr	r0, [r7, #12]
   1578a:	4619      	mov	r1, r3
   1578c:	687a      	ldr	r2, [r7, #4]
   1578e:	f7ff ff8f 	bl	156b0 <stdSED>
}
   15792:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15796:	f2c0 0302 	movt	r3, #2
   1579a:	69fa      	ldr	r2, [r7, #28]
   1579c:	681b      	ldr	r3, [r3, #0]
   1579e:	429a      	cmp	r2, r3
   157a0:	d001      	beq.n	157a6 <stdDED+0x56>
   157a2:	f7f3 fbff 	bl	8fa4 <__stack_chk_fail>
   157a6:	f107 0720 	add.w	r7, r7, #32
   157aa:	46bd      	mov	sp, r7
   157ac:	bd80      	pop	{r7, pc}
   157ae:	bf00      	nop

000157b0 <hashJerkins>:

//Integer hash function for 32 bits based on Robert Jerkins' 32 bit Mix Function.
//http://www.concentric.net/~Ttwang/tech/inthash.htm
static card hashJerkins(card key) {
   157b0:	b580      	push	{r7, lr}
   157b2:	b084      	sub	sp, #16
   157b4:	af00      	add	r7, sp, #0
   157b6:	6078      	str	r0, [r7, #4]
   157b8:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   157bc:	f2c0 0302 	movt	r3, #2
   157c0:	681b      	ldr	r3, [r3, #0]
   157c2:	60fb      	str	r3, [r7, #12]
	key += (key << 12);
   157c4:	687b      	ldr	r3, [r7, #4]
   157c6:	031b      	lsls	r3, r3, #12
   157c8:	687a      	ldr	r2, [r7, #4]
   157ca:	18d3      	adds	r3, r2, r3
   157cc:	607b      	str	r3, [r7, #4]
	key ^= (key >> 22);
   157ce:	687b      	ldr	r3, [r7, #4]
   157d0:	0d9b      	lsrs	r3, r3, #22
   157d2:	687a      	ldr	r2, [r7, #4]
   157d4:	4053      	eors	r3, r2
   157d6:	607b      	str	r3, [r7, #4]
	key += (key << 4);
   157d8:	687b      	ldr	r3, [r7, #4]
   157da:	011b      	lsls	r3, r3, #4
   157dc:	687a      	ldr	r2, [r7, #4]
   157de:	18d3      	adds	r3, r2, r3
   157e0:	607b      	str	r3, [r7, #4]
	key ^= (key >> 9);
   157e2:	687b      	ldr	r3, [r7, #4]
   157e4:	0a5b      	lsrs	r3, r3, #9
   157e6:	687a      	ldr	r2, [r7, #4]
   157e8:	4053      	eors	r3, r2
   157ea:	607b      	str	r3, [r7, #4]
	key += (key << 10);
   157ec:	687b      	ldr	r3, [r7, #4]
   157ee:	029b      	lsls	r3, r3, #10
   157f0:	687a      	ldr	r2, [r7, #4]
   157f2:	18d3      	adds	r3, r2, r3
   157f4:	607b      	str	r3, [r7, #4]
	key ^= (key >> 2);
   157f6:	687b      	ldr	r3, [r7, #4]
   157f8:	089b      	lsrs	r3, r3, #2
   157fa:	687a      	ldr	r2, [r7, #4]
   157fc:	4053      	eors	r3, r2
   157fe:	607b      	str	r3, [r7, #4]
	key += (key << 7);
   15800:	687b      	ldr	r3, [r7, #4]
   15802:	01db      	lsls	r3, r3, #7
   15804:	687a      	ldr	r2, [r7, #4]
   15806:	18d3      	adds	r3, r2, r3
   15808:	607b      	str	r3, [r7, #4]
	key ^= (key >> 12);
   1580a:	687b      	ldr	r3, [r7, #4]
   1580c:	0b1b      	lsrs	r3, r3, #12
   1580e:	687a      	ldr	r2, [r7, #4]
   15810:	4053      	eors	r3, r2
   15812:	607b      	str	r3, [r7, #4]
	return key;
   15814:	687b      	ldr	r3, [r7, #4]
}
   15816:	4618      	mov	r0, r3
   15818:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1581c:	f2c0 0302 	movt	r3, #2
   15820:	68fa      	ldr	r2, [r7, #12]
   15822:	681b      	ldr	r3, [r3, #0]
   15824:	429a      	cmp	r2, r3
   15826:	d001      	beq.n	1582c <hashJerkins+0x7c>
   15828:	f7f3 fbbc 	bl	8fa4 <__stack_chk_fail>
   1582c:	f107 0710 	add.w	r7, r7, #16
   15830:	46bd      	mov	sp, r7
   15832:	bd80      	pop	{r7, pc}

00015834 <hashJerkinsBin>:
 *    - output integer hash value.
 * \sa Header: sys\\sys.h
 * \sa Source: sys\\std.c
 * \test tcts0002.c
 */
card hashJerkinsBin(const byte * buf, byte len) {
   15834:	b580      	push	{r7, lr}
   15836:	b0c6      	sub	sp, #280	; 0x118
   15838:	af00      	add	r7, sp, #0
   1583a:	1d3b      	adds	r3, r7, #4
   1583c:	6018      	str	r0, [r3, #0]
   1583e:	460a      	mov	r2, r1
   15840:	1cfb      	adds	r3, r7, #3
   15842:	701a      	strb	r2, [r3, #0]
   15844:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15848:	f2c0 0302 	movt	r3, #2
   1584c:	681b      	ldr	r3, [r3, #0]
   1584e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	card *ptr;
	card tmp[256 / sizeof(card)];

	VERIFY(len);

	memset(tmp, 0xFF, sizeof(tmp));
   15852:	f107 0314 	add.w	r3, r7, #20
   15856:	4618      	mov	r0, r3
   15858:	21ff      	movs	r1, #255	; 0xff
   1585a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1585e:	f7f3 e9ae 	blx	8bbc <_init+0x5c>
	memcpy(tmp, buf, len);
   15862:	1cfb      	adds	r3, r7, #3
   15864:	781b      	ldrb	r3, [r3, #0]
   15866:	f107 0114 	add.w	r1, r7, #20
   1586a:	1d3a      	adds	r2, r7, #4
   1586c:	4608      	mov	r0, r1
   1586e:	6811      	ldr	r1, [r2, #0]
   15870:	461a      	mov	r2, r3
   15872:	f7f3 ea02 	blx	8c78 <_init+0x118>

	ret = 0;
   15876:	f107 030c 	add.w	r3, r7, #12
   1587a:	2200      	movs	r2, #0
   1587c:	601a      	str	r2, [r3, #0]
	ptr = tmp;
   1587e:	f107 0310 	add.w	r3, r7, #16
   15882:	f107 0214 	add.w	r2, r7, #20
   15886:	601a      	str	r2, [r3, #0]
	len += 3;
   15888:	1cfb      	adds	r3, r7, #3
   1588a:	1cfa      	adds	r2, r7, #3
   1588c:	7812      	ldrb	r2, [r2, #0]
   1588e:	3203      	adds	r2, #3
   15890:	701a      	strb	r2, [r3, #0]
	len /= 4;
   15892:	1cfb      	adds	r3, r7, #3
   15894:	1cfa      	adds	r2, r7, #3
   15896:	7812      	ldrb	r2, [r2, #0]
   15898:	0892      	lsrs	r2, r2, #2
   1589a:	701a      	strb	r2, [r3, #0]
	while(len) {
   1589c:	e01a      	b.n	158d4 <hashJerkinsBin+0xa0>
		ret ^= hashJerkins(*ptr);
   1589e:	f107 0310 	add.w	r3, r7, #16
   158a2:	681b      	ldr	r3, [r3, #0]
   158a4:	681b      	ldr	r3, [r3, #0]
   158a6:	4618      	mov	r0, r3
   158a8:	f7ff ff82 	bl	157b0 <hashJerkins>
   158ac:	4601      	mov	r1, r0
   158ae:	f107 030c 	add.w	r3, r7, #12
   158b2:	f107 020c 	add.w	r2, r7, #12
   158b6:	6812      	ldr	r2, [r2, #0]
   158b8:	404a      	eors	r2, r1
   158ba:	601a      	str	r2, [r3, #0]
		ptr++;
   158bc:	f107 0310 	add.w	r3, r7, #16
   158c0:	f107 0210 	add.w	r2, r7, #16
   158c4:	6812      	ldr	r2, [r2, #0]
   158c6:	3204      	adds	r2, #4
   158c8:	601a      	str	r2, [r3, #0]
		len--;
   158ca:	1cfb      	adds	r3, r7, #3
   158cc:	1cfa      	adds	r2, r7, #3
   158ce:	7812      	ldrb	r2, [r2, #0]
   158d0:	3a01      	subs	r2, #1
   158d2:	701a      	strb	r2, [r3, #0]

	ret = 0;
	ptr = tmp;
	len += 3;
	len /= 4;
	while(len) {
   158d4:	1cfb      	adds	r3, r7, #3
   158d6:	781b      	ldrb	r3, [r3, #0]
   158d8:	2b00      	cmp	r3, #0
   158da:	d1e0      	bne.n	1589e <hashJerkinsBin+0x6a>
		ret ^= hashJerkins(*ptr);
		ptr++;
		len--;
	}

	return ret;
   158dc:	f107 030c 	add.w	r3, r7, #12
   158e0:	681b      	ldr	r3, [r3, #0]
}
   158e2:	4618      	mov	r0, r3
   158e4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   158e8:	f2c0 0302 	movt	r3, #2
   158ec:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
   158f0:	681b      	ldr	r3, [r3, #0]
   158f2:	429a      	cmp	r2, r3
   158f4:	d001      	beq.n	158fa <hashJerkinsBin+0xc6>
   158f6:	f7f3 fb55 	bl	8fa4 <__stack_chk_fail>
   158fa:	f507 778c 	add.w	r7, r7, #280	; 0x118
   158fe:	46bd      	mov	sp, r7
   15900:	bd80      	pop	{r7, pc}
   15902:	bf00      	nop

00015904 <bmpWdt>:
	ofsBmpBpp,                  //Bits per pixel
	ofsBmpDatChk,               //BMP Data checksum
	ofsBmpDat                   //data follow
};

word bmpWdt(const byte * bmp) {
   15904:	b580      	push	{r7, lr}
   15906:	b084      	sub	sp, #16
   15908:	af00      	add	r7, sp, #0
   1590a:	6078      	str	r0, [r7, #4]
   1590c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15910:	f2c0 0302 	movt	r3, #2
   15914:	681b      	ldr	r3, [r3, #0]
   15916:	60fb      	str	r3, [r7, #12]
	return WORDHL(bmp[ofsBmpWdtMsb], bmp[ofsBmpWdtLsb]);
   15918:	687b      	ldr	r3, [r7, #4]
   1591a:	330b      	adds	r3, #11
   1591c:	781b      	ldrb	r3, [r3, #0]
   1591e:	021b      	lsls	r3, r3, #8
   15920:	b29a      	uxth	r2, r3
   15922:	687b      	ldr	r3, [r7, #4]
   15924:	330c      	adds	r3, #12
   15926:	781b      	ldrb	r3, [r3, #0]
   15928:	4313      	orrs	r3, r2
   1592a:	b29b      	uxth	r3, r3
   1592c:	b29b      	uxth	r3, r3
}
   1592e:	4618      	mov	r0, r3
   15930:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15934:	f2c0 0302 	movt	r3, #2
   15938:	68fa      	ldr	r2, [r7, #12]
   1593a:	681b      	ldr	r3, [r3, #0]
   1593c:	429a      	cmp	r2, r3
   1593e:	d001      	beq.n	15944 <bmpWdt+0x40>
   15940:	f7f3 fb30 	bl	8fa4 <__stack_chk_fail>
   15944:	f107 0710 	add.w	r7, r7, #16
   15948:	46bd      	mov	sp, r7
   1594a:	bd80      	pop	{r7, pc}

0001594c <bmpHgt>:
word bmpHgt(const byte * bmp) {
   1594c:	b580      	push	{r7, lr}
   1594e:	b084      	sub	sp, #16
   15950:	af00      	add	r7, sp, #0
   15952:	6078      	str	r0, [r7, #4]
   15954:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15958:	f2c0 0302 	movt	r3, #2
   1595c:	681b      	ldr	r3, [r3, #0]
   1595e:	60fb      	str	r3, [r7, #12]
	return WORDHL(bmp[ofsBmpHgtMsb], bmp[ofsBmpHgtLsb]);
   15960:	687b      	ldr	r3, [r7, #4]
   15962:	330d      	adds	r3, #13
   15964:	781b      	ldrb	r3, [r3, #0]
   15966:	021b      	lsls	r3, r3, #8
   15968:	b29a      	uxth	r2, r3
   1596a:	687b      	ldr	r3, [r7, #4]
   1596c:	330e      	adds	r3, #14
   1596e:	781b      	ldrb	r3, [r3, #0]
   15970:	4313      	orrs	r3, r2
   15972:	b29b      	uxth	r3, r3
   15974:	b29b      	uxth	r3, r3
}
   15976:	4618      	mov	r0, r3
   15978:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1597c:	f2c0 0302 	movt	r3, #2
   15980:	68fa      	ldr	r2, [r7, #12]
   15982:	681b      	ldr	r3, [r3, #0]
   15984:	429a      	cmp	r2, r3
   15986:	d001      	beq.n	1598c <bmpHgt+0x40>
   15988:	f7f3 fb0c 	bl	8fa4 <__stack_chk_fail>
   1598c:	f107 0710 	add.w	r7, r7, #16
   15990:	46bd      	mov	sp, r7
   15992:	bd80      	pop	{r7, pc}

00015994 <bmpDat>:
const byte *bmpDat(const byte * bmp) {
   15994:	b580      	push	{r7, lr}
   15996:	b084      	sub	sp, #16
   15998:	af00      	add	r7, sp, #0
   1599a:	6078      	str	r0, [r7, #4]
   1599c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   159a0:	f2c0 0302 	movt	r3, #2
   159a4:	681b      	ldr	r3, [r3, #0]
   159a6:	60fb      	str	r3, [r7, #12]
	return bmp + ofsBmpDat;
   159a8:	687b      	ldr	r3, [r7, #4]
   159aa:	3311      	adds	r3, #17
}
   159ac:	4618      	mov	r0, r3
   159ae:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   159b2:	f2c0 0302 	movt	r3, #2
   159b6:	68fa      	ldr	r2, [r7, #12]
   159b8:	681b      	ldr	r3, [r3, #0]
   159ba:	429a      	cmp	r2, r3
   159bc:	d001      	beq.n	159c2 <bmpDat+0x2e>
   159be:	f7f3 faf1 	bl	8fa4 <__stack_chk_fail>
   159c2:	f107 0710 	add.w	r7, r7, #16
   159c6:	46bd      	mov	sp, r7
   159c8:	bd80      	pop	{r7, pc}
   159ca:	bf00      	nop

000159cc <Radix64Encode>:
 *
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\std.c
 * \test tcfa0004.c
 */
int Radix64Encode(byte * inBuf, word inLen, byte * outBuf) {
   159cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   159ce:	b099      	sub	sp, #100	; 0x64
   159d0:	af00      	add	r7, sp, #0
   159d2:	60f8      	str	r0, [r7, #12]
   159d4:	460b      	mov	r3, r1
   159d6:	607a      	str	r2, [r7, #4]
   159d8:	817b      	strh	r3, [r7, #10]
   159da:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   159de:	f2c0 0302 	movt	r3, #2
   159e2:	681b      	ldr	r3, [r3, #0]
   159e4:	65fb      	str	r3, [r7, #92]	; 0x5c
	byte bintoasc[64] = {
   159e6:	f244 73fc 	movw	r3, #18428	; 0x47fc
   159ea:	f2c0 0302 	movt	r3, #2
   159ee:	461c      	mov	r4, r3
   159f0:	f107 061c 	add.w	r6, r7, #28
   159f4:	f104 0e40 	add.w	lr, r4, #64	; 0x40
   159f8:	4635      	mov	r5, r6
   159fa:	4623      	mov	r3, r4
   159fc:	6818      	ldr	r0, [r3, #0]
   159fe:	6859      	ldr	r1, [r3, #4]
   15a00:	689a      	ldr	r2, [r3, #8]
   15a02:	68db      	ldr	r3, [r3, #12]
   15a04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   15a06:	3410      	adds	r4, #16
   15a08:	3610      	adds	r6, #16
   15a0a:	4574      	cmp	r4, lr
   15a0c:	d1f4      	bne.n	159f8 <Radix64Encode+0x2c>
			'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
			'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'
	};

	int i;
	unsigned char *p = outBuf;
   15a0e:	687b      	ldr	r3, [r7, #4]
   15a10:	61bb      	str	r3, [r7, #24]

	// Transform the 3x8 bits to 4x6 bits, as required by base64.
	for (i = 0; i < inLen; i += 3) {
   15a12:	2300      	movs	r3, #0
   15a14:	617b      	str	r3, [r7, #20]
   15a16:	e04d      	b.n	15ab4 <Radix64Encode+0xe8>
		*p++ = bintoasc[inBuf[0] >> 2];
   15a18:	68fb      	ldr	r3, [r7, #12]
   15a1a:	781b      	ldrb	r3, [r3, #0]
   15a1c:	089b      	lsrs	r3, r3, #2
   15a1e:	b2db      	uxtb	r3, r3
   15a20:	f107 0260 	add.w	r2, r7, #96	; 0x60
   15a24:	18d3      	adds	r3, r2, r3
   15a26:	f813 2c44 	ldrb.w	r2, [r3, #-68]
   15a2a:	69bb      	ldr	r3, [r7, #24]
   15a2c:	701a      	strb	r2, [r3, #0]
   15a2e:	69bb      	ldr	r3, [r7, #24]
   15a30:	3301      	adds	r3, #1
   15a32:	61bb      	str	r3, [r7, #24]
		*p++ = bintoasc[((inBuf[0] & 3) << 4) + (inBuf[1] >> 4)];
   15a34:	68fb      	ldr	r3, [r7, #12]
   15a36:	781b      	ldrb	r3, [r3, #0]
   15a38:	f003 0303 	and.w	r3, r3, #3
   15a3c:	011a      	lsls	r2, r3, #4
   15a3e:	68fb      	ldr	r3, [r7, #12]
   15a40:	3301      	adds	r3, #1
   15a42:	781b      	ldrb	r3, [r3, #0]
   15a44:	091b      	lsrs	r3, r3, #4
   15a46:	b2db      	uxtb	r3, r3
   15a48:	18d3      	adds	r3, r2, r3
   15a4a:	f107 0260 	add.w	r2, r7, #96	; 0x60
   15a4e:	18d3      	adds	r3, r2, r3
   15a50:	f813 2c44 	ldrb.w	r2, [r3, #-68]
   15a54:	69bb      	ldr	r3, [r7, #24]
   15a56:	701a      	strb	r2, [r3, #0]
   15a58:	69bb      	ldr	r3, [r7, #24]
   15a5a:	3301      	adds	r3, #1
   15a5c:	61bb      	str	r3, [r7, #24]
		*p++ = bintoasc[((inBuf[1] & 0xf) << 2) + (inBuf[2] >> 6)];
   15a5e:	68fb      	ldr	r3, [r7, #12]
   15a60:	3301      	adds	r3, #1
   15a62:	781b      	ldrb	r3, [r3, #0]
   15a64:	f003 030f 	and.w	r3, r3, #15
   15a68:	009a      	lsls	r2, r3, #2
   15a6a:	68fb      	ldr	r3, [r7, #12]
   15a6c:	3302      	adds	r3, #2
   15a6e:	781b      	ldrb	r3, [r3, #0]
   15a70:	099b      	lsrs	r3, r3, #6
   15a72:	b2db      	uxtb	r3, r3
   15a74:	18d3      	adds	r3, r2, r3
   15a76:	f107 0260 	add.w	r2, r7, #96	; 0x60
   15a7a:	18d3      	adds	r3, r2, r3
   15a7c:	f813 2c44 	ldrb.w	r2, [r3, #-68]
   15a80:	69bb      	ldr	r3, [r7, #24]
   15a82:	701a      	strb	r2, [r3, #0]
   15a84:	69bb      	ldr	r3, [r7, #24]
   15a86:	3301      	adds	r3, #1
   15a88:	61bb      	str	r3, [r7, #24]
		*p++ = bintoasc[inBuf[2] & 0x3f];
   15a8a:	68fb      	ldr	r3, [r7, #12]
   15a8c:	3302      	adds	r3, #2
   15a8e:	781b      	ldrb	r3, [r3, #0]
   15a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15a94:	f107 0260 	add.w	r2, r7, #96	; 0x60
   15a98:	18d3      	adds	r3, r2, r3
   15a9a:	f813 2c44 	ldrb.w	r2, [r3, #-68]
   15a9e:	69bb      	ldr	r3, [r7, #24]
   15aa0:	701a      	strb	r2, [r3, #0]
   15aa2:	69bb      	ldr	r3, [r7, #24]
   15aa4:	3301      	adds	r3, #1
   15aa6:	61bb      	str	r3, [r7, #24]
		inBuf += 3;
   15aa8:	68fb      	ldr	r3, [r7, #12]
   15aaa:	3303      	adds	r3, #3
   15aac:	60fb      	str	r3, [r7, #12]

	int i;
	unsigned char *p = outBuf;

	// Transform the 3x8 bits to 4x6 bits, as required by base64.
	for (i = 0; i < inLen; i += 3) {
   15aae:	697b      	ldr	r3, [r7, #20]
   15ab0:	3303      	adds	r3, #3
   15ab2:	617b      	str	r3, [r7, #20]
   15ab4:	897a      	ldrh	r2, [r7, #10]
   15ab6:	697b      	ldr	r3, [r7, #20]
   15ab8:	429a      	cmp	r2, r3
   15aba:	dcad      	bgt.n	15a18 <Radix64Encode+0x4c>
		*p++ = bintoasc[((inBuf[1] & 0xf) << 2) + (inBuf[2] >> 6)];
		*p++ = bintoasc[inBuf[2] & 0x3f];
		inBuf += 3;
	}
	// Pad the result if necessary...
	if(i == inLen + 1)
   15abc:	897b      	ldrh	r3, [r7, #10]
   15abe:	1c5a      	adds	r2, r3, #1
   15ac0:	697b      	ldr	r3, [r7, #20]
   15ac2:	429a      	cmp	r2, r3
   15ac4:	d104      	bne.n	15ad0 <Radix64Encode+0x104>
		*(p - 1) = '=';
   15ac6:	69bb      	ldr	r3, [r7, #24]
   15ac8:	3b01      	subs	r3, #1
   15aca:	223d      	movs	r2, #61	; 0x3d
   15acc:	701a      	strb	r2, [r3, #0]
   15ace:	e00c      	b.n	15aea <Radix64Encode+0x11e>
	else if(i == inLen + 2)
   15ad0:	897b      	ldrh	r3, [r7, #10]
   15ad2:	1c9a      	adds	r2, r3, #2
   15ad4:	697b      	ldr	r3, [r7, #20]
   15ad6:	429a      	cmp	r2, r3
   15ad8:	d107      	bne.n	15aea <Radix64Encode+0x11e>
		*(p - 1) = *(p - 2) = '=';
   15ada:	69bb      	ldr	r3, [r7, #24]
   15adc:	1e5a      	subs	r2, r3, #1
   15ade:	69bb      	ldr	r3, [r7, #24]
   15ae0:	3b02      	subs	r3, #2
   15ae2:	213d      	movs	r1, #61	; 0x3d
   15ae4:	7019      	strb	r1, [r3, #0]
   15ae6:	781b      	ldrb	r3, [r3, #0]
   15ae8:	7013      	strb	r3, [r2, #0]

	// ...and zero-terminate it.
	*p = '\0';
   15aea:	69bb      	ldr	r3, [r7, #24]
   15aec:	2200      	movs	r2, #0
   15aee:	701a      	strb	r2, [r3, #0]
	return strlen((char *) outBuf);
   15af0:	6878      	ldr	r0, [r7, #4]
   15af2:	f7f3 e8c8 	blx	8c84 <_init+0x124>
   15af6:	4603      	mov	r3, r0
}
   15af8:	4618      	mov	r0, r3
   15afa:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15afe:	f2c0 0302 	movt	r3, #2
   15b02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   15b04:	681b      	ldr	r3, [r3, #0]
   15b06:	429a      	cmp	r2, r3
   15b08:	d001      	beq.n	15b0e <Radix64Encode+0x142>
   15b0a:	f7f3 fa4b 	bl	8fa4 <__stack_chk_fail>
   15b0e:	f107 0764 	add.w	r7, r7, #100	; 0x64
   15b12:	46bd      	mov	sp, r7
   15b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15b16:	bf00      	nop

00015b18 <Radix64Decode>:
 *
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\std.c
 * \test tcfa0004.c
 */
int Radix64Decode(byte * inBuf, byte * outBuf, word * outLength) {
   15b18:	b580      	push	{r7, lr}
   15b1a:	b0c8      	sub	sp, #288	; 0x120
   15b1c:	af00      	add	r7, sp, #0
   15b1e:	f107 030c 	add.w	r3, r7, #12
   15b22:	6018      	str	r0, [r3, #0]
   15b24:	f107 0308 	add.w	r3, r7, #8
   15b28:	6019      	str	r1, [r3, #0]
   15b2a:	1d3b      	adds	r3, r7, #4
   15b2c:	601a      	str	r2, [r3, #0]
   15b2e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15b32:	f2c0 0302 	movt	r3, #2
   15b36:	681b      	ldr	r3, [r3, #0]
   15b38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	byte asctobin[256] = {
   15b3c:	f107 021c 	add.w	r2, r7, #28
   15b40:	f644 033c 	movw	r3, #18492	; 0x483c
   15b44:	f2c0 0302 	movt	r3, #2
   15b48:	4611      	mov	r1, r2
   15b4a:	461a      	mov	r2, r3
   15b4c:	f44f 7380 	mov.w	r3, #256	; 0x100
   15b50:	4608      	mov	r0, r1
   15b52:	4611      	mov	r1, r2
   15b54:	461a      	mov	r2, r3
   15b56:	f7f3 e890 	blx	8c78 <_init+0x118>
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff
	};

	int idx = 0;
   15b5a:	f107 0314 	add.w	r3, r7, #20
   15b5e:	2200      	movs	r2, #0
   15b60:	601a      	str	r2, [r3, #0]
	unsigned char c, c2, val = '\0';
   15b62:	f107 0312 	add.w	r3, r7, #18
   15b66:	2200      	movs	r2, #0
   15b68:	701a      	strb	r2, [r3, #0]
	int n = 0;
   15b6a:	f107 0318 	add.w	r3, r7, #24
   15b6e:	2200      	movs	r2, #0
   15b70:	601a      	str	r2, [r3, #0]

	for (idx = 0, c = *inBuf; c; c = *(++inBuf), idx = (idx + 1) % 4) {
   15b72:	f107 0314 	add.w	r3, r7, #20
   15b76:	2200      	movs	r2, #0
   15b78:	601a      	str	r2, [r3, #0]
   15b7a:	f107 0311 	add.w	r3, r7, #17
   15b7e:	f107 020c 	add.w	r2, r7, #12
   15b82:	6812      	ldr	r2, [r2, #0]
   15b84:	7812      	ldrb	r2, [r2, #0]
   15b86:	701a      	strb	r2, [r3, #0]
   15b88:	e0fd      	b.n	15d86 <Radix64Decode+0x26e>
		if(c == '\n' || c == ' ' || c == '\r' || c == '\t')
   15b8a:	f107 0311 	add.w	r3, r7, #17
   15b8e:	781b      	ldrb	r3, [r3, #0]
   15b90:	2b0a      	cmp	r3, #10
   15b92:	f000 80d8 	beq.w	15d46 <Radix64Decode+0x22e>
   15b96:	f107 0311 	add.w	r3, r7, #17
   15b9a:	781b      	ldrb	r3, [r3, #0]
   15b9c:	2b20      	cmp	r3, #32
   15b9e:	f000 80d2 	beq.w	15d46 <Radix64Decode+0x22e>
   15ba2:	f107 0311 	add.w	r3, r7, #17
   15ba6:	781b      	ldrb	r3, [r3, #0]
   15ba8:	2b0d      	cmp	r3, #13
   15baa:	f000 80cc 	beq.w	15d46 <Radix64Decode+0x22e>
   15bae:	f107 0311 	add.w	r3, r7, #17
   15bb2:	781b      	ldrb	r3, [r3, #0]
   15bb4:	2b09      	cmp	r3, #9
   15bb6:	f000 80c6 	beq.w	15d46 <Radix64Decode+0x22e>
			continue;

		if(c == '=') {          // pad character: stop
   15bba:	f107 0311 	add.w	r3, r7, #17
   15bbe:	781b      	ldrb	r3, [r3, #0]
   15bc0:	2b3d      	cmp	r3, #61	; 0x3d
   15bc2:	d118      	bne.n	15bf6 <Radix64Decode+0xde>
			if(idx == 1)
   15bc4:	f107 0314 	add.w	r3, r7, #20
   15bc8:	681b      	ldr	r3, [r3, #0]
   15bca:	2b01      	cmp	r3, #1
   15bcc:	f040 80e2 	bne.w	15d94 <Radix64Decode+0x27c>
				outBuf[n++] = val;
   15bd0:	f107 0318 	add.w	r3, r7, #24
   15bd4:	681b      	ldr	r3, [r3, #0]
   15bd6:	f107 0208 	add.w	r2, r7, #8
   15bda:	6812      	ldr	r2, [r2, #0]
   15bdc:	18d3      	adds	r3, r2, r3
   15bde:	f107 0212 	add.w	r2, r7, #18
   15be2:	7812      	ldrb	r2, [r2, #0]
   15be4:	701a      	strb	r2, [r3, #0]
   15be6:	f107 0318 	add.w	r3, r7, #24
   15bea:	f107 0218 	add.w	r2, r7, #24
   15bee:	6812      	ldr	r2, [r2, #0]
   15bf0:	3201      	adds	r2, #1
   15bf2:	601a      	str	r2, [r3, #0]
			break;
   15bf4:	e0ce      	b.n	15d94 <Radix64Decode+0x27c>
		}

		if((c = asctobin[(c2 = c)]) == 255)
   15bf6:	f107 0313 	add.w	r3, r7, #19
   15bfa:	f107 0211 	add.w	r2, r7, #17
   15bfe:	7812      	ldrb	r2, [r2, #0]
   15c00:	701a      	strb	r2, [r3, #0]
   15c02:	f107 0313 	add.w	r3, r7, #19
   15c06:	781a      	ldrb	r2, [r3, #0]
   15c08:	f107 0311 	add.w	r3, r7, #17
   15c0c:	f107 011c 	add.w	r1, r7, #28
   15c10:	5c8a      	ldrb	r2, [r1, r2]
   15c12:	701a      	strb	r2, [r3, #0]
   15c14:	f107 0311 	add.w	r3, r7, #17
   15c18:	781b      	ldrb	r3, [r3, #0]
   15c1a:	2bff      	cmp	r3, #255	; 0xff
   15c1c:	d102      	bne.n	15c24 <Radix64Decode+0x10c>
			return -1;
   15c1e:	f04f 33ff 	mov.w	r3, #4294967295
   15c22:	e0c0      	b.n	15da6 <Radix64Decode+0x28e>
		//RadixError;

		switch (idx) {
   15c24:	f107 0314 	add.w	r3, r7, #20
   15c28:	681b      	ldr	r3, [r3, #0]
   15c2a:	2b03      	cmp	r3, #3
   15c2c:	f200 808c 	bhi.w	15d48 <Radix64Decode+0x230>
   15c30:	a201      	add	r2, pc, #4	; (adr r2, 15c38 <Radix64Decode+0x120>)
   15c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15c36:	bf00      	nop
   15c38:	00015c49 	.word	0x00015c49
   15c3c:	00015c59 	.word	0x00015c59
   15c40:	00015caf 	.word	0x00015caf
   15c44:	00015d05 	.word	0x00015d05
		case 0:
			val = c << 2;
   15c48:	f107 0312 	add.w	r3, r7, #18
   15c4c:	f107 0211 	add.w	r2, r7, #17
   15c50:	7812      	ldrb	r2, [r2, #0]
   15c52:	0092      	lsls	r2, r2, #2
   15c54:	701a      	strb	r2, [r3, #0]
			break;
   15c56:	e077      	b.n	15d48 <Radix64Decode+0x230>
		case 1:
			val |= (c >> 4) & 3;
   15c58:	f107 0311 	add.w	r3, r7, #17
   15c5c:	781b      	ldrb	r3, [r3, #0]
   15c5e:	091b      	lsrs	r3, r3, #4
   15c60:	b2db      	uxtb	r3, r3
   15c62:	b2db      	uxtb	r3, r3
   15c64:	f003 0303 	and.w	r3, r3, #3
   15c68:	b2da      	uxtb	r2, r3
   15c6a:	f107 0312 	add.w	r3, r7, #18
   15c6e:	781b      	ldrb	r3, [r3, #0]
   15c70:	4313      	orrs	r3, r2
   15c72:	b2da      	uxtb	r2, r3
   15c74:	f107 0312 	add.w	r3, r7, #18
   15c78:	701a      	strb	r2, [r3, #0]
			outBuf[n++] = val;
   15c7a:	f107 0318 	add.w	r3, r7, #24
   15c7e:	681b      	ldr	r3, [r3, #0]
   15c80:	f107 0208 	add.w	r2, r7, #8
   15c84:	6812      	ldr	r2, [r2, #0]
   15c86:	18d3      	adds	r3, r2, r3
   15c88:	f107 0212 	add.w	r2, r7, #18
   15c8c:	7812      	ldrb	r2, [r2, #0]
   15c8e:	701a      	strb	r2, [r3, #0]
   15c90:	f107 0318 	add.w	r3, r7, #24
   15c94:	f107 0218 	add.w	r2, r7, #24
   15c98:	6812      	ldr	r2, [r2, #0]
   15c9a:	3201      	adds	r2, #1
   15c9c:	601a      	str	r2, [r3, #0]
			val = (c << 4) & 0xf0;
   15c9e:	f107 0311 	add.w	r3, r7, #17
   15ca2:	781b      	ldrb	r3, [r3, #0]
   15ca4:	011a      	lsls	r2, r3, #4
   15ca6:	f107 0312 	add.w	r3, r7, #18
   15caa:	701a      	strb	r2, [r3, #0]
			break;
   15cac:	e04c      	b.n	15d48 <Radix64Decode+0x230>
		case 2:
			val |= (c >> 2) & 15;
   15cae:	f107 0311 	add.w	r3, r7, #17
   15cb2:	781b      	ldrb	r3, [r3, #0]
   15cb4:	089b      	lsrs	r3, r3, #2
   15cb6:	b2db      	uxtb	r3, r3
   15cb8:	b2db      	uxtb	r3, r3
   15cba:	f003 030f 	and.w	r3, r3, #15
   15cbe:	b2da      	uxtb	r2, r3
   15cc0:	f107 0312 	add.w	r3, r7, #18
   15cc4:	781b      	ldrb	r3, [r3, #0]
   15cc6:	4313      	orrs	r3, r2
   15cc8:	b2da      	uxtb	r2, r3
   15cca:	f107 0312 	add.w	r3, r7, #18
   15cce:	701a      	strb	r2, [r3, #0]
			outBuf[n++] = val;
   15cd0:	f107 0318 	add.w	r3, r7, #24
   15cd4:	681b      	ldr	r3, [r3, #0]
   15cd6:	f107 0208 	add.w	r2, r7, #8
   15cda:	6812      	ldr	r2, [r2, #0]
   15cdc:	18d3      	adds	r3, r2, r3
   15cde:	f107 0212 	add.w	r2, r7, #18
   15ce2:	7812      	ldrb	r2, [r2, #0]
   15ce4:	701a      	strb	r2, [r3, #0]
   15ce6:	f107 0318 	add.w	r3, r7, #24
   15cea:	f107 0218 	add.w	r2, r7, #24
   15cee:	6812      	ldr	r2, [r2, #0]
   15cf0:	3201      	adds	r2, #1
   15cf2:	601a      	str	r2, [r3, #0]
			val = (c << 6) & 0xc0;
   15cf4:	f107 0311 	add.w	r3, r7, #17
   15cf8:	781b      	ldrb	r3, [r3, #0]
   15cfa:	019a      	lsls	r2, r3, #6
   15cfc:	f107 0312 	add.w	r3, r7, #18
   15d00:	701a      	strb	r2, [r3, #0]
			break;
   15d02:	e021      	b.n	15d48 <Radix64Decode+0x230>
		case 3:
			val |= c & 0x3f;
   15d04:	f107 0311 	add.w	r3, r7, #17
   15d08:	781b      	ldrb	r3, [r3, #0]
   15d0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15d0e:	b2da      	uxtb	r2, r3
   15d10:	f107 0312 	add.w	r3, r7, #18
   15d14:	781b      	ldrb	r3, [r3, #0]
   15d16:	4313      	orrs	r3, r2
   15d18:	b2da      	uxtb	r2, r3
   15d1a:	f107 0312 	add.w	r3, r7, #18
   15d1e:	701a      	strb	r2, [r3, #0]
			outBuf[n++] = val;
   15d20:	f107 0318 	add.w	r3, r7, #24
   15d24:	681b      	ldr	r3, [r3, #0]
   15d26:	f107 0208 	add.w	r2, r7, #8
   15d2a:	6812      	ldr	r2, [r2, #0]
   15d2c:	18d3      	adds	r3, r2, r3
   15d2e:	f107 0212 	add.w	r2, r7, #18
   15d32:	7812      	ldrb	r2, [r2, #0]
   15d34:	701a      	strb	r2, [r3, #0]
   15d36:	f107 0318 	add.w	r3, r7, #24
   15d3a:	f107 0218 	add.w	r2, r7, #24
   15d3e:	6812      	ldr	r2, [r2, #0]
   15d40:	3201      	adds	r2, #1
   15d42:	601a      	str	r2, [r3, #0]
			break;
   15d44:	e000      	b.n	15d48 <Radix64Decode+0x230>
	unsigned char c, c2, val = '\0';
	int n = 0;

	for (idx = 0, c = *inBuf; c; c = *(++inBuf), idx = (idx + 1) % 4) {
		if(c == '\n' || c == ' ' || c == '\r' || c == '\t')
			continue;
   15d46:	bf00      	nop

	int idx = 0;
	unsigned char c, c2, val = '\0';
	int n = 0;

	for (idx = 0, c = *inBuf; c; c = *(++inBuf), idx = (idx + 1) % 4) {
   15d48:	f107 030c 	add.w	r3, r7, #12
   15d4c:	f107 020c 	add.w	r2, r7, #12
   15d50:	6812      	ldr	r2, [r2, #0]
   15d52:	3201      	adds	r2, #1
   15d54:	601a      	str	r2, [r3, #0]
   15d56:	f107 0311 	add.w	r3, r7, #17
   15d5a:	f107 020c 	add.w	r2, r7, #12
   15d5e:	6812      	ldr	r2, [r2, #0]
   15d60:	7812      	ldrb	r2, [r2, #0]
   15d62:	701a      	strb	r2, [r3, #0]
   15d64:	f107 0314 	add.w	r3, r7, #20
   15d68:	681b      	ldr	r3, [r3, #0]
   15d6a:	1c59      	adds	r1, r3, #1
   15d6c:	f107 0214 	add.w	r2, r7, #20
   15d70:	2303      	movs	r3, #3
   15d72:	f2c8 0300 	movt	r3, #32768	; 0x8000
   15d76:	400b      	ands	r3, r1
   15d78:	2b00      	cmp	r3, #0
   15d7a:	da03      	bge.n	15d84 <Radix64Decode+0x26c>
   15d7c:	3b01      	subs	r3, #1
   15d7e:	f063 0303 	orn	r3, r3, #3
   15d82:	3301      	adds	r3, #1
   15d84:	6013      	str	r3, [r2, #0]
   15d86:	f107 0311 	add.w	r3, r7, #17
   15d8a:	781b      	ldrb	r3, [r3, #0]
   15d8c:	2b00      	cmp	r3, #0
   15d8e:	f47f aefc 	bne.w	15b8a <Radix64Decode+0x72>
   15d92:	e000      	b.n	15d96 <Radix64Decode+0x27e>
			continue;

		if(c == '=') {          // pad character: stop
			if(idx == 1)
				outBuf[n++] = val;
			break;
   15d94:	bf00      	nop
			outBuf[n++] = val;
			break;
		}

	}
	*outLength = n;
   15d96:	f107 0318 	add.w	r3, r7, #24
   15d9a:	681b      	ldr	r3, [r3, #0]
   15d9c:	b29a      	uxth	r2, r3
   15d9e:	1d3b      	adds	r3, r7, #4
   15da0:	681b      	ldr	r3, [r3, #0]
   15da2:	801a      	strh	r2, [r3, #0]
	return 1;
   15da4:	2301      	movs	r3, #1
}
   15da6:	4618      	mov	r0, r3
   15da8:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15dac:	f2c0 0302 	movt	r3, #2
   15db0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
   15db4:	681b      	ldr	r3, [r3, #0]
   15db6:	429a      	cmp	r2, r3
   15db8:	d001      	beq.n	15dbe <Radix64Decode+0x2a6>
   15dba:	f7f3 f8f3 	bl	8fa4 <__stack_chk_fail>
   15dbe:	f507 7790 	add.w	r7, r7, #288	; 0x120
   15dc2:	46bd      	mov	sp, r7
   15dc4:	bd80      	pop	{r7, pc}
   15dc6:	bf00      	nop

00015dc8 <GetIndex>:
 * \param pString (I) The array where in the input character 'search'  is searched
 * \param search (O) The character to be searched
 * \returns the last character to be searched
 * \sa Source: pri\\std.c
 */
static int GetIndex(char *pString, char search) {
   15dc8:	b580      	push	{r7, lr}
   15dca:	b084      	sub	sp, #16
   15dcc:	af00      	add	r7, sp, #0
   15dce:	6078      	str	r0, [r7, #4]
   15dd0:	460b      	mov	r3, r1
   15dd2:	70fb      	strb	r3, [r7, #3]
   15dd4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15dd8:	f2c0 0302 	movt	r3, #2
   15ddc:	681b      	ldr	r3, [r3, #0]
   15dde:	60fb      	str	r3, [r7, #12]
	int index = 0;
   15de0:	2300      	movs	r3, #0
   15de2:	60bb      	str	r3, [r7, #8]

	while(*pString != (char) 0) //Loop will finish at null character if no match is found
   15de4:	e00a      	b.n	15dfc <GetIndex+0x34>
	{
		if(*pString == search)
   15de6:	687b      	ldr	r3, [r7, #4]
   15de8:	781b      	ldrb	r3, [r3, #0]
   15dea:	78fa      	ldrb	r2, [r7, #3]
   15dec:	429a      	cmp	r2, r3
   15dee:	d00a      	beq.n	15e06 <GetIndex+0x3e>
			break;
		pString++;
   15df0:	687b      	ldr	r3, [r7, #4]
   15df2:	3301      	adds	r3, #1
   15df4:	607b      	str	r3, [r7, #4]
		index++;
   15df6:	68bb      	ldr	r3, [r7, #8]
   15df8:	3301      	adds	r3, #1
   15dfa:	60bb      	str	r3, [r7, #8]
 * \sa Source: pri\\std.c
 */
static int GetIndex(char *pString, char search) {
	int index = 0;

	while(*pString != (char) 0) //Loop will finish at null character if no match is found
   15dfc:	687b      	ldr	r3, [r7, #4]
   15dfe:	781b      	ldrb	r3, [r3, #0]
   15e00:	2b00      	cmp	r3, #0
   15e02:	d1f0      	bne.n	15de6 <GetIndex+0x1e>
   15e04:	e000      	b.n	15e08 <GetIndex+0x40>
	{
		if(*pString == search)
			break;
   15e06:	bf00      	nop
		pString++;
		index++;
	}
	return index;
   15e08:	68bb      	ldr	r3, [r7, #8]
}
   15e0a:	4618      	mov	r0, r3
   15e0c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15e10:	f2c0 0302 	movt	r3, #2
   15e14:	68fa      	ldr	r2, [r7, #12]
   15e16:	681b      	ldr	r3, [r3, #0]
   15e18:	429a      	cmp	r2, r3
   15e1a:	d001      	beq.n	15e20 <GetIndex+0x58>
   15e1c:	f7f3 f8c2 	bl	8fa4 <__stack_chk_fail>
   15e20:	f107 0710 	add.w	r7, r7, #16
   15e24:	46bd      	mov	sp, r7
   15e26:	bd80      	pop	{r7, pc}

00015e28 <BaseToDec>:
 * \returns the last character to be searched
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\std.c
 * \test tcma0020.c
 */
int BaseToDec(char *number, card base) {
   15e28:	b5b0      	push	{r4, r5, r7, lr}
   15e2a:	b092      	sub	sp, #72	; 0x48
   15e2c:	af00      	add	r7, sp, #0
   15e2e:	6078      	str	r0, [r7, #4]
   15e30:	6039      	str	r1, [r7, #0]
   15e32:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15e36:	f2c0 0302 	movt	r3, #2
   15e3a:	681b      	ldr	r3, [r3, #0]
   15e3c:	647b      	str	r3, [r7, #68]	; 0x44
	int NumLength;
	int PlaceValue = 1, total = 0;
   15e3e:	2301      	movs	r3, #1
   15e40:	60bb      	str	r3, [r7, #8]
   15e42:	2300      	movs	r3, #0
   15e44:	60fb      	str	r3, [r7, #12]

	//Symbols used to display a number correctly
	//Numbers over base 10 use letters to represent values over and equal to 10
	//It is able to increase the max no. of bases by adding other symbols

	char symbols[37] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
   15e46:	f644 133c 	movw	r3, #18748	; 0x493c
   15e4a:	f2c0 0302 	movt	r3, #2
   15e4e:	f107 041c 	add.w	r4, r7, #28
   15e52:	461d      	mov	r5, r3
   15e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15e5c:	e895 0003 	ldmia.w	r5, {r0, r1}
   15e60:	6020      	str	r0, [r4, #0]
   15e62:	3404      	adds	r4, #4
   15e64:	7021      	strb	r1, [r4, #0]
	const int MAX_BASE = 36;    //Highest base allowed (make sure there are enough symbols first!)
   15e66:	2324      	movs	r3, #36	; 0x24
   15e68:	617b      	str	r3, [r7, #20]

	if(base < 2 || base > (card) MAX_BASE)
   15e6a:	683b      	ldr	r3, [r7, #0]
   15e6c:	2b01      	cmp	r3, #1
   15e6e:	d903      	bls.n	15e78 <BaseToDec+0x50>
   15e70:	697a      	ldr	r2, [r7, #20]
   15e72:	683b      	ldr	r3, [r7, #0]
   15e74:	429a      	cmp	r2, r3
   15e76:	d201      	bcs.n	15e7c <BaseToDec+0x54>
		return 0;               //Failed
   15e78:	2300      	movs	r3, #0
   15e7a:	e037      	b.n	15eec <BaseToDec+0xc4>

	NumLength = strlen(number);
   15e7c:	6878      	ldr	r0, [r7, #4]
   15e7e:	f7f2 ef02 	blx	8c84 <_init+0x124>
   15e82:	4603      	mov	r3, r0
   15e84:	61bb      	str	r3, [r7, #24]

	//Work out the place value of the first digit (base^length-1)
	for (i = 1; i < NumLength; i++) {
   15e86:	2301      	movs	r3, #1
   15e88:	613b      	str	r3, [r7, #16]
   15e8a:	e007      	b.n	15e9c <BaseToDec+0x74>
		PlaceValue *= base;
   15e8c:	68bb      	ldr	r3, [r7, #8]
   15e8e:	683a      	ldr	r2, [r7, #0]
   15e90:	fb02 f303 	mul.w	r3, r2, r3
   15e94:	60bb      	str	r3, [r7, #8]
		return 0;               //Failed

	NumLength = strlen(number);

	//Work out the place value of the first digit (base^length-1)
	for (i = 1; i < NumLength; i++) {
   15e96:	693b      	ldr	r3, [r7, #16]
   15e98:	3301      	adds	r3, #1
   15e9a:	613b      	str	r3, [r7, #16]
   15e9c:	693a      	ldr	r2, [r7, #16]
   15e9e:	69bb      	ldr	r3, [r7, #24]
   15ea0:	429a      	cmp	r2, r3
   15ea2:	dbf3      	blt.n	15e8c <BaseToDec+0x64>
		PlaceValue *= base;
	}

	//For each digit, multiply by its place value and add to total
	for (i = 0; i < NumLength; i++) {
   15ea4:	2300      	movs	r3, #0
   15ea6:	613b      	str	r3, [r7, #16]
   15ea8:	e01b      	b.n	15ee2 <BaseToDec+0xba>
		total += GetIndex(symbols, *number) * PlaceValue;
   15eaa:	687b      	ldr	r3, [r7, #4]
   15eac:	781b      	ldrb	r3, [r3, #0]
   15eae:	f107 021c 	add.w	r2, r7, #28
   15eb2:	4610      	mov	r0, r2
   15eb4:	4619      	mov	r1, r3
   15eb6:	f7ff ff87 	bl	15dc8 <GetIndex>
   15eba:	4603      	mov	r3, r0
   15ebc:	68ba      	ldr	r2, [r7, #8]
   15ebe:	fb02 f303 	mul.w	r3, r2, r3
   15ec2:	68fa      	ldr	r2, [r7, #12]
   15ec4:	18d3      	adds	r3, r2, r3
   15ec6:	60fb      	str	r3, [r7, #12]
		number++;
   15ec8:	687b      	ldr	r3, [r7, #4]
   15eca:	3301      	adds	r3, #1
   15ecc:	607b      	str	r3, [r7, #4]
		PlaceValue /= base;     //Next digit's place value (previous/base)
   15ece:	68bb      	ldr	r3, [r7, #8]
   15ed0:	4618      	mov	r0, r3
   15ed2:	6839      	ldr	r1, [r7, #0]
   15ed4:	f00c e932 	blx	2213c <__aeabi_uidiv>
   15ed8:	4603      	mov	r3, r0
   15eda:	60bb      	str	r3, [r7, #8]
	for (i = 1; i < NumLength; i++) {
		PlaceValue *= base;
	}

	//For each digit, multiply by its place value and add to total
	for (i = 0; i < NumLength; i++) {
   15edc:	693b      	ldr	r3, [r7, #16]
   15ede:	3301      	adds	r3, #1
   15ee0:	613b      	str	r3, [r7, #16]
   15ee2:	693a      	ldr	r2, [r7, #16]
   15ee4:	69bb      	ldr	r3, [r7, #24]
   15ee6:	429a      	cmp	r2, r3
   15ee8:	dbdf      	blt.n	15eaa <BaseToDec+0x82>
		total += GetIndex(symbols, *number) * PlaceValue;
		number++;
		PlaceValue /= base;     //Next digit's place value (previous/base)
	}
	return total;
   15eea:	68fb      	ldr	r3, [r7, #12]
}
   15eec:	4618      	mov	r0, r3
   15eee:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15ef2:	f2c0 0302 	movt	r3, #2
   15ef6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   15ef8:	681b      	ldr	r3, [r3, #0]
   15efa:	429a      	cmp	r2, r3
   15efc:	d001      	beq.n	15f02 <BaseToDec+0xda>
   15efe:	f7f3 f851 	bl	8fa4 <__stack_chk_fail>
   15f02:	f107 0748 	add.w	r7, r7, #72	; 0x48
   15f06:	46bd      	mov	sp, r7
   15f08:	bdb0      	pop	{r4, r5, r7, pc}
   15f0a:	bf00      	nop

00015f0c <stdOWF>:
 * \return non-negative if OK.
 * \sa Header: sys\\sys.h
 * \sa Source: sys\\std.c
 * \test tcab0057.c
 */
int stdOWF(byte * dst, const byte * dat, const byte * key) {
   15f0c:	b580      	push	{r7, lr}
   15f0e:	b08c      	sub	sp, #48	; 0x30
   15f10:	af00      	add	r7, sp, #0
   15f12:	60f8      	str	r0, [r7, #12]
   15f14:	60b9      	str	r1, [r7, #8]
   15f16:	607a      	str	r2, [r7, #4]
   15f18:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15f1c:	f2c0 0302 	movt	r3, #2
   15f20:	681b      	ldr	r3, [r3, #0]
   15f22:	62fb      	str	r3, [r7, #44]	; 0x2c
	byte tmpK[8];
	byte tmpD[8];
	byte *owfX = (byte *) "\xA5\xC7\xB2\x82\x84\x76\xA8\x29";
   15f24:	f644 1364 	movw	r3, #18788	; 0x4964
   15f28:	f2c0 0302 	movt	r3, #2
   15f2c:	617b      	str	r3, [r7, #20]
	byte *owfY = (byte *) "\xB5\xE3\x7F\xC5\xD4\xF7\xA3\x93";
   15f2e:	f644 1370 	movw	r3, #18800	; 0x4970
   15f32:	f2c0 0302 	movt	r3, #2
   15f36:	61bb      	str	r3, [r7, #24]

	xor(dat, owfX, tmpD, 8);
   15f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
   15f3c:	68b8      	ldr	r0, [r7, #8]
   15f3e:	6979      	ldr	r1, [r7, #20]
   15f40:	461a      	mov	r2, r3
   15f42:	2308      	movs	r3, #8
   15f44:	f7ff f834 	bl	14fb0 <xor>
	xor(key, owfY, tmpK, 8);
   15f48:	f107 031c 	add.w	r3, r7, #28
   15f4c:	6878      	ldr	r0, [r7, #4]
   15f4e:	69b9      	ldr	r1, [r7, #24]
   15f50:	461a      	mov	r2, r3
   15f52:	2308      	movs	r3, #8
   15f54:	f7ff f82c 	bl	14fb0 <xor>
	stdParity(tmpK, 8, 8);
   15f58:	f107 031c 	add.w	r3, r7, #28
   15f5c:	4618      	mov	r0, r3
   15f5e:	2108      	movs	r1, #8
   15f60:	2208      	movs	r2, #8
   15f62:	f7ff f85d 	bl	15020 <stdParity>
	stdDES(dst, tmpD, tmpK);
   15f66:	f107 0224 	add.w	r2, r7, #36	; 0x24
   15f6a:	f107 031c 	add.w	r3, r7, #28
   15f6e:	68f8      	ldr	r0, [r7, #12]
   15f70:	4611      	mov	r1, r2
   15f72:	461a      	mov	r2, r3
   15f74:	f7ff fb7c 	bl	15670 <stdDES>
	xor(dst, tmpD, dst, 8);
   15f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
   15f7c:	68f8      	ldr	r0, [r7, #12]
   15f7e:	4619      	mov	r1, r3
   15f80:	68fa      	ldr	r2, [r7, #12]
   15f82:	2308      	movs	r3, #8
   15f84:	f7ff f814 	bl	14fb0 <xor>
	return 1;
   15f88:	2301      	movs	r3, #1
}
   15f8a:	4618      	mov	r0, r3
   15f8c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15f90:	f2c0 0302 	movt	r3, #2
   15f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15f96:	681b      	ldr	r3, [r3, #0]
   15f98:	429a      	cmp	r2, r3
   15f9a:	d001      	beq.n	15fa0 <stdOWF+0x94>
   15f9c:	f7f3 f802 	bl	8fa4 <__stack_chk_fail>
   15fa0:	f107 0730 	add.w	r7, r7, #48	; 0x30
   15fa4:	46bd      	mov	sp, r7
   15fa6:	bd80      	pop	{r7, pc}

00015fa8 <date_to_jdn>:
 * Returns:
 *     Julian Day Number
 *
 * Reference: Section 2.16.1 of version 2.9 of the FAQ.
 */
static int date_to_jdn(int year, int month, int day) {
   15fa8:	b580      	push	{r7, lr}
   15faa:	b088      	sub	sp, #32
   15fac:	af00      	add	r7, sp, #0
   15fae:	60f8      	str	r0, [r7, #12]
   15fb0:	60b9      	str	r1, [r7, #8]
   15fb2:	607a      	str	r2, [r7, #4]
   15fb4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   15fb8:	f2c0 0302 	movt	r3, #2
   15fbc:	681b      	ldr	r3, [r3, #0]
   15fbe:	61fb      	str	r3, [r7, #28]
	int a = (14 - month) / 12;
   15fc0:	68bb      	ldr	r3, [r7, #8]
   15fc2:	f1c3 020e 	rsb	r2, r3, #14
   15fc6:	f64a 23ab 	movw	r3, #43691	; 0xaaab
   15fca:	f6c2 23aa 	movt	r3, #10922	; 0x2aaa
   15fce:	fb83 0302 	smull	r0, r3, r3, r2
   15fd2:	1059      	asrs	r1, r3, #1
   15fd4:	17d3      	asrs	r3, r2, #31
   15fd6:	1acb      	subs	r3, r1, r3
   15fd8:	613b      	str	r3, [r7, #16]
	int y = year + 4800 - a;
   15fda:	68fb      	ldr	r3, [r7, #12]
   15fdc:	f503 5296 	add.w	r2, r3, #4800	; 0x12c0
   15fe0:	693b      	ldr	r3, [r7, #16]
   15fe2:	1ad3      	subs	r3, r2, r3
   15fe4:	617b      	str	r3, [r7, #20]
	int m = month + 12 * a - 3;
   15fe6:	693a      	ldr	r2, [r7, #16]
   15fe8:	4613      	mov	r3, r2
   15fea:	005b      	lsls	r3, r3, #1
   15fec:	189b      	adds	r3, r3, r2
   15fee:	009b      	lsls	r3, r3, #2
   15ff0:	461a      	mov	r2, r3
   15ff2:	68bb      	ldr	r3, [r7, #8]
   15ff4:	18d3      	adds	r3, r2, r3
   15ff6:	3b03      	subs	r3, #3
   15ff8:	61bb      	str	r3, [r7, #24]

	return day + (153 * m + 2) / 5 + y * 365 + y / 4 - y / 100 + y / 400 -
   15ffa:	69ba      	ldr	r2, [r7, #24]
   15ffc:	4613      	mov	r3, r2
   15ffe:	00db      	lsls	r3, r3, #3
   16000:	189b      	adds	r3, r3, r2
   16002:	011a      	lsls	r2, r3, #4
   16004:	189b      	adds	r3, r3, r2
   16006:	1c9a      	adds	r2, r3, #2
   16008:	f246 6367 	movw	r3, #26215	; 0x6667
   1600c:	f2c6 6366 	movt	r3, #26214	; 0x6666
   16010:	fb83 1302 	smull	r1, r3, r3, r2
   16014:	1059      	asrs	r1, r3, #1
   16016:	17d3      	asrs	r3, r2, #31
   16018:	1aca      	subs	r2, r1, r3
   1601a:	687b      	ldr	r3, [r7, #4]
   1601c:	18d2      	adds	r2, r2, r3
   1601e:	697b      	ldr	r3, [r7, #20]
   16020:	f240 116d 	movw	r1, #365	; 0x16d
   16024:	fb01 f303 	mul.w	r3, r1, r3
   16028:	18d2      	adds	r2, r2, r3
   1602a:	697b      	ldr	r3, [r7, #20]
   1602c:	2b00      	cmp	r3, #0
   1602e:	da00      	bge.n	16032 <date_to_jdn+0x8a>
   16030:	3303      	adds	r3, #3
   16032:	109b      	asrs	r3, r3, #2
   16034:	18d1      	adds	r1, r2, r3
   16036:	697a      	ldr	r2, [r7, #20]
   16038:	f248 531f 	movw	r3, #34079	; 0x851f
   1603c:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   16040:	fb83 0302 	smull	r0, r3, r3, r2
   16044:	1158      	asrs	r0, r3, #5
   16046:	17d3      	asrs	r3, r2, #31
   16048:	1ac3      	subs	r3, r0, r3
   1604a:	1ac9      	subs	r1, r1, r3
   1604c:	697a      	ldr	r2, [r7, #20]
   1604e:	f248 531f 	movw	r3, #34079	; 0x851f
   16052:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   16056:	fb83 0302 	smull	r0, r3, r3, r2
   1605a:	11d8      	asrs	r0, r3, #7
   1605c:	17d3      	asrs	r3, r2, #31
   1605e:	1ac3      	subs	r3, r0, r3
   16060:	18cb      	adds	r3, r1, r3
   16062:	f5a3 43fa 	sub.w	r3, r3, #32000	; 0x7d00
   16066:	3b2d      	subs	r3, #45	; 0x2d
			32045;
}
   16068:	4618      	mov	r0, r3
   1606a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1606e:	f2c0 0302 	movt	r3, #2
   16072:	69fa      	ldr	r2, [r7, #28]
   16074:	681b      	ldr	r3, [r3, #0]
   16076:	429a      	cmp	r2, r3
   16078:	d001      	beq.n	1607e <date_to_jdn+0xd6>
   1607a:	f7f2 ff93 	bl	8fa4 <__stack_chk_fail>
   1607e:	f107 0720 	add.w	r7, r7, #32
   16082:	46bd      	mov	sp, r7
   16084:	bd80      	pop	{r7, pc}
   16086:	bf00      	nop

00016088 <jdn_to_date>:
 *     Address of month (1..12)
 *     Address of day (1..31)
 *
 * Reference: Section 2.16.1 of version 2.9 of the FAQ.
 */
static void jdn_to_date(int JD, int *year, int *month, int *day) {
   16088:	b580      	push	{r7, lr}
   1608a:	b08c      	sub	sp, #48	; 0x30
   1608c:	af00      	add	r7, sp, #0
   1608e:	60f8      	str	r0, [r7, #12]
   16090:	60b9      	str	r1, [r7, #8]
   16092:	607a      	str	r2, [r7, #4]
   16094:	603b      	str	r3, [r7, #0]
   16096:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1609a:	f2c0 0302 	movt	r3, #2
   1609e:	681b      	ldr	r3, [r3, #0]
   160a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	int a, b, c, d, e, m;

	a = JD + 32044;
   160a2:	68fb      	ldr	r3, [r7, #12]
   160a4:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
   160a8:	332c      	adds	r3, #44	; 0x2c
   160aa:	617b      	str	r3, [r7, #20]
	b = (4 * a + 3) / 146097;
   160ac:	697b      	ldr	r3, [r7, #20]
   160ae:	009b      	lsls	r3, r3, #2
   160b0:	1cda      	adds	r2, r3, #3
   160b2:	f240 63bd 	movw	r3, #1725	; 0x6bd
   160b6:	f6c3 136b 	movt	r3, #14699	; 0x396b
   160ba:	fb83 0302 	smull	r0, r3, r3, r2
   160be:	13d9      	asrs	r1, r3, #15
   160c0:	17d3      	asrs	r3, r2, #31
   160c2:	1acb      	subs	r3, r1, r3
   160c4:	61bb      	str	r3, [r7, #24]
	c = a - (b * 146097) / 4;
   160c6:	69ba      	ldr	r2, [r7, #24]
   160c8:	f643 23b1 	movw	r3, #15025	; 0x3ab1
   160cc:	f2c0 0302 	movt	r3, #2
   160d0:	fb03 f302 	mul.w	r3, r3, r2
   160d4:	2b00      	cmp	r3, #0
   160d6:	da00      	bge.n	160da <jdn_to_date+0x52>
   160d8:	3303      	adds	r3, #3
   160da:	109b      	asrs	r3, r3, #2
   160dc:	697a      	ldr	r2, [r7, #20]
   160de:	1ad3      	subs	r3, r2, r3
   160e0:	61fb      	str	r3, [r7, #28]

	d = (4 * c + 3) / 1461;
   160e2:	69fb      	ldr	r3, [r7, #28]
   160e4:	009b      	lsls	r3, r3, #2
   160e6:	1cda      	adds	r2, r3, #3
   160e8:	f24b 0373 	movw	r3, #45171	; 0xb073
   160ec:	f2c1 636d 	movt	r3, #5741	; 0x166d
   160f0:	fb83 1302 	smull	r1, r3, r3, r2
   160f4:	11d9      	asrs	r1, r3, #7
   160f6:	17d3      	asrs	r3, r2, #31
   160f8:	1acb      	subs	r3, r1, r3
   160fa:	623b      	str	r3, [r7, #32]
	e = c - (1461 * d) / 4;
   160fc:	6a3b      	ldr	r3, [r7, #32]
   160fe:	f240 52b5 	movw	r2, #1461	; 0x5b5
   16102:	fb02 f303 	mul.w	r3, r2, r3
   16106:	2b00      	cmp	r3, #0
   16108:	da00      	bge.n	1610c <jdn_to_date+0x84>
   1610a:	3303      	adds	r3, #3
   1610c:	109b      	asrs	r3, r3, #2
   1610e:	69fa      	ldr	r2, [r7, #28]
   16110:	1ad3      	subs	r3, r2, r3
   16112:	627b      	str	r3, [r7, #36]	; 0x24
	m = (5 * e + 2) / 153;
   16114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16116:	4613      	mov	r3, r2
   16118:	009b      	lsls	r3, r3, #2
   1611a:	189b      	adds	r3, r3, r2
   1611c:	3302      	adds	r3, #2
   1611e:	f248 02d7 	movw	r2, #32983	; 0x80d7
   16122:	f2cd 622b 	movt	r2, #54827	; 0xd62b
   16126:	fb82 0203 	smull	r0, r2, r2, r3
   1612a:	18d2      	adds	r2, r2, r3
   1612c:	11d2      	asrs	r2, r2, #7
   1612e:	17db      	asrs	r3, r3, #31
   16130:	1ad3      	subs	r3, r2, r3
   16132:	62bb      	str	r3, [r7, #40]	; 0x28

	*day = e - (153 * m + 2) / 5 + 1;
   16134:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16136:	4613      	mov	r3, r2
   16138:	00db      	lsls	r3, r3, #3
   1613a:	189b      	adds	r3, r3, r2
   1613c:	011a      	lsls	r2, r3, #4
   1613e:	189b      	adds	r3, r3, r2
   16140:	1c9a      	adds	r2, r3, #2
   16142:	f246 6367 	movw	r3, #26215	; 0x6667
   16146:	f2c6 6366 	movt	r3, #26214	; 0x6666
   1614a:	fb83 1302 	smull	r1, r3, r3, r2
   1614e:	1059      	asrs	r1, r3, #1
   16150:	17d3      	asrs	r3, r2, #31
   16152:	1acb      	subs	r3, r1, r3
   16154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16156:	1ad3      	subs	r3, r2, r3
   16158:	1c5a      	adds	r2, r3, #1
   1615a:	683b      	ldr	r3, [r7, #0]
   1615c:	601a      	str	r2, [r3, #0]
	*month = m + 3 - 12 * (m / 10);
   1615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16160:	1cd9      	adds	r1, r3, #3
   16162:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16164:	f246 6367 	movw	r3, #26215	; 0x6667
   16168:	f2c6 6366 	movt	r3, #26214	; 0x6666
   1616c:	fb83 0302 	smull	r0, r3, r3, r2
   16170:	1098      	asrs	r0, r3, #2
   16172:	17d3      	asrs	r3, r2, #31
   16174:	1ac2      	subs	r2, r0, r3
   16176:	4613      	mov	r3, r2
   16178:	0092      	lsls	r2, r2, #2
   1617a:	1a9b      	subs	r3, r3, r2
   1617c:	009b      	lsls	r3, r3, #2
   1617e:	18ca      	adds	r2, r1, r3
   16180:	687b      	ldr	r3, [r7, #4]
   16182:	601a      	str	r2, [r3, #0]
	*year = b * 100 + d - 4800 + m / 10;
   16184:	69bb      	ldr	r3, [r7, #24]
   16186:	2264      	movs	r2, #100	; 0x64
   16188:	fb02 f203 	mul.w	r2, r2, r3
   1618c:	6a3b      	ldr	r3, [r7, #32]
   1618e:	18d3      	adds	r3, r2, r3
   16190:	f5a3 5196 	sub.w	r1, r3, #4800	; 0x12c0
   16194:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16196:	f246 6367 	movw	r3, #26215	; 0x6667
   1619a:	f2c6 6366 	movt	r3, #26214	; 0x6666
   1619e:	fb83 0302 	smull	r0, r3, r3, r2
   161a2:	1098      	asrs	r0, r3, #2
   161a4:	17d3      	asrs	r3, r2, #31
   161a6:	1ac3      	subs	r3, r0, r3
   161a8:	18ca      	adds	r2, r1, r3
   161aa:	68bb      	ldr	r3, [r7, #8]
   161ac:	601a      	str	r2, [r3, #0]
}
   161ae:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   161b2:	f2c0 0302 	movt	r3, #2
   161b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   161b8:	681b      	ldr	r3, [r3, #0]
   161ba:	429a      	cmp	r2, r3
   161bc:	d001      	beq.n	161c2 <jdn_to_date+0x13a>
   161be:	f7f2 fef1 	bl	8fa4 <__stack_chk_fail>
   161c2:	f107 0730 	add.w	r7, r7, #48	; 0x30
   161c6:	46bd      	mov	sp, r7
   161c8:	bd80      	pop	{r7, pc}
   161ca:	bf00      	nop

000161cc <ts2dt>:
 * \header sys\\pri.h
 * \source sys\\std.c
 * \test tcmp0000.c
 *
 */
void ts2dt(card ts, char *YYMMDDhhmmss) {
   161cc:	b590      	push	{r4, r7, lr}
   161ce:	b097      	sub	sp, #92	; 0x5c
   161d0:	af04      	add	r7, sp, #16
   161d2:	6078      	str	r0, [r7, #4]
   161d4:	6039      	str	r1, [r7, #0]
   161d6:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   161da:	f2c0 0302 	movt	r3, #2
   161de:	681b      	ldr	r3, [r3, #0]
   161e0:	647b      	str	r3, [r7, #68]	; 0x44
	card jdnUnix = 2440588;     //julian day number for 01/01/1970
   161e2:	f643 538c 	movw	r3, #15756	; 0x3d8c
   161e6:	f2c0 0325 	movt	r3, #37	; 0x25
   161ea:	61bb      	str	r3, [r7, #24]
	card spm = 60;              //seconds per minute
   161ec:	233c      	movs	r3, #60	; 0x3c
   161ee:	61fb      	str	r3, [r7, #28]
	card mph = 60;              //minutes per hour
   161f0:	233c      	movs	r3, #60	; 0x3c
   161f2:	623b      	str	r3, [r7, #32]
	card hpd = 24;              //hours per day
   161f4:	2318      	movs	r3, #24
   161f6:	627b      	str	r3, [r7, #36]	; 0x24
	card sph = spm * mph;       //seconds per hour
   161f8:	69fb      	ldr	r3, [r7, #28]
   161fa:	6a3a      	ldr	r2, [r7, #32]
   161fc:	fb02 f303 	mul.w	r3, r2, r3
   16200:	62bb      	str	r3, [r7, #40]	; 0x28
	card spd = sph * hpd;       //seconds per day
   16202:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16206:	fb02 f303 	mul.w	r3, r2, r3
   1620a:	62fb      	str	r3, [r7, #44]	; 0x2c
	card days, secs;
	int Y = 0;
   1620c:	2300      	movs	r3, #0
   1620e:	60fb      	str	r3, [r7, #12]
	int M = 0;
   16210:	2300      	movs	r3, #0
   16212:	613b      	str	r3, [r7, #16]
	int Da = 0;
   16214:	2300      	movs	r3, #0
   16216:	617b      	str	r3, [r7, #20]
	int h = 0;
   16218:	2300      	movs	r3, #0
   1621a:	633b      	str	r3, [r7, #48]	; 0x30
	int m = 0;
   1621c:	2300      	movs	r3, #0
   1621e:	637b      	str	r3, [r7, #52]	; 0x34
	int s = 0;
   16220:	2300      	movs	r3, #0
   16222:	63bb      	str	r3, [r7, #56]	; 0x38

	VERIFY(YYMMDDhhmmss);
	days = ts / spd;            //number of days since 01/01/1970
   16224:	6878      	ldr	r0, [r7, #4]
   16226:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   16228:	f00b ef88 	blx	2213c <__aeabi_uidiv>
   1622c:	4603      	mov	r3, r0
   1622e:	63fb      	str	r3, [r7, #60]	; 0x3c
	secs = ts % spd;            //number of seconds since midnight
   16230:	687b      	ldr	r3, [r7, #4]
   16232:	4618      	mov	r0, r3
   16234:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   16236:	f00c e878 	blx	22328 <__aeabi_uidivmod>
   1623a:	460b      	mov	r3, r1
   1623c:	643b      	str	r3, [r7, #64]	; 0x40

	jdn_to_date(jdnUnix + days, &Y, &M, &Da);
   1623e:	69ba      	ldr	r2, [r7, #24]
   16240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16242:	18d3      	adds	r3, r2, r3
   16244:	4618      	mov	r0, r3
   16246:	f107 010c 	add.w	r1, r7, #12
   1624a:	f107 0210 	add.w	r2, r7, #16
   1624e:	f107 0314 	add.w	r3, r7, #20
   16252:	f7ff ff19 	bl	16088 <jdn_to_date>
	h = secs / sph;
   16256:	6c38      	ldr	r0, [r7, #64]	; 0x40
   16258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1625a:	f00b ef70 	blx	2213c <__aeabi_uidiv>
   1625e:	4603      	mov	r3, r0
   16260:	633b      	str	r3, [r7, #48]	; 0x30
	secs %= sph;
   16262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16264:	4618      	mov	r0, r3
   16266:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   16268:	f00c e85e 	blx	22328 <__aeabi_uidivmod>
   1626c:	460b      	mov	r3, r1
   1626e:	643b      	str	r3, [r7, #64]	; 0x40
	m = secs / spm;
   16270:	6c38      	ldr	r0, [r7, #64]	; 0x40
   16272:	69f9      	ldr	r1, [r7, #28]
   16274:	f00b ef62 	blx	2213c <__aeabi_uidiv>
   16278:	4603      	mov	r3, r0
   1627a:	637b      	str	r3, [r7, #52]	; 0x34
	s = secs % spm;
   1627c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1627e:	4618      	mov	r0, r3
   16280:	69f9      	ldr	r1, [r7, #28]
   16282:	f00c e852 	blx	22328 <__aeabi_uidivmod>
   16286:	460b      	mov	r3, r1
   16288:	63bb      	str	r3, [r7, #56]	; 0x38

	Telium_Sprintf(YYMMDDhhmmss, "%02d%02d%02d%02d%02d%02d", Y % 100, M, Da, h, m, s);
   1628a:	68fa      	ldr	r2, [r7, #12]
   1628c:	f248 531f 	movw	r3, #34079	; 0x851f
   16290:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   16294:	fb83 1302 	smull	r1, r3, r3, r2
   16298:	1159      	asrs	r1, r3, #5
   1629a:	17d3      	asrs	r3, r2, #31
   1629c:	1acb      	subs	r3, r1, r3
   1629e:	2164      	movs	r1, #100	; 0x64
   162a0:	fb01 f303 	mul.w	r3, r1, r3
   162a4:	1ad3      	subs	r3, r2, r3
   162a6:	693c      	ldr	r4, [r7, #16]
   162a8:	697a      	ldr	r2, [r7, #20]
   162aa:	9200      	str	r2, [sp, #0]
   162ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   162ae:	9201      	str	r2, [sp, #4]
   162b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   162b2:	9202      	str	r2, [sp, #8]
   162b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   162b6:	9203      	str	r2, [sp, #12]
   162b8:	6838      	ldr	r0, [r7, #0]
   162ba:	f644 117c 	movw	r1, #18812	; 0x497c
   162be:	f2c0 0102 	movt	r1, #2
   162c2:	461a      	mov	r2, r3
   162c4:	4623      	mov	r3, r4
   162c6:	f00a f9f9 	bl	206bc <Telium_Sprintf>

}
   162ca:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   162ce:	f2c0 0302 	movt	r3, #2
   162d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   162d4:	681b      	ldr	r3, [r3, #0]
   162d6:	429a      	cmp	r2, r3
   162d8:	d001      	beq.n	162de <ts2dt+0x112>
   162da:	f7f2 fe63 	bl	8fa4 <__stack_chk_fail>
   162de:	f107 074c 	add.w	r7, r7, #76	; 0x4c
   162e2:	46bd      	mov	sp, r7
   162e4:	bd90      	pop	{r4, r7, pc}
   162e6:	bf00      	nop

000162e8 <dt2ts>:
 * \header sys\\pri.h
 * \source sys\\std.c
 * \test tcmp0000.c
 *
 */
card dt2ts(const char *YYMMDDhhmmss) {
   162e8:	b580      	push	{r7, lr}
   162ea:	b094      	sub	sp, #80	; 0x50
   162ec:	af00      	add	r7, sp, #0
   162ee:	6078      	str	r0, [r7, #4]
   162f0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   162f4:	f2c0 0302 	movt	r3, #2
   162f8:	681b      	ldr	r3, [r3, #0]
   162fa:	64fb      	str	r3, [r7, #76]	; 0x4c
	int ret;
	card Y, M, Da, h, m, s;
	card days, secs;
	const char *ptr;
	card jdnUnix = 2440588;     //julian day number for 01/01/1970
   162fc:	f643 538c 	movw	r3, #15756	; 0x3d8c
   16300:	f2c0 0325 	movt	r3, #37	; 0x25
   16304:	627b      	str	r3, [r7, #36]	; 0x24
	card spm = 60;              //seconds per minute
   16306:	233c      	movs	r3, #60	; 0x3c
   16308:	62bb      	str	r3, [r7, #40]	; 0x28
	card mph = 60;              //minutes per hour
   1630a:	233c      	movs	r3, #60	; 0x3c
   1630c:	62fb      	str	r3, [r7, #44]	; 0x2c
	card hpd = 24;              //hours per day
   1630e:	2318      	movs	r3, #24
   16310:	633b      	str	r3, [r7, #48]	; 0x30
	card sph = spm * mph;       //seconds per hour
   16312:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16316:	fb02 f303 	mul.w	r3, r2, r3
   1631a:	637b      	str	r3, [r7, #52]	; 0x34
	card spd = sph * hpd;       //seconds per day
   1631c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1631e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16320:	fb02 f303 	mul.w	r3, r2, r3
   16324:	63bb      	str	r3, [r7, #56]	; 0x38

	VERIFY(YYMMDDhhmmss);

	ptr = YYMMDDhhmmss;
   16326:	687b      	ldr	r3, [r7, #4]
   16328:	63fb      	str	r3, [r7, #60]	; 0x3c
	dec2num(&Y, ptr, 2);
   1632a:	f107 030c 	add.w	r3, r7, #12
   1632e:	4618      	mov	r0, r3
   16330:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   16332:	2202      	movs	r2, #2
   16334:	f7fc fa56 	bl	127e4 <dec2num>
	ptr += 2;
   16338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1633a:	3302      	adds	r3, #2
   1633c:	63fb      	str	r3, [r7, #60]	; 0x3c
	dec2num(&M, ptr, 2);
   1633e:	f107 0310 	add.w	r3, r7, #16
   16342:	4618      	mov	r0, r3
   16344:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   16346:	2202      	movs	r2, #2
   16348:	f7fc fa4c 	bl	127e4 <dec2num>
	ptr += 2;
   1634c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1634e:	3302      	adds	r3, #2
   16350:	63fb      	str	r3, [r7, #60]	; 0x3c
	dec2num(&Da, ptr, 2);
   16352:	f107 0314 	add.w	r3, r7, #20
   16356:	4618      	mov	r0, r3
   16358:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1635a:	2202      	movs	r2, #2
   1635c:	f7fc fa42 	bl	127e4 <dec2num>
	ptr += 2;
   16360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16362:	3302      	adds	r3, #2
   16364:	63fb      	str	r3, [r7, #60]	; 0x3c
	dec2num(&h, ptr, 2);
   16366:	f107 0318 	add.w	r3, r7, #24
   1636a:	4618      	mov	r0, r3
   1636c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1636e:	2202      	movs	r2, #2
   16370:	f7fc fa38 	bl	127e4 <dec2num>
	ptr += 2;
   16374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16376:	3302      	adds	r3, #2
   16378:	63fb      	str	r3, [r7, #60]	; 0x3c
	dec2num(&m, ptr, 2);
   1637a:	f107 031c 	add.w	r3, r7, #28
   1637e:	4618      	mov	r0, r3
   16380:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   16382:	2202      	movs	r2, #2
   16384:	f7fc fa2e 	bl	127e4 <dec2num>
	ptr += 2;
   16388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1638a:	3302      	adds	r3, #2
   1638c:	63fb      	str	r3, [r7, #60]	; 0x3c
	dec2num(&s, ptr, 2);
   1638e:	f107 0320 	add.w	r3, r7, #32
   16392:	4618      	mov	r0, r3
   16394:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   16396:	2202      	movs	r2, #2
   16398:	f7fc fa24 	bl	127e4 <dec2num>

	if(Y > 70)
   1639c:	68fb      	ldr	r3, [r7, #12]
   1639e:	2b46      	cmp	r3, #70	; 0x46
   163a0:	d904      	bls.n	163ac <dt2ts+0xc4>
		Y += 1900;
   163a2:	68fb      	ldr	r3, [r7, #12]
   163a4:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   163a8:	60fb      	str	r3, [r7, #12]
   163aa:	e003      	b.n	163b4 <dt2ts+0xcc>
	else
		Y += 2000;
   163ac:	68fb      	ldr	r3, [r7, #12]
   163ae:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
   163b2:	60fb      	str	r3, [r7, #12]
	days = date_to_jdn(Y, M, Da);
   163b4:	68fb      	ldr	r3, [r7, #12]
   163b6:	4619      	mov	r1, r3
   163b8:	693b      	ldr	r3, [r7, #16]
   163ba:	461a      	mov	r2, r3
   163bc:	697b      	ldr	r3, [r7, #20]
   163be:	4608      	mov	r0, r1
   163c0:	4611      	mov	r1, r2
   163c2:	461a      	mov	r2, r3
   163c4:	f7ff fdf0 	bl	15fa8 <date_to_jdn>
   163c8:	4603      	mov	r3, r0
   163ca:	643b      	str	r3, [r7, #64]	; 0x40
	VERIFY(days >= jdnUnix);
	days -= jdnUnix;
   163cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   163ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   163d0:	1ad3      	subs	r3, r2, r3
   163d2:	643b      	str	r3, [r7, #64]	; 0x40
	secs = s + m * spm + h * sph;
   163d4:	69fb      	ldr	r3, [r7, #28]
   163d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   163d8:	fb02 f203 	mul.w	r2, r2, r3
   163dc:	69bb      	ldr	r3, [r7, #24]
   163de:	6b79      	ldr	r1, [r7, #52]	; 0x34
   163e0:	fb01 f303 	mul.w	r3, r1, r3
   163e4:	18d2      	adds	r2, r2, r3
   163e6:	6a3b      	ldr	r3, [r7, #32]
   163e8:	18d3      	adds	r3, r2, r3
   163ea:	647b      	str	r3, [r7, #68]	; 0x44
	ret = days * spd + secs;
   163ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   163ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
   163f0:	fb02 f203 	mul.w	r2, r2, r3
   163f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   163f6:	18d3      	adds	r3, r2, r3
   163f8:	64bb      	str	r3, [r7, #72]	; 0x48

	return ret;
   163fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
   163fc:	4618      	mov	r0, r3
   163fe:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   16402:	f2c0 0302 	movt	r3, #2
   16406:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   16408:	681b      	ldr	r3, [r3, #0]
   1640a:	429a      	cmp	r2, r3
   1640c:	d001      	beq.n	16412 <dt2ts+0x12a>
   1640e:	f7f2 fdc9 	bl	8fa4 <__stack_chk_fail>
   16412:	f107 0750 	add.w	r7, r7, #80	; 0x50
   16416:	46bd      	mov	sp, r7
   16418:	bd80      	pop	{r7, pc}
   1641a:	bf00      	nop

0001641c <count_chars>:
 * This function counts the number occurrence of certain characters in a string
 * @param string
 * @param ch
 * @return the counts
 */
int count_chars(const char* string, char ch){
   1641c:	b580      	push	{r7, lr}
   1641e:	b086      	sub	sp, #24
   16420:	af00      	add	r7, sp, #0
   16422:	6078      	str	r0, [r7, #4]
   16424:	460b      	mov	r3, r1
   16426:	70fb      	strb	r3, [r7, #3]
   16428:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1642c:	f2c0 0302 	movt	r3, #2
   16430:	681b      	ldr	r3, [r3, #0]
   16432:	617b      	str	r3, [r7, #20]
	int count = 0;
   16434:	2300      	movs	r3, #0
   16436:	60bb      	str	r3, [r7, #8]

	// We are computing the length once at this point
	// because it is a relatively lengthy operation,
	// and we don't want to have to compute it anew
	// every time the i < length condition is checked.
	int length = strlen(string);
   16438:	6878      	ldr	r0, [r7, #4]
   1643a:	f7f2 ec24 	blx	8c84 <_init+0x124>
   1643e:	4603      	mov	r3, r0
   16440:	613b      	str	r3, [r7, #16]

	for (i = 0; i < length; i++) {
   16442:	2300      	movs	r3, #0
   16444:	60fb      	str	r3, [r7, #12]
   16446:	e00c      	b.n	16462 <count_chars+0x46>
		if (string[i] == ch) {
   16448:	68fb      	ldr	r3, [r7, #12]
   1644a:	687a      	ldr	r2, [r7, #4]
   1644c:	18d3      	adds	r3, r2, r3
   1644e:	781b      	ldrb	r3, [r3, #0]
   16450:	78fa      	ldrb	r2, [r7, #3]
   16452:	429a      	cmp	r2, r3
   16454:	d102      	bne.n	1645c <count_chars+0x40>
			count++;
   16456:	68bb      	ldr	r3, [r7, #8]
   16458:	3301      	adds	r3, #1
   1645a:	60bb      	str	r3, [r7, #8]
	// because it is a relatively lengthy operation,
	// and we don't want to have to compute it anew
	// every time the i < length condition is checked.
	int length = strlen(string);

	for (i = 0; i < length; i++) {
   1645c:	68fb      	ldr	r3, [r7, #12]
   1645e:	3301      	adds	r3, #1
   16460:	60fb      	str	r3, [r7, #12]
   16462:	68fa      	ldr	r2, [r7, #12]
   16464:	693b      	ldr	r3, [r7, #16]
   16466:	429a      	cmp	r2, r3
   16468:	dbee      	blt.n	16448 <count_chars+0x2c>
		if (string[i] == ch) {
			count++;
		}
	}

	return count;
   1646a:	68bb      	ldr	r3, [r7, #8]
}
   1646c:	4618      	mov	r0, r3
   1646e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   16472:	f2c0 0302 	movt	r3, #2
   16476:	697a      	ldr	r2, [r7, #20]
   16478:	681b      	ldr	r3, [r3, #0]
   1647a:	429a      	cmp	r2, r3
   1647c:	d001      	beq.n	16482 <count_chars+0x66>
   1647e:	f7f2 fd91 	bl	8fa4 <__stack_chk_fail>
   16482:	f107 0718 	add.w	r7, r7, #24
   16486:	46bd      	mov	sp, r7
   16488:	bd80      	pop	{r7, pc}
   1648a:	bf00      	nop

0001648c <begKey>:
 *  - negative if the input key is out of space
 *
 * Used by other map functions to identify a data structure which the
 * data element belongs to
 */
int begKey(word key){ //find starting sentinel of key subspace
   1648c:	b580      	push	{r7, lr}
   1648e:	b084      	sub	sp, #16
   16490:	af00      	add	r7, sp, #0
   16492:	4603      	mov	r3, r0
   16494:	80fb      	strh	r3, [r7, #6]
   16496:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1649a:	f2c0 0302 	movt	r3, #2
   1649e:	681b      	ldr	r3, [r3, #0]
   164a0:	60fb      	str	r3, [r7, #12]
	if(isSorted(appBeg,key,appEnd)) return appBeg; //application parameters record
   164a2:	88fb      	ldrh	r3, [r7, #6]
   164a4:	2001      	movs	r0, #1
   164a6:	4619      	mov	r1, r3
   164a8:	2220      	movs	r2, #32
   164aa:	f7fe f91d 	bl	146e8 <isSorted>
   164ae:	4603      	mov	r3, r0
   164b0:	2b00      	cmp	r3, #0
   164b2:	d001      	beq.n	164b8 <begKey+0x2c>
   164b4:	2301      	movs	r3, #1
   164b6:	e001      	b.n	164bc <begKey+0x30>
	//    if(isSorted(rptBeg,key,rptEnd)) return rptBeg; //receipt formatting strings
	//    if(isSorted(scrBeg,key,scrEnd)) return scrBeg; //user screen structure
	//    if(isSorted(regBeg,key,regEnd)) return regBeg; //registry record
	//	if(isSorted(traBeg,key,traEnd)) return traBeg; //transaction related data situated in volatile memory
	//	if(isSorted(emvBeg,key,emvEnd)) return emvBeg; //Get Data from the database Emv SQLITE table
	return -1;
   164b8:	f04f 33ff 	mov.w	r3, #4294967295
}
   164bc:	4618      	mov	r0, r3
   164be:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   164c2:	f2c0 0302 	movt	r3, #2
   164c6:	68fa      	ldr	r2, [r7, #12]
   164c8:	681b      	ldr	r3, [r3, #0]
   164ca:	429a      	cmp	r2, r3
   164cc:	d001      	beq.n	164d2 <begKey+0x46>
   164ce:	f7f2 fd69 	bl	8fa4 <__stack_chk_fail>
   164d2:	f107 0710 	add.w	r7, r7, #16
   164d6:	46bd      	mov	sp, r7
   164d8:	bd80      	pop	{r7, pc}
   164da:	bf00      	nop

000164dc <mapGet>:
 *  - mapRecGet()
 *  - mapPut()
 *  - mapMove()
 */
int beg;
int mapGet(word key,void *ptr,word len){
   164dc:	b580      	push	{r7, lr}
   164de:	b084      	sub	sp, #16
   164e0:	af00      	add	r7, sp, #0
   164e2:	6039      	str	r1, [r7, #0]
   164e4:	4613      	mov	r3, r2
   164e6:	4602      	mov	r2, r0
   164e8:	80fa      	strh	r2, [r7, #6]
   164ea:	80bb      	strh	r3, [r7, #4]
   164ec:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   164f0:	f2c0 0302 	movt	r3, #2
   164f4:	681b      	ldr	r3, [r3, #0]
   164f6:	60fb      	str	r3, [r7, #12]
	VERIFY(ptr);
	VERIFY(isSorted(keyBeg,key,keyEnd)); //TODO: KevCode - Assertion fails
   164f8:	88fb      	ldrh	r3, [r7, #6]
   164fa:	2000      	movs	r0, #0
   164fc:	4619      	mov	r1, r3
   164fe:	2221      	movs	r2, #33	; 0x21
   16500:	f7fe f8f2 	bl	146e8 <isSorted>

	beg = begKey(key);
   16504:	88fb      	ldrh	r3, [r7, #6]
   16506:	4618      	mov	r0, r3
   16508:	f7ff ffc0 	bl	1648c <begKey>
   1650c:	4602      	mov	r2, r0
   1650e:	f642 63ac 	movw	r3, #11948	; 0x2eac
   16512:	f2c0 0304 	movt	r3, #4
   16516:	601a      	str	r2, [r3, #0]
	VERIFY(beg>0);

	//	key-= beg+1;
	switch(beg){
   16518:	f642 63ac 	movw	r3, #11948	; 0x2eac
   1651c:	f2c0 0304 	movt	r3, #4
   16520:	681b      	ldr	r3, [r3, #0]
   16522:	2b01      	cmp	r3, #1
   16524:	d108      	bne.n	16538 <mapGet+0x5c>
	case appBeg: return appGet(key,ptr,len);
   16526:	88fa      	ldrh	r2, [r7, #6]
   16528:	88bb      	ldrh	r3, [r7, #4]
   1652a:	4610      	mov	r0, r2
   1652c:	6839      	ldr	r1, [r7, #0]
   1652e:	461a      	mov	r2, r3
   16530:	f7f9 f8c4 	bl	f6bc <appGet>
   16534:	4603      	mov	r3, r0
   16536:	e002      	b.n	1653e <mapGet+0x62>
	//        case rptBeg: return mapTabGet(key,ptr,len);
	//        case scrBeg: return mapRecGet(key,ptr,len);
	//        case regBeg: return mapRecGet(key,ptr,len);
//	case traBeg: return traGet(key,ptr,len);
//	case emvBeg: return mapGet_AID_Data(key, ptr);
	default: break;
   16538:	bf00      	nop
	}
	return -1;
   1653a:	f04f 33ff 	mov.w	r3, #4294967295
}
   1653e:	4618      	mov	r0, r3
   16540:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   16544:	f2c0 0302 	movt	r3, #2
   16548:	68fa      	ldr	r2, [r7, #12]
   1654a:	681b      	ldr	r3, [r3, #0]
   1654c:	429a      	cmp	r2, r3
   1654e:	d001      	beq.n	16554 <mapGet+0x78>
   16550:	f7f2 fd28 	bl	8fa4 <__stack_chk_fail>
   16554:	f107 0710 	add.w	r7, r7, #16
   16558:	46bd      	mov	sp, r7
   1655a:	bd80      	pop	{r7, pc}

0001655c <mapDatLen>:


word mapDatLen(word key){
   1655c:	b580      	push	{r7, lr}
   1655e:	b084      	sub	sp, #16
   16560:	af00      	add	r7, sp, #0
   16562:	4603      	mov	r3, r0
   16564:	80fb      	strh	r3, [r7, #6]
   16566:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1656a:	f2c0 0302 	movt	r3, #2
   1656e:	681b      	ldr	r3, [r3, #0]
   16570:	60fb      	str	r3, [r7, #12]
	int beg;
	VERIFY(isSorted(keyBeg,key,keyEnd));  //TODO: Kevcode Assertion fails
   16572:	88fb      	ldrh	r3, [r7, #6]
   16574:	2000      	movs	r0, #0
   16576:	4619      	mov	r1, r3
   16578:	2221      	movs	r2, #33	; 0x21
   1657a:	f7fe f8b5 	bl	146e8 <isSorted>

	beg= begKey(key);
   1657e:	88fb      	ldrh	r3, [r7, #6]
   16580:	4618      	mov	r0, r3
   16582:	f7ff ff83 	bl	1648c <begKey>
   16586:	60b8      	str	r0, [r7, #8]
	VERIFY(beg>0);

	switch(beg){
   16588:	68bb      	ldr	r3, [r7, #8]
   1658a:	2b01      	cmp	r3, #1
   1658c:	d105      	bne.n	1659a <mapDatLen+0x3e>
	case appBeg: return appLen(key);
   1658e:	88fb      	ldrh	r3, [r7, #6]
   16590:	4618      	mov	r0, r3
   16592:	f7f8 ff4d 	bl	f430 <appLen>
   16596:	4603      	mov	r3, r0
   16598:	e002      	b.n	165a0 <mapDatLen+0x44>
//	case traBeg: return traLen(key);
	default: break;
   1659a:	bf00      	nop
	}
	return -1;
   1659c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
   165a0:	4618      	mov	r0, r3
   165a2:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   165a6:	f2c0 0302 	movt	r3, #2
   165aa:	68fa      	ldr	r2, [r7, #12]
   165ac:	681b      	ldr	r3, [r3, #0]
   165ae:	429a      	cmp	r2, r3
   165b0:	d001      	beq.n	165b6 <mapDatLen+0x5a>
   165b2:	f7f2 fcf7 	bl	8fa4 <__stack_chk_fail>
   165b6:	f107 0710 	add.w	r7, r7, #16
   165ba:	46bd      	mov	sp, r7
   165bc:	bd80      	pop	{r7, pc}
   165be:	bf00      	nop

000165c0 <mapPut>:
 *  - mapTabPut()
 *  - mapRecPut()
 *  - mapGet()
 *  - mapMove()
 */
int mapPut(word key,void *ptr,word len){
   165c0:	b580      	push	{r7, lr}
   165c2:	b084      	sub	sp, #16
   165c4:	af00      	add	r7, sp, #0
   165c6:	6039      	str	r1, [r7, #0]
   165c8:	4613      	mov	r3, r2
   165ca:	4602      	mov	r2, r0
   165cc:	80fa      	strh	r2, [r7, #6]
   165ce:	80bb      	strh	r3, [r7, #4]
   165d0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   165d4:	f2c0 0302 	movt	r3, #2
   165d8:	681b      	ldr	r3, [r3, #0]
   165da:	60fb      	str	r3, [r7, #12]
	int beg;
	VERIFY(ptr);
	VERIFY(isSorted(keyBeg,key,keyEnd));  //TODO: Kevcode Assertion fails
   165dc:	88fb      	ldrh	r3, [r7, #6]
   165de:	2000      	movs	r0, #0
   165e0:	4619      	mov	r1, r3
   165e2:	2221      	movs	r2, #33	; 0x21
   165e4:	f7fe f880 	bl	146e8 <isSorted>

	beg= begKey(key);
   165e8:	88fb      	ldrh	r3, [r7, #6]
   165ea:	4618      	mov	r0, r3
   165ec:	f7ff ff4e 	bl	1648c <begKey>
   165f0:	60b8      	str	r0, [r7, #8]
	VERIFY(beg>0);
	//    key-= beg+1; // dont understand the use of this (KevCode)
	if(!len) len= strlen((char *)ptr);
   165f2:	88bb      	ldrh	r3, [r7, #4]
   165f4:	2b00      	cmp	r3, #0
   165f6:	d104      	bne.n	16602 <mapPut+0x42>
   165f8:	6838      	ldr	r0, [r7, #0]
   165fa:	f7f2 eb44 	blx	8c84 <_init+0x124>
   165fe:	4603      	mov	r3, r0
   16600:	80bb      	strh	r3, [r7, #4]

	if (len > mapDatLen(key)) {
   16602:	88fb      	ldrh	r3, [r7, #6]
   16604:	4618      	mov	r0, r3
   16606:	f7ff ffa9 	bl	1655c <mapDatLen>
   1660a:	4603      	mov	r3, r0
   1660c:	88ba      	ldrh	r2, [r7, #4]
   1660e:	429a      	cmp	r2, r3
   16610:	d905      	bls.n	1661e <mapPut+0x5e>
		len = mapDatLen(key);
   16612:	88fb      	ldrh	r3, [r7, #6]
   16614:	4618      	mov	r0, r3
   16616:	f7ff ffa1 	bl	1655c <mapDatLen>
   1661a:	4603      	mov	r3, r0
   1661c:	80bb      	strh	r3, [r7, #4]
	}

	switch(beg){
   1661e:	68bb      	ldr	r3, [r7, #8]
   16620:	2b01      	cmp	r3, #1
   16622:	d108      	bne.n	16636 <mapPut+0x76>
	case appBeg: return appPut(key,ptr,len);
   16624:	88fa      	ldrh	r2, [r7, #6]
   16626:	88bb      	ldrh	r3, [r7, #4]
   16628:	4610      	mov	r0, r2
   1662a:	6839      	ldr	r1, [r7, #0]
   1662c:	461a      	mov	r2, r3
   1662e:	f7f8 ffdd 	bl	f5ec <appPut>
   16632:	4603      	mov	r3, r0
   16634:	e002      	b.n	1663c <mapPut+0x7c>
	//        case rptBeg: return mapTabPut(key,ptr,len);
	//        case scrBeg: return mapRecPut(key,ptr,len);
	//        case regBeg: return mapRecPut(key,ptr,len);
//	case traBeg: return traPut(key,ptr,len);
//	case emvBeg: return len;// mapGet_AID_Data(key, ptr);
	default: break;
   16636:	bf00      	nop
	}
	return -1;
   16638:	f04f 33ff 	mov.w	r3, #4294967295
}
   1663c:	4618      	mov	r0, r3
   1663e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   16642:	f2c0 0302 	movt	r3, #2
   16646:	68fa      	ldr	r2, [r7, #12]
   16648:	681b      	ldr	r3, [r3, #0]
   1664a:	429a      	cmp	r2, r3
   1664c:	d001      	beq.n	16652 <mapPut+0x92>
   1664e:	f7f2 fca9 	bl	8fa4 <__stack_chk_fail>
   16652:	f107 0710 	add.w	r7, r7, #16
   16656:	46bd      	mov	sp, r7
   16658:	bd80      	pop	{r7, pc}
   1665a:	bf00      	nop

0001665c <yisleap>:


static int yisleap(int year) {
   1665c:	b580      	push	{r7, lr}
   1665e:	b084      	sub	sp, #16
   16660:	af00      	add	r7, sp, #0
   16662:	6078      	str	r0, [r7, #4]
   16664:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   16668:	f2c0 0302 	movt	r3, #2
   1666c:	681b      	ldr	r3, [r3, #0]
   1666e:	60fb      	str	r3, [r7, #12]
	return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
   16670:	687b      	ldr	r3, [r7, #4]
   16672:	f003 0303 	and.w	r3, r3, #3
   16676:	2b00      	cmp	r3, #0
   16678:	d10f      	bne.n	1669a <yisleap+0x3e>
   1667a:	687a      	ldr	r2, [r7, #4]
   1667c:	f248 531f 	movw	r3, #34079	; 0x851f
   16680:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   16684:	fb83 1302 	smull	r1, r3, r3, r2
   16688:	1159      	asrs	r1, r3, #5
   1668a:	17d3      	asrs	r3, r2, #31
   1668c:	1acb      	subs	r3, r1, r3
   1668e:	2164      	movs	r1, #100	; 0x64
   16690:	fb01 f303 	mul.w	r3, r1, r3
   16694:	1ad3      	subs	r3, r2, r3
   16696:	2b00      	cmp	r3, #0
   16698:	d110      	bne.n	166bc <yisleap+0x60>
   1669a:	687a      	ldr	r2, [r7, #4]
   1669c:	f248 531f 	movw	r3, #34079	; 0x851f
   166a0:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   166a4:	fb83 1302 	smull	r1, r3, r3, r2
   166a8:	11d9      	asrs	r1, r3, #7
   166aa:	17d3      	asrs	r3, r2, #31
   166ac:	1acb      	subs	r3, r1, r3
   166ae:	f44f 71c8 	mov.w	r1, #400	; 0x190
   166b2:	fb01 f303 	mul.w	r3, r1, r3
   166b6:	1ad3      	subs	r3, r2, r3
   166b8:	2b00      	cmp	r3, #0
   166ba:	d101      	bne.n	166c0 <yisleap+0x64>
   166bc:	2301      	movs	r3, #1
   166be:	e000      	b.n	166c2 <yisleap+0x66>
   166c0:	2300      	movs	r3, #0
}
   166c2:	4618      	mov	r0, r3
   166c4:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   166c8:	f2c0 0302 	movt	r3, #2
   166cc:	68fa      	ldr	r2, [r7, #12]
   166ce:	681b      	ldr	r3, [r3, #0]
   166d0:	429a      	cmp	r2, r3
   166d2:	d001      	beq.n	166d8 <yisleap+0x7c>
   166d4:	f7f2 fc66 	bl	8fa4 <__stack_chk_fail>
   166d8:	f107 0710 	add.w	r7, r7, #16
   166dc:	46bd      	mov	sp, r7
   166de:	bd80      	pop	{r7, pc}

000166e0 <get_yday>:

static int get_yday(int mon, int day, int year) {
   166e0:	b580      	push	{r7, lr}
   166e2:	b086      	sub	sp, #24
   166e4:	af00      	add	r7, sp, #0
   166e6:	60f8      	str	r0, [r7, #12]
   166e8:	60b9      	str	r1, [r7, #8]
   166ea:	607a      	str	r2, [r7, #4]
   166ec:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   166f0:	f2c0 0302 	movt	r3, #2
   166f4:	681b      	ldr	r3, [r3, #0]
   166f6:	617b      	str	r3, [r7, #20]
	static const int days[2][13] = {
			{0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334},
			{0, 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335}
	};
	int leap = yisleap(year);
   166f8:	6878      	ldr	r0, [r7, #4]
   166fa:	f7ff ffaf 	bl	1665c <yisleap>
   166fe:	6138      	str	r0, [r7, #16]

	return days[leap][mon] + day;
   16700:	f644 220c 	movw	r2, #18956	; 0x4a0c
   16704:	f2c0 0202 	movt	r2, #2
   16708:	6939      	ldr	r1, [r7, #16]
   1670a:	460b      	mov	r3, r1
   1670c:	005b      	lsls	r3, r3, #1
   1670e:	185b      	adds	r3, r3, r1
   16710:	009b      	lsls	r3, r3, #2
   16712:	185b      	adds	r3, r3, r1
   16714:	68f9      	ldr	r1, [r7, #12]
   16716:	185b      	adds	r3, r3, r1
   16718:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1671c:	68bb      	ldr	r3, [r7, #8]
   1671e:	18d3      	adds	r3, r2, r3
}
   16720:	4618      	mov	r0, r3
   16722:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   16726:	f2c0 0302 	movt	r3, #2
   1672a:	697a      	ldr	r2, [r7, #20]
   1672c:	681b      	ldr	r3, [r3, #0]
   1672e:	429a      	cmp	r2, r3
   16730:	d001      	beq.n	16736 <get_yday+0x56>
   16732:	f7f2 fc37 	bl	8fa4 <__stack_chk_fail>
   16736:	f107 0718 	add.w	r7, r7, #24
   1673a:	46bd      	mov	sp, r7
   1673c:	bd80      	pop	{r7, pc}
   1673e:	bf00      	nop

00016740 <getDateTime>:
 * \return non-negative value if OK; negative otherwise, Sagem terminals will not fail this function
 * \header sys\\sys.h
 * \source sys\\i32.c sys\\tlm.c
 * \test tcab0050.c
 */
int getDateTime(char *YYMMDDhhmmss) {
   16740:	b580      	push	{r7, lr}
   16742:	b096      	sub	sp, #88	; 0x58
   16744:	af04      	add	r7, sp, #16
   16746:	6078      	str	r0, [r7, #4]
   16748:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1674c:	f2c0 0302 	movt	r3, #2
   16750:	681b      	ldr	r3, [r3, #0]
   16752:	647b      	str	r3, [r7, #68]	; 0x44
	Telium_Date_t Date;
	int yr, mth, dy;
	int hr, min, sec;
	char DateTimeTra[lenDatTim +  5];

	memset(DateTimeTra, 0, sizeof(DateTimeTra));
   16754:	f107 0330 	add.w	r3, r7, #48	; 0x30
   16758:	4618      	mov	r0, r3
   1675a:	2100      	movs	r1, #0
   1675c:	2213      	movs	r2, #19
   1675e:	f7f2 ea2e 	blx	8bbc <_init+0x5c>

	VERIFY(YYMMDDhhmmss);

	Telium_Read_date (&Date);
   16762:	f107 0324 	add.w	r3, r7, #36	; 0x24
   16766:	4618      	mov	r0, r3
   16768:	f009 fdfc 	bl	20364 <Telium_Read_date>

	ldate = d_tolong(&Date);
   1676c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   16770:	4618      	mov	r0, r3
   16772:	f009 f803 	bl	1f77c <d_tolong>
   16776:	60b8      	str	r0, [r7, #8]
	VERIFY(ldate);

	dy = (Date.day[0] - '0') * 10 + Date.day[1] - '0';
   16778:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   1677c:	461a      	mov	r2, r3
   1677e:	4613      	mov	r3, r2
   16780:	009b      	lsls	r3, r3, #2
   16782:	189b      	adds	r3, r3, r2
   16784:	005b      	lsls	r3, r3, #1
   16786:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
   1678a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   1678e:	18d3      	adds	r3, r2, r3
   16790:	3b30      	subs	r3, #48	; 0x30
   16792:	60fb      	str	r3, [r7, #12]
	mth = (Date.month[0] - '0') * 10 + Date.month[1] - '0';
   16794:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   16798:	461a      	mov	r2, r3
   1679a:	4613      	mov	r3, r2
   1679c:	009b      	lsls	r3, r3, #2
   1679e:	189b      	adds	r3, r3, r2
   167a0:	005b      	lsls	r3, r3, #1
   167a2:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
   167a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   167aa:	18d3      	adds	r3, r2, r3
   167ac:	3b30      	subs	r3, #48	; 0x30
   167ae:	613b      	str	r3, [r7, #16]
	yr = (Date.year[0] - '0') * 10 + Date.year[1] - '0';
   167b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   167b4:	461a      	mov	r2, r3
   167b6:	4613      	mov	r3, r2
   167b8:	009b      	lsls	r3, r3, #2
   167ba:	189b      	adds	r3, r3, r2
   167bc:	005b      	lsls	r3, r3, #1
   167be:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
   167c2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
   167c6:	18d3      	adds	r3, r2, r3
   167c8:	3b30      	subs	r3, #48	; 0x30
   167ca:	617b      	str	r3, [r7, #20]

	hr = (Date.hour[0] - '0') * 10 + Date.hour[1] - '0';
   167cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   167d0:	461a      	mov	r2, r3
   167d2:	4613      	mov	r3, r2
   167d4:	009b      	lsls	r3, r3, #2
   167d6:	189b      	adds	r3, r3, r2
   167d8:	005b      	lsls	r3, r3, #1
   167da:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
   167de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   167e2:	18d3      	adds	r3, r2, r3
   167e4:	3b30      	subs	r3, #48	; 0x30
   167e6:	61bb      	str	r3, [r7, #24]
	min = (Date.minute[0] - '0') * 10 + Date.minute[1] - '0';
   167e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   167ec:	461a      	mov	r2, r3
   167ee:	4613      	mov	r3, r2
   167f0:	009b      	lsls	r3, r3, #2
   167f2:	189b      	adds	r3, r3, r2
   167f4:	005b      	lsls	r3, r3, #1
   167f6:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
   167fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   167fe:	18d3      	adds	r3, r2, r3
   16800:	3b30      	subs	r3, #48	; 0x30
   16802:	61fb      	str	r3, [r7, #28]
	sec = (Date.second[0] - '0') * 10 + Date.second[1] - '0';
   16804:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   16808:	461a      	mov	r2, r3
   1680a:	4613      	mov	r3, r2
   1680c:	009b      	lsls	r3, r3, #2
   1680e:	189b      	adds	r3, r3, r2
   16810:	005b      	lsls	r3, r3, #1
   16812:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
   16816:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1681a:	18d3      	adds	r3, r2, r3
   1681c:	3b30      	subs	r3, #48	; 0x30
   1681e:	623b      	str	r3, [r7, #32]

	Telium_Sprintf(YYMMDDhhmmss, "%02d%02d%02d%02d%02d%02d", yr, mth, dy, hr, min,sec);
   16820:	68fb      	ldr	r3, [r7, #12]
   16822:	9300      	str	r3, [sp, #0]
   16824:	69bb      	ldr	r3, [r7, #24]
   16826:	9301      	str	r3, [sp, #4]
   16828:	69fb      	ldr	r3, [r7, #28]
   1682a:	9302      	str	r3, [sp, #8]
   1682c:	6a3b      	ldr	r3, [r7, #32]
   1682e:	9303      	str	r3, [sp, #12]
   16830:	6878      	ldr	r0, [r7, #4]
   16832:	f644 117c 	movw	r1, #18812	; 0x497c
   16836:	f2c0 0102 	movt	r1, #2
   1683a:	697a      	ldr	r2, [r7, #20]
   1683c:	693b      	ldr	r3, [r7, #16]
   1683e:	f009 ff3d 	bl	206bc <Telium_Sprintf>
	Telium_Sprintf(DateTimeTra, "20%02d%02d%02d%02d%02d%02d", yr, mth, dy, hr, min,sec);
   16842:	f107 0330 	add.w	r3, r7, #48	; 0x30
   16846:	68fa      	ldr	r2, [r7, #12]
   16848:	9200      	str	r2, [sp, #0]
   1684a:	69ba      	ldr	r2, [r7, #24]
   1684c:	9201      	str	r2, [sp, #4]
   1684e:	69fa      	ldr	r2, [r7, #28]
   16850:	9202      	str	r2, [sp, #8]
   16852:	6a3a      	ldr	r2, [r7, #32]
   16854:	9203      	str	r2, [sp, #12]
   16856:	4618      	mov	r0, r3
   16858:	f644 1198 	movw	r1, #18840	; 0x4998
   1685c:	f2c0 0102 	movt	r1, #2
   16860:	697a      	ldr	r2, [r7, #20]
   16862:	693b      	ldr	r3, [r7, #16]
   16864:	f009 ff2a 	bl	206bc <Telium_Sprintf>
//	mapPut(traDatTim, DateTimeTra, 14);

	return get_yday(mth, dy, yr);
   16868:	6938      	ldr	r0, [r7, #16]
   1686a:	68f9      	ldr	r1, [r7, #12]
   1686c:	697a      	ldr	r2, [r7, #20]
   1686e:	f7ff ff37 	bl	166e0 <get_yday>
   16872:	4603      	mov	r3, r0
}
   16874:	4618      	mov	r0, r3
   16876:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1687a:	f2c0 0302 	movt	r3, #2
   1687e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   16880:	681b      	ldr	r3, [r3, #0]
   16882:	429a      	cmp	r2, r3
   16884:	d001      	beq.n	1688a <getDateTime+0x14a>
   16886:	f7f2 fb8d 	bl	8fa4 <__stack_chk_fail>
   1688a:	f107 0748 	add.w	r7, r7, #72	; 0x48
   1688e:	46bd      	mov	sp, r7
   16890:	bd80      	pop	{r7, pc}
   16892:	bf00      	nop

00016894 <getMonthName>:

static void getMonthName(card monthNumber,char * monthname){
   16894:	b580      	push	{r7, lr}
   16896:	b084      	sub	sp, #16
   16898:	af00      	add	r7, sp, #0
   1689a:	6078      	str	r0, [r7, #4]
   1689c:	6039      	str	r1, [r7, #0]
   1689e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   168a2:	f2c0 0302 	movt	r3, #2
   168a6:	681b      	ldr	r3, [r3, #0]
   168a8:	60fb      	str	r3, [r7, #12]
	switch (monthNumber) {
   168aa:	687b      	ldr	r3, [r7, #4]
   168ac:	3b01      	subs	r3, #1
   168ae:	2b0b      	cmp	r3, #11
   168b0:	d87a      	bhi.n	169a8 <getMonthName+0x114>
   168b2:	a201      	add	r2, pc, #4	; (adr r2, 168b8 <getMonthName+0x24>)
   168b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   168b8:	000168e9 	.word	0x000168e9
   168bc:	000168f9 	.word	0x000168f9
   168c0:	00016909 	.word	0x00016909
   168c4:	00016919 	.word	0x00016919
   168c8:	00016929 	.word	0x00016929
   168cc:	00016939 	.word	0x00016939
   168d0:	00016949 	.word	0x00016949
   168d4:	00016959 	.word	0x00016959
   168d8:	00016969 	.word	0x00016969
   168dc:	00016979 	.word	0x00016979
   168e0:	00016989 	.word	0x00016989
   168e4:	00016999 	.word	0x00016999
	case 1:
		strcpy(monthname,"JAN");
   168e8:	683a      	ldr	r2, [r7, #0]
   168ea:	f644 13b4 	movw	r3, #18868	; 0x49b4
   168ee:	f2c0 0302 	movt	r3, #2
   168f2:	6818      	ldr	r0, [r3, #0]
   168f4:	6010      	str	r0, [r2, #0]
		break;
   168f6:	e057      	b.n	169a8 <getMonthName+0x114>
	case 2:
		strcpy(monthname,"FEB");
   168f8:	683a      	ldr	r2, [r7, #0]
   168fa:	f644 13b8 	movw	r3, #18872	; 0x49b8
   168fe:	f2c0 0302 	movt	r3, #2
   16902:	6818      	ldr	r0, [r3, #0]
   16904:	6010      	str	r0, [r2, #0]
		break;
   16906:	e04f      	b.n	169a8 <getMonthName+0x114>
	case 3:
		strcpy(monthname,"MAR");
   16908:	683a      	ldr	r2, [r7, #0]
   1690a:	f644 13bc 	movw	r3, #18876	; 0x49bc
   1690e:	f2c0 0302 	movt	r3, #2
   16912:	6818      	ldr	r0, [r3, #0]
   16914:	6010      	str	r0, [r2, #0]
		break;
   16916:	e047      	b.n	169a8 <getMonthName+0x114>
	case 4:
		strcpy(monthname,"APR");
   16918:	683a      	ldr	r2, [r7, #0]
   1691a:	f644 13c0 	movw	r3, #18880	; 0x49c0
   1691e:	f2c0 0302 	movt	r3, #2
   16922:	6818      	ldr	r0, [r3, #0]
   16924:	6010      	str	r0, [r2, #0]
		break;
   16926:	e03f      	b.n	169a8 <getMonthName+0x114>
	case 5:
		strcpy(monthname,"MAY");
   16928:	683a      	ldr	r2, [r7, #0]
   1692a:	f644 13c4 	movw	r3, #18884	; 0x49c4
   1692e:	f2c0 0302 	movt	r3, #2
   16932:	6818      	ldr	r0, [r3, #0]
   16934:	6010      	str	r0, [r2, #0]
		break;
   16936:	e037      	b.n	169a8 <getMonthName+0x114>
	case 6:
		strcpy(monthname,"JUN");
   16938:	683a      	ldr	r2, [r7, #0]
   1693a:	f644 13c8 	movw	r3, #18888	; 0x49c8
   1693e:	f2c0 0302 	movt	r3, #2
   16942:	6818      	ldr	r0, [r3, #0]
   16944:	6010      	str	r0, [r2, #0]
		break;
   16946:	e02f      	b.n	169a8 <getMonthName+0x114>
	case 7:
		strcpy(monthname,"JUL");
   16948:	683a      	ldr	r2, [r7, #0]
   1694a:	f644 13cc 	movw	r3, #18892	; 0x49cc
   1694e:	f2c0 0302 	movt	r3, #2
   16952:	6818      	ldr	r0, [r3, #0]
   16954:	6010      	str	r0, [r2, #0]
		break;
   16956:	e027      	b.n	169a8 <getMonthName+0x114>
	case 8:
		strcpy(monthname,"AUG");
   16958:	683a      	ldr	r2, [r7, #0]
   1695a:	f644 13d0 	movw	r3, #18896	; 0x49d0
   1695e:	f2c0 0302 	movt	r3, #2
   16962:	6818      	ldr	r0, [r3, #0]
   16964:	6010      	str	r0, [r2, #0]
		break;
   16966:	e01f      	b.n	169a8 <getMonthName+0x114>
	case 9:
		strcpy(monthname,"SEP");
   16968:	683a      	ldr	r2, [r7, #0]
   1696a:	f644 13d4 	movw	r3, #18900	; 0x49d4
   1696e:	f2c0 0302 	movt	r3, #2
   16972:	6818      	ldr	r0, [r3, #0]
   16974:	6010      	str	r0, [r2, #0]
		break;
   16976:	e017      	b.n	169a8 <getMonthName+0x114>
	case 10:
		strcpy(monthname,"OCT");
   16978:	683a      	ldr	r2, [r7, #0]
   1697a:	f644 13d8 	movw	r3, #18904	; 0x49d8
   1697e:	f2c0 0302 	movt	r3, #2
   16982:	6818      	ldr	r0, [r3, #0]
   16984:	6010      	str	r0, [r2, #0]
		break;
   16986:	e00f      	b.n	169a8 <getMonthName+0x114>
	case 11:
		strcpy(monthname,"NOV");
   16988:	683a      	ldr	r2, [r7, #0]
   1698a:	f644 13dc 	movw	r3, #18908	; 0x49dc
   1698e:	f2c0 0302 	movt	r3, #2
   16992:	6818      	ldr	r0, [r3, #0]
   16994:	6010      	str	r0, [r2, #0]
		break;
   16996:	e007      	b.n	169a8 <getMonthName+0x114>
	case 12:
		strcpy(monthname,"DEC");
   16998:	683a      	ldr	r2, [r7, #0]
   1699a:	f644 13e0 	movw	r3, #18912	; 0x49e0
   1699e:	f2c0 0302 	movt	r3, #2
   169a2:	6818      	ldr	r0, [r3, #0]
   169a4:	6010      	str	r0, [r2, #0]
		break;
   169a6:	bf00      	nop
	}
}
   169a8:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   169ac:	f2c0 0302 	movt	r3, #2
   169b0:	68fa      	ldr	r2, [r7, #12]
   169b2:	681b      	ldr	r3, [r3, #0]
   169b4:	429a      	cmp	r2, r3
   169b6:	d001      	beq.n	169bc <getMonthName+0x128>
   169b8:	f7f2 faf4 	bl	8fa4 <__stack_chk_fail>
   169bc:	f107 0710 	add.w	r7, r7, #16
   169c0:	46bd      	mov	sp, r7
   169c2:	bd80      	pop	{r7, pc}

000169c4 <strFormatDatTim>:

int strFormatDatTim(word key){
   169c4:	b580      	push	{r7, lr}
   169c6:	b094      	sub	sp, #80	; 0x50
   169c8:	af00      	add	r7, sp, #0
   169ca:	4603      	mov	r3, r0
   169cc:	80fb      	strh	r3, [r7, #6]
   169ce:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   169d2:	f2c0 0302 	movt	r3, #2
   169d6:	681b      	ldr	r3, [r3, #0]
   169d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	int ret;
	card month;
	char datetime[lenDatTim + 1];
	char newdatetime[lenDatTim + 1];
	char fmtdatetime[lenDatTim + 1];
	const char *bgd = " ";
   169da:	f644 13e4 	movw	r3, #18916	; 0x49e4
   169de:	f2c0 0302 	movt	r3, #2
   169e2:	617b      	str	r3, [r7, #20]
	const char *ctl = "ghabcdijkl";
   169e4:	f644 13e8 	movw	r3, #18920	; 0x49e8
   169e8:	f2c0 0302 	movt	r3, #2
   169ec:	61bb      	str	r3, [r7, #24]

	memset(newdatetime, 0, sizeof(newdatetime));
   169ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   169f2:	4618      	mov	r0, r3
   169f4:	2100      	movs	r1, #0
   169f6:	220f      	movs	r2, #15
   169f8:	f7f2 e8e0 	blx	8bbc <_init+0x5c>
	memset(fmtdatetime, 0, sizeof(fmtdatetime));
   169fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   16a00:	4618      	mov	r0, r3
   16a02:	2100      	movs	r1, #0
   16a04:	220f      	movs	r2, #15
   16a06:	f7f2 e8da 	blx	8bbc <_init+0x5c>
	MAPGET(key, datetime, lblKO);
   16a0a:	88fa      	ldrh	r2, [r7, #6]
   16a0c:	f107 031c 	add.w	r3, r7, #28
   16a10:	4610      	mov	r0, r2
   16a12:	4619      	mov	r1, r3
   16a14:	220f      	movs	r2, #15
   16a16:	f7ff fd61 	bl	164dc <mapGet>
   16a1a:	6138      	str	r0, [r7, #16]
   16a1c:	693b      	ldr	r3, [r7, #16]
   16a1e:	2b00      	cmp	r3, #0
   16a20:	db32      	blt.n	16a88 <strFormatDatTim+0xc4>

	dec2num(&month, &datetime[2], 2);
   16a22:	f107 020c 	add.w	r2, r7, #12
   16a26:	f107 031c 	add.w	r3, r7, #28
   16a2a:	3302      	adds	r3, #2
   16a2c:	4610      	mov	r0, r2
   16a2e:	4619      	mov	r1, r3
   16a30:	2202      	movs	r2, #2
   16a32:	f7fb fed7 	bl	127e4 <dec2num>
	ret = fmtMut(newdatetime, (const char *) datetime, bgd, ctl);
   16a36:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   16a3a:	f107 031c 	add.w	r3, r7, #28
   16a3e:	4610      	mov	r0, r2
   16a40:	4619      	mov	r1, r3
   16a42:	697a      	ldr	r2, [r7, #20]
   16a44:	69bb      	ldr	r3, [r7, #24]
   16a46:	f7fd fc77 	bl	14338 <fmtMut>
   16a4a:	6138      	str	r0, [r7, #16]

	CHECK(month <= 12, lblKO);
   16a4c:	68fb      	ldr	r3, [r7, #12]
   16a4e:	2b0c      	cmp	r3, #12
   16a50:	d81a      	bhi.n	16a88 <strFormatDatTim+0xc4>
	CHECK(month > 0, lblKO);
   16a52:	68fb      	ldr	r3, [r7, #12]
   16a54:	2b00      	cmp	r3, #0
   16a56:	d017      	beq.n	16a88 <strFormatDatTim+0xc4>

	getMonthName(month,fmtdatetime);
   16a58:	68fa      	ldr	r2, [r7, #12]
   16a5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   16a5e:	4610      	mov	r0, r2
   16a60:	4619      	mov	r1, r3
   16a62:	f7ff ff17 	bl	16894 <getMonthName>
	memcpy(&fmtdatetime[3], newdatetime, strlen(newdatetime));
   16a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16a6a:	4618      	mov	r0, r3
   16a6c:	f7f2 e90a 	blx	8c84 <_init+0x124>
   16a70:	4603      	mov	r3, r0
   16a72:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   16a76:	1cd1      	adds	r1, r2, #3
   16a78:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   16a7c:	4608      	mov	r0, r1
   16a7e:	4611      	mov	r1, r2
   16a80:	461a      	mov	r2, r3
   16a82:	f7f2 e8fa 	blx	8c78 <_init+0x118>

//	MAPPUTSTR(traFmtDate, fmtdatetime, lblKO);
//	CHECK(ret > 0, lblKO);

	goto lblEnd;
   16a86:	e002      	b.n	16a8e <strFormatDatTim+0xca>

	lblKO:
	ret = -1;
   16a88:	f04f 33ff 	mov.w	r3, #4294967295
   16a8c:	613b      	str	r3, [r7, #16]

	lblEnd:
	return ret;
   16a8e:	693b      	ldr	r3, [r7, #16]
}
   16a90:	4618      	mov	r0, r3
   16a92:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   16a96:	f2c0 0302 	movt	r3, #2
   16a9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   16a9c:	681b      	ldr	r3, [r3, #0]
   16a9e:	429a      	cmp	r2, r3
   16aa0:	d001      	beq.n	16aa6 <strFormatDatTim+0xe2>
   16aa2:	f7f2 fa7f 	bl	8fa4 <__stack_chk_fail>
   16aa6:	f107 0750 	add.w	r7, r7, #80	; 0x50
   16aaa:	46bd      	mov	sp, r7
   16aac:	bd80      	pop	{r7, pc}
   16aae:	bf00      	nop

00016ab0 <message_RemoveCard>:



//! \brief Wait card removal after an EMV transaction.
void message_RemoveCard(void){
   16ab0:	b580      	push	{r7, lr}
   16ab2:	b086      	sub	sp, #24
   16ab4:	af02      	add	r7, sp, #8
   16ab6:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   16aba:	f2c0 0302 	movt	r3, #2
   16abe:	681b      	ldr	r3, [r3, #0]
   16ac0:	60fb      	str	r3, [r7, #12]
	int bCardPresent;
	Telium_File_t* hCam;
	unsigned char ucStatus;

	hCam = NULL;
   16ac2:	2300      	movs	r3, #0
   16ac4:	60bb      	str	r3, [r7, #8]

	hCam = stdcam0();
   16ac6:	f008 fe87 	bl	1f7d8 <stdcam0>
   16aca:	60b8      	str	r0, [r7, #8]
	if (hCam==NULL) {
   16acc:	68bb      	ldr	r3, [r7, #8]
   16ace:	2b00      	cmp	r3, #0
   16ad0:	d10a      	bne.n	16ae8 <message_RemoveCard+0x38>
		hCam = Telium_Fopen("CAM0", "rw");
   16ad2:	f644 10f4 	movw	r0, #18932	; 0x49f4
   16ad6:	f2c0 0002 	movt	r0, #2
   16ada:	f644 11fc 	movw	r1, #18940	; 0x49fc
   16ade:	f2c0 0102 	movt	r1, #2
   16ae2:	f008 ff1b 	bl	1f91c <Telium_Fopen>
   16ae6:	60b8      	str	r0, [r7, #8]
	}


	bCardPresent = TRUE;
   16ae8:	2301      	movs	r3, #1
   16aea:	607b      	str	r3, [r7, #4]
	if (hCam != NULL) {
   16aec:	68bb      	ldr	r3, [r7, #8]
   16aee:	2b00      	cmp	r3, #0
   16af0:	d042      	beq.n	16b78 <message_RemoveCard+0xc8>
		Telium_Status(hCam, &ucStatus);
   16af2:	1cfb      	adds	r3, r7, #3
   16af4:	68b8      	ldr	r0, [r7, #8]
   16af6:	4619      	mov	r1, r3
   16af8:	f009 f838 	bl	1fb6c <Telium_Status>
		if ((ucStatus & CAM_PRESENT) == 0) {
   16afc:	78fb      	ldrb	r3, [r7, #3]
   16afe:	f003 0301 	and.w	r3, r3, #1
   16b02:	2b00      	cmp	r3, #0
   16b04:	d10a      	bne.n	16b1c <message_RemoveCard+0x6c>
			if (hCam != NULL) {
   16b06:	68bb      	ldr	r3, [r7, #8]
   16b08:	2b00      	cmp	r3, #0
   16b0a:	d004      	beq.n	16b16 <message_RemoveCard+0x66>
				Telium_Fclose(hCam);
   16b0c:	68b8      	ldr	r0, [r7, #8]
   16b0e:	f008 fed3 	bl	1f8b8 <Telium_Fclose>
				hCam = NULL;
   16b12:	2300      	movs	r3, #0
   16b14:	60bb      	str	r3, [r7, #8]
			}
			// A card has been removed
			bCardPresent = FALSE;
   16b16:	2300      	movs	r3, #0
   16b18:	607b      	str	r3, [r7, #4]
			GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Remove card", GL_ICON_INFORMATION, GL_BUTTON_NONE, 0);
//			ClosePeripherals();
		}


		while(bCardPresent) {
   16b1a:	e02a      	b.n	16b72 <message_RemoveCard+0xc2>
			// A card has been removed
			bCardPresent = FALSE;
		} else {
//			OpenPeripherals();
			// Display message "Remove card"
			GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Remove card", GL_ICON_INFORMATION, GL_BUTTON_NONE, 0);
   16b1c:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   16b20:	f2c0 0302 	movt	r3, #2
   16b24:	681b      	ldr	r3, [r3, #0]
   16b26:	2200      	movs	r2, #0
   16b28:	9200      	str	r2, [sp, #0]
   16b2a:	2200      	movs	r2, #0
   16b2c:	9201      	str	r2, [sp, #4]
   16b2e:	4618      	mov	r0, r3
   16b30:	2100      	movs	r1, #0
   16b32:	f644 2200 	movw	r2, #18944	; 0x4a00
   16b36:	f2c0 0202 	movt	r2, #2
   16b3a:	2302      	movs	r3, #2
   16b3c:	f00a fcf2 	bl	21524 <GL_Dialog_Message>
//			ClosePeripherals();
		}


		while(bCardPresent) {
   16b40:	e017      	b.n	16b72 <message_RemoveCard+0xc2>
			Telium_Ttestall(CAM0, 0);
   16b42:	2020      	movs	r0, #32
   16b44:	2100      	movs	r1, #0
   16b46:	f009 f8d7 	bl	1fcf8 <Telium_Ttestall>
			Telium_Status(hCam, &ucStatus);
   16b4a:	1cfb      	adds	r3, r7, #3
   16b4c:	68b8      	ldr	r0, [r7, #8]
   16b4e:	4619      	mov	r1, r3
   16b50:	f009 f80c 	bl	1fb6c <Telium_Status>

			if ((ucStatus & CAM_PRESENT) == 0) {
   16b54:	78fb      	ldrb	r3, [r7, #3]
   16b56:	f003 0301 	and.w	r3, r3, #1
   16b5a:	2b00      	cmp	r3, #0
   16b5c:	d109      	bne.n	16b72 <message_RemoveCard+0xc2>
				if (hCam != NULL) {
   16b5e:	68bb      	ldr	r3, [r7, #8]
   16b60:	2b00      	cmp	r3, #0
   16b62:	d004      	beq.n	16b6e <message_RemoveCard+0xbe>
					Telium_Fclose(hCam);
   16b64:	68b8      	ldr	r0, [r7, #8]
   16b66:	f008 fea7 	bl	1f8b8 <Telium_Fclose>
					hCam = NULL;
   16b6a:	2300      	movs	r3, #0
   16b6c:	60bb      	str	r3, [r7, #8]
				}
				// A card has been removed
				bCardPresent = FALSE;
   16b6e:	2300      	movs	r3, #0
   16b70:	607b      	str	r3, [r7, #4]
			GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Remove card", GL_ICON_INFORMATION, GL_BUTTON_NONE, 0);
//			ClosePeripherals();
		}


		while(bCardPresent) {
   16b72:	687b      	ldr	r3, [r7, #4]
   16b74:	2b00      	cmp	r3, #0
   16b76:	d1e4      	bne.n	16b42 <message_RemoveCard+0x92>
				// A card has been removed
				bCardPresent = FALSE;
			}
		}
	}
}
   16b78:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   16b7c:	f2c0 0302 	movt	r3, #2
   16b80:	68fa      	ldr	r2, [r7, #12]
   16b82:	681b      	ldr	r3, [r3, #0]
   16b84:	429a      	cmp	r2, r3
   16b86:	d001      	beq.n	16b8c <message_RemoveCard+0xdc>
   16b88:	f7f2 fa0c 	bl	8fa4 <__stack_chk_fail>
   16b8c:	f107 0710 	add.w	r7, r7, #16
   16b90:	46bd      	mov	sp, r7
   16b92:	bd80      	pop	{r7, pc}

00016b94 <strtouppercase>:


void strtouppercase(char s[]){
   16b94:	b580      	push	{r7, lr}
   16b96:	b084      	sub	sp, #16
   16b98:	af00      	add	r7, sp, #0
   16b9a:	6078      	str	r0, [r7, #4]
   16b9c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   16ba0:	f2c0 0302 	movt	r3, #2
   16ba4:	681b      	ldr	r3, [r3, #0]
   16ba6:	60fb      	str	r3, [r7, #12]
	int c = 0;
   16ba8:	2300      	movs	r3, #0
   16baa:	60bb      	str	r3, [r7, #8]

	while (s[c] != '\0') {
   16bac:	e018      	b.n	16be0 <strtouppercase+0x4c>
		if (s[c] >= 'a' && s[c] <= 'z') {
   16bae:	68bb      	ldr	r3, [r7, #8]
   16bb0:	687a      	ldr	r2, [r7, #4]
   16bb2:	18d3      	adds	r3, r2, r3
   16bb4:	781b      	ldrb	r3, [r3, #0]
   16bb6:	2b60      	cmp	r3, #96	; 0x60
   16bb8:	d90f      	bls.n	16bda <strtouppercase+0x46>
   16bba:	68bb      	ldr	r3, [r7, #8]
   16bbc:	687a      	ldr	r2, [r7, #4]
   16bbe:	18d3      	adds	r3, r2, r3
   16bc0:	781b      	ldrb	r3, [r3, #0]
   16bc2:	2b7a      	cmp	r3, #122	; 0x7a
   16bc4:	d809      	bhi.n	16bda <strtouppercase+0x46>
			s[c] = s[c] - 32;
   16bc6:	68bb      	ldr	r3, [r7, #8]
   16bc8:	687a      	ldr	r2, [r7, #4]
   16bca:	18d3      	adds	r3, r2, r3
   16bcc:	68ba      	ldr	r2, [r7, #8]
   16bce:	6879      	ldr	r1, [r7, #4]
   16bd0:	188a      	adds	r2, r1, r2
   16bd2:	7812      	ldrb	r2, [r2, #0]
   16bd4:	3a20      	subs	r2, #32
   16bd6:	b2d2      	uxtb	r2, r2
   16bd8:	701a      	strb	r2, [r3, #0]
		}
		c++;
   16bda:	68bb      	ldr	r3, [r7, #8]
   16bdc:	3301      	adds	r3, #1
   16bde:	60bb      	str	r3, [r7, #8]


void strtouppercase(char s[]){
	int c = 0;

	while (s[c] != '\0') {
   16be0:	68bb      	ldr	r3, [r7, #8]
   16be2:	687a      	ldr	r2, [r7, #4]
   16be4:	18d3      	adds	r3, r2, r3
   16be6:	781b      	ldrb	r3, [r3, #0]
   16be8:	2b00      	cmp	r3, #0
   16bea:	d1e0      	bne.n	16bae <strtouppercase+0x1a>
		if (s[c] >= 'a' && s[c] <= 'z') {
			s[c] = s[c] - 32;
		}
		c++;
	}
}
   16bec:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   16bf0:	f2c0 0302 	movt	r3, #2
   16bf4:	68fa      	ldr	r2, [r7, #12]
   16bf6:	681b      	ldr	r3, [r3, #0]
   16bf8:	429a      	cmp	r2, r3
   16bfa:	d001      	beq.n	16c00 <strtouppercase+0x6c>
   16bfc:	f7f2 f9d2 	bl	8fa4 <__stack_chk_fail>
   16c00:	f107 0710 	add.w	r7, r7, #16
   16c04:	46bd      	mov	sp, r7
   16c06:	bd80      	pop	{r7, pc}

00016c08 <kbdKey>:
 *    - In case of error it returns 0xFF.
 * \header sys\\sys.h
 * \source sys\\tlmhmi.c
 * \test tcab0003.c
 */
char kbdKey(void) {
   16c08:	b580      	push	{r7, lr}
   16c0a:	b084      	sub	sp, #16
   16c0c:	af00      	add	r7, sp, #0
   16c0e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   16c12:	f2c0 0302 	movt	r3, #2
   16c16:	681b      	ldr	r3, [r3, #0]
   16c18:	60fb      	str	r3, [r7, #12]
	int ret;
	byte key = 0;
   16c1a:	2300      	movs	r3, #0
   16c1c:	71fb      	strb	r3, [r7, #7]

	ret = Telium_Ttestall(KEYBOARD, 1);    // wait for the first event
   16c1e:	2001      	movs	r0, #1
   16c20:	2101      	movs	r1, #1
   16c22:	f009 f869 	bl	1fcf8 <Telium_Ttestall>
   16c26:	4603      	mov	r3, r0
   16c28:	60bb      	str	r3, [r7, #8]

	if(ret & KEYBOARD) {
   16c2a:	68bb      	ldr	r3, [r7, #8]
   16c2c:	f003 0301 	and.w	r3, r3, #1
   16c30:	2b00      	cmp	r3, #0
   16c32:	d007      	beq.n	16c44 <kbdKey+0x3c>
		key = Telium_Getchar();
   16c34:	f008 ffca 	bl	1fbcc <Telium_Stdin>
   16c38:	4603      	mov	r3, r0
   16c3a:	4618      	mov	r0, r3
   16c3c:	f008 fe9e 	bl	1f97c <Telium_Getc>
   16c40:	4603      	mov	r3, r0
   16c42:	71fb      	strb	r3, [r7, #7]
	}
	return key;
   16c44:	79fb      	ldrb	r3, [r7, #7]
}
   16c46:	4618      	mov	r0, r3
   16c48:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   16c4c:	f2c0 0302 	movt	r3, #2
   16c50:	68fa      	ldr	r2, [r7, #12]
   16c52:	681b      	ldr	r3, [r3, #0]
   16c54:	429a      	cmp	r2, r3
   16c56:	d001      	beq.n	16c5c <kbdKey+0x54>
   16c58:	f7f2 f9a4 	bl	8fa4 <__stack_chk_fail>
   16c5c:	f107 0710 	add.w	r7, r7, #16
   16c60:	46bd      	mov	sp, r7
   16c62:	bd80      	pop	{r7, pc}

00016c64 <basename>:

char * basename (const char *filename) {
   16c64:	b580      	push	{r7, lr}
   16c66:	b084      	sub	sp, #16
   16c68:	af00      	add	r7, sp, #0
   16c6a:	6078      	str	r0, [r7, #4]
   16c6c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   16c70:	f2c0 0302 	movt	r3, #2
   16c74:	681b      	ldr	r3, [r3, #0]
   16c76:	60fb      	str	r3, [r7, #12]
	char *p = strrchr (filename, '/');
   16c78:	6878      	ldr	r0, [r7, #4]
   16c7a:	212f      	movs	r1, #47	; 0x2f
   16c7c:	f7f2 e840 	blx	8d00 <_init+0x1a0>
   16c80:	60b8      	str	r0, [r7, #8]
	return p ? p + 1 : (char *) filename;
   16c82:	68bb      	ldr	r3, [r7, #8]
   16c84:	2b00      	cmp	r3, #0
   16c86:	d002      	beq.n	16c8e <basename+0x2a>
   16c88:	68bb      	ldr	r3, [r7, #8]
   16c8a:	3301      	adds	r3, #1
   16c8c:	e000      	b.n	16c90 <basename+0x2c>
   16c8e:	687b      	ldr	r3, [r7, #4]
}
   16c90:	4618      	mov	r0, r3
   16c92:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   16c96:	f2c0 0302 	movt	r3, #2
   16c9a:	68fa      	ldr	r2, [r7, #12]
   16c9c:	681b      	ldr	r3, [r3, #0]
   16c9e:	429a      	cmp	r2, r3
   16ca0:	d001      	beq.n	16ca6 <basename+0x42>
   16ca2:	f7f2 f97f 	bl	8fa4 <__stack_chk_fail>
   16ca6:	f107 0710 	add.w	r7, r7, #16
   16caa:	46bd      	mov	sp, r7
   16cac:	bd80      	pop	{r7, pc}
   16cae:	bf00      	nop

00016cb0 <IsoError>:
//     pcTrk (-O) : Ascii string
//  This function has no return value.
//****************************************************************************

void IsoError(int iSta, char *pcTrk)
{
   16cb0:	b5b0      	push	{r4, r5, r7, lr}
   16cb2:	b084      	sub	sp, #16
   16cb4:	af00      	add	r7, sp, #0
   16cb6:	6078      	str	r0, [r7, #4]
   16cb8:	6039      	str	r1, [r7, #0]
   16cba:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   16cbe:	f2c0 0302 	movt	r3, #2
   16cc2:	681b      	ldr	r3, [r3, #0]
   16cc4:	60fb      	str	r3, [r7, #12]
	switch (iSta)
   16cc6:	687b      	ldr	r3, [r7, #4]
   16cc8:	3b01      	subs	r3, #1
   16cca:	2b05      	cmp	r3, #5
   16ccc:	d85c      	bhi.n	16d88 <IsoError+0xd8>
   16cce:	a201      	add	r2, pc, #4	; (adr r2, 16cd4 <IsoError+0x24>)
   16cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16cd4:	00016ced 	.word	0x00016ced
   16cd8:	00016d07 	.word	0x00016d07
   16cdc:	00016d21 	.word	0x00016d21
   16ce0:	00016d37 	.word	0x00016d37
   16ce4:	00016d51 	.word	0x00016d51
   16ce8:	00016d6b 	.word	0x00016d6b
	{
		case DEF_SEP: strcpy(pcTrk, "Separator fault");  break;
   16cec:	683a      	ldr	r2, [r7, #0]
   16cee:	f245 13d0 	movw	r3, #20944	; 0x51d0
   16cf2:	f2c0 0302 	movt	r3, #2
   16cf6:	4614      	mov	r4, r2
   16cf8:	461d      	mov	r5, r3
   16cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16cfc:	6020      	str	r0, [r4, #0]
   16cfe:	6061      	str	r1, [r4, #4]
   16d00:	60a2      	str	r2, [r4, #8]
   16d02:	60e3      	str	r3, [r4, #12]
   16d04:	e04d      	b.n	16da2 <IsoError+0xf2>
		case DEF_PAR: strcpy(pcTrk, "Parity fault");     break;
   16d06:	683a      	ldr	r2, [r7, #0]
   16d08:	f245 13e0 	movw	r3, #20960	; 0x51e0
   16d0c:	f2c0 0302 	movt	r3, #2
   16d10:	4614      	mov	r4, r2
   16d12:	cb07      	ldmia	r3!, {r0, r1, r2}
   16d14:	6020      	str	r0, [r4, #0]
   16d16:	6061      	str	r1, [r4, #4]
   16d18:	60a2      	str	r2, [r4, #8]
   16d1a:	781b      	ldrb	r3, [r3, #0]
   16d1c:	7323      	strb	r3, [r4, #12]
   16d1e:	e040      	b.n	16da2 <IsoError+0xf2>
		case DEF_LRC: strcpy(pcTrk, "LRC fault");        break;
   16d20:	683a      	ldr	r2, [r7, #0]
   16d22:	f245 13f0 	movw	r3, #20976	; 0x51f0
   16d26:	f2c0 0302 	movt	r3, #2
   16d2a:	cb03      	ldmia	r3!, {r0, r1}
   16d2c:	6010      	str	r0, [r2, #0]
   16d2e:	6051      	str	r1, [r2, #4]
   16d30:	881b      	ldrh	r3, [r3, #0]
   16d32:	8113      	strh	r3, [r2, #8]
   16d34:	e035      	b.n	16da2 <IsoError+0xf2>
		case DEF_LUH: strcpy(pcTrk, "Luhn fault");       break;
   16d36:	683a      	ldr	r2, [r7, #0]
   16d38:	f245 13fc 	movw	r3, #20988	; 0x51fc
   16d3c:	f2c0 0302 	movt	r3, #2
   16d40:	cb03      	ldmia	r3!, {r0, r1}
   16d42:	6010      	str	r0, [r2, #0]
   16d44:	6051      	str	r1, [r2, #4]
   16d46:	8819      	ldrh	r1, [r3, #0]
   16d48:	789b      	ldrb	r3, [r3, #2]
   16d4a:	8111      	strh	r1, [r2, #8]
   16d4c:	7293      	strb	r3, [r2, #10]
   16d4e:	e028      	b.n	16da2 <IsoError+0xf2>
		case DEF_NUM: strcpy(pcTrk, "Numerical fault");  break;
   16d50:	683a      	ldr	r2, [r7, #0]
   16d52:	f245 2308 	movw	r3, #21000	; 0x5208
   16d56:	f2c0 0302 	movt	r3, #2
   16d5a:	4614      	mov	r4, r2
   16d5c:	461d      	mov	r5, r3
   16d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16d60:	6020      	str	r0, [r4, #0]
   16d62:	6061      	str	r1, [r4, #4]
   16d64:	60a2      	str	r2, [r4, #8]
   16d66:	60e3      	str	r3, [r4, #12]
   16d68:	e01b      	b.n	16da2 <IsoError+0xf2>
		case NO_DATA: strcpy(pcTrk, "No readable data"); break;
   16d6a:	683a      	ldr	r2, [r7, #0]
   16d6c:	f245 2318 	movw	r3, #21016	; 0x5218
   16d70:	f2c0 0302 	movt	r3, #2
   16d74:	4615      	mov	r5, r2
   16d76:	461c      	mov	r4, r3
   16d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16d7a:	6028      	str	r0, [r5, #0]
   16d7c:	6069      	str	r1, [r5, #4]
   16d7e:	60aa      	str	r2, [r5, #8]
   16d80:	60eb      	str	r3, [r5, #12]
   16d82:	7823      	ldrb	r3, [r4, #0]
   16d84:	742b      	strb	r3, [r5, #16]
   16d86:	e00c      	b.n	16da2 <IsoError+0xf2>
		default:      strcpy(pcTrk, "Unknown error");    break;
   16d88:	683a      	ldr	r2, [r7, #0]
   16d8a:	f245 232c 	movw	r3, #21036	; 0x522c
   16d8e:	f2c0 0302 	movt	r3, #2
   16d92:	4614      	mov	r4, r2
   16d94:	cb07      	ldmia	r3!, {r0, r1, r2}
   16d96:	6020      	str	r0, [r4, #0]
   16d98:	6061      	str	r1, [r4, #4]
   16d9a:	60a2      	str	r2, [r4, #8]
   16d9c:	881b      	ldrh	r3, [r3, #0]
   16d9e:	81a3      	strh	r3, [r4, #12]
   16da0:	bf00      	nop
	}
}
   16da2:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   16da6:	f2c0 0302 	movt	r3, #2
   16daa:	68fa      	ldr	r2, [r7, #12]
   16dac:	681b      	ldr	r3, [r3, #0]
   16dae:	429a      	cmp	r2, r3
   16db0:	d001      	beq.n	16db6 <IsoError+0x106>
   16db2:	f7f2 f8f7 	bl	8fa4 <__stack_chk_fail>
   16db6:	f107 0710 	add.w	r7, r7, #16
   16dba:	46bd      	mov	sp, r7
   16dbc:	bdb0      	pop	{r4, r5, r7, pc}
   16dbe:	bf00      	nop

00016dc0 <Magnetic>:
//  This function has no parameters.
//  This function has no return value.
//****************************************************************************

void Magnetic(void)
{
   16dc0:	b5b0      	push	{r4, r5, r7, lr}
   16dc2:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
   16dc6:	af02      	add	r7, sp, #8
   16dc8:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   16dcc:	f2c0 0302 	movt	r3, #2
   16dd0:	681b      	ldr	r3, [r3, #0]
   16dd2:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	// Local variables
    // ***************
	T_GL_HWIDGET hScreen=NULL;
   16dd6:	1d3b      	adds	r3, r7, #4
   16dd8:	2200      	movs	r2, #0
   16dda:	601a      	str	r2, [r3, #0]
    Telium_File_t *hMag31=NULL, *hMag2=NULL, *hMag3=NULL;
   16ddc:	f107 0308 	add.w	r3, r7, #8
   16de0:	2200      	movs	r2, #0
   16de2:	601a      	str	r2, [r3, #0]
   16de4:	f107 030c 	add.w	r3, r7, #12
   16de8:	2200      	movs	r2, #0
   16dea:	601a      	str	r2, [r3, #0]
   16dec:	f107 0310 	add.w	r3, r7, #16
   16df0:	2200      	movs	r2, #0
   16df2:	601a      	str	r2, [r3, #0]
	byte ucLen=0;
   16df4:	1cfb      	adds	r3, r7, #3
   16df6:	2200      	movs	r2, #0
   16df8:	701a      	strb	r2, [r3, #0]
    int iSta;
    char tcTmp[128];
    char *pcSrc, *pcDst;
    char tcTrk1[128], tcTrk2[128], tcTrk3[128];
	int iKey, iTimeout=0, iRet;
   16dfa:	f107 031c 	add.w	r3, r7, #28
   16dfe:	2200      	movs	r2, #0
   16e00:	601a      	str	r2, [r3, #0]

	// Swipe card in progress
	// **********************
	strcpy(tcTrk1, "No readable data");               // By default
   16e02:	f107 02ac 	add.w	r2, r7, #172	; 0xac
   16e06:	f245 2318 	movw	r3, #21016	; 0x5218
   16e0a:	f2c0 0302 	movt	r3, #2
   16e0e:	4614      	mov	r4, r2
   16e10:	461d      	mov	r5, r3
   16e12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16e16:	682b      	ldr	r3, [r5, #0]
   16e18:	7023      	strb	r3, [r4, #0]
	strcpy(tcTrk2, "No readable data");
   16e1a:	f507 7296 	add.w	r2, r7, #300	; 0x12c
   16e1e:	f245 2318 	movw	r3, #21016	; 0x5218
   16e22:	f2c0 0302 	movt	r3, #2
   16e26:	4614      	mov	r4, r2
   16e28:	461d      	mov	r5, r3
   16e2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16e2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16e2e:	682b      	ldr	r3, [r5, #0]
   16e30:	7023      	strb	r3, [r4, #0]
	strcpy(tcTrk3, "No readable data");
   16e32:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
   16e36:	f245 2318 	movw	r3, #21016	; 0x5218
   16e3a:	f2c0 0302 	movt	r3, #2
   16e3e:	4614      	mov	r4, r2
   16e40:	461d      	mov	r5, r3
   16e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16e46:	682b      	ldr	r3, [r5, #0]
   16e48:	7023      	strb	r3, [r4, #0]

	// Open peripherals
	// ================
	if (IsISO1() == 1)
   16e4a:	f009 fb17 	bl	2047c <IsISO1>
   16e4e:	4603      	mov	r3, r0
   16e50:	2b01      	cmp	r3, #1
   16e52:	d112      	bne.n	16e7a <Magnetic+0xba>
	{
		hMag31 = Telium_Fopen("SWIPE31", "r*");       // Open mag1 peripheral
   16e54:	f107 0408 	add.w	r4, r7, #8
   16e58:	f245 203c 	movw	r0, #21052	; 0x523c
   16e5c:	f2c0 0002 	movt	r0, #2
   16e60:	f245 2144 	movw	r1, #21060	; 0x5244
   16e64:	f2c0 0102 	movt	r1, #2
   16e68:	f008 fd58 	bl	1f91c <Telium_Fopen>
   16e6c:	6020      	str	r0, [r4, #0]
		CHECK(hMag31, lblKO);
   16e6e:	f107 0308 	add.w	r3, r7, #8
   16e72:	681b      	ldr	r3, [r3, #0]
   16e74:	2b00      	cmp	r3, #0
   16e76:	f000 82b1 	beq.w	173dc <Magnetic+0x61c>
	}
    if (IsISO2() == 1)
   16e7a:	f009 fb2d 	bl	204d8 <IsISO2>
   16e7e:	4603      	mov	r3, r0
   16e80:	2b01      	cmp	r3, #1
   16e82:	d112      	bne.n	16eaa <Magnetic+0xea>
    {
    	hMag2 = Telium_Fopen("SWIPE2", "r*");         // Open mag2 peripheral
   16e84:	f107 040c 	add.w	r4, r7, #12
   16e88:	f245 2048 	movw	r0, #21064	; 0x5248
   16e8c:	f2c0 0002 	movt	r0, #2
   16e90:	f245 2144 	movw	r1, #21060	; 0x5244
   16e94:	f2c0 0102 	movt	r1, #2
   16e98:	f008 fd40 	bl	1f91c <Telium_Fopen>
   16e9c:	6020      	str	r0, [r4, #0]
    	CHECK(hMag2, lblKO);
   16e9e:	f107 030c 	add.w	r3, r7, #12
   16ea2:	681b      	ldr	r3, [r3, #0]
   16ea4:	2b00      	cmp	r3, #0
   16ea6:	f000 8299 	beq.w	173dc <Magnetic+0x61c>
    }
    if (IsISO3() == 1)
   16eaa:	f009 fb43 	bl	20534 <IsISO3>
   16eae:	4603      	mov	r3, r0
   16eb0:	2b01      	cmp	r3, #1
   16eb2:	d112      	bne.n	16eda <Magnetic+0x11a>
    {
    	hMag3 = Telium_Fopen("SWIPE3", "r*");         // Open mag3 peripheral
   16eb4:	f107 0410 	add.w	r4, r7, #16
   16eb8:	f245 2050 	movw	r0, #21072	; 0x5250
   16ebc:	f2c0 0002 	movt	r0, #2
   16ec0:	f245 2144 	movw	r1, #21060	; 0x5244
   16ec4:	f2c0 0102 	movt	r1, #2
   16ec8:	f008 fd28 	bl	1f91c <Telium_Fopen>
   16ecc:	6020      	str	r0, [r4, #0]
    	CHECK(hMag3, lblKO);
   16ece:	f107 0310 	add.w	r3, r7, #16
   16ed2:	681b      	ldr	r3, [r3, #0]
   16ed4:	2b00      	cmp	r3, #0
   16ed6:	f000 8281 	beq.w	173dc <Magnetic+0x61c>
    }

    // Prompt Swipe a card
    // ===================
	hScreen = GoalCreateScreen(gGoalGraphicLibInstance, txMagnetic, NUMBER_OF_LINES(txMagnetic), GL_ENCODING_UTF8);
   16eda:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   16ede:	f2c0 0302 	movt	r3, #2
   16ee2:	681b      	ldr	r3, [r3, #0]
   16ee4:	4618      	mov	r0, r3
   16ee6:	f644 3174 	movw	r1, #19316	; 0x4b74
   16eea:	f2c0 0102 	movt	r1, #2
   16eee:	2203      	movs	r2, #3
   16ef0:	2300      	movs	r3, #0
   16ef2:	f7f6 f8c7 	bl	d084 <GoalCreateScreen>
   16ef6:	4602      	mov	r2, r0
   16ef8:	1d3b      	adds	r3, r7, #4
   16efa:	601a      	str	r2, [r3, #0]
	CHECK(hScreen!=NULL, lblKO);                      // Create screen and clear it
   16efc:	1d3b      	adds	r3, r7, #4
   16efe:	681b      	ldr	r3, [r3, #0]
   16f00:	2b00      	cmp	r3, #0
   16f02:	f000 826b 	beq.w	173dc <Magnetic+0x61c>
	iRet = GoalClrScreen(hScreen, GL_COLOR_TRANSPARENT, KEY_CANCEL, false);
   16f06:	1d3b      	adds	r3, r7, #4
   16f08:	681b      	ldr	r3, [r3, #0]
   16f0a:	f107 0420 	add.w	r4, r7, #32
   16f0e:	4618      	mov	r0, r3
   16f10:	2100      	movs	r1, #0
   16f12:	2202      	movs	r2, #2
   16f14:	2300      	movs	r3, #0
   16f16:	f7f6 fa53 	bl	d3c0 <GoalClrScreen>
   16f1a:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
   16f1c:	f107 0320 	add.w	r3, r7, #32
   16f20:	681b      	ldr	r3, [r3, #0]
   16f22:	2b00      	cmp	r3, #0
   16f24:	f2c0 825a 	blt.w	173dc <Magnetic+0x61c>

	iRet = GoalDspLine(hScreen, 0, "Please Swipe", &txMagnetic[0], 0, false);
   16f28:	1d3b      	adds	r3, r7, #4
   16f2a:	681b      	ldr	r3, [r3, #0]
   16f2c:	f107 0420 	add.w	r4, r7, #32
   16f30:	2200      	movs	r2, #0
   16f32:	9200      	str	r2, [sp, #0]
   16f34:	2200      	movs	r2, #0
   16f36:	9201      	str	r2, [sp, #4]
   16f38:	4618      	mov	r0, r3
   16f3a:	2100      	movs	r1, #0
   16f3c:	f245 2258 	movw	r2, #21080	; 0x5258
   16f40:	f2c0 0202 	movt	r2, #2
   16f44:	f644 3374 	movw	r3, #19316	; 0x4b74
   16f48:	f2c0 0302 	movt	r3, #2
   16f4c:	f7f6 fb52 	bl	d5f4 <GoalDspLine>
   16f50:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);                            // Prompt for a swiping card
   16f52:	f107 0320 	add.w	r3, r7, #32
   16f56:	681b      	ldr	r3, [r3, #0]
   16f58:	2b00      	cmp	r3, #0
   16f5a:	f2c0 823f 	blt.w	173dc <Magnetic+0x61c>
	iRet = GoalDspLine(hScreen, 1, "Magnetic Card", &txMagnetic[1], 0, true);
   16f5e:	1d3b      	adds	r3, r7, #4
   16f60:	681b      	ldr	r3, [r3, #0]
   16f62:	f107 0420 	add.w	r4, r7, #32
   16f66:	2200      	movs	r2, #0
   16f68:	9200      	str	r2, [sp, #0]
   16f6a:	2201      	movs	r2, #1
   16f6c:	9201      	str	r2, [sp, #4]
   16f6e:	4618      	mov	r0, r3
   16f70:	2101      	movs	r1, #1
   16f72:	f245 2268 	movw	r2, #21096	; 0x5268
   16f76:	f2c0 0202 	movt	r2, #2
   16f7a:	4baf      	ldr	r3, [pc, #700]	; (17238 <Magnetic+0x478>)
   16f7c:	f7f6 fb3a 	bl	d5f4 <GoalDspLine>
   16f80:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
   16f82:	f107 0320 	add.w	r3, r7, #32
   16f86:	681b      	ldr	r3, [r3, #0]
   16f88:	2b00      	cmp	r3, #0
   16f8a:	f2c0 8227 	blt.w	173dc <Magnetic+0x61c>

	// Wait for magnetic card
	// ======================
    iRet = TimerStart(0, 30*1000);                                   // Timer0 starts to 30s
   16f8e:	f107 0420 	add.w	r4, r7, #32
   16f92:	2000      	movs	r0, #0
   16f94:	f247 5130 	movw	r1, #30000	; 0x7530
   16f98:	f7fa fa3a 	bl	11410 <TimerStart>
   16f9c:	6020      	str	r0, [r4, #0]
    CHECK(iRet>=0, lblKO);
   16f9e:	f107 0320 	add.w	r3, r7, #32
   16fa2:	681b      	ldr	r3, [r3, #0]
   16fa4:	2b00      	cmp	r3, #0
   16fa6:	f2c0 8219 	blt.w	173dc <Magnetic+0x61c>
	do
	{
		iSta = Telium_Ttestall(SWIPE31 | SWIPE2 | SWIPE3, 10);       // Wait for the first event SWIPE31
   16faa:	f44f 7020 	mov.w	r0, #640	; 0x280
   16fae:	f2c0 0040 	movt	r0, #64	; 0x40
   16fb2:	210a      	movs	r1, #10
   16fb4:	f008 fea0 	bl	1fcf8 <Telium_Ttestall>
   16fb8:	4602      	mov	r2, r0
   16fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
   16fbe:	601a      	str	r2, [r3, #0]
		if (iSta != 0)
   16fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
   16fc4:	681b      	ldr	r3, [r3, #0]
   16fc6:	2b00      	cmp	r3, #0
   16fc8:	d125      	bne.n	17016 <Magnetic+0x256>
			break;                                                   // Swipe detected
		iKey = GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 100, false);         // Get key pressed/touched (shortcut)
   16fca:	1d3b      	adds	r3, r7, #4
   16fcc:	681a      	ldr	r2, [r3, #0]
   16fce:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   16fd2:	f2c0 0302 	movt	r3, #2
   16fd6:	681b      	ldr	r3, [r3, #0]
   16fd8:	f107 0428 	add.w	r4, r7, #40	; 0x28
   16fdc:	2100      	movs	r1, #0
   16fde:	9100      	str	r1, [sp, #0]
   16fe0:	4610      	mov	r0, r2
   16fe2:	4619      	mov	r1, r3
   16fe4:	2201      	movs	r2, #1
   16fe6:	2364      	movs	r3, #100	; 0x64
   16fe8:	f7f6 fe3a 	bl	dc60 <GoalGetKey>
   16fec:	6020      	str	r0, [r4, #0]
		CHECK(iKey!=GL_KEY_CANCEL, lblEnd);                          // Exit on cancel key
   16fee:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16ff2:	681a      	ldr	r2, [r3, #0]
   16ff4:	f64f 0351 	movw	r3, #63569	; 0xf851
   16ff8:	429a      	cmp	r2, r3
   16ffa:	f000 8203 	beq.w	17404 <Magnetic+0x644>
		iTimeout = TimerGet(0);                                      // Retrieve timer value
   16ffe:	f107 041c 	add.w	r4, r7, #28
   17002:	2000      	movs	r0, #0
   17004:	f7fa fa54 	bl	114b0 <TimerGet>
   17008:	6020      	str	r0, [r4, #0]
	}while(iTimeout>0);
   1700a:	f107 031c 	add.w	r3, r7, #28
   1700e:	681b      	ldr	r3, [r3, #0]
   17010:	2b00      	cmp	r3, #0
   17012:	dcca      	bgt.n	16faa <Magnetic+0x1ea>
   17014:	e000      	b.n	17018 <Magnetic+0x258>
    CHECK(iRet>=0, lblKO);
	do
	{
		iSta = Telium_Ttestall(SWIPE31 | SWIPE2 | SWIPE3, 10);       // Wait for the first event SWIPE31
		if (iSta != 0)
			break;                                                   // Swipe detected
   17016:	bf00      	nop
		iKey = GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 100, false);         // Get key pressed/touched (shortcut)
		CHECK(iKey!=GL_KEY_CANCEL, lblEnd);                          // Exit on cancel key
		iTimeout = TimerGet(0);                                      // Retrieve timer value
	}while(iTimeout>0);

	CHECK(iTimeout!=0, lblEnd);                                      // Exit on timeout
   17018:	f107 031c 	add.w	r3, r7, #28
   1701c:	681b      	ldr	r3, [r3, #0]
   1701e:	2b00      	cmp	r3, #0
   17020:	f000 81f0 	beq.w	17404 <Magnetic+0x644>

	iSta |= Telium_Ttestall(iSta ^ (SWIPE31 | SWIPE2 | SWIPE3), 10); // Wait for the second event SWIPE2
   17024:	f107 0324 	add.w	r3, r7, #36	; 0x24
   17028:	681b      	ldr	r3, [r3, #0]
   1702a:	f483 0380 	eor.w	r3, r3, #4194304	; 0x400000
   1702e:	f483 7320 	eor.w	r3, r3, #640	; 0x280
   17032:	4618      	mov	r0, r3
   17034:	210a      	movs	r1, #10
   17036:	f008 fe5f 	bl	1fcf8 <Telium_Ttestall>
   1703a:	4602      	mov	r2, r0
   1703c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   17040:	681b      	ldr	r3, [r3, #0]
   17042:	431a      	orrs	r2, r3
   17044:	f107 0324 	add.w	r3, r7, #36	; 0x24
   17048:	601a      	str	r2, [r3, #0]
	iSta |= Telium_Ttestall(iSta ^ (SWIPE31 | SWIPE2 | SWIPE3), 10); // Wait for the third event SWIPE3
   1704a:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1704e:	681b      	ldr	r3, [r3, #0]
   17050:	f483 0380 	eor.w	r3, r3, #4194304	; 0x400000
   17054:	f483 7320 	eor.w	r3, r3, #640	; 0x280
   17058:	4618      	mov	r0, r3
   1705a:	210a      	movs	r1, #10
   1705c:	f008 fe4c 	bl	1fcf8 <Telium_Ttestall>
   17060:	4602      	mov	r2, r0
   17062:	f107 0324 	add.w	r3, r7, #36	; 0x24
   17066:	681b      	ldr	r3, [r3, #0]
   17068:	431a      	orrs	r2, r3
   1706a:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1706e:	601a      	str	r2, [r3, #0]

	// Retrieve and analyze ISO1
	// =========================
	if(iSta & SWIPE31)
   17070:	f107 0324 	add.w	r3, r7, #36	; 0x24
   17074:	681b      	ldr	r3, [r3, #0]
   17076:	f403 7300 	and.w	r3, r3, #512	; 0x200
   1707a:	2b00      	cmp	r3, #0
   1707c:	d07b      	beq.n	17176 <Magnetic+0x3b6>
	{
		memset(tcTmp, 0, sizeof(tcTmp));
   1707e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   17082:	4618      	mov	r0, r3
   17084:	2100      	movs	r1, #0
   17086:	2280      	movs	r2, #128	; 0x80
   17088:	f7f1 ed98 	blx	8bbc <_init+0x5c>
	    memset(tcTrk1, 0, sizeof(tcTrk1));
   1708c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   17090:	4618      	mov	r0, r3
   17092:	2100      	movs	r1, #0
   17094:	2280      	movs	r2, #128	; 0x80
   17096:	f7f1 ed92 	blx	8bbc <_init+0x5c>
		iRet = Telium_Is_iso1(hMag31, &ucLen, (byte*)tcTmp); // *** Read ISO1 to ascii format ***
   1709a:	f107 0420 	add.w	r4, r7, #32
   1709e:	f107 0108 	add.w	r1, r7, #8
   170a2:	1cfa      	adds	r2, r7, #3
   170a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   170a8:	6808      	ldr	r0, [r1, #0]
   170aa:	4611      	mov	r1, r2
   170ac:	461a      	mov	r2, r3
   170ae:	f008 fc97 	bl	1f9e0 <Telium_Is_iso1>
   170b2:	6020      	str	r0, [r4, #0]
		if (iRet != ISO_OK)
   170b4:	f107 0320 	add.w	r3, r7, #32
   170b8:	681b      	ldr	r3, [r3, #0]
   170ba:	2b00      	cmp	r3, #0
   170bc:	d008      	beq.n	170d0 <Magnetic+0x310>
			IsoError (iRet, tcTrk1);
   170be:	f107 0220 	add.w	r2, r7, #32
   170c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   170c6:	6810      	ldr	r0, [r2, #0]
   170c8:	4619      	mov	r1, r3
   170ca:	f7ff fdf1 	bl	16cb0 <IsoError>
   170ce:	e052      	b.n	17176 <Magnetic+0x3b6>
		else
		{
			CHECK(strlen(tcTmp)<128, lblKO);
   170d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   170d4:	4618      	mov	r0, r3
   170d6:	f7f1 edd6 	blx	8c84 <_init+0x124>
   170da:	4603      	mov	r3, r0
   170dc:	2b7f      	cmp	r3, #127	; 0x7f
   170de:	f200 817d 	bhi.w	173dc <Magnetic+0x61c>
			pcSrc = tcTmp;
   170e2:	f107 0314 	add.w	r3, r7, #20
   170e6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   170ea:	601a      	str	r2, [r3, #0]
			pcDst = tcTrk1;
   170ec:	f107 0318 	add.w	r3, r7, #24
   170f0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
   170f4:	601a      	str	r2, [r3, #0]
			while(*pcSrc) {                                  // Find start sentinel
   170f6:	e011      	b.n	1711c <Magnetic+0x35c>
				if(*pcSrc++ == '%')
   170f8:	f107 0314 	add.w	r3, r7, #20
   170fc:	681b      	ldr	r3, [r3, #0]
   170fe:	781b      	ldrb	r3, [r3, #0]
   17100:	2b25      	cmp	r3, #37	; 0x25
   17102:	bf14      	ite	ne
   17104:	2300      	movne	r3, #0
   17106:	2301      	moveq	r3, #1
   17108:	b2db      	uxtb	r3, r3
   1710a:	f107 0214 	add.w	r2, r7, #20
   1710e:	f107 0114 	add.w	r1, r7, #20
   17112:	6809      	ldr	r1, [r1, #0]
   17114:	3101      	adds	r1, #1
   17116:	6011      	str	r1, [r2, #0]
   17118:	2b00      	cmp	r3, #0
   1711a:	d106      	bne.n	1712a <Magnetic+0x36a>
		else
		{
			CHECK(strlen(tcTmp)<128, lblKO);
			pcSrc = tcTmp;
			pcDst = tcTrk1;
			while(*pcSrc) {                                  // Find start sentinel
   1711c:	f107 0314 	add.w	r3, r7, #20
   17120:	681b      	ldr	r3, [r3, #0]
   17122:	781b      	ldrb	r3, [r3, #0]
   17124:	2b00      	cmp	r3, #0
   17126:	d1e7      	bne.n	170f8 <Magnetic+0x338>
				if(*pcSrc++ == '%')
					break;
			}
			while(*pcSrc) {                                  // Copy all data between start and end sentinels
   17128:	e01d      	b.n	17166 <Magnetic+0x3a6>
			CHECK(strlen(tcTmp)<128, lblKO);
			pcSrc = tcTmp;
			pcDst = tcTrk1;
			while(*pcSrc) {                                  // Find start sentinel
				if(*pcSrc++ == '%')
					break;
   1712a:	bf00      	nop
			}
			while(*pcSrc) {                                  // Copy all data between start and end sentinels
   1712c:	e01b      	b.n	17166 <Magnetic+0x3a6>
				if(*pcSrc == '?')
   1712e:	f107 0314 	add.w	r3, r7, #20
   17132:	681b      	ldr	r3, [r3, #0]
   17134:	781b      	ldrb	r3, [r3, #0]
   17136:	2b3f      	cmp	r3, #63	; 0x3f
   17138:	d01c      	beq.n	17174 <Magnetic+0x3b4>
					break;
				*pcDst++ = *pcSrc++;
   1713a:	f107 0314 	add.w	r3, r7, #20
   1713e:	681b      	ldr	r3, [r3, #0]
   17140:	781a      	ldrb	r2, [r3, #0]
   17142:	f107 0318 	add.w	r3, r7, #24
   17146:	681b      	ldr	r3, [r3, #0]
   17148:	701a      	strb	r2, [r3, #0]
   1714a:	f107 0318 	add.w	r3, r7, #24
   1714e:	f107 0218 	add.w	r2, r7, #24
   17152:	6812      	ldr	r2, [r2, #0]
   17154:	3201      	adds	r2, #1
   17156:	601a      	str	r2, [r3, #0]
   17158:	f107 0314 	add.w	r3, r7, #20
   1715c:	f107 0214 	add.w	r2, r7, #20
   17160:	6812      	ldr	r2, [r2, #0]
   17162:	3201      	adds	r2, #1
   17164:	601a      	str	r2, [r3, #0]
			pcDst = tcTrk1;
			while(*pcSrc) {                                  // Find start sentinel
				if(*pcSrc++ == '%')
					break;
			}
			while(*pcSrc) {                                  // Copy all data between start and end sentinels
   17166:	f107 0314 	add.w	r3, r7, #20
   1716a:	681b      	ldr	r3, [r3, #0]
   1716c:	781b      	ldrb	r3, [r3, #0]
   1716e:	2b00      	cmp	r3, #0
   17170:	d1dd      	bne.n	1712e <Magnetic+0x36e>
   17172:	e000      	b.n	17176 <Magnetic+0x3b6>
				if(*pcSrc == '?')
					break;
   17174:	bf00      	nop
		}
	}

	// Retrieve and analyze ISO2
	// =========================
	if(iSta & SWIPE2)
   17176:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1717a:	681b      	ldr	r3, [r3, #0]
   1717c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   17180:	2b00      	cmp	r3, #0
   17182:	f000 808a 	beq.w	1729a <Magnetic+0x4da>
	{
		memset(tcTmp, 0, sizeof(tcTmp));
   17186:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1718a:	4618      	mov	r0, r3
   1718c:	2100      	movs	r1, #0
   1718e:	2280      	movs	r2, #128	; 0x80
   17190:	f7f1 ed14 	blx	8bbc <_init+0x5c>
	    memset(tcTrk2, 0, sizeof(tcTrk2));
   17194:	f507 7396 	add.w	r3, r7, #300	; 0x12c
   17198:	4618      	mov	r0, r3
   1719a:	2100      	movs	r1, #0
   1719c:	2280      	movs	r2, #128	; 0x80
   1719e:	f7f1 ed0e 	blx	8bbc <_init+0x5c>
		iRet = Telium_Is_iso2(hMag2, &ucLen, (byte*)tcTmp);  // *** Read ISO2 to ascii format ***
   171a2:	f107 0420 	add.w	r4, r7, #32
   171a6:	f107 010c 	add.w	r1, r7, #12
   171aa:	1cfa      	adds	r2, r7, #3
   171ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   171b0:	6808      	ldr	r0, [r1, #0]
   171b2:	4611      	mov	r1, r2
   171b4:	461a      	mov	r2, r3
   171b6:	f008 fc45 	bl	1fa44 <Telium_Is_iso2>
   171ba:	6020      	str	r0, [r4, #0]
		if (iRet != ISO_OK)
   171bc:	f107 0320 	add.w	r3, r7, #32
   171c0:	681b      	ldr	r3, [r3, #0]
   171c2:	2b00      	cmp	r3, #0
   171c4:	d008      	beq.n	171d8 <Magnetic+0x418>
			IsoError (iRet, tcTrk2);
   171c6:	f107 0220 	add.w	r2, r7, #32
   171ca:	f507 7396 	add.w	r3, r7, #300	; 0x12c
   171ce:	6810      	ldr	r0, [r2, #0]
   171d0:	4619      	mov	r1, r3
   171d2:	f7ff fd6d 	bl	16cb0 <IsoError>
   171d6:	e060      	b.n	1729a <Magnetic+0x4da>
		else
		{
			CHECK(strlen(tcTmp)<128, lblKO);
   171d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   171dc:	4618      	mov	r0, r3
   171de:	f7f1 ed52 	blx	8c84 <_init+0x124>
   171e2:	4603      	mov	r3, r0
   171e4:	2b7f      	cmp	r3, #127	; 0x7f
   171e6:	f200 80f9 	bhi.w	173dc <Magnetic+0x61c>
			pcSrc = tcTmp;
   171ea:	f107 0314 	add.w	r3, r7, #20
   171ee:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   171f2:	601a      	str	r2, [r3, #0]
			pcDst = tcTrk2;
   171f4:	f107 0318 	add.w	r3, r7, #24
   171f8:	f507 7296 	add.w	r2, r7, #300	; 0x12c
   171fc:	601a      	str	r2, [r3, #0]
			while(*pcSrc) {                                  // Find start sentinel
   171fe:	e011      	b.n	17224 <Magnetic+0x464>
				if(*pcSrc++ == 'B')
   17200:	f107 0314 	add.w	r3, r7, #20
   17204:	681b      	ldr	r3, [r3, #0]
   17206:	781b      	ldrb	r3, [r3, #0]
   17208:	2b42      	cmp	r3, #66	; 0x42
   1720a:	bf14      	ite	ne
   1720c:	2300      	movne	r3, #0
   1720e:	2301      	moveq	r3, #1
   17210:	b2db      	uxtb	r3, r3
   17212:	f107 0214 	add.w	r2, r7, #20
   17216:	f107 0114 	add.w	r1, r7, #20
   1721a:	6809      	ldr	r1, [r1, #0]
   1721c:	3101      	adds	r1, #1
   1721e:	6011      	str	r1, [r2, #0]
   17220:	2b00      	cmp	r3, #0
   17222:	d106      	bne.n	17232 <Magnetic+0x472>
		else
		{
			CHECK(strlen(tcTmp)<128, lblKO);
			pcSrc = tcTmp;
			pcDst = tcTrk2;
			while(*pcSrc) {                                  // Find start sentinel
   17224:	f107 0314 	add.w	r3, r7, #20
   17228:	681b      	ldr	r3, [r3, #0]
   1722a:	781b      	ldrb	r3, [r3, #0]
   1722c:	2b00      	cmp	r3, #0
   1722e:	d1e7      	bne.n	17200 <Magnetic+0x440>
				if(*pcSrc++ == 'B')
					break;
			}
			while(*pcSrc) {                                  // Copy all data between start and end sentinels
   17230:	e02b      	b.n	1728a <Magnetic+0x4ca>
			CHECK(strlen(tcTmp)<128, lblKO);
			pcSrc = tcTmp;
			pcDst = tcTrk2;
			while(*pcSrc) {                                  // Find start sentinel
				if(*pcSrc++ == 'B')
					break;
   17232:	bf00      	nop
			}
			while(*pcSrc) {                                  // Copy all data between start and end sentinels
   17234:	e029      	b.n	1728a <Magnetic+0x4ca>
   17236:	bf00      	nop
   17238:	00024c20 	.word	0x00024c20
				if(*pcSrc == 'F')
   1723c:	f107 0314 	add.w	r3, r7, #20
   17240:	681b      	ldr	r3, [r3, #0]
   17242:	781b      	ldrb	r3, [r3, #0]
   17244:	2b46      	cmp	r3, #70	; 0x46
   17246:	d027      	beq.n	17298 <Magnetic+0x4d8>
					break;
				if(*pcSrc == 'D')
   17248:	f107 0314 	add.w	r3, r7, #20
   1724c:	681b      	ldr	r3, [r3, #0]
   1724e:	781b      	ldrb	r3, [r3, #0]
   17250:	2b44      	cmp	r3, #68	; 0x44
   17252:	d104      	bne.n	1725e <Magnetic+0x49e>
					*pcSrc = '=';
   17254:	f107 0314 	add.w	r3, r7, #20
   17258:	681b      	ldr	r3, [r3, #0]
   1725a:	223d      	movs	r2, #61	; 0x3d
   1725c:	701a      	strb	r2, [r3, #0]
				*pcDst++ = *pcSrc++;
   1725e:	f107 0314 	add.w	r3, r7, #20
   17262:	681b      	ldr	r3, [r3, #0]
   17264:	781a      	ldrb	r2, [r3, #0]
   17266:	f107 0318 	add.w	r3, r7, #24
   1726a:	681b      	ldr	r3, [r3, #0]
   1726c:	701a      	strb	r2, [r3, #0]
   1726e:	f107 0318 	add.w	r3, r7, #24
   17272:	f107 0218 	add.w	r2, r7, #24
   17276:	6812      	ldr	r2, [r2, #0]
   17278:	3201      	adds	r2, #1
   1727a:	601a      	str	r2, [r3, #0]
   1727c:	f107 0314 	add.w	r3, r7, #20
   17280:	f107 0214 	add.w	r2, r7, #20
   17284:	6812      	ldr	r2, [r2, #0]
   17286:	3201      	adds	r2, #1
   17288:	601a      	str	r2, [r3, #0]
			pcDst = tcTrk2;
			while(*pcSrc) {                                  // Find start sentinel
				if(*pcSrc++ == 'B')
					break;
			}
			while(*pcSrc) {                                  // Copy all data between start and end sentinels
   1728a:	f107 0314 	add.w	r3, r7, #20
   1728e:	681b      	ldr	r3, [r3, #0]
   17290:	781b      	ldrb	r3, [r3, #0]
   17292:	2b00      	cmp	r3, #0
   17294:	d1d2      	bne.n	1723c <Magnetic+0x47c>
   17296:	e000      	b.n	1729a <Magnetic+0x4da>
				if(*pcSrc == 'F')
					break;
   17298:	bf00      	nop
		}
	}

	// Retrieve and analyze ISO3
	// =========================
	if(iSta & SWIPE3)
   1729a:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1729e:	681b      	ldr	r3, [r3, #0]
   172a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
   172a4:	2b00      	cmp	r3, #0
   172a6:	f000 8086 	beq.w	173b6 <Magnetic+0x5f6>
	{
		memset(tcTmp, 0, sizeof(tcTmp));
   172aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   172ae:	4618      	mov	r0, r3
   172b0:	2100      	movs	r1, #0
   172b2:	2280      	movs	r2, #128	; 0x80
   172b4:	f7f1 ec82 	blx	8bbc <_init+0x5c>
	    memset(tcTrk3, 0, sizeof(tcTrk3));
   172b8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
   172bc:	4618      	mov	r0, r3
   172be:	2100      	movs	r1, #0
   172c0:	2280      	movs	r2, #128	; 0x80
   172c2:	f7f1 ec7c 	blx	8bbc <_init+0x5c>
		iRet = Telium_Is_iso3(hMag3, &ucLen, (byte*)tcTmp);  // *** Read ISO3 to ascii format ***
   172c6:	f107 0420 	add.w	r4, r7, #32
   172ca:	f107 0110 	add.w	r1, r7, #16
   172ce:	1cfa      	adds	r2, r7, #3
   172d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   172d4:	6808      	ldr	r0, [r1, #0]
   172d6:	4611      	mov	r1, r2
   172d8:	461a      	mov	r2, r3
   172da:	f008 fbe5 	bl	1faa8 <Telium_Is_iso3>
   172de:	6020      	str	r0, [r4, #0]
		if (iRet != ISO_OK)
   172e0:	f107 0320 	add.w	r3, r7, #32
   172e4:	681b      	ldr	r3, [r3, #0]
   172e6:	2b00      	cmp	r3, #0
   172e8:	d008      	beq.n	172fc <Magnetic+0x53c>
			IsoError (iRet, tcTrk3);
   172ea:	f107 0220 	add.w	r2, r7, #32
   172ee:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
   172f2:	6810      	ldr	r0, [r2, #0]
   172f4:	4619      	mov	r1, r3
   172f6:	f7ff fcdb 	bl	16cb0 <IsoError>
   172fa:	e05c      	b.n	173b6 <Magnetic+0x5f6>
		else
		{
			CHECK(strlen(tcTmp)<128, lblKO);
   172fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   17300:	4618      	mov	r0, r3
   17302:	f7f1 ecc0 	blx	8c84 <_init+0x124>
   17306:	4603      	mov	r3, r0
   17308:	2b7f      	cmp	r3, #127	; 0x7f
   1730a:	d867      	bhi.n	173dc <Magnetic+0x61c>
			pcSrc = tcTmp;
   1730c:	f107 0314 	add.w	r3, r7, #20
   17310:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   17314:	601a      	str	r2, [r3, #0]
			pcDst = tcTrk3;
   17316:	f107 0318 	add.w	r3, r7, #24
   1731a:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
   1731e:	601a      	str	r2, [r3, #0]
			while(*pcSrc) {                                  // Find start sentinel
   17320:	e011      	b.n	17346 <Magnetic+0x586>
				if(*pcSrc++ == 'B')
   17322:	f107 0314 	add.w	r3, r7, #20
   17326:	681b      	ldr	r3, [r3, #0]
   17328:	781b      	ldrb	r3, [r3, #0]
   1732a:	2b42      	cmp	r3, #66	; 0x42
   1732c:	bf14      	ite	ne
   1732e:	2300      	movne	r3, #0
   17330:	2301      	moveq	r3, #1
   17332:	b2db      	uxtb	r3, r3
   17334:	f107 0214 	add.w	r2, r7, #20
   17338:	f107 0114 	add.w	r1, r7, #20
   1733c:	6809      	ldr	r1, [r1, #0]
   1733e:	3101      	adds	r1, #1
   17340:	6011      	str	r1, [r2, #0]
   17342:	2b00      	cmp	r3, #0
   17344:	d106      	bne.n	17354 <Magnetic+0x594>
		else
		{
			CHECK(strlen(tcTmp)<128, lblKO);
			pcSrc = tcTmp;
			pcDst = tcTrk3;
			while(*pcSrc) {                                  // Find start sentinel
   17346:	f107 0314 	add.w	r3, r7, #20
   1734a:	681b      	ldr	r3, [r3, #0]
   1734c:	781b      	ldrb	r3, [r3, #0]
   1734e:	2b00      	cmp	r3, #0
   17350:	d1e7      	bne.n	17322 <Magnetic+0x562>
				if(*pcSrc++ == 'B')
					break;
			}
			while(*pcSrc) {                                  // Copy all data between start and end sentinels
   17352:	e028      	b.n	173a6 <Magnetic+0x5e6>
			CHECK(strlen(tcTmp)<128, lblKO);
			pcSrc = tcTmp;
			pcDst = tcTrk3;
			while(*pcSrc) {                                  // Find start sentinel
				if(*pcSrc++ == 'B')
					break;
   17354:	bf00      	nop
			}
			while(*pcSrc) {                                  // Copy all data between start and end sentinels
   17356:	e026      	b.n	173a6 <Magnetic+0x5e6>
				if(*pcSrc == 'F')
   17358:	f107 0314 	add.w	r3, r7, #20
   1735c:	681b      	ldr	r3, [r3, #0]
   1735e:	781b      	ldrb	r3, [r3, #0]
   17360:	2b46      	cmp	r3, #70	; 0x46
   17362:	d027      	beq.n	173b4 <Magnetic+0x5f4>
					break;
				if(*pcSrc == 'D')
   17364:	f107 0314 	add.w	r3, r7, #20
   17368:	681b      	ldr	r3, [r3, #0]
   1736a:	781b      	ldrb	r3, [r3, #0]
   1736c:	2b44      	cmp	r3, #68	; 0x44
   1736e:	d104      	bne.n	1737a <Magnetic+0x5ba>
					*pcSrc = '=';
   17370:	f107 0314 	add.w	r3, r7, #20
   17374:	681b      	ldr	r3, [r3, #0]
   17376:	223d      	movs	r2, #61	; 0x3d
   17378:	701a      	strb	r2, [r3, #0]
				*pcDst++ = *pcSrc++;
   1737a:	f107 0314 	add.w	r3, r7, #20
   1737e:	681b      	ldr	r3, [r3, #0]
   17380:	781a      	ldrb	r2, [r3, #0]
   17382:	f107 0318 	add.w	r3, r7, #24
   17386:	681b      	ldr	r3, [r3, #0]
   17388:	701a      	strb	r2, [r3, #0]
   1738a:	f107 0318 	add.w	r3, r7, #24
   1738e:	f107 0218 	add.w	r2, r7, #24
   17392:	6812      	ldr	r2, [r2, #0]
   17394:	3201      	adds	r2, #1
   17396:	601a      	str	r2, [r3, #0]
   17398:	f107 0314 	add.w	r3, r7, #20
   1739c:	f107 0214 	add.w	r2, r7, #20
   173a0:	6812      	ldr	r2, [r2, #0]
   173a2:	3201      	adds	r2, #1
   173a4:	601a      	str	r2, [r3, #0]
			pcDst = tcTrk3;
			while(*pcSrc) {                                  // Find start sentinel
				if(*pcSrc++ == 'B')
					break;
			}
			while(*pcSrc) {                                  // Copy all data between start and end sentinels
   173a6:	f107 0314 	add.w	r3, r7, #20
   173aa:	681b      	ldr	r3, [r3, #0]
   173ac:	781b      	ldrb	r3, [r3, #0]
   173ae:	2b00      	cmp	r3, #0
   173b0:	d1d2      	bne.n	17358 <Magnetic+0x598>
   173b2:	e000      	b.n	173b6 <Magnetic+0x5f6>
				if(*pcSrc == 'F')
					break;
   173b4:	bf00      	nop
				*pcDst++ = *pcSrc++;
			}
		}
	}

	mapPut(traTrk2, tcTrk2, strlen(tcTrk2));
   173b6:	f507 7396 	add.w	r3, r7, #300	; 0x12c
   173ba:	4618      	mov	r0, r3
   173bc:	f7f1 ec62 	blx	8c84 <_init+0x124>
   173c0:	4603      	mov	r3, r0
   173c2:	b29b      	uxth	r3, r3
   173c4:	f507 7296 	add.w	r2, r7, #300	; 0x12c
   173c8:	201d      	movs	r0, #29
   173ca:	4611      	mov	r1, r2
   173cc:	461a      	mov	r2, r3
   173ce:	f7ff f8f7 	bl	165c0 <mapPut>


	GoalDestroyScreen(&hScreen);                             // Destroy screen
   173d2:	1d3b      	adds	r3, r7, #4
   173d4:	4618      	mov	r0, r3
   173d6:	f7f6 fda5 	bl	df24 <GoalDestroyScreen>

    goto lblEnd;
   173da:	e013      	b.n	17404 <Magnetic+0x644>

	// Errors treatment
    // ****************
lblKO:                                                       // None-classified low level error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Processing Error", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   173dc:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   173e0:	f2c0 0302 	movt	r3, #2
   173e4:	681b      	ldr	r3, [r3, #0]
   173e6:	2201      	movs	r2, #1
   173e8:	9200      	str	r2, [sp, #0]
   173ea:	f241 3288 	movw	r2, #5000	; 0x1388
   173ee:	9201      	str	r2, [sp, #4]
   173f0:	4618      	mov	r0, r3
   173f2:	2100      	movs	r1, #0
   173f4:	f245 2278 	movw	r2, #21112	; 0x5278
   173f8:	f2c0 0202 	movt	r2, #2
   173fc:	2304      	movs	r3, #4
   173fe:	f00a f891 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
   17402:	bf00      	nop
lblEnd:
	TimerStop(0);                                            // Stop Timer0
   17404:	2000      	movs	r0, #0
   17406:	f7fa f897 	bl	11538 <TimerStop>
    if(hMag2)
   1740a:	f107 030c 	add.w	r3, r7, #12
   1740e:	681b      	ldr	r3, [r3, #0]
   17410:	2b00      	cmp	r3, #0
   17412:	d004      	beq.n	1741e <Magnetic+0x65e>
		Telium_Fclose(hMag2);                                // Close mag2 peripheral
   17414:	f107 030c 	add.w	r3, r7, #12
   17418:	6818      	ldr	r0, [r3, #0]
   1741a:	f008 fa4d 	bl	1f8b8 <Telium_Fclose>
	if(hMag3)
   1741e:	f107 0310 	add.w	r3, r7, #16
   17422:	681b      	ldr	r3, [r3, #0]
   17424:	2b00      	cmp	r3, #0
   17426:	d004      	beq.n	17432 <Magnetic+0x672>
		Telium_Fclose(hMag3);                                // Close mag3 peripheral
   17428:	f107 0310 	add.w	r3, r7, #16
   1742c:	6818      	ldr	r0, [r3, #0]
   1742e:	f008 fa43 	bl	1f8b8 <Telium_Fclose>
	if(hMag31)
   17432:	f107 0308 	add.w	r3, r7, #8
   17436:	681b      	ldr	r3, [r3, #0]
   17438:	2b00      	cmp	r3, #0
   1743a:	d004      	beq.n	17446 <Magnetic+0x686>
		Telium_Fclose(hMag31);                               // Close mag31 peripheral
   1743c:	f107 0308 	add.w	r3, r7, #8
   17440:	6818      	ldr	r0, [r3, #0]
   17442:	f008 fa39 	bl	1f8b8 <Telium_Fclose>
	if (hScreen)
   17446:	1d3b      	adds	r3, r7, #4
   17448:	681b      	ldr	r3, [r3, #0]
   1744a:	2b00      	cmp	r3, #0
   1744c:	d003      	beq.n	17456 <Magnetic+0x696>
		GoalDestroyScreen(&hScreen);                         // Destroy screen
   1744e:	1d3b      	adds	r3, r7, #4
   17450:	4618      	mov	r0, r3
   17452:	f7f6 fd67 	bl	df24 <GoalDestroyScreen>
}
   17456:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1745a:	f2c0 0302 	movt	r3, #2
   1745e:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
   17462:	681b      	ldr	r3, [r3, #0]
   17464:	429a      	cmp	r2, r3
   17466:	d001      	beq.n	1746c <Magnetic+0x6ac>
   17468:	f7f1 fd9c 	bl	8fa4 <__stack_chk_fail>
   1746c:	f507 770c 	add.w	r7, r7, #560	; 0x230
   17470:	46bd      	mov	sp, r7
   17472:	bdb0      	pop	{r4, r5, r7, pc}

00017474 <ChkPpdConfig>:
//    >=0 : Right configuration (No pinpad=0 or pinpad present>0 1:B1 2:B2, 3:B3)
//     <0 : Wrong configuration (Wrong pinpad or pinpad missing but required=-1)
//****************************************************************************

static int ChkPpdConfig(void)
{
   17474:	b580      	push	{r7, lr}
   17476:	b0a0      	sub	sp, #128	; 0x80
   17478:	af02      	add	r7, sp, #8
   1747a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1747e:	f2c0 0302 	movt	r3, #2
   17482:	681b      	ldr	r3, [r3, #0]
   17484:	677b      	str	r3, [r7, #116]	; 0x74
	// Local variables
	// ***************
	T_GL_HWIDGET hDocument=NULL;
   17486:	2300      	movs	r3, #0
   17488:	60bb      	str	r3, [r7, #8]
	char tcReference[17+1];
	int iRet;

	// Check pinpad configuration from Manager
	// ***************************************
	iRet = PSQ_Is_pinpad();
   1748a:	f008 fd8b 	bl	1ffa4 <PSQ_Est_pinpad>
   1748e:	60f8      	str	r0, [r7, #12]
	if (iRet != 0)                                              // Manager asks for a pinpad
   17490:	68fb      	ldr	r3, [r7, #12]
   17492:	2b00      	cmp	r3, #0
   17494:	f000 815e 	beq.w	17754 <ChkPpdConfig+0x2e0>
	{
		memset(tcReference, 0, sizeof(tcReference));
   17498:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1749c:	4618      	mov	r0, r3
   1749e:	2100      	movs	r1, #0
   174a0:	2212      	movs	r2, #18
   174a2:	f7f1 eb8c 	blx	8bbc <_init+0x5c>
		iRet = IsPPSConnected(); CHECK(iRet==RET_PP_OK, lblKO); // Check if pinpad is connected
   174a6:	f008 fe23 	bl	200f0 <IsPPSConnected>
   174aa:	60f8      	str	r0, [r7, #12]
   174ac:	68fb      	ldr	r3, [r7, #12]
   174ae:	2b00      	cmp	r3, #0
   174b0:	f040 80e8 	bne.w	17684 <ChkPpdConfig+0x210>
		PPS_SendTerminalRefRequestCommand((byte*)tcReference);  // Get pinpad reference (Bug ret is always 0)
   174b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
   174b8:	4618      	mov	r0, r3
   174ba:	f008 fe53 	bl	20164 <PPS_SendTerminalRefRequestCommand>
		switch (PSQ_Pinpad_Value())
   174be:	f008 fda7 	bl	20010 <PSQ_donner_type_pinpad>
   174c2:	4603      	mov	r3, r0
   174c4:	2b09      	cmp	r3, #9
   174c6:	f200 80c5 	bhi.w	17654 <ChkPpdConfig+0x1e0>
   174ca:	a201      	add	r2, pc, #4	; (adr r2, 174d0 <ChkPpdConfig+0x5c>)
   174cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   174d0:	000174f9 	.word	0x000174f9
   174d4:	00017541 	.word	0x00017541
   174d8:	00017565 	.word	0x00017565
   174dc:	00017589 	.word	0x00017589
   174e0:	0001751d 	.word	0x0001751d
   174e4:	000175ab 	.word	0x000175ab
   174e8:	000175cd 	.word	0x000175cd
   174ec:	000175ef 	.word	0x000175ef
   174f0:	00017611 	.word	0x00017611
   174f4:	00017633 	.word	0x00017633
		{
		case PP30_PPAD:                                         // Pinpad characters no-reader Booster1
			CHECK (memcmp(&tcReference[8], "PP30 ", 5)==0, lblKO);
   174f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
   174fc:	3308      	adds	r3, #8
   174fe:	4618      	mov	r0, r3
   17500:	f645 2188 	movw	r1, #23176	; 0x5a88
   17504:	f2c0 0102 	movt	r1, #2
   17508:	2205      	movs	r2, #5
   1750a:	f7f1 ebf4 	blx	8cf4 <_init+0x194>
   1750e:	4603      	mov	r3, r0
   17510:	2b00      	cmp	r3, #0
   17512:	f040 80b7 	bne.w	17684 <ChkPpdConfig+0x210>
			iRet=BOOSTER_1;
   17516:	2301      	movs	r3, #1
   17518:	60fb      	str	r3, [r7, #12]
			break;
   1751a:	e0b2      	b.n	17682 <ChkPpdConfig+0x20e>
		case PP30S_PPAD:                                        // Pinpad characters no-reader Booster2
			CHECK (memcmp(&tcReference[8], "PP30S", 5)==0, lblKO);
   1751c:	f107 0360 	add.w	r3, r7, #96	; 0x60
   17520:	3308      	adds	r3, #8
   17522:	4618      	mov	r0, r3
   17524:	f645 2190 	movw	r1, #23184	; 0x5a90
   17528:	f2c0 0102 	movt	r1, #2
   1752c:	2205      	movs	r2, #5
   1752e:	f7f1 ebe2 	blx	8cf4 <_init+0x194>
   17532:	4603      	mov	r3, r0
   17534:	2b00      	cmp	r3, #0
   17536:	f040 80a5 	bne.w	17684 <ChkPpdConfig+0x210>
			iRet=BOOSTER_2;
   1753a:	2302      	movs	r3, #2
   1753c:	60fb      	str	r3, [r7, #12]
			break;
   1753e:	e0a0      	b.n	17682 <ChkPpdConfig+0x20e>
		case PPC30_PPAD:                                        // Pinpad graphic no-reader Booster1
			CHECK (memcmp(&tcReference[8], "PPC30", 5)==0, lblKO);
   17540:	f107 0360 	add.w	r3, r7, #96	; 0x60
   17544:	3308      	adds	r3, #8
   17546:	4618      	mov	r0, r3
   17548:	f645 2198 	movw	r1, #23192	; 0x5a98
   1754c:	f2c0 0102 	movt	r1, #2
   17550:	2205      	movs	r2, #5
   17552:	f7f1 ebd0 	blx	8cf4 <_init+0x194>
   17556:	4603      	mov	r3, r0
   17558:	2b00      	cmp	r3, #0
   1755a:	f040 8093 	bne.w	17684 <ChkPpdConfig+0x210>
			iRet=BOOSTER_1;
   1755e:	2301      	movs	r3, #1
   17560:	60fb      	str	r3, [r7, #12]
			break;
   17562:	e08e      	b.n	17682 <ChkPpdConfig+0x20e>
		case PPR30_PPAD:                                        // Pinpad graphic reader Booster1
			CHECK (memcmp(&tcReference[8], "PPR30", 5)==0, lblKO);
   17564:	f107 0360 	add.w	r3, r7, #96	; 0x60
   17568:	3308      	adds	r3, #8
   1756a:	4618      	mov	r0, r3
   1756c:	f645 21a0 	movw	r1, #23200	; 0x5aa0
   17570:	f2c0 0102 	movt	r1, #2
   17574:	2205      	movs	r2, #5
   17576:	f7f1 ebbe 	blx	8cf4 <_init+0x194>
   1757a:	4603      	mov	r3, r0
   1757c:	2b00      	cmp	r3, #0
   1757e:	f040 8081 	bne.w	17684 <ChkPpdConfig+0x210>
			iRet=BOOSTER_1;
   17582:	2301      	movs	r3, #1
   17584:	60fb      	str	r3, [r7, #12]
			break;
   17586:	e07c      	b.n	17682 <ChkPpdConfig+0x20e>
		case P30_PPAD:                                          // Pinpad graphic reader Booster2
			CHECK (memcmp(&tcReference[8], "P30  ", 5)==0, lblKO);
   17588:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1758c:	3308      	adds	r3, #8
   1758e:	4618      	mov	r0, r3
   17590:	f645 21a8 	movw	r1, #23208	; 0x5aa8
   17594:	f2c0 0102 	movt	r1, #2
   17598:	2205      	movs	r2, #5
   1759a:	f7f1 ebac 	blx	8cf4 <_init+0x194>
   1759e:	4603      	mov	r3, r0
   175a0:	2b00      	cmp	r3, #0
   175a2:	d16f      	bne.n	17684 <ChkPpdConfig+0x210>
			iRet=BOOSTER_2;
   175a4:	2302      	movs	r3, #2
   175a6:	60fb      	str	r3, [r7, #12]
			break;
   175a8:	e06b      	b.n	17682 <ChkPpdConfig+0x20e>
		case IPP220_PPAD:                                       // Pinpad character no-reader Booster3
			CHECK (memcmp(&tcReference[8], "IPP2XX", 6)==0, lblKO);
   175aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
   175ae:	3308      	adds	r3, #8
   175b0:	4618      	mov	r0, r3
   175b2:	f645 21b0 	movw	r1, #23216	; 0x5ab0
   175b6:	f2c0 0102 	movt	r1, #2
   175ba:	2206      	movs	r2, #6
   175bc:	f7f1 eb9a 	blx	8cf4 <_init+0x194>
   175c0:	4603      	mov	r3, r0
   175c2:	2b00      	cmp	r3, #0
   175c4:	d15e      	bne.n	17684 <ChkPpdConfig+0x210>
			iRet=BOOSTER_3;
   175c6:	2303      	movs	r3, #3
   175c8:	60fb      	str	r3, [r7, #12]
			break;
   175ca:	e05a      	b.n	17682 <ChkPpdConfig+0x20e>
		case IPP250_PPAD:                                       // Pinpad character no-reader color Booster3
			CHECK (memcmp(&tcReference[8], "IPP2XX", 6)==0, lblKO);
   175cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
   175d0:	3308      	adds	r3, #8
   175d2:	4618      	mov	r0, r3
   175d4:	f645 21b0 	movw	r1, #23216	; 0x5ab0
   175d8:	f2c0 0102 	movt	r1, #2
   175dc:	2206      	movs	r2, #6
   175de:	f7f1 eb8a 	blx	8cf4 <_init+0x194>
   175e2:	4603      	mov	r3, r0
   175e4:	2b00      	cmp	r3, #0
   175e6:	d14d      	bne.n	17684 <ChkPpdConfig+0x210>
			iRet=BOOSTER_3;
   175e8:	2303      	movs	r3, #3
   175ea:	60fb      	str	r3, [r7, #12]
			break;
   175ec:	e049      	b.n	17682 <ChkPpdConfig+0x20e>
		case IPP280_PPAD:                                       // Pinpad graphic no-reader color Booster3
			CHECK (memcmp(&tcReference[8], "IPP2XX", 6)==0, lblKO);
   175ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
   175f2:	3308      	adds	r3, #8
   175f4:	4618      	mov	r0, r3
   175f6:	f645 21b0 	movw	r1, #23216	; 0x5ab0
   175fa:	f2c0 0102 	movt	r1, #2
   175fe:	2206      	movs	r2, #6
   17600:	f7f1 eb78 	blx	8cf4 <_init+0x194>
   17604:	4603      	mov	r3, r0
   17606:	2b00      	cmp	r3, #0
   17608:	d13c      	bne.n	17684 <ChkPpdConfig+0x210>
			iRet=BOOSTER_3;
   1760a:	2303      	movs	r3, #3
   1760c:	60fb      	str	r3, [r7, #12]
			break;
   1760e:	e038      	b.n	17682 <ChkPpdConfig+0x20e>
		case IPP320_PPAD:                                       // Pinpad graphic reader Booster3
			CHECK (memcmp(&tcReference[8], "IPP3XX", 6)==0, lblKO);
   17610:	f107 0360 	add.w	r3, r7, #96	; 0x60
   17614:	3308      	adds	r3, #8
   17616:	4618      	mov	r0, r3
   17618:	f645 21b8 	movw	r1, #23224	; 0x5ab8
   1761c:	f2c0 0102 	movt	r1, #2
   17620:	2206      	movs	r2, #6
   17622:	f7f1 eb68 	blx	8cf4 <_init+0x194>
   17626:	4603      	mov	r3, r0
   17628:	2b00      	cmp	r3, #0
   1762a:	d12b      	bne.n	17684 <ChkPpdConfig+0x210>
			iRet=BOOSTER_3;
   1762c:	2303      	movs	r3, #3
   1762e:	60fb      	str	r3, [r7, #12]
			break;
   17630:	e027      	b.n	17682 <ChkPpdConfig+0x20e>
		case IPP350_PPAD:                                       // Pinpad graphic reader color Booster3
			CHECK (memcmp(&tcReference[8], "IPP3XX", 6)==0, lblKO);
   17632:	f107 0360 	add.w	r3, r7, #96	; 0x60
   17636:	3308      	adds	r3, #8
   17638:	4618      	mov	r0, r3
   1763a:	f645 21b8 	movw	r1, #23224	; 0x5ab8
   1763e:	f2c0 0102 	movt	r1, #2
   17642:	2206      	movs	r2, #6
   17644:	f7f1 eb56 	blx	8cf4 <_init+0x194>
   17648:	4603      	mov	r3, r0
   1764a:	2b00      	cmp	r3, #0
   1764c:	d11a      	bne.n	17684 <ChkPpdConfig+0x210>
			iRet=BOOSTER_3;
   1764e:	2303      	movs	r3, #3
   17650:	60fb      	str	r3, [r7, #12]
			break;
   17652:	e016      	b.n	17682 <ChkPpdConfig+0x20e>
		default:                                                // Pinpad not supported
			GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Pin Pad Unknown", GL_ICON_WARNING, GL_BUTTON_VALID, 5*1000);
   17654:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   17658:	f2c0 0302 	movt	r3, #2
   1765c:	681b      	ldr	r3, [r3, #0]
   1765e:	2201      	movs	r2, #1
   17660:	9200      	str	r2, [sp, #0]
   17662:	f241 3288 	movw	r2, #5000	; 0x1388
   17666:	9201      	str	r2, [sp, #4]
   17668:	4618      	mov	r0, r3
   1766a:	2100      	movs	r1, #0
   1766c:	f645 22c0 	movw	r2, #23232	; 0x5ac0
   17670:	f2c0 0202 	movt	r2, #2
   17674:	2303      	movs	r3, #3
   17676:	f009 ff55 	bl	21524 <GL_Dialog_Message>
			iRet=-1;
   1767a:	f04f 33ff 	mov.w	r3, #4294967295
   1767e:	60fb      	str	r3, [r7, #12]
			break;
   17680:	bf00      	nop
		}
	}

	goto lblEnd;                                                // Right pinpad configuration (No pinpad or pinpad present)
   17682:	e067      	b.n	17754 <ChkPpdConfig+0x2e0>

	// Errors treatment
	// ****************
	lblKO:                                                          // Pinpad required (pinpad disconnected or missing)
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Pin Pad Required\nCheck Configuration", GL_ICON_ERROR, GL_BUTTON_NONE, 0);
   17684:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   17688:	f2c0 0302 	movt	r3, #2
   1768c:	681b      	ldr	r3, [r3, #0]
   1768e:	2200      	movs	r2, #0
   17690:	9200      	str	r2, [sp, #0]
   17692:	2200      	movs	r2, #0
   17694:	9201      	str	r2, [sp, #4]
   17696:	4618      	mov	r0, r3
   17698:	2100      	movs	r1, #0
   1769a:	f645 22d0 	movw	r2, #23248	; 0x5ad0
   1769e:	f2c0 0202 	movt	r2, #2
   176a2:	2304      	movs	r3, #4
   176a4:	f009 ff3e 	bl	21524 <GL_Dialog_Message>

	hDocument = GoalCreateDocument(gGoalGraphicLibInstance, GL_ENCODING_UTF8);    // Create document
   176a8:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   176ac:	f2c0 0302 	movt	r3, #2
   176b0:	681b      	ldr	r3, [r3, #0]
   176b2:	4618      	mov	r0, r3
   176b4:	2100      	movs	r1, #0
   176b6:	f7f7 fbe9 	bl	ee8c <GoalCreateDocument>
   176ba:	4603      	mov	r3, r0
   176bc:	60bb      	str	r3, [r7, #8]
	if (hDocument != NULL)
   176be:	68bb      	ldr	r3, [r7, #8]
   176c0:	2b00      	cmp	r3, #0
   176c2:	d043      	beq.n	1774c <ChkPpdConfig+0x2d8>
	{
		p=0;
   176c4:	2300      	movs	r3, #0
   176c6:	71fb      	strb	r3, [r7, #7]
		xLine = xPrinter;
   176c8:	f645 13f0 	movw	r3, #23024	; 0x59f0
   176cc:	f2c0 0302 	movt	r3, #2
   176d0:	f107 0110 	add.w	r1, r7, #16
   176d4:	461a      	mov	r2, r3
   176d6:	2350      	movs	r3, #80	; 0x50
   176d8:	4608      	mov	r0, r1
   176da:	4611      	mov	r1, r2
   176dc:	461a      	mov	r2, r3
   176de:	f7f1 eacc 	blx	8c78 <_init+0x118>
		xLine.eBackAlign = GL_ALIGN_LEFT;
   176e2:	2301      	movs	r3, #1
   176e4:	617b      	str	r3, [r7, #20]
		xLine.xFont.eScale = GL_SCALE_XLARGE;
   176e6:	f643 73f5 	movw	r3, #16373	; 0x3ff5
   176ea:	65fb      	str	r3, [r7, #92]	; 0x5c
		xLine.xFont.eStyle = GL_FONT_STYLE_BOLD;                // Requirement
   176ec:	2302      	movs	r3, #2
   176ee:	65bb      	str	r3, [r7, #88]	; 0x58
		GoalPrnLine(hDocument, p++, "Pinpad problem!!!", &xLine);
   176f0:	68b9      	ldr	r1, [r7, #8]
   176f2:	79fb      	ldrb	r3, [r7, #7]
   176f4:	b29a      	uxth	r2, r3
   176f6:	79fb      	ldrb	r3, [r7, #7]
   176f8:	3301      	adds	r3, #1
   176fa:	71fb      	strb	r3, [r7, #7]
   176fc:	f107 0310 	add.w	r3, r7, #16
   17700:	4608      	mov	r0, r1
   17702:	4611      	mov	r1, r2
   17704:	f645 22f8 	movw	r2, #23288	; 0x5af8
   17708:	f2c0 0202 	movt	r2, #2
   1770c:	f7f7 fbfa 	bl	ef04 <GoalPrnLine>
		xLine.xFont.eScale = GL_SCALE_LARGE;
   17710:	f643 73f4 	movw	r3, #16372	; 0x3ff4
   17714:	65fb      	str	r3, [r7, #92]	; 0x5c
		xLine.xFont.eStyle = GL_FONT_STYLE_NORMAL;
   17716:	2300      	movs	r3, #0
   17718:	65bb      	str	r3, [r7, #88]	; 0x58
		GoalPrnLine(hDocument, p++, "     ----------------------------------\n"
   1771a:	68b9      	ldr	r1, [r7, #8]
   1771c:	79fb      	ldrb	r3, [r7, #7]
   1771e:	b29a      	uxth	r2, r3
   17720:	79fb      	ldrb	r3, [r7, #7]
   17722:	3301      	adds	r3, #1
   17724:	71fb      	strb	r3, [r7, #7]
				"=> Check MANAGER config\n"
				"     -------------- OR --------------\n"
				"Pinpad required\n"
				"=> Check MANAGER config\n"
				"     ----------------------------------\n"
				"\n\n\n\n", &xLine);
   17726:	f107 0310 	add.w	r3, r7, #16
		xLine.xFont.eScale = GL_SCALE_XLARGE;
		xLine.xFont.eStyle = GL_FONT_STYLE_BOLD;                // Requirement
		GoalPrnLine(hDocument, p++, "Pinpad problem!!!", &xLine);
		xLine.xFont.eScale = GL_SCALE_LARGE;
		xLine.xFont.eStyle = GL_FONT_STYLE_NORMAL;
		GoalPrnLine(hDocument, p++, "     ----------------------------------\n"
   1772a:	4608      	mov	r0, r1
   1772c:	4611      	mov	r1, r2
   1772e:	f645 320c 	movw	r2, #23308	; 0x5b0c
   17732:	f2c0 0202 	movt	r2, #2
   17736:	f7f7 fbe5 	bl	ef04 <GoalPrnLine>
				"     -------------- OR --------------\n"
				"Pinpad required\n"
				"=> Check MANAGER config\n"
				"     ----------------------------------\n"
				"\n\n\n\n", &xLine);
		GoalPrnDocument(hDocument);                             // Print document
   1773a:	68bb      	ldr	r3, [r7, #8]
   1773c:	4618      	mov	r0, r3
   1773e:	f7f7 fdf3 	bl	f328 <GoalPrnDocument>

		GoalDestroyDocument(&hDocument);                        // Destroy document
   17742:	f107 0308 	add.w	r3, r7, #8
   17746:	4618      	mov	r0, r3
   17748:	f7f7 fe1a 	bl	f380 <GoalDestroyDocument>
	}
	iRet=-1;
   1774c:	f04f 33ff 	mov.w	r3, #4294967295
   17750:	60fb      	str	r3, [r7, #12]
	goto lblEnd;
   17752:	e000      	b.n	17756 <ChkPpdConfig+0x2e2>
			iRet=-1;
			break;
		}
	}

	goto lblEnd;                                                // Right pinpad configuration (No pinpad or pinpad present)
   17754:	bf00      	nop
		GoalDestroyDocument(&hDocument);                        // Destroy document
	}
	iRet=-1;
	goto lblEnd;
	lblEnd:
	return iRet;
   17756:	68fb      	ldr	r3, [r7, #12]
}
   17758:	4618      	mov	r0, r3
   1775a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1775e:	f2c0 0302 	movt	r3, #2
   17762:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   17764:	681b      	ldr	r3, [r3, #0]
   17766:	429a      	cmp	r2, r3
   17768:	d001      	beq.n	1776e <ChkPpdConfig+0x2fa>
   1776a:	f7f1 fc1b 	bl	8fa4 <__stack_chk_fail>
   1776e:	f107 0778 	add.w	r7, r7, #120	; 0x78
   17772:	46bd      	mov	sp, r7
   17774:	bd80      	pop	{r7, pc}
   17776:	bf00      	nop

00017778 <GetPpdDisplay>:
//     0 : No pinpad connected
//    -1 : Processing error
//****************************************************************************

int GetPpdDisplay(void)
{
   17778:	b580      	push	{r7, lr}
   1777a:	b084      	sub	sp, #16
   1777c:	af00      	add	r7, sp, #0
   1777e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   17782:	f2c0 0302 	movt	r3, #2
   17786:	681b      	ldr	r3, [r3, #0]
   17788:	60fb      	str	r3, [r7, #12]
	int iDisplay;
	int iRet;

	// Check if pinpad declared from Manager and connected to the terminal
	// *******************************************************************
	iRet = PSQ_Is_pinpad(); CHECK(iRet!=0, lblKO);
   1778a:	f008 fc0b 	bl	1ffa4 <PSQ_Est_pinpad>
   1778e:	60b8      	str	r0, [r7, #8]
   17790:	68bb      	ldr	r3, [r7, #8]
   17792:	2b00      	cmp	r3, #0
   17794:	d022      	beq.n	177dc <GetPpdDisplay+0x64>
	iRet = IsPPSConnected(); CHECK(iRet==RET_PP_OK, lblKO);
   17796:	f008 fcab 	bl	200f0 <IsPPSConnected>
   1779a:	60b8      	str	r0, [r7, #8]
   1779c:	68bb      	ldr	r3, [r7, #8]
   1779e:	2b00      	cmp	r3, #0
   177a0:	d11c      	bne.n	177dc <GetPpdDisplay+0x64>

	// Retrieve the type of display
	// ****************************
	iRet = PSQ_Pinpad_Value();
   177a2:	f008 fc35 	bl	20010 <PSQ_donner_type_pinpad>
   177a6:	60b8      	str	r0, [r7, #8]
	switch (iRet)
   177a8:	68bb      	ldr	r3, [r7, #8]
   177aa:	2b0c      	cmp	r3, #12
   177ac:	d811      	bhi.n	177d2 <GetPpdDisplay+0x5a>
   177ae:	2201      	movs	r2, #1
   177b0:	68bb      	ldr	r3, [r7, #8]
   177b2:	409a      	lsls	r2, r3
   177b4:	f641 338e 	movw	r3, #7054	; 0x1b8e
   177b8:	4013      	ands	r3, r2
   177ba:	2b00      	cmp	r3, #0
   177bc:	d106      	bne.n	177cc <GetPpdDisplay+0x54>
   177be:	f002 0371 	and.w	r3, r2, #113	; 0x71
   177c2:	2b00      	cmp	r3, #0
   177c4:	d005      	beq.n	177d2 <GetPpdDisplay+0x5a>
	{
	case PP30_PPAD:          // Pinpad CHARACTERS no-reader Booster1
	case PP30S_PPAD:         // Pinpad CHARACTERS no-reader Booster2
	case IPP220_PPAD:        // Pinpad CHARACTERS no-reader Booster3
	case IPP250_PPAD:        // Pinpad CHARACTERS no-reader color Booster3
		iDisplay=1;          // Display = CHARACTERS
   177c6:	2301      	movs	r3, #1
   177c8:	607b      	str	r3, [r7, #4]
		break;
   177ca:	e006      	b.n	177da <GetPpdDisplay+0x62>
	case IPP280_PPAD:        // Pinpad GRAPHIC no-reader color Booster3
	case IPP320_PPAD:        // Pinpad GRAPHIC reader Booster3
	case IPP350_PPAD:        // Pinpad GRAPHIC reader color Booster3
	case IPP310_PPAD:        // Pinpad GRAPHIC reader Booster3 for TETRA
	case IPP315_PPAD:        // Pinpad GRAPHIC reader color Booster3 for TETRA
		iDisplay=2;          // Display = GRAPHIC
   177cc:	2302      	movs	r3, #2
   177ce:	607b      	str	r3, [r7, #4]
		break;
   177d0:	e003      	b.n	177da <GetPpdDisplay+0x62>
	default:
		iDisplay=-1;         // Pinpad unknown
   177d2:	f04f 33ff 	mov.w	r3, #4294967295
   177d6:	607b      	str	r3, [r7, #4]
		break;
   177d8:	bf00      	nop
	}

	goto lblEnd;
   177da:	e002      	b.n	177e2 <GetPpdDisplay+0x6a>

	// Errors treatment
	// ****************
	lblKO:
	iDisplay=0;              // No pinpad connected
   177dc:	2300      	movs	r3, #0
   177de:	607b      	str	r3, [r7, #4]
	goto lblEnd;
   177e0:	bf00      	nop
	lblEnd:
	return iDisplay;
   177e2:	687b      	ldr	r3, [r7, #4]
}
   177e4:	4618      	mov	r0, r3
   177e6:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   177ea:	f2c0 0302 	movt	r3, #2
   177ee:	68fa      	ldr	r2, [r7, #12]
   177f0:	681b      	ldr	r3, [r3, #0]
   177f2:	429a      	cmp	r2, r3
   177f4:	d001      	beq.n	177fa <GetPpdDisplay+0x82>
   177f6:	f7f1 fbd5 	bl	8fa4 <__stack_chk_fail>
   177fa:	f107 0710 	add.w	r7, r7, #16
   177fe:	46bd      	mov	sp, r7
   17800:	bd80      	pop	{r7, pc}
   17802:	bf00      	nop

00017804 <IsPinOnPpd>:
//     0 : Pin entry on terminal
//    -1 : Processing error
//****************************************************************************

static int IsPinOnPpd(void)
{
   17804:	b580      	push	{r7, lr}
   17806:	b098      	sub	sp, #96	; 0x60
   17808:	af00      	add	r7, sp, #0
   1780a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1780e:	f2c0 0302 	movt	r3, #2
   17812:	681b      	ldr	r3, [r3, #0]
   17814:	65fb      	str	r3, [r7, #92]	; 0x5c
	T_SEC_CONFIG txConfParts[C_NB_PARTS];
	int iRet, iNbParts;

	// Get the configuration of the security component
	// ***********************************************
	iRet = SEC_GetConfig(&iNbParts, txConfParts);  // Get number and parameters of secure parts
   17816:	1d3a      	adds	r2, r7, #4
   17818:	f107 030c 	add.w	r3, r7, #12
   1781c:	4610      	mov	r0, r2
   1781e:	4619      	mov	r1, r3
   17820:	f009 fd19 	bl	21256 <SEC_GetConfig>
   17824:	60b8      	str	r0, [r7, #8]
	CHECK(iRet==OK, lblKO);
   17826:	68bb      	ldr	r3, [r7, #8]
   17828:	2b00      	cmp	r3, #0
   1782a:	d117      	bne.n	1785c <IsPinOnPpd+0x58>

	// Analyze C_SEC_PINCODE secure part
	// *********************************
	iRet = GetPpdDisplay(); CHECK(iRet>=0, lblKO); // Pin entry on pinpad or terminal?
   1782c:	f7ff ffa4 	bl	17778 <GetPpdDisplay>
   17830:	60b8      	str	r0, [r7, #8]
   17832:	68bb      	ldr	r3, [r7, #8]
   17834:	2b00      	cmp	r3, #0
   17836:	db11      	blt.n	1785c <IsPinOnPpd+0x58>
	if (iRet != 0)                                 // Pinpad connected
   17838:	68bb      	ldr	r3, [r7, #8]
   1783a:	2b00      	cmp	r3, #0
   1783c:	d012      	beq.n	17864 <IsPinOnPpd+0x60>
		if (memcmp(txConfParts[C_SEC_PINCODE-1].ptszBoosterPeripheral, IAPP_USB_NAME, strlen(IAPP_USB_NAME)) != 0)
   1783e:	697b      	ldr	r3, [r7, #20]
   17840:	4618      	mov	r0, r3
   17842:	f645 412c 	movw	r1, #23596	; 0x5c2c
   17846:	f2c0 0102 	movt	r1, #2
   1784a:	2208      	movs	r2, #8
   1784c:	f7f1 ea52 	blx	8cf4 <_init+0x194>
   17850:	4603      	mov	r3, r0
   17852:	2b00      	cmp	r3, #0
   17854:	d006      	beq.n	17864 <IsPinOnPpd+0x60>
			iRet=0;                                // Pin entry redirected to terminal
   17856:	2300      	movs	r3, #0
   17858:	60bb      	str	r3, [r7, #8]

	goto lblEnd;
   1785a:	e003      	b.n	17864 <IsPinOnPpd+0x60>

	// Errors treatment
	// ****************
	lblKO:
	iRet=-1;
   1785c:	f04f 33ff 	mov.w	r3, #4294967295
   17860:	60bb      	str	r3, [r7, #8]
	goto lblEnd;
   17862:	e000      	b.n	17866 <IsPinOnPpd+0x62>
	iRet = GetPpdDisplay(); CHECK(iRet>=0, lblKO); // Pin entry on pinpad or terminal?
	if (iRet != 0)                                 // Pinpad connected
		if (memcmp(txConfParts[C_SEC_PINCODE-1].ptszBoosterPeripheral, IAPP_USB_NAME, strlen(IAPP_USB_NAME)) != 0)
			iRet=0;                                // Pin entry redirected to terminal

	goto lblEnd;
   17864:	bf00      	nop
	// ****************
	lblKO:
	iRet=-1;
	goto lblEnd;
	lblEnd:
	return iRet;
   17866:	68bb      	ldr	r3, [r7, #8]
}
   17868:	4618      	mov	r0, r3
   1786a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1786e:	f2c0 0302 	movt	r3, #2
   17872:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   17874:	681b      	ldr	r3, [r3, #0]
   17876:	429a      	cmp	r2, r3
   17878:	d001      	beq.n	1787e <IsPinOnPpd+0x7a>
   1787a:	f7f1 fb93 	bl	8fa4 <__stack_chk_fail>
   1787e:	f107 0760 	add.w	r7, r7, #96	; 0x60
   17882:	46bd      	mov	sp, r7
   17884:	bd80      	pop	{r7, pc}
   17886:	bf00      	nop

00017888 <AreaId>:
//  This function has return value.
//    The AreaId value.
//****************************************************************************

static int AreaId (void)
{
   17888:	b580      	push	{r7, lr}
   1788a:	b09a      	sub	sp, #104	; 0x68
   1788c:	af00      	add	r7, sp, #0
   1788e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   17892:	f2c0 0302 	movt	r3, #2
   17896:	681b      	ldr	r3, [r3, #0]
   17898:	667b      	str	r3, [r7, #100]	; 0x64
	T_SEC_CONFIG txConfParts[C_NB_PARTS];
	int iNbParts, iBoosterType, iAreaId, iRet;

	// Get the configuration of the security component
	// ***********************************************
	iRet = SEC_GetConfig(&iNbParts, txConfParts);  // Get number and parameters of secure parts
   1789a:	1d3a      	adds	r2, r7, #4
   1789c:	f107 0314 	add.w	r3, r7, #20
   178a0:	4610      	mov	r0, r2
   178a2:	4619      	mov	r1, r3
   178a4:	f009 fcd7 	bl	21256 <SEC_GetConfig>
   178a8:	6138      	str	r0, [r7, #16]
	if (iRet != OK) return 0;                      // No booster => no area id
   178aa:	693b      	ldr	r3, [r7, #16]
   178ac:	2b00      	cmp	r3, #0
   178ae:	d001      	beq.n	178b4 <AreaId+0x2c>
   178b0:	2300      	movs	r3, #0
   178b2:	e045      	b.n	17940 <AreaId+0xb8>

	// Analyze C_SEC_CIPHERING secure part
	// ***********************************
	switch (txConfParts[C_SEC_CIPHERING-1].cBoosterType)
   178b4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
   178b8:	2b01      	cmp	r3, #1
   178ba:	d006      	beq.n	178ca <AreaId+0x42>
   178bc:	2b04      	cmp	r3, #4
   178be:	d013      	beq.n	178e8 <AreaId+0x60>
   178c0:	2b00      	cmp	r3, #0
   178c2:	d114      	bne.n	178ee <AreaId+0x66>
	{
	case C_SEC_BL1:    iBoosterType = BOOSTER_1;     break;   // Booster 1 (1)
   178c4:	2301      	movs	r3, #1
   178c6:	60bb      	str	r3, [r7, #8]
   178c8:	e015      	b.n	178f6 <AreaId+0x6e>
	case C_SEC_BL2:                                           // Booster 2 or 3 (2 or 3)
		iBoosterType = ChkPpdConfig();    // Booster type from pinpad if plugged
   178ca:	f7ff fdd3 	bl	17474 <ChkPpdConfig>
   178ce:	60b8      	str	r0, [r7, #8]
		if (iBoosterType < 0)
   178d0:	68bb      	ldr	r3, [r7, #8]
   178d2:	2b00      	cmp	r3, #0
   178d4:	da01      	bge.n	178da <AreaId+0x52>
			return 0;                     // Processing error => No VarId
   178d6:	2300      	movs	r3, #0
   178d8:	e032      	b.n	17940 <AreaId+0xb8>
		if (iBoosterType == 0)            // No pinpad
   178da:	68bb      	ldr	r3, [r7, #8]
   178dc:	2b00      	cmp	r3, #0
   178de:	d109      	bne.n	178f4 <AreaId+0x6c>
			iBoosterType = BoosterType(); // Booster type from terminal
   178e0:	f008 fd6c 	bl	203bc <BoosterType>
   178e4:	60b8      	str	r0, [r7, #8]
		break;
   178e6:	e005      	b.n	178f4 <AreaId+0x6c>
#ifdef __TELIUM3__
	case C_SEC_ISLERO: iBoosterType = BOOSTER_3+1;   break;   // Secure unit islero (4)
   178e8:	2304      	movs	r3, #4
   178ea:	60bb      	str	r3, [r7, #8]
   178ec:	e003      	b.n	178f6 <AreaId+0x6e>
#endif
	default:           iBoosterType = NO_BOOSTER;    break;   // Should not occur (0)
   178ee:	2300      	movs	r3, #0
   178f0:	60bb      	str	r3, [r7, #8]
   178f2:	e000      	b.n	178f6 <AreaId+0x6e>
		iBoosterType = ChkPpdConfig();    // Booster type from pinpad if plugged
		if (iBoosterType < 0)
			return 0;                     // Processing error => No VarId
		if (iBoosterType == 0)            // No pinpad
			iBoosterType = BoosterType(); // Booster type from terminal
		break;
   178f4:	bf00      	nop
		//             (2 first bytes from 0000 to 3FFF)
		// On Tetra    (ISLERO) ASID=0x800C SerialNumber=Unknown (Certificate)
		// Secret area identification from 00002130 to FFFF2F3F
		//             (2 first bytes from 0000 to FFFF)
		// =====================================================================
		switch (iBoosterType)
   178f6:	68bb      	ldr	r3, [r7, #8]
   178f8:	3b01      	subs	r3, #1
   178fa:	2b03      	cmp	r3, #3
   178fc:	d81c      	bhi.n	17938 <AreaId+0xb0>
   178fe:	a201      	add	r2, pc, #4	; (adr r2, 17904 <AreaId+0x7c>)
   17900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17904:	00017915 	.word	0x00017915
   17908:	00017915 	.word	0x00017915
   1790c:	00017921 	.word	0x00017921
   17910:	0001792d 	.word	0x0001792d
		{
		case BOOSTER_1:
		case BOOSTER_2:
			// Could be VarId=0x00FA but NOT MANDATORY + 2&3 fixed + 1&0 user
			iAreaId = 0x00FA2130;
   17914:	f242 1330 	movw	r3, #8496	; 0x2130
   17918:	f2c0 03fa 	movt	r3, #250	; 0xfa
   1791c:	60fb      	str	r3, [r7, #12]
			break;
   1791e:	e00e      	b.n	1793e <AreaId+0xb6>
		case BOOSTER_3:
			// Could be VarId=0x0000 but NOT MANDATORY + 2&3 fixed + 1&0 user
			iAreaId = 0x010D2130;
   17920:	f242 1330 	movw	r3, #8496	; 0x2130
   17924:	f2c0 130d 	movt	r3, #269	; 0x10d
   17928:	60fb      	str	r3, [r7, #12]
			break;
   1792a:	e008      	b.n	1793e <AreaId+0xb6>
		case BOOSTER_3+1:
		// Could be ASID=0x800C but NOT MANDATORY + 2&3 fixed + 1&0 user
		iAreaId = 0x015C2131;
   1792c:	f242 1331 	movw	r3, #8497	; 0x2131
   17930:	f2c0 135c 	movt	r3, #348	; 0x15c
   17934:	60fb      	str	r3, [r7, #12]
		break;
   17936:	e002      	b.n	1793e <AreaId+0xb6>
		default:
			iAreaId = 0;
   17938:	2300      	movs	r3, #0
   1793a:	60fb      	str	r3, [r7, #12]
			break;
   1793c:	bf00      	nop
			iAreaId = 0;
			break;
		}
	}

	return iAreaId;
   1793e:	68fb      	ldr	r3, [r7, #12]
}
   17940:	4618      	mov	r0, r3
   17942:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   17946:	f2c0 0302 	movt	r3, #2
   1794a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1794c:	681b      	ldr	r3, [r3, #0]
   1794e:	429a      	cmp	r2, r3
   17950:	d001      	beq.n	17956 <AreaId+0xce>
   17952:	f7f1 fb27 	bl	8fa4 <__stack_chk_fail>
   17956:	f107 0768 	add.w	r7, r7, #104	; 0x68
   1795a:	46bd      	mov	sp, r7
   1795c:	bd80      	pop	{r7, pc}
   1795e:	bf00      	nop

00017960 <PinEntry>:
//    <0 : Pin entry failed
//****************************************************************************

static int PinEntry(const char *pcMsg1, const char *pcMsg2,
		const char *pcMsg1Idle, const char *pcMsg2Idle, byte ucTimeOut)
{
   17960:	b580      	push	{r7, lr}
   17962:	b09a      	sub	sp, #104	; 0x68
   17964:	af02      	add	r7, sp, #8
   17966:	6178      	str	r0, [r7, #20]
   17968:	6139      	str	r1, [r7, #16]
   1796a:	60fa      	str	r2, [r7, #12]
   1796c:	60bb      	str	r3, [r7, #8]
   1796e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   17972:	71fb      	strb	r3, [r7, #7]
   17974:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   17978:	f2c0 0302 	movt	r3, #2
   1797c:	681b      	ldr	r3, [r3, #0]
   1797e:	65fb      	str	r3, [r7, #92]	; 0x5c
	// Local variables
	// ***************
	T_GL_HWIDGET hScreen=NULL;
   17980:	2300      	movs	r3, #0
   17982:	61fb      	str	r3, [r7, #28]
	doubleword uiEvent=0, uiEveWait;
   17984:	2300      	movs	r3, #0
   17986:	62bb      	str	r3, [r7, #40]	; 0x28
	char tcPin[16+1];
	int iContinue=TRUE;
   17988:	2301      	movs	r3, #1
   1798a:	627b      	str	r3, [r7, #36]	; 0x24
	bool bExitPin=FALSE;
   1798c:	2300      	movs	r3, #0
   1798e:	76fb      	strb	r3, [r7, #27]
	int iPpd, iPinSize, iRet;
	T_SEC_ENTRYCONF xEntryCfg;

	// Prompt messages on terminal or PinPad
	// *************************************
	iPpd = IsPinOnPpd(); CHECK(iPpd>=0, lblKO);
   17990:	f7ff ff38 	bl	17804 <IsPinOnPpd>
   17994:	6378      	str	r0, [r7, #52]	; 0x34
   17996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17998:	2b00      	cmp	r3, #0
   1799a:	f2c0 8225 	blt.w	17de8 <PinEntry+0x488>
	switch (iPpd)
   1799e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   179a0:	2b01      	cmp	r3, #1
   179a2:	d05f      	beq.n	17a64 <PinEntry+0x104>
   179a4:	2b02      	cmp	r3, #2
   179a6:	d07e      	beq.n	17aa6 <PinEntry+0x146>
   179a8:	2b00      	cmp	r3, #0
   179aa:	f040 80aa 	bne.w	17b02 <PinEntry+0x1a2>
	{
	case 0:                                                                                // *** Pin on terminal
		hScreen = GoalCreateScreen(gGoalGraphicLibInstance, txPin, NUMBER_OF_LINES(txPin), GL_ENCODING_UTF8);
   179ae:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   179b2:	f2c0 0302 	movt	r3, #2
   179b6:	681b      	ldr	r3, [r3, #0]
   179b8:	4618      	mov	r0, r3
   179ba:	f245 6194 	movw	r1, #22164	; 0x5694
   179be:	f2c0 0102 	movt	r1, #2
   179c2:	2203      	movs	r2, #3
   179c4:	2300      	movs	r3, #0
   179c6:	f7f5 fb5d 	bl	d084 <GoalCreateScreen>
   179ca:	4603      	mov	r3, r0
   179cc:	61fb      	str	r3, [r7, #28]
		CHECK(hScreen!=NULL, lblKO);                                                       // Create screen and clear it
   179ce:	69fb      	ldr	r3, [r7, #28]
   179d0:	2b00      	cmp	r3, #0
   179d2:	f000 8209 	beq.w	17de8 <PinEntry+0x488>
		iRet = GoalClrScreen(hScreen, GL_COLOR_TRANSPARENT, 0, false);
   179d6:	69fb      	ldr	r3, [r7, #28]
   179d8:	4618      	mov	r0, r3
   179da:	2100      	movs	r1, #0
   179dc:	2200      	movs	r2, #0
   179de:	2300      	movs	r3, #0
   179e0:	f7f5 fcee 	bl	d3c0 <GoalClrScreen>
   179e4:	6338      	str	r0, [r7, #48]	; 0x30
		CHECK(iRet>=0, lblKO);
   179e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   179e8:	2b00      	cmp	r3, #0
   179ea:	f2c0 81fd 	blt.w	17de8 <PinEntry+0x488>

		iRet = GoalDspLine(hScreen, 0, (char*) (pcMsg1+8), &txPin[0], 0, false);           // Amount message on terminal
   179ee:	69fa      	ldr	r2, [r7, #28]
   179f0:	697b      	ldr	r3, [r7, #20]
   179f2:	3308      	adds	r3, #8
   179f4:	2100      	movs	r1, #0
   179f6:	9100      	str	r1, [sp, #0]
   179f8:	2100      	movs	r1, #0
   179fa:	9101      	str	r1, [sp, #4]
   179fc:	4610      	mov	r0, r2
   179fe:	2100      	movs	r1, #0
   17a00:	461a      	mov	r2, r3
   17a02:	f245 6394 	movw	r3, #22164	; 0x5694
   17a06:	f2c0 0302 	movt	r3, #2
   17a0a:	f7f5 fdf3 	bl	d5f4 <GoalDspLine>
   17a0e:	6338      	str	r0, [r7, #48]	; 0x30
		CHECK(iRet>=0, lblKO);
   17a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17a12:	2b00      	cmp	r3, #0
   17a14:	f2c0 81e8 	blt.w	17de8 <PinEntry+0x488>
		iRet = GoalDspLine(hScreen, 1, (char*)pcMsg2, &txPin[1], 0, false);                // Pin input on terminal
   17a18:	69fb      	ldr	r3, [r7, #28]
   17a1a:	2200      	movs	r2, #0
   17a1c:	9200      	str	r2, [sp, #0]
   17a1e:	2200      	movs	r2, #0
   17a20:	9201      	str	r2, [sp, #4]
   17a22:	4618      	mov	r0, r3
   17a24:	2101      	movs	r1, #1
   17a26:	693a      	ldr	r2, [r7, #16]
   17a28:	4baf      	ldr	r3, [pc, #700]	; (17ce8 <PinEntry+0x388>)
   17a2a:	f7f5 fde3 	bl	d5f4 <GoalDspLine>
   17a2e:	6338      	str	r0, [r7, #48]	; 0x30
		CHECK(iRet>=0, lblKO);
   17a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17a32:	2b00      	cmp	r3, #0
   17a34:	f2c0 81d8 	blt.w	17de8 <PinEntry+0x488>
		iRet = GoalDspLine(hScreen, 2, "Enter your code\nfrom prying eyes", &txPin[2], 0, true);
   17a38:	69fb      	ldr	r3, [r7, #28]
   17a3a:	2200      	movs	r2, #0
   17a3c:	9200      	str	r2, [sp, #0]
   17a3e:	2201      	movs	r2, #1
   17a40:	9201      	str	r2, [sp, #4]
   17a42:	4618      	mov	r0, r3
   17a44:	2102      	movs	r1, #2
   17a46:	f645 4238 	movw	r2, #23608	; 0x5c38
   17a4a:	f2c0 0202 	movt	r2, #2
   17a4e:	4ba7      	ldr	r3, [pc, #668]	; (17cec <PinEntry+0x38c>)
   17a50:	f7f5 fdd0 	bl	d5f4 <GoalDspLine>
   17a54:	6338      	str	r0, [r7, #48]	; 0x30
		CHECK(iRet>=0, lblKO);                                                             // Warm message on terminal
   17a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17a58:	2b00      	cmp	r3, #0
   17a5a:	f2c0 81c5 	blt.w	17de8 <PinEntry+0x488>
		uiEvent=0;                                                                         // Wait for timeout
   17a5e:	2300      	movs	r3, #0
   17a60:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
   17a62:	e04f      	b.n	17b04 <PinEntry+0x1a4>
	case 1:                                                                                // *** Pin on pinpad with characters display
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Please Enter Pin\nOn Pin Pad", GL_ICON_WARNING, GL_BUTTON_NONE, 0);
   17a64:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   17a68:	f2c0 0302 	movt	r3, #2
   17a6c:	681b      	ldr	r3, [r3, #0]
   17a6e:	2200      	movs	r2, #0
   17a70:	9200      	str	r2, [sp, #0]
   17a72:	2200      	movs	r2, #0
   17a74:	9201      	str	r2, [sp, #4]
   17a76:	4618      	mov	r0, r3
   17a78:	2100      	movs	r1, #0
   17a7a:	f645 425c 	movw	r2, #23644	; 0x5c5c
   17a7e:	f2c0 0202 	movt	r2, #2
   17a82:	2303      	movs	r3, #3
   17a84:	f009 fd4e 	bl	21524 <GL_Dialog_Message>
		PPS_firstline();
   17a88:	f008 fb9e 	bl	201c8 <PPS_firstline>
		PPS_Display((char*) pcMsg1);                                                       // First message on pinpad
   17a8c:	6978      	ldr	r0, [r7, #20]
   17a8e:	f008 fc35 	bl	202fc <PPS_Display>
		PPS_newline();
   17a92:	f008 fbc7 	bl	20224 <PPS_newline>
		PPS_Display((char*) pcMsg2);                                                       // Second message on pinpad
   17a96:	6938      	ldr	r0, [r7, #16]
   17a98:	f008 fc30 	bl	202fc <PPS_Display>
		PPS_newline();                                                                     // Return to first line
   17a9c:	f008 fbc2 	bl	20224 <PPS_newline>
		uiEvent=KEYBOARD;                                                                  // Wait for EFT keyboard to cancel pin entry on pinpad
   17aa0:	2301      	movs	r3, #1
   17aa2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
   17aa4:	e02e      	b.n	17b04 <PinEntry+0x1a4>
	case 2:                                                                                // *** Pin on pinpad with graphical display
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Please Enter Pin\nOn Pin Pad", GL_ICON_WARNING, GL_BUTTON_NONE, 0);
   17aa6:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   17aaa:	f2c0 0302 	movt	r3, #2
   17aae:	681b      	ldr	r3, [r3, #0]
   17ab0:	2200      	movs	r2, #0
   17ab2:	9200      	str	r2, [sp, #0]
   17ab4:	2200      	movs	r2, #0
   17ab6:	9201      	str	r2, [sp, #4]
   17ab8:	4618      	mov	r0, r3
   17aba:	2100      	movs	r1, #0
   17abc:	f645 425c 	movw	r2, #23644	; 0x5c5c
   17ac0:	f2c0 0202 	movt	r2, #2
   17ac4:	2303      	movs	r3, #3
   17ac6:	f009 fd2d 	bl	21524 <GL_Dialog_Message>
		InitContext(PERIPH_PPR);                                                           // Switch to graphic display pinpad
   17aca:	2001      	movs	r0, #1
   17acc:	f008 f9a4 	bl	1fe18 <InitContexteGraphique>
		_DrawExtendedString(0, 22, (char*) pcMsg1, _OFF_, _MEDIUM_, _NORMALE_);            // First message on pinpad
   17ad0:	2301      	movs	r3, #1
   17ad2:	9300      	str	r3, [sp, #0]
   17ad4:	2301      	movs	r3, #1
   17ad6:	9301      	str	r3, [sp, #4]
   17ad8:	2000      	movs	r0, #0
   17ada:	2116      	movs	r1, #22
   17adc:	697a      	ldr	r2, [r7, #20]
   17ade:	2300      	movs	r3, #0
   17ae0:	f008 f9f2 	bl	1fec8 <_DrawExtendedString>
		_DrawExtendedString(0, 35, (char*) pcMsg2, _OFF_, _MEDIUM_, _NORMALE_);            // Second message on pinpad
   17ae4:	2301      	movs	r3, #1
   17ae6:	9300      	str	r3, [sp, #0]
   17ae8:	2301      	movs	r3, #1
   17aea:	9301      	str	r3, [sp, #4]
   17aec:	2000      	movs	r0, #0
   17aee:	2123      	movs	r1, #35	; 0x23
   17af0:	693a      	ldr	r2, [r7, #16]
   17af2:	2300      	movs	r3, #0
   17af4:	f008 f9e8 	bl	1fec8 <_DrawExtendedString>
		PaintGraphics();
   17af8:	f008 f9b8 	bl	1fe6c <PaintGraphics>
		uiEvent=KEYBOARD;                                                                  // Wait for EFT keyboard to cancel pin entry on pinpad
   17afc:	2301      	movs	r3, #1
   17afe:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
   17b00:	e000      	b.n	17b04 <PinEntry+0x1a4>
	default:
		break;
   17b02:	bf00      	nop
	}

	// Pin entry code initialization
	// *****************************
	xEntryCfg.ucEchoChar = ECHO_PIN;                                                       // '*' echo character
   17b04:	232a      	movs	r3, #42	; 0x2a
   17b06:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	xEntryCfg.ucMinDigits = 4;                                                             // Min pin entry 4 digits
   17b0a:	2304      	movs	r3, #4
   17b0c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	xEntryCfg.ucMaxDigits = 4;                                                             // Max pin entry 4 digits
   17b10:	2304      	movs	r3, #4
   17b12:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (ucTimeOut < 60)
   17b16:	79fb      	ldrb	r3, [r7, #7]
   17b18:	2b3b      	cmp	r3, #59	; 0x3b
   17b1a:	d806      	bhi.n	17b2a <PinEntry+0x1ca>
		xEntryCfg.iFirstCharTimeOut = ucTimeOut*1000;                                      // Wait for first digit < 60s
   17b1c:	79fb      	ldrb	r3, [r7, #7]
   17b1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17b22:	fb02 f303 	mul.w	r3, r2, r3
   17b26:	643b      	str	r3, [r7, #64]	; 0x40
   17b28:	e002      	b.n	17b30 <PinEntry+0x1d0>
	else
		xEntryCfg.iFirstCharTimeOut = 60*1000;                                             // Wait for first digit 60s (Max supported)
   17b2a:	f64e 2360 	movw	r3, #60000	; 0xea60
   17b2e:	643b      	str	r3, [r7, #64]	; 0x40
	xEntryCfg.iInterCharTimeOut = 10*1000;                                                 // Wait for next digits 10s
   17b30:	f242 7310 	movw	r3, #10000	; 0x2710
   17b34:	647b      	str	r3, [r7, #68]	; 0x44

	// Secure part relative to the Pin entry function
	iRet = SEC_PinEntryInit (&xEntryCfg, C_SEC_CIPHERING); CHECK(iRet==OK, lblKO);         // C_SEC_CIPHERING secure part chosen to cipher Pin entry on terminal or pinpad
   17b36:	f107 0338 	add.w	r3, r7, #56	; 0x38
   17b3a:	4618      	mov	r0, r3
   17b3c:	2103      	movs	r1, #3
   17b3e:	f009 fc1a 	bl	21376 <SEC_PinEntryInit>
   17b42:	6338      	str	r0, [r7, #48]	; 0x30
   17b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17b46:	2b00      	cmp	r3, #0
   17b48:	f040 814e 	bne.w	17de8 <PinEntry+0x488>

	// Pin entry code management
	// *************************
	iPinSize=0;
   17b4c:	2300      	movs	r3, #0
   17b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	strcpy (tcPin, pcMsg2);
   17b50:	f107 0348 	add.w	r3, r7, #72	; 0x48
   17b54:	4618      	mov	r0, r3
   17b56:	6939      	ldr	r1, [r7, #16]
   17b58:	f7f1 e862 	blx	8c20 <_init+0xc0>

	while (!bExitPin)
   17b5c:	e13c      	b.n	17dd8 <PinEntry+0x478>
	{
		uiEveWait=uiEvent; // Init ttestall (from SEC_PinEntry) with the right peripheral events
   17b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17b60:	623b      	str	r3, [r7, #32]
		iRet = SEC_PinEntry (&uiEveWait, &ucKey, &iContinue);
   17b62:	f107 0120 	add.w	r1, r7, #32
   17b66:	f107 021a 	add.w	r2, r7, #26
   17b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
   17b6e:	4608      	mov	r0, r1
   17b70:	4611      	mov	r1, r2
   17b72:	461a      	mov	r2, r3
   17b74:	f009 fbed 	bl	21352 <SEC_PinEntry>
   17b78:	6338      	str	r0, [r7, #48]	; 0x30

		if (iRet == OK)
   17b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17b7c:	2b00      	cmp	r3, #0
   17b7e:	f040 8109 	bne.w	17d94 <PinEntry+0x434>
		{
			if (ucKey == ECHO_PIN)
   17b82:	7ebb      	ldrb	r3, [r7, #26]
   17b84:	2b2a      	cmp	r3, #42	; 0x2a
   17b86:	d152      	bne.n	17c2e <PinEntry+0x2ce>
			{
				// Enter pin in progress
				// =====================
				if (iPinSize < MAX_PIN_CODE_SIZE)
   17b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17b8a:	2b0b      	cmp	r3, #11
   17b8c:	f300 810f 	bgt.w	17dae <PinEntry+0x44e>
				{
					tcPin[strlen(pcMsg2)+iPinSize] = ucKey;
   17b90:	6938      	ldr	r0, [r7, #16]
   17b92:	f7f1 e878 	blx	8c84 <_init+0x124>
   17b96:	4602      	mov	r2, r0
   17b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17b9a:	18d3      	adds	r3, r2, r3
   17b9c:	7eba      	ldrb	r2, [r7, #26]
   17b9e:	f107 0160 	add.w	r1, r7, #96	; 0x60
   17ba2:	18cb      	adds	r3, r1, r3
   17ba4:	f803 2c18 	strb.w	r2, [r3, #-24]
					tcPin[strlen(pcMsg2)+iPinSize+1] = 0;
   17ba8:	6938      	ldr	r0, [r7, #16]
   17baa:	f7f1 e86c 	blx	8c84 <_init+0x124>
   17bae:	4602      	mov	r2, r0
   17bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17bb2:	18d3      	adds	r3, r2, r3
   17bb4:	3301      	adds	r3, #1
   17bb6:	f107 0260 	add.w	r2, r7, #96	; 0x60
   17bba:	18d3      	adds	r3, r2, r3
   17bbc:	2200      	movs	r2, #0
   17bbe:	f803 2c18 	strb.w	r2, [r3, #-24]
					switch (iPpd)
   17bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17bc4:	2b01      	cmp	r3, #1
   17bc6:	d016      	beq.n	17bf6 <PinEntry+0x296>
   17bc8:	2b02      	cmp	r3, #2
   17bca:	d01e      	beq.n	17c0a <PinEntry+0x2aa>
   17bcc:	2b00      	cmp	r3, #0
   17bce:	d129      	bne.n	17c24 <PinEntry+0x2c4>
					{
					case 0:                                                                // *** Pin on terminal
						iRet = GoalDspLine(hScreen, 1, (char*)tcPin, &txPin[1], 0, true);
   17bd0:	69fa      	ldr	r2, [r7, #28]
   17bd2:	f107 0348 	add.w	r3, r7, #72	; 0x48
   17bd6:	2100      	movs	r1, #0
   17bd8:	9100      	str	r1, [sp, #0]
   17bda:	2101      	movs	r1, #1
   17bdc:	9101      	str	r1, [sp, #4]
   17bde:	4610      	mov	r0, r2
   17be0:	2101      	movs	r1, #1
   17be2:	461a      	mov	r2, r3
   17be4:	4b40      	ldr	r3, [pc, #256]	; (17ce8 <PinEntry+0x388>)
   17be6:	f7f5 fd05 	bl	d5f4 <GoalDspLine>
   17bea:	6338      	str	r0, [r7, #48]	; 0x30
						CHECK(iRet>=0, lblKO);                                             // Display pin code entry
   17bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17bee:	2b00      	cmp	r3, #0
   17bf0:	f2c0 80fa 	blt.w	17de8 <PinEntry+0x488>
						break;
   17bf4:	e017      	b.n	17c26 <PinEntry+0x2c6>
					case 1:                                                                // *** Pin on pinpad with characters display
						PPS_newline(); PPS_Display(tcPin); PPS_newline(); 				   // Display pin code entry on second line (to avoid using PPS_clearline())
   17bf6:	f008 fb15 	bl	20224 <PPS_newline>
   17bfa:	f107 0348 	add.w	r3, r7, #72	; 0x48
   17bfe:	4618      	mov	r0, r3
   17c00:	f008 fb7c 	bl	202fc <PPS_Display>
   17c04:	f008 fb0e 	bl	20224 <PPS_newline>
						break;
   17c08:	e00d      	b.n	17c26 <PinEntry+0x2c6>
					case 2:                                                                // *** Pin on pinpad with graphical display
						DrawExtendedString(0, 35, tcPin, _OFF_, _MEDIUM_, _NORMALE_);      // Display pin code entry
   17c0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
   17c0e:	2201      	movs	r2, #1
   17c10:	9200      	str	r2, [sp, #0]
   17c12:	2201      	movs	r2, #1
   17c14:	9201      	str	r2, [sp, #4]
   17c16:	2000      	movs	r0, #0
   17c18:	2123      	movs	r1, #35	; 0x23
   17c1a:	461a      	mov	r2, r3
   17c1c:	2300      	movs	r3, #0
   17c1e:	f008 f8c7 	bl	1fdb0 <DrawExtendedString>
						break;
   17c22:	e000      	b.n	17c26 <PinEntry+0x2c6>
					default:
						break;
   17c24:	bf00      	nop
					}
					iPinSize++;
   17c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17c28:	3301      	adds	r3, #1
   17c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
						default:
							break;
						}
					}
					break;
				default:             break;
   17c2c:	e0bf      	b.n	17dae <PinEntry+0x44e>
			}
			else
			{
				// Pin confirmation
				// ================
				switch (ucKey)
   17c2e:	7ebb      	ldrb	r3, [r7, #26]
   17c30:	2b18      	cmp	r3, #24
   17c32:	f200 80bc 	bhi.w	17dae <PinEntry+0x44e>
   17c36:	a101      	add	r1, pc, #4	; (adr r1, 17c3c <PinEntry+0x2dc>)
   17c38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   17c3c:	00017ca1 	.word	0x00017ca1
   17c40:	00017cd7 	.word	0x00017cd7
   17c44:	00017daf 	.word	0x00017daf
   17c48:	00017daf 	.word	0x00017daf
   17c4c:	00017daf 	.word	0x00017daf
   17c50:	00017daf 	.word	0x00017daf
   17c54:	00017daf 	.word	0x00017daf
   17c58:	00017daf 	.word	0x00017daf
   17c5c:	00017daf 	.word	0x00017daf
   17c60:	00017daf 	.word	0x00017daf
   17c64:	00017daf 	.word	0x00017daf
   17c68:	00017daf 	.word	0x00017daf
   17c6c:	00017daf 	.word	0x00017daf
   17c70:	00017daf 	.word	0x00017daf
   17c74:	00017daf 	.word	0x00017daf
   17c78:	00017daf 	.word	0x00017daf
   17c7c:	00017daf 	.word	0x00017daf
   17c80:	00017daf 	.word	0x00017daf
   17c84:	00017daf 	.word	0x00017daf
   17c88:	00017daf 	.word	0x00017daf
   17c8c:	00017daf 	.word	0x00017daf
   17c90:	00017daf 	.word	0x00017daf
   17c94:	00017cdd 	.word	0x00017cdd
   17c98:	00017ce3 	.word	0x00017ce3
   17c9c:	00017cf1 	.word	0x00017cf1
				{
				case 0x00:                   // Response to stop pin entry by receiving an event
					if(uiEveWait & KEYBOARD) // Key event from terminal
   17ca0:	6a3b      	ldr	r3, [r7, #32]
   17ca2:	f003 0301 	and.w	r3, r3, #1
   17ca6:	2b00      	cmp	r3, #0
   17ca8:	d012      	beq.n	17cd0 <PinEntry+0x370>
					{
						GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "EVENT RECEIVED\nKEY PRESSED", GL_ICON_INFORMATION, GL_BUTTON_NONE, 2*1000);
   17caa:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   17cae:	f2c0 0302 	movt	r3, #2
   17cb2:	681b      	ldr	r3, [r3, #0]
   17cb4:	2200      	movs	r2, #0
   17cb6:	9200      	str	r2, [sp, #0]
   17cb8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   17cbc:	9201      	str	r2, [sp, #4]
   17cbe:	4618      	mov	r0, r3
   17cc0:	2100      	movs	r1, #0
   17cc2:	f645 4278 	movw	r2, #23672	; 0x5c78
   17cc6:	f2c0 0202 	movt	r2, #2
   17cca:	2302      	movs	r3, #2
   17ccc:	f009 fc2a 	bl	21524 <GL_Dialog_Message>
					}
					iRet=0;
   17cd0:	2300      	movs	r3, #0
   17cd2:	633b      	str	r3, [r7, #48]	; 0x30
					break;
   17cd4:	e06e      	b.n	17db4 <PinEntry+0x454>
				case 0x01:   iRet=0; break;
   17cd6:	2300      	movs	r3, #0
   17cd8:	633b      	str	r3, [r7, #48]	; 0x30
   17cda:	e06b      	b.n	17db4 <PinEntry+0x454>
				case T_VAL:  iRet=1; break;  // Valid key from Pinpad or Terminal when enter pin => iContinue=FALSE if >= Min pin entry
   17cdc:	2301      	movs	r3, #1
   17cde:	633b      	str	r3, [r7, #48]	; 0x30
   17ce0:	e068      	b.n	17db4 <PinEntry+0x454>
				case T_ANN:  iRet=0; break;  // Cancel key from Pinpad or Terminal when enter pin => iContinue=FALSE
   17ce2:	2300      	movs	r3, #0
   17ce4:	633b      	str	r3, [r7, #48]	; 0x30
   17ce6:	e065      	b.n	17db4 <PinEntry+0x454>
   17ce8:	00025740 	.word	0x00025740
   17cec:	000257ec 	.word	0x000257ec
				case T_CORR:                 // Correction from Pinpad or Terminal when enter pin => iContinue=TRUE
					if (iPinSize != 0)
   17cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17cf2:	2b00      	cmp	r3, #0
   17cf4:	d05d      	beq.n	17db2 <PinEntry+0x452>
					{
						iPinSize--;
   17cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17cf8:	3b01      	subs	r3, #1
   17cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
						tcPin[strlen(pcMsg2)+iPinSize] = ' ';
   17cfc:	6938      	ldr	r0, [r7, #16]
   17cfe:	f7f0 efc2 	blx	8c84 <_init+0x124>
   17d02:	4602      	mov	r2, r0
   17d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17d06:	18d3      	adds	r3, r2, r3
   17d08:	f107 0260 	add.w	r2, r7, #96	; 0x60
   17d0c:	18d3      	adds	r3, r2, r3
   17d0e:	2220      	movs	r2, #32
   17d10:	f803 2c18 	strb.w	r2, [r3, #-24]
						tcPin[strlen(pcMsg2)+iPinSize+1] = 0;
   17d14:	6938      	ldr	r0, [r7, #16]
   17d16:	f7f0 efb6 	blx	8c84 <_init+0x124>
   17d1a:	4602      	mov	r2, r0
   17d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17d1e:	18d3      	adds	r3, r2, r3
   17d20:	3301      	adds	r3, #1
   17d22:	f107 0160 	add.w	r1, r7, #96	; 0x60
   17d26:	18cb      	adds	r3, r1, r3
   17d28:	2200      	movs	r2, #0
   17d2a:	f803 2c18 	strb.w	r2, [r3, #-24]
						switch (iPpd)
   17d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17d30:	2b01      	cmp	r3, #1
   17d32:	d015      	beq.n	17d60 <PinEntry+0x400>
   17d34:	2b02      	cmp	r3, #2
   17d36:	d01d      	beq.n	17d74 <PinEntry+0x414>
   17d38:	2b00      	cmp	r3, #0
   17d3a:	d128      	bne.n	17d8e <PinEntry+0x42e>
						{
						case 0:                                                            // *** Pin on terminal
							iRet = GoalDspLine(hScreen, 1, (char*)tcPin, &txPin[1], 0, true);
   17d3c:	69fa      	ldr	r2, [r7, #28]
   17d3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
   17d42:	2100      	movs	r1, #0
   17d44:	9100      	str	r1, [sp, #0]
   17d46:	2101      	movs	r1, #1
   17d48:	9101      	str	r1, [sp, #4]
   17d4a:	4610      	mov	r0, r2
   17d4c:	2101      	movs	r1, #1
   17d4e:	461a      	mov	r2, r3
   17d50:	4b4d      	ldr	r3, [pc, #308]	; (17e88 <PinEntry+0x528>)
   17d52:	f7f5 fc4f 	bl	d5f4 <GoalDspLine>
   17d56:	6338      	str	r0, [r7, #48]	; 0x30
							CHECK(iRet>=0, lblKO);                                         // Pin entry code correction
   17d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17d5a:	2b00      	cmp	r3, #0
   17d5c:	db44      	blt.n	17de8 <PinEntry+0x488>
							break;
   17d5e:	e017      	b.n	17d90 <PinEntry+0x430>
						case 1:                                                            // *** Pin on pinpad with characters display
							PPS_newline(); PPS_Display(tcPin); PPS_newline(); 			   // Pin entry code correction on second line (to avoid using PPS_clearline())
   17d60:	f008 fa60 	bl	20224 <PPS_newline>
   17d64:	f107 0348 	add.w	r3, r7, #72	; 0x48
   17d68:	4618      	mov	r0, r3
   17d6a:	f008 fac7 	bl	202fc <PPS_Display>
   17d6e:	f008 fa59 	bl	20224 <PPS_newline>
							break;
   17d72:	e00d      	b.n	17d90 <PinEntry+0x430>
						case 2:                                                            // *** Pin on pinpad with graphical display
							DrawExtendedString(0, 35, tcPin, _OFF_, _MEDIUM_, _NORMALE_);  // Pin entry code correction
   17d74:	f107 0348 	add.w	r3, r7, #72	; 0x48
   17d78:	2201      	movs	r2, #1
   17d7a:	9200      	str	r2, [sp, #0]
   17d7c:	2201      	movs	r2, #1
   17d7e:	9201      	str	r2, [sp, #4]
   17d80:	2000      	movs	r0, #0
   17d82:	2123      	movs	r1, #35	; 0x23
   17d84:	461a      	mov	r2, r3
   17d86:	2300      	movs	r3, #0
   17d88:	f008 f812 	bl	1fdb0 <DrawExtendedString>
							break;
   17d8c:	e000      	b.n	17d90 <PinEntry+0x430>
						default:
							break;
   17d8e:	bf00      	nop
						}
					}
					break;
   17d90:	bf00      	nop
   17d92:	e00e      	b.n	17db2 <PinEntry+0x452>
				default:             break;
				}
			}
		}
		else if (iRet == ERR_TIMEOUT)                                                      // Pin entry on pinpad and canceled by terminal
   17d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17d96:	f513 6f81 	cmn.w	r3, #1032	; 0x408
   17d9a:	d102      	bne.n	17da2 <PinEntry+0x442>
			bExitPin=TRUE;
   17d9c:	2301      	movs	r3, #1
   17d9e:	76fb      	strb	r3, [r7, #27]
   17da0:	e008      	b.n	17db4 <PinEntry+0x454>
		else                                                                               // Pin entry on pinpad already in progress
		{
			iRet=-1;
   17da2:	f04f 33ff 	mov.w	r3, #4294967295
   17da6:	633b      	str	r3, [r7, #48]	; 0x30
			bExitPin=TRUE;
   17da8:	2301      	movs	r3, #1
   17daa:	76fb      	strb	r3, [r7, #27]
   17dac:	e002      	b.n	17db4 <PinEntry+0x454>
						default:
							break;
						}
					}
					break;
				default:             break;
   17dae:	bf00      	nop
   17db0:	e000      	b.n	17db4 <PinEntry+0x454>
							break;
						default:
							break;
						}
					}
					break;
   17db2:	bf00      	nop
			bExitPin=TRUE;
		}

		// Pin exit process
		// ================
		if (iContinue  == FALSE)                                                           // The Pin entry is already stopped
   17db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17db6:	2b00      	cmp	r3, #0
   17db8:	d107      	bne.n	17dca <PinEntry+0x46a>
		{
			ResetPeripherals(KEYBOARD | TSCREEN);                                          // Reset keyboard/touch FIFO for unexpected keys
   17dba:	2001      	movs	r0, #1
   17dbc:	f6c0 0000 	movt	r0, #2048	; 0x800
   17dc0:	f7f2 fde4 	bl	a98c <ResetPeripherals>
			bExitPin=TRUE;                                                                 // exit immediately
   17dc4:	2301      	movs	r3, #1
   17dc6:	76fb      	strb	r3, [r7, #27]
   17dc8:	e006      	b.n	17dd8 <PinEntry+0x478>
		}
		else if (bExitPin == TRUE)                                                         // The Pin entry is not stopped
   17dca:	7efb      	ldrb	r3, [r7, #27]
   17dcc:	2b00      	cmp	r3, #0
   17dce:	d003      	beq.n	17dd8 <PinEntry+0x478>
		{
			iContinue=FALSE;                                                               // To stop the Pin entry
   17dd0:	2300      	movs	r3, #0
   17dd2:	627b      	str	r3, [r7, #36]	; 0x24
			bExitPin=FALSE;                                                                // loop one more time before exit
   17dd4:	2300      	movs	r3, #0
   17dd6:	76fb      	strb	r3, [r7, #27]
	// Pin entry code management
	// *************************
	iPinSize=0;
	strcpy (tcPin, pcMsg2);

	while (!bExitPin)
   17dd8:	7efb      	ldrb	r3, [r7, #27]
   17dda:	f083 0301 	eor.w	r3, r3, #1
   17dde:	b2db      	uxtb	r3, r3
   17de0:	2b00      	cmp	r3, #0
   17de2:	f47f aebc 	bne.w	17b5e <PinEntry+0x1fe>
			iContinue=FALSE;                                                               // To stop the Pin entry
			bExitPin=FALSE;                                                                // loop one more time before exit
		}
	}

	goto lblEnd;
   17de6:	e003      	b.n	17df0 <PinEntry+0x490>

	// Errors treatment
	// ****************
	lblKO:
	iRet=-1;                                                                               // Pin entry failed
   17de8:	f04f 33ff 	mov.w	r3, #4294967295
   17dec:	633b      	str	r3, [r7, #48]	; 0x30
	goto lblEnd;
   17dee:	bf00      	nop
	lblEnd:
	switch (iPpd)
   17df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17df2:	2b01      	cmp	r3, #1
   17df4:	d010      	beq.n	17e18 <PinEntry+0x4b8>
   17df6:	2b02      	cmp	r3, #2
   17df8:	d019      	beq.n	17e2e <PinEntry+0x4ce>
   17dfa:	2b00      	cmp	r3, #0
   17dfc:	d131      	bne.n	17e62 <PinEntry+0x502>
	{
	case 0:                                                                                // *** Pin on terminal
		Telium_Ttestall(0, 1);                                                             // To consume the cancel key from Pin entry
   17dfe:	2000      	movs	r0, #0
   17e00:	2101      	movs	r1, #1
   17e02:	f007 ff79 	bl	1fcf8 <Telium_Ttestall>
		if (hScreen)
   17e06:	69fb      	ldr	r3, [r7, #28]
   17e08:	2b00      	cmp	r3, #0
   17e0a:	d02b      	beq.n	17e64 <PinEntry+0x504>
			GoalDestroyScreen(&hScreen);                                                   // Destroy screen
   17e0c:	f107 031c 	add.w	r3, r7, #28
   17e10:	4618      	mov	r0, r3
   17e12:	f7f6 f887 	bl	df24 <GoalDestroyScreen>
		break;
   17e16:	e025      	b.n	17e64 <PinEntry+0x504>
	case 1:                                                                                // *** Pin on pinpad with characters display
		PPS_firstline();
   17e18:	f008 f9d6 	bl	201c8 <PPS_firstline>
		PPS_Display((char*) pcMsg1Idle);                                                   // Idle message
   17e1c:	68f8      	ldr	r0, [r7, #12]
   17e1e:	f008 fa6d 	bl	202fc <PPS_Display>
		PPS_newline();
   17e22:	f008 f9ff 	bl	20224 <PPS_newline>
		PPS_Display((char*) pcMsg2Idle);                                                   // Second message on pinpad
   17e26:	68b8      	ldr	r0, [r7, #8]
   17e28:	f008 fa68 	bl	202fc <PPS_Display>
		break;
   17e2c:	e01b      	b.n	17e66 <PinEntry+0x506>
	case 2:                                                                                // *** Pin on pinpad with graphical display
		_DrawExtendedString(0, 22, (char*) pcMsg1Idle, _OFF_, _MEDIUM_, _NORMALE_);        // Idle message
   17e2e:	2301      	movs	r3, #1
   17e30:	9300      	str	r3, [sp, #0]
   17e32:	2301      	movs	r3, #1
   17e34:	9301      	str	r3, [sp, #4]
   17e36:	2000      	movs	r0, #0
   17e38:	2116      	movs	r1, #22
   17e3a:	68fa      	ldr	r2, [r7, #12]
   17e3c:	2300      	movs	r3, #0
   17e3e:	f008 f843 	bl	1fec8 <_DrawExtendedString>
		_DrawExtendedString(0, 35, (char*) pcMsg2Idle, _OFF_, _MEDIUM_, _NORMALE_);
   17e42:	2301      	movs	r3, #1
   17e44:	9300      	str	r3, [sp, #0]
   17e46:	2301      	movs	r3, #1
   17e48:	9301      	str	r3, [sp, #4]
   17e4a:	2000      	movs	r0, #0
   17e4c:	2123      	movs	r1, #35	; 0x23
   17e4e:	68ba      	ldr	r2, [r7, #8]
   17e50:	2300      	movs	r3, #0
   17e52:	f008 f839 	bl	1fec8 <_DrawExtendedString>
		PaintGraphics();
   17e56:	f008 f809 	bl	1fe6c <PaintGraphics>
		InitContext(PERIPH_DISPLAY);                                                       // Switch to graphic display terminal
   17e5a:	2000      	movs	r0, #0
   17e5c:	f007 ffdc 	bl	1fe18 <InitContexteGraphique>
		break;
   17e60:	e001      	b.n	17e66 <PinEntry+0x506>
	default:
		break;
   17e62:	e000      	b.n	17e66 <PinEntry+0x506>
	{
	case 0:                                                                                // *** Pin on terminal
		Telium_Ttestall(0, 1);                                                             // To consume the cancel key from Pin entry
		if (hScreen)
			GoalDestroyScreen(&hScreen);                                                   // Destroy screen
		break;
   17e64:	bf00      	nop
		break;
	default:
		break;
	}

	return iRet;
   17e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   17e68:	4618      	mov	r0, r3
   17e6a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   17e6e:	f2c0 0302 	movt	r3, #2
   17e72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   17e74:	681b      	ldr	r3, [r3, #0]
   17e76:	429a      	cmp	r2, r3
   17e78:	d001      	beq.n	17e7e <PinEntry+0x51e>
   17e7a:	f7f1 f893 	bl	8fa4 <__stack_chk_fail>
   17e7e:	f107 0760 	add.w	r7, r7, #96	; 0x60
   17e82:	46bd      	mov	sp, r7
   17e84:	bd80      	pop	{r7, pc}
   17e86:	bf00      	nop
   17e88:	00025740 	.word	0x00025740

00017e8c <SetConfig>:
//  This function has no parameters.
//  This function has no return value.
//****************************************************************************

void SetConfig(void)
{
   17e8c:	b580      	push	{r7, lr}
   17e8e:	b0a0      	sub	sp, #128	; 0x80
   17e90:	af04      	add	r7, sp, #16
   17e92:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   17e96:	f2c0 0302 	movt	r3, #2
   17e9a:	681b      	ldr	r3, [r3, #0]
   17e9c:	66fb      	str	r3, [r7, #108]	; 0x6c
	// Local variables
	// ***************
	T_SEC_CONFIG txConfParts[C_NB_PARTS];
	int i, iNbParts, iDefItem;
	char *pcTitle;
	int iPpdBooster=0, iTermBooster=0, iRet;
   17e9e:	2300      	movs	r3, #0
   17ea0:	613b      	str	r3, [r7, #16]
   17ea2:	2300      	movs	r3, #0
   17ea4:	617b      	str	r3, [r7, #20]

	// Check Pinpad
	// ============
	iRet = DLLExist("SECURITY"); CHECK(iRet==TRUE, lblNoSecDll);              // Security DLL loaded?
   17ea6:	f645 4094 	movw	r0, #23700	; 0x5c94
   17eaa:	f2c0 0002 	movt	r0, #2
   17eae:	f007 fc35 	bl	1f71c <DLLExist>
   17eb2:	61b8      	str	r0, [r7, #24]
   17eb4:	69bb      	ldr	r3, [r7, #24]
   17eb6:	2b01      	cmp	r3, #1
   17eb8:	f040 8103 	bne.w	180c2 <SetConfig+0x236>
	iRet = ChkPpdConfig(); CHECK(iRet>=0, lblEnd);                            // Pinpad problem? => check config from Manager
   17ebc:	f7ff fada 	bl	17474 <ChkPpdConfig>
   17ec0:	61b8      	str	r0, [r7, #24]
   17ec2:	69bb      	ldr	r3, [r7, #24]
   17ec4:	2b00      	cmp	r3, #0
   17ec6:	f2c0 8138 	blt.w	1813a <SetConfig+0x2ae>
	CHECK(iRet!=0, lblNoPPad);                                                // No pinpad connected?
   17eca:	69bb      	ldr	r3, [r7, #24]
   17ecc:	2b00      	cmp	r3, #0
   17ece:	f000 810c 	beq.w	180ea <SetConfig+0x25e>

	// Get the configuration parts on the security component
	// *****************************************************
	iRet = SEC_GetConfig(&iNbParts, txConfParts); CHECK(iRet==OK, lblKO);     // Get configuration parts by default
   17ed2:	463a      	mov	r2, r7
   17ed4:	f107 031c 	add.w	r3, r7, #28
   17ed8:	4610      	mov	r0, r2
   17eda:	4619      	mov	r1, r3
   17edc:	f009 f9bb 	bl	21256 <SEC_GetConfig>
   17ee0:	61b8      	str	r0, [r7, #24]
   17ee2:	69bb      	ldr	r3, [r7, #24]
   17ee4:	2b00      	cmp	r3, #0
   17ee6:	f040 8114 	bne.w	18112 <SetConfig+0x286>
	for (i=0; i<iNbParts; i++)
   17eea:	2300      	movs	r3, #0
   17eec:	607b      	str	r3, [r7, #4]
   17eee:	e025      	b.n	17f3c <SetConfig+0xb0>
	{
		if ( memcmp (txConfParts[i].ptszBoosterPeripheral, IAPP_USB_NAME, strlen(IAPP_USB_NAME)) == 0)
   17ef0:	687b      	ldr	r3, [r7, #4]
   17ef2:	011b      	lsls	r3, r3, #4
   17ef4:	f107 0170 	add.w	r1, r7, #112	; 0x70
   17ef8:	18cb      	adds	r3, r1, r3
   17efa:	3b4c      	subs	r3, #76	; 0x4c
   17efc:	681b      	ldr	r3, [r3, #0]
   17efe:	4618      	mov	r0, r3
   17f00:	f645 412c 	movw	r1, #23596	; 0x5c2c
   17f04:	f2c0 0102 	movt	r1, #2
   17f08:	2208      	movs	r2, #8
   17f0a:	f7f0 eef4 	blx	8cf4 <_init+0x194>
   17f0e:	4603      	mov	r3, r0
   17f10:	2b00      	cmp	r3, #0
   17f12:	d108      	bne.n	17f26 <SetConfig+0x9a>
			iPpdBooster = txConfParts[i].cBoosterType;                        // Pinpad booster type 1/2
   17f14:	687b      	ldr	r3, [r7, #4]
   17f16:	011b      	lsls	r3, r3, #4
   17f18:	f107 0270 	add.w	r2, r7, #112	; 0x70
   17f1c:	18d3      	adds	r3, r2, r3
   17f1e:	3b54      	subs	r3, #84	; 0x54
   17f20:	791b      	ldrb	r3, [r3, #4]
   17f22:	613b      	str	r3, [r7, #16]
   17f24:	e007      	b.n	17f36 <SetConfig+0xaa>
		else
			iTermBooster = txConfParts[i].cBoosterType;                       // Terminal booster type 1/2/3/Islero
   17f26:	687b      	ldr	r3, [r7, #4]
   17f28:	011b      	lsls	r3, r3, #4
   17f2a:	f107 0170 	add.w	r1, r7, #112	; 0x70
   17f2e:	18cb      	adds	r3, r1, r3
   17f30:	3b54      	subs	r3, #84	; 0x54
   17f32:	791b      	ldrb	r3, [r3, #4]
   17f34:	617b      	str	r3, [r7, #20]
	CHECK(iRet!=0, lblNoPPad);                                                // No pinpad connected?

	// Get the configuration parts on the security component
	// *****************************************************
	iRet = SEC_GetConfig(&iNbParts, txConfParts); CHECK(iRet==OK, lblKO);     // Get configuration parts by default
	for (i=0; i<iNbParts; i++)
   17f36:	687b      	ldr	r3, [r7, #4]
   17f38:	3301      	adds	r3, #1
   17f3a:	607b      	str	r3, [r7, #4]
   17f3c:	683b      	ldr	r3, [r7, #0]
   17f3e:	687a      	ldr	r2, [r7, #4]
   17f40:	429a      	cmp	r2, r3
   17f42:	dbd5      	blt.n	17ef0 <SetConfig+0x64>
			iTermBooster = txConfParts[i].cBoosterType;                       // Terminal booster type 1/2/3/Islero
	}

	// Set the configuration parts on the security component
	// *****************************************************
	for (i=0; i<iNbParts; i++)
   17f44:	2300      	movs	r3, #0
   17f46:	607b      	str	r3, [r7, #4]
   17f48:	e097      	b.n	1807a <SetConfig+0x1ee>
	{

		iRet = ChkPpdConfig();
   17f4a:	f7ff fa93 	bl	17474 <ChkPpdConfig>
   17f4e:	61b8      	str	r0, [r7, #24]
		if (iRet > 0)                                                         // Pinpad declared in Manager and connected?
   17f50:	69bb      	ldr	r3, [r7, #24]
   17f52:	2b00      	cmp	r3, #0
   17f54:	f340 808e 	ble.w	18074 <SetConfig+0x1e8>
		{
			switch (txConfParts [i].SecureType)                               // Yes, Prompt for switching some secure parts
   17f58:	687b      	ldr	r3, [r7, #4]
   17f5a:	011b      	lsls	r3, r3, #4
   17f5c:	f107 0270 	add.w	r2, r7, #112	; 0x70
   17f60:	18d3      	adds	r3, r2, r3
   17f62:	3b54      	subs	r3, #84	; 0x54
   17f64:	681b      	ldr	r3, [r3, #0]
   17f66:	2b02      	cmp	r3, #2
   17f68:	d009      	beq.n	17f7e <SetConfig+0xf2>
   17f6a:	2b03      	cmp	r3, #3
   17f6c:	d00d      	beq.n	17f8a <SetConfig+0xfe>
   17f6e:	2b01      	cmp	r3, #1
   17f70:	d111      	bne.n	17f96 <SetConfig+0x10a>
			{
			case C_SEC_PINCODE  : pcTitle = "PIN ENTRY ?";      break;        // Pin on terminal or pinpad?
   17f72:	f645 43a0 	movw	r3, #23712	; 0x5ca0
   17f76:	f2c0 0302 	movt	r3, #2
   17f7a:	60fb      	str	r3, [r7, #12]
   17f7c:	e00c      	b.n	17f98 <SetConfig+0x10c>
			case C_SEC_CARD     : pcTitle = "CARD READER ?";    break;        // Card on terminal or pinpad?
   17f7e:	f645 43ac 	movw	r3, #23724	; 0x5cac
   17f82:	f2c0 0302 	movt	r3, #2
   17f86:	60fb      	str	r3, [r7, #12]
   17f88:	e006      	b.n	17f98 <SetConfig+0x10c>
			case C_SEC_CIPHERING: pcTitle = "DATA CIPHERING ?"; break;        // Ciphering on terminal or pinpad?
   17f8a:	f645 43bc 	movw	r3, #23740	; 0x5cbc
   17f8e:	f2c0 0302 	movt	r3, #2
   17f92:	60fb      	str	r3, [r7, #12]
   17f94:	e000      	b.n	17f98 <SetConfig+0x10c>
			default:              goto lblKO;
   17f96:	e0bc      	b.n	18112 <SetConfig+0x286>
			}

			switch (txConfParts [i].SecureType)                               // Select the secure parts to switch
   17f98:	687b      	ldr	r3, [r7, #4]
   17f9a:	011b      	lsls	r3, r3, #4
   17f9c:	f107 0170 	add.w	r1, r7, #112	; 0x70
   17fa0:	18cb      	adds	r3, r1, r3
   17fa2:	3b54      	subs	r3, #84	; 0x54
   17fa4:	681b      	ldr	r3, [r3, #0]
   17fa6:	3b01      	subs	r3, #1
   17fa8:	2b01      	cmp	r3, #1
   17faa:	d862      	bhi.n	18072 <SetConfig+0x1e6>
			case C_SEC_PINCODE :
			case C_SEC_CARD :
#ifndef __TELIUM3__
			case C_SEC_CIPHERING :                                            // No secret area on pinpad for TETRA, ciphering always on terminal
#endif
				if (memcmp (txConfParts[i].ptszBoosterPeripheral, IAPP_USB_NAME, strlen(IAPP_USB_NAME)) == 0)
   17fac:	687b      	ldr	r3, [r7, #4]
   17fae:	011b      	lsls	r3, r3, #4
   17fb0:	f107 0270 	add.w	r2, r7, #112	; 0x70
   17fb4:	18d3      	adds	r3, r2, r3
   17fb6:	3b4c      	subs	r3, #76	; 0x4c
   17fb8:	681b      	ldr	r3, [r3, #0]
   17fba:	4618      	mov	r0, r3
   17fbc:	f645 412c 	movw	r1, #23596	; 0x5c2c
   17fc0:	f2c0 0102 	movt	r1, #2
   17fc4:	2208      	movs	r2, #8
   17fc6:	f7f0 ee96 	blx	8cf4 <_init+0x194>
   17fca:	4603      	mov	r3, r0
   17fcc:	2b00      	cmp	r3, #0
   17fce:	d102      	bne.n	17fd6 <SetConfig+0x14a>
					iDefItem=1;
   17fd0:	2301      	movs	r3, #1
   17fd2:	60bb      	str	r3, [r7, #8]
   17fd4:	e001      	b.n	17fda <SetConfig+0x14e>
				else
					iDefItem=0;
   17fd6:	2300      	movs	r3, #0
   17fd8:	60bb      	str	r3, [r7, #8]
				iRet = GL_Dialog_Choice(gGoalGraphicLibInstance, (const char*) pcTitle, tzMenuChoice, iDefItem, GL_BUTTON_DEFAULT, GL_KEY_0, GL_TIME_MINUTE);
   17fda:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   17fde:	f2c0 0302 	movt	r3, #2
   17fe2:	681b      	ldr	r3, [r3, #0]
   17fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17fe8:	9200      	str	r2, [sp, #0]
   17fea:	2230      	movs	r2, #48	; 0x30
   17fec:	9201      	str	r2, [sp, #4]
   17fee:	f64e 2260 	movw	r2, #60000	; 0xea60
   17ff2:	9202      	str	r2, [sp, #8]
   17ff4:	4618      	mov	r0, r3
   17ff6:	68f9      	ldr	r1, [r7, #12]
   17ff8:	f24f 7260 	movw	r2, #63328	; 0xf760
   17ffc:	f2c0 0202 	movt	r2, #2
   18000:	68bb      	ldr	r3, [r7, #8]
   18002:	f009 fa6b 	bl	214dc <GL_Dialog_Choice>
   18006:	4603      	mov	r3, r0
   18008:	61bb      	str	r3, [r7, #24]
				switch (iRet)
   1800a:	69bb      	ldr	r3, [r7, #24]
   1800c:	2b00      	cmp	r3, #0
   1800e:	d002      	beq.n	18016 <SetConfig+0x18a>
   18010:	2b01      	cmp	r3, #1
   18012:	d016      	beq.n	18042 <SetConfig+0x1b6>
   18014:	e02b      	b.n	1806e <SetConfig+0x1e2>
				{
				case 0:
					txConfParts[i].cBoosterType = (char) iTermBooster;        // Booster type 1/2/3
   18016:	697b      	ldr	r3, [r7, #20]
   18018:	b2da      	uxtb	r2, r3
   1801a:	687b      	ldr	r3, [r7, #4]
   1801c:	011b      	lsls	r3, r3, #4
   1801e:	f107 0170 	add.w	r1, r7, #112	; 0x70
   18022:	18cb      	adds	r3, r1, r3
   18024:	3b54      	subs	r3, #84	; 0x54
   18026:	711a      	strb	r2, [r3, #4]
					txConfParts[i].ptszBoosterPeripheral = IAPP_DEF_NAME;     // DEF_NAME internal booster
   18028:	687b      	ldr	r3, [r7, #4]
   1802a:	011b      	lsls	r3, r3, #4
   1802c:	f107 0270 	add.w	r2, r7, #112	; 0x70
   18030:	18d3      	adds	r3, r2, r3
   18032:	f1a3 024c 	sub.w	r2, r3, #76	; 0x4c
   18036:	f645 43d0 	movw	r3, #23760	; 0x5cd0
   1803a:	f2c0 0302 	movt	r3, #2
   1803e:	6013      	str	r3, [r2, #0]
					break;
   18040:	e016      	b.n	18070 <SetConfig+0x1e4>
				case 1:
					txConfParts[i].cBoosterType = (char) iPpdBooster;         // Booster type 1/2
   18042:	693b      	ldr	r3, [r7, #16]
   18044:	b2da      	uxtb	r2, r3
   18046:	687b      	ldr	r3, [r7, #4]
   18048:	011b      	lsls	r3, r3, #4
   1804a:	f107 0170 	add.w	r1, r7, #112	; 0x70
   1804e:	18cb      	adds	r3, r1, r3
   18050:	3b54      	subs	r3, #84	; 0x54
   18052:	711a      	strb	r2, [r3, #4]
					txConfParts[i].ptszBoosterPeripheral = IAPP_USB_NAME;     // USB_NAME external booster
   18054:	687b      	ldr	r3, [r7, #4]
   18056:	011b      	lsls	r3, r3, #4
   18058:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1805c:	18d3      	adds	r3, r2, r3
   1805e:	f1a3 024c 	sub.w	r2, r3, #76	; 0x4c
   18062:	f645 432c 	movw	r3, #23596	; 0x5c2c
   18066:	f2c0 0302 	movt	r3, #2
   1806a:	6013      	str	r3, [r2, #0]
					break;
   1806c:	e000      	b.n	18070 <SetConfig+0x1e4>
				default:
					goto lblEnd;                                              // Exit on cancel/timeout
   1806e:	e064      	b.n	1813a <SetConfig+0x2ae>
				}
				break;
   18070:	e000      	b.n	18074 <SetConfig+0x1e8>
				default:
					break;
   18072:	bf00      	nop
			iTermBooster = txConfParts[i].cBoosterType;                       // Terminal booster type 1/2/3/Islero
	}

	// Set the configuration parts on the security component
	// *****************************************************
	for (i=0; i<iNbParts; i++)
   18074:	687b      	ldr	r3, [r7, #4]
   18076:	3301      	adds	r3, #1
   18078:	607b      	str	r3, [r7, #4]
   1807a:	683b      	ldr	r3, [r7, #0]
   1807c:	687a      	ldr	r2, [r7, #4]
   1807e:	429a      	cmp	r2, r3
   18080:	f6ff af63 	blt.w	17f4a <SetConfig+0xbe>
					break;
			}
		}
	}

	iRet = SEC_SetConfig (iNbParts, txConfParts); CHECK(iRet==OK, lblKO);   // Set configuration parts
   18084:	683a      	ldr	r2, [r7, #0]
   18086:	f107 031c 	add.w	r3, r7, #28
   1808a:	4610      	mov	r0, r2
   1808c:	4619      	mov	r1, r3
   1808e:	f009 f984 	bl	2139a <SEC_SetConfig>
   18092:	61b8      	str	r0, [r7, #24]
   18094:	69bb      	ldr	r3, [r7, #24]
   18096:	2b00      	cmp	r3, #0
   18098:	d13b      	bne.n	18112 <SetConfig+0x286>
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Set Security\nConfiguration done", GL_ICON_INFORMATION, GL_BUTTON_VALID, 3*1000);
   1809a:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   1809e:	f2c0 0302 	movt	r3, #2
   180a2:	681b      	ldr	r3, [r3, #0]
   180a4:	2201      	movs	r2, #1
   180a6:	9200      	str	r2, [sp, #0]
   180a8:	f640 32b8 	movw	r2, #3000	; 0xbb8
   180ac:	9201      	str	r2, [sp, #4]
   180ae:	4618      	mov	r0, r3
   180b0:	2100      	movs	r1, #0
   180b2:	f645 42d8 	movw	r2, #23768	; 0x5cd8
   180b6:	f2c0 0202 	movt	r2, #2
   180ba:	2302      	movs	r3, #2
   180bc:	f009 fa32 	bl	21524 <GL_Dialog_Message>

	goto lblEnd;
   180c0:	e03b      	b.n	1813a <SetConfig+0x2ae>

	// Errors treatment
	// ****************
	lblNoSecDll:                                                                  // Security DLL missing
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Missing Sec DLL", GL_ICON_WARNING, GL_BUTTON_VALID, 3*1000);
   180c2:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   180c6:	f2c0 0302 	movt	r3, #2
   180ca:	681b      	ldr	r3, [r3, #0]
   180cc:	2201      	movs	r2, #1
   180ce:	9200      	str	r2, [sp, #0]
   180d0:	f640 32b8 	movw	r2, #3000	; 0xbb8
   180d4:	9201      	str	r2, [sp, #4]
   180d6:	4618      	mov	r0, r3
   180d8:	2100      	movs	r1, #0
   180da:	f645 42f8 	movw	r2, #23800	; 0x5cf8
   180de:	f2c0 0202 	movt	r2, #2
   180e2:	2303      	movs	r3, #3
   180e4:	f009 fa1e 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
   180e8:	e027      	b.n	1813a <SetConfig+0x2ae>
	lblNoPPad:
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "No PinPad Connected", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   180ea:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   180ee:	f2c0 0302 	movt	r3, #2
   180f2:	681b      	ldr	r3, [r3, #0]
   180f4:	2201      	movs	r2, #1
   180f6:	9200      	str	r2, [sp, #0]
   180f8:	f241 3288 	movw	r2, #5000	; 0x1388
   180fc:	9201      	str	r2, [sp, #4]
   180fe:	4618      	mov	r0, r3
   18100:	2100      	movs	r1, #0
   18102:	f645 5208 	movw	r2, #23816	; 0x5d08
   18106:	f2c0 0202 	movt	r2, #2
   1810a:	2304      	movs	r3, #4
   1810c:	f009 fa0a 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
   18110:	e013      	b.n	1813a <SetConfig+0x2ae>
	lblKO:                                                                        // Security DLL error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Processing Error", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   18112:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   18116:	f2c0 0302 	movt	r3, #2
   1811a:	681b      	ldr	r3, [r3, #0]
   1811c:	2201      	movs	r2, #1
   1811e:	9200      	str	r2, [sp, #0]
   18120:	f241 3288 	movw	r2, #5000	; 0x1388
   18124:	9201      	str	r2, [sp, #4]
   18126:	4618      	mov	r0, r3
   18128:	2100      	movs	r1, #0
   1812a:	f645 521c 	movw	r2, #23836	; 0x5d1c
   1812e:	f2c0 0202 	movt	r2, #2
   18132:	2304      	movs	r3, #4
   18134:	f009 f9f6 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
   18138:	bf00      	nop
	lblEnd:
	return;
}
   1813a:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1813e:	f2c0 0302 	movt	r3, #2
   18142:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   18144:	681b      	ldr	r3, [r3, #0]
   18146:	429a      	cmp	r2, r3
   18148:	d001      	beq.n	1814e <SetConfig+0x2c2>
   1814a:	f7f0 ff2b 	bl	8fa4 <__stack_chk_fail>
   1814e:	f107 0770 	add.w	r7, r7, #112	; 0x70
   18152:	46bd      	mov	sp, r7
   18154:	bd80      	pop	{r7, pc}
   18156:	bf00      	nop

00018158 <GetConfig>:
//  This function has no parameters.
//  This function has no return value.
//****************************************************************************

void GetConfig(void)
{
   18158:	b5f0      	push	{r4, r5, r6, r7, lr}
   1815a:	f6ad 6d0c 	subw	sp, sp, #3596	; 0xe0c
   1815e:	af04      	add	r7, sp, #16
   18160:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   18164:	f2c0 0302 	movt	r3, #2
   18168:	681b      	ldr	r3, [r3, #0]
   1816a:	f8c7 3df4 	str.w	r3, [r7, #3572]	; 0xdf4
	// Local variables
	// ***************
	T_GL_HWIDGET hScreen=NULL;
   1816e:	f107 030c 	add.w	r3, r7, #12
   18172:	2200      	movs	r2, #0
   18174:	601a      	str	r2, [r3, #0]
	T_GL_HWIDGET hDocument=NULL;
   18176:	f107 0310 	add.w	r3, r7, #16
   1817a:	2200      	movs	r2, #0
   1817c:	601a      	str	r2, [r3, #0]
	char tcPrint[2048];
	bool bArea;
	byte p; // Printer line index
	int i, i1, iRet;
	T_SEC_DATAKEY_ID xEraseKey;
	unsigned short Location = 1;
   1817e:	f107 030a 	add.w	r3, r7, #10
   18182:	2201      	movs	r2, #1
   18184:	801a      	strh	r2, [r3, #0]
	byte tucChkSum[3];
	doubleword uiLen;

	// Check Pinpad
	// ============
	hScreen = GoalCreateScreen(gGoalGraphicLibInstance, txSec, NUMBER_OF_LINES(txSec), GL_ENCODING_UTF8);
   18186:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   1818a:	f2c0 0302 	movt	r3, #2
   1818e:	681b      	ldr	r3, [r3, #0]
   18190:	4618      	mov	r0, r3
   18192:	f245 218c 	movw	r1, #21132	; 0x528c
   18196:	f2c0 0102 	movt	r1, #2
   1819a:	2206      	movs	r2, #6
   1819c:	2300      	movs	r3, #0
   1819e:	f7f4 ff71 	bl	d084 <GoalCreateScreen>
   181a2:	4602      	mov	r2, r0
   181a4:	f107 030c 	add.w	r3, r7, #12
   181a8:	601a      	str	r2, [r3, #0]
	CHECK(hScreen!=NULL, lblKO);                                     // Create screen and clear it
   181aa:	f107 030c 	add.w	r3, r7, #12
   181ae:	681b      	ldr	r3, [r3, #0]
   181b0:	2b00      	cmp	r3, #0
   181b2:	f000 84b3 	beq.w	18b1c <GetConfig+0x9c4>
	iRet = GoalClrScreen(hScreen, GL_COLOR_TRANSPARENT, KEY_VALID, false);
   181b6:	f107 030c 	add.w	r3, r7, #12
   181ba:	681b      	ldr	r3, [r3, #0]
   181bc:	f107 0430 	add.w	r4, r7, #48	; 0x30
   181c0:	4618      	mov	r0, r3
   181c2:	2100      	movs	r1, #0
   181c4:	2201      	movs	r2, #1
   181c6:	2300      	movs	r3, #0
   181c8:	f7f5 f8fa 	bl	d3c0 <GoalClrScreen>
   181cc:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
   181ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
   181d2:	681b      	ldr	r3, [r3, #0]
   181d4:	2b00      	cmp	r3, #0
   181d6:	f2c0 84a1 	blt.w	18b1c <GetConfig+0x9c4>

	iRet = DLLExist("SECURITY"); CHECK(iRet==TRUE, lblNoSecDll);     // Security DLL loaded?
   181da:	f107 0430 	add.w	r4, r7, #48	; 0x30
   181de:	f645 4094 	movw	r0, #23700	; 0x5c94
   181e2:	f2c0 0002 	movt	r0, #2
   181e6:	f007 fa99 	bl	1f71c <DLLExist>
   181ea:	6020      	str	r0, [r4, #0]
   181ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
   181f0:	681b      	ldr	r3, [r3, #0]
   181f2:	2b01      	cmp	r3, #1
   181f4:	f040 847e 	bne.w	18af4 <GetConfig+0x99c>
	iRet = ChkPpdConfig(); CHECK(iRet>=0, lblEnd);                   // Pinpad problem? => check config from Manager
   181f8:	f107 0430 	add.w	r4, r7, #48	; 0x30
   181fc:	f7ff f93a 	bl	17474 <ChkPpdConfig>
   18200:	6020      	str	r0, [r4, #0]
   18202:	f107 0330 	add.w	r3, r7, #48	; 0x30
   18206:	681b      	ldr	r3, [r3, #0]
   18208:	2b00      	cmp	r3, #0
   1820a:	f2c0 849b 	blt.w	18b44 <GetConfig+0x9ec>

	// Get the configuration of the security component
	// ===============================================
	iRet = SEC_GetConfig(&iNbParts, txConfParts); CHECK(iRet==OK, lblKO);
   1820e:	f107 0430 	add.w	r4, r7, #48	; 0x30
   18212:	f107 0214 	add.w	r2, r7, #20
   18216:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
   1821a:	4610      	mov	r0, r2
   1821c:	4619      	mov	r1, r3
   1821e:	f009 f81a 	bl	21256 <SEC_GetConfig>
   18222:	6020      	str	r0, [r4, #0]
   18224:	f107 0330 	add.w	r3, r7, #48	; 0x30
   18228:	681b      	ldr	r3, [r3, #0]
   1822a:	2b00      	cmp	r3, #0
   1822c:	f040 8476 	bne.w	18b1c <GetConfig+0x9c4>
	sprintf(tcPrint, "Number of secure parts: %d\n", iNbParts);
   18230:	f107 0314 	add.w	r3, r7, #20
   18234:	681b      	ldr	r3, [r3, #0]
   18236:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   1823a:	4610      	mov	r0, r2
   1823c:	f645 5130 	movw	r1, #23856	; 0x5d30
   18240:	f2c0 0102 	movt	r1, #2
   18244:	461a      	mov	r2, r3
   18246:	f7f0 ed36 	blx	8cb4 <_init+0x154>
	strcat(tcPrint, "     ----------------------------------\n");
   1824a:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   1824e:	4618      	mov	r0, r3
   18250:	f7f0 ed18 	blx	8c84 <_init+0x124>
   18254:	4603      	mov	r3, r0
   18256:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   1825a:	18d2      	adds	r2, r2, r3
   1825c:	f645 534c 	movw	r3, #23884	; 0x5d4c
   18260:	f2c0 0302 	movt	r3, #2
   18264:	461c      	mov	r4, r3
   18266:	4615      	mov	r5, r2
   18268:	f104 0c20 	add.w	ip, r4, #32
   1826c:	462e      	mov	r6, r5
   1826e:	46a6      	mov	lr, r4
   18270:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   18274:	6030      	str	r0, [r6, #0]
   18276:	6071      	str	r1, [r6, #4]
   18278:	60b2      	str	r2, [r6, #8]
   1827a:	60f3      	str	r3, [r6, #12]
   1827c:	3410      	adds	r4, #16
   1827e:	3510      	adds	r5, #16
   18280:	4564      	cmp	r4, ip
   18282:	d1f3      	bne.n	1826c <GetConfig+0x114>
   18284:	462a      	mov	r2, r5
   18286:	4623      	mov	r3, r4
   18288:	cb03      	ldmia	r3!, {r0, r1}
   1828a:	6010      	str	r0, [r2, #0]
   1828c:	6051      	str	r1, [r2, #4]
   1828e:	781b      	ldrb	r3, [r3, #0]
   18290:	7213      	strb	r3, [r2, #8]
	for (i=0; i<iNbParts; i++)
   18292:	f107 0328 	add.w	r3, r7, #40	; 0x28
   18296:	2200      	movs	r2, #0
   18298:	601a      	str	r2, [r3, #0]
   1829a:	e159      	b.n	18550 <GetConfig+0x3f8>
	{
		switch (txConfParts[i].SecureType)
   1829c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
   182a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
   182a4:	681b      	ldr	r3, [r3, #0]
   182a6:	011b      	lsls	r3, r3, #4
   182a8:	18d3      	adds	r3, r2, r3
   182aa:	681b      	ldr	r3, [r3, #0]
   182ac:	2b02      	cmp	r3, #2
   182ae:	d022      	beq.n	182f6 <GetConfig+0x19e>
   182b0:	2b03      	cmp	r3, #3
   182b2:	d049      	beq.n	18348 <GetConfig+0x1f0>
   182b4:	2b01      	cmp	r3, #1
   182b6:	d170      	bne.n	1839a <GetConfig+0x242>
		{
		case C_SEC_PINCODE:   strcpy(tcDisplay, "PIN ENTRY on ");   strcat(tcPrint, "PIN ENTRY on ");   break;
   182b8:	f207 42f4 	addw	r2, r7, #1268	; 0x4f4
   182bc:	f645 5378 	movw	r3, #23928	; 0x5d78
   182c0:	f2c0 0302 	movt	r3, #2
   182c4:	4614      	mov	r4, r2
   182c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   182c8:	c407      	stmia	r4!, {r0, r1, r2}
   182ca:	8023      	strh	r3, [r4, #0]
   182cc:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   182d0:	4618      	mov	r0, r3
   182d2:	f7f0 ecd8 	blx	8c84 <_init+0x124>
   182d6:	4603      	mov	r3, r0
   182d8:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   182dc:	18d2      	adds	r2, r2, r3
   182de:	f645 5378 	movw	r3, #23928	; 0x5d78
   182e2:	f2c0 0302 	movt	r3, #2
   182e6:	4614      	mov	r4, r2
   182e8:	cb07      	ldmia	r3!, {r0, r1, r2}
   182ea:	6020      	str	r0, [r4, #0]
   182ec:	6061      	str	r1, [r4, #4]
   182ee:	60a2      	str	r2, [r4, #8]
   182f0:	881b      	ldrh	r3, [r3, #0]
   182f2:	81a3      	strh	r3, [r4, #12]
   182f4:	e052      	b.n	1839c <GetConfig+0x244>
		case C_SEC_CARD:      strcat(tcDisplay, "CARD READER on "); strcat(tcPrint, "CARD READER on "); break;
   182f6:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
   182fa:	4618      	mov	r0, r3
   182fc:	f7f0 ecc2 	blx	8c84 <_init+0x124>
   18300:	4603      	mov	r3, r0
   18302:	f207 42f4 	addw	r2, r7, #1268	; 0x4f4
   18306:	18d2      	adds	r2, r2, r3
   18308:	f645 5388 	movw	r3, #23944	; 0x5d88
   1830c:	f2c0 0302 	movt	r3, #2
   18310:	4614      	mov	r4, r2
   18312:	461d      	mov	r5, r3
   18314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   18316:	6020      	str	r0, [r4, #0]
   18318:	6061      	str	r1, [r4, #4]
   1831a:	60a2      	str	r2, [r4, #8]
   1831c:	60e3      	str	r3, [r4, #12]
   1831e:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   18322:	4618      	mov	r0, r3
   18324:	f7f0 ecae 	blx	8c84 <_init+0x124>
   18328:	4603      	mov	r3, r0
   1832a:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   1832e:	18d2      	adds	r2, r2, r3
   18330:	f645 5388 	movw	r3, #23944	; 0x5d88
   18334:	f2c0 0302 	movt	r3, #2
   18338:	4614      	mov	r4, r2
   1833a:	461d      	mov	r5, r3
   1833c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1833e:	6020      	str	r0, [r4, #0]
   18340:	6061      	str	r1, [r4, #4]
   18342:	60a2      	str	r2, [r4, #8]
   18344:	60e3      	str	r3, [r4, #12]
   18346:	e029      	b.n	1839c <GetConfig+0x244>
		case C_SEC_CIPHERING: strcat(tcDisplay, "CIPHERING on ");   strcat(tcPrint, "CIPHERING on ");   break;
   18348:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
   1834c:	4618      	mov	r0, r3
   1834e:	f7f0 ec9a 	blx	8c84 <_init+0x124>
   18352:	4603      	mov	r3, r0
   18354:	f207 42f4 	addw	r2, r7, #1268	; 0x4f4
   18358:	18d2      	adds	r2, r2, r3
   1835a:	f645 5398 	movw	r3, #23960	; 0x5d98
   1835e:	f2c0 0302 	movt	r3, #2
   18362:	4614      	mov	r4, r2
   18364:	cb07      	ldmia	r3!, {r0, r1, r2}
   18366:	6020      	str	r0, [r4, #0]
   18368:	6061      	str	r1, [r4, #4]
   1836a:	60a2      	str	r2, [r4, #8]
   1836c:	881b      	ldrh	r3, [r3, #0]
   1836e:	81a3      	strh	r3, [r4, #12]
   18370:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   18374:	4618      	mov	r0, r3
   18376:	f7f0 ec86 	blx	8c84 <_init+0x124>
   1837a:	4603      	mov	r3, r0
   1837c:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   18380:	18d2      	adds	r2, r2, r3
   18382:	f645 5398 	movw	r3, #23960	; 0x5d98
   18386:	f2c0 0302 	movt	r3, #2
   1838a:	4614      	mov	r4, r2
   1838c:	cb07      	ldmia	r3!, {r0, r1, r2}
   1838e:	6020      	str	r0, [r4, #0]
   18390:	6061      	str	r1, [r4, #4]
   18392:	60a2      	str	r2, [r4, #8]
   18394:	881b      	ldrh	r3, [r3, #0]
   18396:	81a3      	strh	r3, [r4, #12]
   18398:	e000      	b.n	1839c <GetConfig+0x244>
		default:              goto lblKO;
   1839a:	e3bf      	b.n	18b1c <GetConfig+0x9c4>
		}
		// Get device type Pinpad or Terminal
		if (memcmp (txConfParts[i].ptszBoosterPeripheral, IAPP_USB_NAME, strlen(IAPP_USB_NAME)) == 0)
   1839c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
   183a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
   183a4:	681b      	ldr	r3, [r3, #0]
   183a6:	011b      	lsls	r3, r3, #4
   183a8:	18d3      	adds	r3, r2, r3
   183aa:	3308      	adds	r3, #8
   183ac:	681b      	ldr	r3, [r3, #0]
   183ae:	4618      	mov	r0, r3
   183b0:	f645 412c 	movw	r1, #23596	; 0x5c2c
   183b4:	f2c0 0102 	movt	r1, #2
   183b8:	2208      	movs	r2, #8
   183ba:	f7f0 ec9c 	blx	8cf4 <_init+0x194>
   183be:	4603      	mov	r3, r0
   183c0:	2b00      	cmp	r3, #0
   183c2:	d120      	bne.n	18406 <GetConfig+0x2ae>
		{
			strcat(tcDisplay, "PINPAD\n"); strcat(tcPrint, "PINPAD\n");
   183c4:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
   183c8:	4618      	mov	r0, r3
   183ca:	f7f0 ec5c 	blx	8c84 <_init+0x124>
   183ce:	4603      	mov	r3, r0
   183d0:	f207 42f4 	addw	r2, r7, #1268	; 0x4f4
   183d4:	18d2      	adds	r2, r2, r3
   183d6:	f645 53a8 	movw	r3, #23976	; 0x5da8
   183da:	f2c0 0302 	movt	r3, #2
   183de:	cb03      	ldmia	r3!, {r0, r1}
   183e0:	6010      	str	r0, [r2, #0]
   183e2:	6051      	str	r1, [r2, #4]
   183e4:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   183e8:	4618      	mov	r0, r3
   183ea:	f7f0 ec4c 	blx	8c84 <_init+0x124>
   183ee:	4603      	mov	r3, r0
   183f0:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   183f4:	18d2      	adds	r2, r2, r3
   183f6:	f645 53a8 	movw	r3, #23976	; 0x5da8
   183fa:	f2c0 0302 	movt	r3, #2
   183fe:	cb03      	ldmia	r3!, {r0, r1}
   18400:	6010      	str	r0, [r2, #0]
   18402:	6051      	str	r1, [r2, #4]
   18404:	e023      	b.n	1844e <GetConfig+0x2f6>
		}
		else
		{
			strcat(tcDisplay, "TERMINAL\n"); strcat(tcPrint, "TERMINAL\n");
   18406:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
   1840a:	4618      	mov	r0, r3
   1840c:	f7f0 ec3a 	blx	8c84 <_init+0x124>
   18410:	4603      	mov	r3, r0
   18412:	f207 42f4 	addw	r2, r7, #1268	; 0x4f4
   18416:	18d2      	adds	r2, r2, r3
   18418:	f645 53b0 	movw	r3, #23984	; 0x5db0
   1841c:	f2c0 0302 	movt	r3, #2
   18420:	cb03      	ldmia	r3!, {r0, r1}
   18422:	6010      	str	r0, [r2, #0]
   18424:	6051      	str	r1, [r2, #4]
   18426:	881b      	ldrh	r3, [r3, #0]
   18428:	8113      	strh	r3, [r2, #8]
   1842a:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   1842e:	4618      	mov	r0, r3
   18430:	f7f0 ec28 	blx	8c84 <_init+0x124>
   18434:	4603      	mov	r3, r0
   18436:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   1843a:	18d2      	adds	r2, r2, r3
   1843c:	f645 53b0 	movw	r3, #23984	; 0x5db0
   18440:	f2c0 0302 	movt	r3, #2
   18444:	cb03      	ldmia	r3!, {r0, r1}
   18446:	6010      	str	r0, [r2, #0]
   18448:	6051      	str	r1, [r2, #4]
   1844a:	881b      	ldrh	r3, [r3, #0]
   1844c:	8113      	strh	r3, [r2, #8]
		}

		if (txConfParts[i].SecureType == C_SEC_CIPHERING)
   1844e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
   18452:	f107 0328 	add.w	r3, r7, #40	; 0x28
   18456:	681b      	ldr	r3, [r3, #0]
   18458:	011b      	lsls	r3, r3, #4
   1845a:	18d3      	adds	r3, r2, r3
   1845c:	681b      	ldr	r3, [r3, #0]
   1845e:	2b03      	cmp	r3, #3
   18460:	d160      	bne.n	18524 <GetConfig+0x3cc>
		{
			cBooster = txConfParts[i].cBoosterType;                  // Get booster type (B1, B2, B3, Islero)
   18462:	f107 0308 	add.w	r3, r7, #8
   18466:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
   1846a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1846e:	6812      	ldr	r2, [r2, #0]
   18470:	0112      	lsls	r2, r2, #4
   18472:	188a      	adds	r2, r1, r2
   18474:	7912      	ldrb	r2, [r2, #4]
   18476:	701a      	strb	r2, [r3, #0]
			switch (cBooster)
   18478:	f107 0308 	add.w	r3, r7, #8
   1847c:	781b      	ldrb	r3, [r3, #0]
   1847e:	2b00      	cmp	r3, #0
   18480:	d002      	beq.n	18488 <GetConfig+0x330>
   18482:	2b01      	cmp	r3, #1
   18484:	d017      	beq.n	184b6 <GetConfig+0x35e>
   18486:	e032      	b.n	184ee <GetConfig+0x396>
			{
			case C_SEC_BL1: strcat(tcPrint, "- Booster Type=1\n"); break;
   18488:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   1848c:	4618      	mov	r0, r3
   1848e:	f7f0 ebfa 	blx	8c84 <_init+0x124>
   18492:	4603      	mov	r3, r0
   18494:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   18498:	18d2      	adds	r2, r2, r3
   1849a:	f645 53bc 	movw	r3, #23996	; 0x5dbc
   1849e:	f2c0 0302 	movt	r3, #2
   184a2:	4615      	mov	r5, r2
   184a4:	461c      	mov	r4, r3
   184a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   184a8:	6028      	str	r0, [r5, #0]
   184aa:	6069      	str	r1, [r5, #4]
   184ac:	60aa      	str	r2, [r5, #8]
   184ae:	60eb      	str	r3, [r5, #12]
   184b0:	8823      	ldrh	r3, [r4, #0]
   184b2:	822b      	strh	r3, [r5, #16]
   184b4:	e045      	b.n	18542 <GetConfig+0x3ea>
			case C_SEC_BL2: strcat(tcPrint, "- Booster Type=2 or 3\n"); break;
   184b6:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   184ba:	4618      	mov	r0, r3
   184bc:	f7f0 ebe2 	blx	8c84 <_init+0x124>
   184c0:	4603      	mov	r3, r0
   184c2:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   184c6:	18d2      	adds	r2, r2, r3
   184c8:	f645 53d0 	movw	r3, #24016	; 0x5dd0
   184cc:	f2c0 0302 	movt	r3, #2
   184d0:	4614      	mov	r4, r2
   184d2:	461d      	mov	r5, r3
   184d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   184d6:	6020      	str	r0, [r4, #0]
   184d8:	6061      	str	r1, [r4, #4]
   184da:	60a2      	str	r2, [r4, #8]
   184dc:	60e3      	str	r3, [r4, #12]
   184de:	6828      	ldr	r0, [r5, #0]
   184e0:	6120      	str	r0, [r4, #16]
   184e2:	88aa      	ldrh	r2, [r5, #4]
   184e4:	79ab      	ldrb	r3, [r5, #6]
   184e6:	82a2      	strh	r2, [r4, #20]
   184e8:	75a3      	strb	r3, [r4, #22]
   184ea:	bf00      	nop
   184ec:	e029      	b.n	18542 <GetConfig+0x3ea>
			default:        strcat(tcPrint, "- Booster Type=Islero\n"); break;
   184ee:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   184f2:	4618      	mov	r0, r3
   184f4:	f7f0 ebc6 	blx	8c84 <_init+0x124>
   184f8:	4603      	mov	r3, r0
   184fa:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   184fe:	18d2      	adds	r2, r2, r3
   18500:	f645 53e8 	movw	r3, #24040	; 0x5de8
   18504:	f2c0 0302 	movt	r3, #2
   18508:	4614      	mov	r4, r2
   1850a:	461d      	mov	r5, r3
   1850c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1850e:	6020      	str	r0, [r4, #0]
   18510:	6061      	str	r1, [r4, #4]
   18512:	60a2      	str	r2, [r4, #8]
   18514:	60e3      	str	r3, [r4, #12]
   18516:	6828      	ldr	r0, [r5, #0]
   18518:	6120      	str	r0, [r4, #16]
   1851a:	88aa      	ldrh	r2, [r5, #4]
   1851c:	79ab      	ldrb	r3, [r5, #6]
   1851e:	82a2      	strh	r2, [r4, #20]
   18520:	75a3      	strb	r3, [r4, #22]
   18522:	e00e      	b.n	18542 <GetConfig+0x3ea>
			}
		}
		else
			strcat(tcDisplay, "\n");
   18524:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
   18528:	4618      	mov	r0, r3
   1852a:	f7f0 ebac 	blx	8c84 <_init+0x124>
   1852e:	4603      	mov	r3, r0
   18530:	f207 42f4 	addw	r2, r7, #1268	; 0x4f4
   18534:	18d2      	adds	r2, r2, r3
   18536:	f645 6300 	movw	r3, #24064	; 0x5e00
   1853a:	f2c0 0302 	movt	r3, #2
   1853e:	881b      	ldrh	r3, [r3, #0]
   18540:	8013      	strh	r3, [r2, #0]
	// Get the configuration of the security component
	// ===============================================
	iRet = SEC_GetConfig(&iNbParts, txConfParts); CHECK(iRet==OK, lblKO);
	sprintf(tcPrint, "Number of secure parts: %d\n", iNbParts);
	strcat(tcPrint, "     ----------------------------------\n");
	for (i=0; i<iNbParts; i++)
   18542:	f107 0328 	add.w	r3, r7, #40	; 0x28
   18546:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1854a:	6812      	ldr	r2, [r2, #0]
   1854c:	3201      	adds	r2, #1
   1854e:	601a      	str	r2, [r3, #0]
   18550:	f107 0314 	add.w	r3, r7, #20
   18554:	681b      	ldr	r3, [r3, #0]
   18556:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1855a:	6812      	ldr	r2, [r2, #0]
   1855c:	429a      	cmp	r2, r3
   1855e:	f6ff ae9d 	blt.w	1829c <GetConfig+0x144>
			}
		}
		else
			strcat(tcDisplay, "\n");
	}
	strcat(tcPrint, "     ----------------------------------\n");
   18562:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   18566:	4618      	mov	r0, r3
   18568:	f7f0 eb8c 	blx	8c84 <_init+0x124>
   1856c:	4603      	mov	r3, r0
   1856e:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   18572:	18d2      	adds	r2, r2, r3
   18574:	f645 534c 	movw	r3, #23884	; 0x5d4c
   18578:	f2c0 0302 	movt	r3, #2
   1857c:	461c      	mov	r4, r3
   1857e:	4615      	mov	r5, r2
   18580:	f104 0c20 	add.w	ip, r4, #32
   18584:	462e      	mov	r6, r5
   18586:	46a6      	mov	lr, r4
   18588:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1858c:	6030      	str	r0, [r6, #0]
   1858e:	6071      	str	r1, [r6, #4]
   18590:	60b2      	str	r2, [r6, #8]
   18592:	60f3      	str	r3, [r6, #12]
   18594:	3410      	adds	r4, #16
   18596:	3510      	adds	r5, #16
   18598:	4564      	cmp	r4, ip
   1859a:	d1f3      	bne.n	18584 <GetConfig+0x42c>
   1859c:	462a      	mov	r2, r5
   1859e:	4623      	mov	r3, r4
   185a0:	cb03      	ldmia	r3!, {r0, r1}
   185a2:	6010      	str	r0, [r2, #0]
   185a4:	6051      	str	r1, [r2, #4]
   185a6:	781b      	ldrb	r3, [r3, #0]
   185a8:	7213      	strb	r3, [r2, #8]

	// Get the list of Ids of loaded schemes and secret areas in a secure part
	// =======================================================================
	memset (tiList, 0, sizeof(tiList));
   185aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
   185ae:	4618      	mov	r0, r3
   185b0:	2100      	movs	r1, #0
   185b2:	2228      	movs	r2, #40	; 0x28
   185b4:	f7f0 eb02 	blx	8bbc <_init+0x5c>
	iNbId=5;                                                     // Max of secret zone
   185b8:	f107 0318 	add.w	r3, r7, #24
   185bc:	2205      	movs	r2, #5
   185be:	601a      	str	r2, [r3, #0]
	iRet = SEC_listSecureId (C_SEC_CIPHERING, &iNbId, tiList); CHECK(iRet==OK, lblKO);
   185c0:	f107 0430 	add.w	r4, r7, #48	; 0x30
   185c4:	f107 0218 	add.w	r2, r7, #24
   185c8:	f107 0390 	add.w	r3, r7, #144	; 0x90
   185cc:	2003      	movs	r0, #3
   185ce:	4611      	mov	r1, r2
   185d0:	461a      	mov	r2, r3
   185d2:	f008 fe88 	bl	212e6 <SEC_listSecureId>
   185d6:	6020      	str	r0, [r4, #0]
   185d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
   185dc:	681b      	ldr	r3, [r3, #0]
   185de:	2b00      	cmp	r3, #0
   185e0:	f040 829c 	bne.w	18b1c <GetConfig+0x9c4>
	if (iNbId==0)
   185e4:	f107 0318 	add.w	r3, r7, #24
   185e8:	681b      	ldr	r3, [r3, #0]
   185ea:	2b00      	cmp	r3, #0
   185ec:	d118      	bne.n	18620 <GetConfig+0x4c8>
		strcat(tcPrint, "Secret Area Id(s): 0\n");               // No secret area available
   185ee:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   185f2:	4618      	mov	r0, r3
   185f4:	f7f0 eb46 	blx	8c84 <_init+0x124>
   185f8:	4603      	mov	r3, r0
   185fa:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   185fe:	18d2      	adds	r2, r2, r3
   18600:	f645 6304 	movw	r3, #24068	; 0x5e04
   18604:	f2c0 0302 	movt	r3, #2
   18608:	4615      	mov	r5, r2
   1860a:	461c      	mov	r4, r3
   1860c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1860e:	6028      	str	r0, [r5, #0]
   18610:	6069      	str	r1, [r5, #4]
   18612:	60aa      	str	r2, [r5, #8]
   18614:	60eb      	str	r3, [r5, #12]
   18616:	6820      	ldr	r0, [r4, #0]
   18618:	6128      	str	r0, [r5, #16]
   1861a:	88a3      	ldrh	r3, [r4, #4]
   1861c:	82ab      	strh	r3, [r5, #20]
   1861e:	e015      	b.n	1864c <GetConfig+0x4f4>
	else
		strcat(tcPrint, "Secret Area Id(s):\n");
   18620:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   18624:	4618      	mov	r0, r3
   18626:	f7f0 eb2e 	blx	8c84 <_init+0x124>
   1862a:	4603      	mov	r3, r0
   1862c:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   18630:	18d2      	adds	r2, r2, r3
   18632:	f645 631c 	movw	r3, #24092	; 0x5e1c
   18636:	f2c0 0302 	movt	r3, #2
   1863a:	4615      	mov	r5, r2
   1863c:	461c      	mov	r4, r3
   1863e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   18640:	6028      	str	r0, [r5, #0]
   18642:	6069      	str	r1, [r5, #4]
   18644:	60aa      	str	r2, [r5, #8]
   18646:	60eb      	str	r3, [r5, #12]
   18648:	6820      	ldr	r0, [r4, #0]
   1864a:	6128      	str	r0, [r5, #16]
	bArea=FALSE;
   1864c:	1dfb      	adds	r3, r7, #7
   1864e:	2200      	movs	r2, #0
   18650:	701a      	strb	r2, [r3, #0]
	for (i1=0; i1<iNbId; i1++)                                   // Get list of secret areas
   18652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   18656:	2200      	movs	r2, #0
   18658:	601a      	str	r2, [r3, #0]
   1865a:	e156      	b.n	1890a <GetConfig+0x7b2>
	{
		if (tiList[i1] == AreaId())
   1865c:	f107 0390 	add.w	r3, r7, #144	; 0x90
   18660:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   18664:	6812      	ldr	r2, [r2, #0]
   18666:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
   1866a:	f7ff f90d 	bl	17888 <AreaId>
   1866e:	4603      	mov	r3, r0
   18670:	429c      	cmp	r4, r3
   18672:	f040 812b 	bne.w	188cc <GetConfig+0x774>
		{
			sprintf(&tcPrint[strlen(tcPrint)], "%08x  => Key Id(s):\n", tiList[i1]);
   18676:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   1867a:	4618      	mov	r0, r3
   1867c:	f7f0 eb02 	blx	8c84 <_init+0x124>
   18680:	4603      	mov	r3, r0
   18682:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   18686:	18d2      	adds	r2, r2, r3
   18688:	f107 0390 	add.w	r3, r7, #144	; 0x90
   1868c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   18690:	6809      	ldr	r1, [r1, #0]
   18692:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   18696:	4610      	mov	r0, r2
   18698:	f645 6130 	movw	r1, #24112	; 0x5e30
   1869c:	f2c0 0102 	movt	r1, #2
   186a0:	461a      	mov	r2, r3
   186a2:	f7f0 eb08 	blx	8cb4 <_init+0x154>
			iRet = SEC_listTLVKeys (C_SEC_CIPHERING, AreaId(), sizeof(txKeyList),
   186a6:	f7ff f8ef 	bl	17888 <AreaId>
   186aa:	4602      	mov	r2, r0
   186ac:	f107 0430 	add.w	r4, r7, #48	; 0x30
   186b0:	f107 031c 	add.w	r3, r7, #28
					&iNbKey, txKeyList);
   186b4:	f507 7184 	add.w	r1, r7, #264	; 0x108
	for (i1=0; i1<iNbId; i1++)                                   // Get list of secret areas
	{
		if (tiList[i1] == AreaId())
		{
			sprintf(&tcPrint[strlen(tcPrint)], "%08x  => Key Id(s):\n", tiList[i1]);
			iRet = SEC_listTLVKeys (C_SEC_CIPHERING, AreaId(), sizeof(txKeyList),
   186b8:	9100      	str	r1, [sp, #0]
   186ba:	2003      	movs	r0, #3
   186bc:	4611      	mov	r1, r2
   186be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   186c2:	f008 fe22 	bl	2130a <SEC_listTLVKeys>
   186c6:	6020      	str	r0, [r4, #0]
					&iNbKey, txKeyList);
			if (iRet == OK)
   186c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
   186cc:	681b      	ldr	r3, [r3, #0]
   186ce:	2b00      	cmp	r3, #0
   186d0:	d131      	bne.n	18736 <GetConfig+0x5de>
			{
				for (i2=0; i2<iNbKey; i2++)                      // Get list of keys from my secret area
   186d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
   186d6:	2200      	movs	r2, #0
   186d8:	601a      	str	r2, [r3, #0]
   186da:	e023      	b.n	18724 <GetConfig+0x5cc>
					sprintf(&tcPrint[strlen(tcPrint)], "                            %08x\n", txKeyList[i2].uiTLVKeyId);
   186dc:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   186e0:	4618      	mov	r0, r3
   186e2:	f7f0 ead0 	blx	8c84 <_init+0x124>
   186e6:	4603      	mov	r3, r0
   186e8:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   186ec:	18d1      	adds	r1, r2, r3
   186ee:	f507 7084 	add.w	r0, r7, #264	; 0x108
   186f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
   186f6:	681a      	ldr	r2, [r3, #0]
   186f8:	4613      	mov	r3, r2
   186fa:	009b      	lsls	r3, r3, #2
   186fc:	189b      	adds	r3, r3, r2
   186fe:	009b      	lsls	r3, r3, #2
   18700:	18c3      	adds	r3, r0, r3
   18702:	3310      	adds	r3, #16
   18704:	681b      	ldr	r3, [r3, #0]
   18706:	4608      	mov	r0, r1
   18708:	f645 6148 	movw	r1, #24136	; 0x5e48
   1870c:	f2c0 0102 	movt	r1, #2
   18710:	461a      	mov	r2, r3
   18712:	f7f0 ead0 	blx	8cb4 <_init+0x154>
			sprintf(&tcPrint[strlen(tcPrint)], "%08x  => Key Id(s):\n", tiList[i1]);
			iRet = SEC_listTLVKeys (C_SEC_CIPHERING, AreaId(), sizeof(txKeyList),
					&iNbKey, txKeyList);
			if (iRet == OK)
			{
				for (i2=0; i2<iNbKey; i2++)                      // Get list of keys from my secret area
   18716:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1871a:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1871e:	6812      	ldr	r2, [r2, #0]
   18720:	3201      	adds	r2, #1
   18722:	601a      	str	r2, [r3, #0]
   18724:	f107 031c 	add.w	r3, r7, #28
   18728:	681b      	ldr	r3, [r3, #0]
   1872a:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1872e:	6812      	ldr	r2, [r2, #0]
   18730:	429a      	cmp	r2, r3
   18732:	dbd3      	blt.n	186dc <GetConfig+0x584>
   18734:	e021      	b.n	1877a <GetConfig+0x622>
					sprintf(&tcPrint[strlen(tcPrint)], "                            %08x\n", txKeyList[i2].uiTLVKeyId);
			}
			else
				strcat(tcPrint, "                            Scheme missing\n");
   18736:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   1873a:	4618      	mov	r0, r3
   1873c:	f7f0 eaa2 	blx	8c84 <_init+0x124>
   18740:	4603      	mov	r3, r0
   18742:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   18746:	18d2      	adds	r2, r2, r3
   18748:	f645 636c 	movw	r3, #24172	; 0x5e6c
   1874c:	f2c0 0302 	movt	r3, #2
   18750:	461c      	mov	r4, r3
   18752:	4615      	mov	r5, r2
   18754:	f104 0c20 	add.w	ip, r4, #32
   18758:	462e      	mov	r6, r5
   1875a:	46a6      	mov	lr, r4
   1875c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   18760:	6030      	str	r0, [r6, #0]
   18762:	6071      	str	r1, [r6, #4]
   18764:	60b2      	str	r2, [r6, #8]
   18766:	60f3      	str	r3, [r6, #12]
   18768:	3410      	adds	r4, #16
   1876a:	3510      	adds	r5, #16
   1876c:	4564      	cmp	r4, ip
   1876e:	d1f3      	bne.n	18758 <GetConfig+0x600>
   18770:	4623      	mov	r3, r4
   18772:	cb07      	ldmia	r3!, {r0, r1, r2}
   18774:	6028      	str	r0, [r5, #0]
   18776:	6069      	str	r1, [r5, #4]
   18778:	60aa      	str	r2, [r5, #8]

			sprintf(&tcDisplay[strlen(tcDisplay)], "Secret Area = %08x\n", tiList[i1]);
   1877a:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
   1877e:	4618      	mov	r0, r3
   18780:	f7f0 ea80 	blx	8c84 <_init+0x124>
   18784:	4603      	mov	r3, r0
   18786:	f207 42f4 	addw	r2, r7, #1268	; 0x4f4
   1878a:	18d2      	adds	r2, r2, r3
   1878c:	f107 0390 	add.w	r3, r7, #144	; 0x90
   18790:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   18794:	6809      	ldr	r1, [r1, #0]
   18796:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1879a:	4610      	mov	r0, r2
   1879c:	f645 6198 	movw	r1, #24216	; 0x5e98
   187a0:	f2c0 0102 	movt	r1, #2
   187a4:	461a      	mov	r2, r3
   187a6:	f7f0 ea86 	blx	8cb4 <_init+0x154>
			iRet = SEC_isSecretArea(C_SEC_CIPHERING, tiList[i1]);
   187aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
   187ae:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   187b2:	6812      	ldr	r2, [r2, #0]
   187b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   187b8:	f107 0430 	add.w	r4, r7, #48	; 0x30
   187bc:	2003      	movs	r0, #3
   187be:	4619      	mov	r1, r3
   187c0:	f008 fd6d 	bl	2129e <SEC_isSecretArea>
   187c4:	6020      	str	r0, [r4, #0]
			if(iRet == OK){
   187c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
   187ca:	681b      	ldr	r3, [r3, #0]
   187cc:	2b00      	cmp	r3, #0
   187ce:	d179      	bne.n	188c4 <GetConfig+0x76c>

				xEraseKey.iSecretArea = AreaId();;
   187d0:	f7ff f85a 	bl	17888 <AreaId>
   187d4:	4602      	mov	r2, r0
   187d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
   187da:	601a      	str	r2, [r3, #0]
				xEraseKey.cAlgoType   = TLV_TYPE_KTDES;
   187dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
   187e0:	2202      	movs	r2, #2
   187e2:	711a      	strb	r2, [r3, #4]
				xEraseKey.usNumber    = 0; //This is what we are looking for
   187e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
   187e8:	2200      	movs	r2, #0
   187ea:	80da      	strh	r2, [r3, #6]
				xEraseKey.uiBankId    = BANK_ROOT_ID;
   187ec:	f107 0234 	add.w	r2, r7, #52	; 0x34
   187f0:	f44f 733f 	mov.w	r3, #764	; 0x2fc
   187f4:	f2c8 0300 	movt	r3, #32768	; 0x8000
   187f8:	6093      	str	r3, [r2, #8]

				iRet = SEC_KeyVerify (C_SEC_CIPHERING, &xEraseKey, tucChkSum, &uiLen);                                // Length checksum
   187fa:	f107 0430 	add.w	r4, r7, #48	; 0x30
   187fe:	f107 0134 	add.w	r1, r7, #52	; 0x34
   18802:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
   18806:	f107 0320 	add.w	r3, r7, #32
   1880a:	2003      	movs	r0, #3
   1880c:	f008 fd59 	bl	212c2 <SEC_KeyVerify>
   18810:	6020      	str	r0, [r4, #0]
				if (iRet != OK) {
   18812:	f107 0330 	add.w	r3, r7, #48	; 0x30
   18816:	681b      	ldr	r3, [r3, #0]
   18818:	2b00      	cmp	r3, #0
   1881a:	d044      	beq.n	188a6 <GetConfig+0x74e>
					while(xEraseKey.usNumber < 768){
   1881c:	e038      	b.n	18890 <GetConfig+0x738>
						xEraseKey.usNumber = Location;
   1881e:	f107 0334 	add.w	r3, r7, #52	; 0x34
   18822:	f107 020a 	add.w	r2, r7, #10
   18826:	8812      	ldrh	r2, [r2, #0]
   18828:	80da      	strh	r2, [r3, #6]
						iRet = SEC_KeyVerify (C_SEC_CIPHERING, &xEraseKey, tucChkSum, &uiLen);
   1882a:	f107 0430 	add.w	r4, r7, #48	; 0x30
   1882e:	f107 0134 	add.w	r1, r7, #52	; 0x34
   18832:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
   18836:	f107 0320 	add.w	r3, r7, #32
   1883a:	2003      	movs	r0, #3
   1883c:	f008 fd41 	bl	212c2 <SEC_KeyVerify>
   18840:	6020      	str	r0, [r4, #0]
						if (iRet == OK) {
   18842:	f107 0330 	add.w	r3, r7, #48	; 0x30
   18846:	681b      	ldr	r3, [r3, #0]
   18848:	2b00      	cmp	r3, #0
   1884a:	d11a      	bne.n	18882 <GetConfig+0x72a>
							iRet = Telium_Pprintf("   Key Loc %04d\n", xEraseKey.usNumber); CHECK(iRet>=0, lblKO);
   1884c:	f107 0334 	add.w	r3, r7, #52	; 0x34
   18850:	88db      	ldrh	r3, [r3, #6]
   18852:	f107 0430 	add.w	r4, r7, #48	; 0x30
   18856:	f645 60ac 	movw	r0, #24236	; 0x5eac
   1885a:	f2c0 0002 	movt	r0, #2
   1885e:	4619      	mov	r1, r3
   18860:	f007 fef4 	bl	2064c <Telium_Pprintf>
   18864:	6020      	str	r0, [r4, #0]
   18866:	f107 0330 	add.w	r3, r7, #48	; 0x30
   1886a:	681b      	ldr	r3, [r3, #0]
   1886c:	2b00      	cmp	r3, #0
   1886e:	f2c0 8155 	blt.w	18b1c <GetConfig+0x9c4>
							Location+=4;		//To skip 4 elements used by this key loc.
   18872:	f107 030a 	add.w	r3, r7, #10
   18876:	f107 020a 	add.w	r2, r7, #10
   1887a:	8812      	ldrh	r2, [r2, #0]
   1887c:	3204      	adds	r2, #4
   1887e:	801a      	strh	r2, [r3, #0]
							continue;
   18880:	e006      	b.n	18890 <GetConfig+0x738>
						}
						Location++;
   18882:	f107 030a 	add.w	r3, r7, #10
   18886:	f107 020a 	add.w	r2, r7, #10
   1888a:	8812      	ldrh	r2, [r2, #0]
   1888c:	3201      	adds	r2, #1
   1888e:	801a      	strh	r2, [r3, #0]
				xEraseKey.usNumber    = 0; //This is what we are looking for
				xEraseKey.uiBankId    = BANK_ROOT_ID;

				iRet = SEC_KeyVerify (C_SEC_CIPHERING, &xEraseKey, tucChkSum, &uiLen);                                // Length checksum
				if (iRet != OK) {
					while(xEraseKey.usNumber < 768){
   18890:	f107 0334 	add.w	r3, r7, #52	; 0x34
   18894:	88da      	ldrh	r2, [r3, #6]
   18896:	f240 23ff 	movw	r3, #767	; 0x2ff
   1889a:	429a      	cmp	r2, r3
   1889c:	d9bf      	bls.n	1881e <GetConfig+0x6c6>
							Location+=4;		//To skip 4 elements used by this key loc.
							continue;
						}
						Location++;
					}
					Location = 1;
   1889e:	f107 030a 	add.w	r3, r7, #10
   188a2:	2201      	movs	r2, #1
   188a4:	801a      	strh	r2, [r3, #0]
				}
				iRet = Telium_Pprintf("\n\n"); CHECK(iRet>=0, lblKO);
   188a6:	f107 0430 	add.w	r4, r7, #48	; 0x30
   188aa:	f645 60c0 	movw	r0, #24256	; 0x5ec0
   188ae:	f2c0 0002 	movt	r0, #2
   188b2:	f007 fecb 	bl	2064c <Telium_Pprintf>
   188b6:	6020      	str	r0, [r4, #0]
   188b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
   188bc:	681b      	ldr	r3, [r3, #0]
   188be:	2b00      	cmp	r3, #0
   188c0:	f2c0 812c 	blt.w	18b1c <GetConfig+0x9c4>
			}

			bArea=TRUE;
   188c4:	1dfb      	adds	r3, r7, #7
   188c6:	2201      	movs	r2, #1
   188c8:	701a      	strb	r2, [r3, #0]
   188ca:	e017      	b.n	188fc <GetConfig+0x7a4>
		}
		else
			sprintf(&tcPrint[strlen(tcPrint)], "%08x\n", tiList[i1]);
   188cc:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   188d0:	4618      	mov	r0, r3
   188d2:	f7f0 e9d8 	blx	8c84 <_init+0x124>
   188d6:	4603      	mov	r3, r0
   188d8:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   188dc:	18d2      	adds	r2, r2, r3
   188de:	f107 0390 	add.w	r3, r7, #144	; 0x90
   188e2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   188e6:	6809      	ldr	r1, [r1, #0]
   188e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   188ec:	4610      	mov	r0, r2
   188ee:	f645 61c4 	movw	r1, #24260	; 0x5ec4
   188f2:	f2c0 0102 	movt	r1, #2
   188f6:	461a      	mov	r2, r3
   188f8:	f7f0 e9dc 	blx	8cb4 <_init+0x154>
	if (iNbId==0)
		strcat(tcPrint, "Secret Area Id(s): 0\n");               // No secret area available
	else
		strcat(tcPrint, "Secret Area Id(s):\n");
	bArea=FALSE;
	for (i1=0; i1<iNbId; i1++)                                   // Get list of secret areas
   188fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   18900:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   18904:	6812      	ldr	r2, [r2, #0]
   18906:	3201      	adds	r2, #1
   18908:	601a      	str	r2, [r3, #0]
   1890a:	f107 0318 	add.w	r3, r7, #24
   1890e:	681b      	ldr	r3, [r3, #0]
   18910:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   18914:	6812      	ldr	r2, [r2, #0]
   18916:	429a      	cmp	r2, r3
   18918:	f6ff aea0 	blt.w	1865c <GetConfig+0x504>
			bArea=TRUE;
		}
		else
			sprintf(&tcPrint[strlen(tcPrint)], "%08x\n", tiList[i1]);
	}
	if(!bArea)
   1891c:	1dfb      	adds	r3, r7, #7
   1891e:	781b      	ldrb	r3, [r3, #0]
   18920:	f083 0301 	eor.w	r3, r3, #1
   18924:	b2db      	uxtb	r3, r3
   18926:	2b00      	cmp	r3, #0
   18928:	d00e      	beq.n	18948 <GetConfig+0x7f0>
		strcat(tcDisplay, "\n");
   1892a:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
   1892e:	4618      	mov	r0, r3
   18930:	f7f0 e9a8 	blx	8c84 <_init+0x124>
   18934:	4603      	mov	r3, r0
   18936:	f207 42f4 	addw	r2, r7, #1268	; 0x4f4
   1893a:	18d2      	adds	r2, r2, r3
   1893c:	f645 6300 	movw	r3, #24064	; 0x5e00
   18940:	f2c0 0302 	movt	r3, #2
   18944:	881b      	ldrh	r3, [r3, #0]
   18946:	8013      	strh	r3, [r2, #0]

	strcat(tcPrint, "\n\n\n\n");
   18948:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   1894c:	4618      	mov	r0, r3
   1894e:	f7f0 e99a 	blx	8c84 <_init+0x124>
   18952:	4603      	mov	r3, r0
   18954:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   18958:	18d2      	adds	r2, r2, r3
   1895a:	f645 63cc 	movw	r3, #24268	; 0x5ecc
   1895e:	f2c0 0302 	movt	r3, #2
   18962:	6818      	ldr	r0, [r3, #0]
   18964:	6010      	str	r0, [r2, #0]
   18966:	791b      	ldrb	r3, [r3, #4]
   18968:	7113      	strb	r3, [r2, #4]

	// Display configuration
	// =====================
	iRet = GoalDspMultiLine(hScreen, 0, tcDisplay, strlen(tcDisplay), txSec, NUMBER_OF_LINES(txSec), 0, true);
   1896a:	f107 030c 	add.w	r3, r7, #12
   1896e:	681e      	ldr	r6, [r3, #0]
   18970:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
   18974:	4618      	mov	r0, r3
   18976:	f7f0 e986 	blx	8c84 <_init+0x124>
   1897a:	4603      	mov	r3, r0
   1897c:	461d      	mov	r5, r3
   1897e:	f107 0430 	add.w	r4, r7, #48	; 0x30
   18982:	f207 42f4 	addw	r2, r7, #1268	; 0x4f4
   18986:	f245 238c 	movw	r3, #21132	; 0x528c
   1898a:	f2c0 0302 	movt	r3, #2
   1898e:	9300      	str	r3, [sp, #0]
   18990:	2306      	movs	r3, #6
   18992:	9301      	str	r3, [sp, #4]
   18994:	2300      	movs	r3, #0
   18996:	9302      	str	r3, [sp, #8]
   18998:	2301      	movs	r3, #1
   1899a:	9303      	str	r3, [sp, #12]
   1899c:	4630      	mov	r0, r6
   1899e:	2100      	movs	r1, #0
   189a0:	462b      	mov	r3, r5
   189a2:	f7f4 fffb 	bl	d99c <GoalDspMultiLine>
   189a6:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);                                           // Show info security
   189a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
   189ac:	681b      	ldr	r3, [r3, #0]
   189ae:	2b00      	cmp	r3, #0
   189b0:	f2c0 80b4 	blt.w	18b1c <GetConfig+0x9c4>

	// Print configuration
	// ===================
	p=0;
   189b4:	f107 0309 	add.w	r3, r7, #9
   189b8:	2200      	movs	r2, #0
   189ba:	701a      	strb	r2, [r3, #0]
	hDocument = GoalCreateDocument(gGoalGraphicLibInstance, GL_ENCODING_UTF8);         // Create document
   189bc:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   189c0:	f2c0 0302 	movt	r3, #2
   189c4:	681b      	ldr	r3, [r3, #0]
   189c6:	4618      	mov	r0, r3
   189c8:	2100      	movs	r1, #0
   189ca:	f7f6 fa5f 	bl	ee8c <GoalCreateDocument>
   189ce:	4602      	mov	r2, r0
   189d0:	f107 0310 	add.w	r3, r7, #16
   189d4:	601a      	str	r2, [r3, #0]
	CHECK(hDocument!=NULL, lblKO);
   189d6:	f107 0310 	add.w	r3, r7, #16
   189da:	681b      	ldr	r3, [r3, #0]
   189dc:	2b00      	cmp	r3, #0
   189de:	f000 809d 	beq.w	18b1c <GetConfig+0x9c4>

	xLine = xPrinter;                                                // Build document (Security, config info)
   189e2:	f107 0240 	add.w	r2, r7, #64	; 0x40
   189e6:	f645 13f0 	movw	r3, #23024	; 0x59f0
   189ea:	f2c0 0302 	movt	r3, #2
   189ee:	4611      	mov	r1, r2
   189f0:	461a      	mov	r2, r3
   189f2:	2350      	movs	r3, #80	; 0x50
   189f4:	4608      	mov	r0, r1
   189f6:	4611      	mov	r1, r2
   189f8:	461a      	mov	r2, r3
   189fa:	f7f0 e93e 	blx	8c78 <_init+0x118>
	xLine.eTextAlign = GL_ALIGN_CENTER;
   189fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
   18a02:	2200      	movs	r2, #0
   18a04:	601a      	str	r2, [r3, #0]
	xLine.bReverse = TRUE;
   18a06:	f107 0340 	add.w	r3, r7, #64	; 0x40
   18a0a:	2201      	movs	r2, #1
   18a0c:	721a      	strb	r2, [r3, #8]
	xLine.xMargin.usBottom = PIXEL_BOTTOM;
   18a0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
   18a12:	2228      	movs	r2, #40	; 0x28
   18a14:	641a      	str	r2, [r3, #64]	; 0x40
	xLine.xFont.eScale = GL_SCALE_XXLARGE;
   18a16:	f107 0340 	add.w	r3, r7, #64	; 0x40
   18a1a:	f643 72f6 	movw	r2, #16374	; 0x3ff6
   18a1e:	64da      	str	r2, [r3, #76]	; 0x4c
	iRet = GoalPrnLine(hDocument, p++, "Security Config", &xLine);
   18a20:	f107 0310 	add.w	r3, r7, #16
   18a24:	6819      	ldr	r1, [r3, #0]
   18a26:	f107 0309 	add.w	r3, r7, #9
   18a2a:	781b      	ldrb	r3, [r3, #0]
   18a2c:	b29a      	uxth	r2, r3
   18a2e:	f107 0309 	add.w	r3, r7, #9
   18a32:	f107 0009 	add.w	r0, r7, #9
   18a36:	7800      	ldrb	r0, [r0, #0]
   18a38:	3001      	adds	r0, #1
   18a3a:	7018      	strb	r0, [r3, #0]
   18a3c:	f107 0430 	add.w	r4, r7, #48	; 0x30
   18a40:	f107 0340 	add.w	r3, r7, #64	; 0x40
   18a44:	4608      	mov	r0, r1
   18a46:	4611      	mov	r1, r2
   18a48:	f645 62d4 	movw	r2, #24276	; 0x5ed4
   18a4c:	f2c0 0202 	movt	r2, #2
   18a50:	f7f6 fa58 	bl	ef04 <GoalPrnLine>
   18a54:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
   18a56:	f107 0330 	add.w	r3, r7, #48	; 0x30
   18a5a:	681b      	ldr	r3, [r3, #0]
   18a5c:	2b00      	cmp	r3, #0
   18a5e:	db5d      	blt.n	18b1c <GetConfig+0x9c4>

	xLine = xPrinter;
   18a60:	f107 0240 	add.w	r2, r7, #64	; 0x40
   18a64:	f645 13f0 	movw	r3, #23024	; 0x59f0
   18a68:	f2c0 0302 	movt	r3, #2
   18a6c:	4611      	mov	r1, r2
   18a6e:	461a      	mov	r2, r3
   18a70:	2350      	movs	r3, #80	; 0x50
   18a72:	4608      	mov	r0, r1
   18a74:	4611      	mov	r1, r2
   18a76:	461a      	mov	r2, r3
   18a78:	f7f0 e8fe 	blx	8c78 <_init+0x118>
	iRet = GoalPrnLine(hDocument, p++, tcPrint, &xLine);
   18a7c:	f107 0310 	add.w	r3, r7, #16
   18a80:	6818      	ldr	r0, [r3, #0]
   18a82:	f107 0309 	add.w	r3, r7, #9
   18a86:	781b      	ldrb	r3, [r3, #0]
   18a88:	b299      	uxth	r1, r3
   18a8a:	f107 0309 	add.w	r3, r7, #9
   18a8e:	f107 0209 	add.w	r2, r7, #9
   18a92:	7812      	ldrb	r2, [r2, #0]
   18a94:	3201      	adds	r2, #1
   18a96:	701a      	strb	r2, [r3, #0]
   18a98:	f107 0430 	add.w	r4, r7, #48	; 0x30
   18a9c:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   18aa0:	f107 0340 	add.w	r3, r7, #64	; 0x40
   18aa4:	f7f6 fa2e 	bl	ef04 <GoalPrnLine>
   18aa8:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
   18aaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
   18aae:	681b      	ldr	r3, [r3, #0]
   18ab0:	2b00      	cmp	r3, #0
   18ab2:	db33      	blt.n	18b1c <GetConfig+0x9c4>

	iRet = GoalPrnDocument(hDocument);                               // Print document
   18ab4:	f107 0310 	add.w	r3, r7, #16
   18ab8:	681b      	ldr	r3, [r3, #0]
   18aba:	f107 0430 	add.w	r4, r7, #48	; 0x30
   18abe:	4618      	mov	r0, r3
   18ac0:	f7f6 fc32 	bl	f328 <GoalPrnDocument>
   18ac4:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
   18ac6:	f107 0330 	add.w	r3, r7, #48	; 0x30
   18aca:	681b      	ldr	r3, [r3, #0]
   18acc:	2b00      	cmp	r3, #0
   18ace:	db25      	blt.n	18b1c <GetConfig+0x9c4>

	GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 30*1000, true);                 // Wait for key pressed/touched (shortcut)
   18ad0:	f107 030c 	add.w	r3, r7, #12
   18ad4:	681a      	ldr	r2, [r3, #0]
   18ad6:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   18ada:	f2c0 0302 	movt	r3, #2
   18ade:	681b      	ldr	r3, [r3, #0]
   18ae0:	2101      	movs	r1, #1
   18ae2:	9100      	str	r1, [sp, #0]
   18ae4:	4610      	mov	r0, r2
   18ae6:	4619      	mov	r1, r3
   18ae8:	2201      	movs	r2, #1
   18aea:	f247 5330 	movw	r3, #30000	; 0x7530
   18aee:	f7f5 f8b7 	bl	dc60 <GoalGetKey>

	goto lblEnd;
   18af2:	e027      	b.n	18b44 <GetConfig+0x9ec>

	// Errors treatment
	// ****************
	lblNoSecDll:                                                         // Security DLL missing
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Missing Sec DLL", GL_ICON_WARNING, GL_BUTTON_VALID, 3*1000);
   18af4:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   18af8:	f2c0 0302 	movt	r3, #2
   18afc:	681b      	ldr	r3, [r3, #0]
   18afe:	2201      	movs	r2, #1
   18b00:	9200      	str	r2, [sp, #0]
   18b02:	f640 32b8 	movw	r2, #3000	; 0xbb8
   18b06:	9201      	str	r2, [sp, #4]
   18b08:	4618      	mov	r0, r3
   18b0a:	2100      	movs	r1, #0
   18b0c:	f645 42f8 	movw	r2, #23800	; 0x5cf8
   18b10:	f2c0 0202 	movt	r2, #2
   18b14:	2303      	movs	r3, #3
   18b16:	f008 fd05 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
   18b1a:	e013      	b.n	18b44 <GetConfig+0x9ec>
	lblKO:                                                               // None-classified low level error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Processing Error", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   18b1c:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   18b20:	f2c0 0302 	movt	r3, #2
   18b24:	681b      	ldr	r3, [r3, #0]
   18b26:	2201      	movs	r2, #1
   18b28:	9200      	str	r2, [sp, #0]
   18b2a:	f241 3288 	movw	r2, #5000	; 0x1388
   18b2e:	9201      	str	r2, [sp, #4]
   18b30:	4618      	mov	r0, r3
   18b32:	2100      	movs	r1, #0
   18b34:	f645 521c 	movw	r2, #23836	; 0x5d1c
   18b38:	f2c0 0202 	movt	r2, #2
   18b3c:	2304      	movs	r3, #4
   18b3e:	f008 fcf1 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
   18b42:	bf00      	nop
	lblEnd:
	if (hScreen)
   18b44:	f107 030c 	add.w	r3, r7, #12
   18b48:	681b      	ldr	r3, [r3, #0]
   18b4a:	2b00      	cmp	r3, #0
   18b4c:	d004      	beq.n	18b58 <GetConfig+0xa00>
		GoalDestroyScreen(&hScreen);                                 // Destroy screen
   18b4e:	f107 030c 	add.w	r3, r7, #12
   18b52:	4618      	mov	r0, r3
   18b54:	f7f5 f9e6 	bl	df24 <GoalDestroyScreen>
	if (hDocument)
   18b58:	f107 0310 	add.w	r3, r7, #16
   18b5c:	681b      	ldr	r3, [r3, #0]
   18b5e:	2b00      	cmp	r3, #0
   18b60:	d004      	beq.n	18b6c <GetConfig+0xa14>
		GoalDestroyDocument(&hDocument);                             // Destroy document
   18b62:	f107 0310 	add.w	r3, r7, #16
   18b66:	4618      	mov	r0, r3
   18b68:	f7f6 fc0a 	bl	f380 <GoalDestroyDocument>
}
   18b6c:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   18b70:	f2c0 0302 	movt	r3, #2
   18b74:	f8d7 2df4 	ldr.w	r2, [r7, #3572]	; 0xdf4
   18b78:	681b      	ldr	r3, [r3, #0]
   18b7a:	429a      	cmp	r2, r3
   18b7c:	d001      	beq.n	18b82 <GetConfig+0xa2a>
   18b7e:	f7f0 fa11 	bl	8fa4 <__stack_chk_fail>
   18b82:	f507 77fe 	add.w	r7, r7, #508	; 0x1fc
   18b86:	f507 6740 	add.w	r7, r7, #3072	; 0xc00
   18b8a:	46bd      	mov	sp, r7
   18b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18b8e:	bf00      	nop

00018b90 <CreateSecret>:
//  This function has no parameters.
//  This function has no return value.
//****************************************************************************

void CreateSecret(void)
{
   18b90:	b590      	push	{r4, r7, lr}
   18b92:	b097      	sub	sp, #92	; 0x5c
   18b94:	af02      	add	r7, sp, #8
   18b96:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   18b9a:	f2c0 0302 	movt	r3, #2
   18b9e:	681b      	ldr	r3, [r3, #0]
   18ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
	doubleword uiLen;
	int iRet;

	// Check Pinpad
	// ************
	iRet = DLLExist("SECURITY"); CHECK(iRet==TRUE, lblNoSecDll);  // Security DLL loaded?
   18ba2:	f645 4094 	movw	r0, #23700	; 0x5c94
   18ba6:	f2c0 0002 	movt	r0, #2
   18baa:	f006 fdb7 	bl	1f71c <DLLExist>
   18bae:	6078      	str	r0, [r7, #4]
   18bb0:	687b      	ldr	r3, [r7, #4]
   18bb2:	2b01      	cmp	r3, #1
   18bb4:	d140      	bne.n	18c38 <CreateSecret+0xa8>
	iRet = ChkPpdConfig(); CHECK(iRet>=0, lblEnd);                // Pinpad problem? => check config from Manager
   18bb6:	f7fe fc5d 	bl	17474 <ChkPpdConfig>
   18bba:	6078      	str	r0, [r7, #4]
   18bbc:	687b      	ldr	r3, [r7, #4]
   18bbe:	2b00      	cmp	r3, #0
   18bc0:	db7e      	blt.n	18cc0 <CreateSecret+0x130>

	xRootKey.iSecretArea = AreaId();                              // Secret area identification
   18bc2:	f7fe fe61 	bl	17888 <AreaId>
   18bc6:	4603      	mov	r3, r0
   18bc8:	60bb      	str	r3, [r7, #8]
	xRootKey.cAlgoType   = TLV_TYPE_KTDES;                        // This ROOT key is a TDES Key
   18bca:	2302      	movs	r3, #2
   18bcc:	733b      	strb	r3, [r7, #12]
	xRootKey.usNumber    = ROOT_KEY_LOC;                          // ROOT key location inside the secret area
   18bce:	2320      	movs	r3, #32
   18bd0:	81fb      	strh	r3, [r7, #14]
	xRootKey.uiBankId    = BANK_ROOT_ID;                          // Bank id related to this ROOT key
   18bd2:	f44f 733f 	mov.w	r3, #764	; 0x2fc
   18bd6:	f2c8 0300 	movt	r3, #32768	; 0x8000
   18bda:	613b      	str	r3, [r7, #16]

#endif

	// Root Key CheckSum
	// *****************
	iRet = SEC_KeyVerify (C_SEC_CIPHERING,                        // C_SEC_CIPHERING secure part chosen to check key in terminal or pinpad
   18bdc:	f107 0108 	add.w	r1, r7, #8
			&xRootKey,                              // ROOT key parameters
			tucChkSum,                              // ROOT key checksum
   18be0:	f107 0214 	add.w	r2, r7, #20
			&uiLen);                                // Length checksum
   18be4:	463b      	mov	r3, r7

#endif

	// Root Key CheckSum
	// *****************
	iRet = SEC_KeyVerify (C_SEC_CIPHERING,                        // C_SEC_CIPHERING secure part chosen to check key in terminal or pinpad
   18be6:	2003      	movs	r0, #3
   18be8:	f008 fb6b 	bl	212c2 <SEC_KeyVerify>
   18bec:	6078      	str	r0, [r7, #4]
			&xRootKey,                              // ROOT key parameters
			tucChkSum,                              // ROOT key checksum
			&uiLen);                                // Length checksum
	CHECK(iRet==OK, lblSecKO);
   18bee:	687b      	ldr	r3, [r7, #4]
   18bf0:	2b00      	cmp	r3, #0
   18bf2:	d135      	bne.n	18c60 <CreateSecret+0xd0>

	sprintf(tcDisplay, "Create Area Done\nCheckSum: %02X%02X%02X", tucChkSum[0], tucChkSum[1], tucChkSum[2]);
   18bf4:	7d3b      	ldrb	r3, [r7, #20]
   18bf6:	461a      	mov	r2, r3
   18bf8:	7d7b      	ldrb	r3, [r7, #21]
   18bfa:	7db9      	ldrb	r1, [r7, #22]
   18bfc:	4608      	mov	r0, r1
   18bfe:	f107 0118 	add.w	r1, r7, #24
   18c02:	9000      	str	r0, [sp, #0]
   18c04:	4608      	mov	r0, r1
   18c06:	f645 61e4 	movw	r1, #24292	; 0x5ee4
   18c0a:	f2c0 0102 	movt	r1, #2
   18c0e:	f7f0 e852 	blx	8cb4 <_init+0x154>
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, tcDisplay, GL_ICON_INFORMATION, GL_BUTTON_VALID, 5*1000);
   18c12:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   18c16:	f2c0 0302 	movt	r3, #2
   18c1a:	681a      	ldr	r2, [r3, #0]
   18c1c:	f107 0318 	add.w	r3, r7, #24
   18c20:	2101      	movs	r1, #1
   18c22:	9100      	str	r1, [sp, #0]
   18c24:	f241 3188 	movw	r1, #5000	; 0x1388
   18c28:	9101      	str	r1, [sp, #4]
   18c2a:	4610      	mov	r0, r2
   18c2c:	2100      	movs	r1, #0
   18c2e:	461a      	mov	r2, r3
   18c30:	2302      	movs	r3, #2
   18c32:	f008 fc77 	bl	21524 <GL_Dialog_Message>

	goto lblEnd;
   18c36:	e043      	b.n	18cc0 <CreateSecret+0x130>

	// Errors treatment
	// ****************
	lblNoSecDll:                                                      // Security DLL missing
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Missing Sec DLL", GL_ICON_WARNING, GL_BUTTON_VALID, 3*1000);
   18c38:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   18c3c:	f2c0 0302 	movt	r3, #2
   18c40:	681b      	ldr	r3, [r3, #0]
   18c42:	2201      	movs	r2, #1
   18c44:	9200      	str	r2, [sp, #0]
   18c46:	f640 32b8 	movw	r2, #3000	; 0xbb8
   18c4a:	9201      	str	r2, [sp, #4]
   18c4c:	4618      	mov	r0, r3
   18c4e:	2100      	movs	r1, #0
   18c50:	f645 42f8 	movw	r2, #23800	; 0x5cf8
   18c54:	f2c0 0202 	movt	r2, #2
   18c58:	2303      	movs	r3, #3
   18c5a:	f008 fc63 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
   18c5e:	e02f      	b.n	18cc0 <CreateSecret+0x130>
	lblSecKO:                                                         // Security DLL error
#ifdef __TELIUM3__
	if (iRet == STS_ERR_SYS_SCH_NOT_FOUND)
   18c60:	687a      	ldr	r2, [r7, #4]
   18c62:	f44f 6330 	mov.w	r3, #2816	; 0xb00
   18c66:	f2c8 0300 	movt	r3, #32768	; 0x8000
   18c6a:	429a      	cmp	r2, r3
   18c6c:	d113      	bne.n	18c96 <CreateSecret+0x106>
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "KeyInject Tool\nRequired", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   18c6e:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   18c72:	f2c0 0302 	movt	r3, #2
   18c76:	681b      	ldr	r3, [r3, #0]
   18c78:	2201      	movs	r2, #1
   18c7a:	9200      	str	r2, [sp, #0]
   18c7c:	f241 3288 	movw	r2, #5000	; 0x1388
   18c80:	9201      	str	r2, [sp, #4]
   18c82:	4618      	mov	r0, r3
   18c84:	2100      	movs	r1, #0
   18c86:	f645 720c 	movw	r2, #24332	; 0x5f0c
   18c8a:	f2c0 0202 	movt	r2, #2
   18c8e:	2304      	movs	r3, #4
   18c90:	f008 fc48 	bl	21524 <GL_Dialog_Message>
	else
#endif
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, SEC_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
	goto lblEnd;
   18c94:	e013      	b.n	18cbe <CreateSecret+0x12e>
#ifdef __TELIUM3__
	if (iRet == STS_ERR_SYS_SCH_NOT_FOUND)
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "KeyInject Tool\nRequired", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
	else
#endif
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, SEC_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   18c96:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   18c9a:	f2c0 0302 	movt	r3, #2
   18c9e:	681c      	ldr	r4, [r3, #0]
   18ca0:	6878      	ldr	r0, [r7, #4]
   18ca2:	f7f7 ff13 	bl	10acc <SEC_ErrorMsg>
   18ca6:	4603      	mov	r3, r0
   18ca8:	2201      	movs	r2, #1
   18caa:	9200      	str	r2, [sp, #0]
   18cac:	f241 3288 	movw	r2, #5000	; 0x1388
   18cb0:	9201      	str	r2, [sp, #4]
   18cb2:	4620      	mov	r0, r4
   18cb4:	2100      	movs	r1, #0
   18cb6:	461a      	mov	r2, r3
   18cb8:	2304      	movs	r3, #4
   18cba:	f008 fc33 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
   18cbe:	bf00      	nop
	lblEnd:
	return;
}
   18cc0:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   18cc4:	f2c0 0302 	movt	r3, #2
   18cc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   18cca:	681b      	ldr	r3, [r3, #0]
   18ccc:	429a      	cmp	r2, r3
   18cce:	d001      	beq.n	18cd4 <CreateSecret+0x144>
   18cd0:	f7f0 f968 	bl	8fa4 <__stack_chk_fail>
   18cd4:	f107 0754 	add.w	r7, r7, #84	; 0x54
   18cd8:	46bd      	mov	sp, r7
   18cda:	bd90      	pop	{r4, r7, pc}

00018cdc <FreeSecret>:
//  This function has no parameters.
//  This function has no return value.
//****************************************************************************

void FreeSecret(void)
{
   18cdc:	b580      	push	{r7, lr}
   18cde:	b088      	sub	sp, #32
   18ce0:	af02      	add	r7, sp, #8
   18ce2:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   18ce6:	f2c0 0302 	movt	r3, #2
   18cea:	681b      	ldr	r3, [r3, #0]
   18cec:	617b      	str	r3, [r7, #20]
	T_SEC_DATAKEY_ID xEraseKey;
	int iRet;

	// Check Pinpad
	// ************
	iRet = DLLExist("SECURITY"); CHECK(iRet==TRUE, lblNoSecDll); // Security DLL loaded?
   18cee:	f645 4094 	movw	r0, #23700	; 0x5c94
   18cf2:	f2c0 0002 	movt	r0, #2
   18cf6:	f006 fd11 	bl	1f71c <DLLExist>
   18cfa:	6078      	str	r0, [r7, #4]
   18cfc:	687b      	ldr	r3, [r7, #4]
   18cfe:	2b01      	cmp	r3, #1
   18d00:	d119      	bne.n	18d36 <FreeSecret+0x5a>
	iRet = ChkPpdConfig(); CHECK(iRet>=0, lblEnd);               // Pinpad problem? => check config from Manager
   18d02:	f7fe fbb7 	bl	17474 <ChkPpdConfig>
   18d06:	6078      	str	r0, [r7, #4]
   18d08:	687b      	ldr	r3, [r7, #4]
   18d0a:	2b00      	cmp	r3, #0
   18d0c:	db27      	blt.n	18d5e <FreeSecret+0x82>
	iRet = SEC_FreeSecret (C_SEC_CIPHERING,                      // C_SEC_CIPHERING secure part to erase secret area in terminal or pinpad
			&xEraseKey);                          // Secret area to erase
	CHECK(iRet==OK, lblSecKO);
#endif

	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Free Secret Area Done", GL_ICON_INFORMATION, GL_BUTTON_VALID, 3*1000);
   18d0e:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   18d12:	f2c0 0302 	movt	r3, #2
   18d16:	681b      	ldr	r3, [r3, #0]
   18d18:	2201      	movs	r2, #1
   18d1a:	9200      	str	r2, [sp, #0]
   18d1c:	f640 32b8 	movw	r2, #3000	; 0xbb8
   18d20:	9201      	str	r2, [sp, #4]
   18d22:	4618      	mov	r0, r3
   18d24:	2100      	movs	r1, #0
   18d26:	f645 7224 	movw	r2, #24356	; 0x5f24
   18d2a:	f2c0 0202 	movt	r2, #2
   18d2e:	2302      	movs	r3, #2
   18d30:	f008 fbf8 	bl	21524 <GL_Dialog_Message>

	goto lblEnd;
   18d34:	e013      	b.n	18d5e <FreeSecret+0x82>

	// Errors treatment
	// ****************
	lblNoSecDll:                                                     // Security DLL missing
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Missing Sec DLL", GL_ICON_WARNING, GL_BUTTON_VALID, 3*1000);
   18d36:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   18d3a:	f2c0 0302 	movt	r3, #2
   18d3e:	681b      	ldr	r3, [r3, #0]
   18d40:	2201      	movs	r2, #1
   18d42:	9200      	str	r2, [sp, #0]
   18d44:	f640 32b8 	movw	r2, #3000	; 0xbb8
   18d48:	9201      	str	r2, [sp, #4]
   18d4a:	4618      	mov	r0, r3
   18d4c:	2100      	movs	r1, #0
   18d4e:	f645 42f8 	movw	r2, #23800	; 0x5cf8
   18d52:	f2c0 0202 	movt	r2, #2
   18d56:	2303      	movs	r3, #3
   18d58:	f008 fbe4 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
   18d5c:	bf00      	nop
	lblSecKO:                                                        // Security DLL error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, SEC_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
	goto lblEnd;
	lblEnd:
	return;
}
   18d5e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   18d62:	f2c0 0302 	movt	r3, #2
   18d66:	697a      	ldr	r2, [r7, #20]
   18d68:	681b      	ldr	r3, [r3, #0]
   18d6a:	429a      	cmp	r2, r3
   18d6c:	d001      	beq.n	18d72 <FreeSecret+0x96>
   18d6e:	f7f0 f919 	bl	8fa4 <__stack_chk_fail>
   18d72:	f107 0718 	add.w	r7, r7, #24
   18d76:	46bd      	mov	sp, r7
   18d78:	bd80      	pop	{r7, pc}
   18d7a:	bf00      	nop

00018d7c <LoadIso9564Key>:
//  This function has no parameters.
//  This function has no return value.
//****************************************************************************

void LoadIso9564Key(void)
{
   18d7c:	b590      	push	{r4, r7, lr}
   18d7e:	b09b      	sub	sp, #108	; 0x6c
   18d80:	af02      	add	r7, sp, #8
   18d82:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   18d86:	f2c0 0302 	movt	r3, #2
   18d8a:	681b      	ldr	r3, [r3, #0]
   18d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
	doubleword uiLen;
	int iRet;

	// Check Pinpad
	// ============
	iRet = DLLExist("SECURITY"); CHECK(iRet==TRUE, lblNoSecDll); // Security DLL loaded?
   18d8e:	f645 4094 	movw	r0, #23700	; 0x5c94
   18d92:	f2c0 0002 	movt	r0, #2
   18d96:	f006 fcc1 	bl	1f71c <DLLExist>
   18d9a:	60b8      	str	r0, [r7, #8]
   18d9c:	68bb      	ldr	r3, [r7, #8]
   18d9e:	2b01      	cmp	r3, #1
   18da0:	d161      	bne.n	18e66 <LoadIso9564Key+0xea>
	iRet = ChkPpdConfig(); CHECK(iRet>=0, lblEnd);               // Pinpad problem? => check config from Manager
   18da2:	f7fe fb67 	bl	17474 <ChkPpdConfig>
   18da6:	60b8      	str	r0, [r7, #8]
   18da8:	68bb      	ldr	r3, [r7, #8]
   18daa:	2b00      	cmp	r3, #0
   18dac:	f2c0 8084 	blt.w	18eb8 <LoadIso9564Key+0x13c>

	// Load Pin Key using Root Key
	// ***************************
	xRootKey.iSecretArea = AreaId();                             // Secret area identification
   18db0:	f7fe fd6a 	bl	17888 <AreaId>
   18db4:	4603      	mov	r3, r0
   18db6:	60fb      	str	r3, [r7, #12]
	xRootKey.cAlgoType   = TLV_TYPE_KTDES;                       // This ROOT key is a TDES Key
   18db8:	2302      	movs	r3, #2
   18dba:	743b      	strb	r3, [r7, #16]
	xRootKey.usNumber    = ROOT_KEY_LOC;                         // ROOT key location inside the secret area
   18dbc:	2320      	movs	r3, #32
   18dbe:	827b      	strh	r3, [r7, #18]
	xRootKey.uiBankId    = BANK_ROOT_ID;                         // Bank id related to this ROOT key
   18dc0:	f44f 733f 	mov.w	r3, #764	; 0x2fc
   18dc4:	f2c8 0300 	movt	r3, #32768	; 0x8000
   18dc8:	617b      	str	r3, [r7, #20]

	xPinKey.iSecretArea = AreaId();                              // Secret area identification
   18dca:	f7fe fd5d 	bl	17888 <AreaId>
   18dce:	4603      	mov	r3, r0
   18dd0:	61bb      	str	r3, [r7, #24]
	xPinKey.cAlgoType   = TLV_TYPE_KTDES;                        // This PIN key is a TDES Key
   18dd2:	2302      	movs	r3, #2
   18dd4:	773b      	strb	r3, [r7, #28]
	xPinKey.usNumber    = ISO9564PIN_KEY_LOC;                    // PIN key location inside the secret area
   18dd6:	2398      	movs	r3, #152	; 0x98
   18dd8:	83fb      	strh	r3, [r7, #30]
	xPinKey.uiBankId    = BANK_ISO9564_ID;                       // Bank id related to this PIN key
   18dda:	f240 2302 	movw	r3, #514	; 0x202
   18dde:	f2c8 0300 	movt	r3, #32768	; 0x8000
   18de2:	623b      	str	r3, [r7, #32]

	iRet = SEC_LoadKey (C_SEC_CIPHERING,                         // C_SEC_CIPHERING secure part to load key in terminal or pinpad
   18de4:	f107 020c 	add.w	r2, r7, #12
   18de8:	f107 0318 	add.w	r3, r7, #24
   18dec:	2102      	movs	r1, #2
   18dee:	9100      	str	r1, [sp, #0]
   18df0:	2003      	movs	r0, #3
   18df2:	4611      	mov	r1, r2
   18df4:	461a      	mov	r2, r3
   18df6:	f645 2354 	movw	r3, #23124	; 0x5a54
   18dfa:	f2c0 0302 	movt	r3, #2
   18dfe:	f008 fa96 	bl	2132e <SEC_LoadKey>
   18e02:	60b8      	str	r0, [r7, #8]
			CIPHERING_PIN);                          // PIN key usage : to cipher PIN entry
	//CHECK(iRet==OK, lblSecKO);

	// Pin Key CheckSum
	// ****************
	iRet = SEC_KeyVerify (C_SEC_CIPHERING,                       // C_SEC_CIPHERING secure part to check key in terminal or pinpad
   18e04:	f107 0118 	add.w	r1, r7, #24
			&xPinKey,                              // PIN key parameters
			tucChkSum,                             // PIN key checksum
   18e08:	f107 0224 	add.w	r2, r7, #36	; 0x24
			&uiLen);                               // Length checksum
   18e0c:	1d3b      	adds	r3, r7, #4
			CIPHERING_PIN);                          // PIN key usage : to cipher PIN entry
	//CHECK(iRet==OK, lblSecKO);

	// Pin Key CheckSum
	// ****************
	iRet = SEC_KeyVerify (C_SEC_CIPHERING,                       // C_SEC_CIPHERING secure part to check key in terminal or pinpad
   18e0e:	2003      	movs	r0, #3
   18e10:	f008 fa57 	bl	212c2 <SEC_KeyVerify>
   18e14:	60b8      	str	r0, [r7, #8]
			&xPinKey,                              // PIN key parameters
			tucChkSum,                             // PIN key checksum
			&uiLen);                               // Length checksum
	CHECK(iRet==OK, lblSecKO);
   18e16:	68bb      	ldr	r3, [r7, #8]
   18e18:	2b00      	cmp	r3, #0
   18e1a:	d138      	bne.n	18e8e <LoadIso9564Key+0x112>

	sprintf(tcDisplay, "Load Pin Key Done\nCheckSum: %02X%02X%02X", tucChkSum[0], tucChkSum[1], tucChkSum[2]);
   18e1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   18e20:	461a      	mov	r2, r3
   18e22:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   18e26:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
   18e2a:	4608      	mov	r0, r1
   18e2c:	f107 0128 	add.w	r1, r7, #40	; 0x28
   18e30:	9000      	str	r0, [sp, #0]
   18e32:	4608      	mov	r0, r1
   18e34:	f645 713c 	movw	r1, #24380	; 0x5f3c
   18e38:	f2c0 0102 	movt	r1, #2
   18e3c:	f7ef ef3a 	blx	8cb4 <_init+0x154>
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, tcDisplay, GL_ICON_INFORMATION, GL_BUTTON_VALID, 5*1000);
   18e40:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   18e44:	f2c0 0302 	movt	r3, #2
   18e48:	681a      	ldr	r2, [r3, #0]
   18e4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
   18e4e:	2101      	movs	r1, #1
   18e50:	9100      	str	r1, [sp, #0]
   18e52:	f241 3188 	movw	r1, #5000	; 0x1388
   18e56:	9101      	str	r1, [sp, #4]
   18e58:	4610      	mov	r0, r2
   18e5a:	2100      	movs	r1, #0
   18e5c:	461a      	mov	r2, r3
   18e5e:	2302      	movs	r3, #2
   18e60:	f008 fb60 	bl	21524 <GL_Dialog_Message>

	goto lblEnd;
   18e64:	e028      	b.n	18eb8 <LoadIso9564Key+0x13c>

	// Errors treatment
	// ****************
	lblNoSecDll:                                                     // Security DLL missing
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Missing Sec DLL", GL_ICON_WARNING, GL_BUTTON_VALID, 3*1000);
   18e66:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   18e6a:	f2c0 0302 	movt	r3, #2
   18e6e:	681b      	ldr	r3, [r3, #0]
   18e70:	2201      	movs	r2, #1
   18e72:	9200      	str	r2, [sp, #0]
   18e74:	f640 32b8 	movw	r2, #3000	; 0xbb8
   18e78:	9201      	str	r2, [sp, #4]
   18e7a:	4618      	mov	r0, r3
   18e7c:	2100      	movs	r1, #0
   18e7e:	f645 42f8 	movw	r2, #23800	; 0x5cf8
   18e82:	f2c0 0202 	movt	r2, #2
   18e86:	2303      	movs	r3, #3
   18e88:	f008 fb4c 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
   18e8c:	e014      	b.n	18eb8 <LoadIso9564Key+0x13c>
	lblSecKO:                                                        // Security DLL error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, SEC_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   18e8e:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   18e92:	f2c0 0302 	movt	r3, #2
   18e96:	681c      	ldr	r4, [r3, #0]
   18e98:	68b8      	ldr	r0, [r7, #8]
   18e9a:	f7f7 fe17 	bl	10acc <SEC_ErrorMsg>
   18e9e:	4603      	mov	r3, r0
   18ea0:	2201      	movs	r2, #1
   18ea2:	9200      	str	r2, [sp, #0]
   18ea4:	f241 3288 	movw	r2, #5000	; 0x1388
   18ea8:	9201      	str	r2, [sp, #4]
   18eaa:	4620      	mov	r0, r4
   18eac:	2100      	movs	r1, #0
   18eae:	461a      	mov	r2, r3
   18eb0:	2304      	movs	r3, #4
   18eb2:	f008 fb37 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
   18eb6:	bf00      	nop
	lblEnd:
	return;
}
   18eb8:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   18ebc:	f2c0 0302 	movt	r3, #2
   18ec0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   18ec2:	681b      	ldr	r3, [r3, #0]
   18ec4:	429a      	cmp	r2, r3
   18ec6:	d001      	beq.n	18ecc <LoadIso9564Key+0x150>
   18ec8:	f7f0 f86c 	bl	8fa4 <__stack_chk_fail>
   18ecc:	f107 0764 	add.w	r7, r7, #100	; 0x64
   18ed0:	46bd      	mov	sp, r7
   18ed2:	bd90      	pop	{r4, r7, pc}

00018ed4 <LoadMacKey>:
//  This function has no parameters.
//  This function has no return value.
//****************************************************************************

void LoadMacKey(void)
{
   18ed4:	b590      	push	{r4, r7, lr}
   18ed6:	b09b      	sub	sp, #108	; 0x6c
   18ed8:	af02      	add	r7, sp, #8
   18eda:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   18ede:	f2c0 0302 	movt	r3, #2
   18ee2:	681b      	ldr	r3, [r3, #0]
   18ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
	doubleword uiLen;
	int iRet;

	// Check Pinpad
	// ************
	iRet = DLLExist("SECURITY"); CHECK(iRet==TRUE, lblNoSecDll); // Security DLL loaded?
   18ee6:	f645 4094 	movw	r0, #23700	; 0x5c94
   18eea:	f2c0 0002 	movt	r0, #2
   18eee:	f006 fc15 	bl	1f71c <DLLExist>
   18ef2:	60b8      	str	r0, [r7, #8]
   18ef4:	68bb      	ldr	r3, [r7, #8]
   18ef6:	2b01      	cmp	r3, #1
   18ef8:	d164      	bne.n	18fc4 <LoadMacKey+0xf0>
	iRet = ChkPpdConfig(); CHECK(iRet>=0, lblEnd);               // Pinpad problem? => check config from Manager
   18efa:	f7fe fabb 	bl	17474 <ChkPpdConfig>
   18efe:	60b8      	str	r0, [r7, #8]
   18f00:	68bb      	ldr	r3, [r7, #8]
   18f02:	2b00      	cmp	r3, #0
   18f04:	f2c0 8087 	blt.w	19016 <LoadMacKey+0x142>

	// Load Mac Key using Root Key
	// ***************************
	xRootKey.iSecretArea = AreaId();                             // Secret area identification
   18f08:	f7fe fcbe 	bl	17888 <AreaId>
   18f0c:	4603      	mov	r3, r0
   18f0e:	60fb      	str	r3, [r7, #12]
	xRootKey.cAlgoType   = TLV_TYPE_KTDES;                       // This ROOT key is a TDES Key
   18f10:	2302      	movs	r3, #2
   18f12:	743b      	strb	r3, [r7, #16]
	xRootKey.usNumber    = ROOT_KEY_LOC;                         // ROOT key location inside the secret area
   18f14:	2320      	movs	r3, #32
   18f16:	827b      	strh	r3, [r7, #18]
	xRootKey.uiBankId    = BANK_ROOT_ID;                         // Bank id related to this ROOT key
   18f18:	f44f 733f 	mov.w	r3, #764	; 0x2fc
   18f1c:	f2c8 0300 	movt	r3, #32768	; 0x8000
   18f20:	617b      	str	r3, [r7, #20]

	xMacKey.iSecretArea = AreaId();                              // Secret area identification
   18f22:	f7fe fcb1 	bl	17888 <AreaId>
   18f26:	4603      	mov	r3, r0
   18f28:	61bb      	str	r3, [r7, #24]
	xMacKey.cAlgoType   = TLV_TYPE_KDES;                         // This MAC key is a DES Key
   18f2a:	2301      	movs	r3, #1
   18f2c:	773b      	strb	r3, [r7, #28]
	xMacKey.usNumber    = MAC_KEY_LOC;                           // MAC key location inside the secret area
   18f2e:	23dc      	movs	r3, #220	; 0xdc
   18f30:	83fb      	strh	r3, [r7, #30]
	xMacKey.uiBankId    = BANK_MAC_ID;                           // Bank id related to this MAC key
   18f32:	f44f 738b 	mov.w	r3, #278	; 0x116
   18f36:	f2c8 0300 	movt	r3, #32768	; 0x8000
   18f3a:	623b      	str	r3, [r7, #32]

	iRet = SEC_LoadKey (C_SEC_CIPHERING,                         // C_SEC_CIPHERING secure part chosen to load key in terminal or pinpad
   18f3c:	f107 020c 	add.w	r2, r7, #12
   18f40:	f107 0318 	add.w	r3, r7, #24
   18f44:	2100      	movs	r1, #0
   18f46:	9100      	str	r1, [sp, #0]
   18f48:	2003      	movs	r0, #3
   18f4a:	4611      	mov	r1, r2
   18f4c:	461a      	mov	r2, r3
   18f4e:	f645 2368 	movw	r3, #23144	; 0x5a68
   18f52:	f2c0 0302 	movt	r3, #2
   18f56:	f008 f9ea 	bl	2132e <SEC_LoadKey>
   18f5a:	60b8      	str	r0, [r7, #8]
			&xRootKey,                               // ROOT key parameters
			&xMacKey,                                // MAC key parameters
			(byte*)zMacKey,                          // The MAC key value
			CIPHERING_DATA);                         // MAC key usage : to cipher Data Message
	CHECK(iRet==OK, lblSecKO);
   18f5c:	68bb      	ldr	r3, [r7, #8]
   18f5e:	2b00      	cmp	r3, #0
   18f60:	d144      	bne.n	18fec <LoadMacKey+0x118>

	// MAC Key CheckSum
	// ****************
	iRet = SEC_KeyVerify (C_SEC_CIPHERING,                       // C_SEC_CIPHERING secure part chosen to check key in terminal or pinpad
   18f62:	f107 0118 	add.w	r1, r7, #24
			&xMacKey,                              // MAC key parameters
			tucChkSum,                             // MAC key checksum
   18f66:	f107 0224 	add.w	r2, r7, #36	; 0x24
			&uiLen);                               // Length checksum
   18f6a:	1d3b      	adds	r3, r7, #4
			CIPHERING_DATA);                         // MAC key usage : to cipher Data Message
	CHECK(iRet==OK, lblSecKO);

	// MAC Key CheckSum
	// ****************
	iRet = SEC_KeyVerify (C_SEC_CIPHERING,                       // C_SEC_CIPHERING secure part chosen to check key in terminal or pinpad
   18f6c:	2003      	movs	r0, #3
   18f6e:	f008 f9a8 	bl	212c2 <SEC_KeyVerify>
   18f72:	60b8      	str	r0, [r7, #8]
			&xMacKey,                              // MAC key parameters
			tucChkSum,                             // MAC key checksum
			&uiLen);                               // Length checksum
	CHECK(iRet==OK, lblSecKO);
   18f74:	68bb      	ldr	r3, [r7, #8]
   18f76:	2b00      	cmp	r3, #0
   18f78:	d138      	bne.n	18fec <LoadMacKey+0x118>

	sprintf(tcDisplay, "Load Mac Key Done\nCheckSum: %02X%02X%02X", tucChkSum[0], tucChkSum[1], tucChkSum[2]);
   18f7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   18f7e:	461a      	mov	r2, r3
   18f80:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   18f84:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
   18f88:	4608      	mov	r0, r1
   18f8a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   18f8e:	9000      	str	r0, [sp, #0]
   18f90:	4608      	mov	r0, r1
   18f92:	f645 7168 	movw	r1, #24424	; 0x5f68
   18f96:	f2c0 0102 	movt	r1, #2
   18f9a:	f7ef ee8c 	blx	8cb4 <_init+0x154>
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, tcDisplay, GL_ICON_INFORMATION, GL_BUTTON_VALID, 5*1000);
   18f9e:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   18fa2:	f2c0 0302 	movt	r3, #2
   18fa6:	681a      	ldr	r2, [r3, #0]
   18fa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
   18fac:	2101      	movs	r1, #1
   18fae:	9100      	str	r1, [sp, #0]
   18fb0:	f241 3188 	movw	r1, #5000	; 0x1388
   18fb4:	9101      	str	r1, [sp, #4]
   18fb6:	4610      	mov	r0, r2
   18fb8:	2100      	movs	r1, #0
   18fba:	461a      	mov	r2, r3
   18fbc:	2302      	movs	r3, #2
   18fbe:	f008 fab1 	bl	21524 <GL_Dialog_Message>

	goto lblEnd;
   18fc2:	e028      	b.n	19016 <LoadMacKey+0x142>

	// Errors treatment
	// ****************
	lblNoSecDll:                                                     // Security DLL missing
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Missing Sec DLL", GL_ICON_WARNING, GL_BUTTON_VALID, 3*1000);
   18fc4:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   18fc8:	f2c0 0302 	movt	r3, #2
   18fcc:	681b      	ldr	r3, [r3, #0]
   18fce:	2201      	movs	r2, #1
   18fd0:	9200      	str	r2, [sp, #0]
   18fd2:	f640 32b8 	movw	r2, #3000	; 0xbb8
   18fd6:	9201      	str	r2, [sp, #4]
   18fd8:	4618      	mov	r0, r3
   18fda:	2100      	movs	r1, #0
   18fdc:	f645 42f8 	movw	r2, #23800	; 0x5cf8
   18fe0:	f2c0 0202 	movt	r2, #2
   18fe4:	2303      	movs	r3, #3
   18fe6:	f008 fa9d 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
   18fea:	e014      	b.n	19016 <LoadMacKey+0x142>
	lblSecKO:                                                        // Security DLL error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, SEC_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   18fec:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   18ff0:	f2c0 0302 	movt	r3, #2
   18ff4:	681c      	ldr	r4, [r3, #0]
   18ff6:	68b8      	ldr	r0, [r7, #8]
   18ff8:	f7f7 fd68 	bl	10acc <SEC_ErrorMsg>
   18ffc:	4603      	mov	r3, r0
   18ffe:	2201      	movs	r2, #1
   19000:	9200      	str	r2, [sp, #0]
   19002:	f241 3288 	movw	r2, #5000	; 0x1388
   19006:	9201      	str	r2, [sp, #4]
   19008:	4620      	mov	r0, r4
   1900a:	2100      	movs	r1, #0
   1900c:	461a      	mov	r2, r3
   1900e:	2304      	movs	r3, #4
   19010:	f008 fa88 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
   19014:	bf00      	nop
	lblEnd:
	return;
}
   19016:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1901a:	f2c0 0302 	movt	r3, #2
   1901e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   19020:	681b      	ldr	r3, [r3, #0]
   19022:	429a      	cmp	r2, r3
   19024:	d001      	beq.n	1902a <LoadMacKey+0x156>
   19026:	f7ef ffbd 	bl	8fa4 <__stack_chk_fail>
   1902a:	f107 0764 	add.w	r7, r7, #100	; 0x64
   1902e:	46bd      	mov	sp, r7
   19030:	bd90      	pop	{r4, r7, pc}
   19032:	bf00      	nop

00019034 <Iso9564PinCiphering>:
//    =0 : Done
//    !0 : Failed
//****************************************************************************

static int Iso9564PinCiphering(const byte *pucAcc, byte *pucBlk)
{
   19034:	b580      	push	{r7, lr}
   19036:	b08a      	sub	sp, #40	; 0x28
   19038:	af02      	add	r7, sp, #8
   1903a:	6078      	str	r0, [r7, #4]
   1903c:	6039      	str	r1, [r7, #0]
   1903e:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   19042:	f2c0 0302 	movt	r3, #2
   19046:	681b      	ldr	r3, [r3, #0]
   19048:	61fb      	str	r3, [r7, #28]
	T_SEC_DATAKEY_ID xKey;
	int iRet;

	// ISO9564 Pin ciphering
	// *********************
	xKey.iSecretArea = AreaId();                  // Secret area identification
   1904a:	f7fe fc1d 	bl	17888 <AreaId>
   1904e:	4603      	mov	r3, r0
   19050:	613b      	str	r3, [r7, #16]
	xKey.cAlgoType = TLV_TYPE_KTDES;              // PIN key is a TDES Key
   19052:	2302      	movs	r3, #2
   19054:	753b      	strb	r3, [r7, #20]
	xKey.usNumber = ISO9564PIN_KEY_LOC;           // PIN key location inside the secret area
   19056:	2398      	movs	r3, #152	; 0x98
   19058:	82fb      	strh	r3, [r7, #22]
	xKey.uiBankId = BANK_ISO9564_ID;              // Bank id related to this PIN key
   1905a:	f240 2302 	movw	r3, #514	; 0x202
   1905e:	f2c8 0300 	movt	r3, #32768	; 0x8000
   19062:	61bb      	str	r3, [r7, #24]

	iRet = SEC_Iso9564 (C_SEC_CIPHERING,          // C_SEC_CIPHERING secure part chosen to cipher PIN in terminal or pinpad
   19064:	f107 0310 	add.w	r3, r7, #16
   19068:	683a      	ldr	r2, [r7, #0]
   1906a:	9200      	str	r2, [sp, #0]
			&xKey,                    // PIN key parameters
			ISO9564_F0_TDES,          // Ciphering format
			(byte*)pucAcc,            // Account number (last 12 digits without Luhn)
			pucBlk,                   // Pinblock result
			&uiLengthOut);
   1906c:	f107 0208 	add.w	r2, r7, #8
	xKey.iSecretArea = AreaId();                  // Secret area identification
	xKey.cAlgoType = TLV_TYPE_KTDES;              // PIN key is a TDES Key
	xKey.usNumber = ISO9564PIN_KEY_LOC;           // PIN key location inside the secret area
	xKey.uiBankId = BANK_ISO9564_ID;              // Bank id related to this PIN key

	iRet = SEC_Iso9564 (C_SEC_CIPHERING,          // C_SEC_CIPHERING secure part chosen to cipher PIN in terminal or pinpad
   19070:	9201      	str	r2, [sp, #4]
   19072:	2003      	movs	r0, #3
   19074:	4619      	mov	r1, r3
   19076:	2202      	movs	r2, #2
   19078:	687b      	ldr	r3, [r7, #4]
   1907a:	f008 f8fe 	bl	2127a <SEC_Iso9564>
   1907e:	60f8      	str	r0, [r7, #12]
			ISO9564_F0_TDES,          // Ciphering format
			(byte*)pucAcc,            // Account number (last 12 digits without Luhn)
			pucBlk,                   // Pinblock result
			&uiLengthOut);

	return iRet;
   19080:	68fb      	ldr	r3, [r7, #12]
}
   19082:	4618      	mov	r0, r3
   19084:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   19088:	f2c0 0302 	movt	r3, #2
   1908c:	69fa      	ldr	r2, [r7, #28]
   1908e:	681b      	ldr	r3, [r3, #0]
   19090:	429a      	cmp	r2, r3
   19092:	d001      	beq.n	19098 <Iso9564PinCiphering+0x64>
   19094:	f7ef ff86 	bl	8fa4 <__stack_chk_fail>
   19098:	f107 0720 	add.w	r7, r7, #32
   1909c:	46bd      	mov	sp, r7
   1909e:	bd80      	pop	{r7, pc}

000190a0 <Iso9564PinEntry>:
//  This function has no parameters.
//  This function has no return value.
//****************************************************************************

void Iso9564PinEntry(void)
{
   190a0:	b590      	push	{r4, r7, lr}
   190a2:	b0bf      	sub	sp, #252	; 0xfc
   190a4:	af02      	add	r7, sp, #8
   190a6:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   190aa:	f2c0 0302 	movt	r3, #2
   190ae:	681b      	ldr	r3, [r3, #0]
   190b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	// Local variables
	// ***************
	T_GL_HWIDGET hScreen=NULL;
   190b4:	2300      	movs	r3, #0
   190b6:	607b      	str	r3, [r7, #4]
	T_GL_HWIDGET hDocument=NULL;
   190b8:	2300      	movs	r3, #0
   190ba:	60bb      	str	r3, [r7, #8]
	byte p; // Printer line index
	int i, iRet;

	// Check Pinpad
	// ************
	iRet = DLLExist("SECURITY"); CHECK(iRet==TRUE, lblNoSecDll);       // Security DLL loaded?
   190bc:	f645 4094 	movw	r0, #23700	; 0x5c94
   190c0:	f2c0 0002 	movt	r0, #2
   190c4:	f006 fb2a 	bl	1f71c <DLLExist>
   190c8:	6138      	str	r0, [r7, #16]
   190ca:	693b      	ldr	r3, [r7, #16]
   190cc:	2b01      	cmp	r3, #1
   190ce:	f040 819c 	bne.w	1940a <Iso9564PinEntry+0x36a>
	iRet = ChkPpdConfig(); CHECK(iRet>=0, lblEnd);                     // Pinpad problem? => check config from Manager
   190d2:	f7fe f9cf 	bl	17474 <ChkPpdConfig>
   190d6:	6138      	str	r0, [r7, #16]
   190d8:	693b      	ldr	r3, [r7, #16]
   190da:	2b00      	cmp	r3, #0
   190dc:	f2c0 81d2 	blt.w	19484 <Iso9564PinEntry+0x3e4>

	// Enter PIN
	// *********
	pcMsg1 = "        1000 EUR";
   190e0:	f645 7394 	movw	r3, #24468	; 0x5f94
   190e4:	f2c0 0302 	movt	r3, #2
   190e8:	617b      	str	r3, [r7, #20]
	pcMsg2 = "PIN: ";
   190ea:	f645 73a8 	movw	r3, #24488	; 0x5fa8
   190ee:	f2c0 0302 	movt	r3, #2
   190f2:	61bb      	str	r3, [r7, #24]
	pcMsg1Idle = "    WELCOME     ";
   190f4:	f645 73b0 	movw	r3, #24496	; 0x5fb0
   190f8:	f2c0 0302 	movt	r3, #2
   190fc:	61fb      	str	r3, [r7, #28]
	pcMsg2Idle = "                ";
   190fe:	f645 73c4 	movw	r3, #24516	; 0x5fc4
   19102:	f2c0 0302 	movt	r3, #2
   19106:	623b      	str	r3, [r7, #32]
	iRet = PinEntry (pcMsg1, pcMsg2, pcMsg1Idle, pcMsg2Idle, 60);      // Pin entry with timeout 90sec
   19108:	233c      	movs	r3, #60	; 0x3c
   1910a:	9300      	str	r3, [sp, #0]
   1910c:	6978      	ldr	r0, [r7, #20]
   1910e:	69b9      	ldr	r1, [r7, #24]
   19110:	69fa      	ldr	r2, [r7, #28]
   19112:	6a3b      	ldr	r3, [r7, #32]
   19114:	f7fe fc24 	bl	17960 <PinEntry>
   19118:	6138      	str	r0, [r7, #16]
	CHECK(iRet!=0, lblEnd); CHECK(iRet>=0, lblKO);
   1911a:	693b      	ldr	r3, [r7, #16]
   1911c:	2b00      	cmp	r3, #0
   1911e:	f000 81b1 	beq.w	19484 <Iso9564PinEntry+0x3e4>
   19122:	693b      	ldr	r3, [r7, #16]
   19124:	2b00      	cmp	r3, #0
   19126:	f2c0 8199 	blt.w	1945c <Iso9564PinEntry+0x3bc>

	// PIN ciphering to get pinblock
	// *****************************
	memcpy(tucAcc, "\x00\x00\x78\x90\x12\x34\x56\x74", 8); // 12 last digit (without luhn) + left padding 0
   1912a:	f645 73d8 	movw	r3, #24536	; 0x5fd8
   1912e:	f2c0 0302 	movt	r3, #2
   19132:	f107 0274 	add.w	r2, r7, #116	; 0x74
   19136:	e893 0003 	ldmia.w	r3, {r0, r1}
   1913a:	e882 0003 	stmia.w	r2, {r0, r1}
	iRet = Iso9564PinCiphering(tucAcc, tucBlk); CHECK(iRet==OK, lblSecKO);
   1913e:	f107 0274 	add.w	r2, r7, #116	; 0x74
   19142:	f107 037c 	add.w	r3, r7, #124	; 0x7c
   19146:	4610      	mov	r0, r2
   19148:	4619      	mov	r1, r3
   1914a:	f7ff ff73 	bl	19034 <Iso9564PinCiphering>
   1914e:	6138      	str	r0, [r7, #16]
   19150:	693b      	ldr	r3, [r7, #16]
   19152:	2b00      	cmp	r3, #0
   19154:	f040 816d 	bne.w	19432 <Iso9564PinEntry+0x392>

	// Display pinblock
	// ****************
	hScreen = GoalCreateScreen(gGoalGraphicLibInstance, txResult, NUMBER_OF_LINES(txResult), GL_ENCODING_UTF8);
   19158:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   1915c:	f2c0 0302 	movt	r3, #2
   19160:	681b      	ldr	r3, [r3, #0]
   19162:	4618      	mov	r0, r3
   19164:	f645 0198 	movw	r1, #22680	; 0x5898
   19168:	f2c0 0102 	movt	r1, #2
   1916c:	2202      	movs	r2, #2
   1916e:	2300      	movs	r3, #0
   19170:	f7f3 ff88 	bl	d084 <GoalCreateScreen>
   19174:	4603      	mov	r3, r0
   19176:	607b      	str	r3, [r7, #4]
	CHECK(hScreen!=NULL, lblKO);                                       // Create new screen and clear it
   19178:	687b      	ldr	r3, [r7, #4]
   1917a:	2b00      	cmp	r3, #0
   1917c:	f000 816e 	beq.w	1945c <Iso9564PinEntry+0x3bc>
	iRet = GoalClrScreen(hScreen, GL_COLOR_TRANSPARENT, KEY_VALID, false);
   19180:	687b      	ldr	r3, [r7, #4]
   19182:	4618      	mov	r0, r3
   19184:	2100      	movs	r1, #0
   19186:	2201      	movs	r2, #1
   19188:	2300      	movs	r3, #0
   1918a:	f7f4 f919 	bl	d3c0 <GoalClrScreen>
   1918e:	6138      	str	r0, [r7, #16]
	CHECK(iRet>=0, lblKO);
   19190:	693b      	ldr	r3, [r7, #16]
   19192:	2b00      	cmp	r3, #0
   19194:	f2c0 8162 	blt.w	1945c <Iso9564PinEntry+0x3bc>

	iRet = GoalDspLine(hScreen, 0, "Pin Block Result", &txResult[0], 0, false);
   19198:	687b      	ldr	r3, [r7, #4]
   1919a:	2200      	movs	r2, #0
   1919c:	9200      	str	r2, [sp, #0]
   1919e:	2200      	movs	r2, #0
   191a0:	9201      	str	r2, [sp, #4]
   191a2:	4618      	mov	r0, r3
   191a4:	2100      	movs	r1, #0
   191a6:	f645 72e4 	movw	r2, #24548	; 0x5fe4
   191aa:	f2c0 0202 	movt	r2, #2
   191ae:	f645 0398 	movw	r3, #22680	; 0x5898
   191b2:	f2c0 0302 	movt	r3, #2
   191b6:	f7f4 fa1d 	bl	d5f4 <GoalDspLine>
   191ba:	6138      	str	r0, [r7, #16]
	CHECK(iRet>=0, lblKO);
   191bc:	693b      	ldr	r3, [r7, #16]
   191be:	2b00      	cmp	r3, #0
   191c0:	f2c0 814c 	blt.w	1945c <Iso9564PinEntry+0x3bc>
	memset(tcDisplay, 0, sizeof(tcDisplay));
   191c4:	f107 0384 	add.w	r3, r7, #132	; 0x84
   191c8:	4618      	mov	r0, r3
   191ca:	2100      	movs	r1, #0
   191cc:	2233      	movs	r2, #51	; 0x33
   191ce:	f7ef ecf6 	blx	8bbc <_init+0x5c>
	for (i=0; i<8; i++)
   191d2:	2300      	movs	r3, #0
   191d4:	60fb      	str	r3, [r7, #12]
   191d6:	e018      	b.n	1920a <Iso9564PinEntry+0x16a>
		sprintf(&tcDisplay[strlen(tcDisplay)], "%02X", tucBlk[i]);
   191d8:	f107 0384 	add.w	r3, r7, #132	; 0x84
   191dc:	4618      	mov	r0, r3
   191de:	f7ef ed52 	blx	8c84 <_init+0x124>
   191e2:	4603      	mov	r3, r0
   191e4:	f107 0284 	add.w	r2, r7, #132	; 0x84
   191e8:	18d2      	adds	r2, r2, r3
   191ea:	f107 017c 	add.w	r1, r7, #124	; 0x7c
   191ee:	68fb      	ldr	r3, [r7, #12]
   191f0:	18cb      	adds	r3, r1, r3
   191f2:	781b      	ldrb	r3, [r3, #0]
   191f4:	4610      	mov	r0, r2
   191f6:	f645 71f8 	movw	r1, #24568	; 0x5ff8
   191fa:	f2c0 0102 	movt	r1, #2
   191fe:	461a      	mov	r2, r3
   19200:	f7ef ed58 	blx	8cb4 <_init+0x154>
	CHECK(iRet>=0, lblKO);

	iRet = GoalDspLine(hScreen, 0, "Pin Block Result", &txResult[0], 0, false);
	CHECK(iRet>=0, lblKO);
	memset(tcDisplay, 0, sizeof(tcDisplay));
	for (i=0; i<8; i++)
   19204:	68fb      	ldr	r3, [r7, #12]
   19206:	3301      	adds	r3, #1
   19208:	60fb      	str	r3, [r7, #12]
   1920a:	68fb      	ldr	r3, [r7, #12]
   1920c:	2b07      	cmp	r3, #7
   1920e:	dde3      	ble.n	191d8 <Iso9564PinEntry+0x138>
		sprintf(&tcDisplay[strlen(tcDisplay)], "%02X", tucBlk[i]);

	iRet = GoalDspLine(hScreen, 1, tcDisplay, &txResult[1], 0, true);  // Show pinblock
   19210:	687a      	ldr	r2, [r7, #4]
   19212:	f107 0384 	add.w	r3, r7, #132	; 0x84
   19216:	2100      	movs	r1, #0
   19218:	9100      	str	r1, [sp, #0]
   1921a:	2101      	movs	r1, #1
   1921c:	9101      	str	r1, [sp, #4]
   1921e:	4610      	mov	r0, r2
   19220:	2101      	movs	r1, #1
   19222:	461a      	mov	r2, r3
   19224:	4ba6      	ldr	r3, [pc, #664]	; (194c0 <Iso9564PinEntry+0x420>)
   19226:	f7f4 f9e5 	bl	d5f4 <GoalDspLine>
   1922a:	6138      	str	r0, [r7, #16]
	CHECK(iRet>=0, lblKO);
   1922c:	693b      	ldr	r3, [r7, #16]
   1922e:	2b00      	cmp	r3, #0
   19230:	f2c0 8114 	blt.w	1945c <Iso9564PinEntry+0x3bc>

	// Print pinblock
	// **************
	p=0;
   19234:	2300      	movs	r3, #0
   19236:	70fb      	strb	r3, [r7, #3]
	hDocument = GoalCreateDocument(gGoalGraphicLibInstance, GL_ENCODING_UTF8);           // Create document
   19238:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   1923c:	f2c0 0302 	movt	r3, #2
   19240:	681b      	ldr	r3, [r3, #0]
   19242:	4618      	mov	r0, r3
   19244:	2100      	movs	r1, #0
   19246:	f7f5 fe21 	bl	ee8c <GoalCreateDocument>
   1924a:	4603      	mov	r3, r0
   1924c:	60bb      	str	r3, [r7, #8]
	CHECK(hDocument!=NULL, lblKO);
   1924e:	68bb      	ldr	r3, [r7, #8]
   19250:	2b00      	cmp	r3, #0
   19252:	f000 8103 	beq.w	1945c <Iso9564PinEntry+0x3bc>

	xLine = xPrinter;                                                  // Build document (Demo, account# info, Pin key, Pinblock)
   19256:	f645 13f0 	movw	r3, #23024	; 0x59f0
   1925a:	f2c0 0302 	movt	r3, #2
   1925e:	f107 0124 	add.w	r1, r7, #36	; 0x24
   19262:	461a      	mov	r2, r3
   19264:	2350      	movs	r3, #80	; 0x50
   19266:	4608      	mov	r0, r1
   19268:	4611      	mov	r1, r2
   1926a:	461a      	mov	r2, r3
   1926c:	f7ef ed04 	blx	8c78 <_init+0x118>
	xLine.eTextAlign = GL_ALIGN_CENTER;
   19270:	2300      	movs	r3, #0
   19272:	627b      	str	r3, [r7, #36]	; 0x24
	xLine.bReverse = TRUE;
   19274:	2301      	movs	r3, #1
   19276:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	xLine.xMargin.usBottom = PIXEL_BOTTOM;
   1927a:	2328      	movs	r3, #40	; 0x28
   1927c:	667b      	str	r3, [r7, #100]	; 0x64
	xLine.xFont.eScale = GL_SCALE_XXLARGE;
   1927e:	f643 73f6 	movw	r3, #16374	; 0x3ff6
   19282:	673b      	str	r3, [r7, #112]	; 0x70
	iRet = GoalPrnLine(hDocument, p++, "Pin Entry Demo", &xLine);
   19284:	68b9      	ldr	r1, [r7, #8]
   19286:	78fb      	ldrb	r3, [r7, #3]
   19288:	b29a      	uxth	r2, r3
   1928a:	78fb      	ldrb	r3, [r7, #3]
   1928c:	3301      	adds	r3, #1
   1928e:	70fb      	strb	r3, [r7, #3]
   19290:	f107 0324 	add.w	r3, r7, #36	; 0x24
   19294:	4608      	mov	r0, r1
   19296:	4611      	mov	r1, r2
   19298:	f246 0200 	movw	r2, #24576	; 0x6000
   1929c:	f2c0 0202 	movt	r2, #2
   192a0:	f7f5 fe30 	bl	ef04 <GoalPrnLine>
   192a4:	6138      	str	r0, [r7, #16]
	CHECK(iRet>=0, lblKO);
   192a6:	693b      	ldr	r3, [r7, #16]
   192a8:	2b00      	cmp	r3, #0
   192aa:	f2c0 80d7 	blt.w	1945c <Iso9564PinEntry+0x3bc>

	xLine = xPrinter;
   192ae:	f645 13f0 	movw	r3, #23024	; 0x59f0
   192b2:	f2c0 0302 	movt	r3, #2
   192b6:	f107 0124 	add.w	r1, r7, #36	; 0x24
   192ba:	461a      	mov	r2, r3
   192bc:	2350      	movs	r3, #80	; 0x50
   192be:	4608      	mov	r0, r1
   192c0:	4611      	mov	r1, r2
   192c2:	461a      	mov	r2, r3
   192c4:	f7ef ecd8 	blx	8c78 <_init+0x118>
	iRet = GoalPrnLine(hDocument, p++, "Account Number:\n"             // Account number to print
   192c8:	68b9      	ldr	r1, [r7, #8]
   192ca:	78fb      	ldrb	r3, [r7, #3]
   192cc:	b29a      	uxth	r2, r3
   192ce:	78fb      	ldrb	r3, [r7, #3]
   192d0:	3301      	adds	r3, #1
   192d2:	70fb      	strb	r3, [r7, #3]
			"1234567890123456744", &xLine);
   192d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
	xLine.xFont.eScale = GL_SCALE_XXLARGE;
	iRet = GoalPrnLine(hDocument, p++, "Pin Entry Demo", &xLine);
	CHECK(iRet>=0, lblKO);

	xLine = xPrinter;
	iRet = GoalPrnLine(hDocument, p++, "Account Number:\n"             // Account number to print
   192d8:	4608      	mov	r0, r1
   192da:	4611      	mov	r1, r2
   192dc:	f246 0210 	movw	r2, #24592	; 0x6010
   192e0:	f2c0 0202 	movt	r2, #2
   192e4:	f7f5 fe0e 	bl	ef04 <GoalPrnLine>
   192e8:	6138      	str	r0, [r7, #16]
			"1234567890123456744", &xLine);
	CHECK(iRet>=0, lblKO);
   192ea:	693b      	ldr	r3, [r7, #16]
   192ec:	2b00      	cmp	r3, #0
   192ee:	f2c0 80b5 	blt.w	1945c <Iso9564PinEntry+0x3bc>
	iRet = GoalPrnLine(hDocument, p++,"Pin Key Checksum Value:\n"      // Pin KCV to print
   192f2:	68b9      	ldr	r1, [r7, #8]
   192f4:	78fb      	ldrb	r3, [r7, #3]
   192f6:	b29a      	uxth	r2, r3
   192f8:	78fb      	ldrb	r3, [r7, #3]
   192fa:	3301      	adds	r3, #1
   192fc:	70fb      	strb	r3, [r7, #3]
			"F7 53 C2", &xLine);
   192fe:	f107 0324 	add.w	r3, r7, #36	; 0x24

	xLine = xPrinter;
	iRet = GoalPrnLine(hDocument, p++, "Account Number:\n"             // Account number to print
			"1234567890123456744", &xLine);
	CHECK(iRet>=0, lblKO);
	iRet = GoalPrnLine(hDocument, p++,"Pin Key Checksum Value:\n"      // Pin KCV to print
   19302:	4608      	mov	r0, r1
   19304:	4611      	mov	r1, r2
   19306:	f246 0234 	movw	r2, #24628	; 0x6034
   1930a:	f2c0 0202 	movt	r2, #2
   1930e:	f7f5 fdf9 	bl	ef04 <GoalPrnLine>
   19312:	6138      	str	r0, [r7, #16]
			"F7 53 C2", &xLine);
	CHECK(iRet>=0, lblKO);
   19314:	693b      	ldr	r3, [r7, #16]
   19316:	2b00      	cmp	r3, #0
   19318:	f2c0 80a0 	blt.w	1945c <Iso9564PinEntry+0x3bc>
	iRet = GoalPrnLine(hDocument, p++, "Pinblock:", &xLine);
   1931c:	68b9      	ldr	r1, [r7, #8]
   1931e:	78fb      	ldrb	r3, [r7, #3]
   19320:	b29a      	uxth	r2, r3
   19322:	78fb      	ldrb	r3, [r7, #3]
   19324:	3301      	adds	r3, #1
   19326:	70fb      	strb	r3, [r7, #3]
   19328:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1932c:	4608      	mov	r0, r1
   1932e:	4611      	mov	r1, r2
   19330:	f246 0258 	movw	r2, #24664	; 0x6058
   19334:	f2c0 0202 	movt	r2, #2
   19338:	f7f5 fde4 	bl	ef04 <GoalPrnLine>
   1933c:	6138      	str	r0, [r7, #16]
	CHECK(iRet>=0, lblKO);
   1933e:	693b      	ldr	r3, [r7, #16]
   19340:	2b00      	cmp	r3, #0
   19342:	f2c0 808b 	blt.w	1945c <Iso9564PinEntry+0x3bc>
	memset(tcPrint, 0, sizeof(tcPrint));
   19346:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
   1934a:	4618      	mov	r0, r3
   1934c:	2100      	movs	r1, #0
   1934e:	2233      	movs	r2, #51	; 0x33
   19350:	f7ef ec34 	blx	8bbc <_init+0x5c>
	for (i=0; i<8; i++)
   19354:	2300      	movs	r3, #0
   19356:	60fb      	str	r3, [r7, #12]
   19358:	e018      	b.n	1938c <Iso9564PinEntry+0x2ec>
		sprintf (&tcPrint[strlen(tcPrint)], "%02X ", tucBlk[i]);
   1935a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
   1935e:	4618      	mov	r0, r3
   19360:	f7ef ec90 	blx	8c84 <_init+0x124>
   19364:	4603      	mov	r3, r0
   19366:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
   1936a:	18d2      	adds	r2, r2, r3
   1936c:	f107 017c 	add.w	r1, r7, #124	; 0x7c
   19370:	68fb      	ldr	r3, [r7, #12]
   19372:	18cb      	adds	r3, r1, r3
   19374:	781b      	ldrb	r3, [r3, #0]
   19376:	4610      	mov	r0, r2
   19378:	f246 0164 	movw	r1, #24676	; 0x6064
   1937c:	f2c0 0102 	movt	r1, #2
   19380:	461a      	mov	r2, r3
   19382:	f7ef ec98 	blx	8cb4 <_init+0x154>
			"F7 53 C2", &xLine);
	CHECK(iRet>=0, lblKO);
	iRet = GoalPrnLine(hDocument, p++, "Pinblock:", &xLine);
	CHECK(iRet>=0, lblKO);
	memset(tcPrint, 0, sizeof(tcPrint));
	for (i=0; i<8; i++)
   19386:	68fb      	ldr	r3, [r7, #12]
   19388:	3301      	adds	r3, #1
   1938a:	60fb      	str	r3, [r7, #12]
   1938c:	68fb      	ldr	r3, [r7, #12]
   1938e:	2b07      	cmp	r3, #7
   19390:	dde3      	ble.n	1935a <Iso9564PinEntry+0x2ba>
		sprintf (&tcPrint[strlen(tcPrint)], "%02X ", tucBlk[i]);
	iRet = GoalPrnLine(hDocument, p++, tcPrint, &xLine);               // Pinblock to print
   19392:	68b8      	ldr	r0, [r7, #8]
   19394:	78fb      	ldrb	r3, [r7, #3]
   19396:	b299      	uxth	r1, r3
   19398:	78fb      	ldrb	r3, [r7, #3]
   1939a:	3301      	adds	r3, #1
   1939c:	70fb      	strb	r3, [r7, #3]
   1939e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
   193a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
   193a6:	f7f5 fdad 	bl	ef04 <GoalPrnLine>
   193aa:	6138      	str	r0, [r7, #16]
	CHECK(iRet>=0, lblKO);
   193ac:	693b      	ldr	r3, [r7, #16]
   193ae:	2b00      	cmp	r3, #0
   193b0:	db54      	blt.n	1945c <Iso9564PinEntry+0x3bc>
	iRet = GoalPrnLine(hDocument, p++, "\n\n\n\n", &xLine);
   193b2:	68b9      	ldr	r1, [r7, #8]
   193b4:	78fb      	ldrb	r3, [r7, #3]
   193b6:	b29a      	uxth	r2, r3
   193b8:	78fb      	ldrb	r3, [r7, #3]
   193ba:	3301      	adds	r3, #1
   193bc:	70fb      	strb	r3, [r7, #3]
   193be:	f107 0324 	add.w	r3, r7, #36	; 0x24
   193c2:	4608      	mov	r0, r1
   193c4:	4611      	mov	r1, r2
   193c6:	f645 62cc 	movw	r2, #24268	; 0x5ecc
   193ca:	f2c0 0202 	movt	r2, #2
   193ce:	f7f5 fd99 	bl	ef04 <GoalPrnLine>
   193d2:	6138      	str	r0, [r7, #16]
	CHECK(iRet>=0, lblKO);
   193d4:	693b      	ldr	r3, [r7, #16]
   193d6:	2b00      	cmp	r3, #0
   193d8:	db40      	blt.n	1945c <Iso9564PinEntry+0x3bc>

	iRet = GoalPrnDocument(hDocument);                                 // Print document
   193da:	68bb      	ldr	r3, [r7, #8]
   193dc:	4618      	mov	r0, r3
   193de:	f7f5 ffa3 	bl	f328 <GoalPrnDocument>
   193e2:	6138      	str	r0, [r7, #16]
	CHECK(iRet>=0, lblKO);
   193e4:	693b      	ldr	r3, [r7, #16]
   193e6:	2b00      	cmp	r3, #0
   193e8:	db38      	blt.n	1945c <Iso9564PinEntry+0x3bc>

	GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 30*1000, true);                   // Wait for key pressed/touched (shortcut)
   193ea:	687a      	ldr	r2, [r7, #4]
   193ec:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   193f0:	f2c0 0302 	movt	r3, #2
   193f4:	681b      	ldr	r3, [r3, #0]
   193f6:	2101      	movs	r1, #1
   193f8:	9100      	str	r1, [sp, #0]
   193fa:	4610      	mov	r0, r2
   193fc:	4619      	mov	r1, r3
   193fe:	2201      	movs	r2, #1
   19400:	f247 5330 	movw	r3, #30000	; 0x7530
   19404:	f7f4 fc2c 	bl	dc60 <GoalGetKey>

	goto lblEnd;
   19408:	e03c      	b.n	19484 <Iso9564PinEntry+0x3e4>

	// Errors treatment
	// ****************
	lblNoSecDll:                                                           // Security DLL missing
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Missing Sec DLL", GL_ICON_WARNING, GL_BUTTON_VALID, 3*1000);
   1940a:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   1940e:	f2c0 0302 	movt	r3, #2
   19412:	681b      	ldr	r3, [r3, #0]
   19414:	2201      	movs	r2, #1
   19416:	9200      	str	r2, [sp, #0]
   19418:	f640 32b8 	movw	r2, #3000	; 0xbb8
   1941c:	9201      	str	r2, [sp, #4]
   1941e:	4618      	mov	r0, r3
   19420:	2100      	movs	r1, #0
   19422:	f645 42f8 	movw	r2, #23800	; 0x5cf8
   19426:	f2c0 0202 	movt	r2, #2
   1942a:	2303      	movs	r3, #3
   1942c:	f008 f87a 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
   19430:	e028      	b.n	19484 <Iso9564PinEntry+0x3e4>
	lblSecKO:                                                              // Security DLL error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, SEC_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   19432:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   19436:	f2c0 0302 	movt	r3, #2
   1943a:	681c      	ldr	r4, [r3, #0]
   1943c:	6938      	ldr	r0, [r7, #16]
   1943e:	f7f7 fb45 	bl	10acc <SEC_ErrorMsg>
   19442:	4603      	mov	r3, r0
   19444:	2201      	movs	r2, #1
   19446:	9200      	str	r2, [sp, #0]
   19448:	f241 3288 	movw	r2, #5000	; 0x1388
   1944c:	9201      	str	r2, [sp, #4]
   1944e:	4620      	mov	r0, r4
   19450:	2100      	movs	r1, #0
   19452:	461a      	mov	r2, r3
   19454:	2304      	movs	r3, #4
   19456:	f008 f865 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
   1945a:	e013      	b.n	19484 <Iso9564PinEntry+0x3e4>
	lblKO:                                                                 // None-classified low level error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Processing Error", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   1945c:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   19460:	f2c0 0302 	movt	r3, #2
   19464:	681b      	ldr	r3, [r3, #0]
   19466:	2201      	movs	r2, #1
   19468:	9200      	str	r2, [sp, #0]
   1946a:	f241 3288 	movw	r2, #5000	; 0x1388
   1946e:	9201      	str	r2, [sp, #4]
   19470:	4618      	mov	r0, r3
   19472:	2100      	movs	r1, #0
   19474:	f645 521c 	movw	r2, #23836	; 0x5d1c
   19478:	f2c0 0202 	movt	r2, #2
   1947c:	2304      	movs	r3, #4
   1947e:	f008 f851 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
   19482:	bf00      	nop
	lblEnd:
	if (hScreen)
   19484:	687b      	ldr	r3, [r7, #4]
   19486:	2b00      	cmp	r3, #0
   19488:	d003      	beq.n	19492 <Iso9564PinEntry+0x3f2>
		GoalDestroyScreen(&hScreen);                                   // Destroy screen
   1948a:	1d3b      	adds	r3, r7, #4
   1948c:	4618      	mov	r0, r3
   1948e:	f7f4 fd49 	bl	df24 <GoalDestroyScreen>

	if (hDocument)
   19492:	68bb      	ldr	r3, [r7, #8]
   19494:	2b00      	cmp	r3, #0
   19496:	d004      	beq.n	194a2 <Iso9564PinEntry+0x402>
		GoalDestroyDocument(&hDocument);                               // Destroy document
   19498:	f107 0308 	add.w	r3, r7, #8
   1949c:	4618      	mov	r0, r3
   1949e:	f7f5 ff6f 	bl	f380 <GoalDestroyDocument>
}
   194a2:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   194a6:	f2c0 0302 	movt	r3, #2
   194aa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
   194ae:	681b      	ldr	r3, [r3, #0]
   194b0:	429a      	cmp	r2, r3
   194b2:	d001      	beq.n	194b8 <Iso9564PinEntry+0x418>
   194b4:	f7ef fd76 	bl	8fa4 <__stack_chk_fail>
   194b8:	f107 07f4 	add.w	r7, r7, #244	; 0xf4
   194bc:	46bd      	mov	sp, r7
   194be:	bd90      	pop	{r4, r7, pc}
   194c0:	00025944 	.word	0x00025944

000194c4 <MacCalculation>:
//  This function has no parameters.
//  This function has no return value.
//****************************************************************************

void MacCalculation(void)
{
   194c4:	b5b0      	push	{r4, r5, r7, lr}
   194c6:	b0c2      	sub	sp, #264	; 0x108
   194c8:	af02      	add	r7, sp, #8
   194ca:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   194ce:	f2c0 0302 	movt	r3, #2
   194d2:	681b      	ldr	r3, [r3, #0]
   194d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	// Local variables
	// ***************
	T_GL_HWIDGET hScreen=NULL;
   194d8:	2300      	movs	r3, #0
   194da:	60bb      	str	r3, [r7, #8]
	T_GL_HWIDGET hDocument=NULL;
   194dc:	2300      	movs	r3, #0
   194de:	60fb      	str	r3, [r7, #12]
	ST_PRN_LINE xLine;
	char tcDisplay[50+1];
	char tcPrint[50+1];
	T_SEC_DATAKEY_ID xMacKey;
	const byte tucMsg[] = { 0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,
   194e0:	f246 1328 	movw	r3, #24872	; 0x6128
   194e4:	f2c0 0302 	movt	r3, #2
   194e8:	f107 047c 	add.w	r4, r7, #124	; 0x7c
   194ec:	461d      	mov	r5, r3
   194ee:	6828      	ldr	r0, [r5, #0]
   194f0:	6869      	ldr	r1, [r5, #4]
   194f2:	68aa      	ldr	r2, [r5, #8]
   194f4:	68eb      	ldr	r3, [r5, #12]
   194f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   194f8:	6928      	ldr	r0, [r5, #16]
   194fa:	6969      	ldr	r1, [r5, #20]
   194fc:	c403      	stmia	r4!, {r0, r1}
			0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33 };
	byte tucMac[8];
	byte p; // Printer line index
	int i, iRet;

	hScreen = GoalCreateScreen(gGoalGraphicLibInstance, txResult, NUMBER_OF_LINES(txResult), GL_ENCODING_UTF8);
   194fe:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   19502:	f2c0 0302 	movt	r3, #2
   19506:	681b      	ldr	r3, [r3, #0]
   19508:	4618      	mov	r0, r3
   1950a:	f645 0198 	movw	r1, #22680	; 0x5898
   1950e:	f2c0 0102 	movt	r1, #2
   19512:	2202      	movs	r2, #2
   19514:	2300      	movs	r3, #0
   19516:	f7f3 fdb5 	bl	d084 <GoalCreateScreen>
   1951a:	4603      	mov	r3, r0
   1951c:	60bb      	str	r3, [r7, #8]
	CHECK(hScreen!=NULL, lblKO);                                      // Create new screen and clear it
   1951e:	68bb      	ldr	r3, [r7, #8]
   19520:	2b00      	cmp	r3, #0
   19522:	f000 81b5 	beq.w	19890 <MacCalculation+0x3cc>
	iRet = GoalClrScreen(hScreen, GL_COLOR_TRANSPARENT, KEY_VALID, false);
   19526:	68bb      	ldr	r3, [r7, #8]
   19528:	4618      	mov	r0, r3
   1952a:	2100      	movs	r1, #0
   1952c:	2201      	movs	r2, #1
   1952e:	2300      	movs	r3, #0
   19530:	f7f3 ff46 	bl	d3c0 <GoalClrScreen>
   19534:	6178      	str	r0, [r7, #20]
	CHECK(iRet>=0, lblKO);
   19536:	697b      	ldr	r3, [r7, #20]
   19538:	2b00      	cmp	r3, #0
   1953a:	f2c0 81a9 	blt.w	19890 <MacCalculation+0x3cc>

	// Check Pinpad
	// ************
	iRet = DLLExist("SECURITY"); CHECK(iRet==TRUE, lblNoSecDll);      // Security DLL loaded?
   1953e:	f645 4094 	movw	r0, #23700	; 0x5c94
   19542:	f2c0 0002 	movt	r0, #2
   19546:	f006 f8e9 	bl	1f71c <DLLExist>
   1954a:	6178      	str	r0, [r7, #20]
   1954c:	697b      	ldr	r3, [r7, #20]
   1954e:	2b01      	cmp	r3, #1
   19550:	f040 8175 	bne.w	1983e <MacCalculation+0x37a>
	iRet = ChkPpdConfig(); CHECK(iRet>=0, lblEnd);                    // Pinpad problem? => check config from Manager
   19554:	f7fd ff8e 	bl	17474 <ChkPpdConfig>
   19558:	6178      	str	r0, [r7, #20]
   1955a:	697b      	ldr	r3, [r7, #20]
   1955c:	2b00      	cmp	r3, #0
   1955e:	f2c0 81ab 	blt.w	198b8 <MacCalculation+0x3f4>

	iRet = GoalDspLine(hScreen, 0, "M.A.C Compute", &txResult[0], 0, true);
   19562:	68bb      	ldr	r3, [r7, #8]
   19564:	2200      	movs	r2, #0
   19566:	9200      	str	r2, [sp, #0]
   19568:	2201      	movs	r2, #1
   1956a:	9201      	str	r2, [sp, #4]
   1956c:	4618      	mov	r0, r3
   1956e:	2100      	movs	r1, #0
   19570:	f246 026c 	movw	r2, #24684	; 0x606c
   19574:	f2c0 0202 	movt	r2, #2
   19578:	f645 0398 	movw	r3, #22680	; 0x5898
   1957c:	f2c0 0302 	movt	r3, #2
   19580:	f7f4 f838 	bl	d5f4 <GoalDspLine>
   19584:	6178      	str	r0, [r7, #20]
	CHECK(iRet>=0, lblKO);                                            // Compute in progress
   19586:	697b      	ldr	r3, [r7, #20]
   19588:	2b00      	cmp	r3, #0
   1958a:	f2c0 8181 	blt.w	19890 <MacCalculation+0x3cc>

	// Mac calculation
	// ***************
	xMacKey.iSecretArea = AreaId();                                   // Secret area identification
   1958e:	f7fe f97b 	bl	17888 <AreaId>
   19592:	4603      	mov	r3, r0
   19594:	61bb      	str	r3, [r7, #24]
	xMacKey.cAlgoType = TLV_TYPE_KDES;                                // MAC key is a DES Key
   19596:	2301      	movs	r3, #1
   19598:	773b      	strb	r3, [r7, #28]
	xMacKey.usNumber = MAC_KEY_LOC;                                   // MAC key location inside the secret area
   1959a:	23dc      	movs	r3, #220	; 0xdc
   1959c:	83fb      	strh	r3, [r7, #30]
	xMacKey.uiBankId = BANK_MAC_ID;                                   // Bank id related to this MAC key
   1959e:	f44f 738b 	mov.w	r3, #278	; 0x116
   195a2:	f2c8 0300 	movt	r3, #32768	; 0x8000
   195a6:	623b      	str	r3, [r7, #32]

	iRet = SEC_ComputeMAC (&xMacKey,                                  // MAC key parameters
   195a8:	f107 0218 	add.w	r2, r7, #24
			(byte*)tucMsg,                             // Message to compute
   195ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
			sizeof(tucMsg),
			NULL,
			tucMac);                                   // MAC result
   195b0:	f107 0174 	add.w	r1, r7, #116	; 0x74
	xMacKey.iSecretArea = AreaId();                                   // Secret area identification
	xMacKey.cAlgoType = TLV_TYPE_KDES;                                // MAC key is a DES Key
	xMacKey.usNumber = MAC_KEY_LOC;                                   // MAC key location inside the secret area
	xMacKey.uiBankId = BANK_MAC_ID;                                   // Bank id related to this MAC key

	iRet = SEC_ComputeMAC (&xMacKey,                                  // MAC key parameters
   195b4:	9100      	str	r1, [sp, #0]
   195b6:	4610      	mov	r0, r2
   195b8:	4619      	mov	r1, r3
   195ba:	2218      	movs	r2, #24
   195bc:	2300      	movs	r3, #0
   195be:	f007 fe38 	bl	21232 <SEC_ComputeMAC>
   195c2:	6178      	str	r0, [r7, #20]
			(byte*)tucMsg,                             // Message to compute
			sizeof(tucMsg),
			NULL,
			tucMac);                                   // MAC result
	CHECK(iRet==0, lblSecKO)
   195c4:	697b      	ldr	r3, [r7, #20]
   195c6:	2b00      	cmp	r3, #0
   195c8:	f040 814d 	bne.w	19866 <MacCalculation+0x3a2>

	// Display Mac
	// ***********
	iRet = GoalDspLine(hScreen, 0, "M.A.C Result", &txResult[0], 0, false);
   195cc:	68bb      	ldr	r3, [r7, #8]
   195ce:	2200      	movs	r2, #0
   195d0:	9200      	str	r2, [sp, #0]
   195d2:	2200      	movs	r2, #0
   195d4:	9201      	str	r2, [sp, #4]
   195d6:	4618      	mov	r0, r3
   195d8:	2100      	movs	r1, #0
   195da:	f246 027c 	movw	r2, #24700	; 0x607c
   195de:	f2c0 0202 	movt	r2, #2
   195e2:	f645 0398 	movw	r3, #22680	; 0x5898
   195e6:	f2c0 0302 	movt	r3, #2
   195ea:	f7f4 f803 	bl	d5f4 <GoalDspLine>
   195ee:	6178      	str	r0, [r7, #20]
	CHECK(iRet>=0, lblKO);
   195f0:	697b      	ldr	r3, [r7, #20]
   195f2:	2b00      	cmp	r3, #0
   195f4:	f2c0 814c 	blt.w	19890 <MacCalculation+0x3cc>

	memset(tcDisplay, 0, sizeof(tcDisplay));
   195f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
   195fc:	4618      	mov	r0, r3
   195fe:	2100      	movs	r1, #0
   19600:	2233      	movs	r2, #51	; 0x33
   19602:	f7ef eadc 	blx	8bbc <_init+0x5c>
	for (i=0; i<8; i++)
   19606:	2300      	movs	r3, #0
   19608:	613b      	str	r3, [r7, #16]
   1960a:	e018      	b.n	1963e <MacCalculation+0x17a>
		sprintf(&tcDisplay[strlen(tcDisplay)], "%02X", tucMac[i]);
   1960c:	f107 0394 	add.w	r3, r7, #148	; 0x94
   19610:	4618      	mov	r0, r3
   19612:	f7ef eb38 	blx	8c84 <_init+0x124>
   19616:	4603      	mov	r3, r0
   19618:	f107 0294 	add.w	r2, r7, #148	; 0x94
   1961c:	18d2      	adds	r2, r2, r3
   1961e:	f107 0174 	add.w	r1, r7, #116	; 0x74
   19622:	693b      	ldr	r3, [r7, #16]
   19624:	18cb      	adds	r3, r1, r3
   19626:	781b      	ldrb	r3, [r3, #0]
   19628:	4610      	mov	r0, r2
   1962a:	f645 71f8 	movw	r1, #24568	; 0x5ff8
   1962e:	f2c0 0102 	movt	r1, #2
   19632:	461a      	mov	r2, r3
   19634:	f7ef eb3e 	blx	8cb4 <_init+0x154>
	// ***********
	iRet = GoalDspLine(hScreen, 0, "M.A.C Result", &txResult[0], 0, false);
	CHECK(iRet>=0, lblKO);

	memset(tcDisplay, 0, sizeof(tcDisplay));
	for (i=0; i<8; i++)
   19638:	693b      	ldr	r3, [r7, #16]
   1963a:	3301      	adds	r3, #1
   1963c:	613b      	str	r3, [r7, #16]
   1963e:	693b      	ldr	r3, [r7, #16]
   19640:	2b07      	cmp	r3, #7
   19642:	dde3      	ble.n	1960c <MacCalculation+0x148>
		sprintf(&tcDisplay[strlen(tcDisplay)], "%02X", tucMac[i]);

	iRet = GoalDspLine(hScreen, 1, tcDisplay, &txResult[1], 0, true); // Show MAC
   19644:	68ba      	ldr	r2, [r7, #8]
   19646:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1964a:	2100      	movs	r1, #0
   1964c:	9100      	str	r1, [sp, #0]
   1964e:	2101      	movs	r1, #1
   19650:	9101      	str	r1, [sp, #4]
   19652:	4610      	mov	r0, r2
   19654:	2101      	movs	r1, #1
   19656:	461a      	mov	r2, r3
   19658:	4ba7      	ldr	r3, [pc, #668]	; (198f8 <MacCalculation+0x434>)
   1965a:	f7f3 ffcb 	bl	d5f4 <GoalDspLine>
   1965e:	6178      	str	r0, [r7, #20]
	CHECK(iRet>=0, lblKO);
   19660:	697b      	ldr	r3, [r7, #20]
   19662:	2b00      	cmp	r3, #0
   19664:	f2c0 8114 	blt.w	19890 <MacCalculation+0x3cc>

	// Print Mac
	// *********
	p=0;
   19668:	2300      	movs	r3, #0
   1966a:	71fb      	strb	r3, [r7, #7]
	hDocument = GoalCreateDocument(gGoalGraphicLibInstance, GL_ENCODING_UTF8);          // Create document
   1966c:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   19670:	f2c0 0302 	movt	r3, #2
   19674:	681b      	ldr	r3, [r3, #0]
   19676:	4618      	mov	r0, r3
   19678:	2100      	movs	r1, #0
   1967a:	f7f5 fc07 	bl	ee8c <GoalCreateDocument>
   1967e:	4603      	mov	r3, r0
   19680:	60fb      	str	r3, [r7, #12]
	CHECK(hDocument!=NULL, lblKO);
   19682:	68fb      	ldr	r3, [r7, #12]
   19684:	2b00      	cmp	r3, #0
   19686:	f000 8103 	beq.w	19890 <MacCalculation+0x3cc>

	xLine = xPrinter;                                                 // Build document (Demo, data message, Mac key, Mac result)
   1968a:	f645 13f0 	movw	r3, #23024	; 0x59f0
   1968e:	f2c0 0302 	movt	r3, #2
   19692:	f107 0124 	add.w	r1, r7, #36	; 0x24
   19696:	461a      	mov	r2, r3
   19698:	2350      	movs	r3, #80	; 0x50
   1969a:	4608      	mov	r0, r1
   1969c:	4611      	mov	r1, r2
   1969e:	461a      	mov	r2, r3
   196a0:	f7ef eaea 	blx	8c78 <_init+0x118>
	xLine.eTextAlign = GL_ALIGN_CENTER;
   196a4:	2300      	movs	r3, #0
   196a6:	627b      	str	r3, [r7, #36]	; 0x24
	xLine.bReverse = TRUE;
   196a8:	2301      	movs	r3, #1
   196aa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	xLine.xMargin.usBottom = PIXEL_BOTTOM;
   196ae:	2328      	movs	r3, #40	; 0x28
   196b0:	667b      	str	r3, [r7, #100]	; 0x64
	xLine.xFont.eScale = GL_SCALE_XXLARGE;
   196b2:	f643 73f6 	movw	r3, #16374	; 0x3ff6
   196b6:	673b      	str	r3, [r7, #112]	; 0x70
	iRet = GoalPrnLine(hDocument, p++, "MAC Demo", &xLine);
   196b8:	68f9      	ldr	r1, [r7, #12]
   196ba:	79fb      	ldrb	r3, [r7, #7]
   196bc:	b29a      	uxth	r2, r3
   196be:	79fb      	ldrb	r3, [r7, #7]
   196c0:	3301      	adds	r3, #1
   196c2:	71fb      	strb	r3, [r7, #7]
   196c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
   196c8:	4608      	mov	r0, r1
   196ca:	4611      	mov	r1, r2
   196cc:	f246 028c 	movw	r2, #24716	; 0x608c
   196d0:	f2c0 0202 	movt	r2, #2
   196d4:	f7f5 fc16 	bl	ef04 <GoalPrnLine>
   196d8:	6178      	str	r0, [r7, #20]
	CHECK(iRet>=0, lblKO);
   196da:	697b      	ldr	r3, [r7, #20]
   196dc:	2b00      	cmp	r3, #0
   196de:	f2c0 80d7 	blt.w	19890 <MacCalculation+0x3cc>

	xLine = xPrinter;
   196e2:	f645 13f0 	movw	r3, #23024	; 0x59f0
   196e6:	f2c0 0302 	movt	r3, #2
   196ea:	f107 0124 	add.w	r1, r7, #36	; 0x24
   196ee:	461a      	mov	r2, r3
   196f0:	2350      	movs	r3, #80	; 0x50
   196f2:	4608      	mov	r0, r1
   196f4:	4611      	mov	r1, r2
   196f6:	461a      	mov	r2, r3
   196f8:	f7ef eabe 	blx	8c78 <_init+0x118>
	iRet = GoalPrnLine(hDocument, p++, "Data message:\n"              // Data message to print
   196fc:	68f9      	ldr	r1, [r7, #12]
   196fe:	79fb      	ldrb	r3, [r7, #7]
   19700:	b29a      	uxth	r2, r3
   19702:	79fb      	ldrb	r3, [r7, #7]
   19704:	3301      	adds	r3, #1
   19706:	71fb      	strb	r3, [r7, #7]
			"11 11 11 11 11 11 11 11\n"
			"22 22 22 22 22 22 22 22\n"
			"33 33 33 33 33 33 33 33", &xLine);
   19708:	f107 0324 	add.w	r3, r7, #36	; 0x24
	xLine.xFont.eScale = GL_SCALE_XXLARGE;
	iRet = GoalPrnLine(hDocument, p++, "MAC Demo", &xLine);
	CHECK(iRet>=0, lblKO);

	xLine = xPrinter;
	iRet = GoalPrnLine(hDocument, p++, "Data message:\n"              // Data message to print
   1970c:	4608      	mov	r0, r1
   1970e:	4611      	mov	r1, r2
   19710:	f246 0298 	movw	r2, #24728	; 0x6098
   19714:	f2c0 0202 	movt	r2, #2
   19718:	f7f5 fbf4 	bl	ef04 <GoalPrnLine>
   1971c:	6178      	str	r0, [r7, #20]
			"11 11 11 11 11 11 11 11\n"
			"22 22 22 22 22 22 22 22\n"
			"33 33 33 33 33 33 33 33", &xLine);
	CHECK(iRet>=0, lblKO);
   1971e:	697b      	ldr	r3, [r7, #20]
   19720:	2b00      	cmp	r3, #0
   19722:	f2c0 80b5 	blt.w	19890 <MacCalculation+0x3cc>
	iRet = GoalPrnLine(hDocument, p++, "MAC Key Checksum Value:\n"    // MAC KCV to print
   19726:	68f9      	ldr	r1, [r7, #12]
   19728:	79fb      	ldrb	r3, [r7, #7]
   1972a:	b29a      	uxth	r2, r3
   1972c:	79fb      	ldrb	r3, [r7, #7]
   1972e:	3301      	adds	r3, #1
   19730:	71fb      	strb	r3, [r7, #7]
			"04 6C 4B", &xLine);
   19732:	f107 0324 	add.w	r3, r7, #36	; 0x24
	iRet = GoalPrnLine(hDocument, p++, "Data message:\n"              // Data message to print
			"11 11 11 11 11 11 11 11\n"
			"22 22 22 22 22 22 22 22\n"
			"33 33 33 33 33 33 33 33", &xLine);
	CHECK(iRet>=0, lblKO);
	iRet = GoalPrnLine(hDocument, p++, "MAC Key Checksum Value:\n"    // MAC KCV to print
   19736:	4608      	mov	r0, r1
   19738:	4611      	mov	r1, r2
   1973a:	f246 02f0 	movw	r2, #24816	; 0x60f0
   1973e:	f2c0 0202 	movt	r2, #2
   19742:	f7f5 fbdf 	bl	ef04 <GoalPrnLine>
   19746:	6178      	str	r0, [r7, #20]
			"04 6C 4B", &xLine);
	CHECK(iRet>=0, lblKO);
   19748:	697b      	ldr	r3, [r7, #20]
   1974a:	2b00      	cmp	r3, #0
   1974c:	f2c0 80a0 	blt.w	19890 <MacCalculation+0x3cc>
	iRet = GoalPrnLine(hDocument, p++, "MAC calculation:", &xLine);
   19750:	68f9      	ldr	r1, [r7, #12]
   19752:	79fb      	ldrb	r3, [r7, #7]
   19754:	b29a      	uxth	r2, r3
   19756:	79fb      	ldrb	r3, [r7, #7]
   19758:	3301      	adds	r3, #1
   1975a:	71fb      	strb	r3, [r7, #7]
   1975c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   19760:	4608      	mov	r0, r1
   19762:	4611      	mov	r1, r2
   19764:	f246 1214 	movw	r2, #24852	; 0x6114
   19768:	f2c0 0202 	movt	r2, #2
   1976c:	f7f5 fbca 	bl	ef04 <GoalPrnLine>
   19770:	6178      	str	r0, [r7, #20]
	CHECK(iRet>=0, lblKO);
   19772:	697b      	ldr	r3, [r7, #20]
   19774:	2b00      	cmp	r3, #0
   19776:	f2c0 808b 	blt.w	19890 <MacCalculation+0x3cc>
	memset(tcPrint, 0, sizeof(tcPrint));
   1977a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   1977e:	4618      	mov	r0, r3
   19780:	2100      	movs	r1, #0
   19782:	2233      	movs	r2, #51	; 0x33
   19784:	f7ef ea1a 	blx	8bbc <_init+0x5c>
	for (i=0; i<8; i++)
   19788:	2300      	movs	r3, #0
   1978a:	613b      	str	r3, [r7, #16]
   1978c:	e018      	b.n	197c0 <MacCalculation+0x2fc>
		sprintf (&tcPrint[strlen(tcPrint)], "%02X ", tucMac[i]);
   1978e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   19792:	4618      	mov	r0, r3
   19794:	f7ef ea76 	blx	8c84 <_init+0x124>
   19798:	4603      	mov	r3, r0
   1979a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   1979e:	18d2      	adds	r2, r2, r3
   197a0:	f107 0174 	add.w	r1, r7, #116	; 0x74
   197a4:	693b      	ldr	r3, [r7, #16]
   197a6:	18cb      	adds	r3, r1, r3
   197a8:	781b      	ldrb	r3, [r3, #0]
   197aa:	4610      	mov	r0, r2
   197ac:	f246 0164 	movw	r1, #24676	; 0x6064
   197b0:	f2c0 0102 	movt	r1, #2
   197b4:	461a      	mov	r2, r3
   197b6:	f7ef ea7e 	blx	8cb4 <_init+0x154>
			"04 6C 4B", &xLine);
	CHECK(iRet>=0, lblKO);
	iRet = GoalPrnLine(hDocument, p++, "MAC calculation:", &xLine);
	CHECK(iRet>=0, lblKO);
	memset(tcPrint, 0, sizeof(tcPrint));
	for (i=0; i<8; i++)
   197ba:	693b      	ldr	r3, [r7, #16]
   197bc:	3301      	adds	r3, #1
   197be:	613b      	str	r3, [r7, #16]
   197c0:	693b      	ldr	r3, [r7, #16]
   197c2:	2b07      	cmp	r3, #7
   197c4:	dde3      	ble.n	1978e <MacCalculation+0x2ca>
		sprintf (&tcPrint[strlen(tcPrint)], "%02X ", tucMac[i]);
	iRet = GoalPrnLine(hDocument, p++, tcPrint, &xLine);              // MAC calculation to print
   197c6:	68f8      	ldr	r0, [r7, #12]
   197c8:	79fb      	ldrb	r3, [r7, #7]
   197ca:	b299      	uxth	r1, r3
   197cc:	79fb      	ldrb	r3, [r7, #7]
   197ce:	3301      	adds	r3, #1
   197d0:	71fb      	strb	r3, [r7, #7]
   197d2:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   197d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
   197da:	f7f5 fb93 	bl	ef04 <GoalPrnLine>
   197de:	6178      	str	r0, [r7, #20]
	CHECK(iRet>=0, lblKO);
   197e0:	697b      	ldr	r3, [r7, #20]
   197e2:	2b00      	cmp	r3, #0
   197e4:	db54      	blt.n	19890 <MacCalculation+0x3cc>
	iRet = GoalPrnLine(hDocument, p++, "\n\n\n\n", &xLine);
   197e6:	68f9      	ldr	r1, [r7, #12]
   197e8:	79fb      	ldrb	r3, [r7, #7]
   197ea:	b29a      	uxth	r2, r3
   197ec:	79fb      	ldrb	r3, [r7, #7]
   197ee:	3301      	adds	r3, #1
   197f0:	71fb      	strb	r3, [r7, #7]
   197f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
   197f6:	4608      	mov	r0, r1
   197f8:	4611      	mov	r1, r2
   197fa:	f645 62cc 	movw	r2, #24268	; 0x5ecc
   197fe:	f2c0 0202 	movt	r2, #2
   19802:	f7f5 fb7f 	bl	ef04 <GoalPrnLine>
   19806:	6178      	str	r0, [r7, #20]
	CHECK(iRet>=0, lblKO);
   19808:	697b      	ldr	r3, [r7, #20]
   1980a:	2b00      	cmp	r3, #0
   1980c:	db40      	blt.n	19890 <MacCalculation+0x3cc>

	iRet = GoalPrnDocument(hDocument);                                // Print document
   1980e:	68fb      	ldr	r3, [r7, #12]
   19810:	4618      	mov	r0, r3
   19812:	f7f5 fd89 	bl	f328 <GoalPrnDocument>
   19816:	6178      	str	r0, [r7, #20]
	CHECK(iRet>=0, lblKO);
   19818:	697b      	ldr	r3, [r7, #20]
   1981a:	2b00      	cmp	r3, #0
   1981c:	db38      	blt.n	19890 <MacCalculation+0x3cc>

	GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 30*1000, true);                  // Wait for key pressed/touched (shortcut)
   1981e:	68ba      	ldr	r2, [r7, #8]
   19820:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   19824:	f2c0 0302 	movt	r3, #2
   19828:	681b      	ldr	r3, [r3, #0]
   1982a:	2101      	movs	r1, #1
   1982c:	9100      	str	r1, [sp, #0]
   1982e:	4610      	mov	r0, r2
   19830:	4619      	mov	r1, r3
   19832:	2201      	movs	r2, #1
   19834:	f247 5330 	movw	r3, #30000	; 0x7530
   19838:	f7f4 fa12 	bl	dc60 <GoalGetKey>

	goto lblEnd;
   1983c:	e03c      	b.n	198b8 <MacCalculation+0x3f4>

	// Errors treatment
	// ****************
	lblNoSecDll:                                                          // Security DLL missing
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Missing Sec DLL", GL_ICON_WARNING, GL_BUTTON_VALID, 3*1000);
   1983e:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   19842:	f2c0 0302 	movt	r3, #2
   19846:	681b      	ldr	r3, [r3, #0]
   19848:	2201      	movs	r2, #1
   1984a:	9200      	str	r2, [sp, #0]
   1984c:	f640 32b8 	movw	r2, #3000	; 0xbb8
   19850:	9201      	str	r2, [sp, #4]
   19852:	4618      	mov	r0, r3
   19854:	2100      	movs	r1, #0
   19856:	f645 42f8 	movw	r2, #23800	; 0x5cf8
   1985a:	f2c0 0202 	movt	r2, #2
   1985e:	2303      	movs	r3, #3
   19860:	f007 fe60 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
   19864:	e028      	b.n	198b8 <MacCalculation+0x3f4>
	lblSecKO:                                                             // Security DLL error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, SEC_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   19866:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   1986a:	f2c0 0302 	movt	r3, #2
   1986e:	681c      	ldr	r4, [r3, #0]
   19870:	6978      	ldr	r0, [r7, #20]
   19872:	f7f7 f92b 	bl	10acc <SEC_ErrorMsg>
   19876:	4603      	mov	r3, r0
   19878:	2201      	movs	r2, #1
   1987a:	9200      	str	r2, [sp, #0]
   1987c:	f241 3288 	movw	r2, #5000	; 0x1388
   19880:	9201      	str	r2, [sp, #4]
   19882:	4620      	mov	r0, r4
   19884:	2100      	movs	r1, #0
   19886:	461a      	mov	r2, r3
   19888:	2304      	movs	r3, #4
   1988a:	f007 fe4b 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
   1988e:	e013      	b.n	198b8 <MacCalculation+0x3f4>
	lblKO:                                                                // None-classified low level error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Processing Error", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   19890:	f64f 63d8 	movw	r3, #65240	; 0xfed8
   19894:	f2c0 0302 	movt	r3, #2
   19898:	681b      	ldr	r3, [r3, #0]
   1989a:	2201      	movs	r2, #1
   1989c:	9200      	str	r2, [sp, #0]
   1989e:	f241 3288 	movw	r2, #5000	; 0x1388
   198a2:	9201      	str	r2, [sp, #4]
   198a4:	4618      	mov	r0, r3
   198a6:	2100      	movs	r1, #0
   198a8:	f645 521c 	movw	r2, #23836	; 0x5d1c
   198ac:	f2c0 0202 	movt	r2, #2
   198b0:	2304      	movs	r3, #4
   198b2:	f007 fe37 	bl	21524 <GL_Dialog_Message>
	goto lblEnd;
   198b6:	bf00      	nop
	lblEnd:
	if (hScreen)
   198b8:	68bb      	ldr	r3, [r7, #8]
   198ba:	2b00      	cmp	r3, #0
   198bc:	d004      	beq.n	198c8 <MacCalculation+0x404>
		GoalDestroyScreen(&hScreen);                                  // Destroy screen
   198be:	f107 0308 	add.w	r3, r7, #8
   198c2:	4618      	mov	r0, r3
   198c4:	f7f4 fb2e 	bl	df24 <GoalDestroyScreen>

	if (hDocument)
   198c8:	68fb      	ldr	r3, [r7, #12]
   198ca:	2b00      	cmp	r3, #0
   198cc:	d004      	beq.n	198d8 <MacCalculation+0x414>
		GoalDestroyDocument(&hDocument);                              // Destroy document
   198ce:	f107 030c 	add.w	r3, r7, #12
   198d2:	4618      	mov	r0, r3
   198d4:	f7f5 fd54 	bl	f380 <GoalDestroyDocument>
}
   198d8:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   198dc:	f2c0 0302 	movt	r3, #2
   198e0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
   198e4:	681b      	ldr	r3, [r3, #0]
   198e6:	429a      	cmp	r2, r3
   198e8:	d001      	beq.n	198ee <MacCalculation+0x42a>
   198ea:	f7ef fb5b 	bl	8fa4 <__stack_chk_fail>
   198ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
   198f2:	46bd      	mov	sp, r7
   198f4:	bdb0      	pop	{r4, r5, r7, pc}
   198f6:	bf00      	nop
   198f8:	00025944 	.word	0x00025944

000198fc <LoadKeysAuto>:



void LoadKeysAuto(void){
   198fc:	b580      	push	{r7, lr}
   198fe:	b082      	sub	sp, #8
   19900:	af00      	add	r7, sp, #0
   19902:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   19906:	f2c0 0302 	movt	r3, #2
   1990a:	681b      	ldr	r3, [r3, #0]
   1990c:	607b      	str	r3, [r7, #4]
	GetConfig();
   1990e:	f7fe fc23 	bl	18158 <GetConfig>
	SetConfig();
   19912:	f7fe fabb 	bl	17e8c <SetConfig>
	FreeSecret();
   19916:	f7ff f9e1 	bl	18cdc <FreeSecret>
	CreateSecret();
   1991a:	f7ff f939 	bl	18b90 <CreateSecret>
	LoadIso9564Key();
   1991e:	f7ff fa2d 	bl	18d7c <LoadIso9564Key>
	LoadMacKey();
   19922:	f7ff fad7 	bl	18ed4 <LoadMacKey>

}
   19926:	f64f 63d0 	movw	r3, #65232	; 0xfed0
   1992a:	f2c0 0302 	movt	r3, #2
   1992e:	687a      	ldr	r2, [r7, #4]
   19930:	681b      	ldr	r3, [r3, #0]
   19932:	429a      	cmp	r2, r3
   19934:	d001      	beq.n	1993a <LoadKeysAuto+0x3e>
   19936:	f7ef fb35 	bl	8fa4 <__stack_chk_fail>
   1993a:	f107 0708 	add.w	r7, r7, #8
   1993e:	46bd      	mov	sp, r7
   19940:	bd80      	pop	{r7, pc}
   19942:	bf00      	nop

00019944 <CreateOrMountDisk>:
   19944:	b590      	push	{r4, r7, lr}
   19946:	b091      	sub	sp, #68	; 0x44
   19948:	af00      	add	r7, sp, #0
   1994a:	60f8      	str	r0, [r7, #12]
   1994c:	60b9      	str	r1, [r7, #8]
   1994e:	607a      	str	r2, [r7, #4]
   19950:	4c1d      	ldr	r4, [pc, #116]	; (199c8 <CreateOrMountDisk+0x84>)
   19952:	447c      	add	r4, pc
   19954:	4b1d      	ldr	r3, [pc, #116]	; (199cc <CreateOrMountDisk+0x88>)
   19956:	58e3      	ldr	r3, [r4, r3]
   19958:	681b      	ldr	r3, [r3, #0]
   1995a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1995c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   19960:	62fb      	str	r3, [r7, #44]	; 0x2c
   19962:	2301      	movs	r3, #1
   19964:	63bb      	str	r3, [r7, #56]	; 0x38
   19966:	f107 031c 	add.w	r3, r7, #28
   1996a:	4618      	mov	r0, r3
   1996c:	68f9      	ldr	r1, [r7, #12]
   1996e:	f7ef e958 	blx	8c20 <_init+0xc0>
   19972:	2304      	movs	r3, #4
   19974:	633b      	str	r3, [r7, #48]	; 0x30
   19976:	687b      	ldr	r3, [r7, #4]
   19978:	637b      	str	r3, [r7, #52]	; 0x34
   1997a:	68bb      	ldr	r3, [r7, #8]
   1997c:	617b      	str	r3, [r7, #20]
   1997e:	f107 031c 	add.w	r3, r7, #28
   19982:	3310      	adds	r3, #16
   19984:	68f8      	ldr	r0, [r7, #12]
   19986:	4619      	mov	r1, r3
   19988:	f006 ff92 	bl	208b0 <FS_mount>
   1998c:	61b8      	str	r0, [r7, #24]
   1998e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   19992:	62fb      	str	r3, [r7, #44]	; 0x2c
   19994:	69bb      	ldr	r3, [r7, #24]
   19996:	2b02      	cmp	r3, #2
   19998:	d008      	beq.n	199ac <CreateOrMountDisk+0x68>
   1999a:	f107 021c 	add.w	r2, r7, #28
   1999e:	f107 0314 	add.w	r3, r7, #20
   199a2:	4610      	mov	r0, r2
   199a4:	4619      	mov	r1, r3
   199a6:	f006 feff 	bl	207a8 <FS_dskcreate>
   199aa:	61b8      	str	r0, [r7, #24]
   199ac:	69bb      	ldr	r3, [r7, #24]
   199ae:	4618      	mov	r0, r3
   199b0:	4b06      	ldr	r3, [pc, #24]	; (199cc <CreateOrMountDisk+0x88>)
   199b2:	58e3      	ldr	r3, [r4, r3]
   199b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   199b6:	681b      	ldr	r3, [r3, #0]
   199b8:	429a      	cmp	r2, r3
   199ba:	d001      	beq.n	199c0 <CreateOrMountDisk+0x7c>
   199bc:	f7ef faf2 	bl	8fa4 <__stack_chk_fail>
   199c0:	f107 0744 	add.w	r7, r7, #68	; 0x44
   199c4:	46bd      	mov	sp, r7
   199c6:	bd90      	pop	{r4, r7, pc}
   199c8:	000157c2 	.word	0x000157c2
   199cc:	000000ac 	.word	0x000000ac

000199d0 <SaveMangementFile>:
   199d0:	b590      	push	{r4, r7, lr}
   199d2:	b08d      	sub	sp, #52	; 0x34
   199d4:	af00      	add	r7, sp, #0
   199d6:	4c28      	ldr	r4, [pc, #160]	; (19a78 <SaveMangementFile+0xa8>)
   199d8:	447c      	add	r4, pc
   199da:	4b28      	ldr	r3, [pc, #160]	; (19a7c <SaveMangementFile+0xac>)
   199dc:	58e3      	ldr	r3, [r4, r3]
   199de:	681b      	ldr	r3, [r3, #0]
   199e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   199e2:	2300      	movs	r3, #0
   199e4:	603b      	str	r3, [r7, #0]
   199e6:	f107 0308 	add.w	r3, r7, #8
   199ea:	4618      	mov	r0, r3
   199ec:	4b24      	ldr	r3, [pc, #144]	; (19a80 <SaveMangementFile+0xb0>)
   199ee:	447b      	add	r3, pc
   199f0:	4619      	mov	r1, r3
   199f2:	4b24      	ldr	r3, [pc, #144]	; (19a84 <SaveMangementFile+0xb4>)
   199f4:	447b      	add	r3, pc
   199f6:	461a      	mov	r2, r3
   199f8:	4b23      	ldr	r3, [pc, #140]	; (19a88 <SaveMangementFile+0xb8>)
   199fa:	447b      	add	r3, pc
   199fc:	f7ef e95a 	blx	8cb4 <_init+0x154>
   19a00:	f107 0308 	add.w	r3, r7, #8
   19a04:	4618      	mov	r0, r3
   19a06:	f006 fefb 	bl	20800 <FS_exist>
   19a0a:	6078      	str	r0, [r7, #4]
   19a0c:	687b      	ldr	r3, [r7, #4]
   19a0e:	2b02      	cmp	r3, #2
   19a10:	d105      	bne.n	19a1e <SaveMangementFile+0x4e>
   19a12:	f107 0308 	add.w	r3, r7, #8
   19a16:	4618      	mov	r0, r3
   19a18:	f007 f81e 	bl	20a58 <FS_unlink>
   19a1c:	6078      	str	r0, [r7, #4]
   19a1e:	f107 0308 	add.w	r3, r7, #8
   19a22:	4618      	mov	r0, r3
   19a24:	4b19      	ldr	r3, [pc, #100]	; (19a8c <SaveMangementFile+0xbc>)
   19a26:	447b      	add	r3, pc
   19a28:	4619      	mov	r1, r3
   19a2a:	f006 ff6b 	bl	20904 <FS_open>
   19a2e:	6038      	str	r0, [r7, #0]
   19a30:	683b      	ldr	r3, [r7, #0]
   19a32:	2b00      	cmp	r3, #0
   19a34:	d101      	bne.n	19a3a <SaveMangementFile+0x6a>
   19a36:	2313      	movs	r3, #19
   19a38:	e010      	b.n	19a5c <SaveMangementFile+0x8c>
   19a3a:	4b15      	ldr	r3, [pc, #84]	; (19a90 <SaveMangementFile+0xc0>)
   19a3c:	58e3      	ldr	r3, [r4, r3]
   19a3e:	4618      	mov	r0, r3
   19a40:	f241 1134 	movw	r1, #4404	; 0x1134
   19a44:	2201      	movs	r2, #1
   19a46:	683b      	ldr	r3, [r7, #0]
   19a48:	f007 f85e 	bl	20b08 <FS_write>
   19a4c:	6078      	str	r0, [r7, #4]
   19a4e:	6838      	ldr	r0, [r7, #0]
   19a50:	f006 fe7c 	bl	2074c <FS_close>
   19a54:	6078      	str	r0, [r7, #4]
   19a56:	2300      	movs	r3, #0
   19a58:	603b      	str	r3, [r7, #0]
   19a5a:	230a      	movs	r3, #10
   19a5c:	4618      	mov	r0, r3
   19a5e:	4b07      	ldr	r3, [pc, #28]	; (19a7c <SaveMangementFile+0xac>)
   19a60:	58e3      	ldr	r3, [r4, r3]
   19a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   19a64:	681b      	ldr	r3, [r3, #0]
   19a66:	429a      	cmp	r2, r3
   19a68:	d001      	beq.n	19a6e <SaveMangementFile+0x9e>
   19a6a:	f7ef fa9b 	bl	8fa4 <__stack_chk_fail>
   19a6e:	f107 0734 	add.w	r7, r7, #52	; 0x34
   19a72:	46bd      	mov	sp, r7
   19a74:	bd90      	pop	{r4, r7, pc}
   19a76:	bf00      	nop
   19a78:	0001573c 	.word	0x0001573c
   19a7c:	000000ac 	.word	0x000000ac
   19a80:	0000c766 	.word	0x0000c766
   19a84:	000165d8 	.word	0x000165d8
   19a88:	0000c762 	.word	0x0000c762
   19a8c:	0000c742 	.word	0x0000c742
   19a90:	000000c0 	.word	0x000000c0

00019a94 <ExtraireFileID>:
   19a94:	b590      	push	{r4, r7, lr}
   19a96:	b087      	sub	sp, #28
   19a98:	af00      	add	r7, sp, #0
   19a9a:	6078      	str	r0, [r7, #4]
   19a9c:	6039      	str	r1, [r7, #0]
   19a9e:	4c25      	ldr	r4, [pc, #148]	; (19b34 <ExtraireFileID+0xa0>)
   19aa0:	447c      	add	r4, pc
   19aa2:	4b25      	ldr	r3, [pc, #148]	; (19b38 <ExtraireFileID+0xa4>)
   19aa4:	58e3      	ldr	r3, [r4, r3]
   19aa6:	681b      	ldr	r3, [r3, #0]
   19aa8:	617b      	str	r3, [r7, #20]
   19aaa:	2300      	movs	r3, #0
   19aac:	613b      	str	r3, [r7, #16]
   19aae:	2300      	movs	r3, #0
   19ab0:	73fb      	strb	r3, [r7, #15]
   19ab2:	e025      	b.n	19b00 <ExtraireFileID+0x6c>
   19ab4:	693b      	ldr	r3, [r7, #16]
   19ab6:	222c      	movs	r2, #44	; 0x2c
   19ab8:	fb02 f203 	mul.w	r2, r2, r3
   19abc:	4b1f      	ldr	r3, [pc, #124]	; (19b3c <ExtraireFileID+0xa8>)
   19abe:	58e3      	ldr	r3, [r4, r3]
   19ac0:	18d3      	adds	r3, r2, r3
   19ac2:	3304      	adds	r3, #4
   19ac4:	4618      	mov	r0, r3
   19ac6:	6879      	ldr	r1, [r7, #4]
   19ac8:	f7ef e908 	blx	8cdc <_init+0x17c>
   19acc:	4603      	mov	r3, r0
   19ace:	2b00      	cmp	r3, #0
   19ad0:	d113      	bne.n	19afa <ExtraireFileID+0x66>
   19ad2:	693b      	ldr	r3, [r7, #16]
   19ad4:	222c      	movs	r2, #44	; 0x2c
   19ad6:	fb02 f303 	mul.w	r3, r2, r3
   19ada:	f103 0210 	add.w	r2, r3, #16
   19ade:	4b17      	ldr	r3, [pc, #92]	; (19b3c <ExtraireFileID+0xa8>)
   19ae0:	58e3      	ldr	r3, [r4, r3]
   19ae2:	18d3      	adds	r3, r2, r3
   19ae4:	3305      	adds	r3, #5
   19ae6:	4618      	mov	r0, r3
   19ae8:	6839      	ldr	r1, [r7, #0]
   19aea:	f7ef e8f8 	blx	8cdc <_init+0x17c>
   19aee:	4603      	mov	r3, r0
   19af0:	2b00      	cmp	r3, #0
   19af2:	d102      	bne.n	19afa <ExtraireFileID+0x66>
   19af4:	2301      	movs	r3, #1
   19af6:	73fb      	strb	r3, [r7, #15]
   19af8:	e002      	b.n	19b00 <ExtraireFileID+0x6c>
   19afa:	693b      	ldr	r3, [r7, #16]
   19afc:	3301      	adds	r3, #1
   19afe:	613b      	str	r3, [r7, #16]
   19b00:	7bfb      	ldrb	r3, [r7, #15]
   19b02:	2b00      	cmp	r3, #0
   19b04:	d102      	bne.n	19b0c <ExtraireFileID+0x78>
   19b06:	693b      	ldr	r3, [r7, #16]
   19b08:	2b63      	cmp	r3, #99	; 0x63
   19b0a:	ddd3      	ble.n	19ab4 <ExtraireFileID+0x20>
   19b0c:	7bfb      	ldrb	r3, [r7, #15]
   19b0e:	2b01      	cmp	r3, #1
   19b10:	d101      	bne.n	19b16 <ExtraireFileID+0x82>
   19b12:	693b      	ldr	r3, [r7, #16]
   19b14:	e001      	b.n	19b1a <ExtraireFileID+0x86>
   19b16:	f04f 33ff 	mov.w	r3, #4294967295
   19b1a:	4618      	mov	r0, r3
   19b1c:	4b06      	ldr	r3, [pc, #24]	; (19b38 <ExtraireFileID+0xa4>)
   19b1e:	58e3      	ldr	r3, [r4, r3]
   19b20:	697a      	ldr	r2, [r7, #20]
   19b22:	681b      	ldr	r3, [r3, #0]
   19b24:	429a      	cmp	r2, r3
   19b26:	d001      	beq.n	19b2c <ExtraireFileID+0x98>
   19b28:	f7ef fa3c 	bl	8fa4 <__stack_chk_fail>
   19b2c:	f107 071c 	add.w	r7, r7, #28
   19b30:	46bd      	mov	sp, r7
   19b32:	bd90      	pop	{r4, r7, pc}
   19b34:	00015674 	.word	0x00015674
   19b38:	000000ac 	.word	0x000000ac
   19b3c:	000000c0 	.word	0x000000c0

00019b40 <DeleteFileFromTable>:
   19b40:	b590      	push	{r4, r7, lr}
   19b42:	b085      	sub	sp, #20
   19b44:	af00      	add	r7, sp, #0
   19b46:	6078      	str	r0, [r7, #4]
   19b48:	4c21      	ldr	r4, [pc, #132]	; (19bd0 <DeleteFileFromTable+0x90>)
   19b4a:	447c      	add	r4, pc
   19b4c:	4b21      	ldr	r3, [pc, #132]	; (19bd4 <DeleteFileFromTable+0x94>)
   19b4e:	58e3      	ldr	r3, [r4, r3]
   19b50:	681b      	ldr	r3, [r3, #0]
   19b52:	60fb      	str	r3, [r7, #12]
   19b54:	687b      	ldr	r3, [r7, #4]
   19b56:	60bb      	str	r3, [r7, #8]
   19b58:	e018      	b.n	19b8c <DeleteFileFromTable+0x4c>
   19b5a:	68bb      	ldr	r3, [r7, #8]
   19b5c:	222c      	movs	r2, #44	; 0x2c
   19b5e:	fb02 f203 	mul.w	r2, r2, r3
   19b62:	4b1d      	ldr	r3, [pc, #116]	; (19bd8 <DeleteFileFromTable+0x98>)
   19b64:	58e3      	ldr	r3, [r4, r3]
   19b66:	18d3      	adds	r3, r2, r3
   19b68:	1d1a      	adds	r2, r3, #4
   19b6a:	68bb      	ldr	r3, [r7, #8]
   19b6c:	3301      	adds	r3, #1
   19b6e:	212c      	movs	r1, #44	; 0x2c
   19b70:	fb01 f103 	mul.w	r1, r1, r3
   19b74:	4b18      	ldr	r3, [pc, #96]	; (19bd8 <DeleteFileFromTable+0x98>)
   19b76:	58e3      	ldr	r3, [r4, r3]
   19b78:	18cb      	adds	r3, r1, r3
   19b7a:	3304      	adds	r3, #4
   19b7c:	4610      	mov	r0, r2
   19b7e:	4619      	mov	r1, r3
   19b80:	222c      	movs	r2, #44	; 0x2c
   19b82:	f7ef e87a 	blx	8c78 <_init+0x118>
   19b86:	68bb      	ldr	r3, [r7, #8]
   19b88:	3301      	adds	r3, #1
   19b8a:	60bb      	str	r3, [r7, #8]
   19b8c:	4b12      	ldr	r3, [pc, #72]	; (19bd8 <DeleteFileFromTable+0x98>)
   19b8e:	58e3      	ldr	r3, [r4, r3]
   19b90:	681b      	ldr	r3, [r3, #0]
   19b92:	461a      	mov	r2, r3
   19b94:	68bb      	ldr	r3, [r7, #8]
   19b96:	429a      	cmp	r2, r3
   19b98:	dcdf      	bgt.n	19b5a <DeleteFileFromTable+0x1a>
   19b9a:	4b0f      	ldr	r3, [pc, #60]	; (19bd8 <DeleteFileFromTable+0x98>)
   19b9c:	58e3      	ldr	r3, [r4, r3]
   19b9e:	681b      	ldr	r3, [r3, #0]
   19ba0:	222c      	movs	r2, #44	; 0x2c
   19ba2:	fb02 f203 	mul.w	r2, r2, r3
   19ba6:	4b0c      	ldr	r3, [pc, #48]	; (19bd8 <DeleteFileFromTable+0x98>)
   19ba8:	58e3      	ldr	r3, [r4, r3]
   19baa:	18d3      	adds	r3, r2, r3
   19bac:	3304      	adds	r3, #4
   19bae:	4618      	mov	r0, r3
   19bb0:	2100      	movs	r1, #0
   19bb2:	222c      	movs	r2, #44	; 0x2c
   19bb4:	f7ef e802 	blx	8bbc <_init+0x5c>
   19bb8:	4b06      	ldr	r3, [pc, #24]	; (19bd4 <DeleteFileFromTable+0x94>)
   19bba:	58e3      	ldr	r3, [r4, r3]
   19bbc:	68fa      	ldr	r2, [r7, #12]
   19bbe:	681b      	ldr	r3, [r3, #0]
   19bc0:	429a      	cmp	r2, r3
   19bc2:	d001      	beq.n	19bc8 <DeleteFileFromTable+0x88>
   19bc4:	f7ef f9ee 	bl	8fa4 <__stack_chk_fail>
   19bc8:	f107 0714 	add.w	r7, r7, #20
   19bcc:	46bd      	mov	sp, r7
   19bce:	bd90      	pop	{r4, r7, pc}
   19bd0:	000155ca 	.word	0x000155ca
   19bd4:	000000ac 	.word	0x000000ac
   19bd8:	000000c0 	.word	0x000000c0

00019bdc <AddModifyRecordBegin>:
   19bdc:	b590      	push	{r4, r7, lr}
   19bde:	b0a3      	sub	sp, #140	; 0x8c
   19be0:	af00      	add	r7, sp, #0
   19be2:	6178      	str	r0, [r7, #20]
   19be4:	6139      	str	r1, [r7, #16]
   19be6:	60fa      	str	r2, [r7, #12]
   19be8:	60bb      	str	r3, [r7, #8]
   19bea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   19bee:	607b      	str	r3, [r7, #4]
   19bf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   19bf4:	603b      	str	r3, [r7, #0]
   19bf6:	4cb9      	ldr	r4, [pc, #740]	; (19edc <AddModifyRecordBegin+0x300>)
   19bf8:	447c      	add	r4, pc
   19bfa:	4bb9      	ldr	r3, [pc, #740]	; (19ee0 <AddModifyRecordBegin+0x304>)
   19bfc:	58e3      	ldr	r3, [r4, r3]
   19bfe:	681b      	ldr	r3, [r3, #0]
   19c00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   19c04:	2318      	movs	r3, #24
   19c06:	623b      	str	r3, [r7, #32]
   19c08:	2300      	movs	r3, #0
   19c0a:	633b      	str	r3, [r7, #48]	; 0x30
   19c0c:	2300      	movs	r3, #0
   19c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   19c10:	2300      	movs	r3, #0
   19c12:	62fb      	str	r3, [r7, #44]	; 0x2c
   19c14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   19c18:	4618      	mov	r0, r3
   19c1a:	4bb2      	ldr	r3, [pc, #712]	; (19ee4 <AddModifyRecordBegin+0x308>)
   19c1c:	447b      	add	r3, pc
   19c1e:	4619      	mov	r1, r3
   19c20:	697a      	ldr	r2, [r7, #20]
   19c22:	693b      	ldr	r3, [r7, #16]
   19c24:	f7ef e846 	blx	8cb4 <_init+0x154>
   19c28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   19c2c:	4618      	mov	r0, r3
   19c2e:	4bae      	ldr	r3, [pc, #696]	; (19ee8 <AddModifyRecordBegin+0x30c>)
   19c30:	447b      	add	r3, pc
   19c32:	4619      	mov	r1, r3
   19c34:	f006 fe66 	bl	20904 <FS_open>
   19c38:	62b8      	str	r0, [r7, #40]	; 0x28
   19c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19c3c:	2b00      	cmp	r3, #0
   19c3e:	d102      	bne.n	19c46 <AddModifyRecordBegin+0x6a>
   19c40:	2313      	movs	r3, #19
   19c42:	623b      	str	r3, [r7, #32]
   19c44:	e13a      	b.n	19ebc <AddModifyRecordBegin+0x2e0>
   19c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   19c48:	f006 fe06 	bl	20858 <FS_length>
   19c4c:	6378      	str	r0, [r7, #52]	; 0x34
   19c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19c50:	4618      	mov	r0, r3
   19c52:	f006 ffe3 	bl	20c1c <PageAlloc>
   19c56:	6338      	str	r0, [r7, #48]	; 0x30
   19c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19c5a:	2b00      	cmp	r3, #0
   19c5c:	f000 8121 	beq.w	19ea2 <AddModifyRecordBegin+0x2c6>
   19c60:	f107 0360 	add.w	r3, r7, #96	; 0x60
   19c64:	4618      	mov	r0, r3
   19c66:	4ba1      	ldr	r3, [pc, #644]	; (19eec <AddModifyRecordBegin+0x310>)
   19c68:	447b      	add	r3, pc
   19c6a:	4619      	mov	r1, r3
   19c6c:	697a      	ldr	r2, [r7, #20]
   19c6e:	4ba0      	ldr	r3, [pc, #640]	; (19ef0 <AddModifyRecordBegin+0x314>)
   19c70:	447b      	add	r3, pc
   19c72:	f7ef e820 	blx	8cb4 <_init+0x154>
   19c76:	f107 0360 	add.w	r3, r7, #96	; 0x60
   19c7a:	4618      	mov	r0, r3
   19c7c:	f006 fdc0 	bl	20800 <FS_exist>
   19c80:	63b8      	str	r0, [r7, #56]	; 0x38
   19c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19c84:	2b02      	cmp	r3, #2
   19c86:	d105      	bne.n	19c94 <AddModifyRecordBegin+0xb8>
   19c88:	f107 0360 	add.w	r3, r7, #96	; 0x60
   19c8c:	4618      	mov	r0, r3
   19c8e:	f006 fee3 	bl	20a58 <FS_unlink>
   19c92:	63b8      	str	r0, [r7, #56]	; 0x38
   19c94:	f107 0360 	add.w	r3, r7, #96	; 0x60
   19c98:	4618      	mov	r0, r3
   19c9a:	4b96      	ldr	r3, [pc, #600]	; (19ef4 <AddModifyRecordBegin+0x318>)
   19c9c:	447b      	add	r3, pc
   19c9e:	4619      	mov	r1, r3
   19ca0:	f006 fe30 	bl	20904 <FS_open>
   19ca4:	62f8      	str	r0, [r7, #44]	; 0x2c
   19ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   19ca8:	2100      	movs	r1, #0
   19caa:	2200      	movs	r2, #0
   19cac:	f006 feaa 	bl	20a04 <FS_seek>
   19cb0:	63b8      	str	r0, [r7, #56]	; 0x38
   19cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19cb4:	2b02      	cmp	r3, #2
   19cb6:	f040 80eb 	bne.w	19e90 <AddModifyRecordBegin+0x2b4>
   19cba:	6b38      	ldr	r0, [r7, #48]	; 0x30
   19cbc:	6b79      	ldr	r1, [r7, #52]	; 0x34
   19cbe:	2201      	movs	r2, #1
   19cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19cc2:	f006 fe49 	bl	20958 <FS_read>
   19cc6:	6278      	str	r0, [r7, #36]	; 0x24
   19cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19cca:	2b01      	cmp	r3, #1
   19ccc:	d007      	beq.n	19cde <AddModifyRecordBegin+0x102>
   19cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19cd0:	2b00      	cmp	r3, #0
   19cd2:	f040 80dd 	bne.w	19e90 <AddModifyRecordBegin+0x2b4>
   19cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19cd8:	2b00      	cmp	r3, #0
   19cda:	f040 80d9 	bne.w	19e90 <AddModifyRecordBegin+0x2b4>
   19cde:	4b86      	ldr	r3, [pc, #536]	; (19ef8 <AddModifyRecordBegin+0x31c>)
   19ce0:	58e3      	ldr	r3, [r4, r3]
   19ce2:	461a      	mov	r2, r3
   19ce4:	687b      	ldr	r3, [r7, #4]
   19ce6:	212c      	movs	r1, #44	; 0x2c
   19ce8:	fb01 f303 	mul.w	r3, r1, r3
   19cec:	18d3      	adds	r3, r2, r3
   19cee:	3328      	adds	r3, #40	; 0x28
   19cf0:	681b      	ldr	r3, [r3, #0]
   19cf2:	2b01      	cmp	r3, #1
   19cf4:	d173      	bne.n	19dde <AddModifyRecordBegin+0x202>
   19cf6:	683b      	ldr	r3, [r7, #0]
   19cf8:	2b01      	cmp	r3, #1
   19cfa:	d10a      	bne.n	19d12 <AddModifyRecordBegin+0x136>
   19cfc:	f107 0318 	add.w	r3, r7, #24
   19d00:	4618      	mov	r0, r3
   19d02:	6b39      	ldr	r1, [r7, #48]	; 0x30
   19d04:	2204      	movs	r2, #4
   19d06:	f7ee efb8 	blx	8c78 <_init+0x118>
   19d0a:	69bb      	ldr	r3, [r7, #24]
   19d0c:	3304      	adds	r3, #4
   19d0e:	61fb      	str	r3, [r7, #28]
   19d10:	e001      	b.n	19d16 <AddModifyRecordBegin+0x13a>
   19d12:	2300      	movs	r3, #0
   19d14:	61fb      	str	r3, [r7, #28]
   19d16:	68bb      	ldr	r3, [r7, #8]
   19d18:	2b00      	cmp	r3, #0
   19d1a:	f2c0 80b9 	blt.w	19e90 <AddModifyRecordBegin+0x2b4>
   19d1e:	69fb      	ldr	r3, [r7, #28]
   19d20:	2b00      	cmp	r3, #0
   19d22:	f2c0 80b5 	blt.w	19e90 <AddModifyRecordBegin+0x2b4>
   19d26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   19d28:	69fb      	ldr	r3, [r7, #28]
   19d2a:	1ad3      	subs	r3, r2, r3
   19d2c:	2b00      	cmp	r3, #0
   19d2e:	f2c0 80af 	blt.w	19e90 <AddModifyRecordBegin+0x2b4>
   19d32:	f107 0308 	add.w	r3, r7, #8
   19d36:	4618      	mov	r0, r3
   19d38:	2104      	movs	r1, #4
   19d3a:	2201      	movs	r2, #1
   19d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19d3e:	f006 fee3 	bl	20b08 <FS_write>
   19d42:	6278      	str	r0, [r7, #36]	; 0x24
   19d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19d46:	2b01      	cmp	r3, #1
   19d48:	d107      	bne.n	19d5a <AddModifyRecordBegin+0x17e>
   19d4a:	68bb      	ldr	r3, [r7, #8]
   19d4c:	68f8      	ldr	r0, [r7, #12]
   19d4e:	4619      	mov	r1, r3
   19d50:	2201      	movs	r2, #1
   19d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19d54:	f006 fed8 	bl	20b08 <FS_write>
   19d58:	6278      	str	r0, [r7, #36]	; 0x24
   19d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19d5c:	2b01      	cmp	r3, #1
   19d5e:	d005      	beq.n	19d6c <AddModifyRecordBegin+0x190>
   19d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19d62:	2b00      	cmp	r3, #0
   19d64:	d10f      	bne.n	19d86 <AddModifyRecordBegin+0x1aa>
   19d66:	68bb      	ldr	r3, [r7, #8]
   19d68:	2b00      	cmp	r3, #0
   19d6a:	d10c      	bne.n	19d86 <AddModifyRecordBegin+0x1aa>
   19d6c:	69fb      	ldr	r3, [r7, #28]
   19d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   19d70:	18d2      	adds	r2, r2, r3
   19d72:	6b79      	ldr	r1, [r7, #52]	; 0x34
   19d74:	69fb      	ldr	r3, [r7, #28]
   19d76:	1acb      	subs	r3, r1, r3
   19d78:	4610      	mov	r0, r2
   19d7a:	4619      	mov	r1, r3
   19d7c:	2201      	movs	r2, #1
   19d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19d80:	f006 fec2 	bl	20b08 <FS_write>
   19d84:	6278      	str	r0, [r7, #36]	; 0x24
   19d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19d88:	2b01      	cmp	r3, #1
   19d8a:	d006      	beq.n	19d9a <AddModifyRecordBegin+0x1be>
   19d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19d8e:	2b00      	cmp	r3, #0
   19d90:	d17e      	bne.n	19e90 <AddModifyRecordBegin+0x2b4>
   19d92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   19d94:	69fb      	ldr	r3, [r7, #28]
   19d96:	429a      	cmp	r2, r3
   19d98:	d17a      	bne.n	19e90 <AddModifyRecordBegin+0x2b4>
   19d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   19d9c:	f006 fcd6 	bl	2074c <FS_close>
   19da0:	2300      	movs	r3, #0
   19da2:	62bb      	str	r3, [r7, #40]	; 0x28
   19da4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   19da8:	4618      	mov	r0, r3
   19daa:	f006 fe55 	bl	20a58 <FS_unlink>
   19dae:	63b8      	str	r0, [r7, #56]	; 0x38
   19db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19db2:	2b02      	cmp	r3, #2
   19db4:	d16c      	bne.n	19e90 <AddModifyRecordBegin+0x2b4>
   19db6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19db8:	f006 fcc8 	bl	2074c <FS_close>
   19dbc:	2300      	movs	r3, #0
   19dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   19dc0:	f107 0260 	add.w	r2, r7, #96	; 0x60
   19dc4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   19dc8:	4610      	mov	r0, r2
   19dca:	4619      	mov	r1, r3
   19dcc:	f006 fdf0 	bl	209b0 <FS_rename>
   19dd0:	63b8      	str	r0, [r7, #56]	; 0x38
   19dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19dd4:	2b02      	cmp	r3, #2
   19dd6:	d15b      	bne.n	19e90 <AddModifyRecordBegin+0x2b4>
   19dd8:	230a      	movs	r3, #10
   19dda:	623b      	str	r3, [r7, #32]
   19ddc:	e058      	b.n	19e90 <AddModifyRecordBegin+0x2b4>
   19dde:	683b      	ldr	r3, [r7, #0]
   19de0:	2b01      	cmp	r3, #1
   19de2:	d102      	bne.n	19dea <AddModifyRecordBegin+0x20e>
   19de4:	68bb      	ldr	r3, [r7, #8]
   19de6:	61fb      	str	r3, [r7, #28]
   19de8:	e001      	b.n	19dee <AddModifyRecordBegin+0x212>
   19dea:	2300      	movs	r3, #0
   19dec:	61fb      	str	r3, [r7, #28]
   19dee:	69fb      	ldr	r3, [r7, #28]
   19df0:	2b00      	cmp	r3, #0
   19df2:	db4d      	blt.n	19e90 <AddModifyRecordBegin+0x2b4>
   19df4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   19df6:	69fb      	ldr	r3, [r7, #28]
   19df8:	1ad3      	subs	r3, r2, r3
   19dfa:	2b00      	cmp	r3, #0
   19dfc:	db48      	blt.n	19e90 <AddModifyRecordBegin+0x2b4>
   19dfe:	68bb      	ldr	r3, [r7, #8]
   19e00:	68f8      	ldr	r0, [r7, #12]
   19e02:	4619      	mov	r1, r3
   19e04:	2201      	movs	r2, #1
   19e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19e08:	f006 fe7e 	bl	20b08 <FS_write>
   19e0c:	6278      	str	r0, [r7, #36]	; 0x24
   19e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19e10:	2b01      	cmp	r3, #1
   19e12:	d005      	beq.n	19e20 <AddModifyRecordBegin+0x244>
   19e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19e16:	2b00      	cmp	r3, #0
   19e18:	d10f      	bne.n	19e3a <AddModifyRecordBegin+0x25e>
   19e1a:	68bb      	ldr	r3, [r7, #8]
   19e1c:	2b00      	cmp	r3, #0
   19e1e:	d10c      	bne.n	19e3a <AddModifyRecordBegin+0x25e>
   19e20:	69fb      	ldr	r3, [r7, #28]
   19e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   19e24:	18d2      	adds	r2, r2, r3
   19e26:	6b79      	ldr	r1, [r7, #52]	; 0x34
   19e28:	69fb      	ldr	r3, [r7, #28]
   19e2a:	1acb      	subs	r3, r1, r3
   19e2c:	4610      	mov	r0, r2
   19e2e:	4619      	mov	r1, r3
   19e30:	2201      	movs	r2, #1
   19e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19e34:	f006 fe68 	bl	20b08 <FS_write>
   19e38:	6278      	str	r0, [r7, #36]	; 0x24
   19e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19e3c:	2b01      	cmp	r3, #1
   19e3e:	d006      	beq.n	19e4e <AddModifyRecordBegin+0x272>
   19e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19e42:	2b00      	cmp	r3, #0
   19e44:	d124      	bne.n	19e90 <AddModifyRecordBegin+0x2b4>
   19e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   19e48:	69fb      	ldr	r3, [r7, #28]
   19e4a:	429a      	cmp	r2, r3
   19e4c:	d120      	bne.n	19e90 <AddModifyRecordBegin+0x2b4>
   19e4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   19e50:	f006 fc7c 	bl	2074c <FS_close>
   19e54:	2300      	movs	r3, #0
   19e56:	62bb      	str	r3, [r7, #40]	; 0x28
   19e58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   19e5c:	4618      	mov	r0, r3
   19e5e:	f006 fdfb 	bl	20a58 <FS_unlink>
   19e62:	63b8      	str	r0, [r7, #56]	; 0x38
   19e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19e66:	2b02      	cmp	r3, #2
   19e68:	d112      	bne.n	19e90 <AddModifyRecordBegin+0x2b4>
   19e6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19e6c:	f006 fc6e 	bl	2074c <FS_close>
   19e70:	2300      	movs	r3, #0
   19e72:	62fb      	str	r3, [r7, #44]	; 0x2c
   19e74:	f107 0260 	add.w	r2, r7, #96	; 0x60
   19e78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   19e7c:	4610      	mov	r0, r2
   19e7e:	4619      	mov	r1, r3
   19e80:	f006 fd96 	bl	209b0 <FS_rename>
   19e84:	63b8      	str	r0, [r7, #56]	; 0x38
   19e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19e88:	2b02      	cmp	r3, #2
   19e8a:	d101      	bne.n	19e90 <AddModifyRecordBegin+0x2b4>
   19e8c:	230a      	movs	r3, #10
   19e8e:	623b      	str	r3, [r7, #32]
   19e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19e92:	2b00      	cmp	r3, #0
   19e94:	d007      	beq.n	19ea6 <AddModifyRecordBegin+0x2ca>
   19e96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19e98:	f006 fc58 	bl	2074c <FS_close>
   19e9c:	2300      	movs	r3, #0
   19e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   19ea0:	e001      	b.n	19ea6 <AddModifyRecordBegin+0x2ca>
   19ea2:	2318      	movs	r3, #24
   19ea4:	623b      	str	r3, [r7, #32]
   19ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19ea8:	2b00      	cmp	r3, #0
   19eaa:	d004      	beq.n	19eb6 <AddModifyRecordBegin+0x2da>
   19eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   19eae:	f006 fc4d 	bl	2074c <FS_close>
   19eb2:	2300      	movs	r3, #0
   19eb4:	62bb      	str	r3, [r7, #40]	; 0x28
   19eb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
   19eb8:	f006 feda 	bl	20c70 <PageFree>
   19ebc:	6a3b      	ldr	r3, [r7, #32]
   19ebe:	4618      	mov	r0, r3
   19ec0:	4b07      	ldr	r3, [pc, #28]	; (19ee0 <AddModifyRecordBegin+0x304>)
   19ec2:	58e3      	ldr	r3, [r4, r3]
   19ec4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   19ec8:	681b      	ldr	r3, [r3, #0]
   19eca:	429a      	cmp	r2, r3
   19ecc:	d001      	beq.n	19ed2 <AddModifyRecordBegin+0x2f6>
   19ece:	f7ef f869 	bl	8fa4 <__stack_chk_fail>
   19ed2:	f107 078c 	add.w	r7, r7, #140	; 0x8c
   19ed6:	46bd      	mov	sp, r7
   19ed8:	bd90      	pop	{r4, r7, pc}
   19eda:	bf00      	nop
   19edc:	0001551c 	.word	0x0001551c
   19ee0:	000000ac 	.word	0x000000ac
   19ee4:	0000c538 	.word	0x0000c538
   19ee8:	0000c53c 	.word	0x0000c53c
   19eec:	0000c4ec 	.word	0x0000c4ec
   19ef0:	0000c500 	.word	0x0000c500
   19ef4:	0000c4cc 	.word	0x0000c4cc
   19ef8:	000000c0 	.word	0x000000c0

00019efc <AddModifyRecordBeginWithCkecksum>:
   19efc:	b590      	push	{r4, r7, lr}
   19efe:	b0bd      	sub	sp, #244	; 0xf4
   19f00:	af00      	add	r7, sp, #0
   19f02:	6178      	str	r0, [r7, #20]
   19f04:	6139      	str	r1, [r7, #16]
   19f06:	60fa      	str	r2, [r7, #12]
   19f08:	60bb      	str	r3, [r7, #8]
   19f0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
   19f0e:	607b      	str	r3, [r7, #4]
   19f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   19f14:	603b      	str	r3, [r7, #0]
   19f16:	4cf8      	ldr	r4, [pc, #992]	; (1a2f8 <AddModifyRecordBeginWithCkecksum+0x3fc>)
   19f18:	447c      	add	r4, pc
   19f1a:	4bf8      	ldr	r3, [pc, #992]	; (1a2fc <AddModifyRecordBeginWithCkecksum+0x400>)
   19f1c:	58e3      	ldr	r3, [r4, r3]
   19f1e:	681b      	ldr	r3, [r3, #0]
   19f20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
   19f24:	2318      	movs	r3, #24
   19f26:	623b      	str	r3, [r7, #32]
   19f28:	2300      	movs	r3, #0
   19f2a:	633b      	str	r3, [r7, #48]	; 0x30
   19f2c:	2300      	movs	r3, #0
   19f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   19f30:	2300      	movs	r3, #0
   19f32:	62fb      	str	r3, [r7, #44]	; 0x2c
   19f34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   19f38:	4618      	mov	r0, r3
   19f3a:	4bf1      	ldr	r3, [pc, #964]	; (1a300 <AddModifyRecordBeginWithCkecksum+0x404>)
   19f3c:	447b      	add	r3, pc
   19f3e:	4619      	mov	r1, r3
   19f40:	697a      	ldr	r2, [r7, #20]
   19f42:	693b      	ldr	r3, [r7, #16]
   19f44:	f7ee eeb6 	blx	8cb4 <_init+0x154>
   19f48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   19f4c:	4618      	mov	r0, r3
   19f4e:	4bed      	ldr	r3, [pc, #948]	; (1a304 <AddModifyRecordBeginWithCkecksum+0x408>)
   19f50:	447b      	add	r3, pc
   19f52:	4619      	mov	r1, r3
   19f54:	f006 fcd6 	bl	20904 <FS_open>
   19f58:	62b8      	str	r0, [r7, #40]	; 0x28
   19f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19f5c:	2b00      	cmp	r3, #0
   19f5e:	d102      	bne.n	19f66 <AddModifyRecordBeginWithCkecksum+0x6a>
   19f60:	2313      	movs	r3, #19
   19f62:	623b      	str	r3, [r7, #32]
   19f64:	e1b9      	b.n	1a2da <AddModifyRecordBeginWithCkecksum+0x3de>
   19f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   19f68:	f006 fc76 	bl	20858 <FS_length>
   19f6c:	6378      	str	r0, [r7, #52]	; 0x34
   19f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19f70:	4618      	mov	r0, r3
   19f72:	f006 fe53 	bl	20c1c <PageAlloc>
   19f76:	6338      	str	r0, [r7, #48]	; 0x30
   19f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19f7a:	2b00      	cmp	r3, #0
   19f7c:	f000 81a0 	beq.w	1a2c0 <AddModifyRecordBeginWithCkecksum+0x3c4>
   19f80:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   19f84:	4618      	mov	r0, r3
   19f86:	4be0      	ldr	r3, [pc, #896]	; (1a308 <AddModifyRecordBeginWithCkecksum+0x40c>)
   19f88:	447b      	add	r3, pc
   19f8a:	4619      	mov	r1, r3
   19f8c:	697a      	ldr	r2, [r7, #20]
   19f8e:	4bdf      	ldr	r3, [pc, #892]	; (1a30c <AddModifyRecordBeginWithCkecksum+0x410>)
   19f90:	447b      	add	r3, pc
   19f92:	f7ee ee90 	blx	8cb4 <_init+0x154>
   19f96:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   19f9a:	4618      	mov	r0, r3
   19f9c:	f006 fc30 	bl	20800 <FS_exist>
   19fa0:	63b8      	str	r0, [r7, #56]	; 0x38
   19fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19fa4:	2b02      	cmp	r3, #2
   19fa6:	d104      	bne.n	19fb2 <AddModifyRecordBeginWithCkecksum+0xb6>
   19fa8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   19fac:	4618      	mov	r0, r3
   19fae:	f006 fd53 	bl	20a58 <FS_unlink>
   19fb2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   19fb6:	4618      	mov	r0, r3
   19fb8:	4bd5      	ldr	r3, [pc, #852]	; (1a310 <AddModifyRecordBeginWithCkecksum+0x414>)
   19fba:	447b      	add	r3, pc
   19fbc:	4619      	mov	r1, r3
   19fbe:	f006 fca1 	bl	20904 <FS_open>
   19fc2:	62f8      	str	r0, [r7, #44]	; 0x2c
   19fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   19fc6:	2100      	movs	r1, #0
   19fc8:	2200      	movs	r2, #0
   19fca:	f006 fd1b 	bl	20a04 <FS_seek>
   19fce:	63b8      	str	r0, [r7, #56]	; 0x38
   19fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19fd2:	2b02      	cmp	r3, #2
   19fd4:	f040 816b 	bne.w	1a2ae <AddModifyRecordBeginWithCkecksum+0x3b2>
   19fd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
   19fda:	6b79      	ldr	r1, [r7, #52]	; 0x34
   19fdc:	2201      	movs	r2, #1
   19fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19fe0:	f006 fcba 	bl	20958 <FS_read>
   19fe4:	6278      	str	r0, [r7, #36]	; 0x24
   19fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19fe8:	2b01      	cmp	r3, #1
   19fea:	d007      	beq.n	19ffc <AddModifyRecordBeginWithCkecksum+0x100>
   19fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19fee:	2b00      	cmp	r3, #0
   19ff0:	f040 815d 	bne.w	1a2ae <AddModifyRecordBeginWithCkecksum+0x3b2>
   19ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19ff6:	2b00      	cmp	r3, #0
   19ff8:	f040 8159 	bne.w	1a2ae <AddModifyRecordBeginWithCkecksum+0x3b2>
   19ffc:	4bc5      	ldr	r3, [pc, #788]	; (1a314 <AddModifyRecordBeginWithCkecksum+0x418>)
   19ffe:	58e3      	ldr	r3, [r4, r3]
   1a000:	461a      	mov	r2, r3
   1a002:	687b      	ldr	r3, [r7, #4]
   1a004:	212c      	movs	r1, #44	; 0x2c
   1a006:	fb01 f303 	mul.w	r3, r1, r3
   1a00a:	18d3      	adds	r3, r2, r3
   1a00c:	3328      	adds	r3, #40	; 0x28
   1a00e:	681b      	ldr	r3, [r3, #0]
   1a010:	2b01      	cmp	r3, #1
   1a012:	f040 80ba 	bne.w	1a18a <AddModifyRecordBeginWithCkecksum+0x28e>
   1a016:	683b      	ldr	r3, [r7, #0]
   1a018:	2b01      	cmp	r3, #1
   1a01a:	d10a      	bne.n	1a032 <AddModifyRecordBeginWithCkecksum+0x136>
   1a01c:	f107 0318 	add.w	r3, r7, #24
   1a020:	4618      	mov	r0, r3
   1a022:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1a024:	2204      	movs	r2, #4
   1a026:	f7ee ee28 	blx	8c78 <_init+0x118>
   1a02a:	69bb      	ldr	r3, [r7, #24]
   1a02c:	3304      	adds	r3, #4
   1a02e:	61fb      	str	r3, [r7, #28]
   1a030:	e001      	b.n	1a036 <AddModifyRecordBeginWithCkecksum+0x13a>
   1a032:	2300      	movs	r3, #0
   1a034:	61fb      	str	r3, [r7, #28]
   1a036:	69fb      	ldr	r3, [r7, #28]
   1a038:	2b00      	cmp	r3, #0
   1a03a:	f2c0 8138 	blt.w	1a2ae <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a03e:	68bb      	ldr	r3, [r7, #8]
   1a040:	2b00      	cmp	r3, #0
   1a042:	f2c0 8134 	blt.w	1a2ae <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a048:	f1a3 0210 	sub.w	r2, r3, #16
   1a04c:	69fb      	ldr	r3, [r7, #28]
   1a04e:	1ad3      	subs	r3, r2, r3
   1a050:	2b00      	cmp	r3, #0
   1a052:	f2c0 812c 	blt.w	1a2ae <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a056:	f107 0308 	add.w	r3, r7, #8
   1a05a:	4618      	mov	r0, r3
   1a05c:	2104      	movs	r1, #4
   1a05e:	2201      	movs	r2, #1
   1a060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a062:	f006 fd51 	bl	20b08 <FS_write>
   1a066:	6278      	str	r0, [r7, #36]	; 0x24
   1a068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a06a:	2b01      	cmp	r3, #1
   1a06c:	d107      	bne.n	1a07e <AddModifyRecordBeginWithCkecksum+0x182>
   1a06e:	68bb      	ldr	r3, [r7, #8]
   1a070:	68f8      	ldr	r0, [r7, #12]
   1a072:	4619      	mov	r1, r3
   1a074:	2201      	movs	r2, #1
   1a076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a078:	f006 fd46 	bl	20b08 <FS_write>
   1a07c:	6278      	str	r0, [r7, #36]	; 0x24
   1a07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a080:	2b01      	cmp	r3, #1
   1a082:	d005      	beq.n	1a090 <AddModifyRecordBeginWithCkecksum+0x194>
   1a084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a086:	2b00      	cmp	r3, #0
   1a088:	d111      	bne.n	1a0ae <AddModifyRecordBeginWithCkecksum+0x1b2>
   1a08a:	68bb      	ldr	r3, [r7, #8]
   1a08c:	2b00      	cmp	r3, #0
   1a08e:	d10e      	bne.n	1a0ae <AddModifyRecordBeginWithCkecksum+0x1b2>
   1a090:	69fb      	ldr	r3, [r7, #28]
   1a092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a094:	18d2      	adds	r2, r2, r3
   1a096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a098:	f1a3 0110 	sub.w	r1, r3, #16
   1a09c:	69fb      	ldr	r3, [r7, #28]
   1a09e:	1acb      	subs	r3, r1, r3
   1a0a0:	4610      	mov	r0, r2
   1a0a2:	4619      	mov	r1, r3
   1a0a4:	2201      	movs	r2, #1
   1a0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a0a8:	f006 fd2e 	bl	20b08 <FS_write>
   1a0ac:	6278      	str	r0, [r7, #36]	; 0x24
   1a0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a0b0:	2b01      	cmp	r3, #1
   1a0b2:	d00a      	beq.n	1a0ca <AddModifyRecordBeginWithCkecksum+0x1ce>
   1a0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a0b6:	2b00      	cmp	r3, #0
   1a0b8:	f040 80f9 	bne.w	1a2ae <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a0be:	f1a3 0210 	sub.w	r2, r3, #16
   1a0c2:	69fb      	ldr	r3, [r7, #28]
   1a0c4:	429a      	cmp	r2, r3
   1a0c6:	f040 80f2 	bne.w	1a2ae <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a0ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1a0ce:	4618      	mov	r0, r3
   1a0d0:	f004 ff8c 	bl	1efec <md5_init>
   1a0d4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1a0d8:	f107 0308 	add.w	r3, r7, #8
   1a0dc:	4610      	mov	r0, r2
   1a0de:	4619      	mov	r1, r3
   1a0e0:	2204      	movs	r2, #4
   1a0e2:	f004 ffbd 	bl	1f060 <md5_append>
   1a0e6:	68bb      	ldr	r3, [r7, #8]
   1a0e8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1a0ec:	4610      	mov	r0, r2
   1a0ee:	68f9      	ldr	r1, [r7, #12]
   1a0f0:	461a      	mov	r2, r3
   1a0f2:	f004 ffb5 	bl	1f060 <md5_append>
   1a0f6:	69fb      	ldr	r3, [r7, #28]
   1a0f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a0fa:	18d2      	adds	r2, r2, r3
   1a0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a0fe:	f1a3 0110 	sub.w	r1, r3, #16
   1a102:	69fb      	ldr	r3, [r7, #28]
   1a104:	1acb      	subs	r3, r1, r3
   1a106:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   1a10a:	4608      	mov	r0, r1
   1a10c:	4611      	mov	r1, r2
   1a10e:	461a      	mov	r2, r3
   1a110:	f004 ffa6 	bl	1f060 <md5_append>
   1a114:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1a118:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1a11c:	4610      	mov	r0, r2
   1a11e:	4619      	mov	r1, r3
   1a120:	f005 f82a 	bl	1f178 <md5_finish>
   1a124:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1a128:	4618      	mov	r0, r3
   1a12a:	2110      	movs	r1, #16
   1a12c:	2201      	movs	r2, #1
   1a12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a130:	f006 fcea 	bl	20b08 <FS_write>
   1a134:	6278      	str	r0, [r7, #36]	; 0x24
   1a136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1a138:	f006 fb08 	bl	2074c <FS_close>
   1a13c:	63b8      	str	r0, [r7, #56]	; 0x38
   1a13e:	2300      	movs	r3, #0
   1a140:	62bb      	str	r3, [r7, #40]	; 0x28
   1a142:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1a146:	4618      	mov	r0, r3
   1a148:	f006 fc86 	bl	20a58 <FS_unlink>
   1a14c:	63b8      	str	r0, [r7, #56]	; 0x38
   1a14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a150:	2b02      	cmp	r3, #2
   1a152:	f040 80ac 	bne.w	1a2ae <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a156:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1a158:	f006 faf8 	bl	2074c <FS_close>
   1a15c:	63b8      	str	r0, [r7, #56]	; 0x38
   1a15e:	2300      	movs	r3, #0
   1a160:	62fb      	str	r3, [r7, #44]	; 0x2c
   1a162:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   1a166:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1a16a:	4610      	mov	r0, r2
   1a16c:	4619      	mov	r1, r3
   1a16e:	f006 fc1f 	bl	209b0 <FS_rename>
   1a172:	63b8      	str	r0, [r7, #56]	; 0x38
   1a174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a176:	2b02      	cmp	r3, #2
   1a178:	f040 8099 	bne.w	1a2ae <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a17e:	2b01      	cmp	r3, #1
   1a180:	f040 8095 	bne.w	1a2ae <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a184:	230a      	movs	r3, #10
   1a186:	623b      	str	r3, [r7, #32]
   1a188:	e091      	b.n	1a2ae <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a18a:	683b      	ldr	r3, [r7, #0]
   1a18c:	2b01      	cmp	r3, #1
   1a18e:	d102      	bne.n	1a196 <AddModifyRecordBeginWithCkecksum+0x29a>
   1a190:	68bb      	ldr	r3, [r7, #8]
   1a192:	61fb      	str	r3, [r7, #28]
   1a194:	e001      	b.n	1a19a <AddModifyRecordBeginWithCkecksum+0x29e>
   1a196:	2300      	movs	r3, #0
   1a198:	61fb      	str	r3, [r7, #28]
   1a19a:	69fb      	ldr	r3, [r7, #28]
   1a19c:	2b00      	cmp	r3, #0
   1a19e:	f2c0 8086 	blt.w	1a2ae <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a1a4:	f1a3 0210 	sub.w	r2, r3, #16
   1a1a8:	69fb      	ldr	r3, [r7, #28]
   1a1aa:	1ad3      	subs	r3, r2, r3
   1a1ac:	2b00      	cmp	r3, #0
   1a1ae:	db7e      	blt.n	1a2ae <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a1b0:	68bb      	ldr	r3, [r7, #8]
   1a1b2:	68f8      	ldr	r0, [r7, #12]
   1a1b4:	4619      	mov	r1, r3
   1a1b6:	2201      	movs	r2, #1
   1a1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a1ba:	f006 fca5 	bl	20b08 <FS_write>
   1a1be:	6278      	str	r0, [r7, #36]	; 0x24
   1a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a1c2:	2b01      	cmp	r3, #1
   1a1c4:	d005      	beq.n	1a1d2 <AddModifyRecordBeginWithCkecksum+0x2d6>
   1a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a1c8:	2b00      	cmp	r3, #0
   1a1ca:	d111      	bne.n	1a1f0 <AddModifyRecordBeginWithCkecksum+0x2f4>
   1a1cc:	68bb      	ldr	r3, [r7, #8]
   1a1ce:	2b00      	cmp	r3, #0
   1a1d0:	d10e      	bne.n	1a1f0 <AddModifyRecordBeginWithCkecksum+0x2f4>
   1a1d2:	69fb      	ldr	r3, [r7, #28]
   1a1d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a1d6:	18d2      	adds	r2, r2, r3
   1a1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a1da:	f1a3 0110 	sub.w	r1, r3, #16
   1a1de:	69fb      	ldr	r3, [r7, #28]
   1a1e0:	1acb      	subs	r3, r1, r3
   1a1e2:	4610      	mov	r0, r2
   1a1e4:	4619      	mov	r1, r3
   1a1e6:	2201      	movs	r2, #1
   1a1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a1ea:	f006 fc8d 	bl	20b08 <FS_write>
   1a1ee:	6278      	str	r0, [r7, #36]	; 0x24
   1a1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a1f2:	2b01      	cmp	r3, #1
   1a1f4:	d008      	beq.n	1a208 <AddModifyRecordBeginWithCkecksum+0x30c>
   1a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a1f8:	2b00      	cmp	r3, #0
   1a1fa:	d158      	bne.n	1a2ae <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a1fe:	f1a3 0210 	sub.w	r2, r3, #16
   1a202:	69fb      	ldr	r3, [r7, #28]
   1a204:	429a      	cmp	r2, r3
   1a206:	d152      	bne.n	1a2ae <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a208:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1a20c:	4618      	mov	r0, r3
   1a20e:	f004 feed 	bl	1efec <md5_init>
   1a212:	68bb      	ldr	r3, [r7, #8]
   1a214:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1a218:	4610      	mov	r0, r2
   1a21a:	68f9      	ldr	r1, [r7, #12]
   1a21c:	461a      	mov	r2, r3
   1a21e:	f004 ff1f 	bl	1f060 <md5_append>
   1a222:	69fb      	ldr	r3, [r7, #28]
   1a224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a226:	18d2      	adds	r2, r2, r3
   1a228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a22a:	f1a3 0110 	sub.w	r1, r3, #16
   1a22e:	69fb      	ldr	r3, [r7, #28]
   1a230:	1acb      	subs	r3, r1, r3
   1a232:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   1a236:	4608      	mov	r0, r1
   1a238:	4611      	mov	r1, r2
   1a23a:	461a      	mov	r2, r3
   1a23c:	f004 ff10 	bl	1f060 <md5_append>
   1a240:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1a244:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1a248:	4610      	mov	r0, r2
   1a24a:	4619      	mov	r1, r3
   1a24c:	f004 ff94 	bl	1f178 <md5_finish>
   1a250:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1a254:	4618      	mov	r0, r3
   1a256:	2110      	movs	r1, #16
   1a258:	2201      	movs	r2, #1
   1a25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a25c:	f006 fc54 	bl	20b08 <FS_write>
   1a260:	6278      	str	r0, [r7, #36]	; 0x24
   1a262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1a264:	f006 fa72 	bl	2074c <FS_close>
   1a268:	63b8      	str	r0, [r7, #56]	; 0x38
   1a26a:	2300      	movs	r3, #0
   1a26c:	62bb      	str	r3, [r7, #40]	; 0x28
   1a26e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1a272:	4618      	mov	r0, r3
   1a274:	f006 fbf0 	bl	20a58 <FS_unlink>
   1a278:	63b8      	str	r0, [r7, #56]	; 0x38
   1a27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a27c:	2b02      	cmp	r3, #2
   1a27e:	d116      	bne.n	1a2ae <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a280:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1a282:	f006 fa63 	bl	2074c <FS_close>
   1a286:	63b8      	str	r0, [r7, #56]	; 0x38
   1a288:	2300      	movs	r3, #0
   1a28a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1a28c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   1a290:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1a294:	4610      	mov	r0, r2
   1a296:	4619      	mov	r1, r3
   1a298:	f006 fb8a 	bl	209b0 <FS_rename>
   1a29c:	63b8      	str	r0, [r7, #56]	; 0x38
   1a29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a2a0:	2b02      	cmp	r3, #2
   1a2a2:	d104      	bne.n	1a2ae <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a2a6:	2b01      	cmp	r3, #1
   1a2a8:	d101      	bne.n	1a2ae <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a2aa:	230a      	movs	r3, #10
   1a2ac:	623b      	str	r3, [r7, #32]
   1a2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a2b0:	2b00      	cmp	r3, #0
   1a2b2:	d007      	beq.n	1a2c4 <AddModifyRecordBeginWithCkecksum+0x3c8>
   1a2b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1a2b6:	f006 fa49 	bl	2074c <FS_close>
   1a2ba:	2300      	movs	r3, #0
   1a2bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   1a2be:	e001      	b.n	1a2c4 <AddModifyRecordBeginWithCkecksum+0x3c8>
   1a2c0:	2318      	movs	r3, #24
   1a2c2:	623b      	str	r3, [r7, #32]
   1a2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a2c6:	2b00      	cmp	r3, #0
   1a2c8:	d004      	beq.n	1a2d4 <AddModifyRecordBeginWithCkecksum+0x3d8>
   1a2ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1a2cc:	f006 fa3e 	bl	2074c <FS_close>
   1a2d0:	2300      	movs	r3, #0
   1a2d2:	62bb      	str	r3, [r7, #40]	; 0x28
   1a2d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1a2d6:	f006 fccb 	bl	20c70 <PageFree>
   1a2da:	6a3b      	ldr	r3, [r7, #32]
   1a2dc:	4618      	mov	r0, r3
   1a2de:	4b07      	ldr	r3, [pc, #28]	; (1a2fc <AddModifyRecordBeginWithCkecksum+0x400>)
   1a2e0:	58e3      	ldr	r3, [r4, r3]
   1a2e2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
   1a2e6:	681b      	ldr	r3, [r3, #0]
   1a2e8:	429a      	cmp	r2, r3
   1a2ea:	d001      	beq.n	1a2f0 <AddModifyRecordBeginWithCkecksum+0x3f4>
   1a2ec:	f7ee fe5a 	bl	8fa4 <__stack_chk_fail>
   1a2f0:	f107 07f4 	add.w	r7, r7, #244	; 0xf4
   1a2f4:	46bd      	mov	sp, r7
   1a2f6:	bd90      	pop	{r4, r7, pc}
   1a2f8:	000151fc 	.word	0x000151fc
   1a2fc:	000000ac 	.word	0x000000ac
   1a300:	0000c218 	.word	0x0000c218
   1a304:	0000c21c 	.word	0x0000c21c
   1a308:	0000c1cc 	.word	0x0000c1cc
   1a30c:	0000c1e0 	.word	0x0000c1e0
   1a310:	0000c1ae 	.word	0x0000c1ae
   1a314:	000000c0 	.word	0x000000c0

0001a318 <AddModifyRecordMiddle>:
   1a318:	b590      	push	{r4, r7, lr}
   1a31a:	b0a7      	sub	sp, #156	; 0x9c
   1a31c:	af00      	add	r7, sp, #0
   1a31e:	61f8      	str	r0, [r7, #28]
   1a320:	61b9      	str	r1, [r7, #24]
   1a322:	617a      	str	r2, [r7, #20]
   1a324:	613b      	str	r3, [r7, #16]
   1a326:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   1a32a:	60fb      	str	r3, [r7, #12]
   1a32c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1a330:	60bb      	str	r3, [r7, #8]
   1a332:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1a336:	607b      	str	r3, [r7, #4]
   1a338:	4cf5      	ldr	r4, [pc, #980]	; (1a710 <AddModifyRecordMiddle+0x3f8>)
   1a33a:	447c      	add	r4, pc
   1a33c:	4bf5      	ldr	r3, [pc, #980]	; (1a714 <AddModifyRecordMiddle+0x3fc>)
   1a33e:	58e3      	ldr	r3, [r4, r3]
   1a340:	681b      	ldr	r3, [r3, #0]
   1a342:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   1a346:	2318      	movs	r3, #24
   1a348:	62bb      	str	r3, [r7, #40]	; 0x28
   1a34a:	2300      	movs	r3, #0
   1a34c:	643b      	str	r3, [r7, #64]	; 0x40
   1a34e:	2300      	movs	r3, #0
   1a350:	63bb      	str	r3, [r7, #56]	; 0x38
   1a352:	2300      	movs	r3, #0
   1a354:	63fb      	str	r3, [r7, #60]	; 0x3c
   1a356:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1a35a:	4618      	mov	r0, r3
   1a35c:	4bee      	ldr	r3, [pc, #952]	; (1a718 <AddModifyRecordMiddle+0x400>)
   1a35e:	447b      	add	r3, pc
   1a360:	4619      	mov	r1, r3
   1a362:	69fa      	ldr	r2, [r7, #28]
   1a364:	69bb      	ldr	r3, [r7, #24]
   1a366:	f7ee eca6 	blx	8cb4 <_init+0x154>
   1a36a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1a36e:	4618      	mov	r0, r3
   1a370:	4bea      	ldr	r3, [pc, #936]	; (1a71c <AddModifyRecordMiddle+0x404>)
   1a372:	447b      	add	r3, pc
   1a374:	4619      	mov	r1, r3
   1a376:	f006 fac5 	bl	20904 <FS_open>
   1a37a:	63b8      	str	r0, [r7, #56]	; 0x38
   1a37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a37e:	2b00      	cmp	r3, #0
   1a380:	d102      	bne.n	1a388 <AddModifyRecordMiddle+0x70>
   1a382:	2313      	movs	r3, #19
   1a384:	62bb      	str	r3, [r7, #40]	; 0x28
   1a386:	e1b3      	b.n	1a6f0 <AddModifyRecordMiddle+0x3d8>
   1a388:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1a38a:	f006 fa65 	bl	20858 <FS_length>
   1a38e:	6478      	str	r0, [r7, #68]	; 0x44
   1a390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a392:	4618      	mov	r0, r3
   1a394:	f006 fc42 	bl	20c1c <PageAlloc>
   1a398:	6438      	str	r0, [r7, #64]	; 0x40
   1a39a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a39c:	2b00      	cmp	r3, #0
   1a39e:	f000 819a 	beq.w	1a6d6 <AddModifyRecordMiddle+0x3be>
   1a3a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1a3a6:	4618      	mov	r0, r3
   1a3a8:	4bdd      	ldr	r3, [pc, #884]	; (1a720 <AddModifyRecordMiddle+0x408>)
   1a3aa:	447b      	add	r3, pc
   1a3ac:	4619      	mov	r1, r3
   1a3ae:	69fa      	ldr	r2, [r7, #28]
   1a3b0:	4bdc      	ldr	r3, [pc, #880]	; (1a724 <AddModifyRecordMiddle+0x40c>)
   1a3b2:	447b      	add	r3, pc
   1a3b4:	f7ee ec7e 	blx	8cb4 <_init+0x154>
   1a3b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1a3bc:	4618      	mov	r0, r3
   1a3be:	f006 fa1f 	bl	20800 <FS_exist>
   1a3c2:	64b8      	str	r0, [r7, #72]	; 0x48
   1a3c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a3c6:	2b02      	cmp	r3, #2
   1a3c8:	d104      	bne.n	1a3d4 <AddModifyRecordMiddle+0xbc>
   1a3ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1a3ce:	4618      	mov	r0, r3
   1a3d0:	f006 fb42 	bl	20a58 <FS_unlink>
   1a3d4:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1a3d8:	4618      	mov	r0, r3
   1a3da:	4bd3      	ldr	r3, [pc, #844]	; (1a728 <AddModifyRecordMiddle+0x410>)
   1a3dc:	447b      	add	r3, pc
   1a3de:	4619      	mov	r1, r3
   1a3e0:	f006 fa90 	bl	20904 <FS_open>
   1a3e4:	63f8      	str	r0, [r7, #60]	; 0x3c
   1a3e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1a3e8:	2100      	movs	r1, #0
   1a3ea:	2200      	movs	r2, #0
   1a3ec:	f006 fb0a 	bl	20a04 <FS_seek>
   1a3f0:	64b8      	str	r0, [r7, #72]	; 0x48
   1a3f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a3f4:	2b02      	cmp	r3, #2
   1a3f6:	f040 8165 	bne.w	1a6c4 <AddModifyRecordMiddle+0x3ac>
   1a3fa:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1a3fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1a3fe:	2201      	movs	r2, #1
   1a400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a402:	f006 faa9 	bl	20958 <FS_read>
   1a406:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a40a:	2b01      	cmp	r3, #1
   1a40c:	d007      	beq.n	1a41e <AddModifyRecordMiddle+0x106>
   1a40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a410:	2b00      	cmp	r3, #0
   1a412:	f040 8157 	bne.w	1a6c4 <AddModifyRecordMiddle+0x3ac>
   1a416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a418:	2b00      	cmp	r3, #0
   1a41a:	f040 8153 	bne.w	1a6c4 <AddModifyRecordMiddle+0x3ac>
   1a41e:	4bc3      	ldr	r3, [pc, #780]	; (1a72c <AddModifyRecordMiddle+0x414>)
   1a420:	58e3      	ldr	r3, [r4, r3]
   1a422:	461a      	mov	r2, r3
   1a424:	68bb      	ldr	r3, [r7, #8]
   1a426:	212c      	movs	r1, #44	; 0x2c
   1a428:	fb01 f303 	mul.w	r3, r1, r3
   1a42c:	18d3      	adds	r3, r2, r3
   1a42e:	3328      	adds	r3, #40	; 0x28
   1a430:	681b      	ldr	r3, [r3, #0]
   1a432:	2b01      	cmp	r3, #1
   1a434:	f040 80ca 	bne.w	1a5cc <AddModifyRecordMiddle+0x2b4>
   1a438:	2300      	movs	r3, #0
   1a43a:	633b      	str	r3, [r7, #48]	; 0x30
   1a43c:	2300      	movs	r3, #0
   1a43e:	637b      	str	r3, [r7, #52]	; 0x34
   1a440:	e01d      	b.n	1a47e <AddModifyRecordMiddle+0x166>
   1a442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a446:	429a      	cmp	r2, r3
   1a448:	da13      	bge.n	1a472 <AddModifyRecordMiddle+0x15a>
   1a44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a44c:	2b00      	cmp	r3, #0
   1a44e:	db10      	blt.n	1a472 <AddModifyRecordMiddle+0x15a>
   1a450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a452:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a454:	18d3      	adds	r3, r2, r3
   1a456:	f107 0220 	add.w	r2, r7, #32
   1a45a:	4610      	mov	r0, r2
   1a45c:	4619      	mov	r1, r3
   1a45e:	2204      	movs	r2, #4
   1a460:	f7ee ec0a 	blx	8c78 <_init+0x118>
   1a464:	6a3b      	ldr	r3, [r7, #32]
   1a466:	461a      	mov	r2, r3
   1a468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a46a:	18d3      	adds	r3, r2, r3
   1a46c:	3304      	adds	r3, #4
   1a46e:	633b      	str	r3, [r7, #48]	; 0x30
   1a470:	e002      	b.n	1a478 <AddModifyRecordMiddle+0x160>
   1a472:	f04f 33ff 	mov.w	r3, #4294967295
   1a476:	633b      	str	r3, [r7, #48]	; 0x30
   1a478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a47a:	3301      	adds	r3, #1
   1a47c:	637b      	str	r3, [r7, #52]	; 0x34
   1a47e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a480:	68fb      	ldr	r3, [r7, #12]
   1a482:	429a      	cmp	r2, r3
   1a484:	da02      	bge.n	1a48c <AddModifyRecordMiddle+0x174>
   1a486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a488:	2b00      	cmp	r3, #0
   1a48a:	dada      	bge.n	1a442 <AddModifyRecordMiddle+0x12a>
   1a48c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a48e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a490:	429a      	cmp	r2, r3
   1a492:	f300 8098 	bgt.w	1a5c6 <AddModifyRecordMiddle+0x2ae>
   1a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a498:	2b00      	cmp	r3, #0
   1a49a:	f2c0 8094 	blt.w	1a5c6 <AddModifyRecordMiddle+0x2ae>
   1a49e:	687b      	ldr	r3, [r7, #4]
   1a4a0:	2b01      	cmp	r3, #1
   1a4a2:	d10d      	bne.n	1a4c0 <AddModifyRecordMiddle+0x1a8>
   1a4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a4a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a4a8:	18d3      	adds	r3, r2, r3
   1a4aa:	f107 0220 	add.w	r2, r7, #32
   1a4ae:	4610      	mov	r0, r2
   1a4b0:	4619      	mov	r1, r3
   1a4b2:	2204      	movs	r2, #4
   1a4b4:	f7ee ebe0 	blx	8c78 <_init+0x118>
   1a4b8:	6a3b      	ldr	r3, [r7, #32]
   1a4ba:	3304      	adds	r3, #4
   1a4bc:	627b      	str	r3, [r7, #36]	; 0x24
   1a4be:	e001      	b.n	1a4c4 <AddModifyRecordMiddle+0x1ac>
   1a4c0:	2300      	movs	r3, #0
   1a4c2:	627b      	str	r3, [r7, #36]	; 0x24
   1a4c4:	693b      	ldr	r3, [r7, #16]
   1a4c6:	2b00      	cmp	r3, #0
   1a4c8:	f2c0 80fb 	blt.w	1a6c2 <AddModifyRecordMiddle+0x3aa>
   1a4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a4ce:	2b00      	cmp	r3, #0
   1a4d0:	f2c0 80f7 	blt.w	1a6c2 <AddModifyRecordMiddle+0x3aa>
   1a4d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1a4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a4d8:	1ad2      	subs	r2, r2, r3
   1a4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a4dc:	1ad3      	subs	r3, r2, r3
   1a4de:	2b00      	cmp	r3, #0
   1a4e0:	f2c0 80ef 	blt.w	1a6c2 <AddModifyRecordMiddle+0x3aa>
   1a4e4:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1a4e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1a4e8:	2201      	movs	r2, #1
   1a4ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a4ec:	f006 fb0c 	bl	20b08 <FS_write>
   1a4f0:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a4f4:	2b01      	cmp	r3, #1
   1a4f6:	d005      	beq.n	1a504 <AddModifyRecordMiddle+0x1ec>
   1a4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a4fa:	2b00      	cmp	r3, #0
   1a4fc:	d10b      	bne.n	1a516 <AddModifyRecordMiddle+0x1fe>
   1a4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a500:	2b00      	cmp	r3, #0
   1a502:	d108      	bne.n	1a516 <AddModifyRecordMiddle+0x1fe>
   1a504:	f107 0310 	add.w	r3, r7, #16
   1a508:	4618      	mov	r0, r3
   1a50a:	2104      	movs	r1, #4
   1a50c:	2201      	movs	r2, #1
   1a50e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a510:	f006 fafa 	bl	20b08 <FS_write>
   1a514:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a518:	2b01      	cmp	r3, #1
   1a51a:	d107      	bne.n	1a52c <AddModifyRecordMiddle+0x214>
   1a51c:	693b      	ldr	r3, [r7, #16]
   1a51e:	6978      	ldr	r0, [r7, #20]
   1a520:	4619      	mov	r1, r3
   1a522:	2201      	movs	r2, #1
   1a524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a526:	f006 faef 	bl	20b08 <FS_write>
   1a52a:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a52e:	2b01      	cmp	r3, #1
   1a530:	d005      	beq.n	1a53e <AddModifyRecordMiddle+0x226>
   1a532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a534:	2b00      	cmp	r3, #0
   1a536:	d113      	bne.n	1a560 <AddModifyRecordMiddle+0x248>
   1a538:	693b      	ldr	r3, [r7, #16]
   1a53a:	2b00      	cmp	r3, #0
   1a53c:	d110      	bne.n	1a560 <AddModifyRecordMiddle+0x248>
   1a53e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a542:	18d3      	adds	r3, r2, r3
   1a544:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a546:	18d2      	adds	r2, r2, r3
   1a548:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1a54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a54c:	1ac9      	subs	r1, r1, r3
   1a54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a550:	1acb      	subs	r3, r1, r3
   1a552:	4610      	mov	r0, r2
   1a554:	4619      	mov	r1, r3
   1a556:	2201      	movs	r2, #1
   1a558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a55a:	f006 fad5 	bl	20b08 <FS_write>
   1a55e:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a562:	2b01      	cmp	r3, #1
   1a564:	d00a      	beq.n	1a57c <AddModifyRecordMiddle+0x264>
   1a566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a568:	2b00      	cmp	r3, #0
   1a56a:	f040 80aa 	bne.w	1a6c2 <AddModifyRecordMiddle+0x3aa>
   1a56e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1a570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a572:	1ad2      	subs	r2, r2, r3
   1a574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a576:	429a      	cmp	r2, r3
   1a578:	f040 80a3 	bne.w	1a6c2 <AddModifyRecordMiddle+0x3aa>
   1a57c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1a57e:	f006 f8e5 	bl	2074c <FS_close>
   1a582:	2300      	movs	r3, #0
   1a584:	63bb      	str	r3, [r7, #56]	; 0x38
   1a586:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1a58a:	4618      	mov	r0, r3
   1a58c:	f006 fa64 	bl	20a58 <FS_unlink>
   1a590:	64b8      	str	r0, [r7, #72]	; 0x48
   1a592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a594:	2b02      	cmp	r3, #2
   1a596:	f040 8094 	bne.w	1a6c2 <AddModifyRecordMiddle+0x3aa>
   1a59a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1a59c:	f006 f8d6 	bl	2074c <FS_close>
   1a5a0:	2300      	movs	r3, #0
   1a5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   1a5a4:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1a5a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1a5ac:	4610      	mov	r0, r2
   1a5ae:	4619      	mov	r1, r3
   1a5b0:	f006 f9fe 	bl	209b0 <FS_rename>
   1a5b4:	64b8      	str	r0, [r7, #72]	; 0x48
   1a5b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a5b8:	2b02      	cmp	r3, #2
   1a5ba:	f040 8082 	bne.w	1a6c2 <AddModifyRecordMiddle+0x3aa>
   1a5be:	230a      	movs	r3, #10
   1a5c0:	62bb      	str	r3, [r7, #40]	; 0x28
   1a5c2:	bf00      	nop
   1a5c4:	e07d      	b.n	1a6c2 <AddModifyRecordMiddle+0x3aa>
   1a5c6:	2318      	movs	r3, #24
   1a5c8:	62bb      	str	r3, [r7, #40]	; 0x28
   1a5ca:	e07b      	b.n	1a6c4 <AddModifyRecordMiddle+0x3ac>
   1a5cc:	687b      	ldr	r3, [r7, #4]
   1a5ce:	2b01      	cmp	r3, #1
   1a5d0:	d102      	bne.n	1a5d8 <AddModifyRecordMiddle+0x2c0>
   1a5d2:	693b      	ldr	r3, [r7, #16]
   1a5d4:	627b      	str	r3, [r7, #36]	; 0x24
   1a5d6:	e001      	b.n	1a5dc <AddModifyRecordMiddle+0x2c4>
   1a5d8:	2300      	movs	r3, #0
   1a5da:	627b      	str	r3, [r7, #36]	; 0x24
   1a5dc:	693a      	ldr	r2, [r7, #16]
   1a5de:	68fb      	ldr	r3, [r7, #12]
   1a5e0:	fb02 f303 	mul.w	r3, r2, r3
   1a5e4:	633b      	str	r3, [r7, #48]	; 0x30
   1a5e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a5e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a5ea:	429a      	cmp	r2, r3
   1a5ec:	dc6a      	bgt.n	1a6c4 <AddModifyRecordMiddle+0x3ac>
   1a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a5f0:	2b00      	cmp	r3, #0
   1a5f2:	db67      	blt.n	1a6c4 <AddModifyRecordMiddle+0x3ac>
   1a5f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1a5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a5f8:	1ad2      	subs	r2, r2, r3
   1a5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a5fc:	1ad3      	subs	r3, r2, r3
   1a5fe:	2b00      	cmp	r3, #0
   1a600:	db60      	blt.n	1a6c4 <AddModifyRecordMiddle+0x3ac>
   1a602:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1a604:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1a606:	2201      	movs	r2, #1
   1a608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a60a:	f006 fa7d 	bl	20b08 <FS_write>
   1a60e:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a612:	2b01      	cmp	r3, #1
   1a614:	d005      	beq.n	1a622 <AddModifyRecordMiddle+0x30a>
   1a616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a618:	2b00      	cmp	r3, #0
   1a61a:	d10a      	bne.n	1a632 <AddModifyRecordMiddle+0x31a>
   1a61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a61e:	2b00      	cmp	r3, #0
   1a620:	d107      	bne.n	1a632 <AddModifyRecordMiddle+0x31a>
   1a622:	693b      	ldr	r3, [r7, #16]
   1a624:	6978      	ldr	r0, [r7, #20]
   1a626:	4619      	mov	r1, r3
   1a628:	2201      	movs	r2, #1
   1a62a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a62c:	f006 fa6c 	bl	20b08 <FS_write>
   1a630:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a634:	2b01      	cmp	r3, #1
   1a636:	d005      	beq.n	1a644 <AddModifyRecordMiddle+0x32c>
   1a638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a63a:	2b00      	cmp	r3, #0
   1a63c:	d113      	bne.n	1a666 <AddModifyRecordMiddle+0x34e>
   1a63e:	693b      	ldr	r3, [r7, #16]
   1a640:	2b00      	cmp	r3, #0
   1a642:	d110      	bne.n	1a666 <AddModifyRecordMiddle+0x34e>
   1a644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a648:	18d3      	adds	r3, r2, r3
   1a64a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a64c:	18d2      	adds	r2, r2, r3
   1a64e:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1a650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a652:	1ac9      	subs	r1, r1, r3
   1a654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a656:	1acb      	subs	r3, r1, r3
   1a658:	4610      	mov	r0, r2
   1a65a:	4619      	mov	r1, r3
   1a65c:	2201      	movs	r2, #1
   1a65e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a660:	f006 fa52 	bl	20b08 <FS_write>
   1a664:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a668:	2b01      	cmp	r3, #1
   1a66a:	d008      	beq.n	1a67e <AddModifyRecordMiddle+0x366>
   1a66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a66e:	2b00      	cmp	r3, #0
   1a670:	d128      	bne.n	1a6c4 <AddModifyRecordMiddle+0x3ac>
   1a672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1a674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a676:	1ad2      	subs	r2, r2, r3
   1a678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a67a:	429a      	cmp	r2, r3
   1a67c:	d122      	bne.n	1a6c4 <AddModifyRecordMiddle+0x3ac>
   1a67e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1a680:	f006 f864 	bl	2074c <FS_close>
   1a684:	2300      	movs	r3, #0
   1a686:	63bb      	str	r3, [r7, #56]	; 0x38
   1a688:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1a68c:	4618      	mov	r0, r3
   1a68e:	f006 f9e3 	bl	20a58 <FS_unlink>
   1a692:	64b8      	str	r0, [r7, #72]	; 0x48
   1a694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a696:	2b02      	cmp	r3, #2
   1a698:	d114      	bne.n	1a6c4 <AddModifyRecordMiddle+0x3ac>
   1a69a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1a69c:	f006 f856 	bl	2074c <FS_close>
   1a6a0:	2300      	movs	r3, #0
   1a6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   1a6a4:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1a6a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1a6ac:	4610      	mov	r0, r2
   1a6ae:	4619      	mov	r1, r3
   1a6b0:	f006 f97e 	bl	209b0 <FS_rename>
   1a6b4:	64b8      	str	r0, [r7, #72]	; 0x48
   1a6b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a6b8:	2b02      	cmp	r3, #2
   1a6ba:	d103      	bne.n	1a6c4 <AddModifyRecordMiddle+0x3ac>
   1a6bc:	230a      	movs	r3, #10
   1a6be:	62bb      	str	r3, [r7, #40]	; 0x28
   1a6c0:	e000      	b.n	1a6c4 <AddModifyRecordMiddle+0x3ac>
   1a6c2:	bf00      	nop
   1a6c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a6c6:	2b00      	cmp	r3, #0
   1a6c8:	d007      	beq.n	1a6da <AddModifyRecordMiddle+0x3c2>
   1a6ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1a6cc:	f006 f83e 	bl	2074c <FS_close>
   1a6d0:	2300      	movs	r3, #0
   1a6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   1a6d4:	e001      	b.n	1a6da <AddModifyRecordMiddle+0x3c2>
   1a6d6:	2318      	movs	r3, #24
   1a6d8:	62bb      	str	r3, [r7, #40]	; 0x28
   1a6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a6dc:	2b00      	cmp	r3, #0
   1a6de:	d004      	beq.n	1a6ea <AddModifyRecordMiddle+0x3d2>
   1a6e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1a6e2:	f006 f833 	bl	2074c <FS_close>
   1a6e6:	2300      	movs	r3, #0
   1a6e8:	63bb      	str	r3, [r7, #56]	; 0x38
   1a6ea:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1a6ec:	f006 fac0 	bl	20c70 <PageFree>
   1a6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a6f2:	4618      	mov	r0, r3
   1a6f4:	4b07      	ldr	r3, [pc, #28]	; (1a714 <AddModifyRecordMiddle+0x3fc>)
   1a6f6:	58e3      	ldr	r3, [r4, r3]
   1a6f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   1a6fc:	681b      	ldr	r3, [r3, #0]
   1a6fe:	429a      	cmp	r2, r3
   1a700:	d001      	beq.n	1a706 <AddModifyRecordMiddle+0x3ee>
   1a702:	f7ee fc4f 	bl	8fa4 <__stack_chk_fail>
   1a706:	f107 079c 	add.w	r7, r7, #156	; 0x9c
   1a70a:	46bd      	mov	sp, r7
   1a70c:	bd90      	pop	{r4, r7, pc}
   1a70e:	bf00      	nop
   1a710:	00014dda 	.word	0x00014dda
   1a714:	000000ac 	.word	0x000000ac
   1a718:	0000bdf6 	.word	0x0000bdf6
   1a71c:	0000bdfa 	.word	0x0000bdfa
   1a720:	0000bdaa 	.word	0x0000bdaa
   1a724:	0000bdbe 	.word	0x0000bdbe
   1a728:	0000bd8c 	.word	0x0000bd8c
   1a72c:	000000c0 	.word	0x000000c0

0001a730 <AddModifyRecordMiddleWithCkecksum>:
   1a730:	b590      	push	{r4, r7, lr}
   1a732:	b0c1      	sub	sp, #260	; 0x104
   1a734:	af00      	add	r7, sp, #0
   1a736:	61f8      	str	r0, [r7, #28]
   1a738:	61b9      	str	r1, [r7, #24]
   1a73a:	617a      	str	r2, [r7, #20]
   1a73c:	613b      	str	r3, [r7, #16]
   1a73e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
   1a742:	60fb      	str	r3, [r7, #12]
   1a744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   1a748:	60bb      	str	r3, [r7, #8]
   1a74a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   1a74e:	607b      	str	r3, [r7, #4]
   1a750:	f8df 44ec 	ldr.w	r4, [pc, #1260]	; 1ac40 <AddModifyRecordMiddleWithCkecksum+0x510>
   1a754:	447c      	add	r4, pc
   1a756:	f8df 34ec 	ldr.w	r3, [pc, #1260]	; 1ac44 <AddModifyRecordMiddleWithCkecksum+0x514>
   1a75a:	58e3      	ldr	r3, [r4, r3]
   1a75c:	681b      	ldr	r3, [r3, #0]
   1a75e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
   1a762:	2318      	movs	r3, #24
   1a764:	62bb      	str	r3, [r7, #40]	; 0x28
   1a766:	2300      	movs	r3, #0
   1a768:	643b      	str	r3, [r7, #64]	; 0x40
   1a76a:	2300      	movs	r3, #0
   1a76c:	63bb      	str	r3, [r7, #56]	; 0x38
   1a76e:	2300      	movs	r3, #0
   1a770:	63fb      	str	r3, [r7, #60]	; 0x3c
   1a772:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
   1a776:	4618      	mov	r0, r3
   1a778:	f8df 34cc 	ldr.w	r3, [pc, #1228]	; 1ac48 <AddModifyRecordMiddleWithCkecksum+0x518>
   1a77c:	447b      	add	r3, pc
   1a77e:	4619      	mov	r1, r3
   1a780:	69fa      	ldr	r2, [r7, #28]
   1a782:	69bb      	ldr	r3, [r7, #24]
   1a784:	f7ee ea96 	blx	8cb4 <_init+0x154>
   1a788:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
   1a78c:	4618      	mov	r0, r3
   1a78e:	f8df 34bc 	ldr.w	r3, [pc, #1212]	; 1ac4c <AddModifyRecordMiddleWithCkecksum+0x51c>
   1a792:	447b      	add	r3, pc
   1a794:	4619      	mov	r1, r3
   1a796:	f006 f8b5 	bl	20904 <FS_open>
   1a79a:	63b8      	str	r0, [r7, #56]	; 0x38
   1a79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a79e:	2b00      	cmp	r3, #0
   1a7a0:	d102      	bne.n	1a7a8 <AddModifyRecordMiddleWithCkecksum+0x78>
   1a7a2:	2313      	movs	r3, #19
   1a7a4:	62bb      	str	r3, [r7, #40]	; 0x28
   1a7a6:	e23b      	b.n	1ac20 <AddModifyRecordMiddleWithCkecksum+0x4f0>
   1a7a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1a7aa:	f006 f855 	bl	20858 <FS_length>
   1a7ae:	6478      	str	r0, [r7, #68]	; 0x44
   1a7b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a7b2:	4618      	mov	r0, r3
   1a7b4:	f006 fa32 	bl	20c1c <PageAlloc>
   1a7b8:	6438      	str	r0, [r7, #64]	; 0x40
   1a7ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a7bc:	2b00      	cmp	r3, #0
   1a7be:	f000 8222 	beq.w	1ac06 <AddModifyRecordMiddleWithCkecksum+0x4d6>
   1a7c2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
   1a7c6:	4618      	mov	r0, r3
   1a7c8:	f8df 3484 	ldr.w	r3, [pc, #1156]	; 1ac50 <AddModifyRecordMiddleWithCkecksum+0x520>
   1a7cc:	447b      	add	r3, pc
   1a7ce:	4619      	mov	r1, r3
   1a7d0:	69fa      	ldr	r2, [r7, #28]
   1a7d2:	f8df 3480 	ldr.w	r3, [pc, #1152]	; 1ac54 <AddModifyRecordMiddleWithCkecksum+0x524>
   1a7d6:	447b      	add	r3, pc
   1a7d8:	f7ee ea6c 	blx	8cb4 <_init+0x154>
   1a7dc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
   1a7e0:	4618      	mov	r0, r3
   1a7e2:	f006 f80d 	bl	20800 <FS_exist>
   1a7e6:	64b8      	str	r0, [r7, #72]	; 0x48
   1a7e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a7ea:	2b02      	cmp	r3, #2
   1a7ec:	d104      	bne.n	1a7f8 <AddModifyRecordMiddleWithCkecksum+0xc8>
   1a7ee:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
   1a7f2:	4618      	mov	r0, r3
   1a7f4:	f006 f930 	bl	20a58 <FS_unlink>
   1a7f8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
   1a7fc:	4618      	mov	r0, r3
   1a7fe:	f8df 3458 	ldr.w	r3, [pc, #1112]	; 1ac58 <AddModifyRecordMiddleWithCkecksum+0x528>
   1a802:	447b      	add	r3, pc
   1a804:	4619      	mov	r1, r3
   1a806:	f006 f87d 	bl	20904 <FS_open>
   1a80a:	63f8      	str	r0, [r7, #60]	; 0x3c
   1a80c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1a80e:	2100      	movs	r1, #0
   1a810:	2200      	movs	r2, #0
   1a812:	f006 f8f7 	bl	20a04 <FS_seek>
   1a816:	64b8      	str	r0, [r7, #72]	; 0x48
   1a818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a81a:	2b02      	cmp	r3, #2
   1a81c:	f040 81ea 	bne.w	1abf4 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1a820:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1a822:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1a824:	2201      	movs	r2, #1
   1a826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a828:	f006 f896 	bl	20958 <FS_read>
   1a82c:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a830:	2b01      	cmp	r3, #1
   1a832:	d007      	beq.n	1a844 <AddModifyRecordMiddleWithCkecksum+0x114>
   1a834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a836:	2b00      	cmp	r3, #0
   1a838:	f040 81dc 	bne.w	1abf4 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1a83c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a83e:	2b00      	cmp	r3, #0
   1a840:	f040 81d8 	bne.w	1abf4 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1a844:	f8df 3414 	ldr.w	r3, [pc, #1044]	; 1ac5c <AddModifyRecordMiddleWithCkecksum+0x52c>
   1a848:	58e3      	ldr	r3, [r4, r3]
   1a84a:	461a      	mov	r2, r3
   1a84c:	68bb      	ldr	r3, [r7, #8]
   1a84e:	212c      	movs	r1, #44	; 0x2c
   1a850:	fb01 f303 	mul.w	r3, r1, r3
   1a854:	18d3      	adds	r3, r2, r3
   1a856:	3328      	adds	r3, #40	; 0x28
   1a858:	681b      	ldr	r3, [r3, #0]
   1a85a:	2b01      	cmp	r3, #1
   1a85c:	f040 810c 	bne.w	1aa78 <AddModifyRecordMiddleWithCkecksum+0x348>
   1a860:	2300      	movs	r3, #0
   1a862:	633b      	str	r3, [r7, #48]	; 0x30
   1a864:	2300      	movs	r3, #0
   1a866:	637b      	str	r3, [r7, #52]	; 0x34
   1a868:	e01d      	b.n	1a8a6 <AddModifyRecordMiddleWithCkecksum+0x176>
   1a86a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a86c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a86e:	429a      	cmp	r2, r3
   1a870:	da13      	bge.n	1a89a <AddModifyRecordMiddleWithCkecksum+0x16a>
   1a872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a874:	2b00      	cmp	r3, #0
   1a876:	db10      	blt.n	1a89a <AddModifyRecordMiddleWithCkecksum+0x16a>
   1a878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a87a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a87c:	18d3      	adds	r3, r2, r3
   1a87e:	f107 0220 	add.w	r2, r7, #32
   1a882:	4610      	mov	r0, r2
   1a884:	4619      	mov	r1, r3
   1a886:	2204      	movs	r2, #4
   1a888:	f7ee e9f6 	blx	8c78 <_init+0x118>
   1a88c:	6a3b      	ldr	r3, [r7, #32]
   1a88e:	461a      	mov	r2, r3
   1a890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a892:	18d3      	adds	r3, r2, r3
   1a894:	3304      	adds	r3, #4
   1a896:	633b      	str	r3, [r7, #48]	; 0x30
   1a898:	e002      	b.n	1a8a0 <AddModifyRecordMiddleWithCkecksum+0x170>
   1a89a:	f04f 33ff 	mov.w	r3, #4294967295
   1a89e:	633b      	str	r3, [r7, #48]	; 0x30
   1a8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a8a2:	3301      	adds	r3, #1
   1a8a4:	637b      	str	r3, [r7, #52]	; 0x34
   1a8a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a8a8:	68fb      	ldr	r3, [r7, #12]
   1a8aa:	429a      	cmp	r2, r3
   1a8ac:	da02      	bge.n	1a8b4 <AddModifyRecordMiddleWithCkecksum+0x184>
   1a8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a8b0:	2b00      	cmp	r3, #0
   1a8b2:	dada      	bge.n	1a86a <AddModifyRecordMiddleWithCkecksum+0x13a>
   1a8b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a8b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a8b8:	429a      	cmp	r2, r3
   1a8ba:	f300 80da 	bgt.w	1aa72 <AddModifyRecordMiddleWithCkecksum+0x342>
   1a8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a8c0:	2b00      	cmp	r3, #0
   1a8c2:	f2c0 80d6 	blt.w	1aa72 <AddModifyRecordMiddleWithCkecksum+0x342>
   1a8c6:	687b      	ldr	r3, [r7, #4]
   1a8c8:	2b01      	cmp	r3, #1
   1a8ca:	d10d      	bne.n	1a8e8 <AddModifyRecordMiddleWithCkecksum+0x1b8>
   1a8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a8ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a8d0:	18d3      	adds	r3, r2, r3
   1a8d2:	f107 0220 	add.w	r2, r7, #32
   1a8d6:	4610      	mov	r0, r2
   1a8d8:	4619      	mov	r1, r3
   1a8da:	2204      	movs	r2, #4
   1a8dc:	f7ee e9cc 	blx	8c78 <_init+0x118>
   1a8e0:	6a3b      	ldr	r3, [r7, #32]
   1a8e2:	3304      	adds	r3, #4
   1a8e4:	627b      	str	r3, [r7, #36]	; 0x24
   1a8e6:	e001      	b.n	1a8ec <AddModifyRecordMiddleWithCkecksum+0x1bc>
   1a8e8:	2300      	movs	r3, #0
   1a8ea:	627b      	str	r3, [r7, #36]	; 0x24
   1a8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a8ee:	2b00      	cmp	r3, #0
   1a8f0:	f2c0 817f 	blt.w	1abf2 <AddModifyRecordMiddleWithCkecksum+0x4c2>
   1a8f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1a8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a8f8:	1ad3      	subs	r3, r2, r3
   1a8fa:	f1a3 0210 	sub.w	r2, r3, #16
   1a8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a900:	1ad3      	subs	r3, r2, r3
   1a902:	2b00      	cmp	r3, #0
   1a904:	f2c0 8175 	blt.w	1abf2 <AddModifyRecordMiddleWithCkecksum+0x4c2>
   1a908:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1a90a:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1a90c:	2201      	movs	r2, #1
   1a90e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a910:	f006 f8fa 	bl	20b08 <FS_write>
   1a914:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a918:	2b01      	cmp	r3, #1
   1a91a:	d005      	beq.n	1a928 <AddModifyRecordMiddleWithCkecksum+0x1f8>
   1a91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a91e:	2b00      	cmp	r3, #0
   1a920:	d10b      	bne.n	1a93a <AddModifyRecordMiddleWithCkecksum+0x20a>
   1a922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a924:	2b00      	cmp	r3, #0
   1a926:	d108      	bne.n	1a93a <AddModifyRecordMiddleWithCkecksum+0x20a>
   1a928:	f107 0310 	add.w	r3, r7, #16
   1a92c:	4618      	mov	r0, r3
   1a92e:	2104      	movs	r1, #4
   1a930:	2201      	movs	r2, #1
   1a932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a934:	f006 f8e8 	bl	20b08 <FS_write>
   1a938:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a93c:	2b01      	cmp	r3, #1
   1a93e:	d107      	bne.n	1a950 <AddModifyRecordMiddleWithCkecksum+0x220>
   1a940:	693b      	ldr	r3, [r7, #16]
   1a942:	6978      	ldr	r0, [r7, #20]
   1a944:	4619      	mov	r1, r3
   1a946:	2201      	movs	r2, #1
   1a948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a94a:	f006 f8dd 	bl	20b08 <FS_write>
   1a94e:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a952:	2b01      	cmp	r3, #1
   1a954:	d005      	beq.n	1a962 <AddModifyRecordMiddleWithCkecksum+0x232>
   1a956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a958:	2b00      	cmp	r3, #0
   1a95a:	d115      	bne.n	1a988 <AddModifyRecordMiddleWithCkecksum+0x258>
   1a95c:	693b      	ldr	r3, [r7, #16]
   1a95e:	2b00      	cmp	r3, #0
   1a960:	d112      	bne.n	1a988 <AddModifyRecordMiddleWithCkecksum+0x258>
   1a962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a966:	18d3      	adds	r3, r2, r3
   1a968:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a96a:	18d2      	adds	r2, r2, r3
   1a96c:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1a96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a970:	1acb      	subs	r3, r1, r3
   1a972:	f1a3 0110 	sub.w	r1, r3, #16
   1a976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a978:	1acb      	subs	r3, r1, r3
   1a97a:	4610      	mov	r0, r2
   1a97c:	4619      	mov	r1, r3
   1a97e:	2201      	movs	r2, #1
   1a980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a982:	f006 f8c1 	bl	20b08 <FS_write>
   1a986:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a98a:	2b01      	cmp	r3, #1
   1a98c:	d00c      	beq.n	1a9a8 <AddModifyRecordMiddleWithCkecksum+0x278>
   1a98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a990:	2b00      	cmp	r3, #0
   1a992:	f040 812e 	bne.w	1abf2 <AddModifyRecordMiddleWithCkecksum+0x4c2>
   1a996:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1a998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a99a:	1ad3      	subs	r3, r2, r3
   1a99c:	f1a3 0210 	sub.w	r2, r3, #16
   1a9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a9a2:	429a      	cmp	r2, r3
   1a9a4:	f040 8125 	bne.w	1abf2 <AddModifyRecordMiddleWithCkecksum+0x4c2>
   1a9a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1a9ac:	4618      	mov	r0, r3
   1a9ae:	f004 fb1d 	bl	1efec <md5_init>
   1a9b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1a9b6:	4618      	mov	r0, r3
   1a9b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1a9ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a9bc:	f004 fb50 	bl	1f060 <md5_append>
   1a9c0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   1a9c4:	f107 0310 	add.w	r3, r7, #16
   1a9c8:	4610      	mov	r0, r2
   1a9ca:	4619      	mov	r1, r3
   1a9cc:	2204      	movs	r2, #4
   1a9ce:	f004 fb47 	bl	1f060 <md5_append>
   1a9d2:	693b      	ldr	r3, [r7, #16]
   1a9d4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   1a9d8:	4610      	mov	r0, r2
   1a9da:	6979      	ldr	r1, [r7, #20]
   1a9dc:	461a      	mov	r2, r3
   1a9de:	f004 fb3f 	bl	1f060 <md5_append>
   1a9e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a9e6:	18d3      	adds	r3, r2, r3
   1a9e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a9ea:	18d2      	adds	r2, r2, r3
   1a9ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1a9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a9f0:	1acb      	subs	r3, r1, r3
   1a9f2:	f1a3 0110 	sub.w	r1, r3, #16
   1a9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a9f8:	1acb      	subs	r3, r1, r3
   1a9fa:	f107 014c 	add.w	r1, r7, #76	; 0x4c
   1a9fe:	4608      	mov	r0, r1
   1aa00:	4611      	mov	r1, r2
   1aa02:	461a      	mov	r2, r3
   1aa04:	f004 fb2c 	bl	1f060 <md5_append>
   1aa08:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   1aa0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1aa10:	4610      	mov	r0, r2
   1aa12:	4619      	mov	r1, r3
   1aa14:	f004 fbb0 	bl	1f178 <md5_finish>
   1aa18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1aa1c:	4618      	mov	r0, r3
   1aa1e:	2110      	movs	r1, #16
   1aa20:	2201      	movs	r2, #1
   1aa22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1aa24:	f006 f870 	bl	20b08 <FS_write>
   1aa28:	62f8      	str	r0, [r7, #44]	; 0x2c
   1aa2a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1aa2c:	f005 fe8e 	bl	2074c <FS_close>
   1aa30:	2300      	movs	r3, #0
   1aa32:	63bb      	str	r3, [r7, #56]	; 0x38
   1aa34:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
   1aa38:	4618      	mov	r0, r3
   1aa3a:	f006 f80d 	bl	20a58 <FS_unlink>
   1aa3e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1aa40:	f005 fe84 	bl	2074c <FS_close>
   1aa44:	2300      	movs	r3, #0
   1aa46:	63fb      	str	r3, [r7, #60]	; 0x3c
   1aa48:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
   1aa4c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
   1aa50:	4610      	mov	r0, r2
   1aa52:	4619      	mov	r1, r3
   1aa54:	f005 ffac 	bl	209b0 <FS_rename>
   1aa58:	64b8      	str	r0, [r7, #72]	; 0x48
   1aa5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1aa5c:	2b02      	cmp	r3, #2
   1aa5e:	f040 80c8 	bne.w	1abf2 <AddModifyRecordMiddleWithCkecksum+0x4c2>
   1aa62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aa64:	2b01      	cmp	r3, #1
   1aa66:	f040 80c4 	bne.w	1abf2 <AddModifyRecordMiddleWithCkecksum+0x4c2>
   1aa6a:	230a      	movs	r3, #10
   1aa6c:	62bb      	str	r3, [r7, #40]	; 0x28
   1aa6e:	bf00      	nop
   1aa70:	e0bf      	b.n	1abf2 <AddModifyRecordMiddleWithCkecksum+0x4c2>
   1aa72:	2318      	movs	r3, #24
   1aa74:	62bb      	str	r3, [r7, #40]	; 0x28
   1aa76:	e0bd      	b.n	1abf4 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1aa78:	687b      	ldr	r3, [r7, #4]
   1aa7a:	2b01      	cmp	r3, #1
   1aa7c:	d102      	bne.n	1aa84 <AddModifyRecordMiddleWithCkecksum+0x354>
   1aa7e:	693b      	ldr	r3, [r7, #16]
   1aa80:	627b      	str	r3, [r7, #36]	; 0x24
   1aa82:	e001      	b.n	1aa88 <AddModifyRecordMiddleWithCkecksum+0x358>
   1aa84:	2300      	movs	r3, #0
   1aa86:	627b      	str	r3, [r7, #36]	; 0x24
   1aa88:	693a      	ldr	r2, [r7, #16]
   1aa8a:	68fb      	ldr	r3, [r7, #12]
   1aa8c:	fb02 f303 	mul.w	r3, r2, r3
   1aa90:	633b      	str	r3, [r7, #48]	; 0x30
   1aa92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1aa94:	f1a3 0210 	sub.w	r2, r3, #16
   1aa98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1aa9a:	429a      	cmp	r2, r3
   1aa9c:	f2c0 80aa 	blt.w	1abf4 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1aaa0:	693b      	ldr	r3, [r7, #16]
   1aaa2:	2b00      	cmp	r3, #0
   1aaa4:	f2c0 80a6 	blt.w	1abf4 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1aaa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1aaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1aaac:	1ad3      	subs	r3, r2, r3
   1aaae:	f1a3 0210 	sub.w	r2, r3, #16
   1aab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aab4:	1ad3      	subs	r3, r2, r3
   1aab6:	2b00      	cmp	r3, #0
   1aab8:	f2c0 809c 	blt.w	1abf4 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1aabc:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1aabe:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1aac0:	2201      	movs	r2, #1
   1aac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1aac4:	f006 f820 	bl	20b08 <FS_write>
   1aac8:	62f8      	str	r0, [r7, #44]	; 0x2c
   1aaca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aacc:	2b01      	cmp	r3, #1
   1aace:	d005      	beq.n	1aadc <AddModifyRecordMiddleWithCkecksum+0x3ac>
   1aad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aad2:	2b00      	cmp	r3, #0
   1aad4:	d10a      	bne.n	1aaec <AddModifyRecordMiddleWithCkecksum+0x3bc>
   1aad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1aad8:	2b00      	cmp	r3, #0
   1aada:	d107      	bne.n	1aaec <AddModifyRecordMiddleWithCkecksum+0x3bc>
   1aadc:	693b      	ldr	r3, [r7, #16]
   1aade:	6978      	ldr	r0, [r7, #20]
   1aae0:	4619      	mov	r1, r3
   1aae2:	2201      	movs	r2, #1
   1aae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1aae6:	f006 f80f 	bl	20b08 <FS_write>
   1aaea:	62f8      	str	r0, [r7, #44]	; 0x2c
   1aaec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aaee:	2b01      	cmp	r3, #1
   1aaf0:	d005      	beq.n	1aafe <AddModifyRecordMiddleWithCkecksum+0x3ce>
   1aaf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aaf4:	2b00      	cmp	r3, #0
   1aaf6:	d115      	bne.n	1ab24 <AddModifyRecordMiddleWithCkecksum+0x3f4>
   1aaf8:	693b      	ldr	r3, [r7, #16]
   1aafa:	2b00      	cmp	r3, #0
   1aafc:	d112      	bne.n	1ab24 <AddModifyRecordMiddleWithCkecksum+0x3f4>
   1aafe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ab00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ab02:	18d3      	adds	r3, r2, r3
   1ab04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1ab06:	18d2      	adds	r2, r2, r3
   1ab08:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1ab0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ab0c:	1acb      	subs	r3, r1, r3
   1ab0e:	f1a3 0110 	sub.w	r1, r3, #16
   1ab12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ab14:	1acb      	subs	r3, r1, r3
   1ab16:	4610      	mov	r0, r2
   1ab18:	4619      	mov	r1, r3
   1ab1a:	2201      	movs	r2, #1
   1ab1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ab1e:	f005 fff3 	bl	20b08 <FS_write>
   1ab22:	62f8      	str	r0, [r7, #44]	; 0x2c
   1ab24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ab26:	2b01      	cmp	r3, #1
   1ab28:	d00a      	beq.n	1ab40 <AddModifyRecordMiddleWithCkecksum+0x410>
   1ab2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ab2c:	2b00      	cmp	r3, #0
   1ab2e:	d161      	bne.n	1abf4 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1ab30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1ab32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ab34:	1ad3      	subs	r3, r2, r3
   1ab36:	f1a3 0210 	sub.w	r2, r3, #16
   1ab3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ab3c:	429a      	cmp	r2, r3
   1ab3e:	d159      	bne.n	1abf4 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1ab40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1ab44:	4618      	mov	r0, r3
   1ab46:	f004 fa51 	bl	1efec <md5_init>
   1ab4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1ab4e:	4618      	mov	r0, r3
   1ab50:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1ab52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ab54:	f004 fa84 	bl	1f060 <md5_append>
   1ab58:	693b      	ldr	r3, [r7, #16]
   1ab5a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   1ab5e:	4610      	mov	r0, r2
   1ab60:	6979      	ldr	r1, [r7, #20]
   1ab62:	461a      	mov	r2, r3
   1ab64:	f004 fa7c 	bl	1f060 <md5_append>
   1ab68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ab6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ab6c:	18d3      	adds	r3, r2, r3
   1ab6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1ab70:	18d2      	adds	r2, r2, r3
   1ab72:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1ab74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ab76:	1acb      	subs	r3, r1, r3
   1ab78:	f1a3 0110 	sub.w	r1, r3, #16
   1ab7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ab7e:	1acb      	subs	r3, r1, r3
   1ab80:	f107 014c 	add.w	r1, r7, #76	; 0x4c
   1ab84:	4608      	mov	r0, r1
   1ab86:	4611      	mov	r1, r2
   1ab88:	461a      	mov	r2, r3
   1ab8a:	f004 fa69 	bl	1f060 <md5_append>
   1ab8e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   1ab92:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1ab96:	4610      	mov	r0, r2
   1ab98:	4619      	mov	r1, r3
   1ab9a:	f004 faed 	bl	1f178 <md5_finish>
   1ab9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1aba2:	4618      	mov	r0, r3
   1aba4:	2110      	movs	r1, #16
   1aba6:	2201      	movs	r2, #1
   1aba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1abaa:	f005 ffad 	bl	20b08 <FS_write>
   1abae:	62f8      	str	r0, [r7, #44]	; 0x2c
   1abb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1abb2:	f005 fdcb 	bl	2074c <FS_close>
   1abb6:	2300      	movs	r3, #0
   1abb8:	63bb      	str	r3, [r7, #56]	; 0x38
   1abba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
   1abbe:	4618      	mov	r0, r3
   1abc0:	f005 ff4a 	bl	20a58 <FS_unlink>
   1abc4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1abc6:	f005 fdc1 	bl	2074c <FS_close>
   1abca:	2300      	movs	r3, #0
   1abcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   1abce:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
   1abd2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
   1abd6:	4610      	mov	r0, r2
   1abd8:	4619      	mov	r1, r3
   1abda:	f005 fee9 	bl	209b0 <FS_rename>
   1abde:	64b8      	str	r0, [r7, #72]	; 0x48
   1abe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1abe2:	2b02      	cmp	r3, #2
   1abe4:	d106      	bne.n	1abf4 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1abe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1abe8:	2b01      	cmp	r3, #1
   1abea:	d103      	bne.n	1abf4 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1abec:	230a      	movs	r3, #10
   1abee:	62bb      	str	r3, [r7, #40]	; 0x28
   1abf0:	e000      	b.n	1abf4 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1abf2:	bf00      	nop
   1abf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1abf6:	2b00      	cmp	r3, #0
   1abf8:	d007      	beq.n	1ac0a <AddModifyRecordMiddleWithCkecksum+0x4da>
   1abfa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1abfc:	f005 fda6 	bl	2074c <FS_close>
   1ac00:	2300      	movs	r3, #0
   1ac02:	63fb      	str	r3, [r7, #60]	; 0x3c
   1ac04:	e001      	b.n	1ac0a <AddModifyRecordMiddleWithCkecksum+0x4da>
   1ac06:	2318      	movs	r3, #24
   1ac08:	62bb      	str	r3, [r7, #40]	; 0x28
   1ac0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ac0c:	2b00      	cmp	r3, #0
   1ac0e:	d004      	beq.n	1ac1a <AddModifyRecordMiddleWithCkecksum+0x4ea>
   1ac10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1ac12:	f005 fd9b 	bl	2074c <FS_close>
   1ac16:	2300      	movs	r3, #0
   1ac18:	63bb      	str	r3, [r7, #56]	; 0x38
   1ac1a:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1ac1c:	f006 f828 	bl	20c70 <PageFree>
   1ac20:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ac22:	4618      	mov	r0, r3
   1ac24:	4b07      	ldr	r3, [pc, #28]	; (1ac44 <AddModifyRecordMiddleWithCkecksum+0x514>)
   1ac26:	58e3      	ldr	r3, [r4, r3]
   1ac28:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
   1ac2c:	681b      	ldr	r3, [r3, #0]
   1ac2e:	429a      	cmp	r2, r3
   1ac30:	d001      	beq.n	1ac36 <AddModifyRecordMiddleWithCkecksum+0x506>
   1ac32:	f7ee f9b7 	bl	8fa4 <__stack_chk_fail>
   1ac36:	f507 7782 	add.w	r7, r7, #260	; 0x104
   1ac3a:	46bd      	mov	sp, r7
   1ac3c:	bd90      	pop	{r4, r7, pc}
   1ac3e:	bf00      	nop
   1ac40:	000149c0 	.word	0x000149c0
   1ac44:	000000ac 	.word	0x000000ac
   1ac48:	0000b9d8 	.word	0x0000b9d8
   1ac4c:	0000b9da 	.word	0x0000b9da
   1ac50:	0000b988 	.word	0x0000b988
   1ac54:	0000b99a 	.word	0x0000b99a
   1ac58:	0000b966 	.word	0x0000b966
   1ac5c:	000000c0 	.word	0x000000c0

0001ac60 <AddModifyRecordEnd>:
   1ac60:	b590      	push	{r4, r7, lr}
   1ac62:	b0a5      	sub	sp, #148	; 0x94
   1ac64:	af00      	add	r7, sp, #0
   1ac66:	6178      	str	r0, [r7, #20]
   1ac68:	6139      	str	r1, [r7, #16]
   1ac6a:	60fa      	str	r2, [r7, #12]
   1ac6c:	60bb      	str	r3, [r7, #8]
   1ac6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   1ac72:	607b      	str	r3, [r7, #4]
   1ac74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   1ac78:	603b      	str	r3, [r7, #0]
   1ac7a:	f8df 446c 	ldr.w	r4, [pc, #1132]	; 1b0e8 <AddModifyRecordEnd+0x488>
   1ac7e:	447c      	add	r4, pc
   1ac80:	f8df 3468 	ldr.w	r3, [pc, #1128]	; 1b0ec <AddModifyRecordEnd+0x48c>
   1ac84:	58e3      	ldr	r3, [r4, r3]
   1ac86:	681b      	ldr	r3, [r3, #0]
   1ac88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   1ac8c:	2300      	movs	r3, #0
   1ac8e:	61fb      	str	r3, [r7, #28]
   1ac90:	2318      	movs	r3, #24
   1ac92:	623b      	str	r3, [r7, #32]
   1ac94:	2300      	movs	r3, #0
   1ac96:	637b      	str	r3, [r7, #52]	; 0x34
   1ac98:	2300      	movs	r3, #0
   1ac9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1ac9c:	2300      	movs	r3, #0
   1ac9e:	633b      	str	r3, [r7, #48]	; 0x30
   1aca0:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1aca4:	4618      	mov	r0, r3
   1aca6:	f8df 3448 	ldr.w	r3, [pc, #1096]	; 1b0f0 <AddModifyRecordEnd+0x490>
   1acaa:	447b      	add	r3, pc
   1acac:	4619      	mov	r1, r3
   1acae:	697a      	ldr	r2, [r7, #20]
   1acb0:	693b      	ldr	r3, [r7, #16]
   1acb2:	f7ee e800 	blx	8cb4 <_init+0x154>
   1acb6:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1acba:	4618      	mov	r0, r3
   1acbc:	f8df 3434 	ldr.w	r3, [pc, #1076]	; 1b0f4 <AddModifyRecordEnd+0x494>
   1acc0:	447b      	add	r3, pc
   1acc2:	4619      	mov	r1, r3
   1acc4:	f005 fe1e 	bl	20904 <FS_open>
   1acc8:	62f8      	str	r0, [r7, #44]	; 0x2c
   1acca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1accc:	2b00      	cmp	r3, #0
   1acce:	d102      	bne.n	1acd6 <AddModifyRecordEnd+0x76>
   1acd0:	2313      	movs	r3, #19
   1acd2:	623b      	str	r3, [r7, #32]
   1acd4:	e1f8      	b.n	1b0c8 <AddModifyRecordEnd+0x468>
   1acd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1acd8:	f005 fdbe 	bl	20858 <FS_length>
   1acdc:	63b8      	str	r0, [r7, #56]	; 0x38
   1acde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1ace0:	2100      	movs	r1, #0
   1ace2:	2200      	movs	r2, #0
   1ace4:	f005 fe8e 	bl	20a04 <FS_seek>
   1ace8:	63f8      	str	r0, [r7, #60]	; 0x3c
   1acea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1acec:	2b02      	cmp	r3, #2
   1acee:	f040 81e3 	bne.w	1b0b8 <AddModifyRecordEnd+0x458>
   1acf2:	f8df 3404 	ldr.w	r3, [pc, #1028]	; 1b0f8 <AddModifyRecordEnd+0x498>
   1acf6:	58e3      	ldr	r3, [r4, r3]
   1acf8:	461a      	mov	r2, r3
   1acfa:	687b      	ldr	r3, [r7, #4]
   1acfc:	212c      	movs	r1, #44	; 0x2c
   1acfe:	fb01 f303 	mul.w	r3, r1, r3
   1ad02:	18d3      	adds	r3, r2, r3
   1ad04:	3328      	adds	r3, #40	; 0x28
   1ad06:	681b      	ldr	r3, [r3, #0]
   1ad08:	2b01      	cmp	r3, #1
   1ad0a:	f040 8100 	bne.w	1af0e <AddModifyRecordEnd+0x2ae>
   1ad0e:	683b      	ldr	r3, [r7, #0]
   1ad10:	2b01      	cmp	r3, #1
   1ad12:	f040 80c6 	bne.w	1aea2 <AddModifyRecordEnd+0x242>
   1ad16:	2300      	movs	r3, #0
   1ad18:	62bb      	str	r3, [r7, #40]	; 0x28
   1ad1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ad1c:	4618      	mov	r0, r3
   1ad1e:	f005 ff7d 	bl	20c1c <PageAlloc>
   1ad22:	6378      	str	r0, [r7, #52]	; 0x34
   1ad24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ad26:	2b00      	cmp	r3, #0
   1ad28:	f000 80b7 	beq.w	1ae9a <AddModifyRecordEnd+0x23a>
   1ad2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1ad2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1ad30:	2201      	movs	r2, #1
   1ad32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ad34:	f005 fe10 	bl	20958 <FS_read>
   1ad38:	6278      	str	r0, [r7, #36]	; 0x24
   1ad3a:	e00f      	b.n	1ad5c <AddModifyRecordEnd+0xfc>
   1ad3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ad3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1ad40:	18d3      	adds	r3, r2, r3
   1ad42:	f107 021c 	add.w	r2, r7, #28
   1ad46:	4610      	mov	r0, r2
   1ad48:	4619      	mov	r1, r3
   1ad4a:	2204      	movs	r2, #4
   1ad4c:	f7ed ef94 	blx	8c78 <_init+0x118>
   1ad50:	69fb      	ldr	r3, [r7, #28]
   1ad52:	461a      	mov	r2, r3
   1ad54:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ad56:	18d3      	adds	r3, r2, r3
   1ad58:	3304      	adds	r3, #4
   1ad5a:	62bb      	str	r3, [r7, #40]	; 0x28
   1ad5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ad5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ad60:	429a      	cmp	r2, r3
   1ad62:	dbeb      	blt.n	1ad3c <AddModifyRecordEnd+0xdc>
   1ad64:	69fb      	ldr	r3, [r7, #28]
   1ad66:	3304      	adds	r3, #4
   1ad68:	643b      	str	r3, [r7, #64]	; 0x40
   1ad6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ad6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ad6e:	1ad3      	subs	r3, r2, r3
   1ad70:	2b00      	cmp	r3, #0
   1ad72:	f2c0 8092 	blt.w	1ae9a <AddModifyRecordEnd+0x23a>
   1ad76:	68bb      	ldr	r3, [r7, #8]
   1ad78:	2b00      	cmp	r3, #0
   1ad7a:	f2c0 808e 	blt.w	1ae9a <AddModifyRecordEnd+0x23a>
   1ad7e:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1ad82:	4618      	mov	r0, r3
   1ad84:	4bdd      	ldr	r3, [pc, #884]	; (1b0fc <AddModifyRecordEnd+0x49c>)
   1ad86:	447b      	add	r3, pc
   1ad88:	4619      	mov	r1, r3
   1ad8a:	697a      	ldr	r2, [r7, #20]
   1ad8c:	4bdc      	ldr	r3, [pc, #880]	; (1b100 <AddModifyRecordEnd+0x4a0>)
   1ad8e:	447b      	add	r3, pc
   1ad90:	f7ed ef90 	blx	8cb4 <_init+0x154>
   1ad94:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1ad98:	4618      	mov	r0, r3
   1ad9a:	f005 fd31 	bl	20800 <FS_exist>
   1ad9e:	63f8      	str	r0, [r7, #60]	; 0x3c
   1ada0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ada2:	2b02      	cmp	r3, #2
   1ada4:	d104      	bne.n	1adb0 <AddModifyRecordEnd+0x150>
   1ada6:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1adaa:	4618      	mov	r0, r3
   1adac:	f005 fe54 	bl	20a58 <FS_unlink>
   1adb0:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1adb4:	4618      	mov	r0, r3
   1adb6:	4bd3      	ldr	r3, [pc, #844]	; (1b104 <AddModifyRecordEnd+0x4a4>)
   1adb8:	447b      	add	r3, pc
   1adba:	4619      	mov	r1, r3
   1adbc:	f005 fda2 	bl	20904 <FS_open>
   1adc0:	6338      	str	r0, [r7, #48]	; 0x30
   1adc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1adc4:	2100      	movs	r1, #0
   1adc6:	2200      	movs	r2, #0
   1adc8:	f005 fe1c 	bl	20a04 <FS_seek>
   1adcc:	63f8      	str	r0, [r7, #60]	; 0x3c
   1adce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1add0:	2b02      	cmp	r3, #2
   1add2:	d15a      	bne.n	1ae8a <AddModifyRecordEnd+0x22a>
   1add4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1add6:	2b01      	cmp	r3, #1
   1add8:	d005      	beq.n	1ade6 <AddModifyRecordEnd+0x186>
   1adda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1addc:	2b00      	cmp	r3, #0
   1adde:	d154      	bne.n	1ae8a <AddModifyRecordEnd+0x22a>
   1ade0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ade2:	2b00      	cmp	r3, #0
   1ade4:	d151      	bne.n	1ae8a <AddModifyRecordEnd+0x22a>
   1ade6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ade8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1adea:	1ad3      	subs	r3, r2, r3
   1adec:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1adee:	4619      	mov	r1, r3
   1adf0:	2201      	movs	r2, #1
   1adf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1adf4:	f005 fe88 	bl	20b08 <FS_write>
   1adf8:	6278      	str	r0, [r7, #36]	; 0x24
   1adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1adfc:	2b01      	cmp	r3, #1
   1adfe:	d006      	beq.n	1ae0e <AddModifyRecordEnd+0x1ae>
   1ae00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ae02:	2b00      	cmp	r3, #0
   1ae04:	d10c      	bne.n	1ae20 <AddModifyRecordEnd+0x1c0>
   1ae06:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ae08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ae0a:	429a      	cmp	r2, r3
   1ae0c:	d108      	bne.n	1ae20 <AddModifyRecordEnd+0x1c0>
   1ae0e:	f107 0308 	add.w	r3, r7, #8
   1ae12:	4618      	mov	r0, r3
   1ae14:	2104      	movs	r1, #4
   1ae16:	2201      	movs	r2, #1
   1ae18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ae1a:	f005 fe75 	bl	20b08 <FS_write>
   1ae1e:	6278      	str	r0, [r7, #36]	; 0x24
   1ae20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ae22:	2b01      	cmp	r3, #1
   1ae24:	d107      	bne.n	1ae36 <AddModifyRecordEnd+0x1d6>
   1ae26:	68bb      	ldr	r3, [r7, #8]
   1ae28:	68f8      	ldr	r0, [r7, #12]
   1ae2a:	4619      	mov	r1, r3
   1ae2c:	2201      	movs	r2, #1
   1ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ae30:	f005 fe6a 	bl	20b08 <FS_write>
   1ae34:	6278      	str	r0, [r7, #36]	; 0x24
   1ae36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ae38:	2b01      	cmp	r3, #1
   1ae3a:	d005      	beq.n	1ae48 <AddModifyRecordEnd+0x1e8>
   1ae3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ae3e:	2b00      	cmp	r3, #0
   1ae40:	d123      	bne.n	1ae8a <AddModifyRecordEnd+0x22a>
   1ae42:	68bb      	ldr	r3, [r7, #8]
   1ae44:	2b00      	cmp	r3, #0
   1ae46:	d120      	bne.n	1ae8a <AddModifyRecordEnd+0x22a>
   1ae48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1ae4a:	f005 fc7f 	bl	2074c <FS_close>
   1ae4e:	2300      	movs	r3, #0
   1ae50:	62fb      	str	r3, [r7, #44]	; 0x2c
   1ae52:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1ae56:	4618      	mov	r0, r3
   1ae58:	f005 fdfe 	bl	20a58 <FS_unlink>
   1ae5c:	63f8      	str	r0, [r7, #60]	; 0x3c
   1ae5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ae60:	2b02      	cmp	r3, #2
   1ae62:	d112      	bne.n	1ae8a <AddModifyRecordEnd+0x22a>
   1ae64:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1ae66:	f005 fc71 	bl	2074c <FS_close>
   1ae6a:	2300      	movs	r3, #0
   1ae6c:	633b      	str	r3, [r7, #48]	; 0x30
   1ae6e:	f107 0268 	add.w	r2, r7, #104	; 0x68
   1ae72:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1ae76:	4610      	mov	r0, r2
   1ae78:	4619      	mov	r1, r3
   1ae7a:	f005 fd99 	bl	209b0 <FS_rename>
   1ae7e:	63f8      	str	r0, [r7, #60]	; 0x3c
   1ae80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ae82:	2b02      	cmp	r3, #2
   1ae84:	d101      	bne.n	1ae8a <AddModifyRecordEnd+0x22a>
   1ae86:	230a      	movs	r3, #10
   1ae88:	623b      	str	r3, [r7, #32]
   1ae8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ae8c:	2b00      	cmp	r3, #0
   1ae8e:	d004      	beq.n	1ae9a <AddModifyRecordEnd+0x23a>
   1ae90:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1ae92:	f005 fc5b 	bl	2074c <FS_close>
   1ae96:	2300      	movs	r3, #0
   1ae98:	633b      	str	r3, [r7, #48]	; 0x30
   1ae9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1ae9c:	f005 fee8 	bl	20c70 <PageFree>
   1aea0:	e10a      	b.n	1b0b8 <AddModifyRecordEnd+0x458>
   1aea2:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1aea6:	4618      	mov	r0, r3
   1aea8:	4b97      	ldr	r3, [pc, #604]	; (1b108 <AddModifyRecordEnd+0x4a8>)
   1aeaa:	447b      	add	r3, pc
   1aeac:	4619      	mov	r1, r3
   1aeae:	f005 fd29 	bl	20904 <FS_open>
   1aeb2:	62f8      	str	r0, [r7, #44]	; 0x2c
   1aeb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aeb6:	2b00      	cmp	r3, #0
   1aeb8:	d102      	bne.n	1aec0 <AddModifyRecordEnd+0x260>
   1aeba:	2313      	movs	r3, #19
   1aebc:	623b      	str	r3, [r7, #32]
   1aebe:	e0fb      	b.n	1b0b8 <AddModifyRecordEnd+0x458>
   1aec0:	f107 0308 	add.w	r3, r7, #8
   1aec4:	4618      	mov	r0, r3
   1aec6:	2104      	movs	r1, #4
   1aec8:	2201      	movs	r2, #1
   1aeca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aecc:	f005 fe1c 	bl	20b08 <FS_write>
   1aed0:	6278      	str	r0, [r7, #36]	; 0x24
   1aed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aed4:	2b01      	cmp	r3, #1
   1aed6:	d107      	bne.n	1aee8 <AddModifyRecordEnd+0x288>
   1aed8:	68bb      	ldr	r3, [r7, #8]
   1aeda:	68f8      	ldr	r0, [r7, #12]
   1aedc:	4619      	mov	r1, r3
   1aede:	2201      	movs	r2, #1
   1aee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aee2:	f005 fe11 	bl	20b08 <FS_write>
   1aee6:	6278      	str	r0, [r7, #36]	; 0x24
   1aee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aeea:	2b01      	cmp	r3, #1
   1aeec:	d007      	beq.n	1aefe <AddModifyRecordEnd+0x29e>
   1aeee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aef0:	2b00      	cmp	r3, #0
   1aef2:	f040 80e1 	bne.w	1b0b8 <AddModifyRecordEnd+0x458>
   1aef6:	68bb      	ldr	r3, [r7, #8]
   1aef8:	2b00      	cmp	r3, #0
   1aefa:	f040 80dd 	bne.w	1b0b8 <AddModifyRecordEnd+0x458>
   1aefe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1af00:	f005 fc24 	bl	2074c <FS_close>
   1af04:	2300      	movs	r3, #0
   1af06:	62fb      	str	r3, [r7, #44]	; 0x2c
   1af08:	230a      	movs	r3, #10
   1af0a:	623b      	str	r3, [r7, #32]
   1af0c:	e0d4      	b.n	1b0b8 <AddModifyRecordEnd+0x458>
   1af0e:	683b      	ldr	r3, [r7, #0]
   1af10:	2b01      	cmp	r3, #1
   1af12:	f040 80a5 	bne.w	1b060 <AddModifyRecordEnd+0x400>
   1af16:	68bb      	ldr	r3, [r7, #8]
   1af18:	643b      	str	r3, [r7, #64]	; 0x40
   1af1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1af1c:	2b00      	cmp	r3, #0
   1af1e:	f2c0 80cb 	blt.w	1b0b8 <AddModifyRecordEnd+0x458>
   1af22:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1af24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1af26:	1ad3      	subs	r3, r2, r3
   1af28:	2b00      	cmp	r3, #0
   1af2a:	f2c0 80c5 	blt.w	1b0b8 <AddModifyRecordEnd+0x458>
   1af2e:	68bb      	ldr	r3, [r7, #8]
   1af30:	2b00      	cmp	r3, #0
   1af32:	f2c0 80c1 	blt.w	1b0b8 <AddModifyRecordEnd+0x458>
   1af36:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1af3a:	4618      	mov	r0, r3
   1af3c:	4b73      	ldr	r3, [pc, #460]	; (1b10c <AddModifyRecordEnd+0x4ac>)
   1af3e:	447b      	add	r3, pc
   1af40:	4619      	mov	r1, r3
   1af42:	697a      	ldr	r2, [r7, #20]
   1af44:	4b72      	ldr	r3, [pc, #456]	; (1b110 <AddModifyRecordEnd+0x4b0>)
   1af46:	447b      	add	r3, pc
   1af48:	f7ed eeb4 	blx	8cb4 <_init+0x154>
   1af4c:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1af50:	4618      	mov	r0, r3
   1af52:	f005 fc55 	bl	20800 <FS_exist>
   1af56:	63f8      	str	r0, [r7, #60]	; 0x3c
   1af58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1af5a:	2b02      	cmp	r3, #2
   1af5c:	d104      	bne.n	1af68 <AddModifyRecordEnd+0x308>
   1af5e:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1af62:	4618      	mov	r0, r3
   1af64:	f005 fd78 	bl	20a58 <FS_unlink>
   1af68:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1af6c:	4618      	mov	r0, r3
   1af6e:	4b69      	ldr	r3, [pc, #420]	; (1b114 <AddModifyRecordEnd+0x4b4>)
   1af70:	447b      	add	r3, pc
   1af72:	4619      	mov	r1, r3
   1af74:	f005 fcc6 	bl	20904 <FS_open>
   1af78:	6338      	str	r0, [r7, #48]	; 0x30
   1af7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1af7c:	2100      	movs	r1, #0
   1af7e:	2200      	movs	r2, #0
   1af80:	f005 fd40 	bl	20a04 <FS_seek>
   1af84:	63f8      	str	r0, [r7, #60]	; 0x3c
   1af86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1af88:	2b02      	cmp	r3, #2
   1af8a:	d160      	bne.n	1b04e <AddModifyRecordEnd+0x3ee>
   1af8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1af8e:	4618      	mov	r0, r3
   1af90:	f005 fe44 	bl	20c1c <PageAlloc>
   1af94:	6378      	str	r0, [r7, #52]	; 0x34
   1af96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1af98:	2b00      	cmp	r3, #0
   1af9a:	d055      	beq.n	1b048 <AddModifyRecordEnd+0x3e8>
   1af9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1af9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1afa0:	2201      	movs	r2, #1
   1afa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1afa4:	f005 fcd8 	bl	20958 <FS_read>
   1afa8:	6278      	str	r0, [r7, #36]	; 0x24
   1afaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1afac:	2b01      	cmp	r3, #1
   1afae:	d005      	beq.n	1afbc <AddModifyRecordEnd+0x35c>
   1afb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1afb2:	2b00      	cmp	r3, #0
   1afb4:	d148      	bne.n	1b048 <AddModifyRecordEnd+0x3e8>
   1afb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1afb8:	2b00      	cmp	r3, #0
   1afba:	d145      	bne.n	1b048 <AddModifyRecordEnd+0x3e8>
   1afbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1afbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1afc0:	1ad3      	subs	r3, r2, r3
   1afc2:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1afc4:	4619      	mov	r1, r3
   1afc6:	2201      	movs	r2, #1
   1afc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1afca:	f005 fd9d 	bl	20b08 <FS_write>
   1afce:	6278      	str	r0, [r7, #36]	; 0x24
   1afd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1afd2:	2b01      	cmp	r3, #1
   1afd4:	d006      	beq.n	1afe4 <AddModifyRecordEnd+0x384>
   1afd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1afd8:	2b00      	cmp	r3, #0
   1afda:	d10b      	bne.n	1aff4 <AddModifyRecordEnd+0x394>
   1afdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1afde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1afe0:	429a      	cmp	r2, r3
   1afe2:	d107      	bne.n	1aff4 <AddModifyRecordEnd+0x394>
   1afe4:	68bb      	ldr	r3, [r7, #8]
   1afe6:	68f8      	ldr	r0, [r7, #12]
   1afe8:	4619      	mov	r1, r3
   1afea:	2201      	movs	r2, #1
   1afec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1afee:	f005 fd8b 	bl	20b08 <FS_write>
   1aff2:	6278      	str	r0, [r7, #36]	; 0x24
   1aff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aff6:	2b01      	cmp	r3, #1
   1aff8:	d005      	beq.n	1b006 <AddModifyRecordEnd+0x3a6>
   1affa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1affc:	2b00      	cmp	r3, #0
   1affe:	d123      	bne.n	1b048 <AddModifyRecordEnd+0x3e8>
   1b000:	68bb      	ldr	r3, [r7, #8]
   1b002:	2b00      	cmp	r3, #0
   1b004:	d120      	bne.n	1b048 <AddModifyRecordEnd+0x3e8>
   1b006:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1b008:	f005 fba0 	bl	2074c <FS_close>
   1b00c:	2300      	movs	r3, #0
   1b00e:	62fb      	str	r3, [r7, #44]	; 0x2c
   1b010:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1b014:	4618      	mov	r0, r3
   1b016:	f005 fd1f 	bl	20a58 <FS_unlink>
   1b01a:	63f8      	str	r0, [r7, #60]	; 0x3c
   1b01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b01e:	2b02      	cmp	r3, #2
   1b020:	d112      	bne.n	1b048 <AddModifyRecordEnd+0x3e8>
   1b022:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1b024:	f005 fb92 	bl	2074c <FS_close>
   1b028:	2300      	movs	r3, #0
   1b02a:	633b      	str	r3, [r7, #48]	; 0x30
   1b02c:	f107 0268 	add.w	r2, r7, #104	; 0x68
   1b030:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1b034:	4610      	mov	r0, r2
   1b036:	4619      	mov	r1, r3
   1b038:	f005 fcba 	bl	209b0 <FS_rename>
   1b03c:	63f8      	str	r0, [r7, #60]	; 0x3c
   1b03e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b040:	2b02      	cmp	r3, #2
   1b042:	d101      	bne.n	1b048 <AddModifyRecordEnd+0x3e8>
   1b044:	230a      	movs	r3, #10
   1b046:	623b      	str	r3, [r7, #32]
   1b048:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1b04a:	f005 fe11 	bl	20c70 <PageFree>
   1b04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b050:	2b00      	cmp	r3, #0
   1b052:	d031      	beq.n	1b0b8 <AddModifyRecordEnd+0x458>
   1b054:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1b056:	f005 fb79 	bl	2074c <FS_close>
   1b05a:	2300      	movs	r3, #0
   1b05c:	633b      	str	r3, [r7, #48]	; 0x30
   1b05e:	e02b      	b.n	1b0b8 <AddModifyRecordEnd+0x458>
   1b060:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1b062:	f005 fb73 	bl	2074c <FS_close>
   1b066:	2300      	movs	r3, #0
   1b068:	62fb      	str	r3, [r7, #44]	; 0x2c
   1b06a:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1b06e:	4618      	mov	r0, r3
   1b070:	4b29      	ldr	r3, [pc, #164]	; (1b118 <AddModifyRecordEnd+0x4b8>)
   1b072:	447b      	add	r3, pc
   1b074:	4619      	mov	r1, r3
   1b076:	f005 fc45 	bl	20904 <FS_open>
   1b07a:	62f8      	str	r0, [r7, #44]	; 0x2c
   1b07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b07e:	2b00      	cmp	r3, #0
   1b080:	d102      	bne.n	1b088 <AddModifyRecordEnd+0x428>
   1b082:	2313      	movs	r3, #19
   1b084:	623b      	str	r3, [r7, #32]
   1b086:	e017      	b.n	1b0b8 <AddModifyRecordEnd+0x458>
   1b088:	68bb      	ldr	r3, [r7, #8]
   1b08a:	68f8      	ldr	r0, [r7, #12]
   1b08c:	4619      	mov	r1, r3
   1b08e:	2201      	movs	r2, #1
   1b090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b092:	f005 fd39 	bl	20b08 <FS_write>
   1b096:	6278      	str	r0, [r7, #36]	; 0x24
   1b098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b09a:	2b01      	cmp	r3, #1
   1b09c:	d005      	beq.n	1b0aa <AddModifyRecordEnd+0x44a>
   1b09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b0a0:	2b00      	cmp	r3, #0
   1b0a2:	d109      	bne.n	1b0b8 <AddModifyRecordEnd+0x458>
   1b0a4:	68bb      	ldr	r3, [r7, #8]
   1b0a6:	2b00      	cmp	r3, #0
   1b0a8:	d106      	bne.n	1b0b8 <AddModifyRecordEnd+0x458>
   1b0aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1b0ac:	f005 fb4e 	bl	2074c <FS_close>
   1b0b0:	2300      	movs	r3, #0
   1b0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   1b0b4:	230a      	movs	r3, #10
   1b0b6:	623b      	str	r3, [r7, #32]
   1b0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b0ba:	2b00      	cmp	r3, #0
   1b0bc:	d004      	beq.n	1b0c8 <AddModifyRecordEnd+0x468>
   1b0be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1b0c0:	f005 fb44 	bl	2074c <FS_close>
   1b0c4:	2300      	movs	r3, #0
   1b0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   1b0c8:	6a3b      	ldr	r3, [r7, #32]
   1b0ca:	4618      	mov	r0, r3
   1b0cc:	4b07      	ldr	r3, [pc, #28]	; (1b0ec <AddModifyRecordEnd+0x48c>)
   1b0ce:	58e3      	ldr	r3, [r4, r3]
   1b0d0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1b0d4:	681b      	ldr	r3, [r3, #0]
   1b0d6:	429a      	cmp	r2, r3
   1b0d8:	d001      	beq.n	1b0de <AddModifyRecordEnd+0x47e>
   1b0da:	f7ed ff63 	bl	8fa4 <__stack_chk_fail>
   1b0de:	f107 0794 	add.w	r7, r7, #148	; 0x94
   1b0e2:	46bd      	mov	sp, r7
   1b0e4:	bd90      	pop	{r4, r7, pc}
   1b0e6:	bf00      	nop
   1b0e8:	00014496 	.word	0x00014496
   1b0ec:	000000ac 	.word	0x000000ac
   1b0f0:	0000b4aa 	.word	0x0000b4aa
   1b0f4:	0000b4ac 	.word	0x0000b4ac
   1b0f8:	000000c0 	.word	0x000000c0
   1b0fc:	0000b3ce 	.word	0x0000b3ce
   1b100:	0000b3e2 	.word	0x0000b3e2
   1b104:	0000b3b0 	.word	0x0000b3b0
   1b108:	0000b2be 	.word	0x0000b2be
   1b10c:	0000b216 	.word	0x0000b216
   1b110:	0000b22a 	.word	0x0000b22a
   1b114:	0000b1f8 	.word	0x0000b1f8
   1b118:	0000b0f6 	.word	0x0000b0f6

0001b11c <AddModifyRecordEndWithCkecksum>:
   1b11c:	b590      	push	{r4, r7, lr}
   1b11e:	b0bf      	sub	sp, #252	; 0xfc
   1b120:	af00      	add	r7, sp, #0
   1b122:	6178      	str	r0, [r7, #20]
   1b124:	6139      	str	r1, [r7, #16]
   1b126:	60fa      	str	r2, [r7, #12]
   1b128:	60bb      	str	r3, [r7, #8]
   1b12a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
   1b12e:	607b      	str	r3, [r7, #4]
   1b130:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   1b134:	603b      	str	r3, [r7, #0]
   1b136:	4cf7      	ldr	r4, [pc, #988]	; (1b514 <AddModifyRecordEndWithCkecksum+0x3f8>)
   1b138:	447c      	add	r4, pc
   1b13a:	4bf7      	ldr	r3, [pc, #988]	; (1b518 <AddModifyRecordEndWithCkecksum+0x3fc>)
   1b13c:	58e3      	ldr	r3, [r4, r3]
   1b13e:	681b      	ldr	r3, [r3, #0]
   1b140:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
   1b144:	2300      	movs	r3, #0
   1b146:	61fb      	str	r3, [r7, #28]
   1b148:	2318      	movs	r3, #24
   1b14a:	627b      	str	r3, [r7, #36]	; 0x24
   1b14c:	2300      	movs	r3, #0
   1b14e:	63bb      	str	r3, [r7, #56]	; 0x38
   1b150:	2300      	movs	r3, #0
   1b152:	633b      	str	r3, [r7, #48]	; 0x30
   1b154:	2300      	movs	r3, #0
   1b156:	637b      	str	r3, [r7, #52]	; 0x34
   1b158:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1b15c:	4618      	mov	r0, r3
   1b15e:	4bef      	ldr	r3, [pc, #956]	; (1b51c <AddModifyRecordEndWithCkecksum+0x400>)
   1b160:	447b      	add	r3, pc
   1b162:	4619      	mov	r1, r3
   1b164:	697a      	ldr	r2, [r7, #20]
   1b166:	693b      	ldr	r3, [r7, #16]
   1b168:	f7ed eda4 	blx	8cb4 <_init+0x154>
   1b16c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1b170:	4618      	mov	r0, r3
   1b172:	4beb      	ldr	r3, [pc, #940]	; (1b520 <AddModifyRecordEndWithCkecksum+0x404>)
   1b174:	447b      	add	r3, pc
   1b176:	4619      	mov	r1, r3
   1b178:	f005 fbc4 	bl	20904 <FS_open>
   1b17c:	6338      	str	r0, [r7, #48]	; 0x30
   1b17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b180:	2b00      	cmp	r3, #0
   1b182:	d102      	bne.n	1b18a <AddModifyRecordEndWithCkecksum+0x6e>
   1b184:	2313      	movs	r3, #19
   1b186:	627b      	str	r3, [r7, #36]	; 0x24
   1b188:	e1b4      	b.n	1b4f4 <AddModifyRecordEndWithCkecksum+0x3d8>
   1b18a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1b18c:	f005 fb64 	bl	20858 <FS_length>
   1b190:	63f8      	str	r0, [r7, #60]	; 0x3c
   1b192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b194:	4618      	mov	r0, r3
   1b196:	f005 fd41 	bl	20c1c <PageAlloc>
   1b19a:	63b8      	str	r0, [r7, #56]	; 0x38
   1b19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b19e:	2b00      	cmp	r3, #0
   1b1a0:	f000 819b 	beq.w	1b4da <AddModifyRecordEndWithCkecksum+0x3be>
   1b1a4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
   1b1a8:	4618      	mov	r0, r3
   1b1aa:	4bde      	ldr	r3, [pc, #888]	; (1b524 <AddModifyRecordEndWithCkecksum+0x408>)
   1b1ac:	447b      	add	r3, pc
   1b1ae:	4619      	mov	r1, r3
   1b1b0:	697a      	ldr	r2, [r7, #20]
   1b1b2:	4bdd      	ldr	r3, [pc, #884]	; (1b528 <AddModifyRecordEndWithCkecksum+0x40c>)
   1b1b4:	447b      	add	r3, pc
   1b1b6:	f7ed ed7e 	blx	8cb4 <_init+0x154>
   1b1ba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
   1b1be:	4618      	mov	r0, r3
   1b1c0:	f005 fb1e 	bl	20800 <FS_exist>
   1b1c4:	6438      	str	r0, [r7, #64]	; 0x40
   1b1c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b1c8:	2b02      	cmp	r3, #2
   1b1ca:	d104      	bne.n	1b1d6 <AddModifyRecordEndWithCkecksum+0xba>
   1b1cc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
   1b1d0:	4618      	mov	r0, r3
   1b1d2:	f005 fc41 	bl	20a58 <FS_unlink>
   1b1d6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
   1b1da:	4618      	mov	r0, r3
   1b1dc:	4bd3      	ldr	r3, [pc, #844]	; (1b52c <AddModifyRecordEndWithCkecksum+0x410>)
   1b1de:	447b      	add	r3, pc
   1b1e0:	4619      	mov	r1, r3
   1b1e2:	f005 fb8f 	bl	20904 <FS_open>
   1b1e6:	6378      	str	r0, [r7, #52]	; 0x34
   1b1e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1b1ea:	2100      	movs	r1, #0
   1b1ec:	2200      	movs	r2, #0
   1b1ee:	f005 fc09 	bl	20a04 <FS_seek>
   1b1f2:	6438      	str	r0, [r7, #64]	; 0x40
   1b1f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b1f6:	2b02      	cmp	r3, #2
   1b1f8:	f040 8166 	bne.w	1b4c8 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b1fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1b1fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1b200:	2201      	movs	r2, #1
   1b202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b204:	f005 fba8 	bl	20958 <FS_read>
   1b208:	62b8      	str	r0, [r7, #40]	; 0x28
   1b20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b20c:	2b01      	cmp	r3, #1
   1b20e:	d007      	beq.n	1b220 <AddModifyRecordEndWithCkecksum+0x104>
   1b210:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b212:	2b00      	cmp	r3, #0
   1b214:	f040 8158 	bne.w	1b4c8 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b21a:	2b00      	cmp	r3, #0
   1b21c:	f040 8154 	bne.w	1b4c8 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b220:	4bc3      	ldr	r3, [pc, #780]	; (1b530 <AddModifyRecordEndWithCkecksum+0x414>)
   1b222:	58e3      	ldr	r3, [r4, r3]
   1b224:	461a      	mov	r2, r3
   1b226:	687b      	ldr	r3, [r7, #4]
   1b228:	212c      	movs	r1, #44	; 0x2c
   1b22a:	fb01 f303 	mul.w	r3, r1, r3
   1b22e:	18d3      	adds	r3, r2, r3
   1b230:	3328      	adds	r3, #40	; 0x28
   1b232:	681b      	ldr	r3, [r3, #0]
   1b234:	2b01      	cmp	r3, #1
   1b236:	f040 80bf 	bne.w	1b3b8 <AddModifyRecordEndWithCkecksum+0x29c>
   1b23a:	2300      	movs	r3, #0
   1b23c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1b23e:	e00f      	b.n	1b260 <AddModifyRecordEndWithCkecksum+0x144>
   1b240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b242:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1b244:	18d3      	adds	r3, r2, r3
   1b246:	f107 021c 	add.w	r2, r7, #28
   1b24a:	4610      	mov	r0, r2
   1b24c:	4619      	mov	r1, r3
   1b24e:	2204      	movs	r2, #4
   1b250:	f7ed ed12 	blx	8c78 <_init+0x118>
   1b254:	69fb      	ldr	r3, [r7, #28]
   1b256:	461a      	mov	r2, r3
   1b258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b25a:	18d3      	adds	r3, r2, r3
   1b25c:	3304      	adds	r3, #4
   1b25e:	62fb      	str	r3, [r7, #44]	; 0x2c
   1b260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b262:	f1a3 0210 	sub.w	r2, r3, #16
   1b266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b268:	429a      	cmp	r2, r3
   1b26a:	dce9      	bgt.n	1b240 <AddModifyRecordEndWithCkecksum+0x124>
   1b26c:	683b      	ldr	r3, [r7, #0]
   1b26e:	2b01      	cmp	r3, #1
   1b270:	d103      	bne.n	1b27a <AddModifyRecordEndWithCkecksum+0x15e>
   1b272:	69fb      	ldr	r3, [r7, #28]
   1b274:	3304      	adds	r3, #4
   1b276:	623b      	str	r3, [r7, #32]
   1b278:	e001      	b.n	1b27e <AddModifyRecordEndWithCkecksum+0x162>
   1b27a:	2300      	movs	r3, #0
   1b27c:	623b      	str	r3, [r7, #32]
   1b27e:	6a3b      	ldr	r3, [r7, #32]
   1b280:	2b00      	cmp	r3, #0
   1b282:	f2c0 8121 	blt.w	1b4c8 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b288:	f1a3 0210 	sub.w	r2, r3, #16
   1b28c:	6a3b      	ldr	r3, [r7, #32]
   1b28e:	1ad3      	subs	r3, r2, r3
   1b290:	2b00      	cmp	r3, #0
   1b292:	f2c0 8119 	blt.w	1b4c8 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b296:	68bb      	ldr	r3, [r7, #8]
   1b298:	2b00      	cmp	r3, #0
   1b29a:	f2c0 8115 	blt.w	1b4c8 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b29e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b2a0:	f1a3 0210 	sub.w	r2, r3, #16
   1b2a4:	6a3b      	ldr	r3, [r7, #32]
   1b2a6:	1ad3      	subs	r3, r2, r3
   1b2a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1b2aa:	4619      	mov	r1, r3
   1b2ac:	2201      	movs	r2, #1
   1b2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b2b0:	f005 fc2a 	bl	20b08 <FS_write>
   1b2b4:	62b8      	str	r0, [r7, #40]	; 0x28
   1b2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2b8:	2b01      	cmp	r3, #1
   1b2ba:	d008      	beq.n	1b2ce <AddModifyRecordEndWithCkecksum+0x1b2>
   1b2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2be:	2b00      	cmp	r3, #0
   1b2c0:	d10e      	bne.n	1b2e0 <AddModifyRecordEndWithCkecksum+0x1c4>
   1b2c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b2c4:	f1a3 0210 	sub.w	r2, r3, #16
   1b2c8:	6a3b      	ldr	r3, [r7, #32]
   1b2ca:	429a      	cmp	r2, r3
   1b2cc:	d108      	bne.n	1b2e0 <AddModifyRecordEndWithCkecksum+0x1c4>
   1b2ce:	f107 0308 	add.w	r3, r7, #8
   1b2d2:	4618      	mov	r0, r3
   1b2d4:	2104      	movs	r1, #4
   1b2d6:	2201      	movs	r2, #1
   1b2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b2da:	f005 fc15 	bl	20b08 <FS_write>
   1b2de:	62b8      	str	r0, [r7, #40]	; 0x28
   1b2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2e2:	2b01      	cmp	r3, #1
   1b2e4:	d107      	bne.n	1b2f6 <AddModifyRecordEndWithCkecksum+0x1da>
   1b2e6:	68bb      	ldr	r3, [r7, #8]
   1b2e8:	68f8      	ldr	r0, [r7, #12]
   1b2ea:	4619      	mov	r1, r3
   1b2ec:	2201      	movs	r2, #1
   1b2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b2f0:	f005 fc0a 	bl	20b08 <FS_write>
   1b2f4:	62b8      	str	r0, [r7, #40]	; 0x28
   1b2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2f8:	2b01      	cmp	r3, #1
   1b2fa:	d007      	beq.n	1b30c <AddModifyRecordEndWithCkecksum+0x1f0>
   1b2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2fe:	2b00      	cmp	r3, #0
   1b300:	f040 80e2 	bne.w	1b4c8 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b304:	68bb      	ldr	r3, [r7, #8]
   1b306:	2b00      	cmp	r3, #0
   1b308:	f040 80de 	bne.w	1b4c8 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b30c:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1b310:	4618      	mov	r0, r3
   1b312:	f003 fe6b 	bl	1efec <md5_init>
   1b316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b318:	f1a3 0210 	sub.w	r2, r3, #16
   1b31c:	6a3b      	ldr	r3, [r7, #32]
   1b31e:	1ad3      	subs	r3, r2, r3
   1b320:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1b324:	4610      	mov	r0, r2
   1b326:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1b328:	461a      	mov	r2, r3
   1b32a:	f003 fe99 	bl	1f060 <md5_append>
   1b32e:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1b332:	f107 0308 	add.w	r3, r7, #8
   1b336:	4610      	mov	r0, r2
   1b338:	4619      	mov	r1, r3
   1b33a:	2204      	movs	r2, #4
   1b33c:	f003 fe90 	bl	1f060 <md5_append>
   1b340:	68bb      	ldr	r3, [r7, #8]
   1b342:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1b346:	4610      	mov	r0, r2
   1b348:	68f9      	ldr	r1, [r7, #12]
   1b34a:	461a      	mov	r2, r3
   1b34c:	f003 fe88 	bl	1f060 <md5_append>
   1b350:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1b354:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1b358:	4610      	mov	r0, r2
   1b35a:	4619      	mov	r1, r3
   1b35c:	f003 ff0c 	bl	1f178 <md5_finish>
   1b360:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1b364:	4618      	mov	r0, r3
   1b366:	2110      	movs	r1, #16
   1b368:	2201      	movs	r2, #1
   1b36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b36c:	f005 fbcc 	bl	20b08 <FS_write>
   1b370:	62b8      	str	r0, [r7, #40]	; 0x28
   1b372:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1b374:	f005 f9ea 	bl	2074c <FS_close>
   1b378:	2300      	movs	r3, #0
   1b37a:	633b      	str	r3, [r7, #48]	; 0x30
   1b37c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1b380:	4618      	mov	r0, r3
   1b382:	f005 fb69 	bl	20a58 <FS_unlink>
   1b386:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1b388:	f005 f9e0 	bl	2074c <FS_close>
   1b38c:	2300      	movs	r3, #0
   1b38e:	637b      	str	r3, [r7, #52]	; 0x34
   1b390:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
   1b394:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1b398:	4610      	mov	r0, r2
   1b39a:	4619      	mov	r1, r3
   1b39c:	f005 fb08 	bl	209b0 <FS_rename>
   1b3a0:	6438      	str	r0, [r7, #64]	; 0x40
   1b3a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b3a4:	2b02      	cmp	r3, #2
   1b3a6:	f040 808f 	bne.w	1b4c8 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b3ac:	2b01      	cmp	r3, #1
   1b3ae:	f040 808b 	bne.w	1b4c8 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b3b2:	230a      	movs	r3, #10
   1b3b4:	627b      	str	r3, [r7, #36]	; 0x24
   1b3b6:	e087      	b.n	1b4c8 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b3b8:	683b      	ldr	r3, [r7, #0]
   1b3ba:	2b01      	cmp	r3, #1
   1b3bc:	d102      	bne.n	1b3c4 <AddModifyRecordEndWithCkecksum+0x2a8>
   1b3be:	68bb      	ldr	r3, [r7, #8]
   1b3c0:	623b      	str	r3, [r7, #32]
   1b3c2:	e001      	b.n	1b3c8 <AddModifyRecordEndWithCkecksum+0x2ac>
   1b3c4:	2300      	movs	r3, #0
   1b3c6:	623b      	str	r3, [r7, #32]
   1b3c8:	6a3b      	ldr	r3, [r7, #32]
   1b3ca:	2b00      	cmp	r3, #0
   1b3cc:	db7c      	blt.n	1b4c8 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b3d0:	f1a3 0210 	sub.w	r2, r3, #16
   1b3d4:	6a3b      	ldr	r3, [r7, #32]
   1b3d6:	1ad3      	subs	r3, r2, r3
   1b3d8:	2b00      	cmp	r3, #0
   1b3da:	db75      	blt.n	1b4c8 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b3dc:	68bb      	ldr	r3, [r7, #8]
   1b3de:	2b00      	cmp	r3, #0
   1b3e0:	db72      	blt.n	1b4c8 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b3e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b3e4:	f1a3 0210 	sub.w	r2, r3, #16
   1b3e8:	6a3b      	ldr	r3, [r7, #32]
   1b3ea:	1ad3      	subs	r3, r2, r3
   1b3ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1b3ee:	4619      	mov	r1, r3
   1b3f0:	2201      	movs	r2, #1
   1b3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b3f4:	f005 fb88 	bl	20b08 <FS_write>
   1b3f8:	62b8      	str	r0, [r7, #40]	; 0x28
   1b3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b3fc:	2b01      	cmp	r3, #1
   1b3fe:	d008      	beq.n	1b412 <AddModifyRecordEndWithCkecksum+0x2f6>
   1b400:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b402:	2b00      	cmp	r3, #0
   1b404:	d10d      	bne.n	1b422 <AddModifyRecordEndWithCkecksum+0x306>
   1b406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b408:	f1a3 0210 	sub.w	r2, r3, #16
   1b40c:	6a3b      	ldr	r3, [r7, #32]
   1b40e:	429a      	cmp	r2, r3
   1b410:	d107      	bne.n	1b422 <AddModifyRecordEndWithCkecksum+0x306>
   1b412:	68bb      	ldr	r3, [r7, #8]
   1b414:	68f8      	ldr	r0, [r7, #12]
   1b416:	4619      	mov	r1, r3
   1b418:	2201      	movs	r2, #1
   1b41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b41c:	f005 fb74 	bl	20b08 <FS_write>
   1b420:	62b8      	str	r0, [r7, #40]	; 0x28
   1b422:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b424:	2b01      	cmp	r3, #1
   1b426:	d005      	beq.n	1b434 <AddModifyRecordEndWithCkecksum+0x318>
   1b428:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b42a:	2b00      	cmp	r3, #0
   1b42c:	d14c      	bne.n	1b4c8 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b42e:	68bb      	ldr	r3, [r7, #8]
   1b430:	2b00      	cmp	r3, #0
   1b432:	d149      	bne.n	1b4c8 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b434:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1b438:	4618      	mov	r0, r3
   1b43a:	f003 fdd7 	bl	1efec <md5_init>
   1b43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b440:	f1a3 0210 	sub.w	r2, r3, #16
   1b444:	6a3b      	ldr	r3, [r7, #32]
   1b446:	1ad3      	subs	r3, r2, r3
   1b448:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1b44c:	4610      	mov	r0, r2
   1b44e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1b450:	461a      	mov	r2, r3
   1b452:	f003 fe05 	bl	1f060 <md5_append>
   1b456:	68bb      	ldr	r3, [r7, #8]
   1b458:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1b45c:	4610      	mov	r0, r2
   1b45e:	68f9      	ldr	r1, [r7, #12]
   1b460:	461a      	mov	r2, r3
   1b462:	f003 fdfd 	bl	1f060 <md5_append>
   1b466:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1b46a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1b46e:	4610      	mov	r0, r2
   1b470:	4619      	mov	r1, r3
   1b472:	f003 fe81 	bl	1f178 <md5_finish>
   1b476:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1b47a:	4618      	mov	r0, r3
   1b47c:	2110      	movs	r1, #16
   1b47e:	2201      	movs	r2, #1
   1b480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b482:	f005 fb41 	bl	20b08 <FS_write>
   1b486:	62b8      	str	r0, [r7, #40]	; 0x28
   1b488:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1b48a:	f005 f95f 	bl	2074c <FS_close>
   1b48e:	2300      	movs	r3, #0
   1b490:	633b      	str	r3, [r7, #48]	; 0x30
   1b492:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1b496:	4618      	mov	r0, r3
   1b498:	f005 fade 	bl	20a58 <FS_unlink>
   1b49c:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1b49e:	f005 f955 	bl	2074c <FS_close>
   1b4a2:	2300      	movs	r3, #0
   1b4a4:	637b      	str	r3, [r7, #52]	; 0x34
   1b4a6:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
   1b4aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1b4ae:	4610      	mov	r0, r2
   1b4b0:	4619      	mov	r1, r3
   1b4b2:	f005 fa7d 	bl	209b0 <FS_rename>
   1b4b6:	6438      	str	r0, [r7, #64]	; 0x40
   1b4b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b4ba:	2b02      	cmp	r3, #2
   1b4bc:	d104      	bne.n	1b4c8 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b4c0:	2b01      	cmp	r3, #1
   1b4c2:	d101      	bne.n	1b4c8 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b4c4:	230a      	movs	r3, #10
   1b4c6:	627b      	str	r3, [r7, #36]	; 0x24
   1b4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b4ca:	2b00      	cmp	r3, #0
   1b4cc:	d007      	beq.n	1b4de <AddModifyRecordEndWithCkecksum+0x3c2>
   1b4ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1b4d0:	f005 f93c 	bl	2074c <FS_close>
   1b4d4:	2300      	movs	r3, #0
   1b4d6:	637b      	str	r3, [r7, #52]	; 0x34
   1b4d8:	e001      	b.n	1b4de <AddModifyRecordEndWithCkecksum+0x3c2>
   1b4da:	2318      	movs	r3, #24
   1b4dc:	627b      	str	r3, [r7, #36]	; 0x24
   1b4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b4e0:	2b00      	cmp	r3, #0
   1b4e2:	d004      	beq.n	1b4ee <AddModifyRecordEndWithCkecksum+0x3d2>
   1b4e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1b4e6:	f005 f931 	bl	2074c <FS_close>
   1b4ea:	2300      	movs	r3, #0
   1b4ec:	633b      	str	r3, [r7, #48]	; 0x30
   1b4ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1b4f0:	f005 fbbe 	bl	20c70 <PageFree>
   1b4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b4f6:	4618      	mov	r0, r3
   1b4f8:	4b07      	ldr	r3, [pc, #28]	; (1b518 <AddModifyRecordEndWithCkecksum+0x3fc>)
   1b4fa:	58e3      	ldr	r3, [r4, r3]
   1b4fc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1b500:	681b      	ldr	r3, [r3, #0]
   1b502:	429a      	cmp	r2, r3
   1b504:	d001      	beq.n	1b50a <AddModifyRecordEndWithCkecksum+0x3ee>
   1b506:	f7ed fd4d 	bl	8fa4 <__stack_chk_fail>
   1b50a:	f107 07fc 	add.w	r7, r7, #252	; 0xfc
   1b50e:	46bd      	mov	sp, r7
   1b510:	bd90      	pop	{r4, r7, pc}
   1b512:	bf00      	nop
   1b514:	00013fdc 	.word	0x00013fdc
   1b518:	000000ac 	.word	0x000000ac
   1b51c:	0000aff4 	.word	0x0000aff4
   1b520:	0000aff8 	.word	0x0000aff8
   1b524:	0000afa8 	.word	0x0000afa8
   1b528:	0000afbc 	.word	0x0000afbc
   1b52c:	0000af8a 	.word	0x0000af8a
   1b530:	000000c0 	.word	0x000000c0

0001b534 <DeleteRecordBegin>:
   1b534:	b590      	push	{r4, r7, lr}
   1b536:	b0a1      	sub	sp, #132	; 0x84
   1b538:	af00      	add	r7, sp, #0
   1b53a:	60f8      	str	r0, [r7, #12]
   1b53c:	60b9      	str	r1, [r7, #8]
   1b53e:	607a      	str	r2, [r7, #4]
   1b540:	603b      	str	r3, [r7, #0]
   1b542:	4c91      	ldr	r4, [pc, #580]	; (1b788 <DeleteRecordBegin+0x254>)
   1b544:	447c      	add	r4, pc
   1b546:	4b91      	ldr	r3, [pc, #580]	; (1b78c <DeleteRecordBegin+0x258>)
   1b548:	58e3      	ldr	r3, [r4, r3]
   1b54a:	681b      	ldr	r3, [r3, #0]
   1b54c:	67fb      	str	r3, [r7, #124]	; 0x7c
   1b54e:	231a      	movs	r3, #26
   1b550:	61bb      	str	r3, [r7, #24]
   1b552:	2300      	movs	r3, #0
   1b554:	627b      	str	r3, [r7, #36]	; 0x24
   1b556:	2300      	movs	r3, #0
   1b558:	61fb      	str	r3, [r7, #28]
   1b55a:	2300      	movs	r3, #0
   1b55c:	623b      	str	r3, [r7, #32]
   1b55e:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1b562:	4618      	mov	r0, r3
   1b564:	4b8a      	ldr	r3, [pc, #552]	; (1b790 <DeleteRecordBegin+0x25c>)
   1b566:	447b      	add	r3, pc
   1b568:	4619      	mov	r1, r3
   1b56a:	68fa      	ldr	r2, [r7, #12]
   1b56c:	68bb      	ldr	r3, [r7, #8]
   1b56e:	f7ed eba2 	blx	8cb4 <_init+0x154>
   1b572:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1b576:	4618      	mov	r0, r3
   1b578:	4b86      	ldr	r3, [pc, #536]	; (1b794 <DeleteRecordBegin+0x260>)
   1b57a:	447b      	add	r3, pc
   1b57c:	4619      	mov	r1, r3
   1b57e:	f005 f9c1 	bl	20904 <FS_open>
   1b582:	61f8      	str	r0, [r7, #28]
   1b584:	69fb      	ldr	r3, [r7, #28]
   1b586:	2b00      	cmp	r3, #0
   1b588:	d102      	bne.n	1b590 <DeleteRecordBegin+0x5c>
   1b58a:	2313      	movs	r3, #19
   1b58c:	61bb      	str	r3, [r7, #24]
   1b58e:	e0ec      	b.n	1b76a <DeleteRecordBegin+0x236>
   1b590:	69f8      	ldr	r0, [r7, #28]
   1b592:	f005 f961 	bl	20858 <FS_length>
   1b596:	62b8      	str	r0, [r7, #40]	; 0x28
   1b598:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b59a:	4618      	mov	r0, r3
   1b59c:	f005 fb3e 	bl	20c1c <PageAlloc>
   1b5a0:	6278      	str	r0, [r7, #36]	; 0x24
   1b5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b5a4:	2b00      	cmp	r3, #0
   1b5a6:	f000 80d3 	beq.w	1b750 <DeleteRecordBegin+0x21c>
   1b5aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
   1b5ae:	4618      	mov	r0, r3
   1b5b0:	4b79      	ldr	r3, [pc, #484]	; (1b798 <DeleteRecordBegin+0x264>)
   1b5b2:	447b      	add	r3, pc
   1b5b4:	4619      	mov	r1, r3
   1b5b6:	68fa      	ldr	r2, [r7, #12]
   1b5b8:	4b78      	ldr	r3, [pc, #480]	; (1b79c <DeleteRecordBegin+0x268>)
   1b5ba:	447b      	add	r3, pc
   1b5bc:	f7ed eb7a 	blx	8cb4 <_init+0x154>
   1b5c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
   1b5c4:	4618      	mov	r0, r3
   1b5c6:	f005 f91b 	bl	20800 <FS_exist>
   1b5ca:	62f8      	str	r0, [r7, #44]	; 0x2c
   1b5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b5ce:	2b02      	cmp	r3, #2
   1b5d0:	d104      	bne.n	1b5dc <DeleteRecordBegin+0xa8>
   1b5d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
   1b5d6:	4618      	mov	r0, r3
   1b5d8:	f005 fa3e 	bl	20a58 <FS_unlink>
   1b5dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
   1b5e0:	4618      	mov	r0, r3
   1b5e2:	4b6f      	ldr	r3, [pc, #444]	; (1b7a0 <DeleteRecordBegin+0x26c>)
   1b5e4:	447b      	add	r3, pc
   1b5e6:	4619      	mov	r1, r3
   1b5e8:	f005 f98c 	bl	20904 <FS_open>
   1b5ec:	6238      	str	r0, [r7, #32]
   1b5ee:	69f8      	ldr	r0, [r7, #28]
   1b5f0:	2100      	movs	r1, #0
   1b5f2:	2200      	movs	r2, #0
   1b5f4:	f005 fa06 	bl	20a04 <FS_seek>
   1b5f8:	62f8      	str	r0, [r7, #44]	; 0x2c
   1b5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b5fc:	2b02      	cmp	r3, #2
   1b5fe:	f040 809e 	bne.w	1b73e <DeleteRecordBegin+0x20a>
   1b602:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1b604:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1b606:	2201      	movs	r2, #1
   1b608:	69fb      	ldr	r3, [r7, #28]
   1b60a:	f005 f9a5 	bl	20958 <FS_read>
   1b60e:	6338      	str	r0, [r7, #48]	; 0x30
   1b610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b612:	2b01      	cmp	r3, #1
   1b614:	d007      	beq.n	1b626 <DeleteRecordBegin+0xf2>
   1b616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b618:	2b00      	cmp	r3, #0
   1b61a:	f040 8090 	bne.w	1b73e <DeleteRecordBegin+0x20a>
   1b61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b620:	2b00      	cmp	r3, #0
   1b622:	f040 808c 	bne.w	1b73e <DeleteRecordBegin+0x20a>
   1b626:	4b5f      	ldr	r3, [pc, #380]	; (1b7a4 <DeleteRecordBegin+0x270>)
   1b628:	58e3      	ldr	r3, [r4, r3]
   1b62a:	461a      	mov	r2, r3
   1b62c:	683b      	ldr	r3, [r7, #0]
   1b62e:	212c      	movs	r1, #44	; 0x2c
   1b630:	fb01 f303 	mul.w	r3, r1, r3
   1b634:	18d3      	adds	r3, r2, r3
   1b636:	3328      	adds	r3, #40	; 0x28
   1b638:	681b      	ldr	r3, [r3, #0]
   1b63a:	2b01      	cmp	r3, #1
   1b63c:	d142      	bne.n	1b6c4 <DeleteRecordBegin+0x190>
   1b63e:	f107 0314 	add.w	r3, r7, #20
   1b642:	4618      	mov	r0, r3
   1b644:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1b646:	2204      	movs	r2, #4
   1b648:	f7ed eb16 	blx	8c78 <_init+0x118>
   1b64c:	697b      	ldr	r3, [r7, #20]
   1b64e:	3304      	adds	r3, #4
   1b650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1b652:	18d2      	adds	r2, r2, r3
   1b654:	697b      	ldr	r3, [r7, #20]
   1b656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1b658:	1acb      	subs	r3, r1, r3
   1b65a:	3b04      	subs	r3, #4
   1b65c:	4610      	mov	r0, r2
   1b65e:	4619      	mov	r1, r3
   1b660:	2201      	movs	r2, #1
   1b662:	6a3b      	ldr	r3, [r7, #32]
   1b664:	f005 fa50 	bl	20b08 <FS_write>
   1b668:	6338      	str	r0, [r7, #48]	; 0x30
   1b66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b66c:	2b01      	cmp	r3, #1
   1b66e:	d007      	beq.n	1b680 <DeleteRecordBegin+0x14c>
   1b670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b672:	2b00      	cmp	r3, #0
   1b674:	d163      	bne.n	1b73e <DeleteRecordBegin+0x20a>
   1b676:	697b      	ldr	r3, [r7, #20]
   1b678:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b67a:	1ad3      	subs	r3, r2, r3
   1b67c:	2b04      	cmp	r3, #4
   1b67e:	d15e      	bne.n	1b73e <DeleteRecordBegin+0x20a>
   1b680:	69f8      	ldr	r0, [r7, #28]
   1b682:	f005 f863 	bl	2074c <FS_close>
   1b686:	2300      	movs	r3, #0
   1b688:	61fb      	str	r3, [r7, #28]
   1b68a:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1b68e:	4618      	mov	r0, r3
   1b690:	f005 f9e2 	bl	20a58 <FS_unlink>
   1b694:	62f8      	str	r0, [r7, #44]	; 0x2c
   1b696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b698:	2b02      	cmp	r3, #2
   1b69a:	d150      	bne.n	1b73e <DeleteRecordBegin+0x20a>
   1b69c:	6a38      	ldr	r0, [r7, #32]
   1b69e:	f005 f855 	bl	2074c <FS_close>
   1b6a2:	2300      	movs	r3, #0
   1b6a4:	623b      	str	r3, [r7, #32]
   1b6a6:	f107 0258 	add.w	r2, r7, #88	; 0x58
   1b6aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1b6ae:	4610      	mov	r0, r2
   1b6b0:	4619      	mov	r1, r3
   1b6b2:	f005 f97d 	bl	209b0 <FS_rename>
   1b6b6:	62f8      	str	r0, [r7, #44]	; 0x2c
   1b6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b6ba:	2b02      	cmp	r3, #2
   1b6bc:	d13f      	bne.n	1b73e <DeleteRecordBegin+0x20a>
   1b6be:	230a      	movs	r3, #10
   1b6c0:	61bb      	str	r3, [r7, #24]
   1b6c2:	e03c      	b.n	1b73e <DeleteRecordBegin+0x20a>
   1b6c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b6c6:	687b      	ldr	r3, [r7, #4]
   1b6c8:	1ad3      	subs	r3, r2, r3
   1b6ca:	2b00      	cmp	r3, #0
   1b6cc:	db37      	blt.n	1b73e <DeleteRecordBegin+0x20a>
   1b6ce:	687b      	ldr	r3, [r7, #4]
   1b6d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1b6d2:	18d2      	adds	r2, r2, r3
   1b6d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1b6d6:	687b      	ldr	r3, [r7, #4]
   1b6d8:	1acb      	subs	r3, r1, r3
   1b6da:	4610      	mov	r0, r2
   1b6dc:	4619      	mov	r1, r3
   1b6de:	2201      	movs	r2, #1
   1b6e0:	6a3b      	ldr	r3, [r7, #32]
   1b6e2:	f005 fa11 	bl	20b08 <FS_write>
   1b6e6:	6338      	str	r0, [r7, #48]	; 0x30
   1b6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b6ea:	2b01      	cmp	r3, #1
   1b6ec:	d006      	beq.n	1b6fc <DeleteRecordBegin+0x1c8>
   1b6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b6f0:	2b00      	cmp	r3, #0
   1b6f2:	d124      	bne.n	1b73e <DeleteRecordBegin+0x20a>
   1b6f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b6f6:	687b      	ldr	r3, [r7, #4]
   1b6f8:	429a      	cmp	r2, r3
   1b6fa:	d120      	bne.n	1b73e <DeleteRecordBegin+0x20a>
   1b6fc:	69f8      	ldr	r0, [r7, #28]
   1b6fe:	f005 f825 	bl	2074c <FS_close>
   1b702:	2300      	movs	r3, #0
   1b704:	61fb      	str	r3, [r7, #28]
   1b706:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1b70a:	4618      	mov	r0, r3
   1b70c:	f005 f9a4 	bl	20a58 <FS_unlink>
   1b710:	62f8      	str	r0, [r7, #44]	; 0x2c
   1b712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b714:	2b02      	cmp	r3, #2
   1b716:	d112      	bne.n	1b73e <DeleteRecordBegin+0x20a>
   1b718:	6a38      	ldr	r0, [r7, #32]
   1b71a:	f005 f817 	bl	2074c <FS_close>
   1b71e:	2300      	movs	r3, #0
   1b720:	623b      	str	r3, [r7, #32]
   1b722:	f107 0258 	add.w	r2, r7, #88	; 0x58
   1b726:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1b72a:	4610      	mov	r0, r2
   1b72c:	4619      	mov	r1, r3
   1b72e:	f005 f93f 	bl	209b0 <FS_rename>
   1b732:	62f8      	str	r0, [r7, #44]	; 0x2c
   1b734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b736:	2b02      	cmp	r3, #2
   1b738:	d101      	bne.n	1b73e <DeleteRecordBegin+0x20a>
   1b73a:	230a      	movs	r3, #10
   1b73c:	61bb      	str	r3, [r7, #24]
   1b73e:	6a3b      	ldr	r3, [r7, #32]
   1b740:	2b00      	cmp	r3, #0
   1b742:	d007      	beq.n	1b754 <DeleteRecordBegin+0x220>
   1b744:	6a38      	ldr	r0, [r7, #32]
   1b746:	f005 f801 	bl	2074c <FS_close>
   1b74a:	2300      	movs	r3, #0
   1b74c:	623b      	str	r3, [r7, #32]
   1b74e:	e001      	b.n	1b754 <DeleteRecordBegin+0x220>
   1b750:	231a      	movs	r3, #26
   1b752:	61bb      	str	r3, [r7, #24]
   1b754:	69fb      	ldr	r3, [r7, #28]
   1b756:	2b00      	cmp	r3, #0
   1b758:	d004      	beq.n	1b764 <DeleteRecordBegin+0x230>
   1b75a:	69f8      	ldr	r0, [r7, #28]
   1b75c:	f004 fff6 	bl	2074c <FS_close>
   1b760:	2300      	movs	r3, #0
   1b762:	61fb      	str	r3, [r7, #28]
   1b764:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1b766:	f005 fa83 	bl	20c70 <PageFree>
   1b76a:	69bb      	ldr	r3, [r7, #24]
   1b76c:	4618      	mov	r0, r3
   1b76e:	4b07      	ldr	r3, [pc, #28]	; (1b78c <DeleteRecordBegin+0x258>)
   1b770:	58e3      	ldr	r3, [r4, r3]
   1b772:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   1b774:	681b      	ldr	r3, [r3, #0]
   1b776:	429a      	cmp	r2, r3
   1b778:	d001      	beq.n	1b77e <DeleteRecordBegin+0x24a>
   1b77a:	f7ed fc13 	bl	8fa4 <__stack_chk_fail>
   1b77e:	f107 0784 	add.w	r7, r7, #132	; 0x84
   1b782:	46bd      	mov	sp, r7
   1b784:	bd90      	pop	{r4, r7, pc}
   1b786:	bf00      	nop
   1b788:	00013bd0 	.word	0x00013bd0
   1b78c:	000000ac 	.word	0x000000ac
   1b790:	0000abee 	.word	0x0000abee
   1b794:	0000abf2 	.word	0x0000abf2
   1b798:	0000aba2 	.word	0x0000aba2
   1b79c:	0000abb6 	.word	0x0000abb6
   1b7a0:	0000ab84 	.word	0x0000ab84
   1b7a4:	000000c0 	.word	0x000000c0

0001b7a8 <DeleteRecordBeginWithCkecksum>:
   1b7a8:	b590      	push	{r4, r7, lr}
   1b7aa:	b0bb      	sub	sp, #236	; 0xec
   1b7ac:	af00      	add	r7, sp, #0
   1b7ae:	60f8      	str	r0, [r7, #12]
   1b7b0:	60b9      	str	r1, [r7, #8]
   1b7b2:	607a      	str	r2, [r7, #4]
   1b7b4:	603b      	str	r3, [r7, #0]
   1b7b6:	4cc0      	ldr	r4, [pc, #768]	; (1bab8 <DeleteRecordBeginWithCkecksum+0x310>)
   1b7b8:	447c      	add	r4, pc
   1b7ba:	4bc0      	ldr	r3, [pc, #768]	; (1babc <DeleteRecordBeginWithCkecksum+0x314>)
   1b7bc:	58e3      	ldr	r3, [r4, r3]
   1b7be:	681b      	ldr	r3, [r3, #0]
   1b7c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   1b7c4:	231a      	movs	r3, #26
   1b7c6:	61bb      	str	r3, [r7, #24]
   1b7c8:	2300      	movs	r3, #0
   1b7ca:	627b      	str	r3, [r7, #36]	; 0x24
   1b7cc:	2300      	movs	r3, #0
   1b7ce:	61fb      	str	r3, [r7, #28]
   1b7d0:	2300      	movs	r3, #0
   1b7d2:	623b      	str	r3, [r7, #32]
   1b7d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1b7d8:	4618      	mov	r0, r3
   1b7da:	4bb9      	ldr	r3, [pc, #740]	; (1bac0 <DeleteRecordBeginWithCkecksum+0x318>)
   1b7dc:	447b      	add	r3, pc
   1b7de:	4619      	mov	r1, r3
   1b7e0:	68fa      	ldr	r2, [r7, #12]
   1b7e2:	68bb      	ldr	r3, [r7, #8]
   1b7e4:	f7ed ea66 	blx	8cb4 <_init+0x154>
   1b7e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1b7ec:	4618      	mov	r0, r3
   1b7ee:	4bb5      	ldr	r3, [pc, #724]	; (1bac4 <DeleteRecordBeginWithCkecksum+0x31c>)
   1b7f0:	447b      	add	r3, pc
   1b7f2:	4619      	mov	r1, r3
   1b7f4:	f005 f886 	bl	20904 <FS_open>
   1b7f8:	61f8      	str	r0, [r7, #28]
   1b7fa:	69fb      	ldr	r3, [r7, #28]
   1b7fc:	2b00      	cmp	r3, #0
   1b7fe:	d102      	bne.n	1b806 <DeleteRecordBeginWithCkecksum+0x5e>
   1b800:	2313      	movs	r3, #19
   1b802:	61bb      	str	r3, [r7, #24]
   1b804:	e149      	b.n	1ba9a <DeleteRecordBeginWithCkecksum+0x2f2>
   1b806:	69f8      	ldr	r0, [r7, #28]
   1b808:	f005 f826 	bl	20858 <FS_length>
   1b80c:	62b8      	str	r0, [r7, #40]	; 0x28
   1b80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b810:	4618      	mov	r0, r3
   1b812:	f005 fa03 	bl	20c1c <PageAlloc>
   1b816:	6278      	str	r0, [r7, #36]	; 0x24
   1b818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b81a:	2b00      	cmp	r3, #0
   1b81c:	f000 8130 	beq.w	1ba80 <DeleteRecordBeginWithCkecksum+0x2d8>
   1b820:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
   1b824:	4618      	mov	r0, r3
   1b826:	4ba8      	ldr	r3, [pc, #672]	; (1bac8 <DeleteRecordBeginWithCkecksum+0x320>)
   1b828:	447b      	add	r3, pc
   1b82a:	4619      	mov	r1, r3
   1b82c:	68fa      	ldr	r2, [r7, #12]
   1b82e:	4ba7      	ldr	r3, [pc, #668]	; (1bacc <DeleteRecordBeginWithCkecksum+0x324>)
   1b830:	447b      	add	r3, pc
   1b832:	f7ed ea40 	blx	8cb4 <_init+0x154>
   1b836:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
   1b83a:	4618      	mov	r0, r3
   1b83c:	f004 ffe0 	bl	20800 <FS_exist>
   1b840:	62f8      	str	r0, [r7, #44]	; 0x2c
   1b842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b844:	2b02      	cmp	r3, #2
   1b846:	d104      	bne.n	1b852 <DeleteRecordBeginWithCkecksum+0xaa>
   1b848:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
   1b84c:	4618      	mov	r0, r3
   1b84e:	f005 f903 	bl	20a58 <FS_unlink>
   1b852:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
   1b856:	4618      	mov	r0, r3
   1b858:	4b9d      	ldr	r3, [pc, #628]	; (1bad0 <DeleteRecordBeginWithCkecksum+0x328>)
   1b85a:	447b      	add	r3, pc
   1b85c:	4619      	mov	r1, r3
   1b85e:	f005 f851 	bl	20904 <FS_open>
   1b862:	6238      	str	r0, [r7, #32]
   1b864:	69f8      	ldr	r0, [r7, #28]
   1b866:	2100      	movs	r1, #0
   1b868:	2200      	movs	r2, #0
   1b86a:	f005 f8cb 	bl	20a04 <FS_seek>
   1b86e:	62f8      	str	r0, [r7, #44]	; 0x2c
   1b870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b872:	2b02      	cmp	r3, #2
   1b874:	f040 80fb 	bne.w	1ba6e <DeleteRecordBeginWithCkecksum+0x2c6>
   1b878:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1b87a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1b87c:	2201      	movs	r2, #1
   1b87e:	69fb      	ldr	r3, [r7, #28]
   1b880:	f005 f86a 	bl	20958 <FS_read>
   1b884:	6338      	str	r0, [r7, #48]	; 0x30
   1b886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b888:	2b01      	cmp	r3, #1
   1b88a:	d007      	beq.n	1b89c <DeleteRecordBeginWithCkecksum+0xf4>
   1b88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b88e:	2b00      	cmp	r3, #0
   1b890:	f040 80ed 	bne.w	1ba6e <DeleteRecordBeginWithCkecksum+0x2c6>
   1b894:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b896:	2b00      	cmp	r3, #0
   1b898:	f040 80e9 	bne.w	1ba6e <DeleteRecordBeginWithCkecksum+0x2c6>
   1b89c:	4b8d      	ldr	r3, [pc, #564]	; (1bad4 <DeleteRecordBeginWithCkecksum+0x32c>)
   1b89e:	58e3      	ldr	r3, [r4, r3]
   1b8a0:	461a      	mov	r2, r3
   1b8a2:	683b      	ldr	r3, [r7, #0]
   1b8a4:	212c      	movs	r1, #44	; 0x2c
   1b8a6:	fb01 f303 	mul.w	r3, r1, r3
   1b8aa:	18d3      	adds	r3, r2, r3
   1b8ac:	3328      	adds	r3, #40	; 0x28
   1b8ae:	681b      	ldr	r3, [r3, #0]
   1b8b0:	2b01      	cmp	r3, #1
   1b8b2:	d175      	bne.n	1b9a0 <DeleteRecordBeginWithCkecksum+0x1f8>
   1b8b4:	f107 0314 	add.w	r3, r7, #20
   1b8b8:	4618      	mov	r0, r3
   1b8ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1b8bc:	2204      	movs	r2, #4
   1b8be:	f7ed e9dc 	blx	8c78 <_init+0x118>
   1b8c2:	697b      	ldr	r3, [r7, #20]
   1b8c4:	2b00      	cmp	r3, #0
   1b8c6:	f2c0 80d2 	blt.w	1ba6e <DeleteRecordBeginWithCkecksum+0x2c6>
   1b8ca:	697b      	ldr	r3, [r7, #20]
   1b8cc:	3304      	adds	r3, #4
   1b8ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1b8d0:	18d2      	adds	r2, r2, r3
   1b8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b8d4:	f1a3 0110 	sub.w	r1, r3, #16
   1b8d8:	697b      	ldr	r3, [r7, #20]
   1b8da:	1acb      	subs	r3, r1, r3
   1b8dc:	3b04      	subs	r3, #4
   1b8de:	4610      	mov	r0, r2
   1b8e0:	4619      	mov	r1, r3
   1b8e2:	2201      	movs	r2, #1
   1b8e4:	6a3b      	ldr	r3, [r7, #32]
   1b8e6:	f005 f90f 	bl	20b08 <FS_write>
   1b8ea:	6338      	str	r0, [r7, #48]	; 0x30
   1b8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b8ee:	2b01      	cmp	r3, #1
   1b8f0:	d00b      	beq.n	1b90a <DeleteRecordBeginWithCkecksum+0x162>
   1b8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b8f4:	2b00      	cmp	r3, #0
   1b8f6:	f040 80ba 	bne.w	1ba6e <DeleteRecordBeginWithCkecksum+0x2c6>
   1b8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b8fc:	f1a3 0210 	sub.w	r2, r3, #16
   1b900:	697b      	ldr	r3, [r7, #20]
   1b902:	1ad3      	subs	r3, r2, r3
   1b904:	2b04      	cmp	r3, #4
   1b906:	f040 80b2 	bne.w	1ba6e <DeleteRecordBeginWithCkecksum+0x2c6>
   1b90a:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1b90e:	4618      	mov	r0, r3
   1b910:	f003 fb6c 	bl	1efec <md5_init>
   1b914:	697b      	ldr	r3, [r7, #20]
   1b916:	3304      	adds	r3, #4
   1b918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1b91a:	18d2      	adds	r2, r2, r3
   1b91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b91e:	f1a3 0110 	sub.w	r1, r3, #16
   1b922:	697b      	ldr	r3, [r7, #20]
   1b924:	1acb      	subs	r3, r1, r3
   1b926:	3b04      	subs	r3, #4
   1b928:	f107 0134 	add.w	r1, r7, #52	; 0x34
   1b92c:	4608      	mov	r0, r1
   1b92e:	4611      	mov	r1, r2
   1b930:	461a      	mov	r2, r3
   1b932:	f003 fb95 	bl	1f060 <md5_append>
   1b936:	f107 0234 	add.w	r2, r7, #52	; 0x34
   1b93a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
   1b93e:	4610      	mov	r0, r2
   1b940:	4619      	mov	r1, r3
   1b942:	f003 fc19 	bl	1f178 <md5_finish>
   1b946:	f107 038c 	add.w	r3, r7, #140	; 0x8c
   1b94a:	4618      	mov	r0, r3
   1b94c:	2110      	movs	r1, #16
   1b94e:	2201      	movs	r2, #1
   1b950:	6a3b      	ldr	r3, [r7, #32]
   1b952:	f005 f8d9 	bl	20b08 <FS_write>
   1b956:	6338      	str	r0, [r7, #48]	; 0x30
   1b958:	69f8      	ldr	r0, [r7, #28]
   1b95a:	f004 fef7 	bl	2074c <FS_close>
   1b95e:	62f8      	str	r0, [r7, #44]	; 0x2c
   1b960:	2300      	movs	r3, #0
   1b962:	61fb      	str	r3, [r7, #28]
   1b964:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1b968:	4618      	mov	r0, r3
   1b96a:	f005 f875 	bl	20a58 <FS_unlink>
   1b96e:	62f8      	str	r0, [r7, #44]	; 0x2c
   1b970:	6a38      	ldr	r0, [r7, #32]
   1b972:	f004 feeb 	bl	2074c <FS_close>
   1b976:	62f8      	str	r0, [r7, #44]	; 0x2c
   1b978:	2300      	movs	r3, #0
   1b97a:	623b      	str	r3, [r7, #32]
   1b97c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
   1b980:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1b984:	4610      	mov	r0, r2
   1b986:	4619      	mov	r1, r3
   1b988:	f005 f812 	bl	209b0 <FS_rename>
   1b98c:	62f8      	str	r0, [r7, #44]	; 0x2c
   1b98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b990:	2b02      	cmp	r3, #2
   1b992:	d16c      	bne.n	1ba6e <DeleteRecordBeginWithCkecksum+0x2c6>
   1b994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b996:	2b01      	cmp	r3, #1
   1b998:	d169      	bne.n	1ba6e <DeleteRecordBeginWithCkecksum+0x2c6>
   1b99a:	230a      	movs	r3, #10
   1b99c:	61bb      	str	r3, [r7, #24]
   1b99e:	e066      	b.n	1ba6e <DeleteRecordBeginWithCkecksum+0x2c6>
   1b9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b9a2:	f1a3 0210 	sub.w	r2, r3, #16
   1b9a6:	687b      	ldr	r3, [r7, #4]
   1b9a8:	1ad3      	subs	r3, r2, r3
   1b9aa:	2b00      	cmp	r3, #0
   1b9ac:	db5f      	blt.n	1ba6e <DeleteRecordBeginWithCkecksum+0x2c6>
   1b9ae:	687b      	ldr	r3, [r7, #4]
   1b9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1b9b2:	18d2      	adds	r2, r2, r3
   1b9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b9b6:	f1a3 0110 	sub.w	r1, r3, #16
   1b9ba:	687b      	ldr	r3, [r7, #4]
   1b9bc:	1acb      	subs	r3, r1, r3
   1b9be:	4610      	mov	r0, r2
   1b9c0:	4619      	mov	r1, r3
   1b9c2:	2201      	movs	r2, #1
   1b9c4:	6a3b      	ldr	r3, [r7, #32]
   1b9c6:	f005 f89f 	bl	20b08 <FS_write>
   1b9ca:	6338      	str	r0, [r7, #48]	; 0x30
   1b9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b9ce:	2b01      	cmp	r3, #1
   1b9d0:	d008      	beq.n	1b9e4 <DeleteRecordBeginWithCkecksum+0x23c>
   1b9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b9d4:	2b00      	cmp	r3, #0
   1b9d6:	d14a      	bne.n	1ba6e <DeleteRecordBeginWithCkecksum+0x2c6>
   1b9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b9da:	f1a3 0210 	sub.w	r2, r3, #16
   1b9de:	687b      	ldr	r3, [r7, #4]
   1b9e0:	429a      	cmp	r2, r3
   1b9e2:	d144      	bne.n	1ba6e <DeleteRecordBeginWithCkecksum+0x2c6>
   1b9e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1b9e8:	4618      	mov	r0, r3
   1b9ea:	f003 faff 	bl	1efec <md5_init>
   1b9ee:	687b      	ldr	r3, [r7, #4]
   1b9f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1b9f2:	18d2      	adds	r2, r2, r3
   1b9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b9f6:	f1a3 0110 	sub.w	r1, r3, #16
   1b9fa:	687b      	ldr	r3, [r7, #4]
   1b9fc:	1acb      	subs	r3, r1, r3
   1b9fe:	f107 0134 	add.w	r1, r7, #52	; 0x34
   1ba02:	4608      	mov	r0, r1
   1ba04:	4611      	mov	r1, r2
   1ba06:	461a      	mov	r2, r3
   1ba08:	f003 fb2a 	bl	1f060 <md5_append>
   1ba0c:	f107 0234 	add.w	r2, r7, #52	; 0x34
   1ba10:	f107 038c 	add.w	r3, r7, #140	; 0x8c
   1ba14:	4610      	mov	r0, r2
   1ba16:	4619      	mov	r1, r3
   1ba18:	f003 fbae 	bl	1f178 <md5_finish>
   1ba1c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
   1ba20:	4618      	mov	r0, r3
   1ba22:	2110      	movs	r1, #16
   1ba24:	2201      	movs	r2, #1
   1ba26:	6a3b      	ldr	r3, [r7, #32]
   1ba28:	f005 f86e 	bl	20b08 <FS_write>
   1ba2c:	6338      	str	r0, [r7, #48]	; 0x30
   1ba2e:	69f8      	ldr	r0, [r7, #28]
   1ba30:	f004 fe8c 	bl	2074c <FS_close>
   1ba34:	2300      	movs	r3, #0
   1ba36:	61fb      	str	r3, [r7, #28]
   1ba38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1ba3c:	4618      	mov	r0, r3
   1ba3e:	f005 f80b 	bl	20a58 <FS_unlink>
   1ba42:	6a38      	ldr	r0, [r7, #32]
   1ba44:	f004 fe82 	bl	2074c <FS_close>
   1ba48:	2300      	movs	r3, #0
   1ba4a:	623b      	str	r3, [r7, #32]
   1ba4c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
   1ba50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1ba54:	4610      	mov	r0, r2
   1ba56:	4619      	mov	r1, r3
   1ba58:	f004 ffaa 	bl	209b0 <FS_rename>
   1ba5c:	62f8      	str	r0, [r7, #44]	; 0x2c
   1ba5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ba60:	2b02      	cmp	r3, #2
   1ba62:	d104      	bne.n	1ba6e <DeleteRecordBeginWithCkecksum+0x2c6>
   1ba64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ba66:	2b01      	cmp	r3, #1
   1ba68:	d101      	bne.n	1ba6e <DeleteRecordBeginWithCkecksum+0x2c6>
   1ba6a:	230a      	movs	r3, #10
   1ba6c:	61bb      	str	r3, [r7, #24]
   1ba6e:	6a3b      	ldr	r3, [r7, #32]
   1ba70:	2b00      	cmp	r3, #0
   1ba72:	d007      	beq.n	1ba84 <DeleteRecordBeginWithCkecksum+0x2dc>
   1ba74:	6a38      	ldr	r0, [r7, #32]
   1ba76:	f004 fe69 	bl	2074c <FS_close>
   1ba7a:	2300      	movs	r3, #0
   1ba7c:	623b      	str	r3, [r7, #32]
   1ba7e:	e001      	b.n	1ba84 <DeleteRecordBeginWithCkecksum+0x2dc>
   1ba80:	231a      	movs	r3, #26
   1ba82:	61bb      	str	r3, [r7, #24]
   1ba84:	69fb      	ldr	r3, [r7, #28]
   1ba86:	2b00      	cmp	r3, #0
   1ba88:	d004      	beq.n	1ba94 <DeleteRecordBeginWithCkecksum+0x2ec>
   1ba8a:	69f8      	ldr	r0, [r7, #28]
   1ba8c:	f004 fe5e 	bl	2074c <FS_close>
   1ba90:	2300      	movs	r3, #0
   1ba92:	61fb      	str	r3, [r7, #28]
   1ba94:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1ba96:	f005 f8eb 	bl	20c70 <PageFree>
   1ba9a:	69bb      	ldr	r3, [r7, #24]
   1ba9c:	4618      	mov	r0, r3
   1ba9e:	4b07      	ldr	r3, [pc, #28]	; (1babc <DeleteRecordBeginWithCkecksum+0x314>)
   1baa0:	58e3      	ldr	r3, [r4, r3]
   1baa2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
   1baa6:	681b      	ldr	r3, [r3, #0]
   1baa8:	429a      	cmp	r2, r3
   1baaa:	d001      	beq.n	1bab0 <DeleteRecordBeginWithCkecksum+0x308>
   1baac:	f7ed fa7a 	bl	8fa4 <__stack_chk_fail>
   1bab0:	f107 07ec 	add.w	r7, r7, #236	; 0xec
   1bab4:	46bd      	mov	sp, r7
   1bab6:	bd90      	pop	{r4, r7, pc}
   1bab8:	0001395c 	.word	0x0001395c
   1babc:	000000ac 	.word	0x000000ac
   1bac0:	0000a978 	.word	0x0000a978
   1bac4:	0000a97c 	.word	0x0000a97c
   1bac8:	0000a92c 	.word	0x0000a92c
   1bacc:	0000a940 	.word	0x0000a940
   1bad0:	0000a90e 	.word	0x0000a90e
   1bad4:	000000c0 	.word	0x000000c0

0001bad8 <DeleteRecordMiddle>:
   1bad8:	b590      	push	{r4, r7, lr}
   1bada:	b0a5      	sub	sp, #148	; 0x94
   1badc:	af00      	add	r7, sp, #0
   1bade:	6178      	str	r0, [r7, #20]
   1bae0:	6139      	str	r1, [r7, #16]
   1bae2:	60fa      	str	r2, [r7, #12]
   1bae4:	60bb      	str	r3, [r7, #8]
   1bae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   1baea:	607b      	str	r3, [r7, #4]
   1baec:	4cc2      	ldr	r4, [pc, #776]	; (1bdf8 <DeleteRecordMiddle+0x320>)
   1baee:	447c      	add	r4, pc
   1baf0:	4bc2      	ldr	r3, [pc, #776]	; (1bdfc <DeleteRecordMiddle+0x324>)
   1baf2:	58e3      	ldr	r3, [r4, r3]
   1baf4:	681b      	ldr	r3, [r3, #0]
   1baf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   1bafa:	231a      	movs	r3, #26
   1bafc:	623b      	str	r3, [r7, #32]
   1bafe:	2300      	movs	r3, #0
   1bb00:	63bb      	str	r3, [r7, #56]	; 0x38
   1bb02:	2300      	movs	r3, #0
   1bb04:	633b      	str	r3, [r7, #48]	; 0x30
   1bb06:	2300      	movs	r3, #0
   1bb08:	637b      	str	r3, [r7, #52]	; 0x34
   1bb0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1bb0e:	4618      	mov	r0, r3
   1bb10:	4bbb      	ldr	r3, [pc, #748]	; (1be00 <DeleteRecordMiddle+0x328>)
   1bb12:	447b      	add	r3, pc
   1bb14:	4619      	mov	r1, r3
   1bb16:	697a      	ldr	r2, [r7, #20]
   1bb18:	693b      	ldr	r3, [r7, #16]
   1bb1a:	f7ed e8cc 	blx	8cb4 <_init+0x154>
   1bb1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1bb22:	4618      	mov	r0, r3
   1bb24:	4bb7      	ldr	r3, [pc, #732]	; (1be04 <DeleteRecordMiddle+0x32c>)
   1bb26:	447b      	add	r3, pc
   1bb28:	4619      	mov	r1, r3
   1bb2a:	f004 feeb 	bl	20904 <FS_open>
   1bb2e:	6338      	str	r0, [r7, #48]	; 0x30
   1bb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bb32:	2b00      	cmp	r3, #0
   1bb34:	d102      	bne.n	1bb3c <DeleteRecordMiddle+0x64>
   1bb36:	2313      	movs	r3, #19
   1bb38:	623b      	str	r3, [r7, #32]
   1bb3a:	e14d      	b.n	1bdd8 <DeleteRecordMiddle+0x300>
   1bb3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1bb3e:	f004 fe8b 	bl	20858 <FS_length>
   1bb42:	63f8      	str	r0, [r7, #60]	; 0x3c
   1bb44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1bb46:	4618      	mov	r0, r3
   1bb48:	f005 f868 	bl	20c1c <PageAlloc>
   1bb4c:	63b8      	str	r0, [r7, #56]	; 0x38
   1bb4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1bb50:	2b00      	cmp	r3, #0
   1bb52:	f000 8134 	beq.w	1bdbe <DeleteRecordMiddle+0x2e6>
   1bb56:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1bb5a:	4618      	mov	r0, r3
   1bb5c:	4baa      	ldr	r3, [pc, #680]	; (1be08 <DeleteRecordMiddle+0x330>)
   1bb5e:	447b      	add	r3, pc
   1bb60:	4619      	mov	r1, r3
   1bb62:	697a      	ldr	r2, [r7, #20]
   1bb64:	4ba9      	ldr	r3, [pc, #676]	; (1be0c <DeleteRecordMiddle+0x334>)
   1bb66:	447b      	add	r3, pc
   1bb68:	f7ed e8a4 	blx	8cb4 <_init+0x154>
   1bb6c:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1bb70:	4618      	mov	r0, r3
   1bb72:	f004 fe45 	bl	20800 <FS_exist>
   1bb76:	6438      	str	r0, [r7, #64]	; 0x40
   1bb78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1bb7a:	2b02      	cmp	r3, #2
   1bb7c:	d104      	bne.n	1bb88 <DeleteRecordMiddle+0xb0>
   1bb7e:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1bb82:	4618      	mov	r0, r3
   1bb84:	f004 ff68 	bl	20a58 <FS_unlink>
   1bb88:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1bb8c:	4618      	mov	r0, r3
   1bb8e:	4ba0      	ldr	r3, [pc, #640]	; (1be10 <DeleteRecordMiddle+0x338>)
   1bb90:	447b      	add	r3, pc
   1bb92:	4619      	mov	r1, r3
   1bb94:	f004 feb6 	bl	20904 <FS_open>
   1bb98:	6378      	str	r0, [r7, #52]	; 0x34
   1bb9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1bb9c:	2100      	movs	r1, #0
   1bb9e:	2200      	movs	r2, #0
   1bba0:	f004 ff30 	bl	20a04 <FS_seek>
   1bba4:	6438      	str	r0, [r7, #64]	; 0x40
   1bba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1bba8:	2b02      	cmp	r3, #2
   1bbaa:	f040 80ff 	bne.w	1bdac <DeleteRecordMiddle+0x2d4>
   1bbae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1bbb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1bbb2:	2201      	movs	r2, #1
   1bbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bbb6:	f004 fecf 	bl	20958 <FS_read>
   1bbba:	6278      	str	r0, [r7, #36]	; 0x24
   1bbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bbbe:	2b01      	cmp	r3, #1
   1bbc0:	d007      	beq.n	1bbd2 <DeleteRecordMiddle+0xfa>
   1bbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bbc4:	2b00      	cmp	r3, #0
   1bbc6:	f040 80f1 	bne.w	1bdac <DeleteRecordMiddle+0x2d4>
   1bbca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1bbcc:	2b00      	cmp	r3, #0
   1bbce:	f040 80ed 	bne.w	1bdac <DeleteRecordMiddle+0x2d4>
   1bbd2:	4b90      	ldr	r3, [pc, #576]	; (1be14 <DeleteRecordMiddle+0x33c>)
   1bbd4:	58e3      	ldr	r3, [r4, r3]
   1bbd6:	461a      	mov	r2, r3
   1bbd8:	687b      	ldr	r3, [r7, #4]
   1bbda:	212c      	movs	r1, #44	; 0x2c
   1bbdc:	fb01 f303 	mul.w	r3, r1, r3
   1bbe0:	18d3      	adds	r3, r2, r3
   1bbe2:	3328      	adds	r3, #40	; 0x28
   1bbe4:	681b      	ldr	r3, [r3, #0]
   1bbe6:	2b01      	cmp	r3, #1
   1bbe8:	f040 8086 	bne.w	1bcf8 <DeleteRecordMiddle+0x220>
   1bbec:	2300      	movs	r3, #0
   1bbee:	62bb      	str	r3, [r7, #40]	; 0x28
   1bbf0:	2300      	movs	r3, #0
   1bbf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   1bbf4:	e01d      	b.n	1bc32 <DeleteRecordMiddle+0x15a>
   1bbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bbf8:	2b00      	cmp	r3, #0
   1bbfa:	db14      	blt.n	1bc26 <DeleteRecordMiddle+0x14e>
   1bbfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bbfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1bc00:	429a      	cmp	r2, r3
   1bc02:	da10      	bge.n	1bc26 <DeleteRecordMiddle+0x14e>
   1bc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc06:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1bc08:	18d3      	adds	r3, r2, r3
   1bc0a:	f107 021c 	add.w	r2, r7, #28
   1bc0e:	4610      	mov	r0, r2
   1bc10:	4619      	mov	r1, r3
   1bc12:	2204      	movs	r2, #4
   1bc14:	f7ed e830 	blx	8c78 <_init+0x118>
   1bc18:	69fb      	ldr	r3, [r7, #28]
   1bc1a:	461a      	mov	r2, r3
   1bc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc1e:	18d3      	adds	r3, r2, r3
   1bc20:	3304      	adds	r3, #4
   1bc22:	62bb      	str	r3, [r7, #40]	; 0x28
   1bc24:	e002      	b.n	1bc2c <DeleteRecordMiddle+0x154>
   1bc26:	f04f 33ff 	mov.w	r3, #4294967295
   1bc2a:	62bb      	str	r3, [r7, #40]	; 0x28
   1bc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bc2e:	3301      	adds	r3, #1
   1bc30:	62fb      	str	r3, [r7, #44]	; 0x2c
   1bc32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1bc34:	68bb      	ldr	r3, [r7, #8]
   1bc36:	429a      	cmp	r2, r3
   1bc38:	da02      	bge.n	1bc40 <DeleteRecordMiddle+0x168>
   1bc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc3c:	2b00      	cmp	r3, #0
   1bc3e:	dada      	bge.n	1bbf6 <DeleteRecordMiddle+0x11e>
   1bc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc42:	2b00      	cmp	r3, #0
   1bc44:	f2c0 80b2 	blt.w	1bdac <DeleteRecordMiddle+0x2d4>
   1bc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1bc4c:	18d3      	adds	r3, r2, r3
   1bc4e:	f107 021c 	add.w	r2, r7, #28
   1bc52:	4610      	mov	r0, r2
   1bc54:	4619      	mov	r1, r3
   1bc56:	2204      	movs	r2, #4
   1bc58:	f7ed e80e 	blx	8c78 <_init+0x118>
   1bc5c:	69fb      	ldr	r3, [r7, #28]
   1bc5e:	2b00      	cmp	r3, #0
   1bc60:	f340 80a4 	ble.w	1bdac <DeleteRecordMiddle+0x2d4>
   1bc64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1bc66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1bc68:	2201      	movs	r2, #1
   1bc6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bc6c:	f004 ff4c 	bl	20b08 <FS_write>
   1bc70:	6278      	str	r0, [r7, #36]	; 0x24
   1bc72:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bc74:	69fb      	ldr	r3, [r7, #28]
   1bc76:	18d3      	adds	r3, r2, r3
   1bc78:	3304      	adds	r3, #4
   1bc7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1bc7c:	18d2      	adds	r2, r2, r3
   1bc7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1bc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc82:	1ac9      	subs	r1, r1, r3
   1bc84:	69fb      	ldr	r3, [r7, #28]
   1bc86:	1acb      	subs	r3, r1, r3
   1bc88:	3b04      	subs	r3, #4
   1bc8a:	4610      	mov	r0, r2
   1bc8c:	4619      	mov	r1, r3
   1bc8e:	2201      	movs	r2, #1
   1bc90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bc92:	f004 ff39 	bl	20b08 <FS_write>
   1bc96:	6278      	str	r0, [r7, #36]	; 0x24
   1bc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bc9a:	2b01      	cmp	r3, #1
   1bc9c:	d00a      	beq.n	1bcb4 <DeleteRecordMiddle+0x1dc>
   1bc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bca0:	2b00      	cmp	r3, #0
   1bca2:	f040 8083 	bne.w	1bdac <DeleteRecordMiddle+0x2d4>
   1bca6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1bca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bcaa:	1ad2      	subs	r2, r2, r3
   1bcac:	69fb      	ldr	r3, [r7, #28]
   1bcae:	1ad3      	subs	r3, r2, r3
   1bcb0:	2b04      	cmp	r3, #4
   1bcb2:	d17b      	bne.n	1bdac <DeleteRecordMiddle+0x2d4>
   1bcb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1bcb6:	f004 fd49 	bl	2074c <FS_close>
   1bcba:	2300      	movs	r3, #0
   1bcbc:	633b      	str	r3, [r7, #48]	; 0x30
   1bcbe:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1bcc2:	4618      	mov	r0, r3
   1bcc4:	f004 fec8 	bl	20a58 <FS_unlink>
   1bcc8:	6438      	str	r0, [r7, #64]	; 0x40
   1bcca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1bccc:	2b02      	cmp	r3, #2
   1bcce:	d16d      	bne.n	1bdac <DeleteRecordMiddle+0x2d4>
   1bcd0:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1bcd2:	f004 fd3b 	bl	2074c <FS_close>
   1bcd6:	2300      	movs	r3, #0
   1bcd8:	637b      	str	r3, [r7, #52]	; 0x34
   1bcda:	f107 0268 	add.w	r2, r7, #104	; 0x68
   1bcde:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1bce2:	4610      	mov	r0, r2
   1bce4:	4619      	mov	r1, r3
   1bce6:	f004 fe63 	bl	209b0 <FS_rename>
   1bcea:	6438      	str	r0, [r7, #64]	; 0x40
   1bcec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1bcee:	2b02      	cmp	r3, #2
   1bcf0:	d15c      	bne.n	1bdac <DeleteRecordMiddle+0x2d4>
   1bcf2:	230a      	movs	r3, #10
   1bcf4:	623b      	str	r3, [r7, #32]
   1bcf6:	e059      	b.n	1bdac <DeleteRecordMiddle+0x2d4>
   1bcf8:	68bb      	ldr	r3, [r7, #8]
   1bcfa:	68fa      	ldr	r2, [r7, #12]
   1bcfc:	fb02 f303 	mul.w	r3, r2, r3
   1bd00:	62bb      	str	r3, [r7, #40]	; 0x28
   1bd02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1bd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bd06:	1ad2      	subs	r2, r2, r3
   1bd08:	68fb      	ldr	r3, [r7, #12]
   1bd0a:	1ad3      	subs	r3, r2, r3
   1bd0c:	2b00      	cmp	r3, #0
   1bd0e:	db4d      	blt.n	1bdac <DeleteRecordMiddle+0x2d4>
   1bd10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1bd12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1bd14:	2201      	movs	r2, #1
   1bd16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bd18:	f004 fef6 	bl	20b08 <FS_write>
   1bd1c:	6278      	str	r0, [r7, #36]	; 0x24
   1bd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bd20:	2b01      	cmp	r3, #1
   1bd22:	d005      	beq.n	1bd30 <DeleteRecordMiddle+0x258>
   1bd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bd26:	2b00      	cmp	r3, #0
   1bd28:	d113      	bne.n	1bd52 <DeleteRecordMiddle+0x27a>
   1bd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bd2c:	2b00      	cmp	r3, #0
   1bd2e:	d110      	bne.n	1bd52 <DeleteRecordMiddle+0x27a>
   1bd30:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bd32:	68fb      	ldr	r3, [r7, #12]
   1bd34:	18d3      	adds	r3, r2, r3
   1bd36:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1bd38:	18d2      	adds	r2, r2, r3
   1bd3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1bd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bd3e:	1ac9      	subs	r1, r1, r3
   1bd40:	68fb      	ldr	r3, [r7, #12]
   1bd42:	1acb      	subs	r3, r1, r3
   1bd44:	4610      	mov	r0, r2
   1bd46:	4619      	mov	r1, r3
   1bd48:	2201      	movs	r2, #1
   1bd4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bd4c:	f004 fedc 	bl	20b08 <FS_write>
   1bd50:	6278      	str	r0, [r7, #36]	; 0x24
   1bd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bd54:	2b01      	cmp	r3, #1
   1bd56:	d008      	beq.n	1bd6a <DeleteRecordMiddle+0x292>
   1bd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bd5a:	2b00      	cmp	r3, #0
   1bd5c:	d126      	bne.n	1bdac <DeleteRecordMiddle+0x2d4>
   1bd5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1bd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bd62:	1ad2      	subs	r2, r2, r3
   1bd64:	68fb      	ldr	r3, [r7, #12]
   1bd66:	429a      	cmp	r2, r3
   1bd68:	d120      	bne.n	1bdac <DeleteRecordMiddle+0x2d4>
   1bd6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1bd6c:	f004 fcee 	bl	2074c <FS_close>
   1bd70:	2300      	movs	r3, #0
   1bd72:	633b      	str	r3, [r7, #48]	; 0x30
   1bd74:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1bd78:	4618      	mov	r0, r3
   1bd7a:	f004 fe6d 	bl	20a58 <FS_unlink>
   1bd7e:	6438      	str	r0, [r7, #64]	; 0x40
   1bd80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1bd82:	2b02      	cmp	r3, #2
   1bd84:	d112      	bne.n	1bdac <DeleteRecordMiddle+0x2d4>
   1bd86:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1bd88:	f004 fce0 	bl	2074c <FS_close>
   1bd8c:	2300      	movs	r3, #0
   1bd8e:	637b      	str	r3, [r7, #52]	; 0x34
   1bd90:	f107 0268 	add.w	r2, r7, #104	; 0x68
   1bd94:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1bd98:	4610      	mov	r0, r2
   1bd9a:	4619      	mov	r1, r3
   1bd9c:	f004 fe08 	bl	209b0 <FS_rename>
   1bda0:	6438      	str	r0, [r7, #64]	; 0x40
   1bda2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1bda4:	2b02      	cmp	r3, #2
   1bda6:	d101      	bne.n	1bdac <DeleteRecordMiddle+0x2d4>
   1bda8:	230a      	movs	r3, #10
   1bdaa:	623b      	str	r3, [r7, #32]
   1bdac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bdae:	2b00      	cmp	r3, #0
   1bdb0:	d007      	beq.n	1bdc2 <DeleteRecordMiddle+0x2ea>
   1bdb2:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1bdb4:	f004 fcca 	bl	2074c <FS_close>
   1bdb8:	2300      	movs	r3, #0
   1bdba:	637b      	str	r3, [r7, #52]	; 0x34
   1bdbc:	e001      	b.n	1bdc2 <DeleteRecordMiddle+0x2ea>
   1bdbe:	231a      	movs	r3, #26
   1bdc0:	623b      	str	r3, [r7, #32]
   1bdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bdc4:	2b00      	cmp	r3, #0
   1bdc6:	d004      	beq.n	1bdd2 <DeleteRecordMiddle+0x2fa>
   1bdc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1bdca:	f004 fcbf 	bl	2074c <FS_close>
   1bdce:	2300      	movs	r3, #0
   1bdd0:	633b      	str	r3, [r7, #48]	; 0x30
   1bdd2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1bdd4:	f004 ff4c 	bl	20c70 <PageFree>
   1bdd8:	6a3b      	ldr	r3, [r7, #32]
   1bdda:	4618      	mov	r0, r3
   1bddc:	4b07      	ldr	r3, [pc, #28]	; (1bdfc <DeleteRecordMiddle+0x324>)
   1bdde:	58e3      	ldr	r3, [r4, r3]
   1bde0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1bde4:	681b      	ldr	r3, [r3, #0]
   1bde6:	429a      	cmp	r2, r3
   1bde8:	d001      	beq.n	1bdee <DeleteRecordMiddle+0x316>
   1bdea:	f7ed f8db 	bl	8fa4 <__stack_chk_fail>
   1bdee:	f107 0794 	add.w	r7, r7, #148	; 0x94
   1bdf2:	46bd      	mov	sp, r7
   1bdf4:	bd90      	pop	{r4, r7, pc}
   1bdf6:	bf00      	nop
   1bdf8:	00013626 	.word	0x00013626
   1bdfc:	000000ac 	.word	0x000000ac
   1be00:	0000a642 	.word	0x0000a642
   1be04:	0000a646 	.word	0x0000a646
   1be08:	0000a5f6 	.word	0x0000a5f6
   1be0c:	0000a60a 	.word	0x0000a60a
   1be10:	0000a5d8 	.word	0x0000a5d8
   1be14:	000000c0 	.word	0x000000c0

0001be18 <DeleteRecordMiddleWithCkecksum>:
   1be18:	b590      	push	{r4, r7, lr}
   1be1a:	b0bf      	sub	sp, #252	; 0xfc
   1be1c:	af00      	add	r7, sp, #0
   1be1e:	6178      	str	r0, [r7, #20]
   1be20:	6139      	str	r1, [r7, #16]
   1be22:	60fa      	str	r2, [r7, #12]
   1be24:	60bb      	str	r3, [r7, #8]
   1be26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
   1be2a:	607b      	str	r3, [r7, #4]
   1be2c:	4cfd      	ldr	r4, [pc, #1012]	; (1c224 <DeleteRecordMiddleWithCkecksum+0x40c>)
   1be2e:	447c      	add	r4, pc
   1be30:	4bfd      	ldr	r3, [pc, #1012]	; (1c228 <DeleteRecordMiddleWithCkecksum+0x410>)
   1be32:	58e3      	ldr	r3, [r4, r3]
   1be34:	681b      	ldr	r3, [r3, #0]
   1be36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
   1be3a:	231a      	movs	r3, #26
   1be3c:	623b      	str	r3, [r7, #32]
   1be3e:	2300      	movs	r3, #0
   1be40:	63bb      	str	r3, [r7, #56]	; 0x38
   1be42:	2300      	movs	r3, #0
   1be44:	633b      	str	r3, [r7, #48]	; 0x30
   1be46:	2300      	movs	r3, #0
   1be48:	637b      	str	r3, [r7, #52]	; 0x34
   1be4a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1be4e:	4618      	mov	r0, r3
   1be50:	4bf6      	ldr	r3, [pc, #984]	; (1c22c <DeleteRecordMiddleWithCkecksum+0x414>)
   1be52:	447b      	add	r3, pc
   1be54:	4619      	mov	r1, r3
   1be56:	697a      	ldr	r2, [r7, #20]
   1be58:	693b      	ldr	r3, [r7, #16]
   1be5a:	f7ec ef2c 	blx	8cb4 <_init+0x154>
   1be5e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1be62:	4618      	mov	r0, r3
   1be64:	4bf2      	ldr	r3, [pc, #968]	; (1c230 <DeleteRecordMiddleWithCkecksum+0x418>)
   1be66:	447b      	add	r3, pc
   1be68:	4619      	mov	r1, r3
   1be6a:	f004 fd4b 	bl	20904 <FS_open>
   1be6e:	6338      	str	r0, [r7, #48]	; 0x30
   1be70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1be72:	2b00      	cmp	r3, #0
   1be74:	d102      	bne.n	1be7c <DeleteRecordMiddleWithCkecksum+0x64>
   1be76:	2313      	movs	r3, #19
   1be78:	623b      	str	r3, [r7, #32]
   1be7a:	e1c4      	b.n	1c206 <DeleteRecordMiddleWithCkecksum+0x3ee>
   1be7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1be7e:	f004 fceb 	bl	20858 <FS_length>
   1be82:	63f8      	str	r0, [r7, #60]	; 0x3c
   1be84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1be86:	4618      	mov	r0, r3
   1be88:	f004 fec8 	bl	20c1c <PageAlloc>
   1be8c:	63b8      	str	r0, [r7, #56]	; 0x38
   1be8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1be90:	2b00      	cmp	r3, #0
   1be92:	f000 81ab 	beq.w	1c1ec <DeleteRecordMiddleWithCkecksum+0x3d4>
   1be96:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
   1be9a:	4618      	mov	r0, r3
   1be9c:	4be5      	ldr	r3, [pc, #916]	; (1c234 <DeleteRecordMiddleWithCkecksum+0x41c>)
   1be9e:	447b      	add	r3, pc
   1bea0:	4619      	mov	r1, r3
   1bea2:	697a      	ldr	r2, [r7, #20]
   1bea4:	4be4      	ldr	r3, [pc, #912]	; (1c238 <DeleteRecordMiddleWithCkecksum+0x420>)
   1bea6:	447b      	add	r3, pc
   1bea8:	f7ec ef04 	blx	8cb4 <_init+0x154>
   1beac:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
   1beb0:	4618      	mov	r0, r3
   1beb2:	f004 fca5 	bl	20800 <FS_exist>
   1beb6:	6438      	str	r0, [r7, #64]	; 0x40
   1beb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1beba:	2b02      	cmp	r3, #2
   1bebc:	d104      	bne.n	1bec8 <DeleteRecordMiddleWithCkecksum+0xb0>
   1bebe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
   1bec2:	4618      	mov	r0, r3
   1bec4:	f004 fdc8 	bl	20a58 <FS_unlink>
   1bec8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
   1becc:	4618      	mov	r0, r3
   1bece:	4bdb      	ldr	r3, [pc, #876]	; (1c23c <DeleteRecordMiddleWithCkecksum+0x424>)
   1bed0:	447b      	add	r3, pc
   1bed2:	4619      	mov	r1, r3
   1bed4:	f004 fd16 	bl	20904 <FS_open>
   1bed8:	6378      	str	r0, [r7, #52]	; 0x34
   1beda:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1bedc:	2100      	movs	r1, #0
   1bede:	2200      	movs	r2, #0
   1bee0:	f004 fd90 	bl	20a04 <FS_seek>
   1bee4:	6438      	str	r0, [r7, #64]	; 0x40
   1bee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1bee8:	2b02      	cmp	r3, #2
   1beea:	f040 8176 	bne.w	1c1da <DeleteRecordMiddleWithCkecksum+0x3c2>
   1beee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1bef0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1bef2:	2201      	movs	r2, #1
   1bef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bef6:	f004 fd2f 	bl	20958 <FS_read>
   1befa:	6278      	str	r0, [r7, #36]	; 0x24
   1befc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1befe:	2b01      	cmp	r3, #1
   1bf00:	d007      	beq.n	1bf12 <DeleteRecordMiddleWithCkecksum+0xfa>
   1bf02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bf04:	2b00      	cmp	r3, #0
   1bf06:	f040 8168 	bne.w	1c1da <DeleteRecordMiddleWithCkecksum+0x3c2>
   1bf0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1bf0c:	2b00      	cmp	r3, #0
   1bf0e:	f040 8164 	bne.w	1c1da <DeleteRecordMiddleWithCkecksum+0x3c2>
   1bf12:	4bcb      	ldr	r3, [pc, #812]	; (1c240 <DeleteRecordMiddleWithCkecksum+0x428>)
   1bf14:	58e3      	ldr	r3, [r4, r3]
   1bf16:	461a      	mov	r2, r3
   1bf18:	687b      	ldr	r3, [r7, #4]
   1bf1a:	212c      	movs	r1, #44	; 0x2c
   1bf1c:	fb01 f303 	mul.w	r3, r1, r3
   1bf20:	18d3      	adds	r3, r2, r3
   1bf22:	3328      	adds	r3, #40	; 0x28
   1bf24:	681b      	ldr	r3, [r3, #0]
   1bf26:	2b01      	cmp	r3, #1
   1bf28:	f040 80c7 	bne.w	1c0ba <DeleteRecordMiddleWithCkecksum+0x2a2>
   1bf2c:	2300      	movs	r3, #0
   1bf2e:	62bb      	str	r3, [r7, #40]	; 0x28
   1bf30:	2300      	movs	r3, #0
   1bf32:	62fb      	str	r3, [r7, #44]	; 0x2c
   1bf34:	e01d      	b.n	1bf72 <DeleteRecordMiddleWithCkecksum+0x15a>
   1bf36:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bf38:	2b00      	cmp	r3, #0
   1bf3a:	db14      	blt.n	1bf66 <DeleteRecordMiddleWithCkecksum+0x14e>
   1bf3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bf3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1bf40:	429a      	cmp	r2, r3
   1bf42:	da10      	bge.n	1bf66 <DeleteRecordMiddleWithCkecksum+0x14e>
   1bf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bf46:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1bf48:	18d3      	adds	r3, r2, r3
   1bf4a:	f107 021c 	add.w	r2, r7, #28
   1bf4e:	4610      	mov	r0, r2
   1bf50:	4619      	mov	r1, r3
   1bf52:	2204      	movs	r2, #4
   1bf54:	f7ec ee90 	blx	8c78 <_init+0x118>
   1bf58:	69fb      	ldr	r3, [r7, #28]
   1bf5a:	461a      	mov	r2, r3
   1bf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bf5e:	18d3      	adds	r3, r2, r3
   1bf60:	3304      	adds	r3, #4
   1bf62:	62bb      	str	r3, [r7, #40]	; 0x28
   1bf64:	e002      	b.n	1bf6c <DeleteRecordMiddleWithCkecksum+0x154>
   1bf66:	f04f 33ff 	mov.w	r3, #4294967295
   1bf6a:	62bb      	str	r3, [r7, #40]	; 0x28
   1bf6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bf6e:	3301      	adds	r3, #1
   1bf70:	62fb      	str	r3, [r7, #44]	; 0x2c
   1bf72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1bf74:	68bb      	ldr	r3, [r7, #8]
   1bf76:	429a      	cmp	r2, r3
   1bf78:	da02      	bge.n	1bf80 <DeleteRecordMiddleWithCkecksum+0x168>
   1bf7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bf7c:	2b00      	cmp	r3, #0
   1bf7e:	dada      	bge.n	1bf36 <DeleteRecordMiddleWithCkecksum+0x11e>
   1bf80:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bf82:	2b00      	cmp	r3, #0
   1bf84:	f2c0 8129 	blt.w	1c1da <DeleteRecordMiddleWithCkecksum+0x3c2>
   1bf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bf8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1bf8c:	18d3      	adds	r3, r2, r3
   1bf8e:	f107 021c 	add.w	r2, r7, #28
   1bf92:	4610      	mov	r0, r2
   1bf94:	4619      	mov	r1, r3
   1bf96:	2204      	movs	r2, #4
   1bf98:	f7ec ee6e 	blx	8c78 <_init+0x118>
   1bf9c:	69fb      	ldr	r3, [r7, #28]
   1bf9e:	2b00      	cmp	r3, #0
   1bfa0:	f340 811b 	ble.w	1c1da <DeleteRecordMiddleWithCkecksum+0x3c2>
   1bfa4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1bfa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1bfa8:	2201      	movs	r2, #1
   1bfaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bfac:	f004 fdac 	bl	20b08 <FS_write>
   1bfb0:	6278      	str	r0, [r7, #36]	; 0x24
   1bfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bfb4:	2b01      	cmp	r3, #1
   1bfb6:	d005      	beq.n	1bfc4 <DeleteRecordMiddleWithCkecksum+0x1ac>
   1bfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bfba:	2b00      	cmp	r3, #0
   1bfbc:	d117      	bne.n	1bfee <DeleteRecordMiddleWithCkecksum+0x1d6>
   1bfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bfc0:	2b00      	cmp	r3, #0
   1bfc2:	d114      	bne.n	1bfee <DeleteRecordMiddleWithCkecksum+0x1d6>
   1bfc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bfc6:	69fb      	ldr	r3, [r7, #28]
   1bfc8:	18d3      	adds	r3, r2, r3
   1bfca:	3304      	adds	r3, #4
   1bfcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1bfce:	18d2      	adds	r2, r2, r3
   1bfd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1bfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bfd4:	1acb      	subs	r3, r1, r3
   1bfd6:	f1a3 0110 	sub.w	r1, r3, #16
   1bfda:	69fb      	ldr	r3, [r7, #28]
   1bfdc:	1acb      	subs	r3, r1, r3
   1bfde:	3b04      	subs	r3, #4
   1bfe0:	4610      	mov	r0, r2
   1bfe2:	4619      	mov	r1, r3
   1bfe4:	2201      	movs	r2, #1
   1bfe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bfe8:	f004 fd8e 	bl	20b08 <FS_write>
   1bfec:	6278      	str	r0, [r7, #36]	; 0x24
   1bfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bff0:	2b01      	cmp	r3, #1
   1bff2:	d00d      	beq.n	1c010 <DeleteRecordMiddleWithCkecksum+0x1f8>
   1bff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bff6:	2b00      	cmp	r3, #0
   1bff8:	f040 80ef 	bne.w	1c1da <DeleteRecordMiddleWithCkecksum+0x3c2>
   1bffc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1bffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c000:	1ad3      	subs	r3, r2, r3
   1c002:	f1a3 0210 	sub.w	r2, r3, #16
   1c006:	69fb      	ldr	r3, [r7, #28]
   1c008:	1ad3      	subs	r3, r2, r3
   1c00a:	2b04      	cmp	r3, #4
   1c00c:	f040 80e5 	bne.w	1c1da <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c010:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1c014:	4618      	mov	r0, r3
   1c016:	f002 ffe9 	bl	1efec <md5_init>
   1c01a:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1c01e:	4618      	mov	r0, r3
   1c020:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1c022:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c024:	f003 f81c 	bl	1f060 <md5_append>
   1c028:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c02a:	69fb      	ldr	r3, [r7, #28]
   1c02c:	18d3      	adds	r3, r2, r3
   1c02e:	3304      	adds	r3, #4
   1c030:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1c032:	18d2      	adds	r2, r2, r3
   1c034:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1c036:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c038:	1acb      	subs	r3, r1, r3
   1c03a:	f1a3 0110 	sub.w	r1, r3, #16
   1c03e:	69fb      	ldr	r3, [r7, #28]
   1c040:	1acb      	subs	r3, r1, r3
   1c042:	3b04      	subs	r3, #4
   1c044:	f107 0144 	add.w	r1, r7, #68	; 0x44
   1c048:	4608      	mov	r0, r1
   1c04a:	4611      	mov	r1, r2
   1c04c:	461a      	mov	r2, r3
   1c04e:	f003 f807 	bl	1f060 <md5_append>
   1c052:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1c056:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1c05a:	4610      	mov	r0, r2
   1c05c:	4619      	mov	r1, r3
   1c05e:	f003 f88b 	bl	1f178 <md5_finish>
   1c062:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1c066:	4618      	mov	r0, r3
   1c068:	2110      	movs	r1, #16
   1c06a:	2201      	movs	r2, #1
   1c06c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c06e:	f004 fd4b 	bl	20b08 <FS_write>
   1c072:	6278      	str	r0, [r7, #36]	; 0x24
   1c074:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1c076:	f004 fb69 	bl	2074c <FS_close>
   1c07a:	2300      	movs	r3, #0
   1c07c:	633b      	str	r3, [r7, #48]	; 0x30
   1c07e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1c082:	4618      	mov	r0, r3
   1c084:	f004 fce8 	bl	20a58 <FS_unlink>
   1c088:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1c08a:	f004 fb5f 	bl	2074c <FS_close>
   1c08e:	2300      	movs	r3, #0
   1c090:	637b      	str	r3, [r7, #52]	; 0x34
   1c092:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
   1c096:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1c09a:	4610      	mov	r0, r2
   1c09c:	4619      	mov	r1, r3
   1c09e:	f004 fc87 	bl	209b0 <FS_rename>
   1c0a2:	6438      	str	r0, [r7, #64]	; 0x40
   1c0a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c0a6:	2b02      	cmp	r3, #2
   1c0a8:	f040 8097 	bne.w	1c1da <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c0ae:	2b01      	cmp	r3, #1
   1c0b0:	f040 8093 	bne.w	1c1da <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c0b4:	230a      	movs	r3, #10
   1c0b6:	623b      	str	r3, [r7, #32]
   1c0b8:	e08f      	b.n	1c1da <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c0ba:	68bb      	ldr	r3, [r7, #8]
   1c0bc:	68fa      	ldr	r2, [r7, #12]
   1c0be:	fb02 f303 	mul.w	r3, r2, r3
   1c0c2:	62bb      	str	r3, [r7, #40]	; 0x28
   1c0c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1c0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c0c8:	1ad2      	subs	r2, r2, r3
   1c0ca:	68fb      	ldr	r3, [r7, #12]
   1c0cc:	1ad3      	subs	r3, r2, r3
   1c0ce:	3b10      	subs	r3, #16
   1c0d0:	2b00      	cmp	r3, #0
   1c0d2:	f2c0 8082 	blt.w	1c1da <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c0d8:	2b00      	cmp	r3, #0
   1c0da:	db7e      	blt.n	1c1da <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c0dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1c0de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1c0e0:	2201      	movs	r2, #1
   1c0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c0e4:	f004 fd10 	bl	20b08 <FS_write>
   1c0e8:	6278      	str	r0, [r7, #36]	; 0x24
   1c0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c0ec:	2b01      	cmp	r3, #1
   1c0ee:	d005      	beq.n	1c0fc <DeleteRecordMiddleWithCkecksum+0x2e4>
   1c0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c0f2:	2b00      	cmp	r3, #0
   1c0f4:	d114      	bne.n	1c120 <DeleteRecordMiddleWithCkecksum+0x308>
   1c0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c0f8:	2b00      	cmp	r3, #0
   1c0fa:	d111      	bne.n	1c120 <DeleteRecordMiddleWithCkecksum+0x308>
   1c0fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c0fe:	68fb      	ldr	r3, [r7, #12]
   1c100:	18d3      	adds	r3, r2, r3
   1c102:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1c104:	18d2      	adds	r2, r2, r3
   1c106:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1c108:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c10a:	1ac9      	subs	r1, r1, r3
   1c10c:	68fb      	ldr	r3, [r7, #12]
   1c10e:	1acb      	subs	r3, r1, r3
   1c110:	3b10      	subs	r3, #16
   1c112:	4610      	mov	r0, r2
   1c114:	4619      	mov	r1, r3
   1c116:	2201      	movs	r2, #1
   1c118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c11a:	f004 fcf5 	bl	20b08 <FS_write>
   1c11e:	6278      	str	r0, [r7, #36]	; 0x24
   1c120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c122:	2b01      	cmp	r3, #1
   1c124:	d009      	beq.n	1c13a <DeleteRecordMiddleWithCkecksum+0x322>
   1c126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c128:	2b00      	cmp	r3, #0
   1c12a:	d156      	bne.n	1c1da <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c12c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1c12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c130:	1ad2      	subs	r2, r2, r3
   1c132:	68fb      	ldr	r3, [r7, #12]
   1c134:	1ad3      	subs	r3, r2, r3
   1c136:	2b10      	cmp	r3, #16
   1c138:	d14f      	bne.n	1c1da <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c13a:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1c13e:	4618      	mov	r0, r3
   1c140:	f002 ff54 	bl	1efec <md5_init>
   1c144:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1c148:	4618      	mov	r0, r3
   1c14a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1c14c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c14e:	f002 ff87 	bl	1f060 <md5_append>
   1c152:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c154:	68fb      	ldr	r3, [r7, #12]
   1c156:	18d3      	adds	r3, r2, r3
   1c158:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1c15a:	18d2      	adds	r2, r2, r3
   1c15c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1c15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c160:	1acb      	subs	r3, r1, r3
   1c162:	f1a3 0110 	sub.w	r1, r3, #16
   1c166:	68fb      	ldr	r3, [r7, #12]
   1c168:	1acb      	subs	r3, r1, r3
   1c16a:	f107 0144 	add.w	r1, r7, #68	; 0x44
   1c16e:	4608      	mov	r0, r1
   1c170:	4611      	mov	r1, r2
   1c172:	461a      	mov	r2, r3
   1c174:	f002 ff74 	bl	1f060 <md5_append>
   1c178:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1c17c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1c180:	4610      	mov	r0, r2
   1c182:	4619      	mov	r1, r3
   1c184:	f002 fff8 	bl	1f178 <md5_finish>
   1c188:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1c18c:	4618      	mov	r0, r3
   1c18e:	2110      	movs	r1, #16
   1c190:	2201      	movs	r2, #1
   1c192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c194:	f004 fcb8 	bl	20b08 <FS_write>
   1c198:	6278      	str	r0, [r7, #36]	; 0x24
   1c19a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1c19c:	f004 fad6 	bl	2074c <FS_close>
   1c1a0:	2300      	movs	r3, #0
   1c1a2:	633b      	str	r3, [r7, #48]	; 0x30
   1c1a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1c1a8:	4618      	mov	r0, r3
   1c1aa:	f004 fc55 	bl	20a58 <FS_unlink>
   1c1ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1c1b0:	f004 facc 	bl	2074c <FS_close>
   1c1b4:	2300      	movs	r3, #0
   1c1b6:	637b      	str	r3, [r7, #52]	; 0x34
   1c1b8:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
   1c1bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1c1c0:	4610      	mov	r0, r2
   1c1c2:	4619      	mov	r1, r3
   1c1c4:	f004 fbf4 	bl	209b0 <FS_rename>
   1c1c8:	6438      	str	r0, [r7, #64]	; 0x40
   1c1ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c1cc:	2b02      	cmp	r3, #2
   1c1ce:	d104      	bne.n	1c1da <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c1d2:	2b01      	cmp	r3, #1
   1c1d4:	d101      	bne.n	1c1da <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c1d6:	230a      	movs	r3, #10
   1c1d8:	623b      	str	r3, [r7, #32]
   1c1da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c1dc:	2b00      	cmp	r3, #0
   1c1de:	d007      	beq.n	1c1f0 <DeleteRecordMiddleWithCkecksum+0x3d8>
   1c1e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1c1e2:	f004 fab3 	bl	2074c <FS_close>
   1c1e6:	2300      	movs	r3, #0
   1c1e8:	637b      	str	r3, [r7, #52]	; 0x34
   1c1ea:	e001      	b.n	1c1f0 <DeleteRecordMiddleWithCkecksum+0x3d8>
   1c1ec:	231a      	movs	r3, #26
   1c1ee:	623b      	str	r3, [r7, #32]
   1c1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c1f2:	2b00      	cmp	r3, #0
   1c1f4:	d004      	beq.n	1c200 <DeleteRecordMiddleWithCkecksum+0x3e8>
   1c1f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1c1f8:	f004 faa8 	bl	2074c <FS_close>
   1c1fc:	2300      	movs	r3, #0
   1c1fe:	633b      	str	r3, [r7, #48]	; 0x30
   1c200:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1c202:	f004 fd35 	bl	20c70 <PageFree>
   1c206:	6a3b      	ldr	r3, [r7, #32]
   1c208:	4618      	mov	r0, r3
   1c20a:	4b07      	ldr	r3, [pc, #28]	; (1c228 <DeleteRecordMiddleWithCkecksum+0x410>)
   1c20c:	58e3      	ldr	r3, [r4, r3]
   1c20e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1c212:	681b      	ldr	r3, [r3, #0]
   1c214:	429a      	cmp	r2, r3
   1c216:	d001      	beq.n	1c21c <DeleteRecordMiddleWithCkecksum+0x404>
   1c218:	f7ec fec4 	bl	8fa4 <__stack_chk_fail>
   1c21c:	f107 07fc 	add.w	r7, r7, #252	; 0xfc
   1c220:	46bd      	mov	sp, r7
   1c222:	bd90      	pop	{r4, r7, pc}
   1c224:	000132e6 	.word	0x000132e6
   1c228:	000000ac 	.word	0x000000ac
   1c22c:	0000a302 	.word	0x0000a302
   1c230:	0000a306 	.word	0x0000a306
   1c234:	0000a2b6 	.word	0x0000a2b6
   1c238:	0000a2ca 	.word	0x0000a2ca
   1c23c:	0000a298 	.word	0x0000a298
   1c240:	000000c0 	.word	0x000000c0

0001c244 <DeleteRecordEnd>:
   1c244:	b590      	push	{r4, r7, lr}
   1c246:	b0a3      	sub	sp, #140	; 0x8c
   1c248:	af00      	add	r7, sp, #0
   1c24a:	60f8      	str	r0, [r7, #12]
   1c24c:	60b9      	str	r1, [r7, #8]
   1c24e:	607a      	str	r2, [r7, #4]
   1c250:	603b      	str	r3, [r7, #0]
   1c252:	4cc0      	ldr	r4, [pc, #768]	; (1c554 <DeleteRecordEnd+0x310>)
   1c254:	447c      	add	r4, pc
   1c256:	4bc0      	ldr	r3, [pc, #768]	; (1c558 <DeleteRecordEnd+0x314>)
   1c258:	58e3      	ldr	r3, [r4, r3]
   1c25a:	681b      	ldr	r3, [r3, #0]
   1c25c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   1c260:	231a      	movs	r3, #26
   1c262:	61bb      	str	r3, [r7, #24]
   1c264:	2300      	movs	r3, #0
   1c266:	62bb      	str	r3, [r7, #40]	; 0x28
   1c268:	2300      	movs	r3, #0
   1c26a:	623b      	str	r3, [r7, #32]
   1c26c:	2300      	movs	r3, #0
   1c26e:	627b      	str	r3, [r7, #36]	; 0x24
   1c270:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1c274:	4618      	mov	r0, r3
   1c276:	4bb9      	ldr	r3, [pc, #740]	; (1c55c <DeleteRecordEnd+0x318>)
   1c278:	447b      	add	r3, pc
   1c27a:	4619      	mov	r1, r3
   1c27c:	68fa      	ldr	r2, [r7, #12]
   1c27e:	68bb      	ldr	r3, [r7, #8]
   1c280:	f7ec ed18 	blx	8cb4 <_init+0x154>
   1c284:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1c288:	4618      	mov	r0, r3
   1c28a:	4bb5      	ldr	r3, [pc, #724]	; (1c560 <DeleteRecordEnd+0x31c>)
   1c28c:	447b      	add	r3, pc
   1c28e:	4619      	mov	r1, r3
   1c290:	f004 fb38 	bl	20904 <FS_open>
   1c294:	6238      	str	r0, [r7, #32]
   1c296:	6a3b      	ldr	r3, [r7, #32]
   1c298:	2b00      	cmp	r3, #0
   1c29a:	d102      	bne.n	1c2a2 <DeleteRecordEnd+0x5e>
   1c29c:	2313      	movs	r3, #19
   1c29e:	61bb      	str	r3, [r7, #24]
   1c2a0:	e148      	b.n	1c534 <DeleteRecordEnd+0x2f0>
   1c2a2:	6a38      	ldr	r0, [r7, #32]
   1c2a4:	f004 fad8 	bl	20858 <FS_length>
   1c2a8:	62f8      	str	r0, [r7, #44]	; 0x2c
   1c2aa:	6a38      	ldr	r0, [r7, #32]
   1c2ac:	2100      	movs	r1, #0
   1c2ae:	2200      	movs	r2, #0
   1c2b0:	f004 fba8 	bl	20a04 <FS_seek>
   1c2b4:	6338      	str	r0, [r7, #48]	; 0x30
   1c2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c2b8:	2b02      	cmp	r3, #2
   1c2ba:	f040 8133 	bne.w	1c524 <DeleteRecordEnd+0x2e0>
   1c2be:	4ba9      	ldr	r3, [pc, #676]	; (1c564 <DeleteRecordEnd+0x320>)
   1c2c0:	58e3      	ldr	r3, [r4, r3]
   1c2c2:	461a      	mov	r2, r3
   1c2c4:	683b      	ldr	r3, [r7, #0]
   1c2c6:	212c      	movs	r1, #44	; 0x2c
   1c2c8:	fb01 f303 	mul.w	r3, r1, r3
   1c2cc:	18d3      	adds	r3, r2, r3
   1c2ce:	3328      	adds	r3, #40	; 0x28
   1c2d0:	681b      	ldr	r3, [r3, #0]
   1c2d2:	2b01      	cmp	r3, #1
   1c2d4:	f040 80a6 	bne.w	1c424 <DeleteRecordEnd+0x1e0>
   1c2d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1c2dc:	4618      	mov	r0, r3
   1c2de:	4ba2      	ldr	r3, [pc, #648]	; (1c568 <DeleteRecordEnd+0x324>)
   1c2e0:	447b      	add	r3, pc
   1c2e2:	4619      	mov	r1, r3
   1c2e4:	68fa      	ldr	r2, [r7, #12]
   1c2e6:	4ba1      	ldr	r3, [pc, #644]	; (1c56c <DeleteRecordEnd+0x328>)
   1c2e8:	447b      	add	r3, pc
   1c2ea:	f7ec ece4 	blx	8cb4 <_init+0x154>
   1c2ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1c2f2:	4618      	mov	r0, r3
   1c2f4:	f004 fa84 	bl	20800 <FS_exist>
   1c2f8:	6338      	str	r0, [r7, #48]	; 0x30
   1c2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c2fc:	2b02      	cmp	r3, #2
   1c2fe:	d104      	bne.n	1c30a <DeleteRecordEnd+0xc6>
   1c300:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1c304:	4618      	mov	r0, r3
   1c306:	f004 fba7 	bl	20a58 <FS_unlink>
   1c30a:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1c30e:	4618      	mov	r0, r3
   1c310:	4b97      	ldr	r3, [pc, #604]	; (1c570 <DeleteRecordEnd+0x32c>)
   1c312:	447b      	add	r3, pc
   1c314:	4619      	mov	r1, r3
   1c316:	f004 faf5 	bl	20904 <FS_open>
   1c31a:	6278      	str	r0, [r7, #36]	; 0x24
   1c31c:	6a38      	ldr	r0, [r7, #32]
   1c31e:	2100      	movs	r1, #0
   1c320:	2200      	movs	r2, #0
   1c322:	f004 fb6f 	bl	20a04 <FS_seek>
   1c326:	6338      	str	r0, [r7, #48]	; 0x30
   1c328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c32a:	2b02      	cmp	r3, #2
   1c32c:	d170      	bne.n	1c410 <DeleteRecordEnd+0x1cc>
   1c32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c330:	4618      	mov	r0, r3
   1c332:	f004 fc73 	bl	20c1c <PageAlloc>
   1c336:	62b8      	str	r0, [r7, #40]	; 0x28
   1c338:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c33a:	2b00      	cmp	r3, #0
   1c33c:	d065      	beq.n	1c40a <DeleteRecordEnd+0x1c6>
   1c33e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c340:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1c342:	2201      	movs	r2, #1
   1c344:	6a3b      	ldr	r3, [r7, #32]
   1c346:	f004 fb07 	bl	20958 <FS_read>
   1c34a:	6378      	str	r0, [r7, #52]	; 0x34
   1c34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c34e:	2b01      	cmp	r3, #1
   1c350:	d005      	beq.n	1c35e <DeleteRecordEnd+0x11a>
   1c352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c354:	2b00      	cmp	r3, #0
   1c356:	d158      	bne.n	1c40a <DeleteRecordEnd+0x1c6>
   1c358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c35a:	2b00      	cmp	r3, #0
   1c35c:	d155      	bne.n	1c40a <DeleteRecordEnd+0x1c6>
   1c35e:	2300      	movs	r3, #0
   1c360:	61fb      	str	r3, [r7, #28]
   1c362:	2300      	movs	r3, #0
   1c364:	617b      	str	r3, [r7, #20]
   1c366:	e00f      	b.n	1c388 <DeleteRecordEnd+0x144>
   1c368:	69fb      	ldr	r3, [r7, #28]
   1c36a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c36c:	18d3      	adds	r3, r2, r3
   1c36e:	f107 0214 	add.w	r2, r7, #20
   1c372:	4610      	mov	r0, r2
   1c374:	4619      	mov	r1, r3
   1c376:	2204      	movs	r2, #4
   1c378:	f7ec ec7e 	blx	8c78 <_init+0x118>
   1c37c:	697b      	ldr	r3, [r7, #20]
   1c37e:	461a      	mov	r2, r3
   1c380:	69fb      	ldr	r3, [r7, #28]
   1c382:	18d3      	adds	r3, r2, r3
   1c384:	3304      	adds	r3, #4
   1c386:	61fb      	str	r3, [r7, #28]
   1c388:	69fa      	ldr	r2, [r7, #28]
   1c38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c38c:	429a      	cmp	r2, r3
   1c38e:	dbeb      	blt.n	1c368 <DeleteRecordEnd+0x124>
   1c390:	697b      	ldr	r3, [r7, #20]
   1c392:	3304      	adds	r3, #4
   1c394:	63bb      	str	r3, [r7, #56]	; 0x38
   1c396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c39a:	1ad3      	subs	r3, r2, r3
   1c39c:	2b00      	cmp	r3, #0
   1c39e:	db34      	blt.n	1c40a <DeleteRecordEnd+0x1c6>
   1c3a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c3a4:	1ad3      	subs	r3, r2, r3
   1c3a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c3a8:	4619      	mov	r1, r3
   1c3aa:	2201      	movs	r2, #1
   1c3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c3ae:	f004 fbab 	bl	20b08 <FS_write>
   1c3b2:	6378      	str	r0, [r7, #52]	; 0x34
   1c3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c3b6:	2b01      	cmp	r3, #1
   1c3b8:	d006      	beq.n	1c3c8 <DeleteRecordEnd+0x184>
   1c3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c3bc:	2b00      	cmp	r3, #0
   1c3be:	d124      	bne.n	1c40a <DeleteRecordEnd+0x1c6>
   1c3c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c3c4:	429a      	cmp	r2, r3
   1c3c6:	d120      	bne.n	1c40a <DeleteRecordEnd+0x1c6>
   1c3c8:	6a38      	ldr	r0, [r7, #32]
   1c3ca:	f004 f9bf 	bl	2074c <FS_close>
   1c3ce:	2300      	movs	r3, #0
   1c3d0:	623b      	str	r3, [r7, #32]
   1c3d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1c3d6:	4618      	mov	r0, r3
   1c3d8:	f004 fb3e 	bl	20a58 <FS_unlink>
   1c3dc:	6338      	str	r0, [r7, #48]	; 0x30
   1c3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c3e0:	2b02      	cmp	r3, #2
   1c3e2:	d112      	bne.n	1c40a <DeleteRecordEnd+0x1c6>
   1c3e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1c3e6:	f004 f9b1 	bl	2074c <FS_close>
   1c3ea:	2300      	movs	r3, #0
   1c3ec:	627b      	str	r3, [r7, #36]	; 0x24
   1c3ee:	f107 0260 	add.w	r2, r7, #96	; 0x60
   1c3f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1c3f6:	4610      	mov	r0, r2
   1c3f8:	4619      	mov	r1, r3
   1c3fa:	f004 fad9 	bl	209b0 <FS_rename>
   1c3fe:	6338      	str	r0, [r7, #48]	; 0x30
   1c400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c402:	2b02      	cmp	r3, #2
   1c404:	d101      	bne.n	1c40a <DeleteRecordEnd+0x1c6>
   1c406:	230a      	movs	r3, #10
   1c408:	61bb      	str	r3, [r7, #24]
   1c40a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c40c:	f004 fc30 	bl	20c70 <PageFree>
   1c410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c412:	2b00      	cmp	r3, #0
   1c414:	f000 8086 	beq.w	1c524 <DeleteRecordEnd+0x2e0>
   1c418:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1c41a:	f004 f997 	bl	2074c <FS_close>
   1c41e:	2300      	movs	r3, #0
   1c420:	627b      	str	r3, [r7, #36]	; 0x24
   1c422:	e07f      	b.n	1c524 <DeleteRecordEnd+0x2e0>
   1c424:	687b      	ldr	r3, [r7, #4]
   1c426:	63bb      	str	r3, [r7, #56]	; 0x38
   1c428:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1c42c:	4618      	mov	r0, r3
   1c42e:	4b51      	ldr	r3, [pc, #324]	; (1c574 <DeleteRecordEnd+0x330>)
   1c430:	447b      	add	r3, pc
   1c432:	4619      	mov	r1, r3
   1c434:	68fa      	ldr	r2, [r7, #12]
   1c436:	4b50      	ldr	r3, [pc, #320]	; (1c578 <DeleteRecordEnd+0x334>)
   1c438:	447b      	add	r3, pc
   1c43a:	f7ec ec3c 	blx	8cb4 <_init+0x154>
   1c43e:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1c442:	4618      	mov	r0, r3
   1c444:	f004 f9dc 	bl	20800 <FS_exist>
   1c448:	6338      	str	r0, [r7, #48]	; 0x30
   1c44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c44c:	2b02      	cmp	r3, #2
   1c44e:	d104      	bne.n	1c45a <DeleteRecordEnd+0x216>
   1c450:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1c454:	4618      	mov	r0, r3
   1c456:	f004 faff 	bl	20a58 <FS_unlink>
   1c45a:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1c45e:	4618      	mov	r0, r3
   1c460:	4b46      	ldr	r3, [pc, #280]	; (1c57c <DeleteRecordEnd+0x338>)
   1c462:	447b      	add	r3, pc
   1c464:	4619      	mov	r1, r3
   1c466:	f004 fa4d 	bl	20904 <FS_open>
   1c46a:	6278      	str	r0, [r7, #36]	; 0x24
   1c46c:	6a38      	ldr	r0, [r7, #32]
   1c46e:	2100      	movs	r1, #0
   1c470:	2200      	movs	r2, #0
   1c472:	f004 fac7 	bl	20a04 <FS_seek>
   1c476:	6338      	str	r0, [r7, #48]	; 0x30
   1c478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c47a:	2b02      	cmp	r3, #2
   1c47c:	d14a      	bne.n	1c514 <DeleteRecordEnd+0x2d0>
   1c47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c480:	4618      	mov	r0, r3
   1c482:	f004 fbcb 	bl	20c1c <PageAlloc>
   1c486:	62b8      	str	r0, [r7, #40]	; 0x28
   1c488:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c48a:	2b00      	cmp	r3, #0
   1c48c:	d03f      	beq.n	1c50e <DeleteRecordEnd+0x2ca>
   1c48e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c490:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1c492:	2201      	movs	r2, #1
   1c494:	6a3b      	ldr	r3, [r7, #32]
   1c496:	f004 fa5f 	bl	20958 <FS_read>
   1c49a:	6378      	str	r0, [r7, #52]	; 0x34
   1c49c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c49e:	2b01      	cmp	r3, #1
   1c4a0:	d005      	beq.n	1c4ae <DeleteRecordEnd+0x26a>
   1c4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c4a4:	2b00      	cmp	r3, #0
   1c4a6:	d132      	bne.n	1c50e <DeleteRecordEnd+0x2ca>
   1c4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c4aa:	2b00      	cmp	r3, #0
   1c4ac:	d12f      	bne.n	1c50e <DeleteRecordEnd+0x2ca>
   1c4ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c4b2:	1ad3      	subs	r3, r2, r3
   1c4b4:	2b00      	cmp	r3, #0
   1c4b6:	db2a      	blt.n	1c50e <DeleteRecordEnd+0x2ca>
   1c4b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c4bc:	1ad3      	subs	r3, r2, r3
   1c4be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c4c0:	4619      	mov	r1, r3
   1c4c2:	2201      	movs	r2, #1
   1c4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c4c6:	f004 fb1f 	bl	20b08 <FS_write>
   1c4ca:	6378      	str	r0, [r7, #52]	; 0x34
   1c4cc:	6a38      	ldr	r0, [r7, #32]
   1c4ce:	f004 f93d 	bl	2074c <FS_close>
   1c4d2:	2300      	movs	r3, #0
   1c4d4:	623b      	str	r3, [r7, #32]
   1c4d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1c4da:	4618      	mov	r0, r3
   1c4dc:	f004 fabc 	bl	20a58 <FS_unlink>
   1c4e0:	6338      	str	r0, [r7, #48]	; 0x30
   1c4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c4e4:	2b02      	cmp	r3, #2
   1c4e6:	d112      	bne.n	1c50e <DeleteRecordEnd+0x2ca>
   1c4e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1c4ea:	f004 f92f 	bl	2074c <FS_close>
   1c4ee:	2300      	movs	r3, #0
   1c4f0:	627b      	str	r3, [r7, #36]	; 0x24
   1c4f2:	f107 0260 	add.w	r2, r7, #96	; 0x60
   1c4f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1c4fa:	4610      	mov	r0, r2
   1c4fc:	4619      	mov	r1, r3
   1c4fe:	f004 fa57 	bl	209b0 <FS_rename>
   1c502:	6338      	str	r0, [r7, #48]	; 0x30
   1c504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c506:	2b02      	cmp	r3, #2
   1c508:	d101      	bne.n	1c50e <DeleteRecordEnd+0x2ca>
   1c50a:	230a      	movs	r3, #10
   1c50c:	61bb      	str	r3, [r7, #24]
   1c50e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c510:	f004 fbae 	bl	20c70 <PageFree>
   1c514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c516:	2b00      	cmp	r3, #0
   1c518:	d004      	beq.n	1c524 <DeleteRecordEnd+0x2e0>
   1c51a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1c51c:	f004 f916 	bl	2074c <FS_close>
   1c520:	2300      	movs	r3, #0
   1c522:	627b      	str	r3, [r7, #36]	; 0x24
   1c524:	6a3b      	ldr	r3, [r7, #32]
   1c526:	2b00      	cmp	r3, #0
   1c528:	d004      	beq.n	1c534 <DeleteRecordEnd+0x2f0>
   1c52a:	6a38      	ldr	r0, [r7, #32]
   1c52c:	f004 f90e 	bl	2074c <FS_close>
   1c530:	2300      	movs	r3, #0
   1c532:	623b      	str	r3, [r7, #32]
   1c534:	69bb      	ldr	r3, [r7, #24]
   1c536:	4618      	mov	r0, r3
   1c538:	4b07      	ldr	r3, [pc, #28]	; (1c558 <DeleteRecordEnd+0x314>)
   1c53a:	58e3      	ldr	r3, [r4, r3]
   1c53c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   1c540:	681b      	ldr	r3, [r3, #0]
   1c542:	429a      	cmp	r2, r3
   1c544:	d001      	beq.n	1c54a <DeleteRecordEnd+0x306>
   1c546:	f7ec fd2d 	bl	8fa4 <__stack_chk_fail>
   1c54a:	f107 078c 	add.w	r7, r7, #140	; 0x8c
   1c54e:	46bd      	mov	sp, r7
   1c550:	bd90      	pop	{r4, r7, pc}
   1c552:	bf00      	nop
   1c554:	00012ec0 	.word	0x00012ec0
   1c558:	000000ac 	.word	0x000000ac
   1c55c:	00009edc 	.word	0x00009edc
   1c560:	00009ee0 	.word	0x00009ee0
   1c564:	000000c0 	.word	0x000000c0
   1c568:	00009e74 	.word	0x00009e74
   1c56c:	00009e88 	.word	0x00009e88
   1c570:	00009e56 	.word	0x00009e56
   1c574:	00009d24 	.word	0x00009d24
   1c578:	00009d38 	.word	0x00009d38
   1c57c:	00009d06 	.word	0x00009d06

0001c580 <DeleteRecordEndWithCkecksum>:
   1c580:	b590      	push	{r4, r7, lr}
   1c582:	b0bd      	sub	sp, #244	; 0xf4
   1c584:	af00      	add	r7, sp, #0
   1c586:	60f8      	str	r0, [r7, #12]
   1c588:	60b9      	str	r1, [r7, #8]
   1c58a:	607a      	str	r2, [r7, #4]
   1c58c:	603b      	str	r3, [r7, #0]
   1c58e:	4cc7      	ldr	r4, [pc, #796]	; (1c8ac <DeleteRecordEndWithCkecksum+0x32c>)
   1c590:	447c      	add	r4, pc
   1c592:	4bc7      	ldr	r3, [pc, #796]	; (1c8b0 <DeleteRecordEndWithCkecksum+0x330>)
   1c594:	58e3      	ldr	r3, [r4, r3]
   1c596:	681b      	ldr	r3, [r3, #0]
   1c598:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
   1c59c:	231a      	movs	r3, #26
   1c59e:	61bb      	str	r3, [r7, #24]
   1c5a0:	2300      	movs	r3, #0
   1c5a2:	62bb      	str	r3, [r7, #40]	; 0x28
   1c5a4:	2300      	movs	r3, #0
   1c5a6:	623b      	str	r3, [r7, #32]
   1c5a8:	2300      	movs	r3, #0
   1c5aa:	627b      	str	r3, [r7, #36]	; 0x24
   1c5ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1c5b0:	4618      	mov	r0, r3
   1c5b2:	4bc0      	ldr	r3, [pc, #768]	; (1c8b4 <DeleteRecordEndWithCkecksum+0x334>)
   1c5b4:	447b      	add	r3, pc
   1c5b6:	4619      	mov	r1, r3
   1c5b8:	68fa      	ldr	r2, [r7, #12]
   1c5ba:	68bb      	ldr	r3, [r7, #8]
   1c5bc:	f7ec eb7a 	blx	8cb4 <_init+0x154>
   1c5c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1c5c4:	4618      	mov	r0, r3
   1c5c6:	4bbc      	ldr	r3, [pc, #752]	; (1c8b8 <DeleteRecordEndWithCkecksum+0x338>)
   1c5c8:	447b      	add	r3, pc
   1c5ca:	4619      	mov	r1, r3
   1c5cc:	f004 f99a 	bl	20904 <FS_open>
   1c5d0:	6238      	str	r0, [r7, #32]
   1c5d2:	6a3b      	ldr	r3, [r7, #32]
   1c5d4:	2b00      	cmp	r3, #0
   1c5d6:	d102      	bne.n	1c5de <DeleteRecordEndWithCkecksum+0x5e>
   1c5d8:	2313      	movs	r3, #19
   1c5da:	61bb      	str	r3, [r7, #24]
   1c5dc:	e157      	b.n	1c88e <DeleteRecordEndWithCkecksum+0x30e>
   1c5de:	6a38      	ldr	r0, [r7, #32]
   1c5e0:	f004 f93a 	bl	20858 <FS_length>
   1c5e4:	62f8      	str	r0, [r7, #44]	; 0x2c
   1c5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c5e8:	4618      	mov	r0, r3
   1c5ea:	f004 fb17 	bl	20c1c <PageAlloc>
   1c5ee:	62b8      	str	r0, [r7, #40]	; 0x28
   1c5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c5f2:	2b00      	cmp	r3, #0
   1c5f4:	f000 813e 	beq.w	1c874 <DeleteRecordEndWithCkecksum+0x2f4>
   1c5f8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   1c5fc:	4618      	mov	r0, r3
   1c5fe:	4baf      	ldr	r3, [pc, #700]	; (1c8bc <DeleteRecordEndWithCkecksum+0x33c>)
   1c600:	447b      	add	r3, pc
   1c602:	4619      	mov	r1, r3
   1c604:	68fa      	ldr	r2, [r7, #12]
   1c606:	4bae      	ldr	r3, [pc, #696]	; (1c8c0 <DeleteRecordEndWithCkecksum+0x340>)
   1c608:	447b      	add	r3, pc
   1c60a:	f7ec eb54 	blx	8cb4 <_init+0x154>
   1c60e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   1c612:	4618      	mov	r0, r3
   1c614:	f004 f8f4 	bl	20800 <FS_exist>
   1c618:	6338      	str	r0, [r7, #48]	; 0x30
   1c61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c61c:	2b02      	cmp	r3, #2
   1c61e:	d104      	bne.n	1c62a <DeleteRecordEndWithCkecksum+0xaa>
   1c620:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   1c624:	4618      	mov	r0, r3
   1c626:	f004 fa17 	bl	20a58 <FS_unlink>
   1c62a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   1c62e:	4618      	mov	r0, r3
   1c630:	4ba4      	ldr	r3, [pc, #656]	; (1c8c4 <DeleteRecordEndWithCkecksum+0x344>)
   1c632:	447b      	add	r3, pc
   1c634:	4619      	mov	r1, r3
   1c636:	f004 f965 	bl	20904 <FS_open>
   1c63a:	6278      	str	r0, [r7, #36]	; 0x24
   1c63c:	6a38      	ldr	r0, [r7, #32]
   1c63e:	2100      	movs	r1, #0
   1c640:	2200      	movs	r2, #0
   1c642:	f004 f9df 	bl	20a04 <FS_seek>
   1c646:	6338      	str	r0, [r7, #48]	; 0x30
   1c648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c64a:	2b02      	cmp	r3, #2
   1c64c:	f040 8109 	bne.w	1c862 <DeleteRecordEndWithCkecksum+0x2e2>
   1c650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c652:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1c654:	2201      	movs	r2, #1
   1c656:	6a3b      	ldr	r3, [r7, #32]
   1c658:	f004 f97e 	bl	20958 <FS_read>
   1c65c:	6378      	str	r0, [r7, #52]	; 0x34
   1c65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c660:	2b01      	cmp	r3, #1
   1c662:	d007      	beq.n	1c674 <DeleteRecordEndWithCkecksum+0xf4>
   1c664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c666:	2b00      	cmp	r3, #0
   1c668:	f040 80fb 	bne.w	1c862 <DeleteRecordEndWithCkecksum+0x2e2>
   1c66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c66e:	2b00      	cmp	r3, #0
   1c670:	f040 80f7 	bne.w	1c862 <DeleteRecordEndWithCkecksum+0x2e2>
   1c674:	4b94      	ldr	r3, [pc, #592]	; (1c8c8 <DeleteRecordEndWithCkecksum+0x348>)
   1c676:	58e3      	ldr	r3, [r4, r3]
   1c678:	461a      	mov	r2, r3
   1c67a:	683b      	ldr	r3, [r7, #0]
   1c67c:	212c      	movs	r1, #44	; 0x2c
   1c67e:	fb01 f303 	mul.w	r3, r1, r3
   1c682:	18d3      	adds	r3, r2, r3
   1c684:	3328      	adds	r3, #40	; 0x28
   1c686:	681b      	ldr	r3, [r3, #0]
   1c688:	2b01      	cmp	r3, #1
   1c68a:	f040 8087 	bne.w	1c79c <DeleteRecordEndWithCkecksum+0x21c>
   1c68e:	2300      	movs	r3, #0
   1c690:	61fb      	str	r3, [r7, #28]
   1c692:	2300      	movs	r3, #0
   1c694:	617b      	str	r3, [r7, #20]
   1c696:	e00f      	b.n	1c6b8 <DeleteRecordEndWithCkecksum+0x138>
   1c698:	69fb      	ldr	r3, [r7, #28]
   1c69a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c69c:	18d3      	adds	r3, r2, r3
   1c69e:	f107 0214 	add.w	r2, r7, #20
   1c6a2:	4610      	mov	r0, r2
   1c6a4:	4619      	mov	r1, r3
   1c6a6:	2204      	movs	r2, #4
   1c6a8:	f7ec eae6 	blx	8c78 <_init+0x118>
   1c6ac:	697b      	ldr	r3, [r7, #20]
   1c6ae:	461a      	mov	r2, r3
   1c6b0:	69fb      	ldr	r3, [r7, #28]
   1c6b2:	18d3      	adds	r3, r2, r3
   1c6b4:	3304      	adds	r3, #4
   1c6b6:	61fb      	str	r3, [r7, #28]
   1c6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c6ba:	f1a3 0210 	sub.w	r2, r3, #16
   1c6be:	69fb      	ldr	r3, [r7, #28]
   1c6c0:	429a      	cmp	r2, r3
   1c6c2:	dce9      	bgt.n	1c698 <DeleteRecordEndWithCkecksum+0x118>
   1c6c4:	697b      	ldr	r3, [r7, #20]
   1c6c6:	3304      	adds	r3, #4
   1c6c8:	63bb      	str	r3, [r7, #56]	; 0x38
   1c6ca:	697b      	ldr	r3, [r7, #20]
   1c6cc:	2b00      	cmp	r3, #0
   1c6ce:	f2c0 80c8 	blt.w	1c862 <DeleteRecordEndWithCkecksum+0x2e2>
   1c6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c6d4:	f1a3 0210 	sub.w	r2, r3, #16
   1c6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c6da:	1ad3      	subs	r3, r2, r3
   1c6dc:	2b00      	cmp	r3, #0
   1c6de:	f2c0 80c0 	blt.w	1c862 <DeleteRecordEndWithCkecksum+0x2e2>
   1c6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c6e4:	f1a3 0210 	sub.w	r2, r3, #16
   1c6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c6ea:	1ad3      	subs	r3, r2, r3
   1c6ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c6ee:	4619      	mov	r1, r3
   1c6f0:	2201      	movs	r2, #1
   1c6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c6f4:	f004 fa08 	bl	20b08 <FS_write>
   1c6f8:	6378      	str	r0, [r7, #52]	; 0x34
   1c6fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c6fc:	2b01      	cmp	r3, #1
   1c6fe:	d00a      	beq.n	1c716 <DeleteRecordEndWithCkecksum+0x196>
   1c700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c702:	2b00      	cmp	r3, #0
   1c704:	f040 80ad 	bne.w	1c862 <DeleteRecordEndWithCkecksum+0x2e2>
   1c708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c70a:	f1a3 0210 	sub.w	r2, r3, #16
   1c70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c710:	429a      	cmp	r2, r3
   1c712:	f040 80a6 	bne.w	1c862 <DeleteRecordEndWithCkecksum+0x2e2>
   1c716:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1c71a:	4618      	mov	r0, r3
   1c71c:	f002 fc66 	bl	1efec <md5_init>
   1c720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c722:	f1a3 0210 	sub.w	r2, r3, #16
   1c726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c728:	1ad3      	subs	r3, r2, r3
   1c72a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1c72e:	4610      	mov	r0, r2
   1c730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1c732:	461a      	mov	r2, r3
   1c734:	f002 fc94 	bl	1f060 <md5_append>
   1c738:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1c73c:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1c740:	4610      	mov	r0, r2
   1c742:	4619      	mov	r1, r3
   1c744:	f002 fd18 	bl	1f178 <md5_finish>
   1c748:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1c74c:	4618      	mov	r0, r3
   1c74e:	2110      	movs	r1, #16
   1c750:	2201      	movs	r2, #1
   1c752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c754:	f004 f9d8 	bl	20b08 <FS_write>
   1c758:	6378      	str	r0, [r7, #52]	; 0x34
   1c75a:	6a38      	ldr	r0, [r7, #32]
   1c75c:	f003 fff6 	bl	2074c <FS_close>
   1c760:	2300      	movs	r3, #0
   1c762:	623b      	str	r3, [r7, #32]
   1c764:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1c768:	4618      	mov	r0, r3
   1c76a:	f004 f975 	bl	20a58 <FS_unlink>
   1c76e:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1c770:	f003 ffec 	bl	2074c <FS_close>
   1c774:	2300      	movs	r3, #0
   1c776:	627b      	str	r3, [r7, #36]	; 0x24
   1c778:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   1c77c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1c780:	4610      	mov	r0, r2
   1c782:	4619      	mov	r1, r3
   1c784:	f004 f914 	bl	209b0 <FS_rename>
   1c788:	6338      	str	r0, [r7, #48]	; 0x30
   1c78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c78c:	2b02      	cmp	r3, #2
   1c78e:	d168      	bne.n	1c862 <DeleteRecordEndWithCkecksum+0x2e2>
   1c790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c792:	2b01      	cmp	r3, #1
   1c794:	d165      	bne.n	1c862 <DeleteRecordEndWithCkecksum+0x2e2>
   1c796:	230a      	movs	r3, #10
   1c798:	61bb      	str	r3, [r7, #24]
   1c79a:	e062      	b.n	1c862 <DeleteRecordEndWithCkecksum+0x2e2>
   1c79c:	687b      	ldr	r3, [r7, #4]
   1c79e:	63bb      	str	r3, [r7, #56]	; 0x38
   1c7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c7a2:	f1a3 0210 	sub.w	r2, r3, #16
   1c7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c7a8:	1ad3      	subs	r3, r2, r3
   1c7aa:	2b00      	cmp	r3, #0
   1c7ac:	db59      	blt.n	1c862 <DeleteRecordEndWithCkecksum+0x2e2>
   1c7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c7b0:	f1a3 0210 	sub.w	r2, r3, #16
   1c7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c7b6:	1ad3      	subs	r3, r2, r3
   1c7b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c7ba:	4619      	mov	r1, r3
   1c7bc:	2201      	movs	r2, #1
   1c7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c7c0:	f004 f9a2 	bl	20b08 <FS_write>
   1c7c4:	6378      	str	r0, [r7, #52]	; 0x34
   1c7c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c7c8:	2b01      	cmp	r3, #1
   1c7ca:	d008      	beq.n	1c7de <DeleteRecordEndWithCkecksum+0x25e>
   1c7cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c7ce:	2b00      	cmp	r3, #0
   1c7d0:	d147      	bne.n	1c862 <DeleteRecordEndWithCkecksum+0x2e2>
   1c7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c7d4:	f1a3 0210 	sub.w	r2, r3, #16
   1c7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c7da:	429a      	cmp	r2, r3
   1c7dc:	d141      	bne.n	1c862 <DeleteRecordEndWithCkecksum+0x2e2>
   1c7de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1c7e2:	4618      	mov	r0, r3
   1c7e4:	f002 fc02 	bl	1efec <md5_init>
   1c7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c7ea:	f1a3 0210 	sub.w	r2, r3, #16
   1c7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c7f0:	1ad3      	subs	r3, r2, r3
   1c7f2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1c7f6:	4610      	mov	r0, r2
   1c7f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1c7fa:	461a      	mov	r2, r3
   1c7fc:	f002 fc30 	bl	1f060 <md5_append>
   1c800:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1c804:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1c808:	4610      	mov	r0, r2
   1c80a:	4619      	mov	r1, r3
   1c80c:	f002 fcb4 	bl	1f178 <md5_finish>
   1c810:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1c814:	4618      	mov	r0, r3
   1c816:	2110      	movs	r1, #16
   1c818:	2201      	movs	r2, #1
   1c81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c81c:	f004 f974 	bl	20b08 <FS_write>
   1c820:	6378      	str	r0, [r7, #52]	; 0x34
   1c822:	6a38      	ldr	r0, [r7, #32]
   1c824:	f003 ff92 	bl	2074c <FS_close>
   1c828:	2300      	movs	r3, #0
   1c82a:	623b      	str	r3, [r7, #32]
   1c82c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1c830:	4618      	mov	r0, r3
   1c832:	f004 f911 	bl	20a58 <FS_unlink>
   1c836:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1c838:	f003 ff88 	bl	2074c <FS_close>
   1c83c:	2300      	movs	r3, #0
   1c83e:	627b      	str	r3, [r7, #36]	; 0x24
   1c840:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   1c844:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1c848:	4610      	mov	r0, r2
   1c84a:	4619      	mov	r1, r3
   1c84c:	f004 f8b0 	bl	209b0 <FS_rename>
   1c850:	6338      	str	r0, [r7, #48]	; 0x30
   1c852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c854:	2b02      	cmp	r3, #2
   1c856:	d104      	bne.n	1c862 <DeleteRecordEndWithCkecksum+0x2e2>
   1c858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c85a:	2b01      	cmp	r3, #1
   1c85c:	d101      	bne.n	1c862 <DeleteRecordEndWithCkecksum+0x2e2>
   1c85e:	230a      	movs	r3, #10
   1c860:	61bb      	str	r3, [r7, #24]
   1c862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c864:	2b00      	cmp	r3, #0
   1c866:	d007      	beq.n	1c878 <DeleteRecordEndWithCkecksum+0x2f8>
   1c868:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1c86a:	f003 ff6f 	bl	2074c <FS_close>
   1c86e:	2300      	movs	r3, #0
   1c870:	627b      	str	r3, [r7, #36]	; 0x24
   1c872:	e001      	b.n	1c878 <DeleteRecordEndWithCkecksum+0x2f8>
   1c874:	231a      	movs	r3, #26
   1c876:	61bb      	str	r3, [r7, #24]
   1c878:	6a3b      	ldr	r3, [r7, #32]
   1c87a:	2b00      	cmp	r3, #0
   1c87c:	d004      	beq.n	1c888 <DeleteRecordEndWithCkecksum+0x308>
   1c87e:	6a38      	ldr	r0, [r7, #32]
   1c880:	f003 ff64 	bl	2074c <FS_close>
   1c884:	2300      	movs	r3, #0
   1c886:	623b      	str	r3, [r7, #32]
   1c888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c88a:	f004 f9f1 	bl	20c70 <PageFree>
   1c88e:	69bb      	ldr	r3, [r7, #24]
   1c890:	4618      	mov	r0, r3
   1c892:	4b07      	ldr	r3, [pc, #28]	; (1c8b0 <DeleteRecordEndWithCkecksum+0x330>)
   1c894:	58e3      	ldr	r3, [r4, r3]
   1c896:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
   1c89a:	681b      	ldr	r3, [r3, #0]
   1c89c:	429a      	cmp	r2, r3
   1c89e:	d001      	beq.n	1c8a4 <DeleteRecordEndWithCkecksum+0x324>
   1c8a0:	f7ec fb80 	bl	8fa4 <__stack_chk_fail>
   1c8a4:	f107 07f4 	add.w	r7, r7, #244	; 0xf4
   1c8a8:	46bd      	mov	sp, r7
   1c8aa:	bd90      	pop	{r4, r7, pc}
   1c8ac:	00012b84 	.word	0x00012b84
   1c8b0:	000000ac 	.word	0x000000ac
   1c8b4:	00009ba0 	.word	0x00009ba0
   1c8b8:	00009ba4 	.word	0x00009ba4
   1c8bc:	00009b54 	.word	0x00009b54
   1c8c0:	00009b68 	.word	0x00009b68
   1c8c4:	00009b36 	.word	0x00009b36
   1c8c8:	000000c0 	.word	0x000000c0

0001c8cc <IsFileEmpty>:
   1c8cc:	b580      	push	{r7, lr}
   1c8ce:	b084      	sub	sp, #16
   1c8d0:	af00      	add	r7, sp, #0
   1c8d2:	6078      	str	r0, [r7, #4]
   1c8d4:	6039      	str	r1, [r7, #0]
   1c8d6:	4b11      	ldr	r3, [pc, #68]	; (1c91c <IsFileEmpty+0x50>)
   1c8d8:	447b      	add	r3, pc
   1c8da:	4a11      	ldr	r2, [pc, #68]	; (1c920 <IsFileEmpty+0x54>)
   1c8dc:	589a      	ldr	r2, [r3, r2]
   1c8de:	6812      	ldr	r2, [r2, #0]
   1c8e0:	60fa      	str	r2, [r7, #12]
   1c8e2:	683a      	ldr	r2, [r7, #0]
   1c8e4:	2a00      	cmp	r2, #0
   1c8e6:	d102      	bne.n	1c8ee <IsFileEmpty+0x22>
   1c8e8:	687a      	ldr	r2, [r7, #4]
   1c8ea:	2a00      	cmp	r2, #0
   1c8ec:	dc05      	bgt.n	1c8fa <IsFileEmpty+0x2e>
   1c8ee:	683a      	ldr	r2, [r7, #0]
   1c8f0:	2a01      	cmp	r2, #1
   1c8f2:	d104      	bne.n	1c8fe <IsFileEmpty+0x32>
   1c8f4:	687a      	ldr	r2, [r7, #4]
   1c8f6:	2a10      	cmp	r2, #16
   1c8f8:	dd01      	ble.n	1c8fe <IsFileEmpty+0x32>
   1c8fa:	2200      	movs	r2, #0
   1c8fc:	e000      	b.n	1c900 <IsFileEmpty+0x34>
   1c8fe:	2201      	movs	r2, #1
   1c900:	4610      	mov	r0, r2
   1c902:	4a07      	ldr	r2, [pc, #28]	; (1c920 <IsFileEmpty+0x54>)
   1c904:	589b      	ldr	r3, [r3, r2]
   1c906:	68fa      	ldr	r2, [r7, #12]
   1c908:	681b      	ldr	r3, [r3, #0]
   1c90a:	429a      	cmp	r2, r3
   1c90c:	d001      	beq.n	1c912 <IsFileEmpty+0x46>
   1c90e:	f7ec fb49 	bl	8fa4 <__stack_chk_fail>
   1c912:	f107 0710 	add.w	r7, r7, #16
   1c916:	46bd      	mov	sp, r7
   1c918:	bd80      	pop	{r7, pc}
   1c91a:	bf00      	nop
   1c91c:	0001283c 	.word	0x0001283c
   1c920:	000000ac 	.word	0x000000ac

0001c924 <FMG_Init>:
   1c924:	b590      	push	{r4, r7, lr}
   1c926:	b09f      	sub	sp, #124	; 0x7c
   1c928:	af00      	add	r7, sp, #0
   1c92a:	4c71      	ldr	r4, [pc, #452]	; (1caf0 <FMG_Init+0x1cc>)
   1c92c:	447c      	add	r4, pc
   1c92e:	4b71      	ldr	r3, [pc, #452]	; (1caf4 <FMG_Init+0x1d0>)
   1c930:	58e3      	ldr	r3, [r4, r3]
   1c932:	681b      	ldr	r3, [r3, #0]
   1c934:	677b      	str	r3, [r7, #116]	; 0x74
   1c936:	2300      	movs	r3, #0
   1c938:	60bb      	str	r3, [r7, #8]
   1c93a:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1c93e:	4618      	mov	r0, r3
   1c940:	2100      	movs	r1, #0
   1c942:	2223      	movs	r2, #35	; 0x23
   1c944:	f7ec e93a 	blx	8bbc <_init+0x5c>
   1c948:	4b6b      	ldr	r3, [pc, #428]	; (1caf8 <FMG_Init+0x1d4>)
   1c94a:	447b      	add	r3, pc
   1c94c:	4618      	mov	r0, r3
   1c94e:	2100      	movs	r1, #0
   1c950:	2211      	movs	r2, #17
   1c952:	f7ec e934 	blx	8bbc <_init+0x5c>
   1c956:	f003 fecd 	bl	206f4 <ApplicationGetCurrent>
   1c95a:	4603      	mov	r3, r0
   1c95c:	461a      	mov	r2, r3
   1c95e:	f107 0318 	add.w	r3, r7, #24
   1c962:	2001      	movs	r0, #1
   1c964:	4611      	mov	r1, r2
   1c966:	461a      	mov	r2, r3
   1c968:	f004 f92c 	bl	20bc4 <ObjectGetInfo>
   1c96c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
   1c970:	4a62      	ldr	r2, [pc, #392]	; (1cafc <FMG_Init+0x1d8>)
   1c972:	447a      	add	r2, pc
   1c974:	4610      	mov	r0, r2
   1c976:	4a62      	ldr	r2, [pc, #392]	; (1cb00 <FMG_Init+0x1dc>)
   1c978:	447a      	add	r2, pc
   1c97a:	4611      	mov	r1, r2
   1c97c:	4a61      	ldr	r2, [pc, #388]	; (1cb04 <FMG_Init+0x1e0>)
   1c97e:	447a      	add	r2, pc
   1c980:	f7ec e998 	blx	8cb4 <_init+0x154>
   1c984:	4b60      	ldr	r3, [pc, #384]	; (1cb08 <FMG_Init+0x1e4>)
   1c986:	447b      	add	r3, pc
   1c988:	4618      	mov	r0, r3
   1c98a:	f44f 31c8 	mov.w	r1, #102400	; 0x19000
   1c98e:	221e      	movs	r2, #30
   1c990:	f7fc ffd8 	bl	19944 <CreateOrMountDisk>
   1c994:	60f8      	str	r0, [r7, #12]
   1c996:	68fb      	ldr	r3, [r7, #12]
   1c998:	2b02      	cmp	r3, #2
   1c99a:	d003      	beq.n	1c9a4 <FMG_Init+0x80>
   1c99c:	68fb      	ldr	r3, [r7, #12]
   1c99e:	2b06      	cmp	r3, #6
   1c9a0:	f040 8093 	bne.w	1caca <FMG_Init+0x1a6>
   1c9a4:	231f      	movs	r3, #31
   1c9a6:	603b      	str	r3, [r7, #0]
   1c9a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1c9ac:	4618      	mov	r0, r3
   1c9ae:	4b57      	ldr	r3, [pc, #348]	; (1cb0c <FMG_Init+0x1e8>)
   1c9b0:	447b      	add	r3, pc
   1c9b2:	4619      	mov	r1, r3
   1c9b4:	4b56      	ldr	r3, [pc, #344]	; (1cb10 <FMG_Init+0x1ec>)
   1c9b6:	447b      	add	r3, pc
   1c9b8:	461a      	mov	r2, r3
   1c9ba:	4b56      	ldr	r3, [pc, #344]	; (1cb14 <FMG_Init+0x1f0>)
   1c9bc:	447b      	add	r3, pc
   1c9be:	f7ec e97a 	blx	8cb4 <_init+0x154>
   1c9c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1c9c6:	4618      	mov	r0, r3
   1c9c8:	f003 ff1a 	bl	20800 <FS_exist>
   1c9cc:	60f8      	str	r0, [r7, #12]
   1c9ce:	68fb      	ldr	r3, [r7, #12]
   1c9d0:	2b02      	cmp	r3, #2
   1c9d2:	d169      	bne.n	1caa8 <FMG_Init+0x184>
   1c9d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1c9d8:	4618      	mov	r0, r3
   1c9da:	4b4f      	ldr	r3, [pc, #316]	; (1cb18 <FMG_Init+0x1f4>)
   1c9dc:	447b      	add	r3, pc
   1c9de:	4619      	mov	r1, r3
   1c9e0:	f003 ff90 	bl	20904 <FS_open>
   1c9e4:	60b8      	str	r0, [r7, #8]
   1c9e6:	68bb      	ldr	r3, [r7, #8]
   1c9e8:	2b00      	cmp	r3, #0
   1c9ea:	d071      	beq.n	1cad0 <FMG_Init+0x1ac>
   1c9ec:	68b8      	ldr	r0, [r7, #8]
   1c9ee:	2100      	movs	r1, #0
   1c9f0:	2200      	movs	r2, #0
   1c9f2:	f004 f807 	bl	20a04 <FS_seek>
   1c9f6:	4b49      	ldr	r3, [pc, #292]	; (1cb1c <FMG_Init+0x1f8>)
   1c9f8:	58e3      	ldr	r3, [r4, r3]
   1c9fa:	4618      	mov	r0, r3
   1c9fc:	f241 1134 	movw	r1, #4404	; 0x1134
   1ca00:	2201      	movs	r2, #1
   1ca02:	68bb      	ldr	r3, [r7, #8]
   1ca04:	f003 ffa8 	bl	20958 <FS_read>
   1ca08:	6138      	str	r0, [r7, #16]
   1ca0a:	693b      	ldr	r3, [r7, #16]
   1ca0c:	2b01      	cmp	r3, #1
   1ca0e:	d101      	bne.n	1ca14 <FMG_Init+0xf0>
   1ca10:	231e      	movs	r3, #30
   1ca12:	603b      	str	r3, [r7, #0]
   1ca14:	68b8      	ldr	r0, [r7, #8]
   1ca16:	f003 fe99 	bl	2074c <FS_close>
   1ca1a:	2300      	movs	r3, #0
   1ca1c:	60bb      	str	r3, [r7, #8]
   1ca1e:	4b3f      	ldr	r3, [pc, #252]	; (1cb1c <FMG_Init+0x1f8>)
   1ca20:	58e3      	ldr	r3, [r4, r3]
   1ca22:	681b      	ldr	r3, [r3, #0]
   1ca24:	617b      	str	r3, [r7, #20]
   1ca26:	2300      	movs	r3, #0
   1ca28:	607b      	str	r3, [r7, #4]
   1ca2a:	e038      	b.n	1ca9e <FMG_Init+0x17a>
   1ca2c:	687b      	ldr	r3, [r7, #4]
   1ca2e:	222c      	movs	r2, #44	; 0x2c
   1ca30:	fb02 f203 	mul.w	r2, r2, r3
   1ca34:	4b39      	ldr	r3, [pc, #228]	; (1cb1c <FMG_Init+0x1f8>)
   1ca36:	58e3      	ldr	r3, [r4, r3]
   1ca38:	18d3      	adds	r3, r2, r3
   1ca3a:	1d1a      	adds	r2, r3, #4
   1ca3c:	687b      	ldr	r3, [r7, #4]
   1ca3e:	212c      	movs	r1, #44	; 0x2c
   1ca40:	fb01 f303 	mul.w	r3, r1, r3
   1ca44:	f103 0110 	add.w	r1, r3, #16
   1ca48:	4b34      	ldr	r3, [pc, #208]	; (1cb1c <FMG_Init+0x1f8>)
   1ca4a:	58e3      	ldr	r3, [r4, r3]
   1ca4c:	18cb      	adds	r3, r1, r3
   1ca4e:	3305      	adds	r3, #5
   1ca50:	f107 0150 	add.w	r1, r7, #80	; 0x50
   1ca54:	4608      	mov	r0, r1
   1ca56:	4932      	ldr	r1, [pc, #200]	; (1cb20 <FMG_Init+0x1fc>)
   1ca58:	4479      	add	r1, pc
   1ca5a:	f7ec e92c 	blx	8cb4 <_init+0x154>
   1ca5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1ca62:	4618      	mov	r0, r3
   1ca64:	4b2f      	ldr	r3, [pc, #188]	; (1cb24 <FMG_Init+0x200>)
   1ca66:	447b      	add	r3, pc
   1ca68:	4619      	mov	r1, r3
   1ca6a:	f003 ff4b 	bl	20904 <FS_open>
   1ca6e:	60b8      	str	r0, [r7, #8]
   1ca70:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1ca74:	4618      	mov	r0, r3
   1ca76:	f003 fec3 	bl	20800 <FS_exist>
   1ca7a:	60f8      	str	r0, [r7, #12]
   1ca7c:	68bb      	ldr	r3, [r7, #8]
   1ca7e:	2b00      	cmp	r3, #0
   1ca80:	d105      	bne.n	1ca8e <FMG_Init+0x16a>
   1ca82:	4b29      	ldr	r3, [pc, #164]	; (1cb28 <FMG_Init+0x204>)
   1ca84:	447b      	add	r3, pc
   1ca86:	4618      	mov	r0, r3
   1ca88:	f004 fa9a 	bl	20fc0 <upload_diagnostic_txt>
   1ca8c:	e004      	b.n	1ca98 <FMG_Init+0x174>
   1ca8e:	68b8      	ldr	r0, [r7, #8]
   1ca90:	f003 fe5c 	bl	2074c <FS_close>
   1ca94:	2300      	movs	r3, #0
   1ca96:	60bb      	str	r3, [r7, #8]
   1ca98:	687b      	ldr	r3, [r7, #4]
   1ca9a:	3301      	adds	r3, #1
   1ca9c:	607b      	str	r3, [r7, #4]
   1ca9e:	687a      	ldr	r2, [r7, #4]
   1caa0:	697b      	ldr	r3, [r7, #20]
   1caa2:	429a      	cmp	r2, r3
   1caa4:	dbc2      	blt.n	1ca2c <FMG_Init+0x108>
   1caa6:	e00f      	b.n	1cac8 <FMG_Init+0x1a4>
   1caa8:	4b1c      	ldr	r3, [pc, #112]	; (1cb1c <FMG_Init+0x1f8>)
   1caaa:	58e3      	ldr	r3, [r4, r3]
   1caac:	2200      	movs	r2, #0
   1caae:	601a      	str	r2, [r3, #0]
   1cab0:	4b1a      	ldr	r3, [pc, #104]	; (1cb1c <FMG_Init+0x1f8>)
   1cab2:	58e3      	ldr	r3, [r4, r3]
   1cab4:	1d18      	adds	r0, r3, #4
   1cab6:	2100      	movs	r1, #0
   1cab8:	f241 1230 	movw	r2, #4400	; 0x1130
   1cabc:	f7ec e87e 	blx	8bbc <_init+0x5c>
   1cac0:	f7fc ff86 	bl	199d0 <SaveMangementFile>
   1cac4:	6038      	str	r0, [r7, #0]
   1cac6:	e003      	b.n	1cad0 <FMG_Init+0x1ac>
   1cac8:	e002      	b.n	1cad0 <FMG_Init+0x1ac>
   1caca:	231f      	movs	r3, #31
   1cacc:	603b      	str	r3, [r7, #0]
   1cace:	e000      	b.n	1cad2 <FMG_Init+0x1ae>
   1cad0:	bf00      	nop
   1cad2:	683b      	ldr	r3, [r7, #0]
   1cad4:	4618      	mov	r0, r3
   1cad6:	4b07      	ldr	r3, [pc, #28]	; (1caf4 <FMG_Init+0x1d0>)
   1cad8:	58e3      	ldr	r3, [r4, r3]
   1cada:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1cadc:	681b      	ldr	r3, [r3, #0]
   1cade:	429a      	cmp	r2, r3
   1cae0:	d001      	beq.n	1cae6 <FMG_Init+0x1c2>
   1cae2:	f7ec fa5f 	bl	8fa4 <__stack_chk_fail>
   1cae6:	f107 077c 	add.w	r7, r7, #124	; 0x7c
   1caea:	46bd      	mov	sp, r7
   1caec:	bd90      	pop	{r4, r7, pc}
   1caee:	bf00      	nop
   1caf0:	000127e8 	.word	0x000127e8
   1caf4:	000000ac 	.word	0x000000ac
   1caf8:	00013682 	.word	0x00013682
   1cafc:	0001365a 	.word	0x0001365a
   1cb00:	000097fc 	.word	0x000097fc
   1cb04:	000097fe 	.word	0x000097fe
   1cb08:	00013646 	.word	0x00013646
   1cb0c:	000097a4 	.word	0x000097a4
   1cb10:	00013616 	.word	0x00013616
   1cb14:	000097a0 	.word	0x000097a0
   1cb18:	00009790 	.word	0x00009790
   1cb1c:	000000c0 	.word	0x000000c0
   1cb20:	000096fc 	.word	0x000096fc
   1cb24:	00009702 	.word	0x00009702
   1cb28:	000096fc 	.word	0x000096fc

0001cb2c <FMG_GetFileDescription>:
   1cb2c:	b590      	push	{r4, r7, lr}
   1cb2e:	b085      	sub	sp, #20
   1cb30:	af00      	add	r7, sp, #0
   1cb32:	6078      	str	r0, [r7, #4]
   1cb34:	4c10      	ldr	r4, [pc, #64]	; (1cb78 <FMG_GetFileDescription+0x4c>)
   1cb36:	447c      	add	r4, pc
   1cb38:	4b10      	ldr	r3, [pc, #64]	; (1cb7c <FMG_GetFileDescription+0x50>)
   1cb3a:	58e3      	ldr	r3, [r4, r3]
   1cb3c:	681b      	ldr	r3, [r3, #0]
   1cb3e:	60fb      	str	r3, [r7, #12]
   1cb40:	687b      	ldr	r3, [r7, #4]
   1cb42:	2b00      	cmp	r3, #0
   1cb44:	d009      	beq.n	1cb5a <FMG_GetFileDescription+0x2e>
   1cb46:	6878      	ldr	r0, [r7, #4]
   1cb48:	4b0d      	ldr	r3, [pc, #52]	; (1cb80 <FMG_GetFileDescription+0x54>)
   1cb4a:	58e3      	ldr	r3, [r4, r3]
   1cb4c:	4619      	mov	r1, r3
   1cb4e:	f241 1234 	movw	r2, #4404	; 0x1134
   1cb52:	f7ec e892 	blx	8c78 <_init+0x118>
   1cb56:	2301      	movs	r3, #1
   1cb58:	e000      	b.n	1cb5c <FMG_GetFileDescription+0x30>
   1cb5a:	2300      	movs	r3, #0
   1cb5c:	4618      	mov	r0, r3
   1cb5e:	4b07      	ldr	r3, [pc, #28]	; (1cb7c <FMG_GetFileDescription+0x50>)
   1cb60:	58e3      	ldr	r3, [r4, r3]
   1cb62:	68fa      	ldr	r2, [r7, #12]
   1cb64:	681b      	ldr	r3, [r3, #0]
   1cb66:	429a      	cmp	r2, r3
   1cb68:	d001      	beq.n	1cb6e <FMG_GetFileDescription+0x42>
   1cb6a:	f7ec fa1b 	bl	8fa4 <__stack_chk_fail>
   1cb6e:	f107 0714 	add.w	r7, r7, #20
   1cb72:	46bd      	mov	sp, r7
   1cb74:	bd90      	pop	{r4, r7, pc}
   1cb76:	bf00      	nop
   1cb78:	000125de 	.word	0x000125de
   1cb7c:	000000ac 	.word	0x000000ac
   1cb80:	000000c0 	.word	0x000000c0

0001cb84 <FMG_CreateFile>:
   1cb84:	b590      	push	{r4, r7, lr}
   1cb86:	b0ab      	sub	sp, #172	; 0xac
   1cb88:	af00      	add	r7, sp, #0
   1cb8a:	60f8      	str	r0, [r7, #12]
   1cb8c:	60b9      	str	r1, [r7, #8]
   1cb8e:	607a      	str	r2, [r7, #4]
   1cb90:	603b      	str	r3, [r7, #0]
   1cb92:	4c66      	ldr	r4, [pc, #408]	; (1cd2c <FMG_CreateFile+0x1a8>)
   1cb94:	447c      	add	r4, pc
   1cb96:	4b66      	ldr	r3, [pc, #408]	; (1cd30 <FMG_CreateFile+0x1ac>)
   1cb98:	58e3      	ldr	r3, [r4, r3]
   1cb9a:	681b      	ldr	r3, [r3, #0]
   1cb9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   1cba0:	2300      	movs	r3, #0
   1cba2:	613b      	str	r3, [r7, #16]
   1cba4:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1cba8:	4618      	mov	r0, r3
   1cbaa:	2100      	movs	r1, #0
   1cbac:	2210      	movs	r2, #16
   1cbae:	f7ec e806 	blx	8bbc <_init+0x5c>
   1cbb2:	4b60      	ldr	r3, [pc, #384]	; (1cd34 <FMG_CreateFile+0x1b0>)
   1cbb4:	58e3      	ldr	r3, [r4, r3]
   1cbb6:	681b      	ldr	r3, [r3, #0]
   1cbb8:	2b64      	cmp	r3, #100	; 0x64
   1cbba:	d901      	bls.n	1cbc0 <FMG_CreateFile+0x3c>
   1cbbc:	2316      	movs	r3, #22
   1cbbe:	e0a6      	b.n	1cd0e <FMG_CreateFile+0x18a>
   1cbc0:	687b      	ldr	r3, [r7, #4]
   1cbc2:	2b00      	cmp	r3, #0
   1cbc4:	d004      	beq.n	1cbd0 <FMG_CreateFile+0x4c>
   1cbc6:	687b      	ldr	r3, [r7, #4]
   1cbc8:	2b01      	cmp	r3, #1
   1cbca:	d001      	beq.n	1cbd0 <FMG_CreateFile+0x4c>
   1cbcc:	230d      	movs	r3, #13
   1cbce:	e09e      	b.n	1cd0e <FMG_CreateFile+0x18a>
   1cbd0:	683b      	ldr	r3, [r7, #0]
   1cbd2:	2b00      	cmp	r3, #0
   1cbd4:	d004      	beq.n	1cbe0 <FMG_CreateFile+0x5c>
   1cbd6:	683b      	ldr	r3, [r7, #0]
   1cbd8:	2b01      	cmp	r3, #1
   1cbda:	d001      	beq.n	1cbe0 <FMG_CreateFile+0x5c>
   1cbdc:	230e      	movs	r3, #14
   1cbde:	e096      	b.n	1cd0e <FMG_CreateFile+0x18a>
   1cbe0:	f107 0380 	add.w	r3, r7, #128	; 0x80
   1cbe4:	4618      	mov	r0, r3
   1cbe6:	4b54      	ldr	r3, [pc, #336]	; (1cd38 <FMG_CreateFile+0x1b4>)
   1cbe8:	447b      	add	r3, pc
   1cbea:	4619      	mov	r1, r3
   1cbec:	68fa      	ldr	r2, [r7, #12]
   1cbee:	68bb      	ldr	r3, [r7, #8]
   1cbf0:	f7ec e860 	blx	8cb4 <_init+0x154>
   1cbf4:	f107 0380 	add.w	r3, r7, #128	; 0x80
   1cbf8:	4618      	mov	r0, r3
   1cbfa:	f003 fe01 	bl	20800 <FS_exist>
   1cbfe:	6178      	str	r0, [r7, #20]
   1cc00:	697b      	ldr	r3, [r7, #20]
   1cc02:	2b02      	cmp	r3, #2
   1cc04:	d101      	bne.n	1cc0a <FMG_CreateFile+0x86>
   1cc06:	230c      	movs	r3, #12
   1cc08:	e081      	b.n	1cd0e <FMG_CreateFile+0x18a>
   1cc0a:	f107 0380 	add.w	r3, r7, #128	; 0x80
   1cc0e:	4618      	mov	r0, r3
   1cc10:	4b4a      	ldr	r3, [pc, #296]	; (1cd3c <FMG_CreateFile+0x1b8>)
   1cc12:	447b      	add	r3, pc
   1cc14:	4619      	mov	r1, r3
   1cc16:	f003 fe75 	bl	20904 <FS_open>
   1cc1a:	6138      	str	r0, [r7, #16]
   1cc1c:	693b      	ldr	r3, [r7, #16]
   1cc1e:	2b00      	cmp	r3, #0
   1cc20:	d101      	bne.n	1cc26 <FMG_CreateFile+0xa2>
   1cc22:	2314      	movs	r3, #20
   1cc24:	e073      	b.n	1cd0e <FMG_CreateFile+0x18a>
   1cc26:	683b      	ldr	r3, [r7, #0]
   1cc28:	2b01      	cmp	r3, #1
   1cc2a:	d11d      	bne.n	1cc68 <FMG_CreateFile+0xe4>
   1cc2c:	f107 0318 	add.w	r3, r7, #24
   1cc30:	4618      	mov	r0, r3
   1cc32:	f002 f9db 	bl	1efec <md5_init>
   1cc36:	f107 0318 	add.w	r3, r7, #24
   1cc3a:	4618      	mov	r0, r3
   1cc3c:	4b40      	ldr	r3, [pc, #256]	; (1cd40 <FMG_CreateFile+0x1bc>)
   1cc3e:	447b      	add	r3, pc
   1cc40:	4619      	mov	r1, r3
   1cc42:	2200      	movs	r2, #0
   1cc44:	f002 fa0c 	bl	1f060 <md5_append>
   1cc48:	f107 0218 	add.w	r2, r7, #24
   1cc4c:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1cc50:	4610      	mov	r0, r2
   1cc52:	4619      	mov	r1, r3
   1cc54:	f002 fa90 	bl	1f178 <md5_finish>
   1cc58:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1cc5c:	4618      	mov	r0, r3
   1cc5e:	2110      	movs	r1, #16
   1cc60:	2201      	movs	r2, #1
   1cc62:	693b      	ldr	r3, [r7, #16]
   1cc64:	f003 ff50 	bl	20b08 <FS_write>
   1cc68:	6938      	ldr	r0, [r7, #16]
   1cc6a:	f003 fd6f 	bl	2074c <FS_close>
   1cc6e:	2300      	movs	r3, #0
   1cc70:	613b      	str	r3, [r7, #16]
   1cc72:	4b30      	ldr	r3, [pc, #192]	; (1cd34 <FMG_CreateFile+0x1b0>)
   1cc74:	58e3      	ldr	r3, [r4, r3]
   1cc76:	681b      	ldr	r3, [r3, #0]
   1cc78:	4a2e      	ldr	r2, [pc, #184]	; (1cd34 <FMG_CreateFile+0x1b0>)
   1cc7a:	58a2      	ldr	r2, [r4, r2]
   1cc7c:	212c      	movs	r1, #44	; 0x2c
   1cc7e:	fb01 f303 	mul.w	r3, r1, r3
   1cc82:	18d3      	adds	r3, r2, r3
   1cc84:	3328      	adds	r3, #40	; 0x28
   1cc86:	687a      	ldr	r2, [r7, #4]
   1cc88:	601a      	str	r2, [r3, #0]
   1cc8a:	4b2a      	ldr	r3, [pc, #168]	; (1cd34 <FMG_CreateFile+0x1b0>)
   1cc8c:	58e3      	ldr	r3, [r4, r3]
   1cc8e:	681b      	ldr	r3, [r3, #0]
   1cc90:	4a28      	ldr	r2, [pc, #160]	; (1cd34 <FMG_CreateFile+0x1b0>)
   1cc92:	58a2      	ldr	r2, [r4, r2]
   1cc94:	212c      	movs	r1, #44	; 0x2c
   1cc96:	fb01 f303 	mul.w	r3, r1, r3
   1cc9a:	18d3      	adds	r3, r2, r3
   1cc9c:	332c      	adds	r3, #44	; 0x2c
   1cc9e:	683a      	ldr	r2, [r7, #0]
   1cca0:	601a      	str	r2, [r3, #0]
   1cca2:	4b24      	ldr	r3, [pc, #144]	; (1cd34 <FMG_CreateFile+0x1b0>)
   1cca4:	58e3      	ldr	r3, [r4, r3]
   1cca6:	681b      	ldr	r3, [r3, #0]
   1cca8:	222c      	movs	r2, #44	; 0x2c
   1ccaa:	fb02 f303 	mul.w	r3, r2, r3
   1ccae:	f103 0210 	add.w	r2, r3, #16
   1ccb2:	4b20      	ldr	r3, [pc, #128]	; (1cd34 <FMG_CreateFile+0x1b0>)
   1ccb4:	58e3      	ldr	r3, [r4, r3]
   1ccb6:	18d3      	adds	r3, r2, r3
   1ccb8:	3305      	adds	r3, #5
   1ccba:	4618      	mov	r0, r3
   1ccbc:	68b9      	ldr	r1, [r7, #8]
   1ccbe:	f7eb efb0 	blx	8c20 <_init+0xc0>
   1ccc2:	4b1c      	ldr	r3, [pc, #112]	; (1cd34 <FMG_CreateFile+0x1b0>)
   1ccc4:	58e3      	ldr	r3, [r4, r3]
   1ccc6:	681b      	ldr	r3, [r3, #0]
   1ccc8:	222c      	movs	r2, #44	; 0x2c
   1ccca:	fb02 f203 	mul.w	r2, r2, r3
   1ccce:	4b19      	ldr	r3, [pc, #100]	; (1cd34 <FMG_CreateFile+0x1b0>)
   1ccd0:	58e3      	ldr	r3, [r4, r3]
   1ccd2:	18d3      	adds	r3, r2, r3
   1ccd4:	3304      	adds	r3, #4
   1ccd6:	4618      	mov	r0, r3
   1ccd8:	68f9      	ldr	r1, [r7, #12]
   1ccda:	f7eb efa2 	blx	8c20 <_init+0xc0>
   1ccde:	4b15      	ldr	r3, [pc, #84]	; (1cd34 <FMG_CreateFile+0x1b0>)
   1cce0:	58e3      	ldr	r3, [r4, r3]
   1cce2:	681b      	ldr	r3, [r3, #0]
   1cce4:	1c5a      	adds	r2, r3, #1
   1cce6:	4b13      	ldr	r3, [pc, #76]	; (1cd34 <FMG_CreateFile+0x1b0>)
   1cce8:	58e3      	ldr	r3, [r4, r3]
   1ccea:	601a      	str	r2, [r3, #0]
   1ccec:	4b15      	ldr	r3, [pc, #84]	; (1cd44 <FMG_CreateFile+0x1c0>)
   1ccee:	447b      	add	r3, pc
   1ccf0:	4618      	mov	r0, r3
   1ccf2:	f44f 31c8 	mov.w	r1, #102400	; 0x19000
   1ccf6:	221e      	movs	r2, #30
   1ccf8:	f7fc fe24 	bl	19944 <CreateOrMountDisk>
   1ccfc:	6178      	str	r0, [r7, #20]
   1ccfe:	f7fc fe67 	bl	199d0 <SaveMangementFile>
   1cd02:	4603      	mov	r3, r0
   1cd04:	2b0a      	cmp	r3, #10
   1cd06:	d001      	beq.n	1cd0c <FMG_CreateFile+0x188>
   1cd08:	2317      	movs	r3, #23
   1cd0a:	e000      	b.n	1cd0e <FMG_CreateFile+0x18a>
   1cd0c:	230a      	movs	r3, #10
   1cd0e:	4618      	mov	r0, r3
   1cd10:	4b07      	ldr	r3, [pc, #28]	; (1cd30 <FMG_CreateFile+0x1ac>)
   1cd12:	58e3      	ldr	r3, [r4, r3]
   1cd14:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1cd18:	681b      	ldr	r3, [r3, #0]
   1cd1a:	429a      	cmp	r2, r3
   1cd1c:	d001      	beq.n	1cd22 <FMG_CreateFile+0x19e>
   1cd1e:	f7ec f941 	bl	8fa4 <__stack_chk_fail>
   1cd22:	f107 07ac 	add.w	r7, r7, #172	; 0xac
   1cd26:	46bd      	mov	sp, r7
   1cd28:	bd90      	pop	{r4, r7, pc}
   1cd2a:	bf00      	nop
   1cd2c:	00012580 	.word	0x00012580
   1cd30:	000000ac 	.word	0x000000ac
   1cd34:	000000c0 	.word	0x000000c0
   1cd38:	0000956c 	.word	0x0000956c
   1cd3c:	00009556 	.word	0x00009556
   1cd40:	00009566 	.word	0x00009566
   1cd44:	000132de 	.word	0x000132de

0001cd48 <FMG_DeleteFile>:
   1cd48:	b590      	push	{r4, r7, lr}
   1cd4a:	b091      	sub	sp, #68	; 0x44
   1cd4c:	af00      	add	r7, sp, #0
   1cd4e:	6078      	str	r0, [r7, #4]
   1cd50:	6039      	str	r1, [r7, #0]
   1cd52:	4c30      	ldr	r4, [pc, #192]	; (1ce14 <FMG_DeleteFile+0xcc>)
   1cd54:	447c      	add	r4, pc
   1cd56:	4b30      	ldr	r3, [pc, #192]	; (1ce18 <FMG_DeleteFile+0xd0>)
   1cd58:	58e3      	ldr	r3, [r4, r3]
   1cd5a:	681b      	ldr	r3, [r3, #0]
   1cd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1cd5e:	4b2f      	ldr	r3, [pc, #188]	; (1ce1c <FMG_DeleteFile+0xd4>)
   1cd60:	58e3      	ldr	r3, [r4, r3]
   1cd62:	681b      	ldr	r3, [r3, #0]
   1cd64:	2b00      	cmp	r3, #0
   1cd66:	d101      	bne.n	1cd6c <FMG_DeleteFile+0x24>
   1cd68:	2316      	movs	r3, #22
   1cd6a:	e045      	b.n	1cdf8 <FMG_DeleteFile+0xb0>
   1cd6c:	6878      	ldr	r0, [r7, #4]
   1cd6e:	6839      	ldr	r1, [r7, #0]
   1cd70:	f7fc fe90 	bl	19a94 <ExtraireFileID>
   1cd74:	60f8      	str	r0, [r7, #12]
   1cd76:	68fb      	ldr	r3, [r7, #12]
   1cd78:	2b00      	cmp	r3, #0
   1cd7a:	da01      	bge.n	1cd80 <FMG_DeleteFile+0x38>
   1cd7c:	230b      	movs	r3, #11
   1cd7e:	e03b      	b.n	1cdf8 <FMG_DeleteFile+0xb0>
   1cd80:	f107 0318 	add.w	r3, r7, #24
   1cd84:	4618      	mov	r0, r3
   1cd86:	4b26      	ldr	r3, [pc, #152]	; (1ce20 <FMG_DeleteFile+0xd8>)
   1cd88:	447b      	add	r3, pc
   1cd8a:	4619      	mov	r1, r3
   1cd8c:	687a      	ldr	r2, [r7, #4]
   1cd8e:	683b      	ldr	r3, [r7, #0]
   1cd90:	f7eb ef90 	blx	8cb4 <_init+0x154>
   1cd94:	f107 0318 	add.w	r3, r7, #24
   1cd98:	4618      	mov	r0, r3
   1cd9a:	f003 fd31 	bl	20800 <FS_exist>
   1cd9e:	6138      	str	r0, [r7, #16]
   1cda0:	f107 0318 	add.w	r3, r7, #24
   1cda4:	4618      	mov	r0, r3
   1cda6:	f003 fe57 	bl	20a58 <FS_unlink>
   1cdaa:	6178      	str	r0, [r7, #20]
   1cdac:	697b      	ldr	r3, [r7, #20]
   1cdae:	2b02      	cmp	r3, #2
   1cdb0:	d005      	beq.n	1cdbe <FMG_DeleteFile+0x76>
   1cdb2:	697b      	ldr	r3, [r7, #20]
   1cdb4:	2b00      	cmp	r3, #0
   1cdb6:	d11e      	bne.n	1cdf6 <FMG_DeleteFile+0xae>
   1cdb8:	693b      	ldr	r3, [r7, #16]
   1cdba:	2b00      	cmp	r3, #0
   1cdbc:	d11b      	bne.n	1cdf6 <FMG_DeleteFile+0xae>
   1cdbe:	68f8      	ldr	r0, [r7, #12]
   1cdc0:	f7fc febe 	bl	19b40 <DeleteFileFromTable>
   1cdc4:	4b15      	ldr	r3, [pc, #84]	; (1ce1c <FMG_DeleteFile+0xd4>)
   1cdc6:	58e3      	ldr	r3, [r4, r3]
   1cdc8:	681b      	ldr	r3, [r3, #0]
   1cdca:	1e5a      	subs	r2, r3, #1
   1cdcc:	4b13      	ldr	r3, [pc, #76]	; (1ce1c <FMG_DeleteFile+0xd4>)
   1cdce:	58e3      	ldr	r3, [r4, r3]
   1cdd0:	601a      	str	r2, [r3, #0]
   1cdd2:	4b14      	ldr	r3, [pc, #80]	; (1ce24 <FMG_DeleteFile+0xdc>)
   1cdd4:	447b      	add	r3, pc
   1cdd6:	4618      	mov	r0, r3
   1cdd8:	f44f 31c8 	mov.w	r1, #102400	; 0x19000
   1cddc:	221e      	movs	r2, #30
   1cdde:	f7fc fdb1 	bl	19944 <CreateOrMountDisk>
   1cde2:	6178      	str	r0, [r7, #20]
   1cde4:	f7fc fdf4 	bl	199d0 <SaveMangementFile>
   1cde8:	4603      	mov	r3, r0
   1cdea:	2b0a      	cmp	r3, #10
   1cdec:	d001      	beq.n	1cdf2 <FMG_DeleteFile+0xaa>
   1cdee:	2317      	movs	r3, #23
   1cdf0:	e002      	b.n	1cdf8 <FMG_DeleteFile+0xb0>
   1cdf2:	230a      	movs	r3, #10
   1cdf4:	e000      	b.n	1cdf8 <FMG_DeleteFile+0xb0>
   1cdf6:	2315      	movs	r3, #21
   1cdf8:	4618      	mov	r0, r3
   1cdfa:	4b07      	ldr	r3, [pc, #28]	; (1ce18 <FMG_DeleteFile+0xd0>)
   1cdfc:	58e3      	ldr	r3, [r4, r3]
   1cdfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1ce00:	681b      	ldr	r3, [r3, #0]
   1ce02:	429a      	cmp	r2, r3
   1ce04:	d001      	beq.n	1ce0a <FMG_DeleteFile+0xc2>
   1ce06:	f7ec f8cd 	bl	8fa4 <__stack_chk_fail>
   1ce0a:	f107 0744 	add.w	r7, r7, #68	; 0x44
   1ce0e:	46bd      	mov	sp, r7
   1ce10:	bd90      	pop	{r4, r7, pc}
   1ce12:	bf00      	nop
   1ce14:	000123c0 	.word	0x000123c0
   1ce18:	000000ac 	.word	0x000000ac
   1ce1c:	000000c0 	.word	0x000000c0
   1ce20:	000093cc 	.word	0x000093cc
   1ce24:	000131f8 	.word	0x000131f8

0001ce28 <FMG_CreateFileType>:
   1ce28:	b590      	push	{r4, r7, lr}
   1ce2a:	b0ab      	sub	sp, #172	; 0xac
   1ce2c:	af00      	add	r7, sp, #0
   1ce2e:	60f8      	str	r0, [r7, #12]
   1ce30:	60b9      	str	r1, [r7, #8]
   1ce32:	607a      	str	r2, [r7, #4]
   1ce34:	4c7a      	ldr	r4, [pc, #488]	; (1d020 <FMG_CreateFileType+0x1f8>)
   1ce36:	447c      	add	r4, pc
   1ce38:	4b7a      	ldr	r3, [pc, #488]	; (1d024 <FMG_CreateFileType+0x1fc>)
   1ce3a:	58e3      	ldr	r3, [r4, r3]
   1ce3c:	681b      	ldr	r3, [r3, #0]
   1ce3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   1ce42:	2300      	movs	r3, #0
   1ce44:	613b      	str	r3, [r7, #16]
   1ce46:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1ce4a:	4618      	mov	r0, r3
   1ce4c:	2100      	movs	r1, #0
   1ce4e:	2210      	movs	r2, #16
   1ce50:	f7eb eeb4 	blx	8bbc <_init+0x5c>
   1ce54:	68fb      	ldr	r3, [r7, #12]
   1ce56:	2b00      	cmp	r3, #0
   1ce58:	d007      	beq.n	1ce6a <FMG_CreateFileType+0x42>
   1ce5a:	68fb      	ldr	r3, [r7, #12]
   1ce5c:	2b01      	cmp	r3, #1
   1ce5e:	d004      	beq.n	1ce6a <FMG_CreateFileType+0x42>
   1ce60:	68fb      	ldr	r3, [r7, #12]
   1ce62:	2b02      	cmp	r3, #2
   1ce64:	d001      	beq.n	1ce6a <FMG_CreateFileType+0x42>
   1ce66:	230f      	movs	r3, #15
   1ce68:	e0cb      	b.n	1d002 <FMG_CreateFileType+0x1da>
   1ce6a:	4b6f      	ldr	r3, [pc, #444]	; (1d028 <FMG_CreateFileType+0x200>)
   1ce6c:	58e3      	ldr	r3, [r4, r3]
   1ce6e:	681b      	ldr	r3, [r3, #0]
   1ce70:	2b64      	cmp	r3, #100	; 0x64
   1ce72:	d901      	bls.n	1ce78 <FMG_CreateFileType+0x50>
   1ce74:	2316      	movs	r3, #22
   1ce76:	e0c4      	b.n	1d002 <FMG_CreateFileType+0x1da>
   1ce78:	68bb      	ldr	r3, [r7, #8]
   1ce7a:	2b00      	cmp	r3, #0
   1ce7c:	d004      	beq.n	1ce88 <FMG_CreateFileType+0x60>
   1ce7e:	68bb      	ldr	r3, [r7, #8]
   1ce80:	2b01      	cmp	r3, #1
   1ce82:	d001      	beq.n	1ce88 <FMG_CreateFileType+0x60>
   1ce84:	230d      	movs	r3, #13
   1ce86:	e0bc      	b.n	1d002 <FMG_CreateFileType+0x1da>
   1ce88:	687b      	ldr	r3, [r7, #4]
   1ce8a:	2b00      	cmp	r3, #0
   1ce8c:	d004      	beq.n	1ce98 <FMG_CreateFileType+0x70>
   1ce8e:	687b      	ldr	r3, [r7, #4]
   1ce90:	2b01      	cmp	r3, #1
   1ce92:	d001      	beq.n	1ce98 <FMG_CreateFileType+0x70>
   1ce94:	230e      	movs	r3, #14
   1ce96:	e0b4      	b.n	1d002 <FMG_CreateFileType+0x1da>
   1ce98:	4b64      	ldr	r3, [pc, #400]	; (1d02c <FMG_CreateFileType+0x204>)
   1ce9a:	447b      	add	r3, pc
   1ce9c:	4618      	mov	r0, r3
   1ce9e:	f44f 31c8 	mov.w	r1, #102400	; 0x19000
   1cea2:	221e      	movs	r2, #30
   1cea4:	f7fc fd4e 	bl	19944 <CreateOrMountDisk>
   1cea8:	6178      	str	r0, [r7, #20]
   1ceaa:	697b      	ldr	r3, [r7, #20]
   1ceac:	2b02      	cmp	r3, #2
   1ceae:	d003      	beq.n	1ceb8 <FMG_CreateFileType+0x90>
   1ceb0:	697b      	ldr	r3, [r7, #20]
   1ceb2:	2b06      	cmp	r3, #6
   1ceb4:	f040 80a4 	bne.w	1d000 <FMG_CreateFileType+0x1d8>
   1ceb8:	4b5d      	ldr	r3, [pc, #372]	; (1d030 <FMG_CreateFileType+0x208>)
   1ceba:	58e3      	ldr	r3, [r4, r3]
   1cebc:	68fa      	ldr	r2, [r7, #12]
   1cebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1cec2:	f107 0280 	add.w	r2, r7, #128	; 0x80
   1cec6:	4610      	mov	r0, r2
   1cec8:	4a5a      	ldr	r2, [pc, #360]	; (1d034 <FMG_CreateFileType+0x20c>)
   1ceca:	447a      	add	r2, pc
   1cecc:	4611      	mov	r1, r2
   1cece:	4a5a      	ldr	r2, [pc, #360]	; (1d038 <FMG_CreateFileType+0x210>)
   1ced0:	447a      	add	r2, pc
   1ced2:	f7eb eef0 	blx	8cb4 <_init+0x154>
   1ced6:	f107 0380 	add.w	r3, r7, #128	; 0x80
   1ceda:	4618      	mov	r0, r3
   1cedc:	f003 fc90 	bl	20800 <FS_exist>
   1cee0:	6178      	str	r0, [r7, #20]
   1cee2:	697b      	ldr	r3, [r7, #20]
   1cee4:	2b02      	cmp	r3, #2
   1cee6:	d101      	bne.n	1ceec <FMG_CreateFileType+0xc4>
   1cee8:	230c      	movs	r3, #12
   1ceea:	e08a      	b.n	1d002 <FMG_CreateFileType+0x1da>
   1ceec:	f107 0380 	add.w	r3, r7, #128	; 0x80
   1cef0:	4618      	mov	r0, r3
   1cef2:	4b52      	ldr	r3, [pc, #328]	; (1d03c <FMG_CreateFileType+0x214>)
   1cef4:	447b      	add	r3, pc
   1cef6:	4619      	mov	r1, r3
   1cef8:	f003 fd04 	bl	20904 <FS_open>
   1cefc:	6138      	str	r0, [r7, #16]
   1cefe:	693b      	ldr	r3, [r7, #16]
   1cf00:	2b00      	cmp	r3, #0
   1cf02:	d101      	bne.n	1cf08 <FMG_CreateFileType+0xe0>
   1cf04:	2314      	movs	r3, #20
   1cf06:	e07c      	b.n	1d002 <FMG_CreateFileType+0x1da>
   1cf08:	687b      	ldr	r3, [r7, #4]
   1cf0a:	2b01      	cmp	r3, #1
   1cf0c:	d11d      	bne.n	1cf4a <FMG_CreateFileType+0x122>
   1cf0e:	f107 0318 	add.w	r3, r7, #24
   1cf12:	4618      	mov	r0, r3
   1cf14:	f002 f86a 	bl	1efec <md5_init>
   1cf18:	f107 0318 	add.w	r3, r7, #24
   1cf1c:	4618      	mov	r0, r3
   1cf1e:	4b48      	ldr	r3, [pc, #288]	; (1d040 <FMG_CreateFileType+0x218>)
   1cf20:	447b      	add	r3, pc
   1cf22:	4619      	mov	r1, r3
   1cf24:	2200      	movs	r2, #0
   1cf26:	f002 f89b 	bl	1f060 <md5_append>
   1cf2a:	f107 0218 	add.w	r2, r7, #24
   1cf2e:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1cf32:	4610      	mov	r0, r2
   1cf34:	4619      	mov	r1, r3
   1cf36:	f002 f91f 	bl	1f178 <md5_finish>
   1cf3a:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1cf3e:	4618      	mov	r0, r3
   1cf40:	2110      	movs	r1, #16
   1cf42:	2201      	movs	r2, #1
   1cf44:	693b      	ldr	r3, [r7, #16]
   1cf46:	f003 fddf 	bl	20b08 <FS_write>
   1cf4a:	6938      	ldr	r0, [r7, #16]
   1cf4c:	f003 fbfe 	bl	2074c <FS_close>
   1cf50:	2300      	movs	r3, #0
   1cf52:	613b      	str	r3, [r7, #16]
   1cf54:	4b34      	ldr	r3, [pc, #208]	; (1d028 <FMG_CreateFileType+0x200>)
   1cf56:	58e3      	ldr	r3, [r4, r3]
   1cf58:	681b      	ldr	r3, [r3, #0]
   1cf5a:	4a33      	ldr	r2, [pc, #204]	; (1d028 <FMG_CreateFileType+0x200>)
   1cf5c:	58a2      	ldr	r2, [r4, r2]
   1cf5e:	212c      	movs	r1, #44	; 0x2c
   1cf60:	fb01 f303 	mul.w	r3, r1, r3
   1cf64:	18d3      	adds	r3, r2, r3
   1cf66:	3328      	adds	r3, #40	; 0x28
   1cf68:	68ba      	ldr	r2, [r7, #8]
   1cf6a:	601a      	str	r2, [r3, #0]
   1cf6c:	4b2e      	ldr	r3, [pc, #184]	; (1d028 <FMG_CreateFileType+0x200>)
   1cf6e:	58e3      	ldr	r3, [r4, r3]
   1cf70:	681b      	ldr	r3, [r3, #0]
   1cf72:	4a2d      	ldr	r2, [pc, #180]	; (1d028 <FMG_CreateFileType+0x200>)
   1cf74:	58a2      	ldr	r2, [r4, r2]
   1cf76:	212c      	movs	r1, #44	; 0x2c
   1cf78:	fb01 f303 	mul.w	r3, r1, r3
   1cf7c:	18d3      	adds	r3, r2, r3
   1cf7e:	332c      	adds	r3, #44	; 0x2c
   1cf80:	687a      	ldr	r2, [r7, #4]
   1cf82:	601a      	str	r2, [r3, #0]
   1cf84:	4b28      	ldr	r3, [pc, #160]	; (1d028 <FMG_CreateFileType+0x200>)
   1cf86:	58e3      	ldr	r3, [r4, r3]
   1cf88:	681b      	ldr	r3, [r3, #0]
   1cf8a:	222c      	movs	r2, #44	; 0x2c
   1cf8c:	fb02 f303 	mul.w	r3, r2, r3
   1cf90:	f103 0210 	add.w	r2, r3, #16
   1cf94:	4b24      	ldr	r3, [pc, #144]	; (1d028 <FMG_CreateFileType+0x200>)
   1cf96:	58e3      	ldr	r3, [r4, r3]
   1cf98:	18d3      	adds	r3, r2, r3
   1cf9a:	1d5a      	adds	r2, r3, #5
   1cf9c:	4b24      	ldr	r3, [pc, #144]	; (1d030 <FMG_CreateFileType+0x208>)
   1cf9e:	58e3      	ldr	r3, [r4, r3]
   1cfa0:	68f9      	ldr	r1, [r7, #12]
   1cfa2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1cfa6:	4610      	mov	r0, r2
   1cfa8:	4619      	mov	r1, r3
   1cfaa:	f7eb ee3a 	blx	8c20 <_init+0xc0>
   1cfae:	4b1e      	ldr	r3, [pc, #120]	; (1d028 <FMG_CreateFileType+0x200>)
   1cfb0:	58e3      	ldr	r3, [r4, r3]
   1cfb2:	681b      	ldr	r3, [r3, #0]
   1cfb4:	222c      	movs	r2, #44	; 0x2c
   1cfb6:	fb02 f203 	mul.w	r2, r2, r3
   1cfba:	4b1b      	ldr	r3, [pc, #108]	; (1d028 <FMG_CreateFileType+0x200>)
   1cfbc:	58e3      	ldr	r3, [r4, r3]
   1cfbe:	18d3      	adds	r3, r2, r3
   1cfc0:	3304      	adds	r3, #4
   1cfc2:	4618      	mov	r0, r3
   1cfc4:	4b1f      	ldr	r3, [pc, #124]	; (1d044 <FMG_CreateFileType+0x21c>)
   1cfc6:	447b      	add	r3, pc
   1cfc8:	4619      	mov	r1, r3
   1cfca:	f7eb ee2a 	blx	8c20 <_init+0xc0>
   1cfce:	4b16      	ldr	r3, [pc, #88]	; (1d028 <FMG_CreateFileType+0x200>)
   1cfd0:	58e3      	ldr	r3, [r4, r3]
   1cfd2:	681b      	ldr	r3, [r3, #0]
   1cfd4:	1c5a      	adds	r2, r3, #1
   1cfd6:	4b14      	ldr	r3, [pc, #80]	; (1d028 <FMG_CreateFileType+0x200>)
   1cfd8:	58e3      	ldr	r3, [r4, r3]
   1cfda:	601a      	str	r2, [r3, #0]
   1cfdc:	4b1a      	ldr	r3, [pc, #104]	; (1d048 <FMG_CreateFileType+0x220>)
   1cfde:	447b      	add	r3, pc
   1cfe0:	4618      	mov	r0, r3
   1cfe2:	f44f 31c8 	mov.w	r1, #102400	; 0x19000
   1cfe6:	221e      	movs	r2, #30
   1cfe8:	f7fc fcac 	bl	19944 <CreateOrMountDisk>
   1cfec:	6178      	str	r0, [r7, #20]
   1cfee:	f7fc fcef 	bl	199d0 <SaveMangementFile>
   1cff2:	4603      	mov	r3, r0
   1cff4:	2b0a      	cmp	r3, #10
   1cff6:	d001      	beq.n	1cffc <FMG_CreateFileType+0x1d4>
   1cff8:	2317      	movs	r3, #23
   1cffa:	e002      	b.n	1d002 <FMG_CreateFileType+0x1da>
   1cffc:	230a      	movs	r3, #10
   1cffe:	e000      	b.n	1d002 <FMG_CreateFileType+0x1da>
   1d000:	2312      	movs	r3, #18
   1d002:	4618      	mov	r0, r3
   1d004:	4b07      	ldr	r3, [pc, #28]	; (1d024 <FMG_CreateFileType+0x1fc>)
   1d006:	58e3      	ldr	r3, [r4, r3]
   1d008:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1d00c:	681b      	ldr	r3, [r3, #0]
   1d00e:	429a      	cmp	r2, r3
   1d010:	d001      	beq.n	1d016 <FMG_CreateFileType+0x1ee>
   1d012:	f7eb ffc7 	bl	8fa4 <__stack_chk_fail>
   1d016:	f107 07ac 	add.w	r7, r7, #172	; 0xac
   1d01a:	46bd      	mov	sp, r7
   1d01c:	bd90      	pop	{r4, r7, pc}
   1d01e:	bf00      	nop
   1d020:	000122de 	.word	0x000122de
   1d024:	000000ac 	.word	0x000000ac
   1d028:	000000c0 	.word	0x000000c0
   1d02c:	00013132 	.word	0x00013132
   1d030:	000000a8 	.word	0x000000a8
   1d034:	0000928a 	.word	0x0000928a
   1d038:	000130fc 	.word	0x000130fc
   1d03c:	00009274 	.word	0x00009274
   1d040:	00009284 	.word	0x00009284
   1d044:	00013006 	.word	0x00013006
   1d048:	00012fee 	.word	0x00012fee

0001d04c <FMG_DeleteFileType>:
   1d04c:	b590      	push	{r4, r7, lr}
   1d04e:	b08f      	sub	sp, #60	; 0x3c
   1d050:	af00      	add	r7, sp, #0
   1d052:	6078      	str	r0, [r7, #4]
   1d054:	4c39      	ldr	r4, [pc, #228]	; (1d13c <FMG_DeleteFileType+0xf0>)
   1d056:	447c      	add	r4, pc
   1d058:	4b39      	ldr	r3, [pc, #228]	; (1d140 <FMG_DeleteFileType+0xf4>)
   1d05a:	58e3      	ldr	r3, [r4, r3]
   1d05c:	681b      	ldr	r3, [r3, #0]
   1d05e:	637b      	str	r3, [r7, #52]	; 0x34
   1d060:	4b38      	ldr	r3, [pc, #224]	; (1d144 <FMG_DeleteFileType+0xf8>)
   1d062:	58e3      	ldr	r3, [r4, r3]
   1d064:	681b      	ldr	r3, [r3, #0]
   1d066:	2b00      	cmp	r3, #0
   1d068:	d101      	bne.n	1d06e <FMG_DeleteFileType+0x22>
   1d06a:	2316      	movs	r3, #22
   1d06c:	e058      	b.n	1d120 <FMG_DeleteFileType+0xd4>
   1d06e:	687b      	ldr	r3, [r7, #4]
   1d070:	2b00      	cmp	r3, #0
   1d072:	d007      	beq.n	1d084 <FMG_DeleteFileType+0x38>
   1d074:	687b      	ldr	r3, [r7, #4]
   1d076:	2b01      	cmp	r3, #1
   1d078:	d004      	beq.n	1d084 <FMG_DeleteFileType+0x38>
   1d07a:	687b      	ldr	r3, [r7, #4]
   1d07c:	2b02      	cmp	r3, #2
   1d07e:	d001      	beq.n	1d084 <FMG_DeleteFileType+0x38>
   1d080:	230f      	movs	r3, #15
   1d082:	e04d      	b.n	1d120 <FMG_DeleteFileType+0xd4>
   1d084:	4b30      	ldr	r3, [pc, #192]	; (1d148 <FMG_DeleteFileType+0xfc>)
   1d086:	58e3      	ldr	r3, [r4, r3]
   1d088:	687a      	ldr	r2, [r7, #4]
   1d08a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1d08e:	4a2f      	ldr	r2, [pc, #188]	; (1d14c <FMG_DeleteFileType+0x100>)
   1d090:	447a      	add	r2, pc
   1d092:	4610      	mov	r0, r2
   1d094:	4619      	mov	r1, r3
   1d096:	f7fc fcfd 	bl	19a94 <ExtraireFileID>
   1d09a:	60b8      	str	r0, [r7, #8]
   1d09c:	68bb      	ldr	r3, [r7, #8]
   1d09e:	2b00      	cmp	r3, #0
   1d0a0:	da01      	bge.n	1d0a6 <FMG_DeleteFileType+0x5a>
   1d0a2:	230b      	movs	r3, #11
   1d0a4:	e03c      	b.n	1d120 <FMG_DeleteFileType+0xd4>
   1d0a6:	4b2a      	ldr	r3, [pc, #168]	; (1d150 <FMG_DeleteFileType+0x104>)
   1d0a8:	447b      	add	r3, pc
   1d0aa:	4618      	mov	r0, r3
   1d0ac:	f44f 31c8 	mov.w	r1, #102400	; 0x19000
   1d0b0:	221e      	movs	r2, #30
   1d0b2:	f7fc fc47 	bl	19944 <CreateOrMountDisk>
   1d0b6:	60f8      	str	r0, [r7, #12]
   1d0b8:	68fb      	ldr	r3, [r7, #12]
   1d0ba:	2b02      	cmp	r3, #2
   1d0bc:	d002      	beq.n	1d0c4 <FMG_DeleteFileType+0x78>
   1d0be:	68fb      	ldr	r3, [r7, #12]
   1d0c0:	2b06      	cmp	r3, #6
   1d0c2:	d12c      	bne.n	1d11e <FMG_DeleteFileType+0xd2>
   1d0c4:	4b20      	ldr	r3, [pc, #128]	; (1d148 <FMG_DeleteFileType+0xfc>)
   1d0c6:	58e3      	ldr	r3, [r4, r3]
   1d0c8:	687a      	ldr	r2, [r7, #4]
   1d0ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1d0ce:	f107 0210 	add.w	r2, r7, #16
   1d0d2:	4610      	mov	r0, r2
   1d0d4:	4a1f      	ldr	r2, [pc, #124]	; (1d154 <FMG_DeleteFileType+0x108>)
   1d0d6:	447a      	add	r2, pc
   1d0d8:	4611      	mov	r1, r2
   1d0da:	4a1f      	ldr	r2, [pc, #124]	; (1d158 <FMG_DeleteFileType+0x10c>)
   1d0dc:	447a      	add	r2, pc
   1d0de:	f7eb edea 	blx	8cb4 <_init+0x154>
   1d0e2:	f107 0310 	add.w	r3, r7, #16
   1d0e6:	4618      	mov	r0, r3
   1d0e8:	f003 fcb6 	bl	20a58 <FS_unlink>
   1d0ec:	60f8      	str	r0, [r7, #12]
   1d0ee:	68fb      	ldr	r3, [r7, #12]
   1d0f0:	2b02      	cmp	r3, #2
   1d0f2:	d112      	bne.n	1d11a <FMG_DeleteFileType+0xce>
   1d0f4:	68b8      	ldr	r0, [r7, #8]
   1d0f6:	f7fc fd23 	bl	19b40 <DeleteFileFromTable>
   1d0fa:	4b12      	ldr	r3, [pc, #72]	; (1d144 <FMG_DeleteFileType+0xf8>)
   1d0fc:	58e3      	ldr	r3, [r4, r3]
   1d0fe:	681b      	ldr	r3, [r3, #0]
   1d100:	1e5a      	subs	r2, r3, #1
   1d102:	4b10      	ldr	r3, [pc, #64]	; (1d144 <FMG_DeleteFileType+0xf8>)
   1d104:	58e3      	ldr	r3, [r4, r3]
   1d106:	601a      	str	r2, [r3, #0]
   1d108:	f7fc fc62 	bl	199d0 <SaveMangementFile>
   1d10c:	4603      	mov	r3, r0
   1d10e:	2b0a      	cmp	r3, #10
   1d110:	d001      	beq.n	1d116 <FMG_DeleteFileType+0xca>
   1d112:	2317      	movs	r3, #23
   1d114:	e004      	b.n	1d120 <FMG_DeleteFileType+0xd4>
   1d116:	230a      	movs	r3, #10
   1d118:	e002      	b.n	1d120 <FMG_DeleteFileType+0xd4>
   1d11a:	2315      	movs	r3, #21
   1d11c:	e000      	b.n	1d120 <FMG_DeleteFileType+0xd4>
   1d11e:	2312      	movs	r3, #18
   1d120:	4618      	mov	r0, r3
   1d122:	4b07      	ldr	r3, [pc, #28]	; (1d140 <FMG_DeleteFileType+0xf4>)
   1d124:	58e3      	ldr	r3, [r4, r3]
   1d126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1d128:	681b      	ldr	r3, [r3, #0]
   1d12a:	429a      	cmp	r2, r3
   1d12c:	d001      	beq.n	1d132 <FMG_DeleteFileType+0xe6>
   1d12e:	f7eb ff39 	bl	8fa4 <__stack_chk_fail>
   1d132:	f107 073c 	add.w	r7, r7, #60	; 0x3c
   1d136:	46bd      	mov	sp, r7
   1d138:	bd90      	pop	{r4, r7, pc}
   1d13a:	bf00      	nop
   1d13c:	000120be 	.word	0x000120be
   1d140:	000000ac 	.word	0x000000ac
   1d144:	000000c0 	.word	0x000000c0
   1d148:	000000a8 	.word	0x000000a8
   1d14c:	00012f3c 	.word	0x00012f3c
   1d150:	00012f24 	.word	0x00012f24
   1d154:	0000907e 	.word	0x0000907e
   1d158:	00012ef0 	.word	0x00012ef0

0001d15c <FMG_CheckFileCoherence>:
   1d15c:	b5b0      	push	{r4, r5, r7, lr}
   1d15e:	f5ad 6d98 	sub.w	sp, sp, #1216	; 0x4c0
   1d162:	af00      	add	r7, sp, #0
   1d164:	1d3b      	adds	r3, r7, #4
   1d166:	6018      	str	r0, [r3, #0]
   1d168:	463b      	mov	r3, r7
   1d16a:	6019      	str	r1, [r3, #0]
   1d16c:	4c88      	ldr	r4, [pc, #544]	; (1d390 <FMG_CheckFileCoherence+0x234>)
   1d16e:	447c      	add	r4, pc
   1d170:	4b88      	ldr	r3, [pc, #544]	; (1d394 <FMG_CheckFileCoherence+0x238>)
   1d172:	58e3      	ldr	r3, [r4, r3]
   1d174:	681b      	ldr	r3, [r3, #0]
   1d176:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
   1d17a:	f107 0314 	add.w	r3, r7, #20
   1d17e:	2200      	movs	r2, #0
   1d180:	601a      	str	r2, [r3, #0]
   1d182:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
   1d186:	4618      	mov	r0, r3
   1d188:	2100      	movs	r1, #0
   1d18a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1d18e:	f7eb ed16 	blx	8bbc <_init+0x5c>
   1d192:	f107 0388 	add.w	r3, r7, #136	; 0x88
   1d196:	4618      	mov	r0, r3
   1d198:	2100      	movs	r1, #0
   1d19a:	2210      	movs	r2, #16
   1d19c:	f7eb ed0e 	blx	8bbc <_init+0x5c>
   1d1a0:	f107 0198 	add.w	r1, r7, #152	; 0x98
   1d1a4:	1d3a      	adds	r2, r7, #4
   1d1a6:	463b      	mov	r3, r7
   1d1a8:	4608      	mov	r0, r1
   1d1aa:	497b      	ldr	r1, [pc, #492]	; (1d398 <FMG_CheckFileCoherence+0x23c>)
   1d1ac:	4479      	add	r1, pc
   1d1ae:	6812      	ldr	r2, [r2, #0]
   1d1b0:	681b      	ldr	r3, [r3, #0]
   1d1b2:	f7eb ed80 	blx	8cb4 <_init+0x154>
   1d1b6:	f107 0514 	add.w	r5, r7, #20
   1d1ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
   1d1be:	4618      	mov	r0, r3
   1d1c0:	4b76      	ldr	r3, [pc, #472]	; (1d39c <FMG_CheckFileCoherence+0x240>)
   1d1c2:	447b      	add	r3, pc
   1d1c4:	4619      	mov	r1, r3
   1d1c6:	f003 fb9d 	bl	20904 <FS_open>
   1d1ca:	6028      	str	r0, [r5, #0]
   1d1cc:	f107 0314 	add.w	r3, r7, #20
   1d1d0:	681b      	ldr	r3, [r3, #0]
   1d1d2:	2b00      	cmp	r3, #0
   1d1d4:	d101      	bne.n	1d1da <FMG_CheckFileCoherence+0x7e>
   1d1d6:	2313      	movs	r3, #19
   1d1d8:	e0cb      	b.n	1d372 <FMG_CheckFileCoherence+0x216>
   1d1da:	f107 0518 	add.w	r5, r7, #24
   1d1de:	f107 0314 	add.w	r3, r7, #20
   1d1e2:	6818      	ldr	r0, [r3, #0]
   1d1e4:	f003 fb38 	bl	20858 <FS_length>
   1d1e8:	6028      	str	r0, [r5, #0]
   1d1ea:	f107 0318 	add.w	r3, r7, #24
   1d1ee:	681b      	ldr	r3, [r3, #0]
   1d1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
   1d1f4:	d101      	bne.n	1d1fa <FMG_CheckFileCoherence+0x9e>
   1d1f6:	231c      	movs	r3, #28
   1d1f8:	e0bb      	b.n	1d372 <FMG_CheckFileCoherence+0x216>
   1d1fa:	f107 0320 	add.w	r3, r7, #32
   1d1fe:	4618      	mov	r0, r3
   1d200:	f001 fef4 	bl	1efec <md5_init>
   1d204:	f107 030c 	add.w	r3, r7, #12
   1d208:	2200      	movs	r2, #0
   1d20a:	601a      	str	r2, [r3, #0]
   1d20c:	f107 0310 	add.w	r3, r7, #16
   1d210:	2200      	movs	r2, #0
   1d212:	601a      	str	r2, [r3, #0]
   1d214:	e072      	b.n	1d2fc <FMG_CheckFileCoherence+0x1a0>
   1d216:	f107 030c 	add.w	r3, r7, #12
   1d21a:	f107 010c 	add.w	r1, r7, #12
   1d21e:	f107 021c 	add.w	r2, r7, #28
   1d222:	6809      	ldr	r1, [r1, #0]
   1d224:	6812      	ldr	r2, [r2, #0]
   1d226:	188a      	adds	r2, r1, r2
   1d228:	601a      	str	r2, [r3, #0]
   1d22a:	f107 0318 	add.w	r3, r7, #24
   1d22e:	681b      	ldr	r3, [r3, #0]
   1d230:	f1a3 0210 	sub.w	r2, r3, #16
   1d234:	f107 030c 	add.w	r3, r7, #12
   1d238:	681b      	ldr	r3, [r3, #0]
   1d23a:	429a      	cmp	r2, r3
   1d23c:	da4d      	bge.n	1d2da <FMG_CheckFileCoherence+0x17e>
   1d23e:	f107 031c 	add.w	r3, r7, #28
   1d242:	681b      	ldr	r3, [r3, #0]
   1d244:	3b10      	subs	r3, #16
   1d246:	2b00      	cmp	r3, #0
   1d248:	db30      	blt.n	1d2ac <FMG_CheckFileCoherence+0x150>
   1d24a:	f107 0318 	add.w	r3, r7, #24
   1d24e:	681b      	ldr	r3, [r3, #0]
   1d250:	f1c3 0110 	rsb	r1, r3, #16
   1d254:	f107 0310 	add.w	r3, r7, #16
   1d258:	f107 020c 	add.w	r2, r7, #12
   1d25c:	6812      	ldr	r2, [r2, #0]
   1d25e:	188a      	adds	r2, r1, r2
   1d260:	601a      	str	r2, [r3, #0]
   1d262:	f107 021c 	add.w	r2, r7, #28
   1d266:	f107 0310 	add.w	r3, r7, #16
   1d26a:	6812      	ldr	r2, [r2, #0]
   1d26c:	681b      	ldr	r3, [r3, #0]
   1d26e:	1ad3      	subs	r3, r2, r3
   1d270:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
   1d274:	18d2      	adds	r2, r2, r3
   1d276:	f107 0310 	add.w	r3, r7, #16
   1d27a:	681b      	ldr	r3, [r3, #0]
   1d27c:	f107 0188 	add.w	r1, r7, #136	; 0x88
   1d280:	4608      	mov	r0, r1
   1d282:	4611      	mov	r1, r2
   1d284:	461a      	mov	r2, r3
   1d286:	f7eb ecf8 	blx	8c78 <_init+0x118>
   1d28a:	f107 021c 	add.w	r2, r7, #28
   1d28e:	f107 0310 	add.w	r3, r7, #16
   1d292:	6812      	ldr	r2, [r2, #0]
   1d294:	681b      	ldr	r3, [r3, #0]
   1d296:	1ad3      	subs	r3, r2, r3
   1d298:	f107 0120 	add.w	r1, r7, #32
   1d29c:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
   1d2a0:	4608      	mov	r0, r1
   1d2a2:	4611      	mov	r1, r2
   1d2a4:	461a      	mov	r2, r3
   1d2a6:	f001 fedb 	bl	1f060 <md5_append>
   1d2aa:	e027      	b.n	1d2fc <FMG_CheckFileCoherence+0x1a0>
   1d2ac:	f107 0288 	add.w	r2, r7, #136	; 0x88
   1d2b0:	f107 0310 	add.w	r3, r7, #16
   1d2b4:	681b      	ldr	r3, [r3, #0]
   1d2b6:	18d1      	adds	r1, r2, r3
   1d2b8:	f107 031c 	add.w	r3, r7, #28
   1d2bc:	681b      	ldr	r3, [r3, #0]
   1d2be:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
   1d2c2:	4608      	mov	r0, r1
   1d2c4:	4611      	mov	r1, r2
   1d2c6:	461a      	mov	r2, r3
   1d2c8:	f7eb ecd6 	blx	8c78 <_init+0x118>
   1d2cc:	f107 0310 	add.w	r3, r7, #16
   1d2d0:	f107 0210 	add.w	r2, r7, #16
   1d2d4:	6812      	ldr	r2, [r2, #0]
   1d2d6:	601a      	str	r2, [r3, #0]
   1d2d8:	e010      	b.n	1d2fc <FMG_CheckFileCoherence+0x1a0>
   1d2da:	f107 0120 	add.w	r1, r7, #32
   1d2de:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
   1d2e2:	f107 031c 	add.w	r3, r7, #28
   1d2e6:	4608      	mov	r0, r1
   1d2e8:	4611      	mov	r1, r2
   1d2ea:	681a      	ldr	r2, [r3, #0]
   1d2ec:	f001 feb8 	bl	1f060 <md5_append>
   1d2f0:	f107 0310 	add.w	r3, r7, #16
   1d2f4:	f107 0210 	add.w	r2, r7, #16
   1d2f8:	6812      	ldr	r2, [r2, #0]
   1d2fa:	601a      	str	r2, [r3, #0]
   1d2fc:	f107 051c 	add.w	r5, r7, #28
   1d300:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
   1d304:	f107 0314 	add.w	r3, r7, #20
   1d308:	4610      	mov	r0, r2
   1d30a:	2101      	movs	r1, #1
   1d30c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1d310:	681b      	ldr	r3, [r3, #0]
   1d312:	f003 fb21 	bl	20958 <FS_read>
   1d316:	6028      	str	r0, [r5, #0]
   1d318:	f107 031c 	add.w	r3, r7, #28
   1d31c:	681b      	ldr	r3, [r3, #0]
   1d31e:	2b00      	cmp	r3, #0
   1d320:	f47f af79 	bne.w	1d216 <FMG_CheckFileCoherence+0xba>
   1d324:	f107 030c 	add.w	r3, r7, #12
   1d328:	681b      	ldr	r3, [r3, #0]
   1d32a:	2b00      	cmp	r3, #0
   1d32c:	d101      	bne.n	1d332 <FMG_CheckFileCoherence+0x1d6>
   1d32e:	231b      	movs	r3, #27
   1d330:	e01f      	b.n	1d372 <FMG_CheckFileCoherence+0x216>
   1d332:	f107 0220 	add.w	r2, r7, #32
   1d336:	f107 0378 	add.w	r3, r7, #120	; 0x78
   1d33a:	4610      	mov	r0, r2
   1d33c:	4619      	mov	r1, r3
   1d33e:	f001 ff1b 	bl	1f178 <md5_finish>
   1d342:	f107 0314 	add.w	r3, r7, #20
   1d346:	6818      	ldr	r0, [r3, #0]
   1d348:	f003 fa00 	bl	2074c <FS_close>
   1d34c:	f107 0314 	add.w	r3, r7, #20
   1d350:	2200      	movs	r2, #0
   1d352:	601a      	str	r2, [r3, #0]
   1d354:	f107 0278 	add.w	r2, r7, #120	; 0x78
   1d358:	f107 0388 	add.w	r3, r7, #136	; 0x88
   1d35c:	4610      	mov	r0, r2
   1d35e:	4619      	mov	r1, r3
   1d360:	2210      	movs	r2, #16
   1d362:	f7eb ecc8 	blx	8cf4 <_init+0x194>
   1d366:	4603      	mov	r3, r0
   1d368:	2b00      	cmp	r3, #0
   1d36a:	d101      	bne.n	1d370 <FMG_CheckFileCoherence+0x214>
   1d36c:	230a      	movs	r3, #10
   1d36e:	e000      	b.n	1d372 <FMG_CheckFileCoherence+0x216>
   1d370:	231c      	movs	r3, #28
   1d372:	4618      	mov	r0, r3
   1d374:	4b07      	ldr	r3, [pc, #28]	; (1d394 <FMG_CheckFileCoherence+0x238>)
   1d376:	58e3      	ldr	r3, [r4, r3]
   1d378:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	; 0x4bc
   1d37c:	681b      	ldr	r3, [r3, #0]
   1d37e:	429a      	cmp	r2, r3
   1d380:	d001      	beq.n	1d386 <FMG_CheckFileCoherence+0x22a>
   1d382:	f7eb fe0f 	bl	8fa4 <__stack_chk_fail>
   1d386:	f507 6798 	add.w	r7, r7, #1216	; 0x4c0
   1d38a:	46bd      	mov	sp, r7
   1d38c:	bdb0      	pop	{r4, r5, r7, pc}
   1d38e:	bf00      	nop
   1d390:	00011fa6 	.word	0x00011fa6
   1d394:	000000ac 	.word	0x000000ac
   1d398:	00008fa8 	.word	0x00008fa8
   1d39c:	00008faa 	.word	0x00008faa

0001d3a0 <FMG_CheckRecordCoherence>:
   1d3a0:	b590      	push	{r4, r7, lr}
   1d3a2:	b0a1      	sub	sp, #132	; 0x84
   1d3a4:	af00      	add	r7, sp, #0
   1d3a6:	60f8      	str	r0, [r7, #12]
   1d3a8:	60b9      	str	r1, [r7, #8]
   1d3aa:	607a      	str	r2, [r7, #4]
   1d3ac:	4c19      	ldr	r4, [pc, #100]	; (1d414 <FMG_CheckRecordCoherence+0x74>)
   1d3ae:	447c      	add	r4, pc
   1d3b0:	4b19      	ldr	r3, [pc, #100]	; (1d418 <FMG_CheckRecordCoherence+0x78>)
   1d3b2:	58e3      	ldr	r3, [r4, r3]
   1d3b4:	681b      	ldr	r3, [r3, #0]
   1d3b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   1d3b8:	f107 0314 	add.w	r3, r7, #20
   1d3bc:	4618      	mov	r0, r3
   1d3be:	f001 fe15 	bl	1efec <md5_init>
   1d3c2:	f107 0314 	add.w	r3, r7, #20
   1d3c6:	4618      	mov	r0, r3
   1d3c8:	68f9      	ldr	r1, [r7, #12]
   1d3ca:	68ba      	ldr	r2, [r7, #8]
   1d3cc:	f001 fe48 	bl	1f060 <md5_append>
   1d3d0:	f107 0214 	add.w	r2, r7, #20
   1d3d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   1d3d8:	4610      	mov	r0, r2
   1d3da:	4619      	mov	r1, r3
   1d3dc:	f001 fecc 	bl	1f178 <md5_finish>
   1d3e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   1d3e4:	6878      	ldr	r0, [r7, #4]
   1d3e6:	4619      	mov	r1, r3
   1d3e8:	2210      	movs	r2, #16
   1d3ea:	f7eb ec84 	blx	8cf4 <_init+0x194>
   1d3ee:	4603      	mov	r3, r0
   1d3f0:	2b00      	cmp	r3, #0
   1d3f2:	d101      	bne.n	1d3f8 <FMG_CheckRecordCoherence+0x58>
   1d3f4:	230a      	movs	r3, #10
   1d3f6:	e000      	b.n	1d3fa <FMG_CheckRecordCoherence+0x5a>
   1d3f8:	231d      	movs	r3, #29
   1d3fa:	4618      	mov	r0, r3
   1d3fc:	4b06      	ldr	r3, [pc, #24]	; (1d418 <FMG_CheckRecordCoherence+0x78>)
   1d3fe:	58e3      	ldr	r3, [r4, r3]
   1d400:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   1d402:	681b      	ldr	r3, [r3, #0]
   1d404:	429a      	cmp	r2, r3
   1d406:	d001      	beq.n	1d40c <FMG_CheckRecordCoherence+0x6c>
   1d408:	f7eb fdcc 	bl	8fa4 <__stack_chk_fail>
   1d40c:	f107 0784 	add.w	r7, r7, #132	; 0x84
   1d410:	46bd      	mov	sp, r7
   1d412:	bd90      	pop	{r4, r7, pc}
   1d414:	00011d66 	.word	0x00011d66
   1d418:	000000ac 	.word	0x000000ac

0001d41c <FMG_CalculMD5>:
   1d41c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d41e:	b0a1      	sub	sp, #132	; 0x84
   1d420:	af00      	add	r7, sp, #0
   1d422:	60f8      	str	r0, [r7, #12]
   1d424:	60b9      	str	r1, [r7, #8]
   1d426:	607a      	str	r2, [r7, #4]
   1d428:	4e17      	ldr	r6, [pc, #92]	; (1d488 <FMG_CalculMD5+0x6c>)
   1d42a:	447e      	add	r6, pc
   1d42c:	4b17      	ldr	r3, [pc, #92]	; (1d48c <FMG_CalculMD5+0x70>)
   1d42e:	58f3      	ldr	r3, [r6, r3]
   1d430:	681b      	ldr	r3, [r3, #0]
   1d432:	67fb      	str	r3, [r7, #124]	; 0x7c
   1d434:	f107 0314 	add.w	r3, r7, #20
   1d438:	4618      	mov	r0, r3
   1d43a:	f001 fdd7 	bl	1efec <md5_init>
   1d43e:	f107 0314 	add.w	r3, r7, #20
   1d442:	4618      	mov	r0, r3
   1d444:	68f9      	ldr	r1, [r7, #12]
   1d446:	68ba      	ldr	r2, [r7, #8]
   1d448:	f001 fe0a 	bl	1f060 <md5_append>
   1d44c:	f107 0214 	add.w	r2, r7, #20
   1d450:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   1d454:	4610      	mov	r0, r2
   1d456:	4619      	mov	r1, r3
   1d458:	f001 fe8e 	bl	1f178 <md5_finish>
   1d45c:	687b      	ldr	r3, [r7, #4]
   1d45e:	461c      	mov	r4, r3
   1d460:	f107 056c 	add.w	r5, r7, #108	; 0x6c
   1d464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d466:	6020      	str	r0, [r4, #0]
   1d468:	6061      	str	r1, [r4, #4]
   1d46a:	60a2      	str	r2, [r4, #8]
   1d46c:	60e3      	str	r3, [r4, #12]
   1d46e:	4b07      	ldr	r3, [pc, #28]	; (1d48c <FMG_CalculMD5+0x70>)
   1d470:	58f3      	ldr	r3, [r6, r3]
   1d472:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   1d474:	681b      	ldr	r3, [r3, #0]
   1d476:	429a      	cmp	r2, r3
   1d478:	d001      	beq.n	1d47e <FMG_CalculMD5+0x62>
   1d47a:	f7eb fd93 	bl	8fa4 <__stack_chk_fail>
   1d47e:	f107 0784 	add.w	r7, r7, #132	; 0x84
   1d482:	46bd      	mov	sp, r7
   1d484:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d486:	bf00      	nop
   1d488:	00011cea 	.word	0x00011cea
   1d48c:	000000ac 	.word	0x000000ac

0001d490 <FMG_AddRecord>:
   1d490:	b590      	push	{r4, r7, lr}
   1d492:	b0a3      	sub	sp, #140	; 0x8c
   1d494:	af04      	add	r7, sp, #16
   1d496:	6178      	str	r0, [r7, #20]
   1d498:	6139      	str	r1, [r7, #16]
   1d49a:	60fa      	str	r2, [r7, #12]
   1d49c:	60bb      	str	r3, [r7, #8]
   1d49e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   1d4a2:	607b      	str	r3, [r7, #4]
   1d4a4:	4cb9      	ldr	r4, [pc, #740]	; (1d78c <FMG_AddRecord+0x2fc>)
   1d4a6:	447c      	add	r4, pc
   1d4a8:	4bb9      	ldr	r3, [pc, #740]	; (1d790 <FMG_AddRecord+0x300>)
   1d4aa:	58e3      	ldr	r3, [r4, r3]
   1d4ac:	681b      	ldr	r3, [r3, #0]
   1d4ae:	677b      	str	r3, [r7, #116]	; 0x74
   1d4b0:	2318      	movs	r3, #24
   1d4b2:	61bb      	str	r3, [r7, #24]
   1d4b4:	2300      	movs	r3, #0
   1d4b6:	61fb      	str	r3, [r7, #28]
   1d4b8:	697b      	ldr	r3, [r7, #20]
   1d4ba:	681b      	ldr	r3, [r3, #0]
   1d4bc:	2b00      	cmp	r3, #0
   1d4be:	d110      	bne.n	1d4e2 <FMG_AddRecord+0x52>
   1d4c0:	697b      	ldr	r3, [r7, #20]
   1d4c2:	3304      	adds	r3, #4
   1d4c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d4c8:	4610      	mov	r0, r2
   1d4ca:	4619      	mov	r1, r3
   1d4cc:	f7eb eba8 	blx	8c20 <_init+0xc0>
   1d4d0:	697b      	ldr	r3, [r7, #20]
   1d4d2:	3315      	adds	r3, #21
   1d4d4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1d4d8:	4610      	mov	r0, r2
   1d4da:	4619      	mov	r1, r3
   1d4dc:	f7eb eba0 	blx	8c20 <_init+0xc0>
   1d4e0:	e028      	b.n	1d534 <FMG_AddRecord+0xa4>
   1d4e2:	697b      	ldr	r3, [r7, #20]
   1d4e4:	681b      	ldr	r3, [r3, #0]
   1d4e6:	2b01      	cmp	r3, #1
   1d4e8:	d122      	bne.n	1d530 <FMG_AddRecord+0xa0>
   1d4ea:	697b      	ldr	r3, [r7, #20]
   1d4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d4ee:	2b00      	cmp	r3, #0
   1d4f0:	d009      	beq.n	1d506 <FMG_AddRecord+0x76>
   1d4f2:	697b      	ldr	r3, [r7, #20]
   1d4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d4f6:	2b01      	cmp	r3, #1
   1d4f8:	d005      	beq.n	1d506 <FMG_AddRecord+0x76>
   1d4fa:	697b      	ldr	r3, [r7, #20]
   1d4fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d4fe:	2b02      	cmp	r3, #2
   1d500:	d001      	beq.n	1d506 <FMG_AddRecord+0x76>
   1d502:	230f      	movs	r3, #15
   1d504:	e135      	b.n	1d772 <FMG_AddRecord+0x2e2>
   1d506:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1d50a:	4618      	mov	r0, r3
   1d50c:	4ba1      	ldr	r3, [pc, #644]	; (1d794 <FMG_AddRecord+0x304>)
   1d50e:	447b      	add	r3, pc
   1d510:	4619      	mov	r1, r3
   1d512:	f7eb eb86 	blx	8c20 <_init+0xc0>
   1d516:	697b      	ldr	r3, [r7, #20]
   1d518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1d51a:	4b9f      	ldr	r3, [pc, #636]	; (1d798 <FMG_AddRecord+0x308>)
   1d51c:	58e3      	ldr	r3, [r4, r3]
   1d51e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1d522:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1d526:	4610      	mov	r0, r2
   1d528:	4619      	mov	r1, r3
   1d52a:	f7eb eb7a 	blx	8c20 <_init+0xc0>
   1d52e:	e001      	b.n	1d534 <FMG_AddRecord+0xa4>
   1d530:	2311      	movs	r3, #17
   1d532:	e11e      	b.n	1d772 <FMG_AddRecord+0x2e2>
   1d534:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d538:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1d53c:	4610      	mov	r0, r2
   1d53e:	4619      	mov	r1, r3
   1d540:	f7fc faa8 	bl	19a94 <ExtraireFileID>
   1d544:	6238      	str	r0, [r7, #32]
   1d546:	6a3b      	ldr	r3, [r7, #32]
   1d548:	2b00      	cmp	r3, #0
   1d54a:	db33      	blt.n	1d5b4 <FMG_AddRecord+0x124>
   1d54c:	4b93      	ldr	r3, [pc, #588]	; (1d79c <FMG_AddRecord+0x30c>)
   1d54e:	58e3      	ldr	r3, [r4, r3]
   1d550:	461a      	mov	r2, r3
   1d552:	6a3b      	ldr	r3, [r7, #32]
   1d554:	212c      	movs	r1, #44	; 0x2c
   1d556:	fb01 f303 	mul.w	r3, r1, r3
   1d55a:	18d3      	adds	r3, r2, r3
   1d55c:	3328      	adds	r3, #40	; 0x28
   1d55e:	681b      	ldr	r3, [r3, #0]
   1d560:	2b00      	cmp	r3, #0
   1d562:	d00d      	beq.n	1d580 <FMG_AddRecord+0xf0>
   1d564:	4b8d      	ldr	r3, [pc, #564]	; (1d79c <FMG_AddRecord+0x30c>)
   1d566:	58e3      	ldr	r3, [r4, r3]
   1d568:	461a      	mov	r2, r3
   1d56a:	6a3b      	ldr	r3, [r7, #32]
   1d56c:	212c      	movs	r1, #44	; 0x2c
   1d56e:	fb01 f303 	mul.w	r3, r1, r3
   1d572:	18d3      	adds	r3, r2, r3
   1d574:	3328      	adds	r3, #40	; 0x28
   1d576:	681b      	ldr	r3, [r3, #0]
   1d578:	2b01      	cmp	r3, #1
   1d57a:	d001      	beq.n	1d580 <FMG_AddRecord+0xf0>
   1d57c:	230d      	movs	r3, #13
   1d57e:	e0f8      	b.n	1d772 <FMG_AddRecord+0x2e2>
   1d580:	4b86      	ldr	r3, [pc, #536]	; (1d79c <FMG_AddRecord+0x30c>)
   1d582:	58e3      	ldr	r3, [r4, r3]
   1d584:	461a      	mov	r2, r3
   1d586:	6a3b      	ldr	r3, [r7, #32]
   1d588:	212c      	movs	r1, #44	; 0x2c
   1d58a:	fb01 f303 	mul.w	r3, r1, r3
   1d58e:	18d3      	adds	r3, r2, r3
   1d590:	332c      	adds	r3, #44	; 0x2c
   1d592:	681b      	ldr	r3, [r3, #0]
   1d594:	2b00      	cmp	r3, #0
   1d596:	d00f      	beq.n	1d5b8 <FMG_AddRecord+0x128>
   1d598:	4b80      	ldr	r3, [pc, #512]	; (1d79c <FMG_AddRecord+0x30c>)
   1d59a:	58e3      	ldr	r3, [r4, r3]
   1d59c:	461a      	mov	r2, r3
   1d59e:	6a3b      	ldr	r3, [r7, #32]
   1d5a0:	212c      	movs	r1, #44	; 0x2c
   1d5a2:	fb01 f303 	mul.w	r3, r1, r3
   1d5a6:	18d3      	adds	r3, r2, r3
   1d5a8:	332c      	adds	r3, #44	; 0x2c
   1d5aa:	681b      	ldr	r3, [r3, #0]
   1d5ac:	2b01      	cmp	r3, #1
   1d5ae:	d003      	beq.n	1d5b8 <FMG_AddRecord+0x128>
   1d5b0:	230e      	movs	r3, #14
   1d5b2:	e0de      	b.n	1d772 <FMG_AddRecord+0x2e2>
   1d5b4:	230b      	movs	r3, #11
   1d5b6:	e0dc      	b.n	1d772 <FMG_AddRecord+0x2e2>
   1d5b8:	f107 0150 	add.w	r1, r7, #80	; 0x50
   1d5bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d5c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1d5c4:	4608      	mov	r0, r1
   1d5c6:	4976      	ldr	r1, [pc, #472]	; (1d7a0 <FMG_AddRecord+0x310>)
   1d5c8:	4479      	add	r1, pc
   1d5ca:	f7eb eb74 	blx	8cb4 <_init+0x154>
   1d5ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1d5d2:	4618      	mov	r0, r3
   1d5d4:	f003 f914 	bl	20800 <FS_exist>
   1d5d8:	6278      	str	r0, [r7, #36]	; 0x24
   1d5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d5dc:	2b02      	cmp	r3, #2
   1d5de:	d001      	beq.n	1d5e4 <FMG_AddRecord+0x154>
   1d5e0:	230b      	movs	r3, #11
   1d5e2:	e0c6      	b.n	1d772 <FMG_AddRecord+0x2e2>
   1d5e4:	4b6d      	ldr	r3, [pc, #436]	; (1d79c <FMG_AddRecord+0x30c>)
   1d5e6:	58e3      	ldr	r3, [r4, r3]
   1d5e8:	461a      	mov	r2, r3
   1d5ea:	6a3b      	ldr	r3, [r7, #32]
   1d5ec:	212c      	movs	r1, #44	; 0x2c
   1d5ee:	fb01 f303 	mul.w	r3, r1, r3
   1d5f2:	18d3      	adds	r3, r2, r3
   1d5f4:	332c      	adds	r3, #44	; 0x2c
   1d5f6:	681b      	ldr	r3, [r3, #0]
   1d5f8:	2b01      	cmp	r3, #1
   1d5fa:	d10c      	bne.n	1d616 <FMG_AddRecord+0x186>
   1d5fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d600:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1d604:	4610      	mov	r0, r2
   1d606:	4619      	mov	r1, r3
   1d608:	f7ff fda8 	bl	1d15c <FMG_CheckFileCoherence>
   1d60c:	4603      	mov	r3, r0
   1d60e:	2b0a      	cmp	r3, #10
   1d610:	d001      	beq.n	1d616 <FMG_AddRecord+0x186>
   1d612:	231c      	movs	r3, #28
   1d614:	e0ad      	b.n	1d772 <FMG_AddRecord+0x2e2>
   1d616:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1d61a:	4618      	mov	r0, r3
   1d61c:	4b61      	ldr	r3, [pc, #388]	; (1d7a4 <FMG_AddRecord+0x314>)
   1d61e:	447b      	add	r3, pc
   1d620:	4619      	mov	r1, r3
   1d622:	f003 f96f 	bl	20904 <FS_open>
   1d626:	61f8      	str	r0, [r7, #28]
   1d628:	69fb      	ldr	r3, [r7, #28]
   1d62a:	2b00      	cmp	r3, #0
   1d62c:	d102      	bne.n	1d634 <FMG_AddRecord+0x1a4>
   1d62e:	2313      	movs	r3, #19
   1d630:	61bb      	str	r3, [r7, #24]
   1d632:	e09d      	b.n	1d770 <FMG_AddRecord+0x2e0>
   1d634:	69f8      	ldr	r0, [r7, #28]
   1d636:	f003 f889 	bl	2074c <FS_close>
   1d63a:	2300      	movs	r3, #0
   1d63c:	61fb      	str	r3, [r7, #28]
   1d63e:	68bb      	ldr	r3, [r7, #8]
   1d640:	2b01      	cmp	r3, #1
   1d642:	d032      	beq.n	1d6aa <FMG_AddRecord+0x21a>
   1d644:	2b01      	cmp	r3, #1
   1d646:	d302      	bcc.n	1d64e <FMG_AddRecord+0x1be>
   1d648:	2b02      	cmp	r3, #2
   1d64a:	d060      	beq.n	1d70e <FMG_AddRecord+0x27e>
   1d64c:	e08d      	b.n	1d76a <FMG_AddRecord+0x2da>
   1d64e:	4b53      	ldr	r3, [pc, #332]	; (1d79c <FMG_AddRecord+0x30c>)
   1d650:	58e3      	ldr	r3, [r4, r3]
   1d652:	461a      	mov	r2, r3
   1d654:	6a3b      	ldr	r3, [r7, #32]
   1d656:	212c      	movs	r1, #44	; 0x2c
   1d658:	fb01 f303 	mul.w	r3, r1, r3
   1d65c:	18d3      	adds	r3, r2, r3
   1d65e:	332c      	adds	r3, #44	; 0x2c
   1d660:	681b      	ldr	r3, [r3, #0]
   1d662:	2b01      	cmp	r3, #1
   1d664:	d110      	bne.n	1d688 <FMG_AddRecord+0x1f8>
   1d666:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d66a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1d66e:	6a39      	ldr	r1, [r7, #32]
   1d670:	9100      	str	r1, [sp, #0]
   1d672:	2102      	movs	r1, #2
   1d674:	9101      	str	r1, [sp, #4]
   1d676:	4610      	mov	r0, r2
   1d678:	4619      	mov	r1, r3
   1d67a:	693a      	ldr	r2, [r7, #16]
   1d67c:	68fb      	ldr	r3, [r7, #12]
   1d67e:	f7fc fc3d 	bl	19efc <AddModifyRecordBeginWithCkecksum>
   1d682:	4603      	mov	r3, r0
   1d684:	61bb      	str	r3, [r7, #24]
   1d686:	e073      	b.n	1d770 <FMG_AddRecord+0x2e0>
   1d688:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d68c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1d690:	6a39      	ldr	r1, [r7, #32]
   1d692:	9100      	str	r1, [sp, #0]
   1d694:	2102      	movs	r1, #2
   1d696:	9101      	str	r1, [sp, #4]
   1d698:	4610      	mov	r0, r2
   1d69a:	4619      	mov	r1, r3
   1d69c:	693a      	ldr	r2, [r7, #16]
   1d69e:	68fb      	ldr	r3, [r7, #12]
   1d6a0:	f7fc fa9c 	bl	19bdc <AddModifyRecordBegin>
   1d6a4:	4603      	mov	r3, r0
   1d6a6:	61bb      	str	r3, [r7, #24]
   1d6a8:	e062      	b.n	1d770 <FMG_AddRecord+0x2e0>
   1d6aa:	4b3c      	ldr	r3, [pc, #240]	; (1d79c <FMG_AddRecord+0x30c>)
   1d6ac:	58e3      	ldr	r3, [r4, r3]
   1d6ae:	461a      	mov	r2, r3
   1d6b0:	6a3b      	ldr	r3, [r7, #32]
   1d6b2:	212c      	movs	r1, #44	; 0x2c
   1d6b4:	fb01 f303 	mul.w	r3, r1, r3
   1d6b8:	18d3      	adds	r3, r2, r3
   1d6ba:	332c      	adds	r3, #44	; 0x2c
   1d6bc:	681b      	ldr	r3, [r3, #0]
   1d6be:	2b01      	cmp	r3, #1
   1d6c0:	d112      	bne.n	1d6e8 <FMG_AddRecord+0x258>
   1d6c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d6c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1d6ca:	6879      	ldr	r1, [r7, #4]
   1d6cc:	9100      	str	r1, [sp, #0]
   1d6ce:	6a39      	ldr	r1, [r7, #32]
   1d6d0:	9101      	str	r1, [sp, #4]
   1d6d2:	2102      	movs	r1, #2
   1d6d4:	9102      	str	r1, [sp, #8]
   1d6d6:	4610      	mov	r0, r2
   1d6d8:	4619      	mov	r1, r3
   1d6da:	693a      	ldr	r2, [r7, #16]
   1d6dc:	68fb      	ldr	r3, [r7, #12]
   1d6de:	f7fd f827 	bl	1a730 <AddModifyRecordMiddleWithCkecksum>
   1d6e2:	4603      	mov	r3, r0
   1d6e4:	61bb      	str	r3, [r7, #24]
   1d6e6:	e043      	b.n	1d770 <FMG_AddRecord+0x2e0>
   1d6e8:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d6ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1d6f0:	6879      	ldr	r1, [r7, #4]
   1d6f2:	9100      	str	r1, [sp, #0]
   1d6f4:	6a39      	ldr	r1, [r7, #32]
   1d6f6:	9101      	str	r1, [sp, #4]
   1d6f8:	2102      	movs	r1, #2
   1d6fa:	9102      	str	r1, [sp, #8]
   1d6fc:	4610      	mov	r0, r2
   1d6fe:	4619      	mov	r1, r3
   1d700:	693a      	ldr	r2, [r7, #16]
   1d702:	68fb      	ldr	r3, [r7, #12]
   1d704:	f7fc fe08 	bl	1a318 <AddModifyRecordMiddle>
   1d708:	4603      	mov	r3, r0
   1d70a:	61bb      	str	r3, [r7, #24]
   1d70c:	e030      	b.n	1d770 <FMG_AddRecord+0x2e0>
   1d70e:	4b23      	ldr	r3, [pc, #140]	; (1d79c <FMG_AddRecord+0x30c>)
   1d710:	58e3      	ldr	r3, [r4, r3]
   1d712:	461a      	mov	r2, r3
   1d714:	6a3b      	ldr	r3, [r7, #32]
   1d716:	212c      	movs	r1, #44	; 0x2c
   1d718:	fb01 f303 	mul.w	r3, r1, r3
   1d71c:	18d3      	adds	r3, r2, r3
   1d71e:	332c      	adds	r3, #44	; 0x2c
   1d720:	681b      	ldr	r3, [r3, #0]
   1d722:	2b01      	cmp	r3, #1
   1d724:	d110      	bne.n	1d748 <FMG_AddRecord+0x2b8>
   1d726:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d72a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1d72e:	6a39      	ldr	r1, [r7, #32]
   1d730:	9100      	str	r1, [sp, #0]
   1d732:	2102      	movs	r1, #2
   1d734:	9101      	str	r1, [sp, #4]
   1d736:	4610      	mov	r0, r2
   1d738:	4619      	mov	r1, r3
   1d73a:	693a      	ldr	r2, [r7, #16]
   1d73c:	68fb      	ldr	r3, [r7, #12]
   1d73e:	f7fd fced 	bl	1b11c <AddModifyRecordEndWithCkecksum>
   1d742:	4603      	mov	r3, r0
   1d744:	61bb      	str	r3, [r7, #24]
   1d746:	e013      	b.n	1d770 <FMG_AddRecord+0x2e0>
   1d748:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d74c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1d750:	6a39      	ldr	r1, [r7, #32]
   1d752:	9100      	str	r1, [sp, #0]
   1d754:	2102      	movs	r1, #2
   1d756:	9101      	str	r1, [sp, #4]
   1d758:	4610      	mov	r0, r2
   1d75a:	4619      	mov	r1, r3
   1d75c:	693a      	ldr	r2, [r7, #16]
   1d75e:	68fb      	ldr	r3, [r7, #12]
   1d760:	f7fd fa7e 	bl	1ac60 <AddModifyRecordEnd>
   1d764:	4603      	mov	r3, r0
   1d766:	61bb      	str	r3, [r7, #24]
   1d768:	e002      	b.n	1d770 <FMG_AddRecord+0x2e0>
   1d76a:	2310      	movs	r3, #16
   1d76c:	61bb      	str	r3, [r7, #24]
   1d76e:	bf00      	nop
   1d770:	69bb      	ldr	r3, [r7, #24]
   1d772:	4618      	mov	r0, r3
   1d774:	4b06      	ldr	r3, [pc, #24]	; (1d790 <FMG_AddRecord+0x300>)
   1d776:	58e3      	ldr	r3, [r4, r3]
   1d778:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1d77a:	681b      	ldr	r3, [r3, #0]
   1d77c:	429a      	cmp	r2, r3
   1d77e:	d001      	beq.n	1d784 <FMG_AddRecord+0x2f4>
   1d780:	f7eb fc10 	bl	8fa4 <__stack_chk_fail>
   1d784:	f107 077c 	add.w	r7, r7, #124	; 0x7c
   1d788:	46bd      	mov	sp, r7
   1d78a:	bd90      	pop	{r4, r7, pc}
   1d78c:	00011c6e 	.word	0x00011c6e
   1d790:	000000ac 	.word	0x000000ac
   1d794:	00012abe 	.word	0x00012abe
   1d798:	000000a8 	.word	0x000000a8
   1d79c:	000000c0 	.word	0x000000c0
   1d7a0:	00008b8c 	.word	0x00008b8c
   1d7a4:	00008b4a 	.word	0x00008b4a

0001d7a8 <FMG_ModifyRecord>:
   1d7a8:	b590      	push	{r4, r7, lr}
   1d7aa:	b0a5      	sub	sp, #148	; 0x94
   1d7ac:	af04      	add	r7, sp, #16
   1d7ae:	6178      	str	r0, [r7, #20]
   1d7b0:	6139      	str	r1, [r7, #16]
   1d7b2:	60fa      	str	r2, [r7, #12]
   1d7b4:	60bb      	str	r3, [r7, #8]
   1d7b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   1d7ba:	607b      	str	r3, [r7, #4]
   1d7bc:	4cc6      	ldr	r4, [pc, #792]	; (1dad8 <FMG_ModifyRecord+0x330>)
   1d7be:	447c      	add	r4, pc
   1d7c0:	4bc6      	ldr	r3, [pc, #792]	; (1dadc <FMG_ModifyRecord+0x334>)
   1d7c2:	58e3      	ldr	r3, [r4, r3]
   1d7c4:	681b      	ldr	r3, [r3, #0]
   1d7c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   1d7c8:	2318      	movs	r3, #24
   1d7ca:	61fb      	str	r3, [r7, #28]
   1d7cc:	2300      	movs	r3, #0
   1d7ce:	623b      	str	r3, [r7, #32]
   1d7d0:	2300      	movs	r3, #0
   1d7d2:	627b      	str	r3, [r7, #36]	; 0x24
   1d7d4:	697b      	ldr	r3, [r7, #20]
   1d7d6:	681b      	ldr	r3, [r3, #0]
   1d7d8:	2b00      	cmp	r3, #0
   1d7da:	d110      	bne.n	1d7fe <FMG_ModifyRecord+0x56>
   1d7dc:	697b      	ldr	r3, [r7, #20]
   1d7de:	3304      	adds	r3, #4
   1d7e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1d7e4:	4610      	mov	r0, r2
   1d7e6:	4619      	mov	r1, r3
   1d7e8:	f7eb ea1a 	blx	8c20 <_init+0xc0>
   1d7ec:	697b      	ldr	r3, [r7, #20]
   1d7ee:	3315      	adds	r3, #21
   1d7f0:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1d7f4:	4610      	mov	r0, r2
   1d7f6:	4619      	mov	r1, r3
   1d7f8:	f7eb ea12 	blx	8c20 <_init+0xc0>
   1d7fc:	e028      	b.n	1d850 <FMG_ModifyRecord+0xa8>
   1d7fe:	697b      	ldr	r3, [r7, #20]
   1d800:	681b      	ldr	r3, [r3, #0]
   1d802:	2b01      	cmp	r3, #1
   1d804:	d122      	bne.n	1d84c <FMG_ModifyRecord+0xa4>
   1d806:	697b      	ldr	r3, [r7, #20]
   1d808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d80a:	2b00      	cmp	r3, #0
   1d80c:	d009      	beq.n	1d822 <FMG_ModifyRecord+0x7a>
   1d80e:	697b      	ldr	r3, [r7, #20]
   1d810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d812:	2b01      	cmp	r3, #1
   1d814:	d005      	beq.n	1d822 <FMG_ModifyRecord+0x7a>
   1d816:	697b      	ldr	r3, [r7, #20]
   1d818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d81a:	2b02      	cmp	r3, #2
   1d81c:	d001      	beq.n	1d822 <FMG_ModifyRecord+0x7a>
   1d81e:	230f      	movs	r3, #15
   1d820:	e14c      	b.n	1dabc <FMG_ModifyRecord+0x314>
   1d822:	f107 0330 	add.w	r3, r7, #48	; 0x30
   1d826:	4618      	mov	r0, r3
   1d828:	4bad      	ldr	r3, [pc, #692]	; (1dae0 <FMG_ModifyRecord+0x338>)
   1d82a:	447b      	add	r3, pc
   1d82c:	4619      	mov	r1, r3
   1d82e:	f7eb e9f8 	blx	8c20 <_init+0xc0>
   1d832:	697b      	ldr	r3, [r7, #20]
   1d834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1d836:	4bab      	ldr	r3, [pc, #684]	; (1dae4 <FMG_ModifyRecord+0x33c>)
   1d838:	58e3      	ldr	r3, [r4, r3]
   1d83a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1d83e:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1d842:	4610      	mov	r0, r2
   1d844:	4619      	mov	r1, r3
   1d846:	f7eb e9ec 	blx	8c20 <_init+0xc0>
   1d84a:	e001      	b.n	1d850 <FMG_ModifyRecord+0xa8>
   1d84c:	2311      	movs	r3, #17
   1d84e:	e135      	b.n	1dabc <FMG_ModifyRecord+0x314>
   1d850:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1d854:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1d858:	4610      	mov	r0, r2
   1d85a:	4619      	mov	r1, r3
   1d85c:	f7fc f91a 	bl	19a94 <ExtraireFileID>
   1d860:	62b8      	str	r0, [r7, #40]	; 0x28
   1d862:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d864:	2b00      	cmp	r3, #0
   1d866:	db33      	blt.n	1d8d0 <FMG_ModifyRecord+0x128>
   1d868:	4b9f      	ldr	r3, [pc, #636]	; (1dae8 <FMG_ModifyRecord+0x340>)
   1d86a:	58e3      	ldr	r3, [r4, r3]
   1d86c:	461a      	mov	r2, r3
   1d86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d870:	212c      	movs	r1, #44	; 0x2c
   1d872:	fb01 f303 	mul.w	r3, r1, r3
   1d876:	18d3      	adds	r3, r2, r3
   1d878:	3328      	adds	r3, #40	; 0x28
   1d87a:	681b      	ldr	r3, [r3, #0]
   1d87c:	2b00      	cmp	r3, #0
   1d87e:	d00d      	beq.n	1d89c <FMG_ModifyRecord+0xf4>
   1d880:	4b99      	ldr	r3, [pc, #612]	; (1dae8 <FMG_ModifyRecord+0x340>)
   1d882:	58e3      	ldr	r3, [r4, r3]
   1d884:	461a      	mov	r2, r3
   1d886:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d888:	212c      	movs	r1, #44	; 0x2c
   1d88a:	fb01 f303 	mul.w	r3, r1, r3
   1d88e:	18d3      	adds	r3, r2, r3
   1d890:	3328      	adds	r3, #40	; 0x28
   1d892:	681b      	ldr	r3, [r3, #0]
   1d894:	2b01      	cmp	r3, #1
   1d896:	d001      	beq.n	1d89c <FMG_ModifyRecord+0xf4>
   1d898:	230d      	movs	r3, #13
   1d89a:	e10f      	b.n	1dabc <FMG_ModifyRecord+0x314>
   1d89c:	4b92      	ldr	r3, [pc, #584]	; (1dae8 <FMG_ModifyRecord+0x340>)
   1d89e:	58e3      	ldr	r3, [r4, r3]
   1d8a0:	461a      	mov	r2, r3
   1d8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d8a4:	212c      	movs	r1, #44	; 0x2c
   1d8a6:	fb01 f303 	mul.w	r3, r1, r3
   1d8aa:	18d3      	adds	r3, r2, r3
   1d8ac:	332c      	adds	r3, #44	; 0x2c
   1d8ae:	681b      	ldr	r3, [r3, #0]
   1d8b0:	2b00      	cmp	r3, #0
   1d8b2:	d00f      	beq.n	1d8d4 <FMG_ModifyRecord+0x12c>
   1d8b4:	4b8c      	ldr	r3, [pc, #560]	; (1dae8 <FMG_ModifyRecord+0x340>)
   1d8b6:	58e3      	ldr	r3, [r4, r3]
   1d8b8:	461a      	mov	r2, r3
   1d8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d8bc:	212c      	movs	r1, #44	; 0x2c
   1d8be:	fb01 f303 	mul.w	r3, r1, r3
   1d8c2:	18d3      	adds	r3, r2, r3
   1d8c4:	332c      	adds	r3, #44	; 0x2c
   1d8c6:	681b      	ldr	r3, [r3, #0]
   1d8c8:	2b01      	cmp	r3, #1
   1d8ca:	d003      	beq.n	1d8d4 <FMG_ModifyRecord+0x12c>
   1d8cc:	230e      	movs	r3, #14
   1d8ce:	e0f5      	b.n	1dabc <FMG_ModifyRecord+0x314>
   1d8d0:	230b      	movs	r3, #11
   1d8d2:	e0f3      	b.n	1dabc <FMG_ModifyRecord+0x314>
   1d8d4:	f107 0158 	add.w	r1, r7, #88	; 0x58
   1d8d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1d8dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1d8e0:	4608      	mov	r0, r1
   1d8e2:	4982      	ldr	r1, [pc, #520]	; (1daec <FMG_ModifyRecord+0x344>)
   1d8e4:	4479      	add	r1, pc
   1d8e6:	f7eb e9e6 	blx	8cb4 <_init+0x154>
   1d8ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
   1d8ee:	4618      	mov	r0, r3
   1d8f0:	f002 ff86 	bl	20800 <FS_exist>
   1d8f4:	62f8      	str	r0, [r7, #44]	; 0x2c
   1d8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d8f8:	2b02      	cmp	r3, #2
   1d8fa:	d001      	beq.n	1d900 <FMG_ModifyRecord+0x158>
   1d8fc:	230b      	movs	r3, #11
   1d8fe:	e0dd      	b.n	1dabc <FMG_ModifyRecord+0x314>
   1d900:	4b79      	ldr	r3, [pc, #484]	; (1dae8 <FMG_ModifyRecord+0x340>)
   1d902:	58e3      	ldr	r3, [r4, r3]
   1d904:	461a      	mov	r2, r3
   1d906:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d908:	212c      	movs	r1, #44	; 0x2c
   1d90a:	fb01 f303 	mul.w	r3, r1, r3
   1d90e:	18d3      	adds	r3, r2, r3
   1d910:	332c      	adds	r3, #44	; 0x2c
   1d912:	681b      	ldr	r3, [r3, #0]
   1d914:	2b01      	cmp	r3, #1
   1d916:	d10c      	bne.n	1d932 <FMG_ModifyRecord+0x18a>
   1d918:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1d91c:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1d920:	4610      	mov	r0, r2
   1d922:	4619      	mov	r1, r3
   1d924:	f7ff fc1a 	bl	1d15c <FMG_CheckFileCoherence>
   1d928:	4603      	mov	r3, r0
   1d92a:	2b0a      	cmp	r3, #10
   1d92c:	d001      	beq.n	1d932 <FMG_ModifyRecord+0x18a>
   1d92e:	231c      	movs	r3, #28
   1d930:	e0c4      	b.n	1dabc <FMG_ModifyRecord+0x314>
   1d932:	f107 0358 	add.w	r3, r7, #88	; 0x58
   1d936:	4618      	mov	r0, r3
   1d938:	4b6d      	ldr	r3, [pc, #436]	; (1daf0 <FMG_ModifyRecord+0x348>)
   1d93a:	447b      	add	r3, pc
   1d93c:	4619      	mov	r1, r3
   1d93e:	f002 ffe1 	bl	20904 <FS_open>
   1d942:	6278      	str	r0, [r7, #36]	; 0x24
   1d944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d946:	2b00      	cmp	r3, #0
   1d948:	d102      	bne.n	1d950 <FMG_ModifyRecord+0x1a8>
   1d94a:	2313      	movs	r3, #19
   1d94c:	61fb      	str	r3, [r7, #28]
   1d94e:	e0b4      	b.n	1daba <FMG_ModifyRecord+0x312>
   1d950:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1d952:	f002 ff81 	bl	20858 <FS_length>
   1d956:	6238      	str	r0, [r7, #32]
   1d958:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1d95a:	f002 fef7 	bl	2074c <FS_close>
   1d95e:	2300      	movs	r3, #0
   1d960:	627b      	str	r3, [r7, #36]	; 0x24
   1d962:	4b61      	ldr	r3, [pc, #388]	; (1dae8 <FMG_ModifyRecord+0x340>)
   1d964:	58e3      	ldr	r3, [r4, r3]
   1d966:	461a      	mov	r2, r3
   1d968:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d96a:	212c      	movs	r1, #44	; 0x2c
   1d96c:	fb01 f303 	mul.w	r3, r1, r3
   1d970:	18d3      	adds	r3, r2, r3
   1d972:	332c      	adds	r3, #44	; 0x2c
   1d974:	681b      	ldr	r3, [r3, #0]
   1d976:	6a38      	ldr	r0, [r7, #32]
   1d978:	4619      	mov	r1, r3
   1d97a:	f7fe ffa7 	bl	1c8cc <IsFileEmpty>
   1d97e:	4603      	mov	r3, r0
   1d980:	2b00      	cmp	r3, #0
   1d982:	d001      	beq.n	1d988 <FMG_ModifyRecord+0x1e0>
   1d984:	2318      	movs	r3, #24
   1d986:	e099      	b.n	1dabc <FMG_ModifyRecord+0x314>
   1d988:	68bb      	ldr	r3, [r7, #8]
   1d98a:	2b01      	cmp	r3, #1
   1d98c:	d032      	beq.n	1d9f4 <FMG_ModifyRecord+0x24c>
   1d98e:	2b01      	cmp	r3, #1
   1d990:	d302      	bcc.n	1d998 <FMG_ModifyRecord+0x1f0>
   1d992:	2b02      	cmp	r3, #2
   1d994:	d060      	beq.n	1da58 <FMG_ModifyRecord+0x2b0>
   1d996:	e08d      	b.n	1dab4 <FMG_ModifyRecord+0x30c>
   1d998:	4b53      	ldr	r3, [pc, #332]	; (1dae8 <FMG_ModifyRecord+0x340>)
   1d99a:	58e3      	ldr	r3, [r4, r3]
   1d99c:	461a      	mov	r2, r3
   1d99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d9a0:	212c      	movs	r1, #44	; 0x2c
   1d9a2:	fb01 f303 	mul.w	r3, r1, r3
   1d9a6:	18d3      	adds	r3, r2, r3
   1d9a8:	332c      	adds	r3, #44	; 0x2c
   1d9aa:	681b      	ldr	r3, [r3, #0]
   1d9ac:	2b01      	cmp	r3, #1
   1d9ae:	d110      	bne.n	1d9d2 <FMG_ModifyRecord+0x22a>
   1d9b0:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1d9b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1d9b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1d9ba:	9100      	str	r1, [sp, #0]
   1d9bc:	2101      	movs	r1, #1
   1d9be:	9101      	str	r1, [sp, #4]
   1d9c0:	4610      	mov	r0, r2
   1d9c2:	4619      	mov	r1, r3
   1d9c4:	693a      	ldr	r2, [r7, #16]
   1d9c6:	68fb      	ldr	r3, [r7, #12]
   1d9c8:	f7fc fa98 	bl	19efc <AddModifyRecordBeginWithCkecksum>
   1d9cc:	4603      	mov	r3, r0
   1d9ce:	61fb      	str	r3, [r7, #28]
   1d9d0:	e073      	b.n	1daba <FMG_ModifyRecord+0x312>
   1d9d2:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1d9d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1d9da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1d9dc:	9100      	str	r1, [sp, #0]
   1d9de:	2101      	movs	r1, #1
   1d9e0:	9101      	str	r1, [sp, #4]
   1d9e2:	4610      	mov	r0, r2
   1d9e4:	4619      	mov	r1, r3
   1d9e6:	693a      	ldr	r2, [r7, #16]
   1d9e8:	68fb      	ldr	r3, [r7, #12]
   1d9ea:	f7fc f8f7 	bl	19bdc <AddModifyRecordBegin>
   1d9ee:	4603      	mov	r3, r0
   1d9f0:	61fb      	str	r3, [r7, #28]
   1d9f2:	e062      	b.n	1daba <FMG_ModifyRecord+0x312>
   1d9f4:	4b3c      	ldr	r3, [pc, #240]	; (1dae8 <FMG_ModifyRecord+0x340>)
   1d9f6:	58e3      	ldr	r3, [r4, r3]
   1d9f8:	461a      	mov	r2, r3
   1d9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d9fc:	212c      	movs	r1, #44	; 0x2c
   1d9fe:	fb01 f303 	mul.w	r3, r1, r3
   1da02:	18d3      	adds	r3, r2, r3
   1da04:	332c      	adds	r3, #44	; 0x2c
   1da06:	681b      	ldr	r3, [r3, #0]
   1da08:	2b01      	cmp	r3, #1
   1da0a:	d112      	bne.n	1da32 <FMG_ModifyRecord+0x28a>
   1da0c:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1da10:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1da14:	6879      	ldr	r1, [r7, #4]
   1da16:	9100      	str	r1, [sp, #0]
   1da18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1da1a:	9101      	str	r1, [sp, #4]
   1da1c:	2101      	movs	r1, #1
   1da1e:	9102      	str	r1, [sp, #8]
   1da20:	4610      	mov	r0, r2
   1da22:	4619      	mov	r1, r3
   1da24:	693a      	ldr	r2, [r7, #16]
   1da26:	68fb      	ldr	r3, [r7, #12]
   1da28:	f7fc fe82 	bl	1a730 <AddModifyRecordMiddleWithCkecksum>
   1da2c:	4603      	mov	r3, r0
   1da2e:	61fb      	str	r3, [r7, #28]
   1da30:	e043      	b.n	1daba <FMG_ModifyRecord+0x312>
   1da32:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1da36:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1da3a:	6879      	ldr	r1, [r7, #4]
   1da3c:	9100      	str	r1, [sp, #0]
   1da3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1da40:	9101      	str	r1, [sp, #4]
   1da42:	2101      	movs	r1, #1
   1da44:	9102      	str	r1, [sp, #8]
   1da46:	4610      	mov	r0, r2
   1da48:	4619      	mov	r1, r3
   1da4a:	693a      	ldr	r2, [r7, #16]
   1da4c:	68fb      	ldr	r3, [r7, #12]
   1da4e:	f7fc fc63 	bl	1a318 <AddModifyRecordMiddle>
   1da52:	4603      	mov	r3, r0
   1da54:	61fb      	str	r3, [r7, #28]
   1da56:	e030      	b.n	1daba <FMG_ModifyRecord+0x312>
   1da58:	4b23      	ldr	r3, [pc, #140]	; (1dae8 <FMG_ModifyRecord+0x340>)
   1da5a:	58e3      	ldr	r3, [r4, r3]
   1da5c:	461a      	mov	r2, r3
   1da5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1da60:	212c      	movs	r1, #44	; 0x2c
   1da62:	fb01 f303 	mul.w	r3, r1, r3
   1da66:	18d3      	adds	r3, r2, r3
   1da68:	332c      	adds	r3, #44	; 0x2c
   1da6a:	681b      	ldr	r3, [r3, #0]
   1da6c:	2b01      	cmp	r3, #1
   1da6e:	d110      	bne.n	1da92 <FMG_ModifyRecord+0x2ea>
   1da70:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1da74:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1da78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1da7a:	9100      	str	r1, [sp, #0]
   1da7c:	2101      	movs	r1, #1
   1da7e:	9101      	str	r1, [sp, #4]
   1da80:	4610      	mov	r0, r2
   1da82:	4619      	mov	r1, r3
   1da84:	693a      	ldr	r2, [r7, #16]
   1da86:	68fb      	ldr	r3, [r7, #12]
   1da88:	f7fd fb48 	bl	1b11c <AddModifyRecordEndWithCkecksum>
   1da8c:	4603      	mov	r3, r0
   1da8e:	61fb      	str	r3, [r7, #28]
   1da90:	e013      	b.n	1daba <FMG_ModifyRecord+0x312>
   1da92:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1da96:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1da9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1da9c:	9100      	str	r1, [sp, #0]
   1da9e:	2101      	movs	r1, #1
   1daa0:	9101      	str	r1, [sp, #4]
   1daa2:	4610      	mov	r0, r2
   1daa4:	4619      	mov	r1, r3
   1daa6:	693a      	ldr	r2, [r7, #16]
   1daa8:	68fb      	ldr	r3, [r7, #12]
   1daaa:	f7fd f8d9 	bl	1ac60 <AddModifyRecordEnd>
   1daae:	4603      	mov	r3, r0
   1dab0:	61fb      	str	r3, [r7, #28]
   1dab2:	e002      	b.n	1daba <FMG_ModifyRecord+0x312>
   1dab4:	2310      	movs	r3, #16
   1dab6:	61fb      	str	r3, [r7, #28]
   1dab8:	bf00      	nop
   1daba:	69fb      	ldr	r3, [r7, #28]
   1dabc:	4618      	mov	r0, r3
   1dabe:	4b07      	ldr	r3, [pc, #28]	; (1dadc <FMG_ModifyRecord+0x334>)
   1dac0:	58e3      	ldr	r3, [r4, r3]
   1dac2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   1dac4:	681b      	ldr	r3, [r3, #0]
   1dac6:	429a      	cmp	r2, r3
   1dac8:	d001      	beq.n	1dace <FMG_ModifyRecord+0x326>
   1daca:	f7eb fa6b 	bl	8fa4 <__stack_chk_fail>
   1dace:	f107 0784 	add.w	r7, r7, #132	; 0x84
   1dad2:	46bd      	mov	sp, r7
   1dad4:	bd90      	pop	{r4, r7, pc}
   1dad6:	bf00      	nop
   1dad8:	00011956 	.word	0x00011956
   1dadc:	000000ac 	.word	0x000000ac
   1dae0:	000127a2 	.word	0x000127a2
   1dae4:	000000a8 	.word	0x000000a8
   1dae8:	000000c0 	.word	0x000000c0
   1daec:	00008870 	.word	0x00008870
   1daf0:	0000882e 	.word	0x0000882e

0001daf4 <FMG_ReadRecord>:
   1daf4:	b590      	push	{r4, r7, lr}
   1daf6:	b0a9      	sub	sp, #164	; 0xa4
   1daf8:	af00      	add	r7, sp, #0
   1dafa:	6178      	str	r0, [r7, #20]
   1dafc:	6139      	str	r1, [r7, #16]
   1dafe:	60fa      	str	r2, [r7, #12]
   1db00:	60bb      	str	r3, [r7, #8]
   1db02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1db06:	607b      	str	r3, [r7, #4]
   1db08:	f8df 4450 	ldr.w	r4, [pc, #1104]	; 1df5c <FMG_ReadRecord+0x468>
   1db0c:	447c      	add	r4, pc
   1db0e:	f8df 3450 	ldr.w	r3, [pc, #1104]	; 1df60 <FMG_ReadRecord+0x46c>
   1db12:	58e3      	ldr	r3, [r4, r3]
   1db14:	681b      	ldr	r3, [r3, #0]
   1db16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   1db1a:	2300      	movs	r3, #0
   1db1c:	61fb      	str	r3, [r7, #28]
   1db1e:	2319      	movs	r3, #25
   1db20:	62bb      	str	r3, [r7, #40]	; 0x28
   1db22:	2300      	movs	r3, #0
   1db24:	633b      	str	r3, [r7, #48]	; 0x30
   1db26:	2300      	movs	r3, #0
   1db28:	63bb      	str	r3, [r7, #56]	; 0x38
   1db2a:	2300      	movs	r3, #0
   1db2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1db2e:	697b      	ldr	r3, [r7, #20]
   1db30:	681b      	ldr	r3, [r3, #0]
   1db32:	2b00      	cmp	r3, #0
   1db34:	d110      	bne.n	1db58 <FMG_ReadRecord+0x64>
   1db36:	697b      	ldr	r3, [r7, #20]
   1db38:	3304      	adds	r3, #4
   1db3a:	f107 0250 	add.w	r2, r7, #80	; 0x50
   1db3e:	4610      	mov	r0, r2
   1db40:	4619      	mov	r1, r3
   1db42:	f7eb e86e 	blx	8c20 <_init+0xc0>
   1db46:	697b      	ldr	r3, [r7, #20]
   1db48:	3315      	adds	r3, #21
   1db4a:	f107 0264 	add.w	r2, r7, #100	; 0x64
   1db4e:	4610      	mov	r0, r2
   1db50:	4619      	mov	r1, r3
   1db52:	f7eb e866 	blx	8c20 <_init+0xc0>
   1db56:	e028      	b.n	1dbaa <FMG_ReadRecord+0xb6>
   1db58:	697b      	ldr	r3, [r7, #20]
   1db5a:	681b      	ldr	r3, [r3, #0]
   1db5c:	2b01      	cmp	r3, #1
   1db5e:	d122      	bne.n	1dba6 <FMG_ReadRecord+0xb2>
   1db60:	697b      	ldr	r3, [r7, #20]
   1db62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1db64:	2b00      	cmp	r3, #0
   1db66:	d009      	beq.n	1db7c <FMG_ReadRecord+0x88>
   1db68:	697b      	ldr	r3, [r7, #20]
   1db6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1db6c:	2b01      	cmp	r3, #1
   1db6e:	d005      	beq.n	1db7c <FMG_ReadRecord+0x88>
   1db70:	697b      	ldr	r3, [r7, #20]
   1db72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1db74:	2b02      	cmp	r3, #2
   1db76:	d001      	beq.n	1db7c <FMG_ReadRecord+0x88>
   1db78:	230f      	movs	r3, #15
   1db7a:	e1e1      	b.n	1df40 <FMG_ReadRecord+0x44c>
   1db7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1db80:	4618      	mov	r0, r3
   1db82:	4bf8      	ldr	r3, [pc, #992]	; (1df64 <FMG_ReadRecord+0x470>)
   1db84:	447b      	add	r3, pc
   1db86:	4619      	mov	r1, r3
   1db88:	f7eb e84a 	blx	8c20 <_init+0xc0>
   1db8c:	697b      	ldr	r3, [r7, #20]
   1db8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1db90:	4bf5      	ldr	r3, [pc, #980]	; (1df68 <FMG_ReadRecord+0x474>)
   1db92:	58e3      	ldr	r3, [r4, r3]
   1db94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1db98:	f107 0264 	add.w	r2, r7, #100	; 0x64
   1db9c:	4610      	mov	r0, r2
   1db9e:	4619      	mov	r1, r3
   1dba0:	f7eb e83e 	blx	8c20 <_init+0xc0>
   1dba4:	e001      	b.n	1dbaa <FMG_ReadRecord+0xb6>
   1dba6:	2311      	movs	r3, #17
   1dba8:	e1ca      	b.n	1df40 <FMG_ReadRecord+0x44c>
   1dbaa:	f107 0250 	add.w	r2, r7, #80	; 0x50
   1dbae:	f107 0364 	add.w	r3, r7, #100	; 0x64
   1dbb2:	4610      	mov	r0, r2
   1dbb4:	4619      	mov	r1, r3
   1dbb6:	f7fb ff6d 	bl	19a94 <ExtraireFileID>
   1dbba:	6438      	str	r0, [r7, #64]	; 0x40
   1dbbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dbbe:	2b00      	cmp	r3, #0
   1dbc0:	db33      	blt.n	1dc2a <FMG_ReadRecord+0x136>
   1dbc2:	4bea      	ldr	r3, [pc, #936]	; (1df6c <FMG_ReadRecord+0x478>)
   1dbc4:	58e3      	ldr	r3, [r4, r3]
   1dbc6:	461a      	mov	r2, r3
   1dbc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dbca:	212c      	movs	r1, #44	; 0x2c
   1dbcc:	fb01 f303 	mul.w	r3, r1, r3
   1dbd0:	18d3      	adds	r3, r2, r3
   1dbd2:	3328      	adds	r3, #40	; 0x28
   1dbd4:	681b      	ldr	r3, [r3, #0]
   1dbd6:	2b00      	cmp	r3, #0
   1dbd8:	d00d      	beq.n	1dbf6 <FMG_ReadRecord+0x102>
   1dbda:	4be4      	ldr	r3, [pc, #912]	; (1df6c <FMG_ReadRecord+0x478>)
   1dbdc:	58e3      	ldr	r3, [r4, r3]
   1dbde:	461a      	mov	r2, r3
   1dbe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dbe2:	212c      	movs	r1, #44	; 0x2c
   1dbe4:	fb01 f303 	mul.w	r3, r1, r3
   1dbe8:	18d3      	adds	r3, r2, r3
   1dbea:	3328      	adds	r3, #40	; 0x28
   1dbec:	681b      	ldr	r3, [r3, #0]
   1dbee:	2b01      	cmp	r3, #1
   1dbf0:	d001      	beq.n	1dbf6 <FMG_ReadRecord+0x102>
   1dbf2:	230d      	movs	r3, #13
   1dbf4:	e1a4      	b.n	1df40 <FMG_ReadRecord+0x44c>
   1dbf6:	4bdd      	ldr	r3, [pc, #884]	; (1df6c <FMG_ReadRecord+0x478>)
   1dbf8:	58e3      	ldr	r3, [r4, r3]
   1dbfa:	461a      	mov	r2, r3
   1dbfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dbfe:	212c      	movs	r1, #44	; 0x2c
   1dc00:	fb01 f303 	mul.w	r3, r1, r3
   1dc04:	18d3      	adds	r3, r2, r3
   1dc06:	332c      	adds	r3, #44	; 0x2c
   1dc08:	681b      	ldr	r3, [r3, #0]
   1dc0a:	2b00      	cmp	r3, #0
   1dc0c:	d00f      	beq.n	1dc2e <FMG_ReadRecord+0x13a>
   1dc0e:	4bd7      	ldr	r3, [pc, #860]	; (1df6c <FMG_ReadRecord+0x478>)
   1dc10:	58e3      	ldr	r3, [r4, r3]
   1dc12:	461a      	mov	r2, r3
   1dc14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dc16:	212c      	movs	r1, #44	; 0x2c
   1dc18:	fb01 f303 	mul.w	r3, r1, r3
   1dc1c:	18d3      	adds	r3, r2, r3
   1dc1e:	332c      	adds	r3, #44	; 0x2c
   1dc20:	681b      	ldr	r3, [r3, #0]
   1dc22:	2b01      	cmp	r3, #1
   1dc24:	d003      	beq.n	1dc2e <FMG_ReadRecord+0x13a>
   1dc26:	230e      	movs	r3, #14
   1dc28:	e18a      	b.n	1df40 <FMG_ReadRecord+0x44c>
   1dc2a:	230b      	movs	r3, #11
   1dc2c:	e188      	b.n	1df40 <FMG_ReadRecord+0x44c>
   1dc2e:	68bb      	ldr	r3, [r7, #8]
   1dc30:	2b00      	cmp	r3, #0
   1dc32:	d007      	beq.n	1dc44 <FMG_ReadRecord+0x150>
   1dc34:	68bb      	ldr	r3, [r7, #8]
   1dc36:	2b01      	cmp	r3, #1
   1dc38:	d004      	beq.n	1dc44 <FMG_ReadRecord+0x150>
   1dc3a:	68bb      	ldr	r3, [r7, #8]
   1dc3c:	2b02      	cmp	r3, #2
   1dc3e:	d001      	beq.n	1dc44 <FMG_ReadRecord+0x150>
   1dc40:	2310      	movs	r3, #16
   1dc42:	e17d      	b.n	1df40 <FMG_ReadRecord+0x44c>
   1dc44:	f107 0178 	add.w	r1, r7, #120	; 0x78
   1dc48:	f107 0250 	add.w	r2, r7, #80	; 0x50
   1dc4c:	f107 0364 	add.w	r3, r7, #100	; 0x64
   1dc50:	4608      	mov	r0, r1
   1dc52:	49c7      	ldr	r1, [pc, #796]	; (1df70 <FMG_ReadRecord+0x47c>)
   1dc54:	4479      	add	r1, pc
   1dc56:	f7eb e82e 	blx	8cb4 <_init+0x154>
   1dc5a:	f107 0378 	add.w	r3, r7, #120	; 0x78
   1dc5e:	4618      	mov	r0, r3
   1dc60:	f002 fdce 	bl	20800 <FS_exist>
   1dc64:	6478      	str	r0, [r7, #68]	; 0x44
   1dc66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1dc68:	2b02      	cmp	r3, #2
   1dc6a:	d001      	beq.n	1dc70 <FMG_ReadRecord+0x17c>
   1dc6c:	230b      	movs	r3, #11
   1dc6e:	e167      	b.n	1df40 <FMG_ReadRecord+0x44c>
   1dc70:	4bbe      	ldr	r3, [pc, #760]	; (1df6c <FMG_ReadRecord+0x478>)
   1dc72:	58e3      	ldr	r3, [r4, r3]
   1dc74:	461a      	mov	r2, r3
   1dc76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dc78:	212c      	movs	r1, #44	; 0x2c
   1dc7a:	fb01 f303 	mul.w	r3, r1, r3
   1dc7e:	18d3      	adds	r3, r2, r3
   1dc80:	332c      	adds	r3, #44	; 0x2c
   1dc82:	681b      	ldr	r3, [r3, #0]
   1dc84:	2b01      	cmp	r3, #1
   1dc86:	d10c      	bne.n	1dca2 <FMG_ReadRecord+0x1ae>
   1dc88:	f107 0250 	add.w	r2, r7, #80	; 0x50
   1dc8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
   1dc90:	4610      	mov	r0, r2
   1dc92:	4619      	mov	r1, r3
   1dc94:	f7ff fa62 	bl	1d15c <FMG_CheckFileCoherence>
   1dc98:	4603      	mov	r3, r0
   1dc9a:	2b0a      	cmp	r3, #10
   1dc9c:	d001      	beq.n	1dca2 <FMG_ReadRecord+0x1ae>
   1dc9e:	231c      	movs	r3, #28
   1dca0:	e14e      	b.n	1df40 <FMG_ReadRecord+0x44c>
   1dca2:	f107 0378 	add.w	r3, r7, #120	; 0x78
   1dca6:	4618      	mov	r0, r3
   1dca8:	4bb2      	ldr	r3, [pc, #712]	; (1df74 <FMG_ReadRecord+0x480>)
   1dcaa:	447b      	add	r3, pc
   1dcac:	4619      	mov	r1, r3
   1dcae:	f002 fe29 	bl	20904 <FS_open>
   1dcb2:	63f8      	str	r0, [r7, #60]	; 0x3c
   1dcb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1dcb6:	2b00      	cmp	r3, #0
   1dcb8:	d102      	bne.n	1dcc0 <FMG_ReadRecord+0x1cc>
   1dcba:	2313      	movs	r3, #19
   1dcbc:	62bb      	str	r3, [r7, #40]	; 0x28
   1dcbe:	e13e      	b.n	1df3e <FMG_ReadRecord+0x44a>
   1dcc0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1dcc2:	f002 fdc9 	bl	20858 <FS_length>
   1dcc6:	64b8      	str	r0, [r7, #72]	; 0x48
   1dcc8:	4ba8      	ldr	r3, [pc, #672]	; (1df6c <FMG_ReadRecord+0x478>)
   1dcca:	58e3      	ldr	r3, [r4, r3]
   1dccc:	461a      	mov	r2, r3
   1dcce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dcd0:	212c      	movs	r1, #44	; 0x2c
   1dcd2:	fb01 f303 	mul.w	r3, r1, r3
   1dcd6:	18d3      	adds	r3, r2, r3
   1dcd8:	332c      	adds	r3, #44	; 0x2c
   1dcda:	681b      	ldr	r3, [r3, #0]
   1dcdc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   1dcde:	4619      	mov	r1, r3
   1dce0:	f7fe fdf4 	bl	1c8cc <IsFileEmpty>
   1dce4:	4603      	mov	r3, r0
   1dce6:	2b00      	cmp	r3, #0
   1dce8:	d006      	beq.n	1dcf8 <FMG_ReadRecord+0x204>
   1dcea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1dcec:	f002 fd2e 	bl	2074c <FS_close>
   1dcf0:	2300      	movs	r3, #0
   1dcf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   1dcf4:	2319      	movs	r3, #25
   1dcf6:	e123      	b.n	1df40 <FMG_ReadRecord+0x44c>
   1dcf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1dcfa:	4618      	mov	r0, r3
   1dcfc:	f002 ff8e 	bl	20c1c <PageAlloc>
   1dd00:	63b8      	str	r0, [r7, #56]	; 0x38
   1dd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1dd04:	2b00      	cmp	r3, #0
   1dd06:	f000 8112 	beq.w	1df2e <FMG_ReadRecord+0x43a>
   1dd0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1dd0c:	2100      	movs	r1, #0
   1dd0e:	2200      	movs	r2, #0
   1dd10:	f002 fe78 	bl	20a04 <FS_seek>
   1dd14:	6478      	str	r0, [r7, #68]	; 0x44
   1dd16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1dd18:	2b02      	cmp	r3, #2
   1dd1a:	f040 8108 	bne.w	1df2e <FMG_ReadRecord+0x43a>
   1dd1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1dd20:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1dd22:	2201      	movs	r2, #1
   1dd24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1dd26:	f002 fe17 	bl	20958 <FS_read>
   1dd2a:	64f8      	str	r0, [r7, #76]	; 0x4c
   1dd2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1dd2e:	2b01      	cmp	r3, #1
   1dd30:	f040 80fd 	bne.w	1df2e <FMG_ReadRecord+0x43a>
   1dd34:	4b8d      	ldr	r3, [pc, #564]	; (1df6c <FMG_ReadRecord+0x478>)
   1dd36:	58e3      	ldr	r3, [r4, r3]
   1dd38:	461a      	mov	r2, r3
   1dd3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dd3c:	212c      	movs	r1, #44	; 0x2c
   1dd3e:	fb01 f303 	mul.w	r3, r1, r3
   1dd42:	18d3      	adds	r3, r2, r3
   1dd44:	3328      	adds	r3, #40	; 0x28
   1dd46:	681b      	ldr	r3, [r3, #0]
   1dd48:	2b01      	cmp	r3, #1
   1dd4a:	f040 80b6 	bne.w	1deba <FMG_ReadRecord+0x3c6>
   1dd4e:	4b87      	ldr	r3, [pc, #540]	; (1df6c <FMG_ReadRecord+0x478>)
   1dd50:	58e3      	ldr	r3, [r4, r3]
   1dd52:	461a      	mov	r2, r3
   1dd54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dd56:	212c      	movs	r1, #44	; 0x2c
   1dd58:	fb01 f303 	mul.w	r3, r1, r3
   1dd5c:	18d3      	adds	r3, r2, r3
   1dd5e:	332c      	adds	r3, #44	; 0x2c
   1dd60:	681b      	ldr	r3, [r3, #0]
   1dd62:	2b01      	cmp	r3, #1
   1dd64:	d103      	bne.n	1dd6e <FMG_ReadRecord+0x27a>
   1dd66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1dd68:	3b10      	subs	r3, #16
   1dd6a:	623b      	str	r3, [r7, #32]
   1dd6c:	e001      	b.n	1dd72 <FMG_ReadRecord+0x27e>
   1dd6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1dd70:	623b      	str	r3, [r7, #32]
   1dd72:	68bb      	ldr	r3, [r7, #8]
   1dd74:	2b02      	cmp	r3, #2
   1dd76:	d12f      	bne.n	1ddd8 <FMG_ReadRecord+0x2e4>
   1dd78:	2300      	movs	r3, #0
   1dd7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1dd7c:	2300      	movs	r3, #0
   1dd7e:	633b      	str	r3, [r7, #48]	; 0x30
   1dd80:	e012      	b.n	1dda8 <FMG_ReadRecord+0x2b4>
   1dd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1dd84:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1dd86:	18d3      	adds	r3, r2, r3
   1dd88:	f107 021c 	add.w	r2, r7, #28
   1dd8c:	4610      	mov	r0, r2
   1dd8e:	4619      	mov	r1, r3
   1dd90:	2204      	movs	r2, #4
   1dd92:	f7ea ef72 	blx	8c78 <_init+0x118>
   1dd96:	69fb      	ldr	r3, [r7, #28]
   1dd98:	461a      	mov	r2, r3
   1dd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1dd9c:	18d3      	adds	r3, r2, r3
   1dd9e:	3304      	adds	r3, #4
   1dda0:	62fb      	str	r3, [r7, #44]	; 0x2c
   1dda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1dda4:	3301      	adds	r3, #1
   1dda6:	633b      	str	r3, [r7, #48]	; 0x30
   1dda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ddaa:	2b00      	cmp	r3, #0
   1ddac:	db03      	blt.n	1ddb6 <FMG_ReadRecord+0x2c2>
   1ddae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ddb0:	6a3b      	ldr	r3, [r7, #32]
   1ddb2:	429a      	cmp	r2, r3
   1ddb4:	dbe5      	blt.n	1dd82 <FMG_ReadRecord+0x28e>
   1ddb6:	69fa      	ldr	r2, [r7, #28]
   1ddb8:	68fb      	ldr	r3, [r7, #12]
   1ddba:	601a      	str	r2, [r3, #0]
   1ddbc:	69fb      	ldr	r3, [r7, #28]
   1ddbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ddc0:	1ad3      	subs	r3, r2, r3
   1ddc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ddc4:	18d2      	adds	r2, r2, r3
   1ddc6:	69fb      	ldr	r3, [r7, #28]
   1ddc8:	6938      	ldr	r0, [r7, #16]
   1ddca:	4611      	mov	r1, r2
   1ddcc:	461a      	mov	r2, r3
   1ddce:	f7ea ef54 	blx	8c78 <_init+0x118>
   1ddd2:	230a      	movs	r3, #10
   1ddd4:	62bb      	str	r3, [r7, #40]	; 0x28
   1ddd6:	e0aa      	b.n	1df2e <FMG_ReadRecord+0x43a>
   1ddd8:	68bb      	ldr	r3, [r7, #8]
   1ddda:	2b00      	cmp	r3, #0
   1dddc:	d11e      	bne.n	1de1c <FMG_ReadRecord+0x328>
   1ddde:	2300      	movs	r3, #0
   1dde0:	633b      	str	r3, [r7, #48]	; 0x30
   1dde2:	6a3b      	ldr	r3, [r7, #32]
   1dde4:	2b04      	cmp	r3, #4
   1dde6:	f240 80a2 	bls.w	1df2e <FMG_ReadRecord+0x43a>
   1ddea:	68f8      	ldr	r0, [r7, #12]
   1ddec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1ddee:	2204      	movs	r2, #4
   1ddf0:	f7ea ef42 	blx	8c78 <_init+0x118>
   1ddf4:	68fb      	ldr	r3, [r7, #12]
   1ddf6:	681b      	ldr	r3, [r3, #0]
   1ddf8:	3304      	adds	r3, #4
   1ddfa:	461a      	mov	r2, r3
   1ddfc:	6a3b      	ldr	r3, [r7, #32]
   1ddfe:	429a      	cmp	r2, r3
   1de00:	f300 8095 	bgt.w	1df2e <FMG_ReadRecord+0x43a>
   1de04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1de06:	1d1a      	adds	r2, r3, #4
   1de08:	68fb      	ldr	r3, [r7, #12]
   1de0a:	681b      	ldr	r3, [r3, #0]
   1de0c:	6938      	ldr	r0, [r7, #16]
   1de0e:	4611      	mov	r1, r2
   1de10:	461a      	mov	r2, r3
   1de12:	f7ea ef32 	blx	8c78 <_init+0x118>
   1de16:	230a      	movs	r3, #10
   1de18:	62bb      	str	r3, [r7, #40]	; 0x28
   1de1a:	e088      	b.n	1df2e <FMG_ReadRecord+0x43a>
   1de1c:	68bb      	ldr	r3, [r7, #8]
   1de1e:	2b01      	cmp	r3, #1
   1de20:	f040 8085 	bne.w	1df2e <FMG_ReadRecord+0x43a>
   1de24:	687b      	ldr	r3, [r7, #4]
   1de26:	633b      	str	r3, [r7, #48]	; 0x30
   1de28:	2300      	movs	r3, #0
   1de2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1de2c:	2300      	movs	r3, #0
   1de2e:	637b      	str	r3, [r7, #52]	; 0x34
   1de30:	e01f      	b.n	1de72 <FMG_ReadRecord+0x37e>
   1de32:	2300      	movs	r3, #0
   1de34:	61fb      	str	r3, [r7, #28]
   1de36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1de38:	2b00      	cmp	r3, #0
   1de3a:	db14      	blt.n	1de66 <FMG_ReadRecord+0x372>
   1de3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1de3e:	6a3b      	ldr	r3, [r7, #32]
   1de40:	429a      	cmp	r2, r3
   1de42:	da10      	bge.n	1de66 <FMG_ReadRecord+0x372>
   1de44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1de46:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1de48:	18d3      	adds	r3, r2, r3
   1de4a:	f107 021c 	add.w	r2, r7, #28
   1de4e:	4610      	mov	r0, r2
   1de50:	4619      	mov	r1, r3
   1de52:	2204      	movs	r2, #4
   1de54:	f7ea ef10 	blx	8c78 <_init+0x118>
   1de58:	69fb      	ldr	r3, [r7, #28]
   1de5a:	461a      	mov	r2, r3
   1de5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1de5e:	18d3      	adds	r3, r2, r3
   1de60:	3304      	adds	r3, #4
   1de62:	62fb      	str	r3, [r7, #44]	; 0x2c
   1de64:	e002      	b.n	1de6c <FMG_ReadRecord+0x378>
   1de66:	f04f 33ff 	mov.w	r3, #4294967295
   1de6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1de6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1de6e:	3301      	adds	r3, #1
   1de70:	637b      	str	r3, [r7, #52]	; 0x34
   1de72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1de74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1de76:	429a      	cmp	r2, r3
   1de78:	da02      	bge.n	1de80 <FMG_ReadRecord+0x38c>
   1de7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1de7c:	2b00      	cmp	r3, #0
   1de7e:	dad8      	bge.n	1de32 <FMG_ReadRecord+0x33e>
   1de80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1de82:	2b00      	cmp	r3, #0
   1de84:	db53      	blt.n	1df2e <FMG_ReadRecord+0x43a>
   1de86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1de88:	6a3b      	ldr	r3, [r7, #32]
   1de8a:	429a      	cmp	r2, r3
   1de8c:	da4f      	bge.n	1df2e <FMG_ReadRecord+0x43a>
   1de8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1de90:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1de92:	18d3      	adds	r3, r2, r3
   1de94:	68f8      	ldr	r0, [r7, #12]
   1de96:	4619      	mov	r1, r3
   1de98:	2204      	movs	r2, #4
   1de9a:	f7ea eeee 	blx	8c78 <_init+0x118>
   1de9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1dea0:	3304      	adds	r3, #4
   1dea2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1dea4:	18d2      	adds	r2, r2, r3
   1dea6:	68fb      	ldr	r3, [r7, #12]
   1dea8:	681b      	ldr	r3, [r3, #0]
   1deaa:	6938      	ldr	r0, [r7, #16]
   1deac:	4611      	mov	r1, r2
   1deae:	461a      	mov	r2, r3
   1deb0:	f7ea eee2 	blx	8c78 <_init+0x118>
   1deb4:	230a      	movs	r3, #10
   1deb6:	62bb      	str	r3, [r7, #40]	; 0x28
   1deb8:	e039      	b.n	1df2e <FMG_ReadRecord+0x43a>
   1deba:	4b2c      	ldr	r3, [pc, #176]	; (1df6c <FMG_ReadRecord+0x478>)
   1debc:	58e3      	ldr	r3, [r4, r3]
   1debe:	461a      	mov	r2, r3
   1dec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dec2:	212c      	movs	r1, #44	; 0x2c
   1dec4:	fb01 f303 	mul.w	r3, r1, r3
   1dec8:	18d3      	adds	r3, r2, r3
   1deca:	332c      	adds	r3, #44	; 0x2c
   1decc:	681b      	ldr	r3, [r3, #0]
   1dece:	2b01      	cmp	r3, #1
   1ded0:	d103      	bne.n	1deda <FMG_ReadRecord+0x3e6>
   1ded2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1ded4:	3b10      	subs	r3, #16
   1ded6:	623b      	str	r3, [r7, #32]
   1ded8:	e001      	b.n	1dede <FMG_ReadRecord+0x3ea>
   1deda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1dedc:	623b      	str	r3, [r7, #32]
   1dede:	68bb      	ldr	r3, [r7, #8]
   1dee0:	2b02      	cmp	r3, #2
   1dee2:	d105      	bne.n	1def0 <FMG_ReadRecord+0x3fc>
   1dee4:	68fb      	ldr	r3, [r7, #12]
   1dee6:	681b      	ldr	r3, [r3, #0]
   1dee8:	6a3a      	ldr	r2, [r7, #32]
   1deea:	1ad3      	subs	r3, r2, r3
   1deec:	627b      	str	r3, [r7, #36]	; 0x24
   1deee:	e00b      	b.n	1df08 <FMG_ReadRecord+0x414>
   1def0:	68bb      	ldr	r3, [r7, #8]
   1def2:	2b00      	cmp	r3, #0
   1def4:	d102      	bne.n	1defc <FMG_ReadRecord+0x408>
   1def6:	2300      	movs	r3, #0
   1def8:	627b      	str	r3, [r7, #36]	; 0x24
   1defa:	e005      	b.n	1df08 <FMG_ReadRecord+0x414>
   1defc:	68fb      	ldr	r3, [r7, #12]
   1defe:	681b      	ldr	r3, [r3, #0]
   1df00:	687a      	ldr	r2, [r7, #4]
   1df02:	fb02 f303 	mul.w	r3, r2, r3
   1df06:	627b      	str	r3, [r7, #36]	; 0x24
   1df08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1df0a:	2b00      	cmp	r3, #0
   1df0c:	db0f      	blt.n	1df2e <FMG_ReadRecord+0x43a>
   1df0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1df10:	6a3b      	ldr	r3, [r7, #32]
   1df12:	429a      	cmp	r2, r3
   1df14:	da0b      	bge.n	1df2e <FMG_ReadRecord+0x43a>
   1df16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1df18:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1df1a:	18d2      	adds	r2, r2, r3
   1df1c:	68fb      	ldr	r3, [r7, #12]
   1df1e:	681b      	ldr	r3, [r3, #0]
   1df20:	6938      	ldr	r0, [r7, #16]
   1df22:	4611      	mov	r1, r2
   1df24:	461a      	mov	r2, r3
   1df26:	f7ea eea8 	blx	8c78 <_init+0x118>
   1df2a:	230a      	movs	r3, #10
   1df2c:	62bb      	str	r3, [r7, #40]	; 0x28
   1df2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1df30:	f002 fc0c 	bl	2074c <FS_close>
   1df34:	2300      	movs	r3, #0
   1df36:	63fb      	str	r3, [r7, #60]	; 0x3c
   1df38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1df3a:	f002 fe99 	bl	20c70 <PageFree>
   1df3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1df40:	4618      	mov	r0, r3
   1df42:	4b07      	ldr	r3, [pc, #28]	; (1df60 <FMG_ReadRecord+0x46c>)
   1df44:	58e3      	ldr	r3, [r4, r3]
   1df46:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   1df4a:	681b      	ldr	r3, [r3, #0]
   1df4c:	429a      	cmp	r2, r3
   1df4e:	d001      	beq.n	1df54 <FMG_ReadRecord+0x460>
   1df50:	f7eb f828 	bl	8fa4 <__stack_chk_fail>
   1df54:	f107 07a4 	add.w	r7, r7, #164	; 0xa4
   1df58:	46bd      	mov	sp, r7
   1df5a:	bd90      	pop	{r4, r7, pc}
   1df5c:	00011608 	.word	0x00011608
   1df60:	000000ac 	.word	0x000000ac
   1df64:	00012448 	.word	0x00012448
   1df68:	000000a8 	.word	0x000000a8
   1df6c:	000000c0 	.word	0x000000c0
   1df70:	00008500 	.word	0x00008500
   1df74:	000084c2 	.word	0x000084c2

0001df78 <FMG_DeleteRecord>:
   1df78:	b590      	push	{r4, r7, lr}
   1df7a:	b0a1      	sub	sp, #132	; 0x84
   1df7c:	af02      	add	r7, sp, #8
   1df7e:	60f8      	str	r0, [r7, #12]
   1df80:	60b9      	str	r1, [r7, #8]
   1df82:	607a      	str	r2, [r7, #4]
   1df84:	603b      	str	r3, [r7, #0]
   1df86:	4cba      	ldr	r4, [pc, #744]	; (1e270 <FMG_DeleteRecord+0x2f8>)
   1df88:	447c      	add	r4, pc
   1df8a:	4bba      	ldr	r3, [pc, #744]	; (1e274 <FMG_DeleteRecord+0x2fc>)
   1df8c:	58e3      	ldr	r3, [r4, r3]
   1df8e:	681b      	ldr	r3, [r3, #0]
   1df90:	677b      	str	r3, [r7, #116]	; 0x74
   1df92:	231a      	movs	r3, #26
   1df94:	617b      	str	r3, [r7, #20]
   1df96:	2300      	movs	r3, #0
   1df98:	61bb      	str	r3, [r7, #24]
   1df9a:	2300      	movs	r3, #0
   1df9c:	61fb      	str	r3, [r7, #28]
   1df9e:	68fb      	ldr	r3, [r7, #12]
   1dfa0:	681b      	ldr	r3, [r3, #0]
   1dfa2:	2b00      	cmp	r3, #0
   1dfa4:	d110      	bne.n	1dfc8 <FMG_DeleteRecord+0x50>
   1dfa6:	68fb      	ldr	r3, [r7, #12]
   1dfa8:	3304      	adds	r3, #4
   1dfaa:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1dfae:	4610      	mov	r0, r2
   1dfb0:	4619      	mov	r1, r3
   1dfb2:	f7ea ee36 	blx	8c20 <_init+0xc0>
   1dfb6:	68fb      	ldr	r3, [r7, #12]
   1dfb8:	3315      	adds	r3, #21
   1dfba:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1dfbe:	4610      	mov	r0, r2
   1dfc0:	4619      	mov	r1, r3
   1dfc2:	f7ea ee2e 	blx	8c20 <_init+0xc0>
   1dfc6:	e028      	b.n	1e01a <FMG_DeleteRecord+0xa2>
   1dfc8:	68fb      	ldr	r3, [r7, #12]
   1dfca:	681b      	ldr	r3, [r3, #0]
   1dfcc:	2b01      	cmp	r3, #1
   1dfce:	d122      	bne.n	1e016 <FMG_DeleteRecord+0x9e>
   1dfd0:	68fb      	ldr	r3, [r7, #12]
   1dfd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1dfd4:	2b00      	cmp	r3, #0
   1dfd6:	d009      	beq.n	1dfec <FMG_DeleteRecord+0x74>
   1dfd8:	68fb      	ldr	r3, [r7, #12]
   1dfda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1dfdc:	2b01      	cmp	r3, #1
   1dfde:	d005      	beq.n	1dfec <FMG_DeleteRecord+0x74>
   1dfe0:	68fb      	ldr	r3, [r7, #12]
   1dfe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1dfe4:	2b02      	cmp	r3, #2
   1dfe6:	d001      	beq.n	1dfec <FMG_DeleteRecord+0x74>
   1dfe8:	230f      	movs	r3, #15
   1dfea:	e134      	b.n	1e256 <FMG_DeleteRecord+0x2de>
   1dfec:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1dff0:	4618      	mov	r0, r3
   1dff2:	4ba1      	ldr	r3, [pc, #644]	; (1e278 <FMG_DeleteRecord+0x300>)
   1dff4:	447b      	add	r3, pc
   1dff6:	4619      	mov	r1, r3
   1dff8:	f7ea ee12 	blx	8c20 <_init+0xc0>
   1dffc:	68fb      	ldr	r3, [r7, #12]
   1dffe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1e000:	4b9e      	ldr	r3, [pc, #632]	; (1e27c <FMG_DeleteRecord+0x304>)
   1e002:	58e3      	ldr	r3, [r4, r3]
   1e004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1e008:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1e00c:	4610      	mov	r0, r2
   1e00e:	4619      	mov	r1, r3
   1e010:	f7ea ee06 	blx	8c20 <_init+0xc0>
   1e014:	e001      	b.n	1e01a <FMG_DeleteRecord+0xa2>
   1e016:	2311      	movs	r3, #17
   1e018:	e11d      	b.n	1e256 <FMG_DeleteRecord+0x2de>
   1e01a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1e01e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1e022:	4610      	mov	r0, r2
   1e024:	4619      	mov	r1, r3
   1e026:	f7fb fd35 	bl	19a94 <ExtraireFileID>
   1e02a:	6238      	str	r0, [r7, #32]
   1e02c:	6a3b      	ldr	r3, [r7, #32]
   1e02e:	2b00      	cmp	r3, #0
   1e030:	db33      	blt.n	1e09a <FMG_DeleteRecord+0x122>
   1e032:	4b93      	ldr	r3, [pc, #588]	; (1e280 <FMG_DeleteRecord+0x308>)
   1e034:	58e3      	ldr	r3, [r4, r3]
   1e036:	461a      	mov	r2, r3
   1e038:	6a3b      	ldr	r3, [r7, #32]
   1e03a:	212c      	movs	r1, #44	; 0x2c
   1e03c:	fb01 f303 	mul.w	r3, r1, r3
   1e040:	18d3      	adds	r3, r2, r3
   1e042:	3328      	adds	r3, #40	; 0x28
   1e044:	681b      	ldr	r3, [r3, #0]
   1e046:	2b00      	cmp	r3, #0
   1e048:	d00d      	beq.n	1e066 <FMG_DeleteRecord+0xee>
   1e04a:	4b8d      	ldr	r3, [pc, #564]	; (1e280 <FMG_DeleteRecord+0x308>)
   1e04c:	58e3      	ldr	r3, [r4, r3]
   1e04e:	461a      	mov	r2, r3
   1e050:	6a3b      	ldr	r3, [r7, #32]
   1e052:	212c      	movs	r1, #44	; 0x2c
   1e054:	fb01 f303 	mul.w	r3, r1, r3
   1e058:	18d3      	adds	r3, r2, r3
   1e05a:	3328      	adds	r3, #40	; 0x28
   1e05c:	681b      	ldr	r3, [r3, #0]
   1e05e:	2b01      	cmp	r3, #1
   1e060:	d001      	beq.n	1e066 <FMG_DeleteRecord+0xee>
   1e062:	230d      	movs	r3, #13
   1e064:	e0f7      	b.n	1e256 <FMG_DeleteRecord+0x2de>
   1e066:	4b86      	ldr	r3, [pc, #536]	; (1e280 <FMG_DeleteRecord+0x308>)
   1e068:	58e3      	ldr	r3, [r4, r3]
   1e06a:	461a      	mov	r2, r3
   1e06c:	6a3b      	ldr	r3, [r7, #32]
   1e06e:	212c      	movs	r1, #44	; 0x2c
   1e070:	fb01 f303 	mul.w	r3, r1, r3
   1e074:	18d3      	adds	r3, r2, r3
   1e076:	332c      	adds	r3, #44	; 0x2c
   1e078:	681b      	ldr	r3, [r3, #0]
   1e07a:	2b00      	cmp	r3, #0
   1e07c:	d00f      	beq.n	1e09e <FMG_DeleteRecord+0x126>
   1e07e:	4b80      	ldr	r3, [pc, #512]	; (1e280 <FMG_DeleteRecord+0x308>)
   1e080:	58e3      	ldr	r3, [r4, r3]
   1e082:	461a      	mov	r2, r3
   1e084:	6a3b      	ldr	r3, [r7, #32]
   1e086:	212c      	movs	r1, #44	; 0x2c
   1e088:	fb01 f303 	mul.w	r3, r1, r3
   1e08c:	18d3      	adds	r3, r2, r3
   1e08e:	332c      	adds	r3, #44	; 0x2c
   1e090:	681b      	ldr	r3, [r3, #0]
   1e092:	2b01      	cmp	r3, #1
   1e094:	d003      	beq.n	1e09e <FMG_DeleteRecord+0x126>
   1e096:	230e      	movs	r3, #14
   1e098:	e0dd      	b.n	1e256 <FMG_DeleteRecord+0x2de>
   1e09a:	230b      	movs	r3, #11
   1e09c:	e0db      	b.n	1e256 <FMG_DeleteRecord+0x2de>
   1e09e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   1e0a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1e0a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1e0aa:	4608      	mov	r0, r1
   1e0ac:	4975      	ldr	r1, [pc, #468]	; (1e284 <FMG_DeleteRecord+0x30c>)
   1e0ae:	4479      	add	r1, pc
   1e0b0:	f7ea ee00 	blx	8cb4 <_init+0x154>
   1e0b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1e0b8:	4618      	mov	r0, r3
   1e0ba:	f002 fba1 	bl	20800 <FS_exist>
   1e0be:	6278      	str	r0, [r7, #36]	; 0x24
   1e0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e0c2:	2b02      	cmp	r3, #2
   1e0c4:	d001      	beq.n	1e0ca <FMG_DeleteRecord+0x152>
   1e0c6:	230b      	movs	r3, #11
   1e0c8:	e0c5      	b.n	1e256 <FMG_DeleteRecord+0x2de>
   1e0ca:	4b6d      	ldr	r3, [pc, #436]	; (1e280 <FMG_DeleteRecord+0x308>)
   1e0cc:	58e3      	ldr	r3, [r4, r3]
   1e0ce:	461a      	mov	r2, r3
   1e0d0:	6a3b      	ldr	r3, [r7, #32]
   1e0d2:	212c      	movs	r1, #44	; 0x2c
   1e0d4:	fb01 f303 	mul.w	r3, r1, r3
   1e0d8:	18d3      	adds	r3, r2, r3
   1e0da:	332c      	adds	r3, #44	; 0x2c
   1e0dc:	681b      	ldr	r3, [r3, #0]
   1e0de:	2b01      	cmp	r3, #1
   1e0e0:	d10c      	bne.n	1e0fc <FMG_DeleteRecord+0x184>
   1e0e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1e0e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1e0ea:	4610      	mov	r0, r2
   1e0ec:	4619      	mov	r1, r3
   1e0ee:	f7ff f835 	bl	1d15c <FMG_CheckFileCoherence>
   1e0f2:	4603      	mov	r3, r0
   1e0f4:	2b0a      	cmp	r3, #10
   1e0f6:	d001      	beq.n	1e0fc <FMG_DeleteRecord+0x184>
   1e0f8:	231c      	movs	r3, #28
   1e0fa:	e0ac      	b.n	1e256 <FMG_DeleteRecord+0x2de>
   1e0fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1e100:	4618      	mov	r0, r3
   1e102:	4b61      	ldr	r3, [pc, #388]	; (1e288 <FMG_DeleteRecord+0x310>)
   1e104:	447b      	add	r3, pc
   1e106:	4619      	mov	r1, r3
   1e108:	f002 fbfc 	bl	20904 <FS_open>
   1e10c:	61f8      	str	r0, [r7, #28]
   1e10e:	69fb      	ldr	r3, [r7, #28]
   1e110:	2b00      	cmp	r3, #0
   1e112:	d102      	bne.n	1e11a <FMG_DeleteRecord+0x1a2>
   1e114:	2313      	movs	r3, #19
   1e116:	617b      	str	r3, [r7, #20]
   1e118:	e09c      	b.n	1e254 <FMG_DeleteRecord+0x2dc>
   1e11a:	69f8      	ldr	r0, [r7, #28]
   1e11c:	f002 fb9c 	bl	20858 <FS_length>
   1e120:	61b8      	str	r0, [r7, #24]
   1e122:	69f8      	ldr	r0, [r7, #28]
   1e124:	f002 fb12 	bl	2074c <FS_close>
   1e128:	2300      	movs	r3, #0
   1e12a:	61fb      	str	r3, [r7, #28]
   1e12c:	4b54      	ldr	r3, [pc, #336]	; (1e280 <FMG_DeleteRecord+0x308>)
   1e12e:	58e3      	ldr	r3, [r4, r3]
   1e130:	461a      	mov	r2, r3
   1e132:	6a3b      	ldr	r3, [r7, #32]
   1e134:	212c      	movs	r1, #44	; 0x2c
   1e136:	fb01 f303 	mul.w	r3, r1, r3
   1e13a:	18d3      	adds	r3, r2, r3
   1e13c:	332c      	adds	r3, #44	; 0x2c
   1e13e:	681b      	ldr	r3, [r3, #0]
   1e140:	69b8      	ldr	r0, [r7, #24]
   1e142:	4619      	mov	r1, r3
   1e144:	f7fe fbc2 	bl	1c8cc <IsFileEmpty>
   1e148:	4603      	mov	r3, r0
   1e14a:	2b00      	cmp	r3, #0
   1e14c:	d001      	beq.n	1e152 <FMG_DeleteRecord+0x1da>
   1e14e:	231a      	movs	r3, #26
   1e150:	e081      	b.n	1e256 <FMG_DeleteRecord+0x2de>
   1e152:	68bb      	ldr	r3, [r7, #8]
   1e154:	2b01      	cmp	r3, #1
   1e156:	d02a      	beq.n	1e1ae <FMG_DeleteRecord+0x236>
   1e158:	2b01      	cmp	r3, #1
   1e15a:	d302      	bcc.n	1e162 <FMG_DeleteRecord+0x1ea>
   1e15c:	2b02      	cmp	r3, #2
   1e15e:	d050      	beq.n	1e202 <FMG_DeleteRecord+0x28a>
   1e160:	e075      	b.n	1e24e <FMG_DeleteRecord+0x2d6>
   1e162:	4b47      	ldr	r3, [pc, #284]	; (1e280 <FMG_DeleteRecord+0x308>)
   1e164:	58e3      	ldr	r3, [r4, r3]
   1e166:	461a      	mov	r2, r3
   1e168:	6a3b      	ldr	r3, [r7, #32]
   1e16a:	212c      	movs	r1, #44	; 0x2c
   1e16c:	fb01 f303 	mul.w	r3, r1, r3
   1e170:	18d3      	adds	r3, r2, r3
   1e172:	332c      	adds	r3, #44	; 0x2c
   1e174:	681b      	ldr	r3, [r3, #0]
   1e176:	2b01      	cmp	r3, #1
   1e178:	d10c      	bne.n	1e194 <FMG_DeleteRecord+0x21c>
   1e17a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1e17e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1e182:	4610      	mov	r0, r2
   1e184:	4619      	mov	r1, r3
   1e186:	687a      	ldr	r2, [r7, #4]
   1e188:	6a3b      	ldr	r3, [r7, #32]
   1e18a:	f7fd fb0d 	bl	1b7a8 <DeleteRecordBeginWithCkecksum>
   1e18e:	4603      	mov	r3, r0
   1e190:	617b      	str	r3, [r7, #20]
   1e192:	e05f      	b.n	1e254 <FMG_DeleteRecord+0x2dc>
   1e194:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1e198:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1e19c:	4610      	mov	r0, r2
   1e19e:	4619      	mov	r1, r3
   1e1a0:	687a      	ldr	r2, [r7, #4]
   1e1a2:	6a3b      	ldr	r3, [r7, #32]
   1e1a4:	f7fd f9c6 	bl	1b534 <DeleteRecordBegin>
   1e1a8:	4603      	mov	r3, r0
   1e1aa:	617b      	str	r3, [r7, #20]
   1e1ac:	e052      	b.n	1e254 <FMG_DeleteRecord+0x2dc>
   1e1ae:	4b34      	ldr	r3, [pc, #208]	; (1e280 <FMG_DeleteRecord+0x308>)
   1e1b0:	58e3      	ldr	r3, [r4, r3]
   1e1b2:	461a      	mov	r2, r3
   1e1b4:	6a3b      	ldr	r3, [r7, #32]
   1e1b6:	212c      	movs	r1, #44	; 0x2c
   1e1b8:	fb01 f303 	mul.w	r3, r1, r3
   1e1bc:	18d3      	adds	r3, r2, r3
   1e1be:	332c      	adds	r3, #44	; 0x2c
   1e1c0:	681b      	ldr	r3, [r3, #0]
   1e1c2:	2b01      	cmp	r3, #1
   1e1c4:	d10e      	bne.n	1e1e4 <FMG_DeleteRecord+0x26c>
   1e1c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1e1ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1e1ce:	6a39      	ldr	r1, [r7, #32]
   1e1d0:	9100      	str	r1, [sp, #0]
   1e1d2:	4610      	mov	r0, r2
   1e1d4:	4619      	mov	r1, r3
   1e1d6:	687a      	ldr	r2, [r7, #4]
   1e1d8:	683b      	ldr	r3, [r7, #0]
   1e1da:	f7fd fe1d 	bl	1be18 <DeleteRecordMiddleWithCkecksum>
   1e1de:	4603      	mov	r3, r0
   1e1e0:	617b      	str	r3, [r7, #20]
   1e1e2:	e037      	b.n	1e254 <FMG_DeleteRecord+0x2dc>
   1e1e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1e1e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1e1ec:	6a39      	ldr	r1, [r7, #32]
   1e1ee:	9100      	str	r1, [sp, #0]
   1e1f0:	4610      	mov	r0, r2
   1e1f2:	4619      	mov	r1, r3
   1e1f4:	687a      	ldr	r2, [r7, #4]
   1e1f6:	683b      	ldr	r3, [r7, #0]
   1e1f8:	f7fd fc6e 	bl	1bad8 <DeleteRecordMiddle>
   1e1fc:	4603      	mov	r3, r0
   1e1fe:	617b      	str	r3, [r7, #20]
   1e200:	e028      	b.n	1e254 <FMG_DeleteRecord+0x2dc>
   1e202:	4b1f      	ldr	r3, [pc, #124]	; (1e280 <FMG_DeleteRecord+0x308>)
   1e204:	58e3      	ldr	r3, [r4, r3]
   1e206:	461a      	mov	r2, r3
   1e208:	6a3b      	ldr	r3, [r7, #32]
   1e20a:	212c      	movs	r1, #44	; 0x2c
   1e20c:	fb01 f303 	mul.w	r3, r1, r3
   1e210:	18d3      	adds	r3, r2, r3
   1e212:	332c      	adds	r3, #44	; 0x2c
   1e214:	681b      	ldr	r3, [r3, #0]
   1e216:	2b01      	cmp	r3, #1
   1e218:	d10c      	bne.n	1e234 <FMG_DeleteRecord+0x2bc>
   1e21a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1e21e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1e222:	4610      	mov	r0, r2
   1e224:	4619      	mov	r1, r3
   1e226:	687a      	ldr	r2, [r7, #4]
   1e228:	6a3b      	ldr	r3, [r7, #32]
   1e22a:	f7fe f9a9 	bl	1c580 <DeleteRecordEndWithCkecksum>
   1e22e:	4603      	mov	r3, r0
   1e230:	617b      	str	r3, [r7, #20]
   1e232:	e00f      	b.n	1e254 <FMG_DeleteRecord+0x2dc>
   1e234:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1e238:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1e23c:	4610      	mov	r0, r2
   1e23e:	4619      	mov	r1, r3
   1e240:	687a      	ldr	r2, [r7, #4]
   1e242:	6a3b      	ldr	r3, [r7, #32]
   1e244:	f7fd fffe 	bl	1c244 <DeleteRecordEnd>
   1e248:	4603      	mov	r3, r0
   1e24a:	617b      	str	r3, [r7, #20]
   1e24c:	e002      	b.n	1e254 <FMG_DeleteRecord+0x2dc>
   1e24e:	2310      	movs	r3, #16
   1e250:	617b      	str	r3, [r7, #20]
   1e252:	bf00      	nop
   1e254:	697b      	ldr	r3, [r7, #20]
   1e256:	4618      	mov	r0, r3
   1e258:	4b06      	ldr	r3, [pc, #24]	; (1e274 <FMG_DeleteRecord+0x2fc>)
   1e25a:	58e3      	ldr	r3, [r4, r3]
   1e25c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1e25e:	681b      	ldr	r3, [r3, #0]
   1e260:	429a      	cmp	r2, r3
   1e262:	d001      	beq.n	1e268 <FMG_DeleteRecord+0x2f0>
   1e264:	f7ea fe9e 	bl	8fa4 <__stack_chk_fail>
   1e268:	f107 077c 	add.w	r7, r7, #124	; 0x7c
   1e26c:	46bd      	mov	sp, r7
   1e26e:	bd90      	pop	{r4, r7, pc}
   1e270:	0001118c 	.word	0x0001118c
   1e274:	000000ac 	.word	0x000000ac
   1e278:	00011fd8 	.word	0x00011fd8
   1e27c:	000000a8 	.word	0x000000a8
   1e280:	000000c0 	.word	0x000000c0
   1e284:	000080a6 	.word	0x000080a6
   1e288:	00008064 	.word	0x00008064

0001e28c <md5_process>:
   1e28c:	b590      	push	{r4, r7, lr}
   1e28e:	b09d      	sub	sp, #116	; 0x74
   1e290:	af00      	add	r7, sp, #0
   1e292:	6078      	str	r0, [r7, #4]
   1e294:	6039      	str	r1, [r7, #0]
   1e296:	4c19      	ldr	r4, [pc, #100]	; (1e2fc <md5_process+0x70>)
   1e298:	447c      	add	r4, pc
   1e29a:	4b19      	ldr	r3, [pc, #100]	; (1e300 <md5_process+0x74>)
   1e29c:	58e3      	ldr	r3, [r4, r3]
   1e29e:	681b      	ldr	r3, [r3, #0]
   1e2a0:	66fb      	str	r3, [r7, #108]	; 0x6c
   1e2a2:	687b      	ldr	r3, [r7, #4]
   1e2a4:	689b      	ldr	r3, [r3, #8]
   1e2a6:	61bb      	str	r3, [r7, #24]
   1e2a8:	687b      	ldr	r3, [r7, #4]
   1e2aa:	68db      	ldr	r3, [r3, #12]
   1e2ac:	61fb      	str	r3, [r7, #28]
   1e2ae:	687b      	ldr	r3, [r7, #4]
   1e2b0:	691b      	ldr	r3, [r3, #16]
   1e2b2:	623b      	str	r3, [r7, #32]
   1e2b4:	687b      	ldr	r3, [r7, #4]
   1e2b6:	695b      	ldr	r3, [r3, #20]
   1e2b8:	627b      	str	r3, [r7, #36]	; 0x24
   1e2ba:	4b12      	ldr	r3, [pc, #72]	; (1e304 <md5_process+0x78>)
   1e2bc:	447b      	add	r3, pc
   1e2be:	781b      	ldrb	r3, [r3, #0]
   1e2c0:	2b00      	cmp	r3, #0
   1e2c2:	d012      	beq.n	1e2ea <md5_process+0x5e>
   1e2c4:	683b      	ldr	r3, [r7, #0]
   1e2c6:	f003 0303 	and.w	r3, r3, #3
   1e2ca:	2b00      	cmp	r3, #0
   1e2cc:	d102      	bne.n	1e2d4 <md5_process+0x48>
   1e2ce:	683b      	ldr	r3, [r7, #0]
   1e2d0:	60fb      	str	r3, [r7, #12]
   1e2d2:	e03c      	b.n	1e34e <md5_process+0xc2>
   1e2d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1e2d8:	4618      	mov	r0, r3
   1e2da:	6839      	ldr	r1, [r7, #0]
   1e2dc:	2240      	movs	r2, #64	; 0x40
   1e2de:	f7ea eccc 	blx	8c78 <_init+0x118>
   1e2e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1e2e6:	60fb      	str	r3, [r7, #12]
   1e2e8:	e031      	b.n	1e34e <md5_process+0xc2>
   1e2ea:	683b      	ldr	r3, [r7, #0]
   1e2ec:	613b      	str	r3, [r7, #16]
   1e2ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1e2f2:	60fb      	str	r3, [r7, #12]
   1e2f4:	2300      	movs	r3, #0
   1e2f6:	617b      	str	r3, [r7, #20]
   1e2f8:	e026      	b.n	1e348 <md5_process+0xbc>
   1e2fa:	bf00      	nop
   1e2fc:	00010e7c 	.word	0x00010e7c
   1e300:	000000ac 	.word	0x000000ac
   1e304:	00007f2c 	.word	0x00007f2c
   1e308:	693b      	ldr	r3, [r7, #16]
   1e30a:	781b      	ldrb	r3, [r3, #0]
   1e30c:	461a      	mov	r2, r3
   1e30e:	693b      	ldr	r3, [r7, #16]
   1e310:	3301      	adds	r3, #1
   1e312:	781b      	ldrb	r3, [r3, #0]
   1e314:	021b      	lsls	r3, r3, #8
   1e316:	18d2      	adds	r2, r2, r3
   1e318:	693b      	ldr	r3, [r7, #16]
   1e31a:	3302      	adds	r3, #2
   1e31c:	781b      	ldrb	r3, [r3, #0]
   1e31e:	041b      	lsls	r3, r3, #16
   1e320:	18d2      	adds	r2, r2, r3
   1e322:	693b      	ldr	r3, [r7, #16]
   1e324:	3303      	adds	r3, #3
   1e326:	781b      	ldrb	r3, [r3, #0]
   1e328:	061b      	lsls	r3, r3, #24
   1e32a:	18d3      	adds	r3, r2, r3
   1e32c:	461a      	mov	r2, r3
   1e32e:	697b      	ldr	r3, [r7, #20]
   1e330:	009b      	lsls	r3, r3, #2
   1e332:	f107 0170 	add.w	r1, r7, #112	; 0x70
   1e336:	18cb      	adds	r3, r1, r3
   1e338:	f843 2c44 	str.w	r2, [r3, #-68]
   1e33c:	697b      	ldr	r3, [r7, #20]
   1e33e:	3301      	adds	r3, #1
   1e340:	617b      	str	r3, [r7, #20]
   1e342:	693b      	ldr	r3, [r7, #16]
   1e344:	3304      	adds	r3, #4
   1e346:	613b      	str	r3, [r7, #16]
   1e348:	697b      	ldr	r3, [r7, #20]
   1e34a:	2b0f      	cmp	r3, #15
   1e34c:	dddc      	ble.n	1e308 <md5_process+0x7c>
   1e34e:	69fa      	ldr	r2, [r7, #28]
   1e350:	6a3b      	ldr	r3, [r7, #32]
   1e352:	401a      	ands	r2, r3
   1e354:	69fb      	ldr	r3, [r7, #28]
   1e356:	43d9      	mvns	r1, r3
   1e358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e35a:	400b      	ands	r3, r1
   1e35c:	431a      	orrs	r2, r3
   1e35e:	69bb      	ldr	r3, [r7, #24]
   1e360:	18d2      	adds	r2, r2, r3
   1e362:	68fb      	ldr	r3, [r7, #12]
   1e364:	681b      	ldr	r3, [r3, #0]
   1e366:	18d2      	adds	r2, r2, r3
   1e368:	f24a 4378 	movw	r3, #42104	; 0xa478
   1e36c:	f2cd 736a 	movt	r3, #55146	; 0xd76a
   1e370:	18d3      	adds	r3, r2, r3
   1e372:	62bb      	str	r3, [r7, #40]	; 0x28
   1e374:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e376:	ea4f 6273 	mov.w	r2, r3, ror #25
   1e37a:	69fb      	ldr	r3, [r7, #28]
   1e37c:	18d3      	adds	r3, r2, r3
   1e37e:	61bb      	str	r3, [r7, #24]
   1e380:	69ba      	ldr	r2, [r7, #24]
   1e382:	69fb      	ldr	r3, [r7, #28]
   1e384:	401a      	ands	r2, r3
   1e386:	69bb      	ldr	r3, [r7, #24]
   1e388:	43d9      	mvns	r1, r3
   1e38a:	6a3b      	ldr	r3, [r7, #32]
   1e38c:	400b      	ands	r3, r1
   1e38e:	431a      	orrs	r2, r3
   1e390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e392:	18d2      	adds	r2, r2, r3
   1e394:	68fb      	ldr	r3, [r7, #12]
   1e396:	3304      	adds	r3, #4
   1e398:	681b      	ldr	r3, [r3, #0]
   1e39a:	18d2      	adds	r2, r2, r3
   1e39c:	f24b 7356 	movw	r3, #46934	; 0xb756
   1e3a0:	f6ce 03c7 	movt	r3, #59591	; 0xe8c7
   1e3a4:	18d3      	adds	r3, r2, r3
   1e3a6:	62bb      	str	r3, [r7, #40]	; 0x28
   1e3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e3aa:	ea4f 5233 	mov.w	r2, r3, ror #20
   1e3ae:	69bb      	ldr	r3, [r7, #24]
   1e3b0:	18d3      	adds	r3, r2, r3
   1e3b2:	627b      	str	r3, [r7, #36]	; 0x24
   1e3b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e3b6:	69bb      	ldr	r3, [r7, #24]
   1e3b8:	401a      	ands	r2, r3
   1e3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e3bc:	43d9      	mvns	r1, r3
   1e3be:	69fb      	ldr	r3, [r7, #28]
   1e3c0:	400b      	ands	r3, r1
   1e3c2:	431a      	orrs	r2, r3
   1e3c4:	6a3b      	ldr	r3, [r7, #32]
   1e3c6:	18d2      	adds	r2, r2, r3
   1e3c8:	68fb      	ldr	r3, [r7, #12]
   1e3ca:	3308      	adds	r3, #8
   1e3cc:	681b      	ldr	r3, [r3, #0]
   1e3ce:	18d2      	adds	r2, r2, r3
   1e3d0:	f247 03db 	movw	r3, #28891	; 0x70db
   1e3d4:	f2c2 4320 	movt	r3, #9248	; 0x2420
   1e3d8:	18d3      	adds	r3, r2, r3
   1e3da:	62bb      	str	r3, [r7, #40]	; 0x28
   1e3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e3de:	ea4f 32f3 	mov.w	r2, r3, ror #15
   1e3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e3e4:	18d3      	adds	r3, r2, r3
   1e3e6:	623b      	str	r3, [r7, #32]
   1e3e8:	6a3a      	ldr	r2, [r7, #32]
   1e3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e3ec:	401a      	ands	r2, r3
   1e3ee:	6a3b      	ldr	r3, [r7, #32]
   1e3f0:	43d9      	mvns	r1, r3
   1e3f2:	69bb      	ldr	r3, [r7, #24]
   1e3f4:	400b      	ands	r3, r1
   1e3f6:	431a      	orrs	r2, r3
   1e3f8:	69fb      	ldr	r3, [r7, #28]
   1e3fa:	18d2      	adds	r2, r2, r3
   1e3fc:	68fb      	ldr	r3, [r7, #12]
   1e3fe:	330c      	adds	r3, #12
   1e400:	681b      	ldr	r3, [r3, #0]
   1e402:	18d2      	adds	r2, r2, r3
   1e404:	f64c 63ee 	movw	r3, #52974	; 0xceee
   1e408:	f2cc 13bd 	movt	r3, #49597	; 0xc1bd
   1e40c:	18d3      	adds	r3, r2, r3
   1e40e:	62bb      	str	r3, [r7, #40]	; 0x28
   1e410:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e412:	ea4f 22b3 	mov.w	r2, r3, ror #10
   1e416:	6a3b      	ldr	r3, [r7, #32]
   1e418:	18d3      	adds	r3, r2, r3
   1e41a:	61fb      	str	r3, [r7, #28]
   1e41c:	69fa      	ldr	r2, [r7, #28]
   1e41e:	6a3b      	ldr	r3, [r7, #32]
   1e420:	401a      	ands	r2, r3
   1e422:	69fb      	ldr	r3, [r7, #28]
   1e424:	43d9      	mvns	r1, r3
   1e426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e428:	400b      	ands	r3, r1
   1e42a:	431a      	orrs	r2, r3
   1e42c:	69bb      	ldr	r3, [r7, #24]
   1e42e:	18d2      	adds	r2, r2, r3
   1e430:	68fb      	ldr	r3, [r7, #12]
   1e432:	3310      	adds	r3, #16
   1e434:	681b      	ldr	r3, [r3, #0]
   1e436:	18d2      	adds	r2, r2, r3
   1e438:	f640 73af 	movw	r3, #4015	; 0xfaf
   1e43c:	f2cf 537c 	movt	r3, #62844	; 0xf57c
   1e440:	18d3      	adds	r3, r2, r3
   1e442:	62bb      	str	r3, [r7, #40]	; 0x28
   1e444:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e446:	ea4f 6273 	mov.w	r2, r3, ror #25
   1e44a:	69fb      	ldr	r3, [r7, #28]
   1e44c:	18d3      	adds	r3, r2, r3
   1e44e:	61bb      	str	r3, [r7, #24]
   1e450:	69ba      	ldr	r2, [r7, #24]
   1e452:	69fb      	ldr	r3, [r7, #28]
   1e454:	401a      	ands	r2, r3
   1e456:	69bb      	ldr	r3, [r7, #24]
   1e458:	43d9      	mvns	r1, r3
   1e45a:	6a3b      	ldr	r3, [r7, #32]
   1e45c:	400b      	ands	r3, r1
   1e45e:	431a      	orrs	r2, r3
   1e460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e462:	18d2      	adds	r2, r2, r3
   1e464:	68fb      	ldr	r3, [r7, #12]
   1e466:	3314      	adds	r3, #20
   1e468:	681b      	ldr	r3, [r3, #0]
   1e46a:	18d2      	adds	r2, r2, r3
   1e46c:	f24c 632a 	movw	r3, #50730	; 0xc62a
   1e470:	f2c4 7387 	movt	r3, #18311	; 0x4787
   1e474:	18d3      	adds	r3, r2, r3
   1e476:	62bb      	str	r3, [r7, #40]	; 0x28
   1e478:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e47a:	ea4f 5233 	mov.w	r2, r3, ror #20
   1e47e:	69bb      	ldr	r3, [r7, #24]
   1e480:	18d3      	adds	r3, r2, r3
   1e482:	627b      	str	r3, [r7, #36]	; 0x24
   1e484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e486:	69bb      	ldr	r3, [r7, #24]
   1e488:	401a      	ands	r2, r3
   1e48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e48c:	43d9      	mvns	r1, r3
   1e48e:	69fb      	ldr	r3, [r7, #28]
   1e490:	400b      	ands	r3, r1
   1e492:	431a      	orrs	r2, r3
   1e494:	6a3b      	ldr	r3, [r7, #32]
   1e496:	18d2      	adds	r2, r2, r3
   1e498:	68fb      	ldr	r3, [r7, #12]
   1e49a:	3318      	adds	r3, #24
   1e49c:	681b      	ldr	r3, [r3, #0]
   1e49e:	18d2      	adds	r2, r2, r3
   1e4a0:	f244 6313 	movw	r3, #17939	; 0x4613
   1e4a4:	f6ca 0330 	movt	r3, #43056	; 0xa830
   1e4a8:	18d3      	adds	r3, r2, r3
   1e4aa:	62bb      	str	r3, [r7, #40]	; 0x28
   1e4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e4ae:	ea4f 32f3 	mov.w	r2, r3, ror #15
   1e4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e4b4:	18d3      	adds	r3, r2, r3
   1e4b6:	623b      	str	r3, [r7, #32]
   1e4b8:	6a3a      	ldr	r2, [r7, #32]
   1e4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e4bc:	401a      	ands	r2, r3
   1e4be:	6a3b      	ldr	r3, [r7, #32]
   1e4c0:	43d9      	mvns	r1, r3
   1e4c2:	69bb      	ldr	r3, [r7, #24]
   1e4c4:	400b      	ands	r3, r1
   1e4c6:	431a      	orrs	r2, r3
   1e4c8:	69fb      	ldr	r3, [r7, #28]
   1e4ca:	18d2      	adds	r2, r2, r3
   1e4cc:	68fb      	ldr	r3, [r7, #12]
   1e4ce:	331c      	adds	r3, #28
   1e4d0:	681b      	ldr	r3, [r3, #0]
   1e4d2:	18d2      	adds	r2, r2, r3
   1e4d4:	f249 5301 	movw	r3, #38145	; 0x9501
   1e4d8:	f6cf 5346 	movt	r3, #64838	; 0xfd46
   1e4dc:	18d3      	adds	r3, r2, r3
   1e4de:	62bb      	str	r3, [r7, #40]	; 0x28
   1e4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e4e2:	ea4f 22b3 	mov.w	r2, r3, ror #10
   1e4e6:	6a3b      	ldr	r3, [r7, #32]
   1e4e8:	18d3      	adds	r3, r2, r3
   1e4ea:	61fb      	str	r3, [r7, #28]
   1e4ec:	69fa      	ldr	r2, [r7, #28]
   1e4ee:	6a3b      	ldr	r3, [r7, #32]
   1e4f0:	401a      	ands	r2, r3
   1e4f2:	69fb      	ldr	r3, [r7, #28]
   1e4f4:	43d9      	mvns	r1, r3
   1e4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e4f8:	400b      	ands	r3, r1
   1e4fa:	431a      	orrs	r2, r3
   1e4fc:	69bb      	ldr	r3, [r7, #24]
   1e4fe:	18d2      	adds	r2, r2, r3
   1e500:	68fb      	ldr	r3, [r7, #12]
   1e502:	3320      	adds	r3, #32
   1e504:	681b      	ldr	r3, [r3, #0]
   1e506:	18d2      	adds	r2, r2, r3
   1e508:	f649 03d8 	movw	r3, #39128	; 0x98d8
   1e50c:	f6c6 1380 	movt	r3, #27008	; 0x6980
   1e510:	18d3      	adds	r3, r2, r3
   1e512:	62bb      	str	r3, [r7, #40]	; 0x28
   1e514:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e516:	ea4f 6273 	mov.w	r2, r3, ror #25
   1e51a:	69fb      	ldr	r3, [r7, #28]
   1e51c:	18d3      	adds	r3, r2, r3
   1e51e:	61bb      	str	r3, [r7, #24]
   1e520:	69ba      	ldr	r2, [r7, #24]
   1e522:	69fb      	ldr	r3, [r7, #28]
   1e524:	401a      	ands	r2, r3
   1e526:	69bb      	ldr	r3, [r7, #24]
   1e528:	43d9      	mvns	r1, r3
   1e52a:	6a3b      	ldr	r3, [r7, #32]
   1e52c:	400b      	ands	r3, r1
   1e52e:	431a      	orrs	r2, r3
   1e530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e532:	18d2      	adds	r2, r2, r3
   1e534:	68fb      	ldr	r3, [r7, #12]
   1e536:	3324      	adds	r3, #36	; 0x24
   1e538:	681b      	ldr	r3, [r3, #0]
   1e53a:	18d2      	adds	r2, r2, r3
   1e53c:	f24f 73af 	movw	r3, #63407	; 0xf7af
   1e540:	f6c8 3344 	movt	r3, #35652	; 0x8b44
   1e544:	18d3      	adds	r3, r2, r3
   1e546:	62bb      	str	r3, [r7, #40]	; 0x28
   1e548:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e54a:	ea4f 5233 	mov.w	r2, r3, ror #20
   1e54e:	69bb      	ldr	r3, [r7, #24]
   1e550:	18d3      	adds	r3, r2, r3
   1e552:	627b      	str	r3, [r7, #36]	; 0x24
   1e554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e556:	69bb      	ldr	r3, [r7, #24]
   1e558:	401a      	ands	r2, r3
   1e55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e55c:	43d9      	mvns	r1, r3
   1e55e:	69fb      	ldr	r3, [r7, #28]
   1e560:	400b      	ands	r3, r1
   1e562:	431a      	orrs	r2, r3
   1e564:	6a3b      	ldr	r3, [r7, #32]
   1e566:	18d2      	adds	r2, r2, r3
   1e568:	68fb      	ldr	r3, [r7, #12]
   1e56a:	3328      	adds	r3, #40	; 0x28
   1e56c:	681b      	ldr	r3, [r3, #0]
   1e56e:	18d3      	adds	r3, r2, r3
   1e570:	f5a3 4324 	sub.w	r3, r3, #41984	; 0xa400
   1e574:	3b4f      	subs	r3, #79	; 0x4f
   1e576:	62bb      	str	r3, [r7, #40]	; 0x28
   1e578:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e57a:	ea4f 32f3 	mov.w	r2, r3, ror #15
   1e57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e580:	18d3      	adds	r3, r2, r3
   1e582:	623b      	str	r3, [r7, #32]
   1e584:	6a3a      	ldr	r2, [r7, #32]
   1e586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e588:	401a      	ands	r2, r3
   1e58a:	6a3b      	ldr	r3, [r7, #32]
   1e58c:	43d9      	mvns	r1, r3
   1e58e:	69bb      	ldr	r3, [r7, #24]
   1e590:	400b      	ands	r3, r1
   1e592:	431a      	orrs	r2, r3
   1e594:	69fb      	ldr	r3, [r7, #28]
   1e596:	18d2      	adds	r2, r2, r3
   1e598:	68fb      	ldr	r3, [r7, #12]
   1e59a:	332c      	adds	r3, #44	; 0x2c
   1e59c:	681b      	ldr	r3, [r3, #0]
   1e59e:	18d2      	adds	r2, r2, r3
   1e5a0:	f24d 73be 	movw	r3, #55230	; 0xd7be
   1e5a4:	f6c8 135c 	movt	r3, #35164	; 0x895c
   1e5a8:	18d3      	adds	r3, r2, r3
   1e5aa:	62bb      	str	r3, [r7, #40]	; 0x28
   1e5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e5ae:	ea4f 22b3 	mov.w	r2, r3, ror #10
   1e5b2:	6a3b      	ldr	r3, [r7, #32]
   1e5b4:	18d3      	adds	r3, r2, r3
   1e5b6:	61fb      	str	r3, [r7, #28]
   1e5b8:	69fa      	ldr	r2, [r7, #28]
   1e5ba:	6a3b      	ldr	r3, [r7, #32]
   1e5bc:	401a      	ands	r2, r3
   1e5be:	69fb      	ldr	r3, [r7, #28]
   1e5c0:	43d9      	mvns	r1, r3
   1e5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e5c4:	400b      	ands	r3, r1
   1e5c6:	431a      	orrs	r2, r3
   1e5c8:	69bb      	ldr	r3, [r7, #24]
   1e5ca:	18d2      	adds	r2, r2, r3
   1e5cc:	68fb      	ldr	r3, [r7, #12]
   1e5ce:	3330      	adds	r3, #48	; 0x30
   1e5d0:	681b      	ldr	r3, [r3, #0]
   1e5d2:	18d2      	adds	r2, r2, r3
   1e5d4:	f241 1322 	movw	r3, #4386	; 0x1122
   1e5d8:	f6c6 3390 	movt	r3, #27536	; 0x6b90
   1e5dc:	18d3      	adds	r3, r2, r3
   1e5de:	62bb      	str	r3, [r7, #40]	; 0x28
   1e5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e5e2:	ea4f 6273 	mov.w	r2, r3, ror #25
   1e5e6:	69fb      	ldr	r3, [r7, #28]
   1e5e8:	18d3      	adds	r3, r2, r3
   1e5ea:	61bb      	str	r3, [r7, #24]
   1e5ec:	69ba      	ldr	r2, [r7, #24]
   1e5ee:	69fb      	ldr	r3, [r7, #28]
   1e5f0:	401a      	ands	r2, r3
   1e5f2:	69bb      	ldr	r3, [r7, #24]
   1e5f4:	43d9      	mvns	r1, r3
   1e5f6:	6a3b      	ldr	r3, [r7, #32]
   1e5f8:	400b      	ands	r3, r1
   1e5fa:	431a      	orrs	r2, r3
   1e5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e5fe:	18d2      	adds	r2, r2, r3
   1e600:	68fb      	ldr	r3, [r7, #12]
   1e602:	3334      	adds	r3, #52	; 0x34
   1e604:	681b      	ldr	r3, [r3, #0]
   1e606:	18d2      	adds	r2, r2, r3
   1e608:	f247 1393 	movw	r3, #29075	; 0x7193
   1e60c:	f6cf 5398 	movt	r3, #64920	; 0xfd98
   1e610:	18d3      	adds	r3, r2, r3
   1e612:	62bb      	str	r3, [r7, #40]	; 0x28
   1e614:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e616:	ea4f 5233 	mov.w	r2, r3, ror #20
   1e61a:	69bb      	ldr	r3, [r7, #24]
   1e61c:	18d3      	adds	r3, r2, r3
   1e61e:	627b      	str	r3, [r7, #36]	; 0x24
   1e620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e622:	69bb      	ldr	r3, [r7, #24]
   1e624:	401a      	ands	r2, r3
   1e626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e628:	43d9      	mvns	r1, r3
   1e62a:	69fb      	ldr	r3, [r7, #28]
   1e62c:	400b      	ands	r3, r1
   1e62e:	431a      	orrs	r2, r3
   1e630:	6a3b      	ldr	r3, [r7, #32]
   1e632:	18d2      	adds	r2, r2, r3
   1e634:	68fb      	ldr	r3, [r7, #12]
   1e636:	3338      	adds	r3, #56	; 0x38
   1e638:	681b      	ldr	r3, [r3, #0]
   1e63a:	18d2      	adds	r2, r2, r3
   1e63c:	f244 338e 	movw	r3, #17294	; 0x438e
   1e640:	f2ca 6379 	movt	r3, #42617	; 0xa679
   1e644:	18d3      	adds	r3, r2, r3
   1e646:	62bb      	str	r3, [r7, #40]	; 0x28
   1e648:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e64a:	ea4f 32f3 	mov.w	r2, r3, ror #15
   1e64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e650:	18d3      	adds	r3, r2, r3
   1e652:	623b      	str	r3, [r7, #32]
   1e654:	6a3a      	ldr	r2, [r7, #32]
   1e656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e658:	401a      	ands	r2, r3
   1e65a:	6a3b      	ldr	r3, [r7, #32]
   1e65c:	43d9      	mvns	r1, r3
   1e65e:	69bb      	ldr	r3, [r7, #24]
   1e660:	400b      	ands	r3, r1
   1e662:	431a      	orrs	r2, r3
   1e664:	69fb      	ldr	r3, [r7, #28]
   1e666:	18d2      	adds	r2, r2, r3
   1e668:	68fb      	ldr	r3, [r7, #12]
   1e66a:	333c      	adds	r3, #60	; 0x3c
   1e66c:	681b      	ldr	r3, [r3, #0]
   1e66e:	18d2      	adds	r2, r2, r3
   1e670:	f640 0321 	movw	r3, #2081	; 0x821
   1e674:	f6c4 13b4 	movt	r3, #18868	; 0x49b4
   1e678:	18d3      	adds	r3, r2, r3
   1e67a:	62bb      	str	r3, [r7, #40]	; 0x28
   1e67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e67e:	ea4f 22b3 	mov.w	r2, r3, ror #10
   1e682:	6a3b      	ldr	r3, [r7, #32]
   1e684:	18d3      	adds	r3, r2, r3
   1e686:	61fb      	str	r3, [r7, #28]
   1e688:	69fa      	ldr	r2, [r7, #28]
   1e68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e68c:	401a      	ands	r2, r3
   1e68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e690:	43d9      	mvns	r1, r3
   1e692:	6a3b      	ldr	r3, [r7, #32]
   1e694:	400b      	ands	r3, r1
   1e696:	431a      	orrs	r2, r3
   1e698:	69bb      	ldr	r3, [r7, #24]
   1e69a:	18d2      	adds	r2, r2, r3
   1e69c:	68fb      	ldr	r3, [r7, #12]
   1e69e:	3304      	adds	r3, #4
   1e6a0:	681b      	ldr	r3, [r3, #0]
   1e6a2:	18d2      	adds	r2, r2, r3
   1e6a4:	f242 5362 	movw	r3, #9570	; 0x2562
   1e6a8:	f2cf 631e 	movt	r3, #63006	; 0xf61e
   1e6ac:	18d3      	adds	r3, r2, r3
   1e6ae:	62bb      	str	r3, [r7, #40]	; 0x28
   1e6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e6b2:	ea4f 62f3 	mov.w	r2, r3, ror #27
   1e6b6:	69fb      	ldr	r3, [r7, #28]
   1e6b8:	18d3      	adds	r3, r2, r3
   1e6ba:	61bb      	str	r3, [r7, #24]
   1e6bc:	69ba      	ldr	r2, [r7, #24]
   1e6be:	6a3b      	ldr	r3, [r7, #32]
   1e6c0:	401a      	ands	r2, r3
   1e6c2:	6a3b      	ldr	r3, [r7, #32]
   1e6c4:	43d9      	mvns	r1, r3
   1e6c6:	69fb      	ldr	r3, [r7, #28]
   1e6c8:	400b      	ands	r3, r1
   1e6ca:	431a      	orrs	r2, r3
   1e6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e6ce:	18d2      	adds	r2, r2, r3
   1e6d0:	68fb      	ldr	r3, [r7, #12]
   1e6d2:	3318      	adds	r3, #24
   1e6d4:	681b      	ldr	r3, [r3, #0]
   1e6d6:	18d2      	adds	r2, r2, r3
   1e6d8:	f24b 3340 	movw	r3, #45888	; 0xb340
   1e6dc:	f2cc 0340 	movt	r3, #49216	; 0xc040
   1e6e0:	18d3      	adds	r3, r2, r3
   1e6e2:	62bb      	str	r3, [r7, #40]	; 0x28
   1e6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e6e6:	ea4f 52f3 	mov.w	r2, r3, ror #23
   1e6ea:	69bb      	ldr	r3, [r7, #24]
   1e6ec:	18d3      	adds	r3, r2, r3
   1e6ee:	627b      	str	r3, [r7, #36]	; 0x24
   1e6f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e6f2:	69fb      	ldr	r3, [r7, #28]
   1e6f4:	401a      	ands	r2, r3
   1e6f6:	69fb      	ldr	r3, [r7, #28]
   1e6f8:	43d9      	mvns	r1, r3
   1e6fa:	69bb      	ldr	r3, [r7, #24]
   1e6fc:	400b      	ands	r3, r1
   1e6fe:	431a      	orrs	r2, r3
   1e700:	6a3b      	ldr	r3, [r7, #32]
   1e702:	18d2      	adds	r2, r2, r3
   1e704:	68fb      	ldr	r3, [r7, #12]
   1e706:	332c      	adds	r3, #44	; 0x2c
   1e708:	681b      	ldr	r3, [r3, #0]
   1e70a:	18d2      	adds	r2, r2, r3
   1e70c:	f645 2351 	movw	r3, #23121	; 0x5a51
   1e710:	f2c2 635e 	movt	r3, #9822	; 0x265e
   1e714:	18d3      	adds	r3, r2, r3
   1e716:	62bb      	str	r3, [r7, #40]	; 0x28
   1e718:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e71a:	ea4f 42b3 	mov.w	r2, r3, ror #18
   1e71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e720:	18d3      	adds	r3, r2, r3
   1e722:	623b      	str	r3, [r7, #32]
   1e724:	6a3a      	ldr	r2, [r7, #32]
   1e726:	69bb      	ldr	r3, [r7, #24]
   1e728:	401a      	ands	r2, r3
   1e72a:	69bb      	ldr	r3, [r7, #24]
   1e72c:	43d9      	mvns	r1, r3
   1e72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e730:	400b      	ands	r3, r1
   1e732:	431a      	orrs	r2, r3
   1e734:	69fb      	ldr	r3, [r7, #28]
   1e736:	18d2      	adds	r2, r2, r3
   1e738:	68fb      	ldr	r3, [r7, #12]
   1e73a:	681b      	ldr	r3, [r3, #0]
   1e73c:	18d2      	adds	r2, r2, r3
   1e73e:	f24c 73aa 	movw	r3, #51114	; 0xc7aa
   1e742:	f6ce 13b6 	movt	r3, #59830	; 0xe9b6
   1e746:	18d3      	adds	r3, r2, r3
   1e748:	62bb      	str	r3, [r7, #40]	; 0x28
   1e74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e74c:	ea4f 3233 	mov.w	r2, r3, ror #12
   1e750:	6a3b      	ldr	r3, [r7, #32]
   1e752:	18d3      	adds	r3, r2, r3
   1e754:	61fb      	str	r3, [r7, #28]
   1e756:	69fa      	ldr	r2, [r7, #28]
   1e758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e75a:	401a      	ands	r2, r3
   1e75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e75e:	43d9      	mvns	r1, r3
   1e760:	6a3b      	ldr	r3, [r7, #32]
   1e762:	400b      	ands	r3, r1
   1e764:	431a      	orrs	r2, r3
   1e766:	69bb      	ldr	r3, [r7, #24]
   1e768:	18d2      	adds	r2, r2, r3
   1e76a:	68fb      	ldr	r3, [r7, #12]
   1e76c:	3314      	adds	r3, #20
   1e76e:	681b      	ldr	r3, [r3, #0]
   1e770:	18d2      	adds	r2, r2, r3
   1e772:	f241 035d 	movw	r3, #4189	; 0x105d
   1e776:	f2cd 632f 	movt	r3, #54831	; 0xd62f
   1e77a:	18d3      	adds	r3, r2, r3
   1e77c:	62bb      	str	r3, [r7, #40]	; 0x28
   1e77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e780:	ea4f 62f3 	mov.w	r2, r3, ror #27
   1e784:	69fb      	ldr	r3, [r7, #28]
   1e786:	18d3      	adds	r3, r2, r3
   1e788:	61bb      	str	r3, [r7, #24]
   1e78a:	69ba      	ldr	r2, [r7, #24]
   1e78c:	6a3b      	ldr	r3, [r7, #32]
   1e78e:	401a      	ands	r2, r3
   1e790:	6a3b      	ldr	r3, [r7, #32]
   1e792:	43d9      	mvns	r1, r3
   1e794:	69fb      	ldr	r3, [r7, #28]
   1e796:	400b      	ands	r3, r1
   1e798:	431a      	orrs	r2, r3
   1e79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e79c:	18d2      	adds	r2, r2, r3
   1e79e:	68fb      	ldr	r3, [r7, #12]
   1e7a0:	3328      	adds	r3, #40	; 0x28
   1e7a2:	681b      	ldr	r3, [r3, #0]
   1e7a4:	18d2      	adds	r2, r2, r3
   1e7a6:	f241 4353 	movw	r3, #5203	; 0x1453
   1e7aa:	f2c0 2344 	movt	r3, #580	; 0x244
   1e7ae:	18d3      	adds	r3, r2, r3
   1e7b0:	62bb      	str	r3, [r7, #40]	; 0x28
   1e7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e7b4:	ea4f 52f3 	mov.w	r2, r3, ror #23
   1e7b8:	69bb      	ldr	r3, [r7, #24]
   1e7ba:	18d3      	adds	r3, r2, r3
   1e7bc:	627b      	str	r3, [r7, #36]	; 0x24
   1e7be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e7c0:	69fb      	ldr	r3, [r7, #28]
   1e7c2:	401a      	ands	r2, r3
   1e7c4:	69fb      	ldr	r3, [r7, #28]
   1e7c6:	43d9      	mvns	r1, r3
   1e7c8:	69bb      	ldr	r3, [r7, #24]
   1e7ca:	400b      	ands	r3, r1
   1e7cc:	431a      	orrs	r2, r3
   1e7ce:	6a3b      	ldr	r3, [r7, #32]
   1e7d0:	18d2      	adds	r2, r2, r3
   1e7d2:	68fb      	ldr	r3, [r7, #12]
   1e7d4:	333c      	adds	r3, #60	; 0x3c
   1e7d6:	681b      	ldr	r3, [r3, #0]
   1e7d8:	18d2      	adds	r2, r2, r3
   1e7da:	f24e 6381 	movw	r3, #59009	; 0xe681
   1e7de:	f6cd 03a1 	movt	r3, #55457	; 0xd8a1
   1e7e2:	18d3      	adds	r3, r2, r3
   1e7e4:	62bb      	str	r3, [r7, #40]	; 0x28
   1e7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e7e8:	ea4f 42b3 	mov.w	r2, r3, ror #18
   1e7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e7ee:	18d3      	adds	r3, r2, r3
   1e7f0:	623b      	str	r3, [r7, #32]
   1e7f2:	6a3a      	ldr	r2, [r7, #32]
   1e7f4:	69bb      	ldr	r3, [r7, #24]
   1e7f6:	401a      	ands	r2, r3
   1e7f8:	69bb      	ldr	r3, [r7, #24]
   1e7fa:	43d9      	mvns	r1, r3
   1e7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e7fe:	400b      	ands	r3, r1
   1e800:	431a      	orrs	r2, r3
   1e802:	69fb      	ldr	r3, [r7, #28]
   1e804:	18d2      	adds	r2, r2, r3
   1e806:	68fb      	ldr	r3, [r7, #12]
   1e808:	3310      	adds	r3, #16
   1e80a:	681b      	ldr	r3, [r3, #0]
   1e80c:	18d2      	adds	r2, r2, r3
   1e80e:	f64f 33c8 	movw	r3, #64456	; 0xfbc8
   1e812:	f2ce 73d3 	movt	r3, #59347	; 0xe7d3
   1e816:	18d3      	adds	r3, r2, r3
   1e818:	62bb      	str	r3, [r7, #40]	; 0x28
   1e81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e81c:	ea4f 3233 	mov.w	r2, r3, ror #12
   1e820:	6a3b      	ldr	r3, [r7, #32]
   1e822:	18d3      	adds	r3, r2, r3
   1e824:	61fb      	str	r3, [r7, #28]
   1e826:	69fa      	ldr	r2, [r7, #28]
   1e828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e82a:	401a      	ands	r2, r3
   1e82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e82e:	43d9      	mvns	r1, r3
   1e830:	6a3b      	ldr	r3, [r7, #32]
   1e832:	400b      	ands	r3, r1
   1e834:	431a      	orrs	r2, r3
   1e836:	69bb      	ldr	r3, [r7, #24]
   1e838:	18d2      	adds	r2, r2, r3
   1e83a:	68fb      	ldr	r3, [r7, #12]
   1e83c:	3324      	adds	r3, #36	; 0x24
   1e83e:	681b      	ldr	r3, [r3, #0]
   1e840:	18d2      	adds	r2, r2, r3
   1e842:	f64c 53e6 	movw	r3, #52710	; 0xcde6
   1e846:	f2c2 13e1 	movt	r3, #8673	; 0x21e1
   1e84a:	18d3      	adds	r3, r2, r3
   1e84c:	62bb      	str	r3, [r7, #40]	; 0x28
   1e84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e850:	ea4f 62f3 	mov.w	r2, r3, ror #27
   1e854:	69fb      	ldr	r3, [r7, #28]
   1e856:	18d3      	adds	r3, r2, r3
   1e858:	61bb      	str	r3, [r7, #24]
   1e85a:	69ba      	ldr	r2, [r7, #24]
   1e85c:	6a3b      	ldr	r3, [r7, #32]
   1e85e:	401a      	ands	r2, r3
   1e860:	6a3b      	ldr	r3, [r7, #32]
   1e862:	43d9      	mvns	r1, r3
   1e864:	69fb      	ldr	r3, [r7, #28]
   1e866:	400b      	ands	r3, r1
   1e868:	431a      	orrs	r2, r3
   1e86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e86c:	18d2      	adds	r2, r2, r3
   1e86e:	68fb      	ldr	r3, [r7, #12]
   1e870:	3338      	adds	r3, #56	; 0x38
   1e872:	681b      	ldr	r3, [r3, #0]
   1e874:	18d2      	adds	r2, r2, r3
   1e876:	f240 73d6 	movw	r3, #2006	; 0x7d6
   1e87a:	f2cc 3337 	movt	r3, #49975	; 0xc337
   1e87e:	18d3      	adds	r3, r2, r3
   1e880:	62bb      	str	r3, [r7, #40]	; 0x28
   1e882:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e884:	ea4f 52f3 	mov.w	r2, r3, ror #23
   1e888:	69bb      	ldr	r3, [r7, #24]
   1e88a:	18d3      	adds	r3, r2, r3
   1e88c:	627b      	str	r3, [r7, #36]	; 0x24
   1e88e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e890:	69fb      	ldr	r3, [r7, #28]
   1e892:	401a      	ands	r2, r3
   1e894:	69fb      	ldr	r3, [r7, #28]
   1e896:	43d9      	mvns	r1, r3
   1e898:	69bb      	ldr	r3, [r7, #24]
   1e89a:	400b      	ands	r3, r1
   1e89c:	431a      	orrs	r2, r3
   1e89e:	6a3b      	ldr	r3, [r7, #32]
   1e8a0:	18d2      	adds	r2, r2, r3
   1e8a2:	68fb      	ldr	r3, [r7, #12]
   1e8a4:	330c      	adds	r3, #12
   1e8a6:	681b      	ldr	r3, [r3, #0]
   1e8a8:	18d2      	adds	r2, r2, r3
   1e8aa:	f640 5387 	movw	r3, #3463	; 0xd87
   1e8ae:	f2cf 43d5 	movt	r3, #62677	; 0xf4d5
   1e8b2:	18d3      	adds	r3, r2, r3
   1e8b4:	62bb      	str	r3, [r7, #40]	; 0x28
   1e8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e8b8:	ea4f 42b3 	mov.w	r2, r3, ror #18
   1e8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e8be:	18d3      	adds	r3, r2, r3
   1e8c0:	623b      	str	r3, [r7, #32]
   1e8c2:	6a3a      	ldr	r2, [r7, #32]
   1e8c4:	69bb      	ldr	r3, [r7, #24]
   1e8c6:	401a      	ands	r2, r3
   1e8c8:	69bb      	ldr	r3, [r7, #24]
   1e8ca:	43d9      	mvns	r1, r3
   1e8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e8ce:	400b      	ands	r3, r1
   1e8d0:	431a      	orrs	r2, r3
   1e8d2:	69fb      	ldr	r3, [r7, #28]
   1e8d4:	18d2      	adds	r2, r2, r3
   1e8d6:	68fb      	ldr	r3, [r7, #12]
   1e8d8:	3320      	adds	r3, #32
   1e8da:	681b      	ldr	r3, [r3, #0]
   1e8dc:	18d2      	adds	r2, r2, r3
   1e8de:	f241 43ed 	movw	r3, #5357	; 0x14ed
   1e8e2:	f2c4 535a 	movt	r3, #17754	; 0x455a
   1e8e6:	18d3      	adds	r3, r2, r3
   1e8e8:	62bb      	str	r3, [r7, #40]	; 0x28
   1e8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e8ec:	ea4f 3233 	mov.w	r2, r3, ror #12
   1e8f0:	6a3b      	ldr	r3, [r7, #32]
   1e8f2:	18d3      	adds	r3, r2, r3
   1e8f4:	61fb      	str	r3, [r7, #28]
   1e8f6:	69fa      	ldr	r2, [r7, #28]
   1e8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e8fa:	401a      	ands	r2, r3
   1e8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e8fe:	43d9      	mvns	r1, r3
   1e900:	6a3b      	ldr	r3, [r7, #32]
   1e902:	400b      	ands	r3, r1
   1e904:	431a      	orrs	r2, r3
   1e906:	69bb      	ldr	r3, [r7, #24]
   1e908:	18d2      	adds	r2, r2, r3
   1e90a:	68fb      	ldr	r3, [r7, #12]
   1e90c:	3334      	adds	r3, #52	; 0x34
   1e90e:	681b      	ldr	r3, [r3, #0]
   1e910:	18d2      	adds	r2, r2, r3
   1e912:	f64e 1305 	movw	r3, #59653	; 0xe905
   1e916:	f6ca 13e3 	movt	r3, #43491	; 0xa9e3
   1e91a:	18d3      	adds	r3, r2, r3
   1e91c:	62bb      	str	r3, [r7, #40]	; 0x28
   1e91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e920:	ea4f 62f3 	mov.w	r2, r3, ror #27
   1e924:	69fb      	ldr	r3, [r7, #28]
   1e926:	18d3      	adds	r3, r2, r3
   1e928:	61bb      	str	r3, [r7, #24]
   1e92a:	69ba      	ldr	r2, [r7, #24]
   1e92c:	6a3b      	ldr	r3, [r7, #32]
   1e92e:	401a      	ands	r2, r3
   1e930:	6a3b      	ldr	r3, [r7, #32]
   1e932:	43d9      	mvns	r1, r3
   1e934:	69fb      	ldr	r3, [r7, #28]
   1e936:	400b      	ands	r3, r1
   1e938:	431a      	orrs	r2, r3
   1e93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e93c:	18d2      	adds	r2, r2, r3
   1e93e:	68fb      	ldr	r3, [r7, #12]
   1e940:	3308      	adds	r3, #8
   1e942:	681b      	ldr	r3, [r3, #0]
   1e944:	18d2      	adds	r2, r2, r3
   1e946:	f24a 33f8 	movw	r3, #41976	; 0xa3f8
   1e94a:	f6cf 43ef 	movt	r3, #64751	; 0xfcef
   1e94e:	18d3      	adds	r3, r2, r3
   1e950:	62bb      	str	r3, [r7, #40]	; 0x28
   1e952:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e954:	ea4f 52f3 	mov.w	r2, r3, ror #23
   1e958:	69bb      	ldr	r3, [r7, #24]
   1e95a:	18d3      	adds	r3, r2, r3
   1e95c:	627b      	str	r3, [r7, #36]	; 0x24
   1e95e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e960:	69fb      	ldr	r3, [r7, #28]
   1e962:	401a      	ands	r2, r3
   1e964:	69fb      	ldr	r3, [r7, #28]
   1e966:	43d9      	mvns	r1, r3
   1e968:	69bb      	ldr	r3, [r7, #24]
   1e96a:	400b      	ands	r3, r1
   1e96c:	431a      	orrs	r2, r3
   1e96e:	6a3b      	ldr	r3, [r7, #32]
   1e970:	18d2      	adds	r2, r2, r3
   1e972:	68fb      	ldr	r3, [r7, #12]
   1e974:	331c      	adds	r3, #28
   1e976:	681b      	ldr	r3, [r3, #0]
   1e978:	18d2      	adds	r2, r2, r3
   1e97a:	f240 23d9 	movw	r3, #729	; 0x2d9
   1e97e:	f2c6 736f 	movt	r3, #26479	; 0x676f
   1e982:	18d3      	adds	r3, r2, r3
   1e984:	62bb      	str	r3, [r7, #40]	; 0x28
   1e986:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e988:	ea4f 42b3 	mov.w	r2, r3, ror #18
   1e98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e98e:	18d3      	adds	r3, r2, r3
   1e990:	623b      	str	r3, [r7, #32]
   1e992:	6a3a      	ldr	r2, [r7, #32]
   1e994:	69bb      	ldr	r3, [r7, #24]
   1e996:	401a      	ands	r2, r3
   1e998:	69bb      	ldr	r3, [r7, #24]
   1e99a:	43d9      	mvns	r1, r3
   1e99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e99e:	400b      	ands	r3, r1
   1e9a0:	431a      	orrs	r2, r3
   1e9a2:	69fb      	ldr	r3, [r7, #28]
   1e9a4:	18d2      	adds	r2, r2, r3
   1e9a6:	68fb      	ldr	r3, [r7, #12]
   1e9a8:	3330      	adds	r3, #48	; 0x30
   1e9aa:	681b      	ldr	r3, [r3, #0]
   1e9ac:	18d2      	adds	r2, r2, r3
   1e9ae:	f644 438a 	movw	r3, #19594	; 0x4c8a
   1e9b2:	f6c8 532a 	movt	r3, #36138	; 0x8d2a
   1e9b6:	18d3      	adds	r3, r2, r3
   1e9b8:	62bb      	str	r3, [r7, #40]	; 0x28
   1e9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e9bc:	ea4f 3233 	mov.w	r2, r3, ror #12
   1e9c0:	6a3b      	ldr	r3, [r7, #32]
   1e9c2:	18d3      	adds	r3, r2, r3
   1e9c4:	61fb      	str	r3, [r7, #28]
   1e9c6:	69fa      	ldr	r2, [r7, #28]
   1e9c8:	6a3b      	ldr	r3, [r7, #32]
   1e9ca:	405a      	eors	r2, r3
   1e9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e9ce:	405a      	eors	r2, r3
   1e9d0:	69bb      	ldr	r3, [r7, #24]
   1e9d2:	18d2      	adds	r2, r2, r3
   1e9d4:	68fb      	ldr	r3, [r7, #12]
   1e9d6:	3314      	adds	r3, #20
   1e9d8:	681b      	ldr	r3, [r3, #0]
   1e9da:	18d3      	adds	r3, r2, r3
   1e9dc:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
   1e9e0:	f2a3 63be 	subw	r3, r3, #1726	; 0x6be
   1e9e4:	62bb      	str	r3, [r7, #40]	; 0x28
   1e9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e9e8:	ea4f 7233 	mov.w	r2, r3, ror #28
   1e9ec:	69fb      	ldr	r3, [r7, #28]
   1e9ee:	18d3      	adds	r3, r2, r3
   1e9f0:	61bb      	str	r3, [r7, #24]
   1e9f2:	69ba      	ldr	r2, [r7, #24]
   1e9f4:	69fb      	ldr	r3, [r7, #28]
   1e9f6:	405a      	eors	r2, r3
   1e9f8:	6a3b      	ldr	r3, [r7, #32]
   1e9fa:	405a      	eors	r2, r3
   1e9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e9fe:	18d2      	adds	r2, r2, r3
   1ea00:	68fb      	ldr	r3, [r7, #12]
   1ea02:	3320      	adds	r3, #32
   1ea04:	681b      	ldr	r3, [r3, #0]
   1ea06:	18d2      	adds	r2, r2, r3
   1ea08:	f24f 6381 	movw	r3, #63105	; 0xf681
   1ea0c:	f2c8 7371 	movt	r3, #34673	; 0x8771
   1ea10:	18d3      	adds	r3, r2, r3
   1ea12:	62bb      	str	r3, [r7, #40]	; 0x28
   1ea14:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ea16:	ea4f 5273 	mov.w	r2, r3, ror #21
   1ea1a:	69bb      	ldr	r3, [r7, #24]
   1ea1c:	18d3      	adds	r3, r2, r3
   1ea1e:	627b      	str	r3, [r7, #36]	; 0x24
   1ea20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1ea22:	69bb      	ldr	r3, [r7, #24]
   1ea24:	405a      	eors	r2, r3
   1ea26:	69fb      	ldr	r3, [r7, #28]
   1ea28:	405a      	eors	r2, r3
   1ea2a:	6a3b      	ldr	r3, [r7, #32]
   1ea2c:	18d2      	adds	r2, r2, r3
   1ea2e:	68fb      	ldr	r3, [r7, #12]
   1ea30:	332c      	adds	r3, #44	; 0x2c
   1ea32:	681b      	ldr	r3, [r3, #0]
   1ea34:	18d2      	adds	r2, r2, r3
   1ea36:	f246 1322 	movw	r3, #24866	; 0x6122
   1ea3a:	f6c6 539d 	movt	r3, #28061	; 0x6d9d
   1ea3e:	18d3      	adds	r3, r2, r3
   1ea40:	62bb      	str	r3, [r7, #40]	; 0x28
   1ea42:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ea44:	ea4f 4233 	mov.w	r2, r3, ror #16
   1ea48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ea4a:	18d3      	adds	r3, r2, r3
   1ea4c:	623b      	str	r3, [r7, #32]
   1ea4e:	6a3a      	ldr	r2, [r7, #32]
   1ea50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ea52:	405a      	eors	r2, r3
   1ea54:	69bb      	ldr	r3, [r7, #24]
   1ea56:	405a      	eors	r2, r3
   1ea58:	69fb      	ldr	r3, [r7, #28]
   1ea5a:	18d2      	adds	r2, r2, r3
   1ea5c:	68fb      	ldr	r3, [r7, #12]
   1ea5e:	3338      	adds	r3, #56	; 0x38
   1ea60:	681b      	ldr	r3, [r3, #0]
   1ea62:	18d2      	adds	r2, r2, r3
   1ea64:	f643 030c 	movw	r3, #14348	; 0x380c
   1ea68:	f6cf 53e5 	movt	r3, #64997	; 0xfde5
   1ea6c:	18d3      	adds	r3, r2, r3
   1ea6e:	62bb      	str	r3, [r7, #40]	; 0x28
   1ea70:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ea72:	ea4f 2273 	mov.w	r2, r3, ror #9
   1ea76:	6a3b      	ldr	r3, [r7, #32]
   1ea78:	18d3      	adds	r3, r2, r3
   1ea7a:	61fb      	str	r3, [r7, #28]
   1ea7c:	69fa      	ldr	r2, [r7, #28]
   1ea7e:	6a3b      	ldr	r3, [r7, #32]
   1ea80:	405a      	eors	r2, r3
   1ea82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ea84:	405a      	eors	r2, r3
   1ea86:	69bb      	ldr	r3, [r7, #24]
   1ea88:	18d2      	adds	r2, r2, r3
   1ea8a:	68fb      	ldr	r3, [r7, #12]
   1ea8c:	3304      	adds	r3, #4
   1ea8e:	681b      	ldr	r3, [r3, #0]
   1ea90:	18d2      	adds	r2, r2, r3
   1ea92:	f64e 2344 	movw	r3, #59972	; 0xea44
   1ea96:	f2ca 43be 	movt	r3, #42174	; 0xa4be
   1ea9a:	18d3      	adds	r3, r2, r3
   1ea9c:	62bb      	str	r3, [r7, #40]	; 0x28
   1ea9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eaa0:	ea4f 7233 	mov.w	r2, r3, ror #28
   1eaa4:	69fb      	ldr	r3, [r7, #28]
   1eaa6:	18d3      	adds	r3, r2, r3
   1eaa8:	61bb      	str	r3, [r7, #24]
   1eaaa:	69ba      	ldr	r2, [r7, #24]
   1eaac:	69fb      	ldr	r3, [r7, #28]
   1eaae:	405a      	eors	r2, r3
   1eab0:	6a3b      	ldr	r3, [r7, #32]
   1eab2:	405a      	eors	r2, r3
   1eab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eab6:	18d2      	adds	r2, r2, r3
   1eab8:	68fb      	ldr	r3, [r7, #12]
   1eaba:	3310      	adds	r3, #16
   1eabc:	681b      	ldr	r3, [r3, #0]
   1eabe:	18d2      	adds	r2, r2, r3
   1eac0:	f64c 73a9 	movw	r3, #53161	; 0xcfa9
   1eac4:	f6c4 33de 	movt	r3, #19422	; 0x4bde
   1eac8:	18d3      	adds	r3, r2, r3
   1eaca:	62bb      	str	r3, [r7, #40]	; 0x28
   1eacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eace:	ea4f 5273 	mov.w	r2, r3, ror #21
   1ead2:	69bb      	ldr	r3, [r7, #24]
   1ead4:	18d3      	adds	r3, r2, r3
   1ead6:	627b      	str	r3, [r7, #36]	; 0x24
   1ead8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1eada:	69bb      	ldr	r3, [r7, #24]
   1eadc:	405a      	eors	r2, r3
   1eade:	69fb      	ldr	r3, [r7, #28]
   1eae0:	405a      	eors	r2, r3
   1eae2:	6a3b      	ldr	r3, [r7, #32]
   1eae4:	18d2      	adds	r2, r2, r3
   1eae6:	68fb      	ldr	r3, [r7, #12]
   1eae8:	331c      	adds	r3, #28
   1eaea:	681b      	ldr	r3, [r3, #0]
   1eaec:	18d2      	adds	r2, r2, r3
   1eaee:	f644 3360 	movw	r3, #19296	; 0x4b60
   1eaf2:	f2cf 63bb 	movt	r3, #63163	; 0xf6bb
   1eaf6:	18d3      	adds	r3, r2, r3
   1eaf8:	62bb      	str	r3, [r7, #40]	; 0x28
   1eafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eafc:	ea4f 4233 	mov.w	r2, r3, ror #16
   1eb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eb02:	18d3      	adds	r3, r2, r3
   1eb04:	623b      	str	r3, [r7, #32]
   1eb06:	6a3a      	ldr	r2, [r7, #32]
   1eb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eb0a:	405a      	eors	r2, r3
   1eb0c:	69bb      	ldr	r3, [r7, #24]
   1eb0e:	405a      	eors	r2, r3
   1eb10:	69fb      	ldr	r3, [r7, #28]
   1eb12:	18d2      	adds	r2, r2, r3
   1eb14:	68fb      	ldr	r3, [r7, #12]
   1eb16:	3328      	adds	r3, #40	; 0x28
   1eb18:	681b      	ldr	r3, [r3, #0]
   1eb1a:	18d2      	adds	r2, r2, r3
   1eb1c:	f64b 4370 	movw	r3, #48240	; 0xbc70
   1eb20:	f6cb 63bf 	movt	r3, #48831	; 0xbebf
   1eb24:	18d3      	adds	r3, r2, r3
   1eb26:	62bb      	str	r3, [r7, #40]	; 0x28
   1eb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eb2a:	ea4f 2273 	mov.w	r2, r3, ror #9
   1eb2e:	6a3b      	ldr	r3, [r7, #32]
   1eb30:	18d3      	adds	r3, r2, r3
   1eb32:	61fb      	str	r3, [r7, #28]
   1eb34:	69fa      	ldr	r2, [r7, #28]
   1eb36:	6a3b      	ldr	r3, [r7, #32]
   1eb38:	405a      	eors	r2, r3
   1eb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eb3c:	405a      	eors	r2, r3
   1eb3e:	69bb      	ldr	r3, [r7, #24]
   1eb40:	18d2      	adds	r2, r2, r3
   1eb42:	68fb      	ldr	r3, [r7, #12]
   1eb44:	3334      	adds	r3, #52	; 0x34
   1eb46:	681b      	ldr	r3, [r3, #0]
   1eb48:	18d2      	adds	r2, r2, r3
   1eb4a:	f647 63c6 	movw	r3, #32454	; 0x7ec6
   1eb4e:	f6c2 039b 	movt	r3, #10395	; 0x289b
   1eb52:	18d3      	adds	r3, r2, r3
   1eb54:	62bb      	str	r3, [r7, #40]	; 0x28
   1eb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eb58:	ea4f 7233 	mov.w	r2, r3, ror #28
   1eb5c:	69fb      	ldr	r3, [r7, #28]
   1eb5e:	18d3      	adds	r3, r2, r3
   1eb60:	61bb      	str	r3, [r7, #24]
   1eb62:	69ba      	ldr	r2, [r7, #24]
   1eb64:	69fb      	ldr	r3, [r7, #28]
   1eb66:	405a      	eors	r2, r3
   1eb68:	6a3b      	ldr	r3, [r7, #32]
   1eb6a:	405a      	eors	r2, r3
   1eb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eb6e:	18d2      	adds	r2, r2, r3
   1eb70:	68fb      	ldr	r3, [r7, #12]
   1eb72:	681b      	ldr	r3, [r3, #0]
   1eb74:	18d2      	adds	r2, r2, r3
   1eb76:	f242 73fa 	movw	r3, #10234	; 0x27fa
   1eb7a:	f6ce 23a1 	movt	r3, #60065	; 0xeaa1
   1eb7e:	18d3      	adds	r3, r2, r3
   1eb80:	62bb      	str	r3, [r7, #40]	; 0x28
   1eb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eb84:	ea4f 5273 	mov.w	r2, r3, ror #21
   1eb88:	69bb      	ldr	r3, [r7, #24]
   1eb8a:	18d3      	adds	r3, r2, r3
   1eb8c:	627b      	str	r3, [r7, #36]	; 0x24
   1eb8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1eb90:	69bb      	ldr	r3, [r7, #24]
   1eb92:	405a      	eors	r2, r3
   1eb94:	69fb      	ldr	r3, [r7, #28]
   1eb96:	405a      	eors	r2, r3
   1eb98:	6a3b      	ldr	r3, [r7, #32]
   1eb9a:	18d2      	adds	r2, r2, r3
   1eb9c:	68fb      	ldr	r3, [r7, #12]
   1eb9e:	330c      	adds	r3, #12
   1eba0:	681b      	ldr	r3, [r3, #0]
   1eba2:	18d2      	adds	r2, r2, r3
   1eba4:	f243 0385 	movw	r3, #12421	; 0x3085
   1eba8:	f2cd 43ef 	movt	r3, #54511	; 0xd4ef
   1ebac:	18d3      	adds	r3, r2, r3
   1ebae:	62bb      	str	r3, [r7, #40]	; 0x28
   1ebb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ebb2:	ea4f 4233 	mov.w	r2, r3, ror #16
   1ebb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ebb8:	18d3      	adds	r3, r2, r3
   1ebba:	623b      	str	r3, [r7, #32]
   1ebbc:	6a3a      	ldr	r2, [r7, #32]
   1ebbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ebc0:	405a      	eors	r2, r3
   1ebc2:	69bb      	ldr	r3, [r7, #24]
   1ebc4:	405a      	eors	r2, r3
   1ebc6:	69fb      	ldr	r3, [r7, #28]
   1ebc8:	18d2      	adds	r2, r2, r3
   1ebca:	68fb      	ldr	r3, [r7, #12]
   1ebcc:	3318      	adds	r3, #24
   1ebce:	681b      	ldr	r3, [r3, #0]
   1ebd0:	18d2      	adds	r2, r2, r3
   1ebd2:	f641 5305 	movw	r3, #7429	; 0x1d05
   1ebd6:	f2c0 4388 	movt	r3, #1160	; 0x488
   1ebda:	18d3      	adds	r3, r2, r3
   1ebdc:	62bb      	str	r3, [r7, #40]	; 0x28
   1ebde:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ebe0:	ea4f 2273 	mov.w	r2, r3, ror #9
   1ebe4:	6a3b      	ldr	r3, [r7, #32]
   1ebe6:	18d3      	adds	r3, r2, r3
   1ebe8:	61fb      	str	r3, [r7, #28]
   1ebea:	69fa      	ldr	r2, [r7, #28]
   1ebec:	6a3b      	ldr	r3, [r7, #32]
   1ebee:	405a      	eors	r2, r3
   1ebf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ebf2:	405a      	eors	r2, r3
   1ebf4:	69bb      	ldr	r3, [r7, #24]
   1ebf6:	18d2      	adds	r2, r2, r3
   1ebf8:	68fb      	ldr	r3, [r7, #12]
   1ebfa:	3324      	adds	r3, #36	; 0x24
   1ebfc:	681b      	ldr	r3, [r3, #0]
   1ebfe:	18d2      	adds	r2, r2, r3
   1ec00:	f24d 0339 	movw	r3, #53305	; 0xd039
   1ec04:	f6cd 13d4 	movt	r3, #55764	; 0xd9d4
   1ec08:	18d3      	adds	r3, r2, r3
   1ec0a:	62bb      	str	r3, [r7, #40]	; 0x28
   1ec0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ec0e:	ea4f 7233 	mov.w	r2, r3, ror #28
   1ec12:	69fb      	ldr	r3, [r7, #28]
   1ec14:	18d3      	adds	r3, r2, r3
   1ec16:	61bb      	str	r3, [r7, #24]
   1ec18:	69ba      	ldr	r2, [r7, #24]
   1ec1a:	69fb      	ldr	r3, [r7, #28]
   1ec1c:	405a      	eors	r2, r3
   1ec1e:	6a3b      	ldr	r3, [r7, #32]
   1ec20:	405a      	eors	r2, r3
   1ec22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ec24:	18d2      	adds	r2, r2, r3
   1ec26:	68fb      	ldr	r3, [r7, #12]
   1ec28:	3330      	adds	r3, #48	; 0x30
   1ec2a:	681b      	ldr	r3, [r3, #0]
   1ec2c:	18d2      	adds	r2, r2, r3
   1ec2e:	f649 13e5 	movw	r3, #39397	; 0x99e5
   1ec32:	f2ce 63db 	movt	r3, #59099	; 0xe6db
   1ec36:	18d3      	adds	r3, r2, r3
   1ec38:	62bb      	str	r3, [r7, #40]	; 0x28
   1ec3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ec3c:	ea4f 5273 	mov.w	r2, r3, ror #21
   1ec40:	69bb      	ldr	r3, [r7, #24]
   1ec42:	18d3      	adds	r3, r2, r3
   1ec44:	627b      	str	r3, [r7, #36]	; 0x24
   1ec46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1ec48:	69bb      	ldr	r3, [r7, #24]
   1ec4a:	405a      	eors	r2, r3
   1ec4c:	69fb      	ldr	r3, [r7, #28]
   1ec4e:	405a      	eors	r2, r3
   1ec50:	6a3b      	ldr	r3, [r7, #32]
   1ec52:	18d2      	adds	r2, r2, r3
   1ec54:	68fb      	ldr	r3, [r7, #12]
   1ec56:	333c      	adds	r3, #60	; 0x3c
   1ec58:	681b      	ldr	r3, [r3, #0]
   1ec5a:	18d2      	adds	r2, r2, r3
   1ec5c:	f647 43f8 	movw	r3, #31992	; 0x7cf8
   1ec60:	f6c1 73a2 	movt	r3, #8098	; 0x1fa2
   1ec64:	18d3      	adds	r3, r2, r3
   1ec66:	62bb      	str	r3, [r7, #40]	; 0x28
   1ec68:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ec6a:	ea4f 4233 	mov.w	r2, r3, ror #16
   1ec6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ec70:	18d3      	adds	r3, r2, r3
   1ec72:	623b      	str	r3, [r7, #32]
   1ec74:	6a3a      	ldr	r2, [r7, #32]
   1ec76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ec78:	405a      	eors	r2, r3
   1ec7a:	69bb      	ldr	r3, [r7, #24]
   1ec7c:	405a      	eors	r2, r3
   1ec7e:	69fb      	ldr	r3, [r7, #28]
   1ec80:	18d2      	adds	r2, r2, r3
   1ec82:	68fb      	ldr	r3, [r7, #12]
   1ec84:	3308      	adds	r3, #8
   1ec86:	681b      	ldr	r3, [r3, #0]
   1ec88:	18d2      	adds	r2, r2, r3
   1ec8a:	f245 6365 	movw	r3, #22117	; 0x5665
   1ec8e:	f2cc 43ac 	movt	r3, #50348	; 0xc4ac
   1ec92:	18d3      	adds	r3, r2, r3
   1ec94:	62bb      	str	r3, [r7, #40]	; 0x28
   1ec96:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ec98:	ea4f 2273 	mov.w	r2, r3, ror #9
   1ec9c:	6a3b      	ldr	r3, [r7, #32]
   1ec9e:	18d3      	adds	r3, r2, r3
   1eca0:	61fb      	str	r3, [r7, #28]
   1eca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eca4:	43da      	mvns	r2, r3
   1eca6:	69fb      	ldr	r3, [r7, #28]
   1eca8:	431a      	orrs	r2, r3
   1ecaa:	6a3b      	ldr	r3, [r7, #32]
   1ecac:	405a      	eors	r2, r3
   1ecae:	69bb      	ldr	r3, [r7, #24]
   1ecb0:	18d2      	adds	r2, r2, r3
   1ecb2:	68fb      	ldr	r3, [r7, #12]
   1ecb4:	681b      	ldr	r3, [r3, #0]
   1ecb6:	18d2      	adds	r2, r2, r3
   1ecb8:	f242 2344 	movw	r3, #8772	; 0x2244
   1ecbc:	f2cf 4329 	movt	r3, #62505	; 0xf429
   1ecc0:	18d3      	adds	r3, r2, r3
   1ecc2:	62bb      	str	r3, [r7, #40]	; 0x28
   1ecc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ecc6:	ea4f 62b3 	mov.w	r2, r3, ror #26
   1ecca:	69fb      	ldr	r3, [r7, #28]
   1eccc:	18d3      	adds	r3, r2, r3
   1ecce:	61bb      	str	r3, [r7, #24]
   1ecd0:	6a3b      	ldr	r3, [r7, #32]
   1ecd2:	43da      	mvns	r2, r3
   1ecd4:	69bb      	ldr	r3, [r7, #24]
   1ecd6:	431a      	orrs	r2, r3
   1ecd8:	69fb      	ldr	r3, [r7, #28]
   1ecda:	405a      	eors	r2, r3
   1ecdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ecde:	18d2      	adds	r2, r2, r3
   1ece0:	68fb      	ldr	r3, [r7, #12]
   1ece2:	331c      	adds	r3, #28
   1ece4:	681b      	ldr	r3, [r3, #0]
   1ece6:	18d2      	adds	r2, r2, r3
   1ece8:	f64f 7397 	movw	r3, #65431	; 0xff97
   1ecec:	f2c4 332a 	movt	r3, #17194	; 0x432a
   1ecf0:	18d3      	adds	r3, r2, r3
   1ecf2:	62bb      	str	r3, [r7, #40]	; 0x28
   1ecf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ecf6:	ea4f 52b3 	mov.w	r2, r3, ror #22
   1ecfa:	69bb      	ldr	r3, [r7, #24]
   1ecfc:	18d3      	adds	r3, r2, r3
   1ecfe:	627b      	str	r3, [r7, #36]	; 0x24
   1ed00:	69fb      	ldr	r3, [r7, #28]
   1ed02:	43da      	mvns	r2, r3
   1ed04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ed06:	431a      	orrs	r2, r3
   1ed08:	69bb      	ldr	r3, [r7, #24]
   1ed0a:	405a      	eors	r2, r3
   1ed0c:	6a3b      	ldr	r3, [r7, #32]
   1ed0e:	18d2      	adds	r2, r2, r3
   1ed10:	68fb      	ldr	r3, [r7, #12]
   1ed12:	3338      	adds	r3, #56	; 0x38
   1ed14:	681b      	ldr	r3, [r3, #0]
   1ed16:	18d2      	adds	r2, r2, r3
   1ed18:	f242 33a7 	movw	r3, #9127	; 0x23a7
   1ed1c:	f6ca 3394 	movt	r3, #43924	; 0xab94
   1ed20:	18d3      	adds	r3, r2, r3
   1ed22:	62bb      	str	r3, [r7, #40]	; 0x28
   1ed24:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed26:	ea4f 4273 	mov.w	r2, r3, ror #17
   1ed2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ed2c:	18d3      	adds	r3, r2, r3
   1ed2e:	623b      	str	r3, [r7, #32]
   1ed30:	69bb      	ldr	r3, [r7, #24]
   1ed32:	43da      	mvns	r2, r3
   1ed34:	6a3b      	ldr	r3, [r7, #32]
   1ed36:	431a      	orrs	r2, r3
   1ed38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ed3a:	405a      	eors	r2, r3
   1ed3c:	69fb      	ldr	r3, [r7, #28]
   1ed3e:	18d2      	adds	r2, r2, r3
   1ed40:	68fb      	ldr	r3, [r7, #12]
   1ed42:	3314      	adds	r3, #20
   1ed44:	681b      	ldr	r3, [r3, #0]
   1ed46:	18d2      	adds	r2, r2, r3
   1ed48:	f24a 0339 	movw	r3, #41017	; 0xa039
   1ed4c:	f6cf 4393 	movt	r3, #64659	; 0xfc93
   1ed50:	18d3      	adds	r3, r2, r3
   1ed52:	62bb      	str	r3, [r7, #40]	; 0x28
   1ed54:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed56:	ea4f 22f3 	mov.w	r2, r3, ror #11
   1ed5a:	6a3b      	ldr	r3, [r7, #32]
   1ed5c:	18d3      	adds	r3, r2, r3
   1ed5e:	61fb      	str	r3, [r7, #28]
   1ed60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ed62:	43da      	mvns	r2, r3
   1ed64:	69fb      	ldr	r3, [r7, #28]
   1ed66:	431a      	orrs	r2, r3
   1ed68:	6a3b      	ldr	r3, [r7, #32]
   1ed6a:	405a      	eors	r2, r3
   1ed6c:	69bb      	ldr	r3, [r7, #24]
   1ed6e:	18d2      	adds	r2, r2, r3
   1ed70:	68fb      	ldr	r3, [r7, #12]
   1ed72:	3330      	adds	r3, #48	; 0x30
   1ed74:	681b      	ldr	r3, [r3, #0]
   1ed76:	18d2      	adds	r2, r2, r3
   1ed78:	f645 13c3 	movw	r3, #22979	; 0x59c3
   1ed7c:	f2c6 535b 	movt	r3, #25947	; 0x655b
   1ed80:	18d3      	adds	r3, r2, r3
   1ed82:	62bb      	str	r3, [r7, #40]	; 0x28
   1ed84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed86:	ea4f 62b3 	mov.w	r2, r3, ror #26
   1ed8a:	69fb      	ldr	r3, [r7, #28]
   1ed8c:	18d3      	adds	r3, r2, r3
   1ed8e:	61bb      	str	r3, [r7, #24]
   1ed90:	6a3b      	ldr	r3, [r7, #32]
   1ed92:	43da      	mvns	r2, r3
   1ed94:	69bb      	ldr	r3, [r7, #24]
   1ed96:	431a      	orrs	r2, r3
   1ed98:	69fb      	ldr	r3, [r7, #28]
   1ed9a:	405a      	eors	r2, r3
   1ed9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ed9e:	18d2      	adds	r2, r2, r3
   1eda0:	68fb      	ldr	r3, [r7, #12]
   1eda2:	330c      	adds	r3, #12
   1eda4:	681b      	ldr	r3, [r3, #0]
   1eda6:	18d2      	adds	r2, r2, r3
   1eda8:	f64c 4392 	movw	r3, #52370	; 0xcc92
   1edac:	f6c8 730c 	movt	r3, #36620	; 0x8f0c
   1edb0:	18d3      	adds	r3, r2, r3
   1edb2:	62bb      	str	r3, [r7, #40]	; 0x28
   1edb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1edb6:	ea4f 52b3 	mov.w	r2, r3, ror #22
   1edba:	69bb      	ldr	r3, [r7, #24]
   1edbc:	18d3      	adds	r3, r2, r3
   1edbe:	627b      	str	r3, [r7, #36]	; 0x24
   1edc0:	69fb      	ldr	r3, [r7, #28]
   1edc2:	43da      	mvns	r2, r3
   1edc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1edc6:	431a      	orrs	r2, r3
   1edc8:	69bb      	ldr	r3, [r7, #24]
   1edca:	405a      	eors	r2, r3
   1edcc:	6a3b      	ldr	r3, [r7, #32]
   1edce:	18d2      	adds	r2, r2, r3
   1edd0:	68fb      	ldr	r3, [r7, #12]
   1edd2:	3328      	adds	r3, #40	; 0x28
   1edd4:	681b      	ldr	r3, [r3, #0]
   1edd6:	18d3      	adds	r3, r2, r3
   1edd8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1eddc:	f6a3 3383 	subw	r3, r3, #2947	; 0xb83
   1ede0:	62bb      	str	r3, [r7, #40]	; 0x28
   1ede2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ede4:	ea4f 4273 	mov.w	r2, r3, ror #17
   1ede8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1edea:	18d3      	adds	r3, r2, r3
   1edec:	623b      	str	r3, [r7, #32]
   1edee:	69bb      	ldr	r3, [r7, #24]
   1edf0:	43da      	mvns	r2, r3
   1edf2:	6a3b      	ldr	r3, [r7, #32]
   1edf4:	431a      	orrs	r2, r3
   1edf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1edf8:	405a      	eors	r2, r3
   1edfa:	69fb      	ldr	r3, [r7, #28]
   1edfc:	18d2      	adds	r2, r2, r3
   1edfe:	68fb      	ldr	r3, [r7, #12]
   1ee00:	3304      	adds	r3, #4
   1ee02:	681b      	ldr	r3, [r3, #0]
   1ee04:	18d2      	adds	r2, r2, r3
   1ee06:	f645 53d1 	movw	r3, #24017	; 0x5dd1
   1ee0a:	f2c8 5384 	movt	r3, #34180	; 0x8584
   1ee0e:	18d3      	adds	r3, r2, r3
   1ee10:	62bb      	str	r3, [r7, #40]	; 0x28
   1ee12:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ee14:	ea4f 22f3 	mov.w	r2, r3, ror #11
   1ee18:	6a3b      	ldr	r3, [r7, #32]
   1ee1a:	18d3      	adds	r3, r2, r3
   1ee1c:	61fb      	str	r3, [r7, #28]
   1ee1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ee20:	43da      	mvns	r2, r3
   1ee22:	69fb      	ldr	r3, [r7, #28]
   1ee24:	431a      	orrs	r2, r3
   1ee26:	6a3b      	ldr	r3, [r7, #32]
   1ee28:	405a      	eors	r2, r3
   1ee2a:	69bb      	ldr	r3, [r7, #24]
   1ee2c:	18d2      	adds	r2, r2, r3
   1ee2e:	68fb      	ldr	r3, [r7, #12]
   1ee30:	3320      	adds	r3, #32
   1ee32:	681b      	ldr	r3, [r3, #0]
   1ee34:	18d2      	adds	r2, r2, r3
   1ee36:	f647 634f 	movw	r3, #32335	; 0x7e4f
   1ee3a:	f6c6 73a8 	movt	r3, #28584	; 0x6fa8
   1ee3e:	18d3      	adds	r3, r2, r3
   1ee40:	62bb      	str	r3, [r7, #40]	; 0x28
   1ee42:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ee44:	ea4f 62b3 	mov.w	r2, r3, ror #26
   1ee48:	69fb      	ldr	r3, [r7, #28]
   1ee4a:	18d3      	adds	r3, r2, r3
   1ee4c:	61bb      	str	r3, [r7, #24]
   1ee4e:	6a3b      	ldr	r3, [r7, #32]
   1ee50:	43da      	mvns	r2, r3
   1ee52:	69bb      	ldr	r3, [r7, #24]
   1ee54:	431a      	orrs	r2, r3
   1ee56:	69fb      	ldr	r3, [r7, #28]
   1ee58:	405a      	eors	r2, r3
   1ee5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ee5c:	18d2      	adds	r2, r2, r3
   1ee5e:	68fb      	ldr	r3, [r7, #12]
   1ee60:	333c      	adds	r3, #60	; 0x3c
   1ee62:	681b      	ldr	r3, [r3, #0]
   1ee64:	18d2      	adds	r2, r2, r3
   1ee66:	f24e 63e0 	movw	r3, #59104	; 0xe6e0
   1ee6a:	f6cf 632c 	movt	r3, #65068	; 0xfe2c
   1ee6e:	18d3      	adds	r3, r2, r3
   1ee70:	62bb      	str	r3, [r7, #40]	; 0x28
   1ee72:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ee74:	ea4f 52b3 	mov.w	r2, r3, ror #22
   1ee78:	69bb      	ldr	r3, [r7, #24]
   1ee7a:	18d3      	adds	r3, r2, r3
   1ee7c:	627b      	str	r3, [r7, #36]	; 0x24
   1ee7e:	69fb      	ldr	r3, [r7, #28]
   1ee80:	43da      	mvns	r2, r3
   1ee82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ee84:	431a      	orrs	r2, r3
   1ee86:	69bb      	ldr	r3, [r7, #24]
   1ee88:	405a      	eors	r2, r3
   1ee8a:	6a3b      	ldr	r3, [r7, #32]
   1ee8c:	18d2      	adds	r2, r2, r3
   1ee8e:	68fb      	ldr	r3, [r7, #12]
   1ee90:	3318      	adds	r3, #24
   1ee92:	681b      	ldr	r3, [r3, #0]
   1ee94:	18d2      	adds	r2, r2, r3
   1ee96:	f244 3314 	movw	r3, #17172	; 0x4314
   1ee9a:	f2ca 3301 	movt	r3, #41729	; 0xa301
   1ee9e:	18d3      	adds	r3, r2, r3
   1eea0:	62bb      	str	r3, [r7, #40]	; 0x28
   1eea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eea4:	ea4f 4273 	mov.w	r2, r3, ror #17
   1eea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eeaa:	18d3      	adds	r3, r2, r3
   1eeac:	623b      	str	r3, [r7, #32]
   1eeae:	69bb      	ldr	r3, [r7, #24]
   1eeb0:	43da      	mvns	r2, r3
   1eeb2:	6a3b      	ldr	r3, [r7, #32]
   1eeb4:	431a      	orrs	r2, r3
   1eeb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eeb8:	405a      	eors	r2, r3
   1eeba:	69fb      	ldr	r3, [r7, #28]
   1eebc:	18d2      	adds	r2, r2, r3
   1eebe:	68fb      	ldr	r3, [r7, #12]
   1eec0:	3334      	adds	r3, #52	; 0x34
   1eec2:	681b      	ldr	r3, [r3, #0]
   1eec4:	18d2      	adds	r2, r2, r3
   1eec6:	f241 13a1 	movw	r3, #4513	; 0x11a1
   1eeca:	f6c4 6308 	movt	r3, #19976	; 0x4e08
   1eece:	18d3      	adds	r3, r2, r3
   1eed0:	62bb      	str	r3, [r7, #40]	; 0x28
   1eed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eed4:	ea4f 22f3 	mov.w	r2, r3, ror #11
   1eed8:	6a3b      	ldr	r3, [r7, #32]
   1eeda:	18d3      	adds	r3, r2, r3
   1eedc:	61fb      	str	r3, [r7, #28]
   1eede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eee0:	43da      	mvns	r2, r3
   1eee2:	69fb      	ldr	r3, [r7, #28]
   1eee4:	431a      	orrs	r2, r3
   1eee6:	6a3b      	ldr	r3, [r7, #32]
   1eee8:	405a      	eors	r2, r3
   1eeea:	69bb      	ldr	r3, [r7, #24]
   1eeec:	18d2      	adds	r2, r2, r3
   1eeee:	68fb      	ldr	r3, [r7, #12]
   1eef0:	3310      	adds	r3, #16
   1eef2:	681b      	ldr	r3, [r3, #0]
   1eef4:	18d2      	adds	r2, r2, r3
   1eef6:	f647 6382 	movw	r3, #32386	; 0x7e82
   1eefa:	f2cf 7353 	movt	r3, #63315	; 0xf753
   1eefe:	18d3      	adds	r3, r2, r3
   1ef00:	62bb      	str	r3, [r7, #40]	; 0x28
   1ef02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ef04:	ea4f 62b3 	mov.w	r2, r3, ror #26
   1ef08:	69fb      	ldr	r3, [r7, #28]
   1ef0a:	18d3      	adds	r3, r2, r3
   1ef0c:	61bb      	str	r3, [r7, #24]
   1ef0e:	6a3b      	ldr	r3, [r7, #32]
   1ef10:	43da      	mvns	r2, r3
   1ef12:	69bb      	ldr	r3, [r7, #24]
   1ef14:	431a      	orrs	r2, r3
   1ef16:	69fb      	ldr	r3, [r7, #28]
   1ef18:	405a      	eors	r2, r3
   1ef1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ef1c:	18d2      	adds	r2, r2, r3
   1ef1e:	68fb      	ldr	r3, [r7, #12]
   1ef20:	332c      	adds	r3, #44	; 0x2c
   1ef22:	681b      	ldr	r3, [r3, #0]
   1ef24:	18d2      	adds	r2, r2, r3
   1ef26:	f24f 2335 	movw	r3, #62005	; 0xf235
   1ef2a:	f6cb 533a 	movt	r3, #48442	; 0xbd3a
   1ef2e:	18d3      	adds	r3, r2, r3
   1ef30:	62bb      	str	r3, [r7, #40]	; 0x28
   1ef32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ef34:	ea4f 52b3 	mov.w	r2, r3, ror #22
   1ef38:	69bb      	ldr	r3, [r7, #24]
   1ef3a:	18d3      	adds	r3, r2, r3
   1ef3c:	627b      	str	r3, [r7, #36]	; 0x24
   1ef3e:	69fb      	ldr	r3, [r7, #28]
   1ef40:	43da      	mvns	r2, r3
   1ef42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ef44:	431a      	orrs	r2, r3
   1ef46:	69bb      	ldr	r3, [r7, #24]
   1ef48:	405a      	eors	r2, r3
   1ef4a:	6a3b      	ldr	r3, [r7, #32]
   1ef4c:	18d2      	adds	r2, r2, r3
   1ef4e:	68fb      	ldr	r3, [r7, #12]
   1ef50:	3308      	adds	r3, #8
   1ef52:	681b      	ldr	r3, [r3, #0]
   1ef54:	18d2      	adds	r2, r2, r3
   1ef56:	f24d 23bb 	movw	r3, #53947	; 0xd2bb
   1ef5a:	f6c2 23d7 	movt	r3, #10967	; 0x2ad7
   1ef5e:	18d3      	adds	r3, r2, r3
   1ef60:	62bb      	str	r3, [r7, #40]	; 0x28
   1ef62:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ef64:	ea4f 4273 	mov.w	r2, r3, ror #17
   1ef68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ef6a:	18d3      	adds	r3, r2, r3
   1ef6c:	623b      	str	r3, [r7, #32]
   1ef6e:	69bb      	ldr	r3, [r7, #24]
   1ef70:	43da      	mvns	r2, r3
   1ef72:	6a3b      	ldr	r3, [r7, #32]
   1ef74:	431a      	orrs	r2, r3
   1ef76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ef78:	405a      	eors	r2, r3
   1ef7a:	69fb      	ldr	r3, [r7, #28]
   1ef7c:	18d2      	adds	r2, r2, r3
   1ef7e:	68fb      	ldr	r3, [r7, #12]
   1ef80:	3324      	adds	r3, #36	; 0x24
   1ef82:	681b      	ldr	r3, [r3, #0]
   1ef84:	18d2      	adds	r2, r2, r3
   1ef86:	f24d 3391 	movw	r3, #54161	; 0xd391
   1ef8a:	f6ce 3386 	movt	r3, #60294	; 0xeb86
   1ef8e:	18d3      	adds	r3, r2, r3
   1ef90:	62bb      	str	r3, [r7, #40]	; 0x28
   1ef92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ef94:	ea4f 22f3 	mov.w	r2, r3, ror #11
   1ef98:	6a3b      	ldr	r3, [r7, #32]
   1ef9a:	18d3      	adds	r3, r2, r3
   1ef9c:	61fb      	str	r3, [r7, #28]
   1ef9e:	687b      	ldr	r3, [r7, #4]
   1efa0:	689a      	ldr	r2, [r3, #8]
   1efa2:	69bb      	ldr	r3, [r7, #24]
   1efa4:	18d2      	adds	r2, r2, r3
   1efa6:	687b      	ldr	r3, [r7, #4]
   1efa8:	609a      	str	r2, [r3, #8]
   1efaa:	687b      	ldr	r3, [r7, #4]
   1efac:	68da      	ldr	r2, [r3, #12]
   1efae:	69fb      	ldr	r3, [r7, #28]
   1efb0:	18d2      	adds	r2, r2, r3
   1efb2:	687b      	ldr	r3, [r7, #4]
   1efb4:	60da      	str	r2, [r3, #12]
   1efb6:	687b      	ldr	r3, [r7, #4]
   1efb8:	691a      	ldr	r2, [r3, #16]
   1efba:	6a3b      	ldr	r3, [r7, #32]
   1efbc:	18d2      	adds	r2, r2, r3
   1efbe:	687b      	ldr	r3, [r7, #4]
   1efc0:	611a      	str	r2, [r3, #16]
   1efc2:	687b      	ldr	r3, [r7, #4]
   1efc4:	695a      	ldr	r2, [r3, #20]
   1efc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1efc8:	18d2      	adds	r2, r2, r3
   1efca:	687b      	ldr	r3, [r7, #4]
   1efcc:	615a      	str	r2, [r3, #20]
   1efce:	4b06      	ldr	r3, [pc, #24]	; (1efe8 <md5_process+0xd5c>)
   1efd0:	58e3      	ldr	r3, [r4, r3]
   1efd2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1efd4:	681b      	ldr	r3, [r3, #0]
   1efd6:	429a      	cmp	r2, r3
   1efd8:	d001      	beq.n	1efde <md5_process+0xd52>
   1efda:	f7e9 ffe3 	bl	8fa4 <__stack_chk_fail>
   1efde:	f107 0774 	add.w	r7, r7, #116	; 0x74
   1efe2:	46bd      	mov	sp, r7
   1efe4:	bd90      	pop	{r4, r7, pc}
   1efe6:	bf00      	nop
   1efe8:	000000ac 	.word	0x000000ac

0001efec <md5_init>:
   1efec:	b580      	push	{r7, lr}
   1efee:	b084      	sub	sp, #16
   1eff0:	af00      	add	r7, sp, #0
   1eff2:	6078      	str	r0, [r7, #4]
   1eff4:	4a18      	ldr	r2, [pc, #96]	; (1f058 <md5_init+0x6c>)
   1eff6:	447a      	add	r2, pc
   1eff8:	4b18      	ldr	r3, [pc, #96]	; (1f05c <md5_init+0x70>)
   1effa:	58d3      	ldr	r3, [r2, r3]
   1effc:	681b      	ldr	r3, [r3, #0]
   1effe:	60fb      	str	r3, [r7, #12]
   1f000:	687b      	ldr	r3, [r7, #4]
   1f002:	2100      	movs	r1, #0
   1f004:	6059      	str	r1, [r3, #4]
   1f006:	687b      	ldr	r3, [r7, #4]
   1f008:	6859      	ldr	r1, [r3, #4]
   1f00a:	687b      	ldr	r3, [r7, #4]
   1f00c:	6019      	str	r1, [r3, #0]
   1f00e:	6879      	ldr	r1, [r7, #4]
   1f010:	f242 3301 	movw	r3, #8961	; 0x2301
   1f014:	f2c6 7345 	movt	r3, #26437	; 0x6745
   1f018:	608b      	str	r3, [r1, #8]
   1f01a:	6879      	ldr	r1, [r7, #4]
   1f01c:	f64a 3389 	movw	r3, #43913	; 0xab89
   1f020:	f6ce 73cd 	movt	r3, #61389	; 0xefcd
   1f024:	60cb      	str	r3, [r1, #12]
   1f026:	6879      	ldr	r1, [r7, #4]
   1f028:	f64d 43fe 	movw	r3, #56574	; 0xdcfe
   1f02c:	f6c9 03ba 	movt	r3, #39098	; 0x98ba
   1f030:	610b      	str	r3, [r1, #16]
   1f032:	6879      	ldr	r1, [r7, #4]
   1f034:	f245 4376 	movw	r3, #21622	; 0x5476
   1f038:	f2c1 0332 	movt	r3, #4146	; 0x1032
   1f03c:	614b      	str	r3, [r1, #20]
   1f03e:	4b07      	ldr	r3, [pc, #28]	; (1f05c <md5_init+0x70>)
   1f040:	58d3      	ldr	r3, [r2, r3]
   1f042:	68fa      	ldr	r2, [r7, #12]
   1f044:	681b      	ldr	r3, [r3, #0]
   1f046:	429a      	cmp	r2, r3
   1f048:	d001      	beq.n	1f04e <md5_init+0x62>
   1f04a:	f7e9 ffab 	bl	8fa4 <__stack_chk_fail>
   1f04e:	f107 0710 	add.w	r7, r7, #16
   1f052:	46bd      	mov	sp, r7
   1f054:	bd80      	pop	{r7, pc}
   1f056:	bf00      	nop
   1f058:	0001011e 	.word	0x0001011e
   1f05c:	000000ac 	.word	0x000000ac

0001f060 <md5_append>:
   1f060:	b590      	push	{r4, r7, lr}
   1f062:	b08b      	sub	sp, #44	; 0x2c
   1f064:	af00      	add	r7, sp, #0
   1f066:	60f8      	str	r0, [r7, #12]
   1f068:	60b9      	str	r1, [r7, #8]
   1f06a:	607a      	str	r2, [r7, #4]
   1f06c:	4c40      	ldr	r4, [pc, #256]	; (1f170 <md5_append+0x110>)
   1f06e:	447c      	add	r4, pc
   1f070:	4b40      	ldr	r3, [pc, #256]	; (1f174 <md5_append+0x114>)
   1f072:	58e3      	ldr	r3, [r4, r3]
   1f074:	681b      	ldr	r3, [r3, #0]
   1f076:	627b      	str	r3, [r7, #36]	; 0x24
   1f078:	68bb      	ldr	r3, [r7, #8]
   1f07a:	613b      	str	r3, [r7, #16]
   1f07c:	687b      	ldr	r3, [r7, #4]
   1f07e:	617b      	str	r3, [r7, #20]
   1f080:	68fb      	ldr	r3, [r7, #12]
   1f082:	681b      	ldr	r3, [r3, #0]
   1f084:	08db      	lsrs	r3, r3, #3
   1f086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1f08a:	61bb      	str	r3, [r7, #24]
   1f08c:	687b      	ldr	r3, [r7, #4]
   1f08e:	00db      	lsls	r3, r3, #3
   1f090:	61fb      	str	r3, [r7, #28]
   1f092:	687b      	ldr	r3, [r7, #4]
   1f094:	2b00      	cmp	r3, #0
   1f096:	dd5c      	ble.n	1f152 <md5_append+0xf2>
   1f098:	68fb      	ldr	r3, [r7, #12]
   1f09a:	685a      	ldr	r2, [r3, #4]
   1f09c:	687b      	ldr	r3, [r7, #4]
   1f09e:	175b      	asrs	r3, r3, #29
   1f0a0:	18d2      	adds	r2, r2, r3
   1f0a2:	68fb      	ldr	r3, [r7, #12]
   1f0a4:	605a      	str	r2, [r3, #4]
   1f0a6:	68fb      	ldr	r3, [r7, #12]
   1f0a8:	681a      	ldr	r2, [r3, #0]
   1f0aa:	69fb      	ldr	r3, [r7, #28]
   1f0ac:	18d2      	adds	r2, r2, r3
   1f0ae:	68fb      	ldr	r3, [r7, #12]
   1f0b0:	601a      	str	r2, [r3, #0]
   1f0b2:	68fb      	ldr	r3, [r7, #12]
   1f0b4:	681a      	ldr	r2, [r3, #0]
   1f0b6:	69fb      	ldr	r3, [r7, #28]
   1f0b8:	429a      	cmp	r2, r3
   1f0ba:	d204      	bcs.n	1f0c6 <md5_append+0x66>
   1f0bc:	68fb      	ldr	r3, [r7, #12]
   1f0be:	685b      	ldr	r3, [r3, #4]
   1f0c0:	1c5a      	adds	r2, r3, #1
   1f0c2:	68fb      	ldr	r3, [r7, #12]
   1f0c4:	605a      	str	r2, [r3, #4]
   1f0c6:	69bb      	ldr	r3, [r7, #24]
   1f0c8:	2b00      	cmp	r3, #0
   1f0ca:	d032      	beq.n	1f132 <md5_append+0xd2>
   1f0cc:	69ba      	ldr	r2, [r7, #24]
   1f0ce:	687b      	ldr	r3, [r7, #4]
   1f0d0:	18d3      	adds	r3, r2, r3
   1f0d2:	2b40      	cmp	r3, #64	; 0x40
   1f0d4:	dd03      	ble.n	1f0de <md5_append+0x7e>
   1f0d6:	69bb      	ldr	r3, [r7, #24]
   1f0d8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   1f0dc:	e000      	b.n	1f0e0 <md5_append+0x80>
   1f0de:	687b      	ldr	r3, [r7, #4]
   1f0e0:	623b      	str	r3, [r7, #32]
   1f0e2:	69bb      	ldr	r3, [r7, #24]
   1f0e4:	3318      	adds	r3, #24
   1f0e6:	68fa      	ldr	r2, [r7, #12]
   1f0e8:	18d2      	adds	r2, r2, r3
   1f0ea:	6a3b      	ldr	r3, [r7, #32]
   1f0ec:	4610      	mov	r0, r2
   1f0ee:	6939      	ldr	r1, [r7, #16]
   1f0f0:	461a      	mov	r2, r3
   1f0f2:	f7e9 edc2 	blx	8c78 <_init+0x118>
   1f0f6:	69ba      	ldr	r2, [r7, #24]
   1f0f8:	6a3b      	ldr	r3, [r7, #32]
   1f0fa:	18d3      	adds	r3, r2, r3
   1f0fc:	2b3f      	cmp	r3, #63	; 0x3f
   1f0fe:	dd2a      	ble.n	1f156 <md5_append+0xf6>
   1f100:	6a3b      	ldr	r3, [r7, #32]
   1f102:	693a      	ldr	r2, [r7, #16]
   1f104:	18d3      	adds	r3, r2, r3
   1f106:	613b      	str	r3, [r7, #16]
   1f108:	697a      	ldr	r2, [r7, #20]
   1f10a:	6a3b      	ldr	r3, [r7, #32]
   1f10c:	1ad3      	subs	r3, r2, r3
   1f10e:	617b      	str	r3, [r7, #20]
   1f110:	68fb      	ldr	r3, [r7, #12]
   1f112:	3318      	adds	r3, #24
   1f114:	68f8      	ldr	r0, [r7, #12]
   1f116:	4619      	mov	r1, r3
   1f118:	f7ff f8b8 	bl	1e28c <md5_process>
   1f11c:	e009      	b.n	1f132 <md5_append+0xd2>
   1f11e:	68f8      	ldr	r0, [r7, #12]
   1f120:	6939      	ldr	r1, [r7, #16]
   1f122:	f7ff f8b3 	bl	1e28c <md5_process>
   1f126:	693b      	ldr	r3, [r7, #16]
   1f128:	3340      	adds	r3, #64	; 0x40
   1f12a:	613b      	str	r3, [r7, #16]
   1f12c:	697b      	ldr	r3, [r7, #20]
   1f12e:	3b40      	subs	r3, #64	; 0x40
   1f130:	617b      	str	r3, [r7, #20]
   1f132:	697b      	ldr	r3, [r7, #20]
   1f134:	2b3f      	cmp	r3, #63	; 0x3f
   1f136:	dcf2      	bgt.n	1f11e <md5_append+0xbe>
   1f138:	697b      	ldr	r3, [r7, #20]
   1f13a:	2b00      	cmp	r3, #0
   1f13c:	d00c      	beq.n	1f158 <md5_append+0xf8>
   1f13e:	68fb      	ldr	r3, [r7, #12]
   1f140:	f103 0218 	add.w	r2, r3, #24
   1f144:	697b      	ldr	r3, [r7, #20]
   1f146:	4610      	mov	r0, r2
   1f148:	6939      	ldr	r1, [r7, #16]
   1f14a:	461a      	mov	r2, r3
   1f14c:	f7e9 ed94 	blx	8c78 <_init+0x118>
   1f150:	e002      	b.n	1f158 <md5_append+0xf8>
   1f152:	bf00      	nop
   1f154:	e000      	b.n	1f158 <md5_append+0xf8>
   1f156:	bf00      	nop
   1f158:	4b06      	ldr	r3, [pc, #24]	; (1f174 <md5_append+0x114>)
   1f15a:	58e3      	ldr	r3, [r4, r3]
   1f15c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1f15e:	681b      	ldr	r3, [r3, #0]
   1f160:	429a      	cmp	r2, r3
   1f162:	d001      	beq.n	1f168 <md5_append+0x108>
   1f164:	f7e9 ff1e 	bl	8fa4 <__stack_chk_fail>
   1f168:	f107 072c 	add.w	r7, r7, #44	; 0x2c
   1f16c:	46bd      	mov	sp, r7
   1f16e:	bd90      	pop	{r4, r7, pc}
   1f170:	000100a6 	.word	0x000100a6
   1f174:	000000ac 	.word	0x000000ac

0001f178 <md5_finish>:
   1f178:	b590      	push	{r4, r7, lr}
   1f17a:	b087      	sub	sp, #28
   1f17c:	af00      	add	r7, sp, #0
   1f17e:	6078      	str	r0, [r7, #4]
   1f180:	6039      	str	r1, [r7, #0]
   1f182:	4c2e      	ldr	r4, [pc, #184]	; (1f23c <md5_finish+0xc4>)
   1f184:	447c      	add	r4, pc
   1f186:	4b2e      	ldr	r3, [pc, #184]	; (1f240 <md5_finish+0xc8>)
   1f188:	58e3      	ldr	r3, [r4, r3]
   1f18a:	681b      	ldr	r3, [r3, #0]
   1f18c:	617b      	str	r3, [r7, #20]
   1f18e:	2300      	movs	r3, #0
   1f190:	60bb      	str	r3, [r7, #8]
   1f192:	e013      	b.n	1f1bc <md5_finish+0x44>
   1f194:	68bb      	ldr	r3, [r7, #8]
   1f196:	109a      	asrs	r2, r3, #2
   1f198:	687b      	ldr	r3, [r7, #4]
   1f19a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1f19e:	68bb      	ldr	r3, [r7, #8]
   1f1a0:	f003 0303 	and.w	r3, r3, #3
   1f1a4:	00db      	lsls	r3, r3, #3
   1f1a6:	fa22 f303 	lsr.w	r3, r2, r3
   1f1aa:	b2da      	uxtb	r2, r3
   1f1ac:	f107 010c 	add.w	r1, r7, #12
   1f1b0:	68bb      	ldr	r3, [r7, #8]
   1f1b2:	18cb      	adds	r3, r1, r3
   1f1b4:	701a      	strb	r2, [r3, #0]
   1f1b6:	68bb      	ldr	r3, [r7, #8]
   1f1b8:	3301      	adds	r3, #1
   1f1ba:	60bb      	str	r3, [r7, #8]
   1f1bc:	68bb      	ldr	r3, [r7, #8]
   1f1be:	2b07      	cmp	r3, #7
   1f1c0:	dde8      	ble.n	1f194 <md5_finish+0x1c>
   1f1c2:	687b      	ldr	r3, [r7, #4]
   1f1c4:	681b      	ldr	r3, [r3, #0]
   1f1c6:	08db      	lsrs	r3, r3, #3
   1f1c8:	f1c3 0337 	rsb	r3, r3, #55	; 0x37
   1f1cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1f1d0:	3301      	adds	r3, #1
   1f1d2:	6878      	ldr	r0, [r7, #4]
   1f1d4:	4a1b      	ldr	r2, [pc, #108]	; (1f244 <md5_finish+0xcc>)
   1f1d6:	447a      	add	r2, pc
   1f1d8:	4611      	mov	r1, r2
   1f1da:	461a      	mov	r2, r3
   1f1dc:	f7ff ff40 	bl	1f060 <md5_append>
   1f1e0:	f107 030c 	add.w	r3, r7, #12
   1f1e4:	6878      	ldr	r0, [r7, #4]
   1f1e6:	4619      	mov	r1, r3
   1f1e8:	2208      	movs	r2, #8
   1f1ea:	f7ff ff39 	bl	1f060 <md5_append>
   1f1ee:	2300      	movs	r3, #0
   1f1f0:	60bb      	str	r3, [r7, #8]
   1f1f2:	e013      	b.n	1f21c <md5_finish+0xa4>
   1f1f4:	68bb      	ldr	r3, [r7, #8]
   1f1f6:	683a      	ldr	r2, [r7, #0]
   1f1f8:	18d3      	adds	r3, r2, r3
   1f1fa:	68ba      	ldr	r2, [r7, #8]
   1f1fc:	1091      	asrs	r1, r2, #2
   1f1fe:	687a      	ldr	r2, [r7, #4]
   1f200:	3102      	adds	r1, #2
   1f202:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1f206:	68ba      	ldr	r2, [r7, #8]
   1f208:	f002 0203 	and.w	r2, r2, #3
   1f20c:	00d2      	lsls	r2, r2, #3
   1f20e:	fa21 f202 	lsr.w	r2, r1, r2
   1f212:	b2d2      	uxtb	r2, r2
   1f214:	701a      	strb	r2, [r3, #0]
   1f216:	68bb      	ldr	r3, [r7, #8]
   1f218:	3301      	adds	r3, #1
   1f21a:	60bb      	str	r3, [r7, #8]
   1f21c:	68bb      	ldr	r3, [r7, #8]
   1f21e:	2b0f      	cmp	r3, #15
   1f220:	dde8      	ble.n	1f1f4 <md5_finish+0x7c>
   1f222:	4b07      	ldr	r3, [pc, #28]	; (1f240 <md5_finish+0xc8>)
   1f224:	58e3      	ldr	r3, [r4, r3]
   1f226:	697a      	ldr	r2, [r7, #20]
   1f228:	681b      	ldr	r3, [r3, #0]
   1f22a:	429a      	cmp	r2, r3
   1f22c:	d001      	beq.n	1f232 <md5_finish+0xba>
   1f22e:	f7e9 feb9 	bl	8fa4 <__stack_chk_fail>
   1f232:	f107 071c 	add.w	r7, r7, #28
   1f236:	46bd      	mov	sp, r7
   1f238:	bd90      	pop	{r4, r7, pc}
   1f23a:	bf00      	nop
   1f23c:	0000ff90 	.word	0x0000ff90
   1f240:	000000ac 	.word	0x000000ac
   1f244:	00006fd2 	.word	0x00006fd2

0001f248 <gprs_GetInformation_Init>:
   1f248:	b40f      	push	{r0, r1, r2, r3}
   1f24a:	4805      	ldr	r0, [pc, #20]	; (1f260 <gprs_GetInformation+0xe>)
   1f24c:	4905      	ldr	r1, [pc, #20]	; (1f264 <gprs_GetInformation+0x12>)
   1f24e:	4a06      	ldr	r2, [pc, #24]	; (1f268 <gprs_GetInformation+0x16>)
   1f250:	4710      	bx	r2

0001f252 <gprs_GetInformation>:
   1f252:	b401      	push	{r0}
   1f254:	4803      	ldr	r0, [pc, #12]	; (1f264 <gprs_GetInformation+0x12>)
   1f256:	6800      	ldr	r0, [r0, #0]
   1f258:	4684      	mov	ip, r0
   1f25a:	bc01      	pop	{r0}
   1f25c:	4760      	bx	ip
   1f25e:	0000      	.short	0x0000
   1f260:	000027fb 	.word	0x000027fb
   1f264:	0002f780 	.word	0x0002f780
   1f268:	0001f2b5 	.word	0x0001f2b5

0001f26c <gprs_SetPinModeFree_Init>:
   1f26c:	b40f      	push	{r0, r1, r2, r3}
   1f26e:	4805      	ldr	r0, [pc, #20]	; (1f284 <gprs_SetPinModeFree+0xe>)
   1f270:	4905      	ldr	r1, [pc, #20]	; (1f288 <gprs_SetPinModeFree+0x12>)
   1f272:	4a06      	ldr	r2, [pc, #24]	; (1f28c <gprs_SetPinModeFree+0x16>)
   1f274:	4710      	bx	r2

0001f276 <gprs_SetPinModeFree>:
   1f276:	b401      	push	{r0}
   1f278:	4803      	ldr	r0, [pc, #12]	; (1f288 <gprs_SetPinModeFree+0x12>)
   1f27a:	6800      	ldr	r0, [r0, #0]
   1f27c:	4684      	mov	ip, r0
   1f27e:	bc01      	pop	{r0}
   1f280:	4760      	bx	ip
   1f282:	0000      	.short	0x0000
   1f284:	000027f9 	.word	0x000027f9
   1f288:	0002f790 	.word	0x0002f790
   1f28c:	0001f2b5 	.word	0x0001f2b5

0001f290 <gprs_SubmitPuk_Init>:
   1f290:	b40f      	push	{r0, r1, r2, r3}
   1f292:	4805      	ldr	r0, [pc, #20]	; (1f2a8 <gprs_SubmitPuk+0xe>)
   1f294:	4905      	ldr	r1, [pc, #20]	; (1f2ac <gprs_SubmitPuk+0x12>)
   1f296:	4a06      	ldr	r2, [pc, #24]	; (1f2b0 <gprs_SubmitPuk+0x16>)
   1f298:	4710      	bx	r2

0001f29a <gprs_SubmitPuk>:
   1f29a:	b401      	push	{r0}
   1f29c:	4803      	ldr	r0, [pc, #12]	; (1f2ac <gprs_SubmitPuk+0x12>)
   1f29e:	6800      	ldr	r0, [r0, #0]
   1f2a0:	4684      	mov	ip, r0
   1f2a2:	bc01      	pop	{r0}
   1f2a4:	4760      	bx	ip
   1f2a6:	0000      	.short	0x0000
   1f2a8:	000027fa 	.word	0x000027fa
   1f2ac:	0002f7a0 	.word	0x0002f7a0
   1f2b0:	0001f2b5 	.word	0x0001f2b5

0001f2b4 <LIBGPRS_InitFuncAndBranch>:
   1f2b4:	b500      	push	{lr}
   1f2b6:	f000 f835 	bl	1f324 <LIBGPRS_GetProcAddress>
   1f2ba:	bc04      	pop	{r2}
   1f2bc:	4696      	mov	lr, r2
   1f2be:	4684      	mov	ip, r0
   1f2c0:	bc0f      	pop	{r0, r1, r2, r3}
   1f2c2:	4760      	bx	ip

0001f2c4 <LIBGPRS_GetProcAddressWithoutExit>:
   1f2c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f2c6:	4c13      	ldr	r4, [pc, #76]	; (1f314 <LIBGPRS_GetProcAddressWithoutExit+0x50>)
   1f2c8:	4607      	mov	r7, r0
   1f2ca:	447c      	add	r4, pc
   1f2cc:	460d      	mov	r5, r1
   1f2ce:	6823      	ldr	r3, [r4, #0]
   1f2d0:	b923      	cbnz	r3, 1f2dc <LIBGPRS_GetProcAddressWithoutExit+0x18>
   1f2d2:	4811      	ldr	r0, [pc, #68]	; (1f318 <LIBGPRS_GetProcAddressWithoutExit+0x54>)
   1f2d4:	4478      	add	r0, pc
   1f2d6:	f002 fe70 	bl	21fba <OSL_Dll_Open>
   1f2da:	6020      	str	r0, [r4, #0]
   1f2dc:	4e0f      	ldr	r6, [pc, #60]	; (1f31c <LIBGPRS_GetProcAddressWithoutExit+0x58>)
   1f2de:	447e      	add	r6, pc
   1f2e0:	6834      	ldr	r4, [r6, #0]
   1f2e2:	b95c      	cbnz	r4, 1f2fc <LIBGPRS_GetProcAddressWithoutExit+0x38>
   1f2e4:	4b0e      	ldr	r3, [pc, #56]	; (1f320 <LIBGPRS_GetProcAddressWithoutExit+0x5c>)
   1f2e6:	2003      	movs	r0, #3
   1f2e8:	447b      	add	r3, pc
   1f2ea:	9400      	str	r4, [sp, #0]
   1f2ec:	9301      	str	r3, [sp, #4]
   1f2ee:	4621      	mov	r1, r4
   1f2f0:	4622      	mov	r2, r4
   1f2f2:	4623      	mov	r3, r4
   1f2f4:	f7e9 eca6 	blx	8c44 <_init+0xe4>
   1f2f8:	4620      	mov	r0, r4
   1f2fa:	e005      	b.n	1f308 <LIBGPRS_GetProcAddressWithoutExit+0x44>
   1f2fc:	4620      	mov	r0, r4
   1f2fe:	4639      	mov	r1, r7
   1f300:	f002 fe3b 	bl	21f7a <OSL_Dll_GetSymbolByName>
   1f304:	2301      	movs	r3, #1
   1f306:	6073      	str	r3, [r6, #4]
   1f308:	b115      	cbz	r5, 1f310 <LIBGPRS_GetProcAddressWithoutExit+0x4c>
   1f30a:	682b      	ldr	r3, [r5, #0]
   1f30c:	b103      	cbz	r3, 1f310 <LIBGPRS_GetProcAddressWithoutExit+0x4c>
   1f30e:	6028      	str	r0, [r5, #0]
   1f310:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1f312:	bf00      	nop
   1f314:	00010d16 	.word	0x00010d16
   1f318:	00006f18 	.word	0x00006f18
   1f31c:	00010d02 	.word	0x00010d02
   1f320:	00006f0c 	.word	0x00006f0c

0001f324 <LIBGPRS_GetProcAddress>:
   1f324:	b513      	push	{r0, r1, r4, lr}
   1f326:	f7ff ffcd 	bl	1f2c4 <LIBGPRS_GetProcAddressWithoutExit>
   1f32a:	4604      	mov	r4, r0
   1f32c:	b948      	cbnz	r0, 1f342 <LIBGPRS_GetProcAddress+0x1e>
   1f32e:	4b06      	ldr	r3, [pc, #24]	; (1f348 <LIBGPRS_GetProcAddress+0x24>)
   1f330:	9000      	str	r0, [sp, #0]
   1f332:	447b      	add	r3, pc
   1f334:	2003      	movs	r0, #3
   1f336:	9301      	str	r3, [sp, #4]
   1f338:	4621      	mov	r1, r4
   1f33a:	4622      	mov	r2, r4
   1f33c:	4623      	mov	r3, r4
   1f33e:	f7e9 ec82 	blx	8c44 <_init+0xe4>
   1f342:	4620      	mov	r0, r4
   1f344:	bd1c      	pop	{r2, r3, r4, pc}
   1f346:	bf00      	nop
   1f348:	00006ed9 	.word	0x00006ed9

0001f34c <LIBGPRS_IsPresent>:
   1f34c:	4802      	ldr	r0, [pc, #8]	; (1f358 <LIBGPRS_IsPresent+0xc>)
   1f34e:	b508      	push	{r3, lr}
   1f350:	4478      	add	r0, pc
   1f352:	f002 fe22 	bl	21f9a <OSL_Dll_IsPresent>
   1f356:	bd08      	pop	{r3, pc}
   1f358:	00006e9c 	.word	0x00006e9c

0001f35c <LL_ClearReceiveBuffer_Init>:
   1f35c:	b40f      	push	{r0, r1, r2, r3}
   1f35e:	4805      	ldr	r0, [pc, #20]	; (1f374 <LL_ClearReceiveBuffer+0xe>)
   1f360:	4905      	ldr	r1, [pc, #20]	; (1f378 <LL_ClearReceiveBuffer+0x12>)
   1f362:	4a06      	ldr	r2, [pc, #24]	; (1f37c <LL_ClearReceiveBuffer+0x16>)
   1f364:	4710      	bx	r2

0001f366 <LL_ClearReceiveBuffer>:
   1f366:	b401      	push	{r0}
   1f368:	4803      	ldr	r0, [pc, #12]	; (1f378 <LL_ClearReceiveBuffer+0x12>)
   1f36a:	6800      	ldr	r0, [r0, #0]
   1f36c:	4684      	mov	ip, r0
   1f36e:	bc01      	pop	{r0}
   1f370:	4760      	bx	ip
   1f372:	0000      	.short	0x0000
   1f374:	00002717 	.word	0x00002717
   1f378:	0002f7b0 	.word	0x0002f7b0
   1f37c:	0001f50d 	.word	0x0001f50d

0001f380 <LL_ClearSendBuffer_Init>:
   1f380:	b40f      	push	{r0, r1, r2, r3}
   1f382:	4805      	ldr	r0, [pc, #20]	; (1f398 <LL_ClearSendBuffer+0xe>)
   1f384:	4905      	ldr	r1, [pc, #20]	; (1f39c <LL_ClearSendBuffer+0x12>)
   1f386:	4a06      	ldr	r2, [pc, #24]	; (1f3a0 <LL_ClearSendBuffer+0x16>)
   1f388:	4710      	bx	r2

0001f38a <LL_ClearSendBuffer>:
   1f38a:	b401      	push	{r0}
   1f38c:	4803      	ldr	r0, [pc, #12]	; (1f39c <LL_ClearSendBuffer+0x12>)
   1f38e:	6800      	ldr	r0, [r0, #0]
   1f390:	4684      	mov	ip, r0
   1f392:	bc01      	pop	{r0}
   1f394:	4760      	bx	ip
   1f396:	0000      	.short	0x0000
   1f398:	00002716 	.word	0x00002716
   1f39c:	0002f7c0 	.word	0x0002f7c0
   1f3a0:	0001f50d 	.word	0x0001f50d

0001f3a4 <LL_Configure_Init>:
   1f3a4:	b40f      	push	{r0, r1, r2, r3}
   1f3a6:	4805      	ldr	r0, [pc, #20]	; (1f3bc <LL_Configure+0xe>)
   1f3a8:	4905      	ldr	r1, [pc, #20]	; (1f3c0 <LL_Configure+0x12>)
   1f3aa:	4a06      	ldr	r2, [pc, #24]	; (1f3c4 <LL_Configure+0x16>)
   1f3ac:	4710      	bx	r2

0001f3ae <LL_Configure>:
   1f3ae:	b401      	push	{r0}
   1f3b0:	4803      	ldr	r0, [pc, #12]	; (1f3c0 <LL_Configure+0x12>)
   1f3b2:	6800      	ldr	r0, [r0, #0]
   1f3b4:	4684      	mov	ip, r0
   1f3b6:	bc01      	pop	{r0}
   1f3b8:	4760      	bx	ip
   1f3ba:	0000      	.short	0x0000
   1f3bc:	00002711 	.word	0x00002711
   1f3c0:	0002f7d0 	.word	0x0002f7d0
   1f3c4:	0001f50d 	.word	0x0001f50d

0001f3c8 <LL_Connect_Init>:
   1f3c8:	b40f      	push	{r0, r1, r2, r3}
   1f3ca:	4805      	ldr	r0, [pc, #20]	; (1f3e0 <LL_Connect+0xe>)
   1f3cc:	4905      	ldr	r1, [pc, #20]	; (1f3e4 <LL_Connect+0x12>)
   1f3ce:	4a06      	ldr	r2, [pc, #24]	; (1f3e8 <LL_Connect+0x16>)
   1f3d0:	4710      	bx	r2

0001f3d2 <LL_Connect>:
   1f3d2:	b401      	push	{r0}
   1f3d4:	4803      	ldr	r0, [pc, #12]	; (1f3e4 <LL_Connect+0x12>)
   1f3d6:	6800      	ldr	r0, [r0, #0]
   1f3d8:	4684      	mov	ip, r0
   1f3da:	bc01      	pop	{r0}
   1f3dc:	4760      	bx	ip
   1f3de:	0000      	.short	0x0000
   1f3e0:	00002712 	.word	0x00002712
   1f3e4:	0002f7e0 	.word	0x0002f7e0
   1f3e8:	0001f50d 	.word	0x0001f50d

0001f3ec <LL_Disconnect_Init>:
   1f3ec:	b40f      	push	{r0, r1, r2, r3}
   1f3ee:	4805      	ldr	r0, [pc, #20]	; (1f404 <LL_Disconnect+0xe>)
   1f3f0:	4905      	ldr	r1, [pc, #20]	; (1f408 <LL_Disconnect+0x12>)
   1f3f2:	4a06      	ldr	r2, [pc, #24]	; (1f40c <LL_Disconnect+0x16>)
   1f3f4:	4710      	bx	r2

0001f3f6 <LL_Disconnect>:
   1f3f6:	b401      	push	{r0}
   1f3f8:	4803      	ldr	r0, [pc, #12]	; (1f408 <LL_Disconnect+0x12>)
   1f3fa:	6800      	ldr	r0, [r0, #0]
   1f3fc:	4684      	mov	ip, r0
   1f3fe:	bc01      	pop	{r0}
   1f400:	4760      	bx	ip
   1f402:	0000      	.short	0x0000
   1f404:	00002713 	.word	0x00002713
   1f408:	0002f7f0 	.word	0x0002f7f0
   1f40c:	0001f50d 	.word	0x0001f50d

0001f410 <LL_GetLastError_Init>:
   1f410:	b40f      	push	{r0, r1, r2, r3}
   1f412:	4805      	ldr	r0, [pc, #20]	; (1f428 <LL_GetLastError+0xe>)
   1f414:	4905      	ldr	r1, [pc, #20]	; (1f42c <LL_GetLastError+0x12>)
   1f416:	4a06      	ldr	r2, [pc, #24]	; (1f430 <LL_GetLastError+0x16>)
   1f418:	4710      	bx	r2

0001f41a <LL_GetLastError>:
   1f41a:	b401      	push	{r0}
   1f41c:	4803      	ldr	r0, [pc, #12]	; (1f42c <LL_GetLastError+0x12>)
   1f41e:	6800      	ldr	r0, [r0, #0]
   1f420:	4684      	mov	ip, r0
   1f422:	bc01      	pop	{r0}
   1f424:	4760      	bx	ip
   1f426:	0000      	.short	0x0000
   1f428:	00002718 	.word	0x00002718
   1f42c:	0002f800 	.word	0x0002f800
   1f430:	0001f50d 	.word	0x0001f50d

0001f434 <LL_GPRS_Connect_Init>:
   1f434:	b40f      	push	{r0, r1, r2, r3}
   1f436:	4805      	ldr	r0, [pc, #20]	; (1f44c <LL_GPRS_Connect+0xe>)
   1f438:	4905      	ldr	r1, [pc, #20]	; (1f450 <LL_GPRS_Connect+0x12>)
   1f43a:	4a06      	ldr	r2, [pc, #24]	; (1f454 <LL_GPRS_Connect+0x16>)
   1f43c:	4710      	bx	r2

0001f43e <LL_GPRS_Connect>:
   1f43e:	b401      	push	{r0}
   1f440:	4803      	ldr	r0, [pc, #12]	; (1f450 <LL_GPRS_Connect+0x12>)
   1f442:	6800      	ldr	r0, [r0, #0]
   1f444:	4684      	mov	ip, r0
   1f446:	bc01      	pop	{r0}
   1f448:	4760      	bx	ip
   1f44a:	0000      	.short	0x0000
   1f44c:	00002721 	.word	0x00002721
   1f450:	0002f810 	.word	0x0002f810
   1f454:	0001f50d 	.word	0x0001f50d

0001f458 <LL_GPRS_Start_Init>:
   1f458:	b40f      	push	{r0, r1, r2, r3}
   1f45a:	4805      	ldr	r0, [pc, #20]	; (1f470 <LL_GPRS_Start+0xe>)
   1f45c:	4905      	ldr	r1, [pc, #20]	; (1f474 <LL_GPRS_Start+0x12>)
   1f45e:	4a06      	ldr	r2, [pc, #24]	; (1f478 <LL_GPRS_Start+0x16>)
   1f460:	4710      	bx	r2

0001f462 <LL_GPRS_Start>:
   1f462:	b401      	push	{r0}
   1f464:	4803      	ldr	r0, [pc, #12]	; (1f474 <LL_GPRS_Start+0x12>)
   1f466:	6800      	ldr	r0, [r0, #0]
   1f468:	4684      	mov	ip, r0
   1f46a:	bc01      	pop	{r0}
   1f46c:	4760      	bx	ip
   1f46e:	0000      	.short	0x0000
   1f470:	0000271f 	.word	0x0000271f
   1f474:	0002f820 	.word	0x0002f820
   1f478:	0001f50d 	.word	0x0001f50d

0001f47c <LL_GSM_Start_Init>:
   1f47c:	b40f      	push	{r0, r1, r2, r3}
   1f47e:	4805      	ldr	r0, [pc, #20]	; (1f494 <LL_GSM_Start+0xe>)
   1f480:	4905      	ldr	r1, [pc, #20]	; (1f498 <LL_GSM_Start+0x12>)
   1f482:	4a06      	ldr	r2, [pc, #24]	; (1f49c <LL_GSM_Start+0x16>)
   1f484:	4710      	bx	r2

0001f486 <LL_GSM_Start>:
   1f486:	b401      	push	{r0}
   1f488:	4803      	ldr	r0, [pc, #12]	; (1f498 <LL_GSM_Start+0x12>)
   1f48a:	6800      	ldr	r0, [r0, #0]
   1f48c:	4684      	mov	ip, r0
   1f48e:	bc01      	pop	{r0}
   1f490:	4760      	bx	ip
   1f492:	0000      	.short	0x0000
   1f494:	0000271d 	.word	0x0000271d
   1f498:	0002f830 	.word	0x0002f830
   1f49c:	0001f50d 	.word	0x0001f50d

0001f4a0 <LL_Network_GetStatus_Init>:
   1f4a0:	b40f      	push	{r0, r1, r2, r3}
   1f4a2:	4805      	ldr	r0, [pc, #20]	; (1f4b8 <LL_Network_GetStatus+0xe>)
   1f4a4:	4905      	ldr	r1, [pc, #20]	; (1f4bc <LL_Network_GetStatus+0x12>)
   1f4a6:	4a06      	ldr	r2, [pc, #24]	; (1f4c0 <LL_Network_GetStatus+0x16>)
   1f4a8:	4710      	bx	r2

0001f4aa <LL_Network_GetStatus>:
   1f4aa:	b401      	push	{r0}
   1f4ac:	4803      	ldr	r0, [pc, #12]	; (1f4bc <LL_Network_GetStatus+0x12>)
   1f4ae:	6800      	ldr	r0, [r0, #0]
   1f4b0:	4684      	mov	ip, r0
   1f4b2:	bc01      	pop	{r0}
   1f4b4:	4760      	bx	ip
   1f4b6:	0000      	.short	0x0000
   1f4b8:	0000271c 	.word	0x0000271c
   1f4bc:	0002f840 	.word	0x0002f840
   1f4c0:	0001f50d 	.word	0x0001f50d

0001f4c4 <LL_Receive_Init>:
   1f4c4:	b40f      	push	{r0, r1, r2, r3}
   1f4c6:	4805      	ldr	r0, [pc, #20]	; (1f4dc <LL_Receive+0xe>)
   1f4c8:	4905      	ldr	r1, [pc, #20]	; (1f4e0 <LL_Receive+0x12>)
   1f4ca:	4a06      	ldr	r2, [pc, #24]	; (1f4e4 <LL_Receive+0x16>)
   1f4cc:	4710      	bx	r2

0001f4ce <LL_Receive>:
   1f4ce:	b401      	push	{r0}
   1f4d0:	4803      	ldr	r0, [pc, #12]	; (1f4e0 <LL_Receive+0x12>)
   1f4d2:	6800      	ldr	r0, [r0, #0]
   1f4d4:	4684      	mov	ip, r0
   1f4d6:	bc01      	pop	{r0}
   1f4d8:	4760      	bx	ip
   1f4da:	0000      	.short	0x0000
   1f4dc:	00002715 	.word	0x00002715
   1f4e0:	0002f850 	.word	0x0002f850
   1f4e4:	0001f50d 	.word	0x0001f50d

0001f4e8 <LL_Send_Init>:
   1f4e8:	b40f      	push	{r0, r1, r2, r3}
   1f4ea:	4805      	ldr	r0, [pc, #20]	; (1f500 <LL_Send+0xe>)
   1f4ec:	4905      	ldr	r1, [pc, #20]	; (1f504 <LL_Send+0x12>)
   1f4ee:	4a06      	ldr	r2, [pc, #24]	; (1f508 <LL_Send+0x16>)
   1f4f0:	4710      	bx	r2

0001f4f2 <LL_Send>:
   1f4f2:	b401      	push	{r0}
   1f4f4:	4803      	ldr	r0, [pc, #12]	; (1f504 <LL_Send+0x12>)
   1f4f6:	6800      	ldr	r0, [r0, #0]
   1f4f8:	4684      	mov	ip, r0
   1f4fa:	bc01      	pop	{r0}
   1f4fc:	4760      	bx	ip
   1f4fe:	0000      	.short	0x0000
   1f500:	00002714 	.word	0x00002714
   1f504:	0002f860 	.word	0x0002f860
   1f508:	0001f50d 	.word	0x0001f50d

0001f50c <LINKLAYER_InitFuncAndBranch>:
   1f50c:	b500      	push	{lr}
   1f50e:	f000 f835 	bl	1f57c <LINKLAYER_GetProcAddress>
   1f512:	bc04      	pop	{r2}
   1f514:	4696      	mov	lr, r2
   1f516:	4684      	mov	ip, r0
   1f518:	bc0f      	pop	{r0, r1, r2, r3}
   1f51a:	4760      	bx	ip

0001f51c <LINKLAYER_GetProcAddressWithoutExit>:
   1f51c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f51e:	4c13      	ldr	r4, [pc, #76]	; (1f56c <LINKLAYER_GetProcAddressWithoutExit+0x50>)
   1f520:	4607      	mov	r7, r0
   1f522:	447c      	add	r4, pc
   1f524:	460d      	mov	r5, r1
   1f526:	6823      	ldr	r3, [r4, #0]
   1f528:	b923      	cbnz	r3, 1f534 <LINKLAYER_GetProcAddressWithoutExit+0x18>
   1f52a:	4811      	ldr	r0, [pc, #68]	; (1f570 <LINKLAYER_GetProcAddressWithoutExit+0x54>)
   1f52c:	4478      	add	r0, pc
   1f52e:	f002 fd44 	bl	21fba <OSL_Dll_Open>
   1f532:	6020      	str	r0, [r4, #0]
   1f534:	4e0f      	ldr	r6, [pc, #60]	; (1f574 <LINKLAYER_GetProcAddressWithoutExit+0x58>)
   1f536:	447e      	add	r6, pc
   1f538:	6834      	ldr	r4, [r6, #0]
   1f53a:	b95c      	cbnz	r4, 1f554 <LINKLAYER_GetProcAddressWithoutExit+0x38>
   1f53c:	4b0e      	ldr	r3, [pc, #56]	; (1f578 <LINKLAYER_GetProcAddressWithoutExit+0x5c>)
   1f53e:	2003      	movs	r0, #3
   1f540:	447b      	add	r3, pc
   1f542:	9400      	str	r4, [sp, #0]
   1f544:	9301      	str	r3, [sp, #4]
   1f546:	4621      	mov	r1, r4
   1f548:	4622      	mov	r2, r4
   1f54a:	4623      	mov	r3, r4
   1f54c:	f7e9 eb7a 	blx	8c44 <_init+0xe4>
   1f550:	4620      	mov	r0, r4
   1f552:	e005      	b.n	1f560 <LINKLAYER_GetProcAddressWithoutExit+0x44>
   1f554:	4620      	mov	r0, r4
   1f556:	4639      	mov	r1, r7
   1f558:	f002 fd0f 	bl	21f7a <OSL_Dll_GetSymbolByName>
   1f55c:	2301      	movs	r3, #1
   1f55e:	6073      	str	r3, [r6, #4]
   1f560:	b115      	cbz	r5, 1f568 <LINKLAYER_GetProcAddressWithoutExit+0x4c>
   1f562:	682b      	ldr	r3, [r5, #0]
   1f564:	b103      	cbz	r3, 1f568 <LINKLAYER_GetProcAddressWithoutExit+0x4c>
   1f566:	6028      	str	r0, [r5, #0]
   1f568:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1f56a:	bf00      	nop
   1f56c:	00010ac6 	.word	0x00010ac6
   1f570:	00006d00 	.word	0x00006d00
   1f574:	00010ab2 	.word	0x00010ab2
   1f578:	00006cf6 	.word	0x00006cf6

0001f57c <LINKLAYER_GetProcAddress>:
   1f57c:	b513      	push	{r0, r1, r4, lr}
   1f57e:	f7ff ffcd 	bl	1f51c <LINKLAYER_GetProcAddressWithoutExit>
   1f582:	4604      	mov	r4, r0
   1f584:	b948      	cbnz	r0, 1f59a <LINKLAYER_GetProcAddress+0x1e>
   1f586:	4b06      	ldr	r3, [pc, #24]	; (1f5a0 <LINKLAYER_GetProcAddress+0x24>)
   1f588:	9000      	str	r0, [sp, #0]
   1f58a:	447b      	add	r3, pc
   1f58c:	2003      	movs	r0, #3
   1f58e:	9301      	str	r3, [sp, #4]
   1f590:	4621      	mov	r1, r4
   1f592:	4622      	mov	r2, r4
   1f594:	4623      	mov	r3, r4
   1f596:	f7e9 eb56 	blx	8c44 <_init+0xe4>
   1f59a:	4620      	mov	r0, r4
   1f59c:	bd1c      	pop	{r2, r3, r4, pc}
   1f59e:	bf00      	nop
   1f5a0:	00006cc5 	.word	0x00006cc5

0001f5a4 <LINKLAYER_IsPresent>:
   1f5a4:	4802      	ldr	r0, [pc, #8]	; (1f5b0 <LINKLAYER_IsPresent+0xc>)
   1f5a6:	b508      	push	{r3, lr}
   1f5a8:	4478      	add	r0, pc
   1f5aa:	f002 fcf6 	bl	21f9a <OSL_Dll_IsPresent>
   1f5ae:	bd08      	pop	{r3, pc}
   1f5b0:	00006c84 	.word	0x00006c84

0001f5b4 <TlvTree_AddChild_Init>:
   1f5b4:	b40f      	push	{r0, r1, r2, r3}
   1f5b6:	4805      	ldr	r0, [pc, #20]	; (1f5cc <TlvTree_AddChild+0xe>)
   1f5b8:	4905      	ldr	r1, [pc, #20]	; (1f5d0 <TlvTree_AddChild+0x12>)
   1f5ba:	4a06      	ldr	r2, [pc, #24]	; (1f5d4 <TlvTree_AddChild+0x16>)
   1f5bc:	4710      	bx	r2

0001f5be <TlvTree_AddChild>:
   1f5be:	b401      	push	{r0}
   1f5c0:	4803      	ldr	r0, [pc, #12]	; (1f5d0 <TlvTree_AddChild+0x12>)
   1f5c2:	6800      	ldr	r0, [r0, #0]
   1f5c4:	4684      	mov	ip, r0
   1f5c6:	bc01      	pop	{r0}
   1f5c8:	4760      	bx	ip
   1f5ca:	0000      	.short	0x0000
   1f5cc:	00002711 	.word	0x00002711
   1f5d0:	0002f870 	.word	0x0002f870
   1f5d4:	0001f669 	.word	0x0001f669

0001f5d8 <TlvTree_AddChildInteger_Init>:
   1f5d8:	b40f      	push	{r0, r1, r2, r3}
   1f5da:	4805      	ldr	r0, [pc, #20]	; (1f5f0 <TlvTree_AddChildInteger+0xe>)
   1f5dc:	4905      	ldr	r1, [pc, #20]	; (1f5f4 <TlvTree_AddChildInteger+0x12>)
   1f5de:	4a06      	ldr	r2, [pc, #24]	; (1f5f8 <TlvTree_AddChildInteger+0x16>)
   1f5e0:	4710      	bx	r2

0001f5e2 <TlvTree_AddChildInteger>:
   1f5e2:	b401      	push	{r0}
   1f5e4:	4803      	ldr	r0, [pc, #12]	; (1f5f4 <TlvTree_AddChildInteger+0x12>)
   1f5e6:	6800      	ldr	r0, [r0, #0]
   1f5e8:	4684      	mov	ip, r0
   1f5ea:	bc01      	pop	{r0}
   1f5ec:	4760      	bx	ip
   1f5ee:	0000      	.short	0x0000
   1f5f0:	00002712 	.word	0x00002712
   1f5f4:	0002f880 	.word	0x0002f880
   1f5f8:	0001f669 	.word	0x0001f669

0001f5fc <TlvTree_AddChildString_Init>:
   1f5fc:	b40f      	push	{r0, r1, r2, r3}
   1f5fe:	4805      	ldr	r0, [pc, #20]	; (1f614 <TlvTree_AddChildString+0xe>)
   1f600:	4905      	ldr	r1, [pc, #20]	; (1f618 <TlvTree_AddChildString+0x12>)
   1f602:	4a06      	ldr	r2, [pc, #24]	; (1f61c <TlvTree_AddChildString+0x16>)
   1f604:	4710      	bx	r2

0001f606 <TlvTree_AddChildString>:
   1f606:	b401      	push	{r0}
   1f608:	4803      	ldr	r0, [pc, #12]	; (1f618 <TlvTree_AddChildString+0x12>)
   1f60a:	6800      	ldr	r0, [r0, #0]
   1f60c:	4684      	mov	ip, r0
   1f60e:	bc01      	pop	{r0}
   1f610:	4760      	bx	ip
   1f612:	0000      	.short	0x0000
   1f614:	00002713 	.word	0x00002713
   1f618:	0002f890 	.word	0x0002f890
   1f61c:	0001f669 	.word	0x0001f669

0001f620 <TlvTree_New_Init>:
   1f620:	b40f      	push	{r0, r1, r2, r3}
   1f622:	4805      	ldr	r0, [pc, #20]	; (1f638 <TlvTree_New+0xe>)
   1f624:	4905      	ldr	r1, [pc, #20]	; (1f63c <TlvTree_New+0x12>)
   1f626:	4a06      	ldr	r2, [pc, #24]	; (1f640 <TlvTree_New+0x16>)
   1f628:	4710      	bx	r2

0001f62a <TlvTree_New>:
   1f62a:	b401      	push	{r0}
   1f62c:	4803      	ldr	r0, [pc, #12]	; (1f63c <TlvTree_New+0x12>)
   1f62e:	6800      	ldr	r0, [r0, #0]
   1f630:	4684      	mov	ip, r0
   1f632:	bc01      	pop	{r0}
   1f634:	4760      	bx	ip
   1f636:	0000      	.short	0x0000
   1f638:	00002710 	.word	0x00002710
   1f63c:	0002f8a0 	.word	0x0002f8a0
   1f640:	0001f669 	.word	0x0001f669

0001f644 <TlvTree_Release_Init>:
   1f644:	b40f      	push	{r0, r1, r2, r3}
   1f646:	4805      	ldr	r0, [pc, #20]	; (1f65c <TlvTree_Release+0xe>)
   1f648:	4905      	ldr	r1, [pc, #20]	; (1f660 <TlvTree_Release+0x12>)
   1f64a:	4a06      	ldr	r2, [pc, #24]	; (1f664 <TlvTree_Release+0x16>)
   1f64c:	4710      	bx	r2

0001f64e <TlvTree_Release>:
   1f64e:	b401      	push	{r0}
   1f650:	4803      	ldr	r0, [pc, #12]	; (1f660 <TlvTree_Release+0x12>)
   1f652:	6800      	ldr	r0, [r0, #0]
   1f654:	4684      	mov	ip, r0
   1f656:	bc01      	pop	{r0}
   1f658:	4760      	bx	ip
   1f65a:	0000      	.short	0x0000
   1f65c:	00002715 	.word	0x00002715
   1f660:	0002f8b0 	.word	0x0002f8b0
   1f664:	0001f669 	.word	0x0001f669

0001f668 <TLV_TREE_DLL_InitFuncAndBranch>:
   1f668:	b500      	push	{lr}
   1f66a:	f000 f835 	bl	1f6d8 <TLV_TREE_DLL_GetProcAddress>
   1f66e:	bc04      	pop	{r2}
   1f670:	4696      	mov	lr, r2
   1f672:	4684      	mov	ip, r0
   1f674:	bc0f      	pop	{r0, r1, r2, r3}
   1f676:	4760      	bx	ip

0001f678 <TLV_TREE_DLL_GetProcAddressWithoutExit>:
   1f678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f67a:	4c13      	ldr	r4, [pc, #76]	; (1f6c8 <TLV_TREE_DLL_GetProcAddressWithoutExit+0x50>)
   1f67c:	4607      	mov	r7, r0
   1f67e:	447c      	add	r4, pc
   1f680:	460d      	mov	r5, r1
   1f682:	6823      	ldr	r3, [r4, #0]
   1f684:	b923      	cbnz	r3, 1f690 <TLV_TREE_DLL_GetProcAddressWithoutExit+0x18>
   1f686:	4811      	ldr	r0, [pc, #68]	; (1f6cc <TLV_TREE_DLL_GetProcAddressWithoutExit+0x54>)
   1f688:	4478      	add	r0, pc
   1f68a:	f002 fc96 	bl	21fba <OSL_Dll_Open>
   1f68e:	6020      	str	r0, [r4, #0]
   1f690:	4e0f      	ldr	r6, [pc, #60]	; (1f6d0 <TLV_TREE_DLL_GetProcAddressWithoutExit+0x58>)
   1f692:	447e      	add	r6, pc
   1f694:	6834      	ldr	r4, [r6, #0]
   1f696:	b95c      	cbnz	r4, 1f6b0 <TLV_TREE_DLL_GetProcAddressWithoutExit+0x38>
   1f698:	4b0e      	ldr	r3, [pc, #56]	; (1f6d4 <TLV_TREE_DLL_GetProcAddressWithoutExit+0x5c>)
   1f69a:	2003      	movs	r0, #3
   1f69c:	447b      	add	r3, pc
   1f69e:	9400      	str	r4, [sp, #0]
   1f6a0:	9301      	str	r3, [sp, #4]
   1f6a2:	4621      	mov	r1, r4
   1f6a4:	4622      	mov	r2, r4
   1f6a6:	4623      	mov	r3, r4
   1f6a8:	f7e9 eacc 	blx	8c44 <_init+0xe4>
   1f6ac:	4620      	mov	r0, r4
   1f6ae:	e005      	b.n	1f6bc <TLV_TREE_DLL_GetProcAddressWithoutExit+0x44>
   1f6b0:	4620      	mov	r0, r4
   1f6b2:	4639      	mov	r1, r7
   1f6b4:	f002 fc61 	bl	21f7a <OSL_Dll_GetSymbolByName>
   1f6b8:	2301      	movs	r3, #1
   1f6ba:	6073      	str	r3, [r6, #4]
   1f6bc:	b115      	cbz	r5, 1f6c4 <TLV_TREE_DLL_GetProcAddressWithoutExit+0x4c>
   1f6be:	682b      	ldr	r3, [r5, #0]
   1f6c0:	b103      	cbz	r3, 1f6c4 <TLV_TREE_DLL_GetProcAddressWithoutExit+0x4c>
   1f6c2:	6028      	str	r0, [r5, #0]
   1f6c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1f6c6:	bf00      	nop
   1f6c8:	00010972 	.word	0x00010972
   1f6cc:	00006bea 	.word	0x00006bea
   1f6d0:	0001095e 	.word	0x0001095e
   1f6d4:	00006be4 	.word	0x00006be4

0001f6d8 <TLV_TREE_DLL_GetProcAddress>:
   1f6d8:	b513      	push	{r0, r1, r4, lr}
   1f6da:	f7ff ffcd 	bl	1f678 <TLV_TREE_DLL_GetProcAddressWithoutExit>
   1f6de:	4604      	mov	r4, r0
   1f6e0:	b948      	cbnz	r0, 1f6f6 <TLV_TREE_DLL_GetProcAddress+0x1e>
   1f6e2:	4b06      	ldr	r3, [pc, #24]	; (1f6fc <TLV_TREE_DLL_GetProcAddress+0x24>)
   1f6e4:	9000      	str	r0, [sp, #0]
   1f6e6:	447b      	add	r3, pc
   1f6e8:	2003      	movs	r0, #3
   1f6ea:	9301      	str	r3, [sp, #4]
   1f6ec:	4621      	mov	r1, r4
   1f6ee:	4622      	mov	r2, r4
   1f6f0:	4623      	mov	r3, r4
   1f6f2:	f7e9 eaa8 	blx	8c44 <_init+0xe4>
   1f6f6:	4620      	mov	r0, r4
   1f6f8:	bd1c      	pop	{r2, r3, r4, pc}
   1f6fa:	bf00      	nop
   1f6fc:	00006bb7 	.word	0x00006bb7

0001f700 <TLV_TREE_DLL_IsPresent>:
   1f700:	4802      	ldr	r0, [pc, #8]	; (1f70c <TLV_TREE_DLL_IsPresent+0xc>)
   1f702:	b508      	push	{r3, lr}
   1f704:	4478      	add	r0, pc
   1f706:	f002 fc48 	bl	21f9a <OSL_Dll_IsPresent>
   1f70a:	bd08      	pop	{r3, pc}
   1f70c:	00006b6e 	.word	0x00006b6e

0001f710 <function_name>:
   1f710:	454c4c44 	.word	0x454c4c44
   1f714:	74736978 	.word	0x74736978
   1f718:	00          	.byte	0x00
   1f719:	00          	.byte	0x00
   1f71a:	bf00      	nop

0001f71c <DLLExist>:
   1f71c:	b408      	push	{r3}
   1f71e:	4b11      	ldr	r3, [pc, #68]	; (1f764 <.direct_call+0x8>)
   1f720:	681b      	ldr	r3, [r3, #0]
   1f722:	2b00      	cmp	r3, #0
   1f724:	d11a      	bne.n	1f75c <.direct_call>
   1f726:	b507      	push	{r0, r1, r2, lr}
   1f728:	f000 f890 	bl	1f84c <extenslib_open>
   1f72c:	2800      	cmp	r0, #0
   1f72e:	d00b      	beq.n	1f748 <.bad_return>
   1f730:	4684      	mov	ip, r0
   1f732:	480d      	ldr	r0, [pc, #52]	; (1f768 <.direct_call+0xc>)
   1f734:	f000 f811 	bl	1f75a <.call_function>
   1f738:	2800      	cmp	r0, #0
   1f73a:	d002      	beq.n	1f742 <.exit_return>
   1f73c:	4909      	ldr	r1, [pc, #36]	; (1f764 <.direct_call+0x8>)
   1f73e:	6008      	str	r0, [r1, #0]
   1f740:	e007      	b.n	1f752 <.already_initialized>

0001f742 <.exit_return>:
   1f742:	480a      	ldr	r0, [pc, #40]	; (1f76c <.direct_call+0x10>)
   1f744:	f001 fc08 	bl	20f58 <Telium_Exit>

0001f748 <.bad_return>:
   1f748:	bc0f      	pop	{r0, r1, r2, r3}
   1f74a:	2000      	movs	r0, #0
   1f74c:	469e      	mov	lr, r3
   1f74e:	bc08      	pop	{r3}
   1f750:	4770      	bx	lr

0001f752 <.already_initialized>:
   1f752:	4684      	mov	ip, r0
   1f754:	bc0f      	pop	{r0, r1, r2, r3}
   1f756:	469e      	mov	lr, r3
   1f758:	bc08      	pop	{r3}

0001f75a <.call_function>:
   1f75a:	4760      	bx	ip

0001f75c <.direct_call>:
   1f75c:	469c      	mov	ip, r3
   1f75e:	bc08      	pop	{r3}
   1f760:	4760      	bx	ip
   1f762:	0000      	.short	0x0000
   1f764:	0002f8c0 	.word	0x0002f8c0
   1f768:	0001f710 	.word	0x0001f710
   1f76c:	00000a66 	.word	0x00000a66

0001f770 <function_name>:
   1f770:	6f745f64 	.word	0x6f745f64
   1f774:	676e6f6c 	.word	0x676e6f6c
   1f778:	00          	.byte	0x00
   1f779:	00          	.byte	0x00
   1f77a:	bf00      	nop

0001f77c <d_tolong>:
   1f77c:	b408      	push	{r3}
   1f77e:	4b11      	ldr	r3, [pc, #68]	; (1f7c4 <.direct_call+0x8>)
   1f780:	681b      	ldr	r3, [r3, #0]
   1f782:	2b00      	cmp	r3, #0
   1f784:	d11a      	bne.n	1f7bc <.direct_call>
   1f786:	b507      	push	{r0, r1, r2, lr}
   1f788:	f000 f860 	bl	1f84c <extenslib_open>
   1f78c:	2800      	cmp	r0, #0
   1f78e:	d00b      	beq.n	1f7a8 <.bad_return>
   1f790:	4684      	mov	ip, r0
   1f792:	480d      	ldr	r0, [pc, #52]	; (1f7c8 <.direct_call+0xc>)
   1f794:	f000 f811 	bl	1f7ba <.call_function>
   1f798:	2800      	cmp	r0, #0
   1f79a:	d002      	beq.n	1f7a2 <.exit_return>
   1f79c:	4909      	ldr	r1, [pc, #36]	; (1f7c4 <.direct_call+0x8>)
   1f79e:	6008      	str	r0, [r1, #0]
   1f7a0:	e007      	b.n	1f7b2 <.already_initialized>

0001f7a2 <.exit_return>:
   1f7a2:	480a      	ldr	r0, [pc, #40]	; (1f7cc <.direct_call+0x10>)
   1f7a4:	f001 fbd8 	bl	20f58 <Telium_Exit>

0001f7a8 <.bad_return>:
   1f7a8:	bc0f      	pop	{r0, r1, r2, r3}
   1f7aa:	2000      	movs	r0, #0
   1f7ac:	469e      	mov	lr, r3
   1f7ae:	bc08      	pop	{r3}
   1f7b0:	4770      	bx	lr

0001f7b2 <.already_initialized>:
   1f7b2:	4684      	mov	ip, r0
   1f7b4:	bc0f      	pop	{r0, r1, r2, r3}
   1f7b6:	469e      	mov	lr, r3
   1f7b8:	bc08      	pop	{r3}

0001f7ba <.call_function>:
   1f7ba:	4760      	bx	ip

0001f7bc <.direct_call>:
   1f7bc:	469c      	mov	ip, r3
   1f7be:	bc08      	pop	{r3}
   1f7c0:	4760      	bx	ip
   1f7c2:	0000      	.short	0x0000
   1f7c4:	0002f8c4 	.word	0x0002f8c4
   1f7c8:	0001f770 	.word	0x0001f770
   1f7cc:	00000a34 	.word	0x00000a34

0001f7d0 <function_name>:
   1f7d0:	63647473 	.word	0x63647473
   1f7d4:	00306d61 	.word	0x00306d61

0001f7d8 <stdcam0>:
   1f7d8:	b408      	push	{r3}
   1f7da:	4b11      	ldr	r3, [pc, #68]	; (1f820 <.direct_call+0x8>)
   1f7dc:	681b      	ldr	r3, [r3, #0]
   1f7de:	2b00      	cmp	r3, #0
   1f7e0:	d11a      	bne.n	1f818 <.direct_call>
   1f7e2:	b507      	push	{r0, r1, r2, lr}
   1f7e4:	f000 f832 	bl	1f84c <extenslib_open>
   1f7e8:	2800      	cmp	r0, #0
   1f7ea:	d00b      	beq.n	1f804 <.bad_return>
   1f7ec:	4684      	mov	ip, r0
   1f7ee:	480d      	ldr	r0, [pc, #52]	; (1f824 <.direct_call+0xc>)
   1f7f0:	f000 f811 	bl	1f816 <.call_function>
   1f7f4:	2800      	cmp	r0, #0
   1f7f6:	d002      	beq.n	1f7fe <.exit_return>
   1f7f8:	4909      	ldr	r1, [pc, #36]	; (1f820 <.direct_call+0x8>)
   1f7fa:	6008      	str	r0, [r1, #0]
   1f7fc:	e007      	b.n	1f80e <.already_initialized>

0001f7fe <.exit_return>:
   1f7fe:	480a      	ldr	r0, [pc, #40]	; (1f828 <.direct_call+0x10>)
   1f800:	f001 fbaa 	bl	20f58 <Telium_Exit>

0001f804 <.bad_return>:
   1f804:	bc0f      	pop	{r0, r1, r2, r3}
   1f806:	2000      	movs	r0, #0
   1f808:	469e      	mov	lr, r3
   1f80a:	bc08      	pop	{r3}
   1f80c:	4770      	bx	lr

0001f80e <.already_initialized>:
   1f80e:	4684      	mov	ip, r0
   1f810:	bc0f      	pop	{r0, r1, r2, r3}
   1f812:	469e      	mov	lr, r3
   1f814:	bc08      	pop	{r3}

0001f816 <.call_function>:
   1f816:	4760      	bx	ip

0001f818 <.direct_call>:
   1f818:	469c      	mov	ip, r3
   1f81a:	bc08      	pop	{r3}
   1f81c:	4760      	bx	ip
   1f81e:	0000      	.short	0x0000
   1f820:	0002f8c8 	.word	0x0002f8c8
   1f824:	0001f7d0 	.word	0x0001f7d0
   1f828:	00000a38 	.word	0x00000a38

0001f82c <GetProcAddressExtens>:
   1f82c:	4b05      	ldr	r3, [pc, #20]	; (1f844 <GetProcAddressExtens+0x18>)
   1f82e:	4a06      	ldr	r2, [pc, #24]	; (1f848 <GetProcAddressExtens+0x1c>)
   1f830:	447b      	add	r3, pc
   1f832:	4601      	mov	r1, r0
   1f834:	589b      	ldr	r3, [r3, r2]
   1f836:	6818      	ldr	r0, [r3, #0]
   1f838:	b110      	cbz	r0, 1f840 <GetProcAddressExtens+0x14>
   1f83a:	b109      	cbz	r1, 1f840 <GetProcAddressExtens+0x14>
   1f83c:	f002 bb9d 	b.w	21f7a <OSL_Dll_GetSymbolByName>
   1f840:	2000      	movs	r0, #0
   1f842:	4770      	bx	lr
   1f844:	0000f8e4 	.word	0x0000f8e4
   1f848:	000000e0 	.word	0x000000e0

0001f84c <extenslib_open>:
   1f84c:	b538      	push	{r3, r4, r5, lr}
   1f84e:	4c0b      	ldr	r4, [pc, #44]	; (1f87c <extenslib_open+0x30>)
   1f850:	4b0b      	ldr	r3, [pc, #44]	; (1f880 <extenslib_open+0x34>)
   1f852:	447c      	add	r4, pc
   1f854:	58e5      	ldr	r5, [r4, r3]
   1f856:	682b      	ldr	r3, [r5, #0]
   1f858:	b96b      	cbnz	r3, 1f876 <extenslib_open+0x2a>
   1f85a:	2001      	movs	r0, #1
   1f85c:	f002 fbbd 	bl	21fda <OSL_Dll_OpenByAppliType>
   1f860:	4b08      	ldr	r3, [pc, #32]	; (1f884 <extenslib_open+0x38>)
   1f862:	58e3      	ldr	r3, [r4, r3]
   1f864:	6018      	str	r0, [r3, #0]
   1f866:	b130      	cbz	r0, 1f876 <extenslib_open+0x2a>
   1f868:	4b07      	ldr	r3, [pc, #28]	; (1f888 <extenslib_open+0x3c>)
   1f86a:	4808      	ldr	r0, [pc, #32]	; (1f88c <extenslib_open+0x40>)
   1f86c:	58e3      	ldr	r3, [r4, r3]
   1f86e:	4478      	add	r0, pc
   1f870:	602b      	str	r3, [r5, #0]
   1f872:	f7ff ffdb 	bl	1f82c <GetProcAddressExtens>
   1f876:	6828      	ldr	r0, [r5, #0]
   1f878:	bd38      	pop	{r3, r4, r5, pc}
   1f87a:	bf00      	nop
   1f87c:	0000f8c2 	.word	0x0000f8c2
   1f880:	000000d4 	.word	0x000000d4
   1f884:	000000e0 	.word	0x000000e0
   1f888:	000000b4 	.word	0x000000b4
   1f88c:	00006a56 	.word	0x00006a56

0001f890 <extenslib_close>:
   1f890:	4b03      	ldr	r3, [pc, #12]	; (1f8a0 <extenslib_close+0x10>)
   1f892:	4a04      	ldr	r2, [pc, #16]	; (1f8a4 <extenslib_close+0x14>)
   1f894:	447b      	add	r3, pc
   1f896:	589b      	ldr	r3, [r3, r2]
   1f898:	6818      	ldr	r0, [r3, #0]
   1f89a:	f002 bb5e 	b.w	21f5a <OSL_Dll_Close>
   1f89e:	bf00      	nop
   1f8a0:	0000f880 	.word	0x0000f880
   1f8a4:	000000e0 	.word	0x000000e0

0001f8a8 <function_name>:
   1f8a8:	696c6554 	.word	0x696c6554
   1f8ac:	465f6d75 	.word	0x465f6d75
   1f8b0:	736f6c63 	.word	0x736f6c63
   1f8b4:	0065      	.short	0x0065
   1f8b6:	bf00      	nop

0001f8b8 <Telium_Fclose>:
   1f8b8:	b408      	push	{r3}
   1f8ba:	4b11      	ldr	r3, [pc, #68]	; (1f900 <.direct_call+0x8>)
   1f8bc:	681b      	ldr	r3, [r3, #0]
   1f8be:	2b00      	cmp	r3, #0
   1f8c0:	d11a      	bne.n	1f8f8 <.direct_call>
   1f8c2:	b507      	push	{r0, r1, r2, lr}
   1f8c4:	f7ff ffc2 	bl	1f84c <extenslib_open>
   1f8c8:	2800      	cmp	r0, #0
   1f8ca:	d00b      	beq.n	1f8e4 <.bad_return>
   1f8cc:	4684      	mov	ip, r0
   1f8ce:	480d      	ldr	r0, [pc, #52]	; (1f904 <.direct_call+0xc>)
   1f8d0:	f000 f811 	bl	1f8f6 <.call_function>
   1f8d4:	2800      	cmp	r0, #0
   1f8d6:	d002      	beq.n	1f8de <.exit_return>
   1f8d8:	4909      	ldr	r1, [pc, #36]	; (1f900 <.direct_call+0x8>)
   1f8da:	6008      	str	r0, [r1, #0]
   1f8dc:	e007      	b.n	1f8ee <.already_initialized>

0001f8de <.exit_return>:
   1f8de:	480a      	ldr	r0, [pc, #40]	; (1f908 <.direct_call+0x10>)
   1f8e0:	f001 fb3a 	bl	20f58 <Telium_Exit>

0001f8e4 <.bad_return>:
   1f8e4:	bc0f      	pop	{r0, r1, r2, r3}
   1f8e6:	2000      	movs	r0, #0
   1f8e8:	469e      	mov	lr, r3
   1f8ea:	bc08      	pop	{r3}
   1f8ec:	4770      	bx	lr

0001f8ee <.already_initialized>:
   1f8ee:	4684      	mov	ip, r0
   1f8f0:	bc0f      	pop	{r0, r1, r2, r3}
   1f8f2:	469e      	mov	lr, r3
   1f8f4:	bc08      	pop	{r3}

0001f8f6 <.call_function>:
   1f8f6:	4760      	bx	ip

0001f8f8 <.direct_call>:
   1f8f8:	469c      	mov	ip, r3
   1f8fa:	bc08      	pop	{r3}
   1f8fc:	4760      	bx	ip
   1f8fe:	0000      	.short	0x0000
   1f900:	0002f8cc 	.word	0x0002f8cc
   1f904:	0001f8a8 	.word	0x0001f8a8
   1f908:	00000b2e 	.word	0x00000b2e

0001f90c <function_name>:
   1f90c:	696c6554 	.word	0x696c6554
   1f910:	465f6d75 	.word	0x465f6d75
   1f914:	6e65706f 	.word	0x6e65706f
   1f918:	00          	.byte	0x00
   1f919:	00          	.byte	0x00
   1f91a:	bf00      	nop

0001f91c <Telium_Fopen>:
   1f91c:	b408      	push	{r3}
   1f91e:	4b11      	ldr	r3, [pc, #68]	; (1f964 <.direct_call+0x8>)
   1f920:	681b      	ldr	r3, [r3, #0]
   1f922:	2b00      	cmp	r3, #0
   1f924:	d11a      	bne.n	1f95c <.direct_call>
   1f926:	b507      	push	{r0, r1, r2, lr}
   1f928:	f7ff ff90 	bl	1f84c <extenslib_open>
   1f92c:	2800      	cmp	r0, #0
   1f92e:	d00b      	beq.n	1f948 <.bad_return>
   1f930:	4684      	mov	ip, r0
   1f932:	480d      	ldr	r0, [pc, #52]	; (1f968 <.direct_call+0xc>)
   1f934:	f000 f811 	bl	1f95a <.call_function>
   1f938:	2800      	cmp	r0, #0
   1f93a:	d002      	beq.n	1f942 <.exit_return>
   1f93c:	4909      	ldr	r1, [pc, #36]	; (1f964 <.direct_call+0x8>)
   1f93e:	6008      	str	r0, [r1, #0]
   1f940:	e007      	b.n	1f952 <.already_initialized>

0001f942 <.exit_return>:
   1f942:	480a      	ldr	r0, [pc, #40]	; (1f96c <.direct_call+0x10>)
   1f944:	f001 fb08 	bl	20f58 <Telium_Exit>

0001f948 <.bad_return>:
   1f948:	bc0f      	pop	{r0, r1, r2, r3}
   1f94a:	2000      	movs	r0, #0
   1f94c:	469e      	mov	lr, r3
   1f94e:	bc08      	pop	{r3}
   1f950:	4770      	bx	lr

0001f952 <.already_initialized>:
   1f952:	4684      	mov	ip, r0
   1f954:	bc0f      	pop	{r0, r1, r2, r3}
   1f956:	469e      	mov	lr, r3
   1f958:	bc08      	pop	{r3}

0001f95a <.call_function>:
   1f95a:	4760      	bx	ip

0001f95c <.direct_call>:
   1f95c:	469c      	mov	ip, r3
   1f95e:	bc08      	pop	{r3}
   1f960:	4760      	bx	ip
   1f962:	0000      	.short	0x0000
   1f964:	0002f8d0 	.word	0x0002f8d0
   1f968:	0001f90c 	.word	0x0001f90c
   1f96c:	00000b2d 	.word	0x00000b2d

0001f970 <function_name>:
   1f970:	696c6554 	.word	0x696c6554
   1f974:	475f6d75 	.word	0x475f6d75
   1f978:	00637465 	.word	0x00637465

0001f97c <Telium_Getc>:
   1f97c:	b408      	push	{r3}
   1f97e:	4b11      	ldr	r3, [pc, #68]	; (1f9c4 <.direct_call+0x8>)
   1f980:	681b      	ldr	r3, [r3, #0]
   1f982:	2b00      	cmp	r3, #0
   1f984:	d11a      	bne.n	1f9bc <.direct_call>
   1f986:	b507      	push	{r0, r1, r2, lr}
   1f988:	f7ff ff60 	bl	1f84c <extenslib_open>
   1f98c:	2800      	cmp	r0, #0
   1f98e:	d00b      	beq.n	1f9a8 <.bad_return>
   1f990:	4684      	mov	ip, r0
   1f992:	480d      	ldr	r0, [pc, #52]	; (1f9c8 <.direct_call+0xc>)
   1f994:	f000 f811 	bl	1f9ba <.call_function>
   1f998:	2800      	cmp	r0, #0
   1f99a:	d002      	beq.n	1f9a2 <.exit_return>
   1f99c:	4909      	ldr	r1, [pc, #36]	; (1f9c4 <.direct_call+0x8>)
   1f99e:	6008      	str	r0, [r1, #0]
   1f9a0:	e007      	b.n	1f9b2 <.already_initialized>

0001f9a2 <.exit_return>:
   1f9a2:	480a      	ldr	r0, [pc, #40]	; (1f9cc <.direct_call+0x10>)
   1f9a4:	f001 fad8 	bl	20f58 <Telium_Exit>

0001f9a8 <.bad_return>:
   1f9a8:	bc0f      	pop	{r0, r1, r2, r3}
   1f9aa:	2000      	movs	r0, #0
   1f9ac:	469e      	mov	lr, r3
   1f9ae:	bc08      	pop	{r3}
   1f9b0:	4770      	bx	lr

0001f9b2 <.already_initialized>:
   1f9b2:	4684      	mov	ip, r0
   1f9b4:	bc0f      	pop	{r0, r1, r2, r3}
   1f9b6:	469e      	mov	lr, r3
   1f9b8:	bc08      	pop	{r3}

0001f9ba <.call_function>:
   1f9ba:	4760      	bx	ip

0001f9bc <.direct_call>:
   1f9bc:	469c      	mov	ip, r3
   1f9be:	bc08      	pop	{r3}
   1f9c0:	4760      	bx	ip
   1f9c2:	0000      	.short	0x0000
   1f9c4:	0002f8d4 	.word	0x0002f8d4
   1f9c8:	0001f970 	.word	0x0001f970
   1f9cc:	00000b2b 	.word	0x00000b2b

0001f9d0 <function_name>:
   1f9d0:	696c6554 	.word	0x696c6554
   1f9d4:	495f6d75 	.word	0x495f6d75
   1f9d8:	73695f73 	.word	0x73695f73
   1f9dc:	316f      	.short	0x316f
	...

0001f9e0 <Telium_Is_iso1>:
   1f9e0:	b408      	push	{r3}
   1f9e2:	4b11      	ldr	r3, [pc, #68]	; (1fa28 <.direct_call+0x8>)
   1f9e4:	681b      	ldr	r3, [r3, #0]
   1f9e6:	2b00      	cmp	r3, #0
   1f9e8:	d11a      	bne.n	1fa20 <.direct_call>
   1f9ea:	b507      	push	{r0, r1, r2, lr}
   1f9ec:	f7ff ff2e 	bl	1f84c <extenslib_open>
   1f9f0:	2800      	cmp	r0, #0
   1f9f2:	d00b      	beq.n	1fa0c <.bad_return>
   1f9f4:	4684      	mov	ip, r0
   1f9f6:	480d      	ldr	r0, [pc, #52]	; (1fa2c <.direct_call+0xc>)
   1f9f8:	f000 f811 	bl	1fa1e <.call_function>
   1f9fc:	2800      	cmp	r0, #0
   1f9fe:	d002      	beq.n	1fa06 <.exit_return>
   1fa00:	4909      	ldr	r1, [pc, #36]	; (1fa28 <.direct_call+0x8>)
   1fa02:	6008      	str	r0, [r1, #0]
   1fa04:	e007      	b.n	1fa16 <.already_initialized>

0001fa06 <.exit_return>:
   1fa06:	480a      	ldr	r0, [pc, #40]	; (1fa30 <.direct_call+0x10>)
   1fa08:	f001 faa6 	bl	20f58 <Telium_Exit>

0001fa0c <.bad_return>:
   1fa0c:	bc0f      	pop	{r0, r1, r2, r3}
   1fa0e:	2000      	movs	r0, #0
   1fa10:	469e      	mov	lr, r3
   1fa12:	bc08      	pop	{r3}
   1fa14:	4770      	bx	lr

0001fa16 <.already_initialized>:
   1fa16:	4684      	mov	ip, r0
   1fa18:	bc0f      	pop	{r0, r1, r2, r3}
   1fa1a:	469e      	mov	lr, r3
   1fa1c:	bc08      	pop	{r3}

0001fa1e <.call_function>:
   1fa1e:	4760      	bx	ip

0001fa20 <.direct_call>:
   1fa20:	469c      	mov	ip, r3
   1fa22:	bc08      	pop	{r3}
   1fa24:	4760      	bx	ip
   1fa26:	0000      	.short	0x0000
   1fa28:	0002f8d8 	.word	0x0002f8d8
   1fa2c:	0001f9d0 	.word	0x0001f9d0
   1fa30:	00000b51 	.word	0x00000b51

0001fa34 <function_name>:
   1fa34:	696c6554 	.word	0x696c6554
   1fa38:	495f6d75 	.word	0x495f6d75
   1fa3c:	73695f73 	.word	0x73695f73
   1fa40:	326f      	.short	0x326f
	...

0001fa44 <Telium_Is_iso2>:
   1fa44:	b408      	push	{r3}
   1fa46:	4b11      	ldr	r3, [pc, #68]	; (1fa8c <.direct_call+0x8>)
   1fa48:	681b      	ldr	r3, [r3, #0]
   1fa4a:	2b00      	cmp	r3, #0
   1fa4c:	d11a      	bne.n	1fa84 <.direct_call>
   1fa4e:	b507      	push	{r0, r1, r2, lr}
   1fa50:	f7ff fefc 	bl	1f84c <extenslib_open>
   1fa54:	2800      	cmp	r0, #0
   1fa56:	d00b      	beq.n	1fa70 <.bad_return>
   1fa58:	4684      	mov	ip, r0
   1fa5a:	480d      	ldr	r0, [pc, #52]	; (1fa90 <.direct_call+0xc>)
   1fa5c:	f000 f811 	bl	1fa82 <.call_function>
   1fa60:	2800      	cmp	r0, #0
   1fa62:	d002      	beq.n	1fa6a <.exit_return>
   1fa64:	4909      	ldr	r1, [pc, #36]	; (1fa8c <.direct_call+0x8>)
   1fa66:	6008      	str	r0, [r1, #0]
   1fa68:	e007      	b.n	1fa7a <.already_initialized>

0001fa6a <.exit_return>:
   1fa6a:	480a      	ldr	r0, [pc, #40]	; (1fa94 <.direct_call+0x10>)
   1fa6c:	f001 fa74 	bl	20f58 <Telium_Exit>

0001fa70 <.bad_return>:
   1fa70:	bc0f      	pop	{r0, r1, r2, r3}
   1fa72:	2000      	movs	r0, #0
   1fa74:	469e      	mov	lr, r3
   1fa76:	bc08      	pop	{r3}
   1fa78:	4770      	bx	lr

0001fa7a <.already_initialized>:
   1fa7a:	4684      	mov	ip, r0
   1fa7c:	bc0f      	pop	{r0, r1, r2, r3}
   1fa7e:	469e      	mov	lr, r3
   1fa80:	bc08      	pop	{r3}

0001fa82 <.call_function>:
   1fa82:	4760      	bx	ip

0001fa84 <.direct_call>:
   1fa84:	469c      	mov	ip, r3
   1fa86:	bc08      	pop	{r3}
   1fa88:	4760      	bx	ip
   1fa8a:	0000      	.short	0x0000
   1fa8c:	0002f8dc 	.word	0x0002f8dc
   1fa90:	0001fa34 	.word	0x0001fa34
   1fa94:	00000b52 	.word	0x00000b52

0001fa98 <function_name>:
   1fa98:	696c6554 	.word	0x696c6554
   1fa9c:	495f6d75 	.word	0x495f6d75
   1faa0:	73695f73 	.word	0x73695f73
   1faa4:	336f      	.short	0x336f
	...

0001faa8 <Telium_Is_iso3>:
   1faa8:	b408      	push	{r3}
   1faaa:	4b11      	ldr	r3, [pc, #68]	; (1faf0 <.direct_call+0x8>)
   1faac:	681b      	ldr	r3, [r3, #0]
   1faae:	2b00      	cmp	r3, #0
   1fab0:	d11a      	bne.n	1fae8 <.direct_call>
   1fab2:	b507      	push	{r0, r1, r2, lr}
   1fab4:	f7ff feca 	bl	1f84c <extenslib_open>
   1fab8:	2800      	cmp	r0, #0
   1faba:	d00b      	beq.n	1fad4 <.bad_return>
   1fabc:	4684      	mov	ip, r0
   1fabe:	480d      	ldr	r0, [pc, #52]	; (1faf4 <.direct_call+0xc>)
   1fac0:	f000 f811 	bl	1fae6 <.call_function>
   1fac4:	2800      	cmp	r0, #0
   1fac6:	d002      	beq.n	1face <.exit_return>
   1fac8:	4909      	ldr	r1, [pc, #36]	; (1faf0 <.direct_call+0x8>)
   1faca:	6008      	str	r0, [r1, #0]
   1facc:	e007      	b.n	1fade <.already_initialized>

0001face <.exit_return>:
   1face:	480a      	ldr	r0, [pc, #40]	; (1faf8 <.direct_call+0x10>)
   1fad0:	f001 fa42 	bl	20f58 <Telium_Exit>

0001fad4 <.bad_return>:
   1fad4:	bc0f      	pop	{r0, r1, r2, r3}
   1fad6:	2000      	movs	r0, #0
   1fad8:	469e      	mov	lr, r3
   1fada:	bc08      	pop	{r3}
   1fadc:	4770      	bx	lr

0001fade <.already_initialized>:
   1fade:	4684      	mov	ip, r0
   1fae0:	bc0f      	pop	{r0, r1, r2, r3}
   1fae2:	469e      	mov	lr, r3
   1fae4:	bc08      	pop	{r3}

0001fae6 <.call_function>:
   1fae6:	4760      	bx	ip

0001fae8 <.direct_call>:
   1fae8:	469c      	mov	ip, r3
   1faea:	bc08      	pop	{r3}
   1faec:	4760      	bx	ip
   1faee:	0000      	.short	0x0000
   1faf0:	0002f8e0 	.word	0x0002f8e0
   1faf4:	0001fa98 	.word	0x0001fa98
   1faf8:	00000b53 	.word	0x00000b53

0001fafc <function_name>:
   1fafc:	696c6554 	.word	0x696c6554
   1fb00:	525f6d75 	.word	0x525f6d75
   1fb04:	74657365 	.word	0x74657365
   1fb08:	6675625f 	.word	0x6675625f
   1fb0c:	00          	.byte	0x00
   1fb0d:	00          	.byte	0x00
   1fb0e:	bf00      	nop

0001fb10 <Telium_Reset_buf>:
   1fb10:	b408      	push	{r3}
   1fb12:	4b0f      	ldr	r3, [pc, #60]	; (1fb50 <.direct_call+0x6>)
   1fb14:	681b      	ldr	r3, [r3, #0]
   1fb16:	2b00      	cmp	r3, #0
   1fb18:	d117      	bne.n	1fb4a <.direct_call>
   1fb1a:	b507      	push	{r0, r1, r2, lr}
   1fb1c:	f7ff fe96 	bl	1f84c <extenslib_open>
   1fb20:	2800      	cmp	r0, #0
   1fb22:	d008      	beq.n	1fb36 <.bad_return>
   1fb24:	4684      	mov	ip, r0
   1fb26:	480b      	ldr	r0, [pc, #44]	; (1fb54 <.direct_call+0xa>)
   1fb28:	f000 f80e 	bl	1fb48 <.call_function>
   1fb2c:	2800      	cmp	r0, #0
   1fb2e:	d002      	beq.n	1fb36 <.bad_return>
   1fb30:	4907      	ldr	r1, [pc, #28]	; (1fb50 <.direct_call+0x6>)
   1fb32:	6008      	str	r0, [r1, #0]
   1fb34:	e004      	b.n	1fb40 <.already_initialized>

0001fb36 <.bad_return>:
   1fb36:	bc0f      	pop	{r0, r1, r2, r3}
   1fb38:	4807      	ldr	r0, [pc, #28]	; (1fb58 <.direct_call+0xe>)
   1fb3a:	469e      	mov	lr, r3
   1fb3c:	bc08      	pop	{r3}
   1fb3e:	4770      	bx	lr

0001fb40 <.already_initialized>:
   1fb40:	4684      	mov	ip, r0
   1fb42:	bc0f      	pop	{r0, r1, r2, r3}
   1fb44:	469e      	mov	lr, r3
   1fb46:	bc08      	pop	{r3}

0001fb48 <.call_function>:
   1fb48:	4760      	bx	ip

0001fb4a <.direct_call>:
   1fb4a:	469c      	mov	ip, r3
   1fb4c:	bc08      	pop	{r3}
   1fb4e:	4760      	bx	ip
   1fb50:	0002f8e4 	.word	0x0002f8e4
   1fb54:	0001fafc 	.word	0x0001fafc
   1fb58:	ffffffff 	.word	0xffffffff

0001fb5c <function_name>:
   1fb5c:	696c6554 	.word	0x696c6554
   1fb60:	535f6d75 	.word	0x535f6d75
   1fb64:	75746174 	.word	0x75746174
   1fb68:	0073      	.short	0x0073
   1fb6a:	bf00      	nop

0001fb6c <Telium_Status>:
   1fb6c:	b408      	push	{r3}
   1fb6e:	4b10      	ldr	r3, [pc, #64]	; (1fbb0 <.direct_call+0x6>)
   1fb70:	681b      	ldr	r3, [r3, #0]
   1fb72:	2b00      	cmp	r3, #0
   1fb74:	d119      	bne.n	1fbaa <.direct_call>
   1fb76:	b507      	push	{r0, r1, r2, lr}
   1fb78:	f7ff fe68 	bl	1f84c <extenslib_open>
   1fb7c:	2800      	cmp	r0, #0
   1fb7e:	d00b      	beq.n	1fb98 <.bad_return>
   1fb80:	4684      	mov	ip, r0
   1fb82:	480c      	ldr	r0, [pc, #48]	; (1fbb4 <.direct_call+0xa>)
   1fb84:	f000 f810 	bl	1fba8 <.call_function>
   1fb88:	2800      	cmp	r0, #0
   1fb8a:	d002      	beq.n	1fb92 <.exit_return>
   1fb8c:	4908      	ldr	r1, [pc, #32]	; (1fbb0 <.direct_call+0x6>)
   1fb8e:	6008      	str	r0, [r1, #0]
   1fb90:	e006      	b.n	1fba0 <.already_initialized>

0001fb92 <.exit_return>:
   1fb92:	4809      	ldr	r0, [pc, #36]	; (1fbb8 <.direct_call+0xe>)
   1fb94:	f001 f9e0 	bl	20f58 <Telium_Exit>

0001fb98 <.bad_return>:
   1fb98:	bc0f      	pop	{r0, r1, r2, r3}
   1fb9a:	469e      	mov	lr, r3
   1fb9c:	bc08      	pop	{r3}
   1fb9e:	4770      	bx	lr

0001fba0 <.already_initialized>:
   1fba0:	4684      	mov	ip, r0
   1fba2:	bc0f      	pop	{r0, r1, r2, r3}
   1fba4:	469e      	mov	lr, r3
   1fba6:	bc08      	pop	{r3}

0001fba8 <.call_function>:
   1fba8:	4760      	bx	ip

0001fbaa <.direct_call>:
   1fbaa:	469c      	mov	ip, r3
   1fbac:	bc08      	pop	{r3}
   1fbae:	4760      	bx	ip
   1fbb0:	0002f8e8 	.word	0x0002f8e8
   1fbb4:	0001fb5c 	.word	0x0001fb5c
   1fbb8:	00000b3c 	.word	0x00000b3c

0001fbbc <function_name>:
   1fbbc:	696c6554 	.word	0x696c6554
   1fbc0:	535f6d75 	.word	0x535f6d75
   1fbc4:	6e696474 	.word	0x6e696474
   1fbc8:	00          	.byte	0x00
   1fbc9:	00          	.byte	0x00
   1fbca:	bf00      	nop

0001fbcc <Telium_Stdin>:
   1fbcc:	b408      	push	{r3}
   1fbce:	4b11      	ldr	r3, [pc, #68]	; (1fc14 <.direct_call+0x8>)
   1fbd0:	681b      	ldr	r3, [r3, #0]
   1fbd2:	2b00      	cmp	r3, #0
   1fbd4:	d11a      	bne.n	1fc0c <.direct_call>
   1fbd6:	b507      	push	{r0, r1, r2, lr}
   1fbd8:	f7ff fe38 	bl	1f84c <extenslib_open>
   1fbdc:	2800      	cmp	r0, #0
   1fbde:	d00b      	beq.n	1fbf8 <.bad_return>
   1fbe0:	4684      	mov	ip, r0
   1fbe2:	480d      	ldr	r0, [pc, #52]	; (1fc18 <.direct_call+0xc>)
   1fbe4:	f000 f811 	bl	1fc0a <.call_function>
   1fbe8:	2800      	cmp	r0, #0
   1fbea:	d002      	beq.n	1fbf2 <.exit_return>
   1fbec:	4909      	ldr	r1, [pc, #36]	; (1fc14 <.direct_call+0x8>)
   1fbee:	6008      	str	r0, [r1, #0]
   1fbf0:	e007      	b.n	1fc02 <.already_initialized>

0001fbf2 <.exit_return>:
   1fbf2:	480a      	ldr	r0, [pc, #40]	; (1fc1c <.direct_call+0x10>)
   1fbf4:	f001 f9b0 	bl	20f58 <Telium_Exit>

0001fbf8 <.bad_return>:
   1fbf8:	bc0f      	pop	{r0, r1, r2, r3}
   1fbfa:	2000      	movs	r0, #0
   1fbfc:	469e      	mov	lr, r3
   1fbfe:	bc08      	pop	{r3}
   1fc00:	4770      	bx	lr

0001fc02 <.already_initialized>:
   1fc02:	4684      	mov	ip, r0
   1fc04:	bc0f      	pop	{r0, r1, r2, r3}
   1fc06:	469e      	mov	lr, r3
   1fc08:	bc08      	pop	{r3}

0001fc0a <.call_function>:
   1fc0a:	4760      	bx	ip

0001fc0c <.direct_call>:
   1fc0c:	469c      	mov	ip, r3
   1fc0e:	bc08      	pop	{r3}
   1fc10:	4760      	bx	ip
   1fc12:	0000      	.short	0x0000
   1fc14:	0002f8ec 	.word	0x0002f8ec
   1fc18:	0001fbbc 	.word	0x0001fbbc
   1fc1c:	00000b38 	.word	0x00000b38

0001fc20 <function_name>:
   1fc20:	696c6554 	.word	0x696c6554
   1fc24:	535f6d75 	.word	0x535f6d75
   1fc28:	756f6474 	.word	0x756f6474
   1fc2c:	0074      	.short	0x0074
   1fc2e:	bf00      	nop

0001fc30 <Telium_Stdout>:
   1fc30:	b408      	push	{r3}
   1fc32:	4b11      	ldr	r3, [pc, #68]	; (1fc78 <.direct_call+0x8>)
   1fc34:	681b      	ldr	r3, [r3, #0]
   1fc36:	2b00      	cmp	r3, #0
   1fc38:	d11a      	bne.n	1fc70 <.direct_call>
   1fc3a:	b507      	push	{r0, r1, r2, lr}
   1fc3c:	f7ff fe06 	bl	1f84c <extenslib_open>
   1fc40:	2800      	cmp	r0, #0
   1fc42:	d00b      	beq.n	1fc5c <.bad_return>
   1fc44:	4684      	mov	ip, r0
   1fc46:	480d      	ldr	r0, [pc, #52]	; (1fc7c <.direct_call+0xc>)
   1fc48:	f000 f811 	bl	1fc6e <.call_function>
   1fc4c:	2800      	cmp	r0, #0
   1fc4e:	d002      	beq.n	1fc56 <.exit_return>
   1fc50:	4909      	ldr	r1, [pc, #36]	; (1fc78 <.direct_call+0x8>)
   1fc52:	6008      	str	r0, [r1, #0]
   1fc54:	e007      	b.n	1fc66 <.already_initialized>

0001fc56 <.exit_return>:
   1fc56:	480a      	ldr	r0, [pc, #40]	; (1fc80 <.direct_call+0x10>)
   1fc58:	f001 f97e 	bl	20f58 <Telium_Exit>

0001fc5c <.bad_return>:
   1fc5c:	bc0f      	pop	{r0, r1, r2, r3}
   1fc5e:	2000      	movs	r0, #0
   1fc60:	469e      	mov	lr, r3
   1fc62:	bc08      	pop	{r3}
   1fc64:	4770      	bx	lr

0001fc66 <.already_initialized>:
   1fc66:	4684      	mov	ip, r0
   1fc68:	bc0f      	pop	{r0, r1, r2, r3}
   1fc6a:	469e      	mov	lr, r3
   1fc6c:	bc08      	pop	{r3}

0001fc6e <.call_function>:
   1fc6e:	4760      	bx	ip

0001fc70 <.direct_call>:
   1fc70:	469c      	mov	ip, r3
   1fc72:	bc08      	pop	{r3}
   1fc74:	4760      	bx	ip
   1fc76:	0000      	.short	0x0000
   1fc78:	0002f8f0 	.word	0x0002f8f0
   1fc7c:	0001fc20 	.word	0x0001fc20
   1fc80:	00000b37 	.word	0x00000b37

0001fc84 <function_name>:
   1fc84:	696c6554 	.word	0x696c6554
   1fc88:	535f6d75 	.word	0x535f6d75
   1fc8c:	65706474 	.word	0x65706474
   1fc90:	00666972 	.word	0x00666972

0001fc94 <Telium_Stdperif>:
   1fc94:	b408      	push	{r3}
   1fc96:	4b11      	ldr	r3, [pc, #68]	; (1fcdc <.direct_call+0x8>)
   1fc98:	681b      	ldr	r3, [r3, #0]
   1fc9a:	2b00      	cmp	r3, #0
   1fc9c:	d11a      	bne.n	1fcd4 <.direct_call>
   1fc9e:	b507      	push	{r0, r1, r2, lr}
   1fca0:	f7ff fdd4 	bl	1f84c <extenslib_open>
   1fca4:	2800      	cmp	r0, #0
   1fca6:	d00b      	beq.n	1fcc0 <.bad_return>
   1fca8:	4684      	mov	ip, r0
   1fcaa:	480d      	ldr	r0, [pc, #52]	; (1fce0 <.direct_call+0xc>)
   1fcac:	f000 f811 	bl	1fcd2 <.call_function>
   1fcb0:	2800      	cmp	r0, #0
   1fcb2:	d002      	beq.n	1fcba <.exit_return>
   1fcb4:	4909      	ldr	r1, [pc, #36]	; (1fcdc <.direct_call+0x8>)
   1fcb6:	6008      	str	r0, [r1, #0]
   1fcb8:	e007      	b.n	1fcca <.already_initialized>

0001fcba <.exit_return>:
   1fcba:	480a      	ldr	r0, [pc, #40]	; (1fce4 <.direct_call+0x10>)
   1fcbc:	f001 f94c 	bl	20f58 <Telium_Exit>

0001fcc0 <.bad_return>:
   1fcc0:	bc0f      	pop	{r0, r1, r2, r3}
   1fcc2:	2000      	movs	r0, #0
   1fcc4:	469e      	mov	lr, r3
   1fcc6:	bc08      	pop	{r3}
   1fcc8:	4770      	bx	lr

0001fcca <.already_initialized>:
   1fcca:	4684      	mov	ip, r0
   1fccc:	bc0f      	pop	{r0, r1, r2, r3}
   1fcce:	469e      	mov	lr, r3
   1fcd0:	bc08      	pop	{r3}

0001fcd2 <.call_function>:
   1fcd2:	4760      	bx	ip

0001fcd4 <.direct_call>:
   1fcd4:	469c      	mov	ip, r3
   1fcd6:	bc08      	pop	{r3}
   1fcd8:	4760      	bx	ip
   1fcda:	0000      	.short	0x0000
   1fcdc:	0002f8f4 	.word	0x0002f8f4
   1fce0:	0001fc84 	.word	0x0001fc84
   1fce4:	00000b36 	.word	0x00000b36

0001fce8 <function_name>:
   1fce8:	696c6554 	.word	0x696c6554
   1fcec:	545f6d75 	.word	0x545f6d75
   1fcf0:	74736574 	.word	0x74736574
   1fcf4:	006c6c61 	.word	0x006c6c61

0001fcf8 <Telium_Ttestall>:
   1fcf8:	b408      	push	{r3}
   1fcfa:	4b11      	ldr	r3, [pc, #68]	; (1fd40 <.direct_call+0x8>)
   1fcfc:	681b      	ldr	r3, [r3, #0]
   1fcfe:	2b00      	cmp	r3, #0
   1fd00:	d11a      	bne.n	1fd38 <.direct_call>
   1fd02:	b507      	push	{r0, r1, r2, lr}
   1fd04:	f7ff fda2 	bl	1f84c <extenslib_open>
   1fd08:	2800      	cmp	r0, #0
   1fd0a:	d00b      	beq.n	1fd24 <.bad_return>
   1fd0c:	4684      	mov	ip, r0
   1fd0e:	480d      	ldr	r0, [pc, #52]	; (1fd44 <.direct_call+0xc>)
   1fd10:	f000 f811 	bl	1fd36 <.call_function>
   1fd14:	2800      	cmp	r0, #0
   1fd16:	d002      	beq.n	1fd1e <.exit_return>
   1fd18:	4909      	ldr	r1, [pc, #36]	; (1fd40 <.direct_call+0x8>)
   1fd1a:	6008      	str	r0, [r1, #0]
   1fd1c:	e007      	b.n	1fd2e <.already_initialized>

0001fd1e <.exit_return>:
   1fd1e:	480a      	ldr	r0, [pc, #40]	; (1fd48 <.direct_call+0x10>)
   1fd20:	f001 f91a 	bl	20f58 <Telium_Exit>

0001fd24 <.bad_return>:
   1fd24:	bc0f      	pop	{r0, r1, r2, r3}
   1fd26:	2000      	movs	r0, #0
   1fd28:	469e      	mov	lr, r3
   1fd2a:	bc08      	pop	{r3}
   1fd2c:	4770      	bx	lr

0001fd2e <.already_initialized>:
   1fd2e:	4684      	mov	ip, r0
   1fd30:	bc0f      	pop	{r0, r1, r2, r3}
   1fd32:	469e      	mov	lr, r3
   1fd34:	bc08      	pop	{r3}

0001fd36 <.call_function>:
   1fd36:	4760      	bx	ip

0001fd38 <.direct_call>:
   1fd38:	469c      	mov	ip, r3
   1fd3a:	bc08      	pop	{r3}
   1fd3c:	4760      	bx	ip
   1fd3e:	0000      	.short	0x0000
   1fd40:	0002f8f8 	.word	0x0002f8f8
   1fd44:	0001fce8 	.word	0x0001fce8
   1fd48:	00000b3e 	.word	0x00000b3e

0001fd4c <function_name>:
   1fd4c:	7a7a7562 	.word	0x7a7a7562
   1fd50:	7265      	.short	0x7265
	...

0001fd54 <buzzer>:
   1fd54:	b408      	push	{r3}
   1fd56:	4b0f      	ldr	r3, [pc, #60]	; (1fd94 <.direct_call+0x8>)
   1fd58:	681b      	ldr	r3, [r3, #0]
   1fd5a:	2b00      	cmp	r3, #0
   1fd5c:	d116      	bne.n	1fd8c <.direct_call>
   1fd5e:	b507      	push	{r0, r1, r2, lr}
   1fd60:	f7ff fd74 	bl	1f84c <extenslib_open>
   1fd64:	2800      	cmp	r0, #0
   1fd66:	d008      	beq.n	1fd7a <.bad_return>
   1fd68:	4684      	mov	ip, r0
   1fd6a:	480b      	ldr	r0, [pc, #44]	; (1fd98 <.direct_call+0xc>)
   1fd6c:	f000 f80d 	bl	1fd8a <.call_function>
   1fd70:	2800      	cmp	r0, #0
   1fd72:	d002      	beq.n	1fd7a <.bad_return>
   1fd74:	4907      	ldr	r1, [pc, #28]	; (1fd94 <.direct_call+0x8>)
   1fd76:	6008      	str	r0, [r1, #0]
   1fd78:	e003      	b.n	1fd82 <.already_initialized>

0001fd7a <.bad_return>:
   1fd7a:	bc0f      	pop	{r0, r1, r2, r3}
   1fd7c:	469e      	mov	lr, r3
   1fd7e:	bc08      	pop	{r3}
   1fd80:	4770      	bx	lr

0001fd82 <.already_initialized>:
   1fd82:	4684      	mov	ip, r0
   1fd84:	bc0f      	pop	{r0, r1, r2, r3}
   1fd86:	469e      	mov	lr, r3
   1fd88:	bc08      	pop	{r3}

0001fd8a <.call_function>:
   1fd8a:	4760      	bx	ip

0001fd8c <.direct_call>:
   1fd8c:	469c      	mov	ip, r3
   1fd8e:	bc08      	pop	{r3}
   1fd90:	4760      	bx	ip
   1fd92:	0000      	.short	0x0000
   1fd94:	0002f8fc 	.word	0x0002f8fc
   1fd98:	0001fd4c 	.word	0x0001fd4c

0001fd9c <function_name>:
   1fd9c:	77617244 	.word	0x77617244
   1fda0:	65747845 	.word	0x65747845
   1fda4:	6465646e 	.word	0x6465646e
   1fda8:	69727453 	.word	0x69727453
   1fdac:	676e      	.short	0x676e
	...

0001fdb0 <DrawExtendedString>:
   1fdb0:	b408      	push	{r3}
   1fdb2:	4b10      	ldr	r3, [pc, #64]	; (1fdf4 <.direct_call+0x6>)
   1fdb4:	681b      	ldr	r3, [r3, #0]
   1fdb6:	2b00      	cmp	r3, #0
   1fdb8:	d119      	bne.n	1fdee <.direct_call>
   1fdba:	b507      	push	{r0, r1, r2, lr}
   1fdbc:	f000 f8bc 	bl	1ff38 <libgrlib_open>
   1fdc0:	2800      	cmp	r0, #0
   1fdc2:	d00b      	beq.n	1fddc <.bad_return>
   1fdc4:	4684      	mov	ip, r0
   1fdc6:	480c      	ldr	r0, [pc, #48]	; (1fdf8 <.direct_call+0xa>)
   1fdc8:	f000 f810 	bl	1fdec <.call_function>
   1fdcc:	2800      	cmp	r0, #0
   1fdce:	d002      	beq.n	1fdd6 <.exit_return>
   1fdd0:	4908      	ldr	r1, [pc, #32]	; (1fdf4 <.direct_call+0x6>)
   1fdd2:	6008      	str	r0, [r1, #0]
   1fdd4:	e006      	b.n	1fde4 <.already_initialized>

0001fdd6 <.exit_return>:
   1fdd6:	4809      	ldr	r0, [pc, #36]	; (1fdfc <.direct_call+0xe>)
   1fdd8:	f001 f8be 	bl	20f58 <Telium_Exit>

0001fddc <.bad_return>:
   1fddc:	bc0f      	pop	{r0, r1, r2, r3}
   1fdde:	469e      	mov	lr, r3
   1fde0:	bc08      	pop	{r3}
   1fde2:	4770      	bx	lr

0001fde4 <.already_initialized>:
   1fde4:	4684      	mov	ip, r0
   1fde6:	bc0f      	pop	{r0, r1, r2, r3}
   1fde8:	469e      	mov	lr, r3
   1fdea:	bc08      	pop	{r3}

0001fdec <.call_function>:
   1fdec:	4760      	bx	ip

0001fdee <.direct_call>:
   1fdee:	469c      	mov	ip, r3
   1fdf0:	bc08      	pop	{r3}
   1fdf2:	4760      	bx	ip
   1fdf4:	0002f900 	.word	0x0002f900
   1fdf8:	0001fd9c 	.word	0x0001fd9c
   1fdfc:	00000932 	.word	0x00000932

0001fe00 <function_name>:
   1fe00:	74696e49 	.word	0x74696e49
   1fe04:	746e6f43 	.word	0x746e6f43
   1fe08:	65747865 	.word	0x65747865
   1fe0c:	70617247 	.word	0x70617247
   1fe10:	75716968 	.word	0x75716968
   1fe14:	0065      	.short	0x0065
   1fe16:	bf00      	nop

0001fe18 <InitContexteGraphique>:
   1fe18:	b408      	push	{r3}
   1fe1a:	4b0d      	ldr	r3, [pc, #52]	; (1fe50 <.direct_call+0x6>)
   1fe1c:	681b      	ldr	r3, [r3, #0]
   1fe1e:	2b00      	cmp	r3, #0
   1fe20:	d113      	bne.n	1fe4a <.direct_call>
   1fe22:	b507      	push	{r0, r1, r2, lr}
   1fe24:	f000 f888 	bl	1ff38 <libgrlib_open>
   1fe28:	2800      	cmp	r0, #0
   1fe2a:	d008      	beq.n	1fe3e <.bad_return>
   1fe2c:	4684      	mov	ip, r0
   1fe2e:	4809      	ldr	r0, [pc, #36]	; (1fe54 <.direct_call+0xa>)
   1fe30:	f000 f80a 	bl	1fe48 <.call_function>
   1fe34:	2800      	cmp	r0, #0
   1fe36:	d002      	beq.n	1fe3e <.bad_return>
   1fe38:	4905      	ldr	r1, [pc, #20]	; (1fe50 <.direct_call+0x6>)
   1fe3a:	6008      	str	r0, [r1, #0]
   1fe3c:	e000      	b.n	1fe40 <.already_initialized>

0001fe3e <.bad_return>:
   1fe3e:	4806      	ldr	r0, [pc, #24]	; (1fe58 <.direct_call+0xe>)

0001fe40 <.already_initialized>:
   1fe40:	4684      	mov	ip, r0
   1fe42:	bc0f      	pop	{r0, r1, r2, r3}
   1fe44:	469e      	mov	lr, r3
   1fe46:	bc08      	pop	{r3}

0001fe48 <.call_function>:
   1fe48:	4760      	bx	ip

0001fe4a <.direct_call>:
   1fe4a:	469c      	mov	ip, r3
   1fe4c:	bc08      	pop	{r3}
   1fe4e:	4760      	bx	ip
   1fe50:	0002f904 	.word	0x0002f904
   1fe54:	0001fe00 	.word	0x0001fe00
   1fe58:	00021099 	.word	0x00021099

0001fe5c <function_name>:
   1fe5c:	6e696150 	.word	0x6e696150
   1fe60:	61724774 	.word	0x61724774
   1fe64:	63696870 	.word	0x63696870
   1fe68:	0073      	.short	0x0073
   1fe6a:	bf00      	nop

0001fe6c <PaintGraphics>:
   1fe6c:	b408      	push	{r3}
   1fe6e:	4b0f      	ldr	r3, [pc, #60]	; (1feac <.direct_call+0x8>)
   1fe70:	681b      	ldr	r3, [r3, #0]
   1fe72:	2b00      	cmp	r3, #0
   1fe74:	d116      	bne.n	1fea4 <.direct_call>
   1fe76:	b507      	push	{r0, r1, r2, lr}
   1fe78:	f000 f85e 	bl	1ff38 <libgrlib_open>
   1fe7c:	2800      	cmp	r0, #0
   1fe7e:	d008      	beq.n	1fe92 <.bad_return>
   1fe80:	4684      	mov	ip, r0
   1fe82:	480b      	ldr	r0, [pc, #44]	; (1feb0 <.direct_call+0xc>)
   1fe84:	f000 f80d 	bl	1fea2 <.call_function>
   1fe88:	2800      	cmp	r0, #0
   1fe8a:	d002      	beq.n	1fe92 <.bad_return>
   1fe8c:	4907      	ldr	r1, [pc, #28]	; (1feac <.direct_call+0x8>)
   1fe8e:	6008      	str	r0, [r1, #0]
   1fe90:	e003      	b.n	1fe9a <.already_initialized>

0001fe92 <.bad_return>:
   1fe92:	bc0f      	pop	{r0, r1, r2, r3}
   1fe94:	469e      	mov	lr, r3
   1fe96:	bc08      	pop	{r3}
   1fe98:	4770      	bx	lr

0001fe9a <.already_initialized>:
   1fe9a:	4684      	mov	ip, r0
   1fe9c:	bc0f      	pop	{r0, r1, r2, r3}
   1fe9e:	469e      	mov	lr, r3
   1fea0:	bc08      	pop	{r3}

0001fea2 <.call_function>:
   1fea2:	4760      	bx	ip

0001fea4 <.direct_call>:
   1fea4:	469c      	mov	ip, r3
   1fea6:	bc08      	pop	{r3}
   1fea8:	4760      	bx	ip
   1feaa:	0000      	.short	0x0000
   1feac:	0002f908 	.word	0x0002f908
   1feb0:	0001fe5c 	.word	0x0001fe5c

0001feb4 <function_name>:
   1feb4:	6172445f 	.word	0x6172445f
   1feb8:	74784577 	.word	0x74784577
   1febc:	65646e65 	.word	0x65646e65
   1fec0:	72745364 	.word	0x72745364
   1fec4:	00676e69 	.word	0x00676e69

0001fec8 <_DrawExtendedString>:
   1fec8:	b408      	push	{r3}
   1feca:	4b10      	ldr	r3, [pc, #64]	; (1ff0c <.direct_call+0x6>)
   1fecc:	681b      	ldr	r3, [r3, #0]
   1fece:	2b00      	cmp	r3, #0
   1fed0:	d119      	bne.n	1ff06 <.direct_call>
   1fed2:	b507      	push	{r0, r1, r2, lr}
   1fed4:	f000 f830 	bl	1ff38 <libgrlib_open>
   1fed8:	2800      	cmp	r0, #0
   1feda:	d00b      	beq.n	1fef4 <.bad_return>
   1fedc:	4684      	mov	ip, r0
   1fede:	480c      	ldr	r0, [pc, #48]	; (1ff10 <.direct_call+0xa>)
   1fee0:	f000 f810 	bl	1ff04 <.call_function>
   1fee4:	2800      	cmp	r0, #0
   1fee6:	d002      	beq.n	1feee <.exit_return>
   1fee8:	4908      	ldr	r1, [pc, #32]	; (1ff0c <.direct_call+0x6>)
   1feea:	6008      	str	r0, [r1, #0]
   1feec:	e006      	b.n	1fefc <.already_initialized>

0001feee <.exit_return>:
   1feee:	4809      	ldr	r0, [pc, #36]	; (1ff14 <.direct_call+0xe>)
   1fef0:	f001 f832 	bl	20f58 <Telium_Exit>

0001fef4 <.bad_return>:
   1fef4:	bc0f      	pop	{r0, r1, r2, r3}
   1fef6:	469e      	mov	lr, r3
   1fef8:	bc08      	pop	{r3}
   1fefa:	4770      	bx	lr

0001fefc <.already_initialized>:
   1fefc:	4684      	mov	ip, r0
   1fefe:	bc0f      	pop	{r0, r1, r2, r3}
   1ff00:	469e      	mov	lr, r3
   1ff02:	bc08      	pop	{r3}

0001ff04 <.call_function>:
   1ff04:	4760      	bx	ip

0001ff06 <.direct_call>:
   1ff06:	469c      	mov	ip, r3
   1ff08:	bc08      	pop	{r3}
   1ff0a:	4760      	bx	ip
   1ff0c:	0002f90c 	.word	0x0002f90c
   1ff10:	0001feb4 	.word	0x0001feb4
   1ff14:	00000931 	.word	0x00000931

0001ff18 <GetProcAddressLibgr>:
   1ff18:	4b05      	ldr	r3, [pc, #20]	; (1ff30 <GetProcAddressLibgr+0x18>)
   1ff1a:	4a06      	ldr	r2, [pc, #24]	; (1ff34 <GetProcAddressLibgr+0x1c>)
   1ff1c:	447b      	add	r3, pc
   1ff1e:	4601      	mov	r1, r0
   1ff20:	589b      	ldr	r3, [r3, r2]
   1ff22:	6818      	ldr	r0, [r3, #0]
   1ff24:	b110      	cbz	r0, 1ff2c <GetProcAddressLibgr+0x14>
   1ff26:	b109      	cbz	r1, 1ff2c <GetProcAddressLibgr+0x14>
   1ff28:	f002 b827 	b.w	21f7a <OSL_Dll_GetSymbolByName>
   1ff2c:	2000      	movs	r0, #0
   1ff2e:	4770      	bx	lr
   1ff30:	0000f1f8 	.word	0x0000f1f8
   1ff34:	000000fc 	.word	0x000000fc

0001ff38 <libgrlib_open>:
   1ff38:	b570      	push	{r4, r5, r6, lr}
   1ff3a:	4c0b      	ldr	r4, [pc, #44]	; (1ff68 <libgrlib_open+0x30>)
   1ff3c:	4b0b      	ldr	r3, [pc, #44]	; (1ff6c <libgrlib_open+0x34>)
   1ff3e:	447c      	add	r4, pc
   1ff40:	4a0b      	ldr	r2, [pc, #44]	; (1ff70 <libgrlib_open+0x38>)
   1ff42:	58e6      	ldr	r6, [r4, r3]
   1ff44:	58a5      	ldr	r5, [r4, r2]
   1ff46:	6833      	ldr	r3, [r6, #0]
   1ff48:	b95b      	cbnz	r3, 1ff62 <libgrlib_open+0x2a>
   1ff4a:	2003      	movs	r0, #3
   1ff4c:	f002 f845 	bl	21fda <OSL_Dll_OpenByAppliType>
   1ff50:	6030      	str	r0, [r6, #0]
   1ff52:	b130      	cbz	r0, 1ff62 <libgrlib_open+0x2a>
   1ff54:	4b07      	ldr	r3, [pc, #28]	; (1ff74 <libgrlib_open+0x3c>)
   1ff56:	4808      	ldr	r0, [pc, #32]	; (1ff78 <libgrlib_open+0x40>)
   1ff58:	58e3      	ldr	r3, [r4, r3]
   1ff5a:	4478      	add	r0, pc
   1ff5c:	602b      	str	r3, [r5, #0]
   1ff5e:	f7ff ffdb 	bl	1ff18 <GetProcAddressLibgr>
   1ff62:	6828      	ldr	r0, [r5, #0]
   1ff64:	bd70      	pop	{r4, r5, r6, pc}
   1ff66:	bf00      	nop
   1ff68:	0000f1d6 	.word	0x0000f1d6
   1ff6c:	000000fc 	.word	0x000000fc
   1ff70:	000000c8 	.word	0x000000c8
   1ff74:	000000d0 	.word	0x000000d0
   1ff78:	0000636a 	.word	0x0000636a

0001ff7c <libgrlib_close>:
   1ff7c:	4b03      	ldr	r3, [pc, #12]	; (1ff8c <libgrlib_close+0x10>)
   1ff7e:	4a04      	ldr	r2, [pc, #16]	; (1ff90 <libgrlib_close+0x14>)
   1ff80:	447b      	add	r3, pc
   1ff82:	589b      	ldr	r3, [r3, r2]
   1ff84:	6818      	ldr	r0, [r3, #0]
   1ff86:	f001 bfe8 	b.w	21f5a <OSL_Dll_Close>
   1ff8a:	bf00      	nop
   1ff8c:	0000f194 	.word	0x0000f194
   1ff90:	000000fc 	.word	0x000000fc

0001ff94 <function_name>:
   1ff94:	5f515350 	.word	0x5f515350
   1ff98:	5f747345 	.word	0x5f747345
   1ff9c:	706e6970 	.word	0x706e6970
   1ffa0:	6461      	.short	0x6461
	...

0001ffa4 <PSQ_Est_pinpad>:
   1ffa4:	b408      	push	{r3}
   1ffa6:	4b11      	ldr	r3, [pc, #68]	; (1ffec <.direct_call+0x8>)
   1ffa8:	681b      	ldr	r3, [r3, #0]
   1ffaa:	2b00      	cmp	r3, #0
   1ffac:	d11a      	bne.n	1ffe4 <.direct_call>
   1ffae:	b507      	push	{r0, r1, r2, lr}
   1ffb0:	f000 f868 	bl	20084 <paramlib_open>
   1ffb4:	2800      	cmp	r0, #0
   1ffb6:	d00b      	beq.n	1ffd0 <.bad_return>
   1ffb8:	4684      	mov	ip, r0
   1ffba:	480d      	ldr	r0, [pc, #52]	; (1fff0 <.direct_call+0xc>)
   1ffbc:	f000 f811 	bl	1ffe2 <.call_function>
   1ffc0:	2800      	cmp	r0, #0
   1ffc2:	d002      	beq.n	1ffca <.exit_return>
   1ffc4:	4909      	ldr	r1, [pc, #36]	; (1ffec <.direct_call+0x8>)
   1ffc6:	6008      	str	r0, [r1, #0]
   1ffc8:	e007      	b.n	1ffda <.already_initialized>

0001ffca <.exit_return>:
   1ffca:	480a      	ldr	r0, [pc, #40]	; (1fff4 <.direct_call+0x10>)
   1ffcc:	f000 ffc4 	bl	20f58 <Telium_Exit>

0001ffd0 <.bad_return>:
   1ffd0:	bc0f      	pop	{r0, r1, r2, r3}
   1ffd2:	2000      	movs	r0, #0
   1ffd4:	469e      	mov	lr, r3
   1ffd6:	bc08      	pop	{r3}
   1ffd8:	4770      	bx	lr

0001ffda <.already_initialized>:
   1ffda:	4684      	mov	ip, r0
   1ffdc:	bc0f      	pop	{r0, r1, r2, r3}
   1ffde:	469e      	mov	lr, r3
   1ffe0:	bc08      	pop	{r3}

0001ffe2 <.call_function>:
   1ffe2:	4760      	bx	ip

0001ffe4 <.direct_call>:
   1ffe4:	469c      	mov	ip, r3
   1ffe6:	bc08      	pop	{r3}
   1ffe8:	4760      	bx	ip
   1ffea:	0000      	.short	0x0000
   1ffec:	0002f910 	.word	0x0002f910
   1fff0:	0001ff94 	.word	0x0001ff94
   1fff4:	00000b0b 	.word	0x00000b0b

0001fff8 <function_name>:
   1fff8:	5f515350 	.word	0x5f515350
   1fffc:	6e6e6f64 	.word	0x6e6e6f64
   20000:	745f7265 	.word	0x745f7265
   20004:	5f657079 	.word	0x5f657079
   20008:	706e6970 	.word	0x706e6970
   2000c:	6461      	.short	0x6461
	...

00020010 <PSQ_donner_type_pinpad>:
   20010:	b408      	push	{r3}
   20012:	4b11      	ldr	r3, [pc, #68]	; (20058 <.direct_call+0x8>)
   20014:	681b      	ldr	r3, [r3, #0]
   20016:	2b00      	cmp	r3, #0
   20018:	d11a      	bne.n	20050 <.direct_call>
   2001a:	b507      	push	{r0, r1, r2, lr}
   2001c:	f000 f832 	bl	20084 <paramlib_open>
   20020:	2800      	cmp	r0, #0
   20022:	d00b      	beq.n	2003c <.bad_return>
   20024:	4684      	mov	ip, r0
   20026:	480d      	ldr	r0, [pc, #52]	; (2005c <.direct_call+0xc>)
   20028:	f000 f811 	bl	2004e <.call_function>
   2002c:	2800      	cmp	r0, #0
   2002e:	d002      	beq.n	20036 <.exit_return>
   20030:	4909      	ldr	r1, [pc, #36]	; (20058 <.direct_call+0x8>)
   20032:	6008      	str	r0, [r1, #0]
   20034:	e007      	b.n	20046 <.already_initialized>

00020036 <.exit_return>:
   20036:	480a      	ldr	r0, [pc, #40]	; (20060 <.direct_call+0x10>)
   20038:	f000 ff8e 	bl	20f58 <Telium_Exit>

0002003c <.bad_return>:
   2003c:	bc0f      	pop	{r0, r1, r2, r3}
   2003e:	2000      	movs	r0, #0
   20040:	469e      	mov	lr, r3
   20042:	bc08      	pop	{r3}
   20044:	4770      	bx	lr

00020046 <.already_initialized>:
   20046:	4684      	mov	ip, r0
   20048:	bc0f      	pop	{r0, r1, r2, r3}
   2004a:	469e      	mov	lr, r3
   2004c:	bc08      	pop	{r3}

0002004e <.call_function>:
   2004e:	4760      	bx	ip

00020050 <.direct_call>:
   20050:	469c      	mov	ip, r3
   20052:	bc08      	pop	{r3}
   20054:	4760      	bx	ip
   20056:	0000      	.short	0x0000
   20058:	0002f914 	.word	0x0002f914
   2005c:	0001fff8 	.word	0x0001fff8
   20060:	00000b47 	.word	0x00000b47

00020064 <GetProcAddressParam>:
   20064:	4b05      	ldr	r3, [pc, #20]	; (2007c <GetProcAddressParam+0x18>)
   20066:	4a06      	ldr	r2, [pc, #24]	; (20080 <GetProcAddressParam+0x1c>)
   20068:	447b      	add	r3, pc
   2006a:	4601      	mov	r1, r0
   2006c:	589b      	ldr	r3, [r3, r2]
   2006e:	6818      	ldr	r0, [r3, #0]
   20070:	b110      	cbz	r0, 20078 <GetProcAddressParam+0x14>
   20072:	b109      	cbz	r1, 20078 <GetProcAddressParam+0x14>
   20074:	f001 bf81 	b.w	21f7a <OSL_Dll_GetSymbolByName>
   20078:	2000      	movs	r0, #0
   2007a:	4770      	bx	lr
   2007c:	0000f0ac 	.word	0x0000f0ac
   20080:	0000010c 	.word	0x0000010c

00020084 <paramlib_open>:
   20084:	b570      	push	{r4, r5, r6, lr}
   20086:	4c0b      	ldr	r4, [pc, #44]	; (200b4 <paramlib_open+0x30>)
   20088:	4b0b      	ldr	r3, [pc, #44]	; (200b8 <paramlib_open+0x34>)
   2008a:	447c      	add	r4, pc
   2008c:	4a0b      	ldr	r2, [pc, #44]	; (200bc <paramlib_open+0x38>)
   2008e:	58e6      	ldr	r6, [r4, r3]
   20090:	58a5      	ldr	r5, [r4, r2]
   20092:	6833      	ldr	r3, [r6, #0]
   20094:	b95b      	cbnz	r3, 200ae <paramlib_open+0x2a>
   20096:	2004      	movs	r0, #4
   20098:	f001 ff9f 	bl	21fda <OSL_Dll_OpenByAppliType>
   2009c:	6030      	str	r0, [r6, #0]
   2009e:	b130      	cbz	r0, 200ae <paramlib_open+0x2a>
   200a0:	4b07      	ldr	r3, [pc, #28]	; (200c0 <paramlib_open+0x3c>)
   200a2:	4808      	ldr	r0, [pc, #32]	; (200c4 <paramlib_open+0x40>)
   200a4:	58e3      	ldr	r3, [r4, r3]
   200a6:	4478      	add	r0, pc
   200a8:	602b      	str	r3, [r5, #0]
   200aa:	f7ff ffdb 	bl	20064 <GetProcAddressParam>
   200ae:	6828      	ldr	r0, [r5, #0]
   200b0:	bd70      	pop	{r4, r5, r6, pc}
   200b2:	bf00      	nop
   200b4:	0000f08a 	.word	0x0000f08a
   200b8:	0000010c 	.word	0x0000010c
   200bc:	00000108 	.word	0x00000108
   200c0:	00000100 	.word	0x00000100
   200c4:	0000621e 	.word	0x0000621e

000200c8 <paramlib_close>:
   200c8:	4b03      	ldr	r3, [pc, #12]	; (200d8 <paramlib_close+0x10>)
   200ca:	4a04      	ldr	r2, [pc, #16]	; (200dc <paramlib_close+0x14>)
   200cc:	447b      	add	r3, pc
   200ce:	589b      	ldr	r3, [r3, r2]
   200d0:	6818      	ldr	r0, [r3, #0]
   200d2:	f001 bf42 	b.w	21f5a <OSL_Dll_Close>
   200d6:	bf00      	nop
   200d8:	0000f048 	.word	0x0000f048
   200dc:	0000010c 	.word	0x0000010c

000200e0 <function_name>:
   200e0:	50507349 	.word	0x50507349
   200e4:	6e6f4353 	.word	0x6e6f4353
   200e8:	7463656e 	.word	0x7463656e
   200ec:	6465      	.short	0x6465
	...

000200f0 <IsPPSConnected>:
   200f0:	b408      	push	{r3}
   200f2:	4b11      	ldr	r3, [pc, #68]	; (20138 <.direct_call+0x8>)
   200f4:	681b      	ldr	r3, [r3, #0]
   200f6:	2b00      	cmp	r3, #0
   200f8:	d11a      	bne.n	20130 <.direct_call>
   200fa:	b507      	push	{r0, r1, r2, lr}
   200fc:	f000 f8ca 	bl	20294 <pinpadlib_open>
   20100:	2800      	cmp	r0, #0
   20102:	d00b      	beq.n	2011c <.bad_return>
   20104:	4684      	mov	ip, r0
   20106:	480d      	ldr	r0, [pc, #52]	; (2013c <.direct_call+0xc>)
   20108:	f000 f811 	bl	2012e <.call_function>
   2010c:	2800      	cmp	r0, #0
   2010e:	d002      	beq.n	20116 <.exit_return>
   20110:	4909      	ldr	r1, [pc, #36]	; (20138 <.direct_call+0x8>)
   20112:	6008      	str	r0, [r1, #0]
   20114:	e007      	b.n	20126 <.already_initialized>

00020116 <.exit_return>:
   20116:	480a      	ldr	r0, [pc, #40]	; (20140 <.direct_call+0x10>)
   20118:	f000 ff1e 	bl	20f58 <Telium_Exit>

0002011c <.bad_return>:
   2011c:	bc0f      	pop	{r0, r1, r2, r3}
   2011e:	2001      	movs	r0, #1
   20120:	469e      	mov	lr, r3
   20122:	bc08      	pop	{r3}
   20124:	4770      	bx	lr

00020126 <.already_initialized>:
   20126:	4684      	mov	ip, r0
   20128:	bc0f      	pop	{r0, r1, r2, r3}
   2012a:	469e      	mov	lr, r3
   2012c:	bc08      	pop	{r3}

0002012e <.call_function>:
   2012e:	4760      	bx	ip

00020130 <.direct_call>:
   20130:	469c      	mov	ip, r3
   20132:	bc08      	pop	{r3}
   20134:	4760      	bx	ip
   20136:	0000      	.short	0x0000
   20138:	0002f918 	.word	0x0002f918
   2013c:	000200e0 	.word	0x000200e0
   20140:	0000120f 	.word	0x0000120f

00020144 <function_name>:
   20144:	646e6553 	.word	0x646e6553
   20148:	6d726554 	.word	0x6d726554
   2014c:	6c616e69 	.word	0x6c616e69
   20150:	52666552 	.word	0x52666552
   20154:	65757165 	.word	0x65757165
   20158:	6f437473 	.word	0x6f437473
   2015c:	6e616d6d 	.word	0x6e616d6d
   20160:	0064      	.short	0x0064
   20162:	bf00      	nop

00020164 <PPS_SendTerminalRefRequestCommand>:
   20164:	b408      	push	{r3}
   20166:	4b11      	ldr	r3, [pc, #68]	; (201ac <.direct_call+0x8>)
   20168:	681b      	ldr	r3, [r3, #0]
   2016a:	2b00      	cmp	r3, #0
   2016c:	d11a      	bne.n	201a4 <.direct_call>
   2016e:	b507      	push	{r0, r1, r2, lr}
   20170:	f000 f890 	bl	20294 <pinpadlib_open>
   20174:	2800      	cmp	r0, #0
   20176:	d00b      	beq.n	20190 <.bad_return>
   20178:	4684      	mov	ip, r0
   2017a:	480d      	ldr	r0, [pc, #52]	; (201b0 <.direct_call+0xc>)
   2017c:	f000 f811 	bl	201a2 <.call_function>
   20180:	2800      	cmp	r0, #0
   20182:	d002      	beq.n	2018a <.exit_return>
   20184:	4909      	ldr	r1, [pc, #36]	; (201ac <.direct_call+0x8>)
   20186:	6008      	str	r0, [r1, #0]
   20188:	e007      	b.n	2019a <.already_initialized>

0002018a <.exit_return>:
   2018a:	480a      	ldr	r0, [pc, #40]	; (201b4 <.direct_call+0x10>)
   2018c:	f000 fee4 	bl	20f58 <Telium_Exit>

00020190 <.bad_return>:
   20190:	bc0f      	pop	{r0, r1, r2, r3}
   20192:	2001      	movs	r0, #1
   20194:	469e      	mov	lr, r3
   20196:	bc08      	pop	{r3}
   20198:	4770      	bx	lr

0002019a <.already_initialized>:
   2019a:	4684      	mov	ip, r0
   2019c:	bc0f      	pop	{r0, r1, r2, r3}
   2019e:	469e      	mov	lr, r3
   201a0:	bc08      	pop	{r3}

000201a2 <.call_function>:
   201a2:	4760      	bx	ip

000201a4 <.direct_call>:
   201a4:	469c      	mov	ip, r3
   201a6:	bc08      	pop	{r3}
   201a8:	4760      	bx	ip
   201aa:	0000      	.short	0x0000
   201ac:	0002f91c 	.word	0x0002f91c
   201b0:	00020144 	.word	0x00020144
   201b4:	00001217 	.word	0x00001217

000201b8 <function_name>:
   201b8:	5f535050 	.word	0x5f535050
   201bc:	73726966 	.word	0x73726966
   201c0:	6e696c74 	.word	0x6e696c74
   201c4:	0065      	.short	0x0065
   201c6:	bf00      	nop

000201c8 <PPS_firstline>:
   201c8:	b408      	push	{r3}
   201ca:	4b10      	ldr	r3, [pc, #64]	; (2020c <.direct_call+0x6>)
   201cc:	681b      	ldr	r3, [r3, #0]
   201ce:	2b00      	cmp	r3, #0
   201d0:	d119      	bne.n	20206 <.direct_call>
   201d2:	b507      	push	{r0, r1, r2, lr}
   201d4:	f000 f85e 	bl	20294 <pinpadlib_open>
   201d8:	2800      	cmp	r0, #0
   201da:	d00b      	beq.n	201f4 <.bad_return>
   201dc:	4684      	mov	ip, r0
   201de:	480c      	ldr	r0, [pc, #48]	; (20210 <.direct_call+0xa>)
   201e0:	f000 f810 	bl	20204 <.call_function>
   201e4:	2800      	cmp	r0, #0
   201e6:	d002      	beq.n	201ee <.exit_return>
   201e8:	4908      	ldr	r1, [pc, #32]	; (2020c <.direct_call+0x6>)
   201ea:	6008      	str	r0, [r1, #0]
   201ec:	e006      	b.n	201fc <.already_initialized>

000201ee <.exit_return>:
   201ee:	4809      	ldr	r0, [pc, #36]	; (20214 <.direct_call+0xe>)
   201f0:	f000 feb2 	bl	20f58 <Telium_Exit>

000201f4 <.bad_return>:
   201f4:	bc0f      	pop	{r0, r1, r2, r3}
   201f6:	469e      	mov	lr, r3
   201f8:	bc08      	pop	{r3}
   201fa:	4770      	bx	lr

000201fc <.already_initialized>:
   201fc:	4684      	mov	ip, r0
   201fe:	bc0f      	pop	{r0, r1, r2, r3}
   20200:	469e      	mov	lr, r3
   20202:	bc08      	pop	{r3}

00020204 <.call_function>:
   20204:	4760      	bx	ip

00020206 <.direct_call>:
   20206:	469c      	mov	ip, r3
   20208:	bc08      	pop	{r3}
   2020a:	4760      	bx	ip
   2020c:	0002f920 	.word	0x0002f920
   20210:	000201b8 	.word	0x000201b8
   20214:	00001209 	.word	0x00001209

00020218 <function_name>:
   20218:	5f535050 	.word	0x5f535050
   2021c:	6c77656e 	.word	0x6c77656e
   20220:	00656e69 	.word	0x00656e69

00020224 <PPS_newline>:
   20224:	b408      	push	{r3}
   20226:	4b10      	ldr	r3, [pc, #64]	; (20268 <.direct_call+0x6>)
   20228:	681b      	ldr	r3, [r3, #0]
   2022a:	2b00      	cmp	r3, #0
   2022c:	d119      	bne.n	20262 <.direct_call>
   2022e:	b507      	push	{r0, r1, r2, lr}
   20230:	f000 f830 	bl	20294 <pinpadlib_open>
   20234:	2800      	cmp	r0, #0
   20236:	d00b      	beq.n	20250 <.bad_return>
   20238:	4684      	mov	ip, r0
   2023a:	480c      	ldr	r0, [pc, #48]	; (2026c <.direct_call+0xa>)
   2023c:	f000 f810 	bl	20260 <.call_function>
   20240:	2800      	cmp	r0, #0
   20242:	d002      	beq.n	2024a <.exit_return>
   20244:	4908      	ldr	r1, [pc, #32]	; (20268 <.direct_call+0x6>)
   20246:	6008      	str	r0, [r1, #0]
   20248:	e006      	b.n	20258 <.already_initialized>

0002024a <.exit_return>:
   2024a:	4809      	ldr	r0, [pc, #36]	; (20270 <.direct_call+0xe>)
   2024c:	f000 fe84 	bl	20f58 <Telium_Exit>

00020250 <.bad_return>:
   20250:	bc0f      	pop	{r0, r1, r2, r3}
   20252:	469e      	mov	lr, r3
   20254:	bc08      	pop	{r3}
   20256:	4770      	bx	lr

00020258 <.already_initialized>:
   20258:	4684      	mov	ip, r0
   2025a:	bc0f      	pop	{r0, r1, r2, r3}
   2025c:	469e      	mov	lr, r3
   2025e:	bc08      	pop	{r3}

00020260 <.call_function>:
   20260:	4760      	bx	ip

00020262 <.direct_call>:
   20262:	469c      	mov	ip, r3
   20264:	bc08      	pop	{r3}
   20266:	4760      	bx	ip
   20268:	0002f924 	.word	0x0002f924
   2026c:	00020218 	.word	0x00020218
   20270:	00001207 	.word	0x00001207

00020274 <GetProcAddressPinpad>:
   20274:	4b05      	ldr	r3, [pc, #20]	; (2028c <GetProcAddressPinpad+0x18>)
   20276:	4a06      	ldr	r2, [pc, #24]	; (20290 <GetProcAddressPinpad+0x1c>)
   20278:	447b      	add	r3, pc
   2027a:	4601      	mov	r1, r0
   2027c:	589b      	ldr	r3, [r3, r2]
   2027e:	6818      	ldr	r0, [r3, #0]
   20280:	b110      	cbz	r0, 20288 <GetProcAddressPinpad+0x14>
   20282:	b109      	cbz	r1, 20288 <GetProcAddressPinpad+0x14>
   20284:	f001 be79 	b.w	21f7a <OSL_Dll_GetSymbolByName>
   20288:	2000      	movs	r0, #0
   2028a:	4770      	bx	lr
   2028c:	0000ee9c 	.word	0x0000ee9c
   20290:	000000cc 	.word	0x000000cc

00020294 <pinpadlib_open>:
   20294:	b538      	push	{r3, r4, r5, lr}
   20296:	4c0b      	ldr	r4, [pc, #44]	; (202c4 <pinpadlib_open+0x30>)
   20298:	4b0b      	ldr	r3, [pc, #44]	; (202c8 <pinpadlib_open+0x34>)
   2029a:	447c      	add	r4, pc
   2029c:	58e5      	ldr	r5, [r4, r3]
   2029e:	682b      	ldr	r3, [r5, #0]
   202a0:	b96b      	cbnz	r3, 202be <pinpadlib_open+0x2a>
   202a2:	200f      	movs	r0, #15
   202a4:	f001 fe99 	bl	21fda <OSL_Dll_OpenByAppliType>
   202a8:	4b08      	ldr	r3, [pc, #32]	; (202cc <pinpadlib_open+0x38>)
   202aa:	58e3      	ldr	r3, [r4, r3]
   202ac:	6018      	str	r0, [r3, #0]
   202ae:	b130      	cbz	r0, 202be <pinpadlib_open+0x2a>
   202b0:	4b07      	ldr	r3, [pc, #28]	; (202d0 <pinpadlib_open+0x3c>)
   202b2:	4808      	ldr	r0, [pc, #32]	; (202d4 <pinpadlib_open+0x40>)
   202b4:	58e3      	ldr	r3, [r4, r3]
   202b6:	4478      	add	r0, pc
   202b8:	602b      	str	r3, [r5, #0]
   202ba:	f7ff ffdb 	bl	20274 <GetProcAddressPinpad>
   202be:	6828      	ldr	r0, [r5, #0]
   202c0:	bd38      	pop	{r3, r4, r5, pc}
   202c2:	bf00      	nop
   202c4:	0000ee7a 	.word	0x0000ee7a
   202c8:	000000e4 	.word	0x000000e4
   202cc:	000000cc 	.word	0x000000cc
   202d0:	000000f0 	.word	0x000000f0
   202d4:	0000600e 	.word	0x0000600e

000202d8 <pinpadlib_close>:
   202d8:	4b03      	ldr	r3, [pc, #12]	; (202e8 <pinpadlib_close+0x10>)
   202da:	4a04      	ldr	r2, [pc, #16]	; (202ec <pinpadlib_close+0x14>)
   202dc:	447b      	add	r3, pc
   202de:	589b      	ldr	r3, [r3, r2]
   202e0:	6818      	ldr	r0, [r3, #0]
   202e2:	f001 be3a 	b.w	21f5a <OSL_Dll_Close>
   202e6:	bf00      	nop
   202e8:	0000ee38 	.word	0x0000ee38
   202ec:	000000cc 	.word	0x000000cc

000202f0 <function_name>:
   202f0:	5f535050 	.word	0x5f535050
   202f4:	70736944 	.word	0x70736944
   202f8:	0079616c 	.word	0x0079616c

000202fc <PPS_Display>:
   202fc:	b408      	push	{r3}
   202fe:	4b11      	ldr	r3, [pc, #68]	; (20344 <.direct_call+0x8>)
   20300:	681b      	ldr	r3, [r3, #0]
   20302:	2b00      	cmp	r3, #0
   20304:	d11a      	bne.n	2033c <.direct_call>
   20306:	b507      	push	{r0, r1, r2, lr}
   20308:	f7ff ffc4 	bl	20294 <pinpadlib_open>
   2030c:	2800      	cmp	r0, #0
   2030e:	d00b      	beq.n	20328 <.bad_return>
   20310:	4684      	mov	ip, r0
   20312:	480d      	ldr	r0, [pc, #52]	; (20348 <.direct_call+0xc>)
   20314:	f000 f811 	bl	2033a <.call_function>
   20318:	2800      	cmp	r0, #0
   2031a:	d002      	beq.n	20322 <.exit_return>
   2031c:	4909      	ldr	r1, [pc, #36]	; (20344 <.direct_call+0x8>)
   2031e:	6008      	str	r0, [r1, #0]
   20320:	e007      	b.n	20332 <.already_initialized>

00020322 <.exit_return>:
   20322:	480a      	ldr	r0, [pc, #40]	; (2034c <.direct_call+0x10>)
   20324:	f000 fe18 	bl	20f58 <Telium_Exit>

00020328 <.bad_return>:
   20328:	bc0f      	pop	{r0, r1, r2, r3}
   2032a:	2000      	movs	r0, #0
   2032c:	469e      	mov	lr, r3
   2032e:	bc08      	pop	{r3}
   20330:	4770      	bx	lr

00020332 <.already_initialized>:
   20332:	4684      	mov	ip, r0
   20334:	bc0f      	pop	{r0, r1, r2, r3}
   20336:	469e      	mov	lr, r3
   20338:	bc08      	pop	{r3}

0002033a <.call_function>:
   2033a:	4760      	bx	ip

0002033c <.direct_call>:
   2033c:	469c      	mov	ip, r3
   2033e:	bc08      	pop	{r3}
   20340:	4760      	bx	ip
   20342:	0000      	.short	0x0000
   20344:	0002f928 	.word	0x0002f928
   20348:	000202f0 	.word	0x000202f0
   2034c:	0000120b 	.word	0x0000120b

00020350 <function_name>:
   20350:	696c6554 	.word	0x696c6554
   20354:	525f6d75 	.word	0x525f6d75
   20358:	5f646165 	.word	0x5f646165
   2035c:	65746164 	.word	0x65746164
   20360:	00          	.byte	0x00
   20361:	00          	.byte	0x00
   20362:	bf00      	nop

00020364 <Telium_Read_date>:
   20364:	b408      	push	{r3}
   20366:	4b0f      	ldr	r3, [pc, #60]	; (203a4 <.direct_call+0x6>)
   20368:	681b      	ldr	r3, [r3, #0]
   2036a:	2b00      	cmp	r3, #0
   2036c:	d117      	bne.n	2039e <.direct_call>
   2036e:	b507      	push	{r0, r1, r2, lr}
   20370:	f000 fef4 	bl	2115c <toolslib_open>
   20374:	2800      	cmp	r0, #0
   20376:	d008      	beq.n	2038a <.bad_return>
   20378:	4684      	mov	ip, r0
   2037a:	480b      	ldr	r0, [pc, #44]	; (203a8 <.direct_call+0xa>)
   2037c:	f000 f80e 	bl	2039c <.call_function>
   20380:	2800      	cmp	r0, #0
   20382:	d002      	beq.n	2038a <.bad_return>
   20384:	4907      	ldr	r1, [pc, #28]	; (203a4 <.direct_call+0x6>)
   20386:	6008      	str	r0, [r1, #0]
   20388:	e004      	b.n	20394 <.already_initialized>

0002038a <.bad_return>:
   2038a:	bc0f      	pop	{r0, r1, r2, r3}
   2038c:	4807      	ldr	r0, [pc, #28]	; (203ac <.direct_call+0xe>)
   2038e:	469e      	mov	lr, r3
   20390:	bc08      	pop	{r3}
   20392:	4770      	bx	lr

00020394 <.already_initialized>:
   20394:	4684      	mov	ip, r0
   20396:	bc0f      	pop	{r0, r1, r2, r3}
   20398:	469e      	mov	lr, r3
   2039a:	bc08      	pop	{r3}

0002039c <.call_function>:
   2039c:	4760      	bx	ip

0002039e <.direct_call>:
   2039e:	469c      	mov	ip, r3
   203a0:	bc08      	pop	{r3}
   203a2:	4760      	bx	ip
   203a4:	0002f92c 	.word	0x0002f92c
   203a8:	00020350 	.word	0x00020350
   203ac:	ffffffff 	.word	0xffffffff

000203b0 <function_name>:
   203b0:	736f6f42 	.word	0x736f6f42
   203b4:	54726574 	.word	0x54726574
   203b8:	00657079 	.word	0x00657079

000203bc <BoosterType>:
   203bc:	b408      	push	{r3}
   203be:	4b11      	ldr	r3, [pc, #68]	; (20404 <.direct_call+0x8>)
   203c0:	681b      	ldr	r3, [r3, #0]
   203c2:	2b00      	cmp	r3, #0
   203c4:	d11a      	bne.n	203fc <.direct_call>
   203c6:	b507      	push	{r0, r1, r2, lr}
   203c8:	f7ff fa40 	bl	1f84c <extenslib_open>
   203cc:	2800      	cmp	r0, #0
   203ce:	d00b      	beq.n	203e8 <.bad_return>
   203d0:	4684      	mov	ip, r0
   203d2:	480d      	ldr	r0, [pc, #52]	; (20408 <.direct_call+0xc>)
   203d4:	f000 f811 	bl	203fa <.call_function>
   203d8:	2800      	cmp	r0, #0
   203da:	d002      	beq.n	203e2 <.exit_return>
   203dc:	4909      	ldr	r1, [pc, #36]	; (20404 <.direct_call+0x8>)
   203de:	6008      	str	r0, [r1, #0]
   203e0:	e007      	b.n	203f2 <.already_initialized>

000203e2 <.exit_return>:
   203e2:	480a      	ldr	r0, [pc, #40]	; (2040c <.direct_call+0x10>)
   203e4:	f000 fdb8 	bl	20f58 <Telium_Exit>

000203e8 <.bad_return>:
   203e8:	bc0f      	pop	{r0, r1, r2, r3}
   203ea:	2000      	movs	r0, #0
   203ec:	469e      	mov	lr, r3
   203ee:	bc08      	pop	{r3}
   203f0:	4770      	bx	lr

000203f2 <.already_initialized>:
   203f2:	4684      	mov	ip, r0
   203f4:	bc0f      	pop	{r0, r1, r2, r3}
   203f6:	469e      	mov	lr, r3
   203f8:	bc08      	pop	{r3}

000203fa <.call_function>:
   203fa:	4760      	bx	ip

000203fc <.direct_call>:
   203fc:	469c      	mov	ip, r3
   203fe:	bc08      	pop	{r3}
   20400:	4760      	bx	ip
   20402:	0000      	.short	0x0000
   20404:	0002f930 	.word	0x0002f930
   20408:	000203b0 	.word	0x000203b0
   2040c:	00000a00 	.word	0x00000a00

00020410 <function_name>:
   20410:	6f437349 	.word	0x6f437349
   20414:	44726f6c 	.word	0x44726f6c
   20418:	6c707369 	.word	0x6c707369
   2041c:	7961      	.short	0x7961
	...

00020420 <IsColorDisplay>:
   20420:	b408      	push	{r3}
   20422:	4b11      	ldr	r3, [pc, #68]	; (20468 <.direct_call+0x8>)
   20424:	681b      	ldr	r3, [r3, #0]
   20426:	2b00      	cmp	r3, #0
   20428:	d11a      	bne.n	20460 <.direct_call>
   2042a:	b507      	push	{r0, r1, r2, lr}
   2042c:	f7ff fa0e 	bl	1f84c <extenslib_open>
   20430:	2800      	cmp	r0, #0
   20432:	d00b      	beq.n	2044c <.bad_return>
   20434:	4684      	mov	ip, r0
   20436:	480d      	ldr	r0, [pc, #52]	; (2046c <.direct_call+0xc>)
   20438:	f000 f811 	bl	2045e <.call_function>
   2043c:	2800      	cmp	r0, #0
   2043e:	d002      	beq.n	20446 <.exit_return>
   20440:	4909      	ldr	r1, [pc, #36]	; (20468 <.direct_call+0x8>)
   20442:	6008      	str	r0, [r1, #0]
   20444:	e007      	b.n	20456 <.already_initialized>

00020446 <.exit_return>:
   20446:	480a      	ldr	r0, [pc, #40]	; (20470 <.direct_call+0x10>)
   20448:	f000 fd86 	bl	20f58 <Telium_Exit>

0002044c <.bad_return>:
   2044c:	bc0f      	pop	{r0, r1, r2, r3}
   2044e:	2000      	movs	r0, #0
   20450:	469e      	mov	lr, r3
   20452:	bc08      	pop	{r3}
   20454:	4770      	bx	lr

00020456 <.already_initialized>:
   20456:	4684      	mov	ip, r0
   20458:	bc0f      	pop	{r0, r1, r2, r3}
   2045a:	469e      	mov	lr, r3
   2045c:	bc08      	pop	{r3}

0002045e <.call_function>:
   2045e:	4760      	bx	ip

00020460 <.direct_call>:
   20460:	469c      	mov	ip, r3
   20462:	bc08      	pop	{r3}
   20464:	4760      	bx	ip
   20466:	0000      	.short	0x0000
   20468:	0002f934 	.word	0x0002f934
   2046c:	00020410 	.word	0x00020410
   20470:	00000a00 	.word	0x00000a00

00020474 <function_name>:
   20474:	53497349 	.word	0x53497349
   20478:	314f      	.short	0x314f
	...

0002047c <IsISO1>:
   2047c:	b408      	push	{r3}
   2047e:	4b11      	ldr	r3, [pc, #68]	; (204c4 <.direct_call+0x8>)
   20480:	681b      	ldr	r3, [r3, #0]
   20482:	2b00      	cmp	r3, #0
   20484:	d11a      	bne.n	204bc <.direct_call>
   20486:	b507      	push	{r0, r1, r2, lr}
   20488:	f7ff f9e0 	bl	1f84c <extenslib_open>
   2048c:	2800      	cmp	r0, #0
   2048e:	d00b      	beq.n	204a8 <.bad_return>
   20490:	4684      	mov	ip, r0
   20492:	480d      	ldr	r0, [pc, #52]	; (204c8 <.direct_call+0xc>)
   20494:	f000 f811 	bl	204ba <.call_function>
   20498:	2800      	cmp	r0, #0
   2049a:	d002      	beq.n	204a2 <.exit_return>
   2049c:	4909      	ldr	r1, [pc, #36]	; (204c4 <.direct_call+0x8>)
   2049e:	6008      	str	r0, [r1, #0]
   204a0:	e007      	b.n	204b2 <.already_initialized>

000204a2 <.exit_return>:
   204a2:	480a      	ldr	r0, [pc, #40]	; (204cc <.direct_call+0x10>)
   204a4:	f000 fd58 	bl	20f58 <Telium_Exit>

000204a8 <.bad_return>:
   204a8:	bc0f      	pop	{r0, r1, r2, r3}
   204aa:	2000      	movs	r0, #0
   204ac:	469e      	mov	lr, r3
   204ae:	bc08      	pop	{r3}
   204b0:	4770      	bx	lr

000204b2 <.already_initialized>:
   204b2:	4684      	mov	ip, r0
   204b4:	bc0f      	pop	{r0, r1, r2, r3}
   204b6:	469e      	mov	lr, r3
   204b8:	bc08      	pop	{r3}

000204ba <.call_function>:
   204ba:	4760      	bx	ip

000204bc <.direct_call>:
   204bc:	469c      	mov	ip, r3
   204be:	bc08      	pop	{r3}
   204c0:	4760      	bx	ip
   204c2:	0000      	.short	0x0000
   204c4:	0002f938 	.word	0x0002f938
   204c8:	00020474 	.word	0x00020474
   204cc:	00000a00 	.word	0x00000a00

000204d0 <function_name>:
   204d0:	53497349 	.word	0x53497349
   204d4:	324f      	.short	0x324f
	...

000204d8 <IsISO2>:
   204d8:	b408      	push	{r3}
   204da:	4b11      	ldr	r3, [pc, #68]	; (20520 <.direct_call+0x8>)
   204dc:	681b      	ldr	r3, [r3, #0]
   204de:	2b00      	cmp	r3, #0
   204e0:	d11a      	bne.n	20518 <.direct_call>
   204e2:	b507      	push	{r0, r1, r2, lr}
   204e4:	f7ff f9b2 	bl	1f84c <extenslib_open>
   204e8:	2800      	cmp	r0, #0
   204ea:	d00b      	beq.n	20504 <.bad_return>
   204ec:	4684      	mov	ip, r0
   204ee:	480d      	ldr	r0, [pc, #52]	; (20524 <.direct_call+0xc>)
   204f0:	f000 f811 	bl	20516 <.call_function>
   204f4:	2800      	cmp	r0, #0
   204f6:	d002      	beq.n	204fe <.exit_return>
   204f8:	4909      	ldr	r1, [pc, #36]	; (20520 <.direct_call+0x8>)
   204fa:	6008      	str	r0, [r1, #0]
   204fc:	e007      	b.n	2050e <.already_initialized>

000204fe <.exit_return>:
   204fe:	480a      	ldr	r0, [pc, #40]	; (20528 <.direct_call+0x10>)
   20500:	f000 fd2a 	bl	20f58 <Telium_Exit>

00020504 <.bad_return>:
   20504:	bc0f      	pop	{r0, r1, r2, r3}
   20506:	2000      	movs	r0, #0
   20508:	469e      	mov	lr, r3
   2050a:	bc08      	pop	{r3}
   2050c:	4770      	bx	lr

0002050e <.already_initialized>:
   2050e:	4684      	mov	ip, r0
   20510:	bc0f      	pop	{r0, r1, r2, r3}
   20512:	469e      	mov	lr, r3
   20514:	bc08      	pop	{r3}

00020516 <.call_function>:
   20516:	4760      	bx	ip

00020518 <.direct_call>:
   20518:	469c      	mov	ip, r3
   2051a:	bc08      	pop	{r3}
   2051c:	4760      	bx	ip
   2051e:	0000      	.short	0x0000
   20520:	0002f93c 	.word	0x0002f93c
   20524:	000204d0 	.word	0x000204d0
   20528:	00000a00 	.word	0x00000a00

0002052c <function_name>:
   2052c:	53497349 	.word	0x53497349
   20530:	334f      	.short	0x334f
	...

00020534 <IsISO3>:
   20534:	b408      	push	{r3}
   20536:	4b11      	ldr	r3, [pc, #68]	; (2057c <.direct_call+0x8>)
   20538:	681b      	ldr	r3, [r3, #0]
   2053a:	2b00      	cmp	r3, #0
   2053c:	d11a      	bne.n	20574 <.direct_call>
   2053e:	b507      	push	{r0, r1, r2, lr}
   20540:	f7ff f984 	bl	1f84c <extenslib_open>
   20544:	2800      	cmp	r0, #0
   20546:	d00b      	beq.n	20560 <.bad_return>
   20548:	4684      	mov	ip, r0
   2054a:	480d      	ldr	r0, [pc, #52]	; (20580 <.direct_call+0xc>)
   2054c:	f000 f811 	bl	20572 <.call_function>
   20550:	2800      	cmp	r0, #0
   20552:	d002      	beq.n	2055a <.exit_return>
   20554:	4909      	ldr	r1, [pc, #36]	; (2057c <.direct_call+0x8>)
   20556:	6008      	str	r0, [r1, #0]
   20558:	e007      	b.n	2056a <.already_initialized>

0002055a <.exit_return>:
   2055a:	480a      	ldr	r0, [pc, #40]	; (20584 <.direct_call+0x10>)
   2055c:	f000 fcfc 	bl	20f58 <Telium_Exit>

00020560 <.bad_return>:
   20560:	bc0f      	pop	{r0, r1, r2, r3}
   20562:	2000      	movs	r0, #0
   20564:	469e      	mov	lr, r3
   20566:	bc08      	pop	{r3}
   20568:	4770      	bx	lr

0002056a <.already_initialized>:
   2056a:	4684      	mov	ip, r0
   2056c:	bc0f      	pop	{r0, r1, r2, r3}
   2056e:	469e      	mov	lr, r3
   20570:	bc08      	pop	{r3}

00020572 <.call_function>:
   20572:	4760      	bx	ip

00020574 <.direct_call>:
   20574:	469c      	mov	ip, r3
   20576:	bc08      	pop	{r3}
   20578:	4760      	bx	ip
   2057a:	0000      	.short	0x0000
   2057c:	0002f940 	.word	0x0002f940
   20580:	0002052c 	.word	0x0002052c
   20584:	00000a00 	.word	0x00000a00

00020588 <function_name>:
   20588:	72507349 	.word	0x72507349
   2058c:	65746e69 	.word	0x65746e69
   20590:	0072      	.short	0x0072
   20592:	bf00      	nop

00020594 <IsPrinter>:
   20594:	b408      	push	{r3}
   20596:	4b11      	ldr	r3, [pc, #68]	; (205dc <.direct_call+0x8>)
   20598:	681b      	ldr	r3, [r3, #0]
   2059a:	2b00      	cmp	r3, #0
   2059c:	d11a      	bne.n	205d4 <.direct_call>
   2059e:	b507      	push	{r0, r1, r2, lr}
   205a0:	f7ff f954 	bl	1f84c <extenslib_open>
   205a4:	2800      	cmp	r0, #0
   205a6:	d00b      	beq.n	205c0 <.bad_return>
   205a8:	4684      	mov	ip, r0
   205aa:	480d      	ldr	r0, [pc, #52]	; (205e0 <.direct_call+0xc>)
   205ac:	f000 f811 	bl	205d2 <.call_function>
   205b0:	2800      	cmp	r0, #0
   205b2:	d002      	beq.n	205ba <.exit_return>
   205b4:	4909      	ldr	r1, [pc, #36]	; (205dc <.direct_call+0x8>)
   205b6:	6008      	str	r0, [r1, #0]
   205b8:	e007      	b.n	205ca <.already_initialized>

000205ba <.exit_return>:
   205ba:	480a      	ldr	r0, [pc, #40]	; (205e4 <.direct_call+0x10>)
   205bc:	f000 fccc 	bl	20f58 <Telium_Exit>

000205c0 <.bad_return>:
   205c0:	bc0f      	pop	{r0, r1, r2, r3}
   205c2:	2000      	movs	r0, #0
   205c4:	469e      	mov	lr, r3
   205c6:	bc08      	pop	{r3}
   205c8:	4770      	bx	lr

000205ca <.already_initialized>:
   205ca:	4684      	mov	ip, r0
   205cc:	bc0f      	pop	{r0, r1, r2, r3}
   205ce:	469e      	mov	lr, r3
   205d0:	bc08      	pop	{r3}

000205d2 <.call_function>:
   205d2:	4760      	bx	ip

000205d4 <.direct_call>:
   205d4:	469c      	mov	ip, r3
   205d6:	bc08      	pop	{r3}
   205d8:	4760      	bx	ip
   205da:	0000      	.short	0x0000
   205dc:	0002f944 	.word	0x0002f944
   205e0:	00020588 	.word	0x00020588
   205e4:	00000a00 	.word	0x00000a00

000205e8 <function_name>:
   205e8:	696c6554 	.word	0x696c6554
   205ec:	535f6d75 	.word	0x535f6d75
   205f0:	69767265 	.word	0x69767265
   205f4:	65526563 	.word	0x65526563
   205f8:	74736967 	.word	0x74736967
   205fc:	7265      	.short	0x7265
	...

00020600 <Telium_ServiceRegister>:
   20600:	b408      	push	{r3}
   20602:	4b0f      	ldr	r3, [pc, #60]	; (20640 <.direct_call+0x6>)
   20604:	681b      	ldr	r3, [r3, #0]
   20606:	2b00      	cmp	r3, #0
   20608:	d117      	bne.n	2063a <.direct_call>
   2060a:	b507      	push	{r0, r1, r2, lr}
   2060c:	f7ff f91e 	bl	1f84c <extenslib_open>
   20610:	2800      	cmp	r0, #0
   20612:	d008      	beq.n	20626 <.bad_return>
   20614:	4684      	mov	ip, r0
   20616:	480b      	ldr	r0, [pc, #44]	; (20644 <.direct_call+0xa>)
   20618:	f000 f80e 	bl	20638 <.call_function>
   2061c:	2800      	cmp	r0, #0
   2061e:	d002      	beq.n	20626 <.bad_return>
   20620:	4907      	ldr	r1, [pc, #28]	; (20640 <.direct_call+0x6>)
   20622:	6008      	str	r0, [r1, #0]
   20624:	e004      	b.n	20630 <.already_initialized>

00020626 <.bad_return>:
   20626:	bc0f      	pop	{r0, r1, r2, r3}
   20628:	4807      	ldr	r0, [pc, #28]	; (20648 <.direct_call+0xe>)
   2062a:	469e      	mov	lr, r3
   2062c:	bc08      	pop	{r3}
   2062e:	4770      	bx	lr

00020630 <.already_initialized>:
   20630:	4684      	mov	ip, r0
   20632:	bc0f      	pop	{r0, r1, r2, r3}
   20634:	469e      	mov	lr, r3
   20636:	bc08      	pop	{r3}

00020638 <.call_function>:
   20638:	4760      	bx	ip

0002063a <.direct_call>:
   2063a:	469c      	mov	ip, r3
   2063c:	bc08      	pop	{r3}
   2063e:	4760      	bx	ip
   20640:	0002f948 	.word	0x0002f948
   20644:	000205e8 	.word	0x000205e8
   20648:	ffffffff 	.word	0xffffffff

0002064c <Telium_Pprintf>:
   2064c:	b40f      	push	{r0, r1, r2, r3}
   2064e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20650:	ac06      	add	r4, sp, #24
   20652:	f854 5b04 	ldr.w	r5, [r4], #4
   20656:	9401      	str	r4, [sp, #4]
   20658:	f000 f824 	bl	206a4 <Telium_Stdprt>
   2065c:	4629      	mov	r1, r5
   2065e:	9a01      	ldr	r2, [sp, #4]
   20660:	f000 fd44 	bl	210ec <Telium_Vfprintf>
   20664:	1c43      	adds	r3, r0, #1
   20666:	d104      	bne.n	20672 <Telium_Pprintf+0x26>
   20668:	2105      	movs	r1, #5
   2066a:	2000      	movs	r0, #0
   2066c:	f7ff fb44 	bl	1fcf8 <Telium_Ttestall>
   20670:	e7f1      	b.n	20656 <Telium_Pprintf+0xa>
   20672:	e8bd 403e 	ldmia.w	sp!, {r1, r2, r3, r4, r5, lr}
   20676:	b004      	add	sp, #16
   20678:	4770      	bx	lr

0002067a <Telium_Printf>:
   2067a:	b40f      	push	{r0, r1, r2, r3}
   2067c:	b513      	push	{r0, r1, r4, lr}
   2067e:	ab04      	add	r3, sp, #16
   20680:	f853 4b04 	ldr.w	r4, [r3], #4
   20684:	9301      	str	r3, [sp, #4]
   20686:	f7ff fad3 	bl	1fc30 <Telium_Stdout>
   2068a:	4621      	mov	r1, r4
   2068c:	9a01      	ldr	r2, [sp, #4]
   2068e:	f000 fd2d 	bl	210ec <Telium_Vfprintf>
   20692:	e8bd 401c 	ldmia.w	sp!, {r2, r3, r4, lr}
   20696:	b004      	add	sp, #16
   20698:	4770      	bx	lr
	...

0002069c <periph_name>:
   2069c:	4e495250 	.word	0x4e495250
   206a0:	00524554 	.word	0x00524554

000206a4 <Telium_Stdprt>:
   206a4:	b402      	push	{r1}
   206a6:	b500      	push	{lr}
   206a8:	4803      	ldr	r0, [pc, #12]	; (206b8 <Telium_Stdprt+0x14>)
   206aa:	2100      	movs	r1, #0
   206ac:	f7ff faf2 	bl	1fc94 <Telium_Stdperif>
   206b0:	bc02      	pop	{r1}
   206b2:	468e      	mov	lr, r1
   206b4:	bc02      	pop	{r1}
   206b6:	4770      	bx	lr
   206b8:	0002069c 	.word	0x0002069c

000206bc <Telium_Sprintf>:
   206bc:	b40e      	push	{r1, r2, r3}
   206be:	b503      	push	{r0, r1, lr}
   206c0:	9903      	ldr	r1, [sp, #12]
   206c2:	b128      	cbz	r0, 206d0 <Telium_Sprintf+0x14>
   206c4:	b129      	cbz	r1, 206d2 <Telium_Sprintf+0x16>
   206c6:	aa04      	add	r2, sp, #16
   206c8:	9201      	str	r2, [sp, #4]
   206ca:	f7e8 eb2c 	blx	8d24 <_init+0x1c4>
   206ce:	e001      	b.n	206d4 <Telium_Sprintf+0x18>
   206d0:	e000      	b.n	206d4 <Telium_Sprintf+0x18>
   206d2:	4608      	mov	r0, r1
   206d4:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
   206d8:	b003      	add	sp, #12
   206da:	4770      	bx	lr

000206dc <function_name>:
   206dc:	6c707041 	.word	0x6c707041
   206e0:	74616369 	.word	0x74616369
   206e4:	476e6f69 	.word	0x476e6f69
   206e8:	75437465 	.word	0x75437465
   206ec:	6e657272 	.word	0x6e657272
   206f0:	0074      	.short	0x0074
   206f2:	bf00      	nop

000206f4 <ApplicationGetCurrent>:
   206f4:	b408      	push	{r3}
   206f6:	4b0f      	ldr	r3, [pc, #60]	; (20734 <.direct_call+0x6>)
   206f8:	681b      	ldr	r3, [r3, #0]
   206fa:	2b00      	cmp	r3, #0
   206fc:	d117      	bne.n	2072e <.direct_call>
   206fe:	b507      	push	{r0, r1, r2, lr}
   20700:	f000 fd6a 	bl	211d8 <wrapperlib_open>
   20704:	2800      	cmp	r0, #0
   20706:	d008      	beq.n	2071a <.bad_return>
   20708:	4684      	mov	ip, r0
   2070a:	480b      	ldr	r0, [pc, #44]	; (20738 <.direct_call+0xa>)
   2070c:	f000 f80e 	bl	2072c <.call_function>
   20710:	2800      	cmp	r0, #0
   20712:	d002      	beq.n	2071a <.bad_return>
   20714:	4907      	ldr	r1, [pc, #28]	; (20734 <.direct_call+0x6>)
   20716:	6008      	str	r0, [r1, #0]
   20718:	e004      	b.n	20724 <.already_initialized>

0002071a <.bad_return>:
   2071a:	bc0f      	pop	{r0, r1, r2, r3}
   2071c:	4807      	ldr	r0, [pc, #28]	; (2073c <.direct_call+0xe>)
   2071e:	469e      	mov	lr, r3
   20720:	bc08      	pop	{r3}
   20722:	4770      	bx	lr

00020724 <.already_initialized>:
   20724:	4684      	mov	ip, r0
   20726:	bc0f      	pop	{r0, r1, r2, r3}
   20728:	469e      	mov	lr, r3
   2072a:	bc08      	pop	{r3}

0002072c <.call_function>:
   2072c:	4760      	bx	ip

0002072e <.direct_call>:
   2072e:	469c      	mov	ip, r3
   20730:	bc08      	pop	{r3}
   20732:	4760      	bx	ip
   20734:	0002f94c 	.word	0x0002f94c
   20738:	000206dc 	.word	0x000206dc
   2073c:	ffffffff 	.word	0xffffffff

00020740 <function_name>:
   20740:	635f5346 	.word	0x635f5346
   20744:	65736f6c 	.word	0x65736f6c
   20748:	00          	.byte	0x00
   20749:	00          	.byte	0x00
   2074a:	bf00      	nop

0002074c <FS_close>:
   2074c:	b408      	push	{r3}
   2074e:	4b0f      	ldr	r3, [pc, #60]	; (2078c <.direct_call+0x6>)
   20750:	681b      	ldr	r3, [r3, #0]
   20752:	2b00      	cmp	r3, #0
   20754:	d117      	bne.n	20786 <.direct_call>
   20756:	b507      	push	{r0, r1, r2, lr}
   20758:	f000 fd3e 	bl	211d8 <wrapperlib_open>
   2075c:	2800      	cmp	r0, #0
   2075e:	d008      	beq.n	20772 <.bad_return>
   20760:	4684      	mov	ip, r0
   20762:	480b      	ldr	r0, [pc, #44]	; (20790 <.direct_call+0xa>)
   20764:	f000 f80e 	bl	20784 <.call_function>
   20768:	2800      	cmp	r0, #0
   2076a:	d002      	beq.n	20772 <.bad_return>
   2076c:	4907      	ldr	r1, [pc, #28]	; (2078c <.direct_call+0x6>)
   2076e:	6008      	str	r0, [r1, #0]
   20770:	e004      	b.n	2077c <.already_initialized>

00020772 <.bad_return>:
   20772:	bc0f      	pop	{r0, r1, r2, r3}
   20774:	4807      	ldr	r0, [pc, #28]	; (20794 <.direct_call+0xe>)
   20776:	469e      	mov	lr, r3
   20778:	bc08      	pop	{r3}
   2077a:	4770      	bx	lr

0002077c <.already_initialized>:
   2077c:	4684      	mov	ip, r0
   2077e:	bc0f      	pop	{r0, r1, r2, r3}
   20780:	469e      	mov	lr, r3
   20782:	bc08      	pop	{r3}

00020784 <.call_function>:
   20784:	4760      	bx	ip

00020786 <.direct_call>:
   20786:	469c      	mov	ip, r3
   20788:	bc08      	pop	{r3}
   2078a:	4760      	bx	ip
   2078c:	0002f950 	.word	0x0002f950
   20790:	00020740 	.word	0x00020740
   20794:	ffffffff 	.word	0xffffffff

00020798 <function_name>:
   20798:	645f5346 	.word	0x645f5346
   2079c:	72636b73 	.word	0x72636b73
   207a0:	65746165 	.word	0x65746165
   207a4:	00          	.byte	0x00
   207a5:	00          	.byte	0x00
   207a6:	bf00      	nop

000207a8 <FS_dskcreate>:
   207a8:	b408      	push	{r3}
   207aa:	4b0f      	ldr	r3, [pc, #60]	; (207e8 <.direct_call+0x6>)
   207ac:	681b      	ldr	r3, [r3, #0]
   207ae:	2b00      	cmp	r3, #0
   207b0:	d117      	bne.n	207e2 <.direct_call>
   207b2:	b507      	push	{r0, r1, r2, lr}
   207b4:	f000 fd10 	bl	211d8 <wrapperlib_open>
   207b8:	2800      	cmp	r0, #0
   207ba:	d008      	beq.n	207ce <.bad_return>
   207bc:	4684      	mov	ip, r0
   207be:	480b      	ldr	r0, [pc, #44]	; (207ec <.direct_call+0xa>)
   207c0:	f000 f80e 	bl	207e0 <.call_function>
   207c4:	2800      	cmp	r0, #0
   207c6:	d002      	beq.n	207ce <.bad_return>
   207c8:	4907      	ldr	r1, [pc, #28]	; (207e8 <.direct_call+0x6>)
   207ca:	6008      	str	r0, [r1, #0]
   207cc:	e004      	b.n	207d8 <.already_initialized>

000207ce <.bad_return>:
   207ce:	bc0f      	pop	{r0, r1, r2, r3}
   207d0:	4807      	ldr	r0, [pc, #28]	; (207f0 <.direct_call+0xe>)
   207d2:	469e      	mov	lr, r3
   207d4:	bc08      	pop	{r3}
   207d6:	4770      	bx	lr

000207d8 <.already_initialized>:
   207d8:	4684      	mov	ip, r0
   207da:	bc0f      	pop	{r0, r1, r2, r3}
   207dc:	469e      	mov	lr, r3
   207de:	bc08      	pop	{r3}

000207e0 <.call_function>:
   207e0:	4760      	bx	ip

000207e2 <.direct_call>:
   207e2:	469c      	mov	ip, r3
   207e4:	bc08      	pop	{r3}
   207e6:	4760      	bx	ip
   207e8:	0002f954 	.word	0x0002f954
   207ec:	00020798 	.word	0x00020798
   207f0:	ffffffff 	.word	0xffffffff

000207f4 <function_name>:
   207f4:	655f5346 	.word	0x655f5346
   207f8:	74736978 	.word	0x74736978
   207fc:	00          	.byte	0x00
   207fd:	00          	.byte	0x00
   207fe:	bf00      	nop

00020800 <FS_exist>:
   20800:	b408      	push	{r3}
   20802:	4b0f      	ldr	r3, [pc, #60]	; (20840 <.direct_call+0x6>)
   20804:	681b      	ldr	r3, [r3, #0]
   20806:	2b00      	cmp	r3, #0
   20808:	d117      	bne.n	2083a <.direct_call>
   2080a:	b507      	push	{r0, r1, r2, lr}
   2080c:	f000 fce4 	bl	211d8 <wrapperlib_open>
   20810:	2800      	cmp	r0, #0
   20812:	d008      	beq.n	20826 <.bad_return>
   20814:	4684      	mov	ip, r0
   20816:	480b      	ldr	r0, [pc, #44]	; (20844 <.direct_call+0xa>)
   20818:	f000 f80e 	bl	20838 <.call_function>
   2081c:	2800      	cmp	r0, #0
   2081e:	d002      	beq.n	20826 <.bad_return>
   20820:	4907      	ldr	r1, [pc, #28]	; (20840 <.direct_call+0x6>)
   20822:	6008      	str	r0, [r1, #0]
   20824:	e004      	b.n	20830 <.already_initialized>

00020826 <.bad_return>:
   20826:	bc0f      	pop	{r0, r1, r2, r3}
   20828:	4807      	ldr	r0, [pc, #28]	; (20848 <.direct_call+0xe>)
   2082a:	469e      	mov	lr, r3
   2082c:	bc08      	pop	{r3}
   2082e:	4770      	bx	lr

00020830 <.already_initialized>:
   20830:	4684      	mov	ip, r0
   20832:	bc0f      	pop	{r0, r1, r2, r3}
   20834:	469e      	mov	lr, r3
   20836:	bc08      	pop	{r3}

00020838 <.call_function>:
   20838:	4760      	bx	ip

0002083a <.direct_call>:
   2083a:	469c      	mov	ip, r3
   2083c:	bc08      	pop	{r3}
   2083e:	4760      	bx	ip
   20840:	0002f958 	.word	0x0002f958
   20844:	000207f4 	.word	0x000207f4
   20848:	ffffffff 	.word	0xffffffff

0002084c <function_name>:
   2084c:	6c5f5346 	.word	0x6c5f5346
   20850:	74676e65 	.word	0x74676e65
   20854:	0068      	.short	0x0068
   20856:	bf00      	nop

00020858 <FS_length>:
   20858:	b408      	push	{r3}
   2085a:	4b0f      	ldr	r3, [pc, #60]	; (20898 <.direct_call+0x6>)
   2085c:	681b      	ldr	r3, [r3, #0]
   2085e:	2b00      	cmp	r3, #0
   20860:	d117      	bne.n	20892 <.direct_call>
   20862:	b507      	push	{r0, r1, r2, lr}
   20864:	f000 fcb8 	bl	211d8 <wrapperlib_open>
   20868:	2800      	cmp	r0, #0
   2086a:	d008      	beq.n	2087e <.bad_return>
   2086c:	4684      	mov	ip, r0
   2086e:	480b      	ldr	r0, [pc, #44]	; (2089c <.direct_call+0xa>)
   20870:	f000 f80e 	bl	20890 <.call_function>
   20874:	2800      	cmp	r0, #0
   20876:	d002      	beq.n	2087e <.bad_return>
   20878:	4907      	ldr	r1, [pc, #28]	; (20898 <.direct_call+0x6>)
   2087a:	6008      	str	r0, [r1, #0]
   2087c:	e004      	b.n	20888 <.already_initialized>

0002087e <.bad_return>:
   2087e:	bc0f      	pop	{r0, r1, r2, r3}
   20880:	4807      	ldr	r0, [pc, #28]	; (208a0 <.direct_call+0xe>)
   20882:	469e      	mov	lr, r3
   20884:	bc08      	pop	{r3}
   20886:	4770      	bx	lr

00020888 <.already_initialized>:
   20888:	4684      	mov	ip, r0
   2088a:	bc0f      	pop	{r0, r1, r2, r3}
   2088c:	469e      	mov	lr, r3
   2088e:	bc08      	pop	{r3}

00020890 <.call_function>:
   20890:	4760      	bx	ip

00020892 <.direct_call>:
   20892:	469c      	mov	ip, r3
   20894:	bc08      	pop	{r3}
   20896:	4760      	bx	ip
   20898:	0002f95c 	.word	0x0002f95c
   2089c:	0002084c 	.word	0x0002084c
   208a0:	ffffffff 	.word	0xffffffff

000208a4 <function_name>:
   208a4:	6d5f5346 	.word	0x6d5f5346
   208a8:	746e756f 	.word	0x746e756f
   208ac:	00          	.byte	0x00
   208ad:	00          	.byte	0x00
   208ae:	bf00      	nop

000208b0 <FS_mount>:
   208b0:	b408      	push	{r3}
   208b2:	4b0f      	ldr	r3, [pc, #60]	; (208f0 <.direct_call+0x6>)
   208b4:	681b      	ldr	r3, [r3, #0]
   208b6:	2b00      	cmp	r3, #0
   208b8:	d117      	bne.n	208ea <.direct_call>
   208ba:	b507      	push	{r0, r1, r2, lr}
   208bc:	f000 fc8c 	bl	211d8 <wrapperlib_open>
   208c0:	2800      	cmp	r0, #0
   208c2:	d008      	beq.n	208d6 <.bad_return>
   208c4:	4684      	mov	ip, r0
   208c6:	480b      	ldr	r0, [pc, #44]	; (208f4 <.direct_call+0xa>)
   208c8:	f000 f80e 	bl	208e8 <.call_function>
   208cc:	2800      	cmp	r0, #0
   208ce:	d002      	beq.n	208d6 <.bad_return>
   208d0:	4907      	ldr	r1, [pc, #28]	; (208f0 <.direct_call+0x6>)
   208d2:	6008      	str	r0, [r1, #0]
   208d4:	e004      	b.n	208e0 <.already_initialized>

000208d6 <.bad_return>:
   208d6:	bc0f      	pop	{r0, r1, r2, r3}
   208d8:	4807      	ldr	r0, [pc, #28]	; (208f8 <.direct_call+0xe>)
   208da:	469e      	mov	lr, r3
   208dc:	bc08      	pop	{r3}
   208de:	4770      	bx	lr

000208e0 <.already_initialized>:
   208e0:	4684      	mov	ip, r0
   208e2:	bc0f      	pop	{r0, r1, r2, r3}
   208e4:	469e      	mov	lr, r3
   208e6:	bc08      	pop	{r3}

000208e8 <.call_function>:
   208e8:	4760      	bx	ip

000208ea <.direct_call>:
   208ea:	469c      	mov	ip, r3
   208ec:	bc08      	pop	{r3}
   208ee:	4760      	bx	ip
   208f0:	0002f960 	.word	0x0002f960
   208f4:	000208a4 	.word	0x000208a4
   208f8:	ffffffff 	.word	0xffffffff

000208fc <function_name>:
   208fc:	6f5f5346 	.word	0x6f5f5346
   20900:	006e6570 	.word	0x006e6570

00020904 <FS_open>:
   20904:	b408      	push	{r3}
   20906:	4b0f      	ldr	r3, [pc, #60]	; (20944 <.direct_call+0x6>)
   20908:	681b      	ldr	r3, [r3, #0]
   2090a:	2b00      	cmp	r3, #0
   2090c:	d117      	bne.n	2093e <.direct_call>
   2090e:	b507      	push	{r0, r1, r2, lr}
   20910:	f000 fc62 	bl	211d8 <wrapperlib_open>
   20914:	2800      	cmp	r0, #0
   20916:	d008      	beq.n	2092a <.bad_return>
   20918:	4684      	mov	ip, r0
   2091a:	480b      	ldr	r0, [pc, #44]	; (20948 <.direct_call+0xa>)
   2091c:	f000 f80e 	bl	2093c <.call_function>
   20920:	2800      	cmp	r0, #0
   20922:	d002      	beq.n	2092a <.bad_return>
   20924:	4907      	ldr	r1, [pc, #28]	; (20944 <.direct_call+0x6>)
   20926:	6008      	str	r0, [r1, #0]
   20928:	e004      	b.n	20934 <.already_initialized>

0002092a <.bad_return>:
   2092a:	bc0f      	pop	{r0, r1, r2, r3}
   2092c:	4807      	ldr	r0, [pc, #28]	; (2094c <.direct_call+0xe>)
   2092e:	469e      	mov	lr, r3
   20930:	bc08      	pop	{r3}
   20932:	4770      	bx	lr

00020934 <.already_initialized>:
   20934:	4684      	mov	ip, r0
   20936:	bc0f      	pop	{r0, r1, r2, r3}
   20938:	469e      	mov	lr, r3
   2093a:	bc08      	pop	{r3}

0002093c <.call_function>:
   2093c:	4760      	bx	ip

0002093e <.direct_call>:
   2093e:	469c      	mov	ip, r3
   20940:	bc08      	pop	{r3}
   20942:	4760      	bx	ip
   20944:	0002f964 	.word	0x0002f964
   20948:	000208fc 	.word	0x000208fc
   2094c:	ffffffff 	.word	0xffffffff

00020950 <function_name>:
   20950:	725f5346 	.word	0x725f5346
   20954:	00646165 	.word	0x00646165

00020958 <FS_read>:
   20958:	b408      	push	{r3}
   2095a:	4b0f      	ldr	r3, [pc, #60]	; (20998 <.direct_call+0x6>)
   2095c:	681b      	ldr	r3, [r3, #0]
   2095e:	2b00      	cmp	r3, #0
   20960:	d117      	bne.n	20992 <.direct_call>
   20962:	b507      	push	{r0, r1, r2, lr}
   20964:	f000 fc38 	bl	211d8 <wrapperlib_open>
   20968:	2800      	cmp	r0, #0
   2096a:	d008      	beq.n	2097e <.bad_return>
   2096c:	4684      	mov	ip, r0
   2096e:	480b      	ldr	r0, [pc, #44]	; (2099c <.direct_call+0xa>)
   20970:	f000 f80e 	bl	20990 <.call_function>
   20974:	2800      	cmp	r0, #0
   20976:	d002      	beq.n	2097e <.bad_return>
   20978:	4907      	ldr	r1, [pc, #28]	; (20998 <.direct_call+0x6>)
   2097a:	6008      	str	r0, [r1, #0]
   2097c:	e004      	b.n	20988 <.already_initialized>

0002097e <.bad_return>:
   2097e:	bc0f      	pop	{r0, r1, r2, r3}
   20980:	4807      	ldr	r0, [pc, #28]	; (209a0 <.direct_call+0xe>)
   20982:	469e      	mov	lr, r3
   20984:	bc08      	pop	{r3}
   20986:	4770      	bx	lr

00020988 <.already_initialized>:
   20988:	4684      	mov	ip, r0
   2098a:	bc0f      	pop	{r0, r1, r2, r3}
   2098c:	469e      	mov	lr, r3
   2098e:	bc08      	pop	{r3}

00020990 <.call_function>:
   20990:	4760      	bx	ip

00020992 <.direct_call>:
   20992:	469c      	mov	ip, r3
   20994:	bc08      	pop	{r3}
   20996:	4760      	bx	ip
   20998:	0002f968 	.word	0x0002f968
   2099c:	00020950 	.word	0x00020950
   209a0:	ffffffff 	.word	0xffffffff

000209a4 <function_name>:
   209a4:	725f5346 	.word	0x725f5346
   209a8:	6d616e65 	.word	0x6d616e65
   209ac:	0065      	.short	0x0065
   209ae:	bf00      	nop

000209b0 <FS_rename>:
   209b0:	b408      	push	{r3}
   209b2:	4b0f      	ldr	r3, [pc, #60]	; (209f0 <.direct_call+0x6>)
   209b4:	681b      	ldr	r3, [r3, #0]
   209b6:	2b00      	cmp	r3, #0
   209b8:	d117      	bne.n	209ea <.direct_call>
   209ba:	b507      	push	{r0, r1, r2, lr}
   209bc:	f000 fc0c 	bl	211d8 <wrapperlib_open>
   209c0:	2800      	cmp	r0, #0
   209c2:	d008      	beq.n	209d6 <.bad_return>
   209c4:	4684      	mov	ip, r0
   209c6:	480b      	ldr	r0, [pc, #44]	; (209f4 <.direct_call+0xa>)
   209c8:	f000 f80e 	bl	209e8 <.call_function>
   209cc:	2800      	cmp	r0, #0
   209ce:	d002      	beq.n	209d6 <.bad_return>
   209d0:	4907      	ldr	r1, [pc, #28]	; (209f0 <.direct_call+0x6>)
   209d2:	6008      	str	r0, [r1, #0]
   209d4:	e004      	b.n	209e0 <.already_initialized>

000209d6 <.bad_return>:
   209d6:	bc0f      	pop	{r0, r1, r2, r3}
   209d8:	4807      	ldr	r0, [pc, #28]	; (209f8 <.direct_call+0xe>)
   209da:	469e      	mov	lr, r3
   209dc:	bc08      	pop	{r3}
   209de:	4770      	bx	lr

000209e0 <.already_initialized>:
   209e0:	4684      	mov	ip, r0
   209e2:	bc0f      	pop	{r0, r1, r2, r3}
   209e4:	469e      	mov	lr, r3
   209e6:	bc08      	pop	{r3}

000209e8 <.call_function>:
   209e8:	4760      	bx	ip

000209ea <.direct_call>:
   209ea:	469c      	mov	ip, r3
   209ec:	bc08      	pop	{r3}
   209ee:	4760      	bx	ip
   209f0:	0002f96c 	.word	0x0002f96c
   209f4:	000209a4 	.word	0x000209a4
   209f8:	ffffffff 	.word	0xffffffff

000209fc <function_name>:
   209fc:	735f5346 	.word	0x735f5346
   20a00:	006b6565 	.word	0x006b6565

00020a04 <FS_seek>:
   20a04:	b408      	push	{r3}
   20a06:	4b0f      	ldr	r3, [pc, #60]	; (20a44 <.direct_call+0x6>)
   20a08:	681b      	ldr	r3, [r3, #0]
   20a0a:	2b00      	cmp	r3, #0
   20a0c:	d117      	bne.n	20a3e <.direct_call>
   20a0e:	b507      	push	{r0, r1, r2, lr}
   20a10:	f000 fbe2 	bl	211d8 <wrapperlib_open>
   20a14:	2800      	cmp	r0, #0
   20a16:	d008      	beq.n	20a2a <.bad_return>
   20a18:	4684      	mov	ip, r0
   20a1a:	480b      	ldr	r0, [pc, #44]	; (20a48 <.direct_call+0xa>)
   20a1c:	f000 f80e 	bl	20a3c <.call_function>
   20a20:	2800      	cmp	r0, #0
   20a22:	d002      	beq.n	20a2a <.bad_return>
   20a24:	4907      	ldr	r1, [pc, #28]	; (20a44 <.direct_call+0x6>)
   20a26:	6008      	str	r0, [r1, #0]
   20a28:	e004      	b.n	20a34 <.already_initialized>

00020a2a <.bad_return>:
   20a2a:	bc0f      	pop	{r0, r1, r2, r3}
   20a2c:	2000      	movs	r0, #0
   20a2e:	469e      	mov	lr, r3
   20a30:	bc08      	pop	{r3}
   20a32:	4770      	bx	lr

00020a34 <.already_initialized>:
   20a34:	4684      	mov	ip, r0
   20a36:	bc0f      	pop	{r0, r1, r2, r3}
   20a38:	469e      	mov	lr, r3
   20a3a:	bc08      	pop	{r3}

00020a3c <.call_function>:
   20a3c:	4760      	bx	ip

00020a3e <.direct_call>:
   20a3e:	469c      	mov	ip, r3
   20a40:	bc08      	pop	{r3}
   20a42:	4760      	bx	ip
   20a44:	0002f970 	.word	0x0002f970
   20a48:	000209fc 	.word	0x000209fc

00020a4c <function_name>:
   20a4c:	755f5346 	.word	0x755f5346
   20a50:	6e696c6e 	.word	0x6e696c6e
   20a54:	006b      	.short	0x006b
   20a56:	bf00      	nop

00020a58 <FS_unlink>:
   20a58:	b408      	push	{r3}
   20a5a:	4b0f      	ldr	r3, [pc, #60]	; (20a98 <.direct_call+0x6>)
   20a5c:	681b      	ldr	r3, [r3, #0]
   20a5e:	2b00      	cmp	r3, #0
   20a60:	d117      	bne.n	20a92 <.direct_call>
   20a62:	b507      	push	{r0, r1, r2, lr}
   20a64:	f000 fbb8 	bl	211d8 <wrapperlib_open>
   20a68:	2800      	cmp	r0, #0
   20a6a:	d008      	beq.n	20a7e <.bad_return>
   20a6c:	4684      	mov	ip, r0
   20a6e:	480b      	ldr	r0, [pc, #44]	; (20a9c <.direct_call+0xa>)
   20a70:	f000 f80e 	bl	20a90 <.call_function>
   20a74:	2800      	cmp	r0, #0
   20a76:	d002      	beq.n	20a7e <.bad_return>
   20a78:	4907      	ldr	r1, [pc, #28]	; (20a98 <.direct_call+0x6>)
   20a7a:	6008      	str	r0, [r1, #0]
   20a7c:	e004      	b.n	20a88 <.already_initialized>

00020a7e <.bad_return>:
   20a7e:	bc0f      	pop	{r0, r1, r2, r3}
   20a80:	4807      	ldr	r0, [pc, #28]	; (20aa0 <.direct_call+0xe>)
   20a82:	469e      	mov	lr, r3
   20a84:	bc08      	pop	{r3}
   20a86:	4770      	bx	lr

00020a88 <.already_initialized>:
   20a88:	4684      	mov	ip, r0
   20a8a:	bc0f      	pop	{r0, r1, r2, r3}
   20a8c:	469e      	mov	lr, r3
   20a8e:	bc08      	pop	{r3}

00020a90 <.call_function>:
   20a90:	4760      	bx	ip

00020a92 <.direct_call>:
   20a92:	469c      	mov	ip, r3
   20a94:	bc08      	pop	{r3}
   20a96:	4760      	bx	ip
   20a98:	0002f974 	.word	0x0002f974
   20a9c:	00020a4c 	.word	0x00020a4c
   20aa0:	ffffffff 	.word	0xffffffff

00020aa4 <function_name>:
   20aa4:	755f5346 	.word	0x755f5346
   20aa8:	756f6d6e 	.word	0x756f6d6e
   20aac:	746e      	.short	0x746e
	...

00020ab0 <FS_unmount>:
   20ab0:	b408      	push	{r3}
   20ab2:	4b0f      	ldr	r3, [pc, #60]	; (20af0 <.direct_call+0x6>)
   20ab4:	681b      	ldr	r3, [r3, #0]
   20ab6:	2b00      	cmp	r3, #0
   20ab8:	d117      	bne.n	20aea <.direct_call>
   20aba:	b507      	push	{r0, r1, r2, lr}
   20abc:	f000 fb8c 	bl	211d8 <wrapperlib_open>
   20ac0:	2800      	cmp	r0, #0
   20ac2:	d008      	beq.n	20ad6 <.bad_return>
   20ac4:	4684      	mov	ip, r0
   20ac6:	480b      	ldr	r0, [pc, #44]	; (20af4 <.direct_call+0xa>)
   20ac8:	f000 f80e 	bl	20ae8 <.call_function>
   20acc:	2800      	cmp	r0, #0
   20ace:	d002      	beq.n	20ad6 <.bad_return>
   20ad0:	4907      	ldr	r1, [pc, #28]	; (20af0 <.direct_call+0x6>)
   20ad2:	6008      	str	r0, [r1, #0]
   20ad4:	e004      	b.n	20ae0 <.already_initialized>

00020ad6 <.bad_return>:
   20ad6:	bc0f      	pop	{r0, r1, r2, r3}
   20ad8:	4807      	ldr	r0, [pc, #28]	; (20af8 <.direct_call+0xe>)
   20ada:	469e      	mov	lr, r3
   20adc:	bc08      	pop	{r3}
   20ade:	4770      	bx	lr

00020ae0 <.already_initialized>:
   20ae0:	4684      	mov	ip, r0
   20ae2:	bc0f      	pop	{r0, r1, r2, r3}
   20ae4:	469e      	mov	lr, r3
   20ae6:	bc08      	pop	{r3}

00020ae8 <.call_function>:
   20ae8:	4760      	bx	ip

00020aea <.direct_call>:
   20aea:	469c      	mov	ip, r3
   20aec:	bc08      	pop	{r3}
   20aee:	4760      	bx	ip
   20af0:	0002f978 	.word	0x0002f978
   20af4:	00020aa4 	.word	0x00020aa4
   20af8:	ffffffff 	.word	0xffffffff

00020afc <function_name>:
   20afc:	775f5346 	.word	0x775f5346
   20b00:	65746972 	.word	0x65746972
   20b04:	00          	.byte	0x00
   20b05:	00          	.byte	0x00
   20b06:	bf00      	nop

00020b08 <FS_write>:
   20b08:	b408      	push	{r3}
   20b0a:	4b0f      	ldr	r3, [pc, #60]	; (20b48 <.direct_call+0x6>)
   20b0c:	681b      	ldr	r3, [r3, #0]
   20b0e:	2b00      	cmp	r3, #0
   20b10:	d117      	bne.n	20b42 <.direct_call>
   20b12:	b507      	push	{r0, r1, r2, lr}
   20b14:	f000 fb60 	bl	211d8 <wrapperlib_open>
   20b18:	2800      	cmp	r0, #0
   20b1a:	d008      	beq.n	20b2e <.bad_return>
   20b1c:	4684      	mov	ip, r0
   20b1e:	480b      	ldr	r0, [pc, #44]	; (20b4c <.direct_call+0xa>)
   20b20:	f000 f80e 	bl	20b40 <.call_function>
   20b24:	2800      	cmp	r0, #0
   20b26:	d002      	beq.n	20b2e <.bad_return>
   20b28:	4907      	ldr	r1, [pc, #28]	; (20b48 <.direct_call+0x6>)
   20b2a:	6008      	str	r0, [r1, #0]
   20b2c:	e004      	b.n	20b38 <.already_initialized>

00020b2e <.bad_return>:
   20b2e:	bc0f      	pop	{r0, r1, r2, r3}
   20b30:	4807      	ldr	r0, [pc, #28]	; (20b50 <.direct_call+0xe>)
   20b32:	469e      	mov	lr, r3
   20b34:	bc08      	pop	{r3}
   20b36:	4770      	bx	lr

00020b38 <.already_initialized>:
   20b38:	4684      	mov	ip, r0
   20b3a:	bc0f      	pop	{r0, r1, r2, r3}
   20b3c:	469e      	mov	lr, r3
   20b3e:	bc08      	pop	{r3}

00020b40 <.call_function>:
   20b40:	4760      	bx	ip

00020b42 <.direct_call>:
   20b42:	469c      	mov	ip, r3
   20b44:	bc08      	pop	{r3}
   20b46:	4760      	bx	ip
   20b48:	0002f97c 	.word	0x0002f97c
   20b4c:	00020afc 	.word	0x00020afc
   20b50:	ffffffff 	.word	0xffffffff

00020b54 <function_name>:
   20b54:	656a624f 	.word	0x656a624f
   20b58:	65477463 	.word	0x65477463
   20b5c:	73654474 	.word	0x73654474
   20b60:	70697263 	.word	0x70697263
   20b64:	00726f74 	.word	0x00726f74

00020b68 <ObjectGetDescriptor>:
   20b68:	b408      	push	{r3}
   20b6a:	4b0f      	ldr	r3, [pc, #60]	; (20ba8 <.direct_call+0x6>)
   20b6c:	681b      	ldr	r3, [r3, #0]
   20b6e:	2b00      	cmp	r3, #0
   20b70:	d117      	bne.n	20ba2 <.direct_call>
   20b72:	b507      	push	{r0, r1, r2, lr}
   20b74:	f000 fb30 	bl	211d8 <wrapperlib_open>
   20b78:	2800      	cmp	r0, #0
   20b7a:	d008      	beq.n	20b8e <.bad_return>
   20b7c:	4684      	mov	ip, r0
   20b7e:	480b      	ldr	r0, [pc, #44]	; (20bac <.direct_call+0xa>)
   20b80:	f000 f80e 	bl	20ba0 <.call_function>
   20b84:	2800      	cmp	r0, #0
   20b86:	d002      	beq.n	20b8e <.bad_return>
   20b88:	4907      	ldr	r1, [pc, #28]	; (20ba8 <.direct_call+0x6>)
   20b8a:	6008      	str	r0, [r1, #0]
   20b8c:	e004      	b.n	20b98 <.already_initialized>

00020b8e <.bad_return>:
   20b8e:	bc0f      	pop	{r0, r1, r2, r3}
   20b90:	4807      	ldr	r0, [pc, #28]	; (20bb0 <.direct_call+0xe>)
   20b92:	469e      	mov	lr, r3
   20b94:	bc08      	pop	{r3}
   20b96:	4770      	bx	lr

00020b98 <.already_initialized>:
   20b98:	4684      	mov	ip, r0
   20b9a:	bc0f      	pop	{r0, r1, r2, r3}
   20b9c:	469e      	mov	lr, r3
   20b9e:	bc08      	pop	{r3}

00020ba0 <.call_function>:
   20ba0:	4760      	bx	ip

00020ba2 <.direct_call>:
   20ba2:	469c      	mov	ip, r3
   20ba4:	bc08      	pop	{r3}
   20ba6:	4760      	bx	ip
   20ba8:	0002f980 	.word	0x0002f980
   20bac:	00020b54 	.word	0x00020b54
   20bb0:	ffffffff 	.word	0xffffffff

00020bb4 <function_name>:
   20bb4:	656a624f 	.word	0x656a624f
   20bb8:	65477463 	.word	0x65477463
   20bbc:	666e4974 	.word	0x666e4974
   20bc0:	006f      	.short	0x006f
   20bc2:	bf00      	nop

00020bc4 <ObjectGetInfo>:
   20bc4:	b408      	push	{r3}
   20bc6:	4b0f      	ldr	r3, [pc, #60]	; (20c04 <.direct_call+0x6>)
   20bc8:	681b      	ldr	r3, [r3, #0]
   20bca:	2b00      	cmp	r3, #0
   20bcc:	d117      	bne.n	20bfe <.direct_call>
   20bce:	b507      	push	{r0, r1, r2, lr}
   20bd0:	f000 fb02 	bl	211d8 <wrapperlib_open>
   20bd4:	2800      	cmp	r0, #0
   20bd6:	d008      	beq.n	20bea <.bad_return>
   20bd8:	4684      	mov	ip, r0
   20bda:	480b      	ldr	r0, [pc, #44]	; (20c08 <.direct_call+0xa>)
   20bdc:	f000 f80e 	bl	20bfc <.call_function>
   20be0:	2800      	cmp	r0, #0
   20be2:	d002      	beq.n	20bea <.bad_return>
   20be4:	4907      	ldr	r1, [pc, #28]	; (20c04 <.direct_call+0x6>)
   20be6:	6008      	str	r0, [r1, #0]
   20be8:	e004      	b.n	20bf4 <.already_initialized>

00020bea <.bad_return>:
   20bea:	bc0f      	pop	{r0, r1, r2, r3}
   20bec:	4807      	ldr	r0, [pc, #28]	; (20c0c <.direct_call+0xe>)
   20bee:	469e      	mov	lr, r3
   20bf0:	bc08      	pop	{r3}
   20bf2:	4770      	bx	lr

00020bf4 <.already_initialized>:
   20bf4:	4684      	mov	ip, r0
   20bf6:	bc0f      	pop	{r0, r1, r2, r3}
   20bf8:	469e      	mov	lr, r3
   20bfa:	bc08      	pop	{r3}

00020bfc <.call_function>:
   20bfc:	4760      	bx	ip

00020bfe <.direct_call>:
   20bfe:	469c      	mov	ip, r3
   20c00:	bc08      	pop	{r3}
   20c02:	4760      	bx	ip
   20c04:	0002f984 	.word	0x0002f984
   20c08:	00020bb4 	.word	0x00020bb4
   20c0c:	ffffffff 	.word	0xffffffff

00020c10 <function_name>:
   20c10:	65676150 	.word	0x65676150
   20c14:	6f6c6c41 	.word	0x6f6c6c41
   20c18:	0063      	.short	0x0063
   20c1a:	bf00      	nop

00020c1c <PageAlloc>:
   20c1c:	b408      	push	{r3}
   20c1e:	4b0f      	ldr	r3, [pc, #60]	; (20c5c <.direct_call+0x6>)
   20c20:	681b      	ldr	r3, [r3, #0]
   20c22:	2b00      	cmp	r3, #0
   20c24:	d117      	bne.n	20c56 <.direct_call>
   20c26:	b507      	push	{r0, r1, r2, lr}
   20c28:	f000 fad6 	bl	211d8 <wrapperlib_open>
   20c2c:	2800      	cmp	r0, #0
   20c2e:	d008      	beq.n	20c42 <.bad_return>
   20c30:	4684      	mov	ip, r0
   20c32:	480b      	ldr	r0, [pc, #44]	; (20c60 <.direct_call+0xa>)
   20c34:	f000 f80e 	bl	20c54 <.call_function>
   20c38:	2800      	cmp	r0, #0
   20c3a:	d002      	beq.n	20c42 <.bad_return>
   20c3c:	4907      	ldr	r1, [pc, #28]	; (20c5c <.direct_call+0x6>)
   20c3e:	6008      	str	r0, [r1, #0]
   20c40:	e004      	b.n	20c4c <.already_initialized>

00020c42 <.bad_return>:
   20c42:	bc0f      	pop	{r0, r1, r2, r3}
   20c44:	2000      	movs	r0, #0
   20c46:	469e      	mov	lr, r3
   20c48:	bc08      	pop	{r3}
   20c4a:	4770      	bx	lr

00020c4c <.already_initialized>:
   20c4c:	4684      	mov	ip, r0
   20c4e:	bc0f      	pop	{r0, r1, r2, r3}
   20c50:	469e      	mov	lr, r3
   20c52:	bc08      	pop	{r3}

00020c54 <.call_function>:
   20c54:	4760      	bx	ip

00020c56 <.direct_call>:
   20c56:	469c      	mov	ip, r3
   20c58:	bc08      	pop	{r3}
   20c5a:	4760      	bx	ip
   20c5c:	0002f988 	.word	0x0002f988
   20c60:	00020c10 	.word	0x00020c10

00020c64 <function_name>:
   20c64:	65676150 	.word	0x65676150
   20c68:	65657246 	.word	0x65657246
   20c6c:	00          	.byte	0x00
   20c6d:	00          	.byte	0x00
   20c6e:	bf00      	nop

00020c70 <PageFree>:
   20c70:	b408      	push	{r3}
   20c72:	4b0f      	ldr	r3, [pc, #60]	; (20cb0 <.direct_call+0x6>)
   20c74:	681b      	ldr	r3, [r3, #0]
   20c76:	2b00      	cmp	r3, #0
   20c78:	d117      	bne.n	20caa <.direct_call>
   20c7a:	b507      	push	{r0, r1, r2, lr}
   20c7c:	f000 faac 	bl	211d8 <wrapperlib_open>
   20c80:	2800      	cmp	r0, #0
   20c82:	d008      	beq.n	20c96 <.bad_return>
   20c84:	4684      	mov	ip, r0
   20c86:	480b      	ldr	r0, [pc, #44]	; (20cb4 <.direct_call+0xa>)
   20c88:	f000 f80e 	bl	20ca8 <.call_function>
   20c8c:	2800      	cmp	r0, #0
   20c8e:	d002      	beq.n	20c96 <.bad_return>
   20c90:	4907      	ldr	r1, [pc, #28]	; (20cb0 <.direct_call+0x6>)
   20c92:	6008      	str	r0, [r1, #0]
   20c94:	e004      	b.n	20ca0 <.already_initialized>

00020c96 <.bad_return>:
   20c96:	bc0f      	pop	{r0, r1, r2, r3}
   20c98:	4807      	ldr	r0, [pc, #28]	; (20cb8 <.direct_call+0xe>)
   20c9a:	469e      	mov	lr, r3
   20c9c:	bc08      	pop	{r3}
   20c9e:	4770      	bx	lr

00020ca0 <.already_initialized>:
   20ca0:	4684      	mov	ip, r0
   20ca2:	bc0f      	pop	{r0, r1, r2, r3}
   20ca4:	469e      	mov	lr, r3
   20ca6:	bc08      	pop	{r3}

00020ca8 <.call_function>:
   20ca8:	4760      	bx	ip

00020caa <.direct_call>:
   20caa:	469c      	mov	ip, r3
   20cac:	bc08      	pop	{r3}
   20cae:	4760      	bx	ip
   20cb0:	0002f98c 	.word	0x0002f98c
   20cb4:	00020c64 	.word	0x00020c64
   20cb8:	fffffffc 	.word	0xfffffffc

00020cbc <function_name>:
   20cbc:	73726966 	.word	0x73726966
   20cc0:	6e695f74 	.word	0x6e695f74
   20cc4:	7469      	.short	0x7469
	...

00020cc8 <first_init>:
   20cc8:	b408      	push	{r3}
   20cca:	4b0f      	ldr	r3, [pc, #60]	; (20d08 <.direct_call+0x6>)
   20ccc:	681b      	ldr	r3, [r3, #0]
   20cce:	2b00      	cmp	r3, #0
   20cd0:	d117      	bne.n	20d02 <.direct_call>
   20cd2:	b507      	push	{r0, r1, r2, lr}
   20cd4:	f000 fa80 	bl	211d8 <wrapperlib_open>
   20cd8:	2800      	cmp	r0, #0
   20cda:	d008      	beq.n	20cee <.bad_return>
   20cdc:	4684      	mov	ip, r0
   20cde:	480b      	ldr	r0, [pc, #44]	; (20d0c <.direct_call+0xa>)
   20ce0:	f000 f80e 	bl	20d00 <.call_function>
   20ce4:	2800      	cmp	r0, #0
   20ce6:	d002      	beq.n	20cee <.bad_return>
   20ce8:	4907      	ldr	r1, [pc, #28]	; (20d08 <.direct_call+0x6>)
   20cea:	6008      	str	r0, [r1, #0]
   20cec:	e004      	b.n	20cf8 <.already_initialized>

00020cee <.bad_return>:
   20cee:	bc0f      	pop	{r0, r1, r2, r3}
   20cf0:	4807      	ldr	r0, [pc, #28]	; (20d10 <.direct_call+0xe>)
   20cf2:	469e      	mov	lr, r3
   20cf4:	bc08      	pop	{r3}
   20cf6:	4770      	bx	lr

00020cf8 <.already_initialized>:
   20cf8:	4684      	mov	ip, r0
   20cfa:	bc0f      	pop	{r0, r1, r2, r3}
   20cfc:	469e      	mov	lr, r3
   20cfe:	bc08      	pop	{r3}

00020d00 <.call_function>:
   20d00:	4760      	bx	ip

00020d02 <.direct_call>:
   20d02:	469c      	mov	ip, r3
   20d04:	bc08      	pop	{r3}
   20d06:	4760      	bx	ip
   20d08:	0002f990 	.word	0x0002f990
   20d0c:	00020cbc 	.word	0x00020cbc
   20d10:	ffffffff 	.word	0xffffffff

00020d14 <function_name>:
   20d14:	5f7a6172 	.word	0x5f7a6172
   20d18:	74696e69 	.word	0x74696e69
   20d1c:	00          	.byte	0x00
   20d1d:	00          	.byte	0x00
   20d1e:	bf00      	nop

00020d20 <raz_init>:
   20d20:	b408      	push	{r3}
   20d22:	4b0f      	ldr	r3, [pc, #60]	; (20d60 <.direct_call+0x6>)
   20d24:	681b      	ldr	r3, [r3, #0]
   20d26:	2b00      	cmp	r3, #0
   20d28:	d117      	bne.n	20d5a <.direct_call>
   20d2a:	b507      	push	{r0, r1, r2, lr}
   20d2c:	f000 fa54 	bl	211d8 <wrapperlib_open>
   20d30:	2800      	cmp	r0, #0
   20d32:	d008      	beq.n	20d46 <.bad_return>
   20d34:	4684      	mov	ip, r0
   20d36:	480b      	ldr	r0, [pc, #44]	; (20d64 <.direct_call+0xa>)
   20d38:	f000 f80e 	bl	20d58 <.call_function>
   20d3c:	2800      	cmp	r0, #0
   20d3e:	d002      	beq.n	20d46 <.bad_return>
   20d40:	4907      	ldr	r1, [pc, #28]	; (20d60 <.direct_call+0x6>)
   20d42:	6008      	str	r0, [r1, #0]
   20d44:	e004      	b.n	20d50 <.already_initialized>

00020d46 <.bad_return>:
   20d46:	bc0f      	pop	{r0, r1, r2, r3}
   20d48:	4807      	ldr	r0, [pc, #28]	; (20d68 <.direct_call+0xe>)
   20d4a:	469e      	mov	lr, r3
   20d4c:	bc08      	pop	{r3}
   20d4e:	4770      	bx	lr

00020d50 <.already_initialized>:
   20d50:	4684      	mov	ip, r0
   20d52:	bc0f      	pop	{r0, r1, r2, r3}
   20d54:	469e      	mov	lr, r3
   20d56:	bc08      	pop	{r3}

00020d58 <.call_function>:
   20d58:	4760      	bx	ip

00020d5a <.direct_call>:
   20d5a:	469c      	mov	ip, r3
   20d5c:	bc08      	pop	{r3}
   20d5e:	4760      	bx	ip
   20d60:	0002f994 	.word	0x0002f994
   20d64:	00020d14 	.word	0x00020d14
   20d68:	ffffffff 	.word	0xffffffff

00020d6c <function_name>:
   20d6c:	5f554d45 	.word	0x5f554d45
   20d70:	70736944 	.word	0x70736944
   20d74:	4679616c 	.word	0x4679616c
   20d78:	65746f6f 	.word	0x65746f6f
   20d7c:	0072      	.short	0x0072
   20d7e:	bf00      	nop

00020d80 <DisplayFooter>:
   20d80:	b408      	push	{r3}
   20d82:	4b0f      	ldr	r3, [pc, #60]	; (20dc0 <.direct_call+0x6>)
   20d84:	681b      	ldr	r3, [r3, #0]
   20d86:	2b00      	cmp	r3, #0
   20d88:	d117      	bne.n	20dba <.direct_call>
   20d8a:	b507      	push	{r0, r1, r2, lr}
   20d8c:	f000 f94e 	bl	2102c <emulationlib_open>
   20d90:	2800      	cmp	r0, #0
   20d92:	d008      	beq.n	20da6 <.bad_return>
   20d94:	4684      	mov	ip, r0
   20d96:	480b      	ldr	r0, [pc, #44]	; (20dc4 <.direct_call+0xa>)
   20d98:	f000 f80e 	bl	20db8 <.call_function>
   20d9c:	2800      	cmp	r0, #0
   20d9e:	d002      	beq.n	20da6 <.bad_return>
   20da0:	4907      	ldr	r1, [pc, #28]	; (20dc0 <.direct_call+0x6>)
   20da2:	6008      	str	r0, [r1, #0]
   20da4:	e004      	b.n	20db0 <.already_initialized>

00020da6 <.bad_return>:
   20da6:	bc0f      	pop	{r0, r1, r2, r3}
   20da8:	4807      	ldr	r0, [pc, #28]	; (20dc8 <.direct_call+0xe>)
   20daa:	469e      	mov	lr, r3
   20dac:	bc08      	pop	{r3}
   20dae:	4770      	bx	lr

00020db0 <.already_initialized>:
   20db0:	4684      	mov	ip, r0
   20db2:	bc0f      	pop	{r0, r1, r2, r3}
   20db4:	469e      	mov	lr, r3
   20db6:	bc08      	pop	{r3}

00020db8 <.call_function>:
   20db8:	4760      	bx	ip

00020dba <.direct_call>:
   20dba:	469c      	mov	ip, r3
   20dbc:	bc08      	pop	{r3}
   20dbe:	4760      	bx	ip
   20dc0:	0002f998 	.word	0x0002f998
   20dc4:	00020d6c 	.word	0x00020d6c
   20dc8:	ffffffff 	.word	0xffffffff

00020dcc <function_name>:
   20dcc:	5f554d45 	.word	0x5f554d45
   20dd0:	70736944 	.word	0x70736944
   20dd4:	4879616c 	.word	0x4879616c
   20dd8:	65646165 	.word	0x65646165
   20ddc:	0072      	.short	0x0072
   20dde:	bf00      	nop

00020de0 <DisplayHeader>:
   20de0:	b408      	push	{r3}
   20de2:	4b0f      	ldr	r3, [pc, #60]	; (20e20 <.direct_call+0x6>)
   20de4:	681b      	ldr	r3, [r3, #0]
   20de6:	2b00      	cmp	r3, #0
   20de8:	d117      	bne.n	20e1a <.direct_call>
   20dea:	b507      	push	{r0, r1, r2, lr}
   20dec:	f000 f91e 	bl	2102c <emulationlib_open>
   20df0:	2800      	cmp	r0, #0
   20df2:	d008      	beq.n	20e06 <.bad_return>
   20df4:	4684      	mov	ip, r0
   20df6:	480b      	ldr	r0, [pc, #44]	; (20e24 <.direct_call+0xa>)
   20df8:	f000 f80e 	bl	20e18 <.call_function>
   20dfc:	2800      	cmp	r0, #0
   20dfe:	d002      	beq.n	20e06 <.bad_return>
   20e00:	4907      	ldr	r1, [pc, #28]	; (20e20 <.direct_call+0x6>)
   20e02:	6008      	str	r0, [r1, #0]
   20e04:	e004      	b.n	20e10 <.already_initialized>

00020e06 <.bad_return>:
   20e06:	bc0f      	pop	{r0, r1, r2, r3}
   20e08:	4807      	ldr	r0, [pc, #28]	; (20e28 <.direct_call+0xe>)
   20e0a:	469e      	mov	lr, r3
   20e0c:	bc08      	pop	{r3}
   20e0e:	4770      	bx	lr

00020e10 <.already_initialized>:
   20e10:	4684      	mov	ip, r0
   20e12:	bc0f      	pop	{r0, r1, r2, r3}
   20e14:	469e      	mov	lr, r3
   20e16:	bc08      	pop	{r3}

00020e18 <.call_function>:
   20e18:	4760      	bx	ip

00020e1a <.direct_call>:
   20e1a:	469c      	mov	ip, r3
   20e1c:	bc08      	pop	{r3}
   20e1e:	4760      	bx	ip
   20e20:	0002f99c 	.word	0x0002f99c
   20e24:	00020dcc 	.word	0x00020dcc
   20e28:	ffffffff 	.word	0xffffffff

00020e2c <function_name>:
   20e2c:	5f554d45 	.word	0x5f554d45
   20e30:	70736944 	.word	0x70736944
   20e34:	4c79616c 	.word	0x4c79616c
   20e38:	00736465 	.word	0x00736465

00020e3c <DisplayLeds>:
   20e3c:	b408      	push	{r3}
   20e3e:	4b0f      	ldr	r3, [pc, #60]	; (20e7c <.direct_call+0x6>)
   20e40:	681b      	ldr	r3, [r3, #0]
   20e42:	2b00      	cmp	r3, #0
   20e44:	d117      	bne.n	20e76 <.direct_call>
   20e46:	b507      	push	{r0, r1, r2, lr}
   20e48:	f000 f8f0 	bl	2102c <emulationlib_open>
   20e4c:	2800      	cmp	r0, #0
   20e4e:	d008      	beq.n	20e62 <.bad_return>
   20e50:	4684      	mov	ip, r0
   20e52:	480b      	ldr	r0, [pc, #44]	; (20e80 <.direct_call+0xa>)
   20e54:	f000 f80e 	bl	20e74 <.call_function>
   20e58:	2800      	cmp	r0, #0
   20e5a:	d002      	beq.n	20e62 <.bad_return>
   20e5c:	4907      	ldr	r1, [pc, #28]	; (20e7c <.direct_call+0x6>)
   20e5e:	6008      	str	r0, [r1, #0]
   20e60:	e004      	b.n	20e6c <.already_initialized>

00020e62 <.bad_return>:
   20e62:	bc0f      	pop	{r0, r1, r2, r3}
   20e64:	4807      	ldr	r0, [pc, #28]	; (20e84 <.direct_call+0xe>)
   20e66:	469e      	mov	lr, r3
   20e68:	bc08      	pop	{r3}
   20e6a:	4770      	bx	lr

00020e6c <.already_initialized>:
   20e6c:	4684      	mov	ip, r0
   20e6e:	bc0f      	pop	{r0, r1, r2, r3}
   20e70:	469e      	mov	lr, r3
   20e72:	bc08      	pop	{r3}

00020e74 <.call_function>:
   20e74:	4760      	bx	ip

00020e76 <.direct_call>:
   20e76:	469c      	mov	ip, r3
   20e78:	bc08      	pop	{r3}
   20e7a:	4760      	bx	ip
   20e7c:	0002f9a0 	.word	0x0002f9a0
   20e80:	00020e2c 	.word	0x00020e2c
   20e84:	ffffffff 	.word	0xffffffff

00020e88 <function_name>:
   20e88:	5f554d45 	.word	0x5f554d45
   20e8c:	6f467349 	.word	0x6f467349
   20e90:	7265746f 	.word	0x7265746f
   20e94:	00          	.byte	0x00
   20e95:	00          	.byte	0x00
   20e96:	bf00      	nop

00020e98 <IsFooter>:
   20e98:	b408      	push	{r3}
   20e9a:	4b0f      	ldr	r3, [pc, #60]	; (20ed8 <.direct_call+0x6>)
   20e9c:	681b      	ldr	r3, [r3, #0]
   20e9e:	2b00      	cmp	r3, #0
   20ea0:	d117      	bne.n	20ed2 <.direct_call>
   20ea2:	b507      	push	{r0, r1, r2, lr}
   20ea4:	f000 f8c2 	bl	2102c <emulationlib_open>
   20ea8:	2800      	cmp	r0, #0
   20eaa:	d008      	beq.n	20ebe <.bad_return>
   20eac:	4684      	mov	ip, r0
   20eae:	480b      	ldr	r0, [pc, #44]	; (20edc <.direct_call+0xa>)
   20eb0:	f000 f80e 	bl	20ed0 <.call_function>
   20eb4:	2800      	cmp	r0, #0
   20eb6:	d002      	beq.n	20ebe <.bad_return>
   20eb8:	4907      	ldr	r1, [pc, #28]	; (20ed8 <.direct_call+0x6>)
   20eba:	6008      	str	r0, [r1, #0]
   20ebc:	e004      	b.n	20ec8 <.already_initialized>

00020ebe <.bad_return>:
   20ebe:	bc0f      	pop	{r0, r1, r2, r3}
   20ec0:	4807      	ldr	r0, [pc, #28]	; (20ee0 <.direct_call+0xe>)
   20ec2:	469e      	mov	lr, r3
   20ec4:	bc08      	pop	{r3}
   20ec6:	4770      	bx	lr

00020ec8 <.already_initialized>:
   20ec8:	4684      	mov	ip, r0
   20eca:	bc0f      	pop	{r0, r1, r2, r3}
   20ecc:	469e      	mov	lr, r3
   20ece:	bc08      	pop	{r3}

00020ed0 <.call_function>:
   20ed0:	4760      	bx	ip

00020ed2 <.direct_call>:
   20ed2:	469c      	mov	ip, r3
   20ed4:	bc08      	pop	{r3}
   20ed6:	4760      	bx	ip
   20ed8:	0002f9a4 	.word	0x0002f9a4
   20edc:	00020e88 	.word	0x00020e88
   20ee0:	ffffffff 	.word	0xffffffff

00020ee4 <function_name>:
   20ee4:	5f554d45 	.word	0x5f554d45
   20ee8:	65487349 	.word	0x65487349
   20eec:	72656461 	.word	0x72656461
   20ef0:	69746341 	.word	0x69746341
   20ef4:	65746176 	.word	0x65746176
   20ef8:	0064      	.short	0x0064
   20efa:	bf00      	nop

00020efc <IsHeader>:
   20efc:	b408      	push	{r3}
   20efe:	4b0f      	ldr	r3, [pc, #60]	; (20f3c <.direct_call+0x6>)
   20f00:	681b      	ldr	r3, [r3, #0]
   20f02:	2b00      	cmp	r3, #0
   20f04:	d117      	bne.n	20f36 <.direct_call>
   20f06:	b507      	push	{r0, r1, r2, lr}
   20f08:	f000 f890 	bl	2102c <emulationlib_open>
   20f0c:	2800      	cmp	r0, #0
   20f0e:	d008      	beq.n	20f22 <.bad_return>
   20f10:	4684      	mov	ip, r0
   20f12:	480b      	ldr	r0, [pc, #44]	; (20f40 <.direct_call+0xa>)
   20f14:	f000 f80e 	bl	20f34 <.call_function>
   20f18:	2800      	cmp	r0, #0
   20f1a:	d002      	beq.n	20f22 <.bad_return>
   20f1c:	4907      	ldr	r1, [pc, #28]	; (20f3c <.direct_call+0x6>)
   20f1e:	6008      	str	r0, [r1, #0]
   20f20:	e004      	b.n	20f2c <.already_initialized>

00020f22 <.bad_return>:
   20f22:	bc0f      	pop	{r0, r1, r2, r3}
   20f24:	4807      	ldr	r0, [pc, #28]	; (20f44 <.direct_call+0xe>)
   20f26:	469e      	mov	lr, r3
   20f28:	bc08      	pop	{r3}
   20f2a:	4770      	bx	lr

00020f2c <.already_initialized>:
   20f2c:	4684      	mov	ip, r0
   20f2e:	bc0f      	pop	{r0, r1, r2, r3}
   20f30:	469e      	mov	lr, r3
   20f32:	bc08      	pop	{r3}

00020f34 <.call_function>:
   20f34:	4760      	bx	ip

00020f36 <.direct_call>:
   20f36:	469c      	mov	ip, r3
   20f38:	bc08      	pop	{r3}
   20f3a:	4760      	bx	ip
   20f3c:	0002f9a8 	.word	0x0002f9a8
   20f40:	00020ee4 	.word	0x00020ee4
   20f44:	ffffffff 	.word	0xffffffff

00020f48 <function_name>:
   20f48:	5f554d45 	.word	0x5f554d45
   20f4c:	696c6554 	.word	0x696c6554
   20f50:	455f6d75 	.word	0x455f6d75
   20f54:	00746978 	.word	0x00746978

00020f58 <Telium_Exit>:
   20f58:	b408      	push	{r3}
   20f5a:	4b0f      	ldr	r3, [pc, #60]	; (20f98 <.direct_call+0x6>)
   20f5c:	681b      	ldr	r3, [r3, #0]
   20f5e:	2b00      	cmp	r3, #0
   20f60:	d117      	bne.n	20f92 <.direct_call>
   20f62:	b507      	push	{r0, r1, r2, lr}
   20f64:	f000 f862 	bl	2102c <emulationlib_open>
   20f68:	2800      	cmp	r0, #0
   20f6a:	d008      	beq.n	20f7e <.bad_return>
   20f6c:	4684      	mov	ip, r0
   20f6e:	480b      	ldr	r0, [pc, #44]	; (20f9c <.direct_call+0xa>)
   20f70:	f000 f80e 	bl	20f90 <.call_function>
   20f74:	2800      	cmp	r0, #0
   20f76:	d002      	beq.n	20f7e <.bad_return>
   20f78:	4907      	ldr	r1, [pc, #28]	; (20f98 <.direct_call+0x6>)
   20f7a:	6008      	str	r0, [r1, #0]
   20f7c:	e004      	b.n	20f88 <.already_initialized>

00020f7e <.bad_return>:
   20f7e:	bc0f      	pop	{r0, r1, r2, r3}
   20f80:	4807      	ldr	r0, [pc, #28]	; (20fa0 <.direct_call+0xe>)
   20f82:	469e      	mov	lr, r3
   20f84:	bc08      	pop	{r3}
   20f86:	4770      	bx	lr

00020f88 <.already_initialized>:
   20f88:	4684      	mov	ip, r0
   20f8a:	bc0f      	pop	{r0, r1, r2, r3}
   20f8c:	469e      	mov	lr, r3
   20f8e:	bc08      	pop	{r3}

00020f90 <.call_function>:
   20f90:	4760      	bx	ip

00020f92 <.direct_call>:
   20f92:	469c      	mov	ip, r3
   20f94:	bc08      	pop	{r3}
   20f96:	4760      	bx	ip
   20f98:	0002f9ac 	.word	0x0002f9ac
   20f9c:	00020f48 	.word	0x00020f48
   20fa0:	ffffffff 	.word	0xffffffff

00020fa4 <function_name>:
   20fa4:	5f554d45 	.word	0x5f554d45
   20fa8:	6f6c7075 	.word	0x6f6c7075
   20fac:	645f6461 	.word	0x645f6461
   20fb0:	6e676169 	.word	0x6e676169
   20fb4:	6974736f 	.word	0x6974736f
   20fb8:	78745f63 	.word	0x78745f63
   20fbc:	0074      	.short	0x0074
   20fbe:	bf00      	nop

00020fc0 <upload_diagnostic_txt>:
   20fc0:	b408      	push	{r3}
   20fc2:	4b0f      	ldr	r3, [pc, #60]	; (21000 <.direct_call+0x6>)
   20fc4:	681b      	ldr	r3, [r3, #0]
   20fc6:	2b00      	cmp	r3, #0
   20fc8:	d117      	bne.n	20ffa <.direct_call>
   20fca:	b507      	push	{r0, r1, r2, lr}
   20fcc:	f000 f82e 	bl	2102c <emulationlib_open>
   20fd0:	2800      	cmp	r0, #0
   20fd2:	d008      	beq.n	20fe6 <.bad_return>
   20fd4:	4684      	mov	ip, r0
   20fd6:	480b      	ldr	r0, [pc, #44]	; (21004 <.direct_call+0xa>)
   20fd8:	f000 f80e 	bl	20ff8 <.call_function>
   20fdc:	2800      	cmp	r0, #0
   20fde:	d002      	beq.n	20fe6 <.bad_return>
   20fe0:	4907      	ldr	r1, [pc, #28]	; (21000 <.direct_call+0x6>)
   20fe2:	6008      	str	r0, [r1, #0]
   20fe4:	e004      	b.n	20ff0 <.already_initialized>

00020fe6 <.bad_return>:
   20fe6:	bc0f      	pop	{r0, r1, r2, r3}
   20fe8:	4807      	ldr	r0, [pc, #28]	; (21008 <.direct_call+0xe>)
   20fea:	469e      	mov	lr, r3
   20fec:	bc08      	pop	{r3}
   20fee:	4770      	bx	lr

00020ff0 <.already_initialized>:
   20ff0:	4684      	mov	ip, r0
   20ff2:	bc0f      	pop	{r0, r1, r2, r3}
   20ff4:	469e      	mov	lr, r3
   20ff6:	bc08      	pop	{r3}

00020ff8 <.call_function>:
   20ff8:	4760      	bx	ip

00020ffa <.direct_call>:
   20ffa:	469c      	mov	ip, r3
   20ffc:	bc08      	pop	{r3}
   20ffe:	4760      	bx	ip
   21000:	0002f9b0 	.word	0x0002f9b0
   21004:	00020fa4 	.word	0x00020fa4
   21008:	ffffffff 	.word	0xffffffff

0002100c <GetProcAddressEmulation>:
   2100c:	4b05      	ldr	r3, [pc, #20]	; (21024 <GetProcAddressEmulation+0x18>)
   2100e:	4a06      	ldr	r2, [pc, #24]	; (21028 <GetProcAddressEmulation+0x1c>)
   21010:	447b      	add	r3, pc
   21012:	4601      	mov	r1, r0
   21014:	589b      	ldr	r3, [r3, r2]
   21016:	6818      	ldr	r0, [r3, #0]
   21018:	b110      	cbz	r0, 21020 <GetProcAddressEmulation+0x14>
   2101a:	b109      	cbz	r1, 21020 <GetProcAddressEmulation+0x14>
   2101c:	f000 bfad 	b.w	21f7a <OSL_Dll_GetSymbolByName>
   21020:	2000      	movs	r0, #0
   21022:	4770      	bx	lr
   21024:	0000e104 	.word	0x0000e104
   21028:	000000f8 	.word	0x000000f8

0002102c <emulationlib_open>:
   2102c:	b538      	push	{r3, r4, r5, lr}
   2102e:	4c09      	ldr	r4, [pc, #36]	; (21054 <emulationlib_open+0x28>)
   21030:	4b09      	ldr	r3, [pc, #36]	; (21058 <emulationlib_open+0x2c>)
   21032:	447c      	add	r4, pc
   21034:	58e5      	ldr	r5, [r4, r3]
   21036:	682b      	ldr	r3, [r5, #0]
   21038:	b953      	cbnz	r3, 21050 <emulationlib_open+0x24>
   2103a:	f64a 609b 	movw	r0, #44699	; 0xae9b
   2103e:	f000 ffcc 	bl	21fda <OSL_Dll_OpenByAppliType>
   21042:	4b06      	ldr	r3, [pc, #24]	; (2105c <emulationlib_open+0x30>)
   21044:	58e3      	ldr	r3, [r4, r3]
   21046:	6018      	str	r0, [r3, #0]
   21048:	b110      	cbz	r0, 21050 <emulationlib_open+0x24>
   2104a:	4b05      	ldr	r3, [pc, #20]	; (21060 <emulationlib_open+0x34>)
   2104c:	58e3      	ldr	r3, [r4, r3]
   2104e:	602b      	str	r3, [r5, #0]
   21050:	6828      	ldr	r0, [r5, #0]
   21052:	bd38      	pop	{r3, r4, r5, pc}
   21054:	0000e0e2 	.word	0x0000e0e2
   21058:	000000ec 	.word	0x000000ec
   2105c:	000000f8 	.word	0x000000f8
   21060:	000000b8 	.word	0x000000b8

00021064 <emulationlib_close>:
   21064:	4b03      	ldr	r3, [pc, #12]	; (21074 <emulationlib_close+0x10>)
   21066:	4a04      	ldr	r2, [pc, #16]	; (21078 <emulationlib_close+0x14>)
   21068:	447b      	add	r3, pc
   2106a:	589b      	ldr	r3, [r3, r2]
   2106c:	6818      	ldr	r0, [r3, #0]
   2106e:	f000 bf74 	b.w	21f5a <OSL_Dll_Close>
   21072:	bf00      	nop
   21074:	0000e0ac 	.word	0x0000e0ac
   21078:	000000f8 	.word	0x000000f8

0002107c <function_name>:
   2107c:	495f4d54 	.word	0x495f4d54
   21080:	4374696e 	.word	0x4374696e
   21084:	65746e6f 	.word	0x65746e6f
   21088:	47657478 	.word	0x47657478
   2108c:	68706172 	.word	0x68706172
   21090:	65757169 	.word	0x65757169
   21094:	00          	.byte	0x00
   21095:	00          	.byte	0x00
   21096:	bf00      	nop

00021098 <TM_InitContexteGraphique>:
   21098:	b408      	push	{r3}
   2109a:	4b11      	ldr	r3, [pc, #68]	; (210e0 <.direct_call+0x8>)
   2109c:	681b      	ldr	r3, [r3, #0]
   2109e:	2b00      	cmp	r3, #0
   210a0:	d11a      	bne.n	210d8 <.direct_call>
   210a2:	b507      	push	{r0, r1, r2, lr}
   210a4:	f7fe fbd2 	bl	1f84c <extenslib_open>
   210a8:	2800      	cmp	r0, #0
   210aa:	d00b      	beq.n	210c4 <.bad_return>
   210ac:	4684      	mov	ip, r0
   210ae:	480d      	ldr	r0, [pc, #52]	; (210e4 <.direct_call+0xc>)
   210b0:	f000 f811 	bl	210d6 <.call_function>
   210b4:	2800      	cmp	r0, #0
   210b6:	d002      	beq.n	210be <.exit_return>
   210b8:	4909      	ldr	r1, [pc, #36]	; (210e0 <.direct_call+0x8>)
   210ba:	6008      	str	r0, [r1, #0]
   210bc:	e007      	b.n	210ce <.already_initialized>

000210be <.exit_return>:
   210be:	480a      	ldr	r0, [pc, #40]	; (210e8 <.direct_call+0x10>)
   210c0:	f7ff ff4a 	bl	20f58 <Telium_Exit>

000210c4 <.bad_return>:
   210c4:	bc0f      	pop	{r0, r1, r2, r3}
   210c6:	2000      	movs	r0, #0
   210c8:	469e      	mov	lr, r3
   210ca:	bc08      	pop	{r3}
   210cc:	4770      	bx	lr

000210ce <.already_initialized>:
   210ce:	4684      	mov	ip, r0
   210d0:	bc0f      	pop	{r0, r1, r2, r3}
   210d2:	469e      	mov	lr, r3
   210d4:	bc08      	pop	{r3}

000210d6 <.call_function>:
   210d6:	4760      	bx	ip

000210d8 <.direct_call>:
   210d8:	469c      	mov	ip, r3
   210da:	bc08      	pop	{r3}
   210dc:	4760      	bx	ip
   210de:	0000      	.short	0x0000
   210e0:	0002f9b4 	.word	0x0002f9b4
   210e4:	0002107c 	.word	0x0002107c
   210e8:	00000afb 	.word	0x00000afb

000210ec <Telium_Vfprintf>:
   210ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   210f0:	4680      	mov	r8, r0
   210f2:	460f      	mov	r7, r1
   210f4:	4616      	mov	r6, r2
   210f6:	f7fe fba9 	bl	1f84c <extenslib_open>
   210fa:	4604      	mov	r4, r0
   210fc:	b1a8      	cbz	r0, 2112a <Telium_Vfprintf+0x3e>
   210fe:	4d0c      	ldr	r5, [pc, #48]	; (21130 <Telium_Vfprintf+0x44>)
   21100:	447d      	add	r5, pc
   21102:	682b      	ldr	r3, [r5, #0]
   21104:	b91b      	cbnz	r3, 2110e <Telium_Vfprintf+0x22>
   21106:	480b      	ldr	r0, [pc, #44]	; (21134 <Telium_Vfprintf+0x48>)
   21108:	4478      	add	r0, pc
   2110a:	47a0      	blx	r4
   2110c:	6028      	str	r0, [r5, #0]
   2110e:	4b0a      	ldr	r3, [pc, #40]	; (21138 <Telium_Vfprintf+0x4c>)
   21110:	447b      	add	r3, pc
   21112:	681c      	ldr	r4, [r3, #0]
   21114:	b12c      	cbz	r4, 21122 <Telium_Vfprintf+0x36>
   21116:	4640      	mov	r0, r8
   21118:	4639      	mov	r1, r7
   2111a:	4632      	mov	r2, r6
   2111c:	47a0      	blx	r4
   2111e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21122:	f640 3031 	movw	r0, #2865	; 0xb31
   21126:	f7ff ff17 	bl	20f58 <Telium_Exit>
   2112a:	4620      	mov	r0, r4
   2112c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21130:	0000ef20 	.word	0x0000ef20
   21134:	000051c4 	.word	0x000051c4
   21138:	0000ef10 	.word	0x0000ef10

0002113c <GetProcAddressTools>:
   2113c:	4b05      	ldr	r3, [pc, #20]	; (21154 <GetProcAddressTools+0x18>)
   2113e:	4a06      	ldr	r2, [pc, #24]	; (21158 <GetProcAddressTools+0x1c>)
   21140:	447b      	add	r3, pc
   21142:	4601      	mov	r1, r0
   21144:	589b      	ldr	r3, [r3, r2]
   21146:	6818      	ldr	r0, [r3, #0]
   21148:	b110      	cbz	r0, 21150 <GetProcAddressTools+0x14>
   2114a:	b109      	cbz	r1, 21150 <GetProcAddressTools+0x14>
   2114c:	f000 bf15 	b.w	21f7a <OSL_Dll_GetSymbolByName>
   21150:	2000      	movs	r0, #0
   21152:	4770      	bx	lr
   21154:	0000dfd4 	.word	0x0000dfd4
   21158:	000000c4 	.word	0x000000c4

0002115c <toolslib_open>:
   2115c:	b538      	push	{r3, r4, r5, lr}
   2115e:	4c0b      	ldr	r4, [pc, #44]	; (2118c <toolslib_open+0x30>)
   21160:	4b0b      	ldr	r3, [pc, #44]	; (21190 <toolslib_open+0x34>)
   21162:	447c      	add	r4, pc
   21164:	58e5      	ldr	r5, [r4, r3]
   21166:	682b      	ldr	r3, [r5, #0]
   21168:	b973      	cbnz	r3, 21188 <toolslib_open+0x2c>
   2116a:	f64a 604e 	movw	r0, #44622	; 0xae4e
   2116e:	f000 ff34 	bl	21fda <OSL_Dll_OpenByAppliType>
   21172:	4b08      	ldr	r3, [pc, #32]	; (21194 <toolslib_open+0x38>)
   21174:	58e3      	ldr	r3, [r4, r3]
   21176:	6018      	str	r0, [r3, #0]
   21178:	b130      	cbz	r0, 21188 <toolslib_open+0x2c>
   2117a:	4b07      	ldr	r3, [pc, #28]	; (21198 <toolslib_open+0x3c>)
   2117c:	4807      	ldr	r0, [pc, #28]	; (2119c <toolslib_open+0x40>)
   2117e:	58e3      	ldr	r3, [r4, r3]
   21180:	4478      	add	r0, pc
   21182:	602b      	str	r3, [r5, #0]
   21184:	f7ff ffda 	bl	2113c <GetProcAddressTools>
   21188:	6828      	ldr	r0, [r5, #0]
   2118a:	bd38      	pop	{r3, r4, r5, pc}
   2118c:	0000dfb2 	.word	0x0000dfb2
   21190:	000000a4 	.word	0x000000a4
   21194:	000000c4 	.word	0x000000c4
   21198:	000000e8 	.word	0x000000e8
   2119c:	00005144 	.word	0x00005144

000211a0 <toolslib_close>:
   211a0:	4b03      	ldr	r3, [pc, #12]	; (211b0 <toolslib_close+0x10>)
   211a2:	4a04      	ldr	r2, [pc, #16]	; (211b4 <toolslib_close+0x14>)
   211a4:	447b      	add	r3, pc
   211a6:	589b      	ldr	r3, [r3, r2]
   211a8:	6818      	ldr	r0, [r3, #0]
   211aa:	f000 bed6 	b.w	21f5a <OSL_Dll_Close>
   211ae:	bf00      	nop
   211b0:	0000df70 	.word	0x0000df70
   211b4:	000000c4 	.word	0x000000c4

000211b8 <GetProcAddressWrapper>:
   211b8:	4b05      	ldr	r3, [pc, #20]	; (211d0 <GetProcAddressWrapper+0x18>)
   211ba:	4a06      	ldr	r2, [pc, #24]	; (211d4 <GetProcAddressWrapper+0x1c>)
   211bc:	447b      	add	r3, pc
   211be:	4601      	mov	r1, r0
   211c0:	589b      	ldr	r3, [r3, r2]
   211c2:	6818      	ldr	r0, [r3, #0]
   211c4:	b110      	cbz	r0, 211cc <GetProcAddressWrapper+0x14>
   211c6:	b109      	cbz	r1, 211cc <GetProcAddressWrapper+0x14>
   211c8:	f000 bed7 	b.w	21f7a <OSL_Dll_GetSymbolByName>
   211cc:	2000      	movs	r0, #0
   211ce:	4770      	bx	lr
   211d0:	0000df58 	.word	0x0000df58
   211d4:	000000bc 	.word	0x000000bc

000211d8 <wrapperlib_open>:
   211d8:	b538      	push	{r3, r4, r5, lr}
   211da:	4c09      	ldr	r4, [pc, #36]	; (21200 <wrapperlib_open+0x28>)
   211dc:	4b09      	ldr	r3, [pc, #36]	; (21204 <wrapperlib_open+0x2c>)
   211de:	447c      	add	r4, pc
   211e0:	58e5      	ldr	r5, [r4, r3]
   211e2:	682b      	ldr	r3, [r5, #0]
   211e4:	b953      	cbnz	r3, 211fc <wrapperlib_open+0x24>
   211e6:	f64a 6012 	movw	r0, #44562	; 0xae12
   211ea:	f000 fef6 	bl	21fda <OSL_Dll_OpenByAppliType>
   211ee:	4b06      	ldr	r3, [pc, #24]	; (21208 <wrapperlib_open+0x30>)
   211f0:	58e3      	ldr	r3, [r4, r3]
   211f2:	6018      	str	r0, [r3, #0]
   211f4:	b110      	cbz	r0, 211fc <wrapperlib_open+0x24>
   211f6:	4b05      	ldr	r3, [pc, #20]	; (2120c <wrapperlib_open+0x34>)
   211f8:	58e3      	ldr	r3, [r4, r3]
   211fa:	602b      	str	r3, [r5, #0]
   211fc:	6828      	ldr	r0, [r5, #0]
   211fe:	bd38      	pop	{r3, r4, r5, pc}
   21200:	0000df36 	.word	0x0000df36
   21204:	000000dc 	.word	0x000000dc
   21208:	000000bc 	.word	0x000000bc
   2120c:	000000b0 	.word	0x000000b0

00021210 <wrapperlib_close>:
   21210:	4b03      	ldr	r3, [pc, #12]	; (21220 <wrapperlib_close+0x10>)
   21212:	4a04      	ldr	r2, [pc, #16]	; (21224 <wrapperlib_close+0x14>)
   21214:	447b      	add	r3, pc
   21216:	589b      	ldr	r3, [r3, r2]
   21218:	6818      	ldr	r0, [r3, #0]
   2121a:	f000 be9e 	b.w	21f5a <OSL_Dll_Close>
   2121e:	bf00      	nop
   21220:	0000df00 	.word	0x0000df00
   21224:	000000bc 	.word	0x000000bc

00021228 <SEC_ComputeMAC_Init>:
   21228:	b40f      	push	{r0, r1, r2, r3}
   2122a:	4805      	ldr	r0, [pc, #20]	; (21240 <SEC_ComputeMAC+0xe>)
   2122c:	4905      	ldr	r1, [pc, #20]	; (21244 <SEC_ComputeMAC+0x12>)
   2122e:	4a06      	ldr	r2, [pc, #24]	; (21248 <SEC_ComputeMAC+0x16>)
   21230:	4710      	bx	r2

00021232 <SEC_ComputeMAC>:
   21232:	b401      	push	{r0}
   21234:	4803      	ldr	r0, [pc, #12]	; (21244 <SEC_ComputeMAC+0x12>)
   21236:	6800      	ldr	r0, [r0, #0]
   21238:	4684      	mov	ip, r0
   2123a:	bc01      	pop	{r0}
   2123c:	4760      	bx	ip
   2123e:	0000      	.short	0x0000
   21240:	00002745 	.word	0x00002745
   21244:	0002f9c0 	.word	0x0002f9c0
   21248:	00021405 	.word	0x00021405

0002124c <SEC_GetConfig_Init>:
   2124c:	b40f      	push	{r0, r1, r2, r3}
   2124e:	4805      	ldr	r0, [pc, #20]	; (21264 <SEC_GetConfig+0xe>)
   21250:	4905      	ldr	r1, [pc, #20]	; (21268 <SEC_GetConfig+0x12>)
   21252:	4a06      	ldr	r2, [pc, #24]	; (2126c <SEC_GetConfig+0x16>)
   21254:	4710      	bx	r2

00021256 <SEC_GetConfig>:
   21256:	b401      	push	{r0}
   21258:	4803      	ldr	r0, [pc, #12]	; (21268 <SEC_GetConfig+0x12>)
   2125a:	6800      	ldr	r0, [r0, #0]
   2125c:	4684      	mov	ip, r0
   2125e:	bc01      	pop	{r0}
   21260:	4760      	bx	ip
   21262:	0000      	.short	0x0000
   21264:	00002730 	.word	0x00002730
   21268:	0002f9d0 	.word	0x0002f9d0
   2126c:	00021405 	.word	0x00021405

00021270 <SEC_Iso9564_Init>:
   21270:	b40f      	push	{r0, r1, r2, r3}
   21272:	4805      	ldr	r0, [pc, #20]	; (21288 <SEC_Iso9564+0xe>)
   21274:	4905      	ldr	r1, [pc, #20]	; (2128c <SEC_Iso9564+0x12>)
   21276:	4a06      	ldr	r2, [pc, #24]	; (21290 <SEC_Iso9564+0x16>)
   21278:	4710      	bx	r2

0002127a <SEC_Iso9564>:
   2127a:	b401      	push	{r0}
   2127c:	4803      	ldr	r0, [pc, #12]	; (2128c <SEC_Iso9564+0x12>)
   2127e:	6800      	ldr	r0, [r0, #0]
   21280:	4684      	mov	ip, r0
   21282:	bc01      	pop	{r0}
   21284:	4760      	bx	ip
   21286:	0000      	.short	0x0000
   21288:	00002738 	.word	0x00002738
   2128c:	0002f9e0 	.word	0x0002f9e0
   21290:	00021405 	.word	0x00021405

00021294 <SEC_isSecretArea_Init>:
   21294:	b40f      	push	{r0, r1, r2, r3}
   21296:	4805      	ldr	r0, [pc, #20]	; (212ac <SEC_isSecretArea+0xe>)
   21298:	4905      	ldr	r1, [pc, #20]	; (212b0 <SEC_isSecretArea+0x12>)
   2129a:	4a06      	ldr	r2, [pc, #24]	; (212b4 <SEC_isSecretArea+0x16>)
   2129c:	4710      	bx	r2

0002129e <SEC_isSecretArea>:
   2129e:	b401      	push	{r0}
   212a0:	4803      	ldr	r0, [pc, #12]	; (212b0 <SEC_isSecretArea+0x12>)
   212a2:	6800      	ldr	r0, [r0, #0]
   212a4:	4684      	mov	ip, r0
   212a6:	bc01      	pop	{r0}
   212a8:	4760      	bx	ip
   212aa:	0000      	.short	0x0000
   212ac:	00002733 	.word	0x00002733
   212b0:	0002f9f0 	.word	0x0002f9f0
   212b4:	00021405 	.word	0x00021405

000212b8 <SEC_KeyVerify_Init>:
   212b8:	b40f      	push	{r0, r1, r2, r3}
   212ba:	4805      	ldr	r0, [pc, #20]	; (212d0 <SEC_KeyVerify+0xe>)
   212bc:	4905      	ldr	r1, [pc, #20]	; (212d4 <SEC_KeyVerify+0x12>)
   212be:	4a06      	ldr	r2, [pc, #24]	; (212d8 <SEC_KeyVerify+0x16>)
   212c0:	4710      	bx	r2

000212c2 <SEC_KeyVerify>:
   212c2:	b401      	push	{r0}
   212c4:	4803      	ldr	r0, [pc, #12]	; (212d4 <SEC_KeyVerify+0x12>)
   212c6:	6800      	ldr	r0, [r0, #0]
   212c8:	4684      	mov	ip, r0
   212ca:	bc01      	pop	{r0}
   212cc:	4760      	bx	ip
   212ce:	0000      	.short	0x0000
   212d0:	00002748 	.word	0x00002748
   212d4:	0002fa00 	.word	0x0002fa00
   212d8:	00021405 	.word	0x00021405

000212dc <SEC_listSecureId_Init>:
   212dc:	b40f      	push	{r0, r1, r2, r3}
   212de:	4805      	ldr	r0, [pc, #20]	; (212f4 <SEC_listSecureId+0xe>)
   212e0:	4905      	ldr	r1, [pc, #20]	; (212f8 <SEC_listSecureId+0x12>)
   212e2:	4a06      	ldr	r2, [pc, #24]	; (212fc <SEC_listSecureId+0x16>)
   212e4:	4710      	bx	r2

000212e6 <SEC_listSecureId>:
   212e6:	b401      	push	{r0}
   212e8:	4803      	ldr	r0, [pc, #12]	; (212f8 <SEC_listSecureId+0x12>)
   212ea:	6800      	ldr	r0, [r0, #0]
   212ec:	4684      	mov	ip, r0
   212ee:	bc01      	pop	{r0}
   212f0:	4760      	bx	ip
   212f2:	0000      	.short	0x0000
   212f4:	00002732 	.word	0x00002732
   212f8:	0002fa10 	.word	0x0002fa10
   212fc:	00021405 	.word	0x00021405

00021300 <SEC_listTLVKeys_Init>:
   21300:	b40f      	push	{r0, r1, r2, r3}
   21302:	4805      	ldr	r0, [pc, #20]	; (21318 <SEC_listTLVKeys+0xe>)
   21304:	4905      	ldr	r1, [pc, #20]	; (2131c <SEC_listTLVKeys+0x12>)
   21306:	4a06      	ldr	r2, [pc, #24]	; (21320 <SEC_listTLVKeys+0x16>)
   21308:	4710      	bx	r2

0002130a <SEC_listTLVKeys>:
   2130a:	b401      	push	{r0}
   2130c:	4803      	ldr	r0, [pc, #12]	; (2131c <SEC_listTLVKeys+0x12>)
   2130e:	6800      	ldr	r0, [r0, #0]
   21310:	4684      	mov	ip, r0
   21312:	bc01      	pop	{r0}
   21314:	4760      	bx	ip
   21316:	0000      	.short	0x0000
   21318:	00002750 	.word	0x00002750
   2131c:	0002fa20 	.word	0x0002fa20
   21320:	00021405 	.word	0x00021405

00021324 <SEC_LoadKey_Init>:
   21324:	b40f      	push	{r0, r1, r2, r3}
   21326:	4805      	ldr	r0, [pc, #20]	; (2133c <SEC_LoadKey+0xe>)
   21328:	4905      	ldr	r1, [pc, #20]	; (21340 <SEC_LoadKey+0x12>)
   2132a:	4a06      	ldr	r2, [pc, #24]	; (21344 <SEC_LoadKey+0x16>)
   2132c:	4710      	bx	r2

0002132e <SEC_LoadKey>:
   2132e:	b401      	push	{r0}
   21330:	4803      	ldr	r0, [pc, #12]	; (21340 <SEC_LoadKey+0x12>)
   21332:	6800      	ldr	r0, [r0, #0]
   21334:	4684      	mov	ip, r0
   21336:	bc01      	pop	{r0}
   21338:	4760      	bx	ip
   2133a:	0000      	.short	0x0000
   2133c:	00002735 	.word	0x00002735
   21340:	0002fa30 	.word	0x0002fa30
   21344:	00021405 	.word	0x00021405

00021348 <SEC_PinEntry_Init>:
   21348:	b40f      	push	{r0, r1, r2, r3}
   2134a:	4805      	ldr	r0, [pc, #20]	; (21360 <SEC_PinEntry+0xe>)
   2134c:	4905      	ldr	r1, [pc, #20]	; (21364 <SEC_PinEntry+0x12>)
   2134e:	4a06      	ldr	r2, [pc, #24]	; (21368 <SEC_PinEntry+0x16>)
   21350:	4710      	bx	r2

00021352 <SEC_PinEntry>:
   21352:	b401      	push	{r0}
   21354:	4803      	ldr	r0, [pc, #12]	; (21364 <SEC_PinEntry+0x12>)
   21356:	6800      	ldr	r0, [r0, #0]
   21358:	4684      	mov	ip, r0
   2135a:	bc01      	pop	{r0}
   2135c:	4760      	bx	ip
   2135e:	0000      	.short	0x0000
   21360:	00002737 	.word	0x00002737
   21364:	0002fa40 	.word	0x0002fa40
   21368:	00021405 	.word	0x00021405

0002136c <SEC_PinEntryInit_Init>:
   2136c:	b40f      	push	{r0, r1, r2, r3}
   2136e:	4805      	ldr	r0, [pc, #20]	; (21384 <SEC_PinEntryInit+0xe>)
   21370:	4905      	ldr	r1, [pc, #20]	; (21388 <SEC_PinEntryInit+0x12>)
   21372:	4a06      	ldr	r2, [pc, #24]	; (2138c <SEC_PinEntryInit+0x16>)
   21374:	4710      	bx	r2

00021376 <SEC_PinEntryInit>:
   21376:	b401      	push	{r0}
   21378:	4803      	ldr	r0, [pc, #12]	; (21388 <SEC_PinEntryInit+0x12>)
   2137a:	6800      	ldr	r0, [r0, #0]
   2137c:	4684      	mov	ip, r0
   2137e:	bc01      	pop	{r0}
   21380:	4760      	bx	ip
   21382:	0000      	.short	0x0000
   21384:	00002736 	.word	0x00002736
   21388:	0002fa50 	.word	0x0002fa50
   2138c:	00021405 	.word	0x00021405

00021390 <SEC_SetConfig_Init>:
   21390:	b40f      	push	{r0, r1, r2, r3}
   21392:	4805      	ldr	r0, [pc, #20]	; (213a8 <SEC_SetConfig+0xe>)
   21394:	4905      	ldr	r1, [pc, #20]	; (213ac <SEC_SetConfig+0x12>)
   21396:	4a06      	ldr	r2, [pc, #24]	; (213b0 <SEC_SetConfig+0x16>)
   21398:	4710      	bx	r2

0002139a <SEC_SetConfig>:
   2139a:	b401      	push	{r0}
   2139c:	4803      	ldr	r0, [pc, #12]	; (213ac <SEC_SetConfig+0x12>)
   2139e:	6800      	ldr	r0, [r0, #0]
   213a0:	4684      	mov	ip, r0
   213a2:	bc01      	pop	{r0}
   213a4:	4760      	bx	ip
   213a6:	0000      	.short	0x0000
   213a8:	0000272f 	.word	0x0000272f
   213ac:	0002fa60 	.word	0x0002fa60
   213b0:	00021405 	.word	0x00021405

000213b4 <SEClib_Version>:
   213b4:	4800      	ldr	r0, [pc, #0]	; (213b8 <SEClib_Version+0x4>)
   213b6:	4770      	bx	lr
   213b8:	00050400 	.word	0x00050400

000213bc <SEClib_Open>:
   213bc:	b510      	push	{r4, lr}
   213be:	4c08      	ldr	r4, [pc, #32]	; (213e0 <SEClib_Open+0x24>)
   213c0:	447c      	add	r4, pc
   213c2:	6823      	ldr	r3, [r4, #0]
   213c4:	b94b      	cbnz	r3, 213da <SEClib_Open+0x1e>
   213c6:	4807      	ldr	r0, [pc, #28]	; (213e4 <SEClib_Open+0x28>)
   213c8:	4478      	add	r0, pc
   213ca:	f000 fdf6 	bl	21fba <OSL_Dll_Open>
   213ce:	6020      	str	r0, [r4, #0]
   213d0:	f1d0 0001 	rsbs	r0, r0, #1
   213d4:	bf38      	it	cc
   213d6:	2000      	movcc	r0, #0
   213d8:	bd10      	pop	{r4, pc}
   213da:	2000      	movs	r0, #0
   213dc:	bd10      	pop	{r4, pc}
   213de:	bf00      	nop
   213e0:	0000ec74 	.word	0x0000ec74
   213e4:	00004f14 	.word	0x00004f14

000213e8 <SEClib_Close>:
   213e8:	b510      	push	{r4, lr}
   213ea:	4c04      	ldr	r4, [pc, #16]	; (213fc <SEClib_Close+0x14>)
   213ec:	447c      	add	r4, pc
   213ee:	6820      	ldr	r0, [r4, #0]
   213f0:	b118      	cbz	r0, 213fa <SEClib_Close+0x12>
   213f2:	f000 fdb2 	bl	21f5a <OSL_Dll_Close>
   213f6:	2300      	movs	r3, #0
   213f8:	6023      	str	r3, [r4, #0]
   213fa:	bd10      	pop	{r4, pc}
   213fc:	0000ec48 	.word	0x0000ec48

00021400 <LIBSEC_IsPresent>:
   21400:	f000 b84c 	b.w	2149c <LIBSECV2_IsPresent>

00021404 <LIBSECV2_InitFuncAndBranch>:
   21404:	b500      	push	{lr}
   21406:	f000 f835 	bl	21474 <LIBSECV2_GetProcAddress>
   2140a:	bc04      	pop	{r2}
   2140c:	4696      	mov	lr, r2
   2140e:	4684      	mov	ip, r0
   21410:	bc0f      	pop	{r0, r1, r2, r3}
   21412:	4760      	bx	ip

00021414 <LIBSECV2_GetProcAddressWithoutExit>:
   21414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21416:	4c13      	ldr	r4, [pc, #76]	; (21464 <LIBSECV2_GetProcAddressWithoutExit+0x50>)
   21418:	4607      	mov	r7, r0
   2141a:	447c      	add	r4, pc
   2141c:	460d      	mov	r5, r1
   2141e:	6823      	ldr	r3, [r4, #0]
   21420:	b923      	cbnz	r3, 2142c <LIBSECV2_GetProcAddressWithoutExit+0x18>
   21422:	4811      	ldr	r0, [pc, #68]	; (21468 <LIBSECV2_GetProcAddressWithoutExit+0x54>)
   21424:	4478      	add	r0, pc
   21426:	f000 fdc8 	bl	21fba <OSL_Dll_Open>
   2142a:	6020      	str	r0, [r4, #0]
   2142c:	4e0f      	ldr	r6, [pc, #60]	; (2146c <LIBSECV2_GetProcAddressWithoutExit+0x58>)
   2142e:	447e      	add	r6, pc
   21430:	6834      	ldr	r4, [r6, #0]
   21432:	b95c      	cbnz	r4, 2144c <LIBSECV2_GetProcAddressWithoutExit+0x38>
   21434:	4b0e      	ldr	r3, [pc, #56]	; (21470 <LIBSECV2_GetProcAddressWithoutExit+0x5c>)
   21436:	2003      	movs	r0, #3
   21438:	447b      	add	r3, pc
   2143a:	9400      	str	r4, [sp, #0]
   2143c:	9301      	str	r3, [sp, #4]
   2143e:	4621      	mov	r1, r4
   21440:	4622      	mov	r2, r4
   21442:	4623      	mov	r3, r4
   21444:	f7e7 ebfe 	blx	8c44 <_init+0xe4>
   21448:	4620      	mov	r0, r4
   2144a:	e005      	b.n	21458 <LIBSECV2_GetProcAddressWithoutExit+0x44>
   2144c:	4620      	mov	r0, r4
   2144e:	4639      	mov	r1, r7
   21450:	f000 fd93 	bl	21f7a <OSL_Dll_GetSymbolByName>
   21454:	2301      	movs	r3, #1
   21456:	6073      	str	r3, [r6, #4]
   21458:	b115      	cbz	r5, 21460 <LIBSECV2_GetProcAddressWithoutExit+0x4c>
   2145a:	682b      	ldr	r3, [r5, #0]
   2145c:	b103      	cbz	r3, 21460 <LIBSECV2_GetProcAddressWithoutExit+0x4c>
   2145e:	6028      	str	r0, [r5, #0]
   21460:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   21462:	bf00      	nop
   21464:	0000ec1e 	.word	0x0000ec1e
   21468:	00004eb8 	.word	0x00004eb8
   2146c:	0000ec0a 	.word	0x0000ec0a
   21470:	00004ead 	.word	0x00004ead

00021474 <LIBSECV2_GetProcAddress>:
   21474:	b513      	push	{r0, r1, r4, lr}
   21476:	f7ff ffcd 	bl	21414 <LIBSECV2_GetProcAddressWithoutExit>
   2147a:	4604      	mov	r4, r0
   2147c:	b948      	cbnz	r0, 21492 <LIBSECV2_GetProcAddress+0x1e>
   2147e:	4b06      	ldr	r3, [pc, #24]	; (21498 <LIBSECV2_GetProcAddress+0x24>)
   21480:	9000      	str	r0, [sp, #0]
   21482:	447b      	add	r3, pc
   21484:	2003      	movs	r0, #3
   21486:	9301      	str	r3, [sp, #4]
   21488:	4621      	mov	r1, r4
   2148a:	4622      	mov	r2, r4
   2148c:	4623      	mov	r3, r4
   2148e:	f7e7 ebda 	blx	8c44 <_init+0xe4>
   21492:	4620      	mov	r0, r4
   21494:	bd1c      	pop	{r2, r3, r4, pc}
   21496:	bf00      	nop
   21498:	00004e7b 	.word	0x00004e7b

0002149c <LIBSECV2_IsPresent>:
   2149c:	4802      	ldr	r0, [pc, #8]	; (214a8 <LIBSECV2_IsPresent+0xc>)
   2149e:	b508      	push	{r3, lr}
   214a0:	4478      	add	r0, pc
   214a2:	f000 fd7a 	bl	21f9a <OSL_Dll_IsPresent>
   214a6:	bd08      	pop	{r3, pc}
   214a8:	00004e3c 	.word	0x00004e3c

000214ac <GL_Button_Create_Init>:
   214ac:	b40f      	push	{r0, r1, r2, r3}
   214ae:	4805      	ldr	r0, [pc, #20]	; (214c4 <GL_Button_Create+0xc>)
   214b0:	2100      	movs	r1, #0
   214b2:	4a05      	ldr	r2, [pc, #20]	; (214c8 <GL_Button_Create+0x10>)
   214b4:	4b05      	ldr	r3, [pc, #20]	; (214cc <GL_Button_Create+0x14>)
   214b6:	4718      	bx	r3

000214b8 <GL_Button_Create>:
   214b8:	b401      	push	{r0}
   214ba:	4803      	ldr	r0, [pc, #12]	; (214c8 <GL_Button_Create+0x10>)
   214bc:	6800      	ldr	r0, [r0, #0]
   214be:	4684      	mov	ip, r0
   214c0:	bc01      	pop	{r0}
   214c2:	4760      	bx	ip
   214c4:	00002720 	.word	0x00002720
   214c8:	0002fa70 	.word	0x0002fa70
   214cc:	00021f25 	.word	0x00021f25

000214d0 <GL_Dialog_Choice_Init>:
   214d0:	b40f      	push	{r0, r1, r2, r3}
   214d2:	4805      	ldr	r0, [pc, #20]	; (214e8 <GL_Dialog_Choice+0xc>)
   214d4:	2100      	movs	r1, #0
   214d6:	4a05      	ldr	r2, [pc, #20]	; (214ec <GL_Dialog_Choice+0x10>)
   214d8:	4b05      	ldr	r3, [pc, #20]	; (214f0 <GL_Dialog_Choice+0x14>)
   214da:	4718      	bx	r3

000214dc <GL_Dialog_Choice>:
   214dc:	b401      	push	{r0}
   214de:	4803      	ldr	r0, [pc, #12]	; (214ec <GL_Dialog_Choice+0x10>)
   214e0:	6800      	ldr	r0, [r0, #0]
   214e2:	4684      	mov	ip, r0
   214e4:	bc01      	pop	{r0}
   214e6:	4760      	bx	ip
   214e8:	000027bb 	.word	0x000027bb
   214ec:	0002fa80 	.word	0x0002fa80
   214f0:	00021f25 	.word	0x00021f25

000214f4 <GL_Dialog_Menu_Init>:
   214f4:	b40f      	push	{r0, r1, r2, r3}
   214f6:	4805      	ldr	r0, [pc, #20]	; (2150c <GL_Dialog_Menu+0xc>)
   214f8:	2100      	movs	r1, #0
   214fa:	4a05      	ldr	r2, [pc, #20]	; (21510 <GL_Dialog_Menu+0x10>)
   214fc:	4b05      	ldr	r3, [pc, #20]	; (21514 <GL_Dialog_Menu+0x14>)
   214fe:	4718      	bx	r3

00021500 <GL_Dialog_Menu>:
   21500:	b401      	push	{r0}
   21502:	4803      	ldr	r0, [pc, #12]	; (21510 <GL_Dialog_Menu+0x10>)
   21504:	6800      	ldr	r0, [r0, #0]
   21506:	4684      	mov	ip, r0
   21508:	bc01      	pop	{r0}
   2150a:	4760      	bx	ip
   2150c:	000027bd 	.word	0x000027bd
   21510:	0002fa90 	.word	0x0002fa90
   21514:	00021f25 	.word	0x00021f25

00021518 <GL_Dialog_Message_Init>:
   21518:	b40f      	push	{r0, r1, r2, r3}
   2151a:	4805      	ldr	r0, [pc, #20]	; (21530 <GL_Dialog_Message+0xc>)
   2151c:	2100      	movs	r1, #0
   2151e:	4a05      	ldr	r2, [pc, #20]	; (21534 <GL_Dialog_Message+0x10>)
   21520:	4b05      	ldr	r3, [pc, #20]	; (21538 <GL_Dialog_Message+0x14>)
   21522:	4718      	bx	r3

00021524 <GL_Dialog_Message>:
   21524:	b401      	push	{r0}
   21526:	4803      	ldr	r0, [pc, #12]	; (21534 <GL_Dialog_Message+0x10>)
   21528:	6800      	ldr	r0, [r0, #0]
   2152a:	4684      	mov	ip, r0
   2152c:	bc01      	pop	{r0}
   2152e:	4760      	bx	ip
   21530:	000027b6 	.word	0x000027b6
   21534:	0002faa0 	.word	0x0002faa0
   21538:	00021f25 	.word	0x00021f25

0002153c <GL_Dialog_Password_Init>:
   2153c:	b40f      	push	{r0, r1, r2, r3}
   2153e:	4805      	ldr	r0, [pc, #20]	; (21554 <GL_Dialog_Password+0xc>)
   21540:	2100      	movs	r1, #0
   21542:	4a05      	ldr	r2, [pc, #20]	; (21558 <GL_Dialog_Password+0x10>)
   21544:	4b05      	ldr	r3, [pc, #20]	; (2155c <GL_Dialog_Password+0x14>)
   21546:	4718      	bx	r3

00021548 <GL_Dialog_Password>:
   21548:	b401      	push	{r0}
   2154a:	4803      	ldr	r0, [pc, #12]	; (21558 <GL_Dialog_Password+0x10>)
   2154c:	6800      	ldr	r0, [r0, #0]
   2154e:	4684      	mov	ip, r0
   21550:	bc01      	pop	{r0}
   21552:	4760      	bx	ip
   21554:	00002804 	.word	0x00002804
   21558:	0002fab0 	.word	0x0002fab0
   2155c:	00021f25 	.word	0x00021f25

00021560 <GL_Dialog_Progress_Init>:
   21560:	b40f      	push	{r0, r1, r2, r3}
   21562:	4805      	ldr	r0, [pc, #20]	; (21578 <GL_Dialog_Progress+0xc>)
   21564:	2100      	movs	r1, #0
   21566:	4a05      	ldr	r2, [pc, #20]	; (2157c <GL_Dialog_Progress+0x10>)
   21568:	4b05      	ldr	r3, [pc, #20]	; (21580 <GL_Dialog_Progress+0x14>)
   2156a:	4718      	bx	r3

0002156c <GL_Dialog_Progress>:
   2156c:	b401      	push	{r0}
   2156e:	4803      	ldr	r0, [pc, #12]	; (2157c <GL_Dialog_Progress+0x10>)
   21570:	6800      	ldr	r0, [r0, #0]
   21572:	4684      	mov	ip, r0
   21574:	bc01      	pop	{r0}
   21576:	4760      	bx	ip
   21578:	000027df 	.word	0x000027df
   2157c:	0002fac0 	.word	0x0002fac0
   21580:	00021f25 	.word	0x00021f25

00021584 <GL_Dialog_Text_Init>:
   21584:	b40f      	push	{r0, r1, r2, r3}
   21586:	4805      	ldr	r0, [pc, #20]	; (2159c <GL_Dialog_Text+0xc>)
   21588:	2100      	movs	r1, #0
   2158a:	4a05      	ldr	r2, [pc, #20]	; (215a0 <GL_Dialog_Text+0x10>)
   2158c:	4b05      	ldr	r3, [pc, #20]	; (215a4 <GL_Dialog_Text+0x14>)
   2158e:	4718      	bx	r3

00021590 <GL_Dialog_Text>:
   21590:	b401      	push	{r0}
   21592:	4803      	ldr	r0, [pc, #12]	; (215a0 <GL_Dialog_Text+0x10>)
   21594:	6800      	ldr	r0, [r0, #0]
   21596:	4684      	mov	ip, r0
   21598:	bc01      	pop	{r0}
   2159a:	4760      	bx	ip
   2159c:	000027b8 	.word	0x000027b8
   215a0:	0002fad0 	.word	0x0002fad0
   215a4:	00021f25 	.word	0x00021f25

000215a8 <GL_Dialog_VirtualKeyboard_Init>:
   215a8:	b40f      	push	{r0, r1, r2, r3}
   215aa:	4805      	ldr	r0, [pc, #20]	; (215c0 <GL_Dialog_VirtualKeyboard+0xc>)
   215ac:	2100      	movs	r1, #0
   215ae:	4a05      	ldr	r2, [pc, #20]	; (215c4 <GL_Dialog_VirtualKeyboard+0x10>)
   215b0:	4b05      	ldr	r3, [pc, #20]	; (215c8 <GL_Dialog_VirtualKeyboard+0x14>)
   215b2:	4718      	bx	r3

000215b4 <GL_Dialog_VirtualKeyboard>:
   215b4:	b401      	push	{r0}
   215b6:	4803      	ldr	r0, [pc, #12]	; (215c4 <GL_Dialog_VirtualKeyboard+0x10>)
   215b8:	6800      	ldr	r0, [r0, #0]
   215ba:	4684      	mov	ip, r0
   215bc:	bc01      	pop	{r0}
   215be:	4760      	bx	ip
   215c0:	000027e0 	.word	0x000027e0
   215c4:	0002fae0 	.word	0x0002fae0
   215c8:	00021f25 	.word	0x00021f25

000215cc <GL_Document_Create_Init>:
   215cc:	b40f      	push	{r0, r1, r2, r3}
   215ce:	4805      	ldr	r0, [pc, #20]	; (215e4 <GL_Document_Create+0xc>)
   215d0:	2100      	movs	r1, #0
   215d2:	4a05      	ldr	r2, [pc, #20]	; (215e8 <GL_Document_Create+0x10>)
   215d4:	4b05      	ldr	r3, [pc, #20]	; (215ec <GL_Document_Create+0x14>)
   215d6:	4718      	bx	r3

000215d8 <GL_Document_Create>:
   215d8:	b401      	push	{r0}
   215da:	4803      	ldr	r0, [pc, #12]	; (215e8 <GL_Document_Create+0x10>)
   215dc:	6800      	ldr	r0, [r0, #0]
   215de:	4684      	mov	ip, r0
   215e0:	bc01      	pop	{r0}
   215e2:	4760      	bx	ip
   215e4:	000027ed 	.word	0x000027ed
   215e8:	0002faf0 	.word	0x0002faf0
   215ec:	00021f25 	.word	0x00021f25

000215f0 <GL_Document_Print_Init>:
   215f0:	b40f      	push	{r0, r1, r2, r3}
   215f2:	4805      	ldr	r0, [pc, #20]	; (21608 <GL_Document_Print+0xc>)
   215f4:	2100      	movs	r1, #0
   215f6:	4a05      	ldr	r2, [pc, #20]	; (2160c <GL_Document_Print+0x10>)
   215f8:	4b05      	ldr	r3, [pc, #20]	; (21610 <GL_Document_Print+0x14>)
   215fa:	4718      	bx	r3

000215fc <GL_Document_Print>:
   215fc:	b401      	push	{r0}
   215fe:	4803      	ldr	r0, [pc, #12]	; (2160c <GL_Document_Print+0x10>)
   21600:	6800      	ldr	r0, [r0, #0]
   21602:	4684      	mov	ip, r0
   21604:	bc01      	pop	{r0}
   21606:	4760      	bx	ip
   21608:	000027ee 	.word	0x000027ee
   2160c:	0002fb00 	.word	0x0002fb00
   21610:	00021f25 	.word	0x00021f25

00021614 <GL_Drawing_Clear_Init>:
   21614:	b40f      	push	{r0, r1, r2, r3}
   21616:	4805      	ldr	r0, [pc, #20]	; (2162c <GL_Drawing_Clear+0xc>)
   21618:	2100      	movs	r1, #0
   2161a:	4a05      	ldr	r2, [pc, #20]	; (21630 <GL_Drawing_Clear+0x10>)
   2161c:	4b05      	ldr	r3, [pc, #20]	; (21634 <GL_Drawing_Clear+0x14>)
   2161e:	4718      	bx	r3

00021620 <GL_Drawing_Clear>:
   21620:	b401      	push	{r0}
   21622:	4803      	ldr	r0, [pc, #12]	; (21630 <GL_Drawing_Clear+0x10>)
   21624:	6800      	ldr	r0, [r0, #0]
   21626:	4684      	mov	ip, r0
   21628:	bc01      	pop	{r0}
   2162a:	4760      	bx	ip
   2162c:	000027a5 	.word	0x000027a5
   21630:	0002fb10 	.word	0x0002fb10
   21634:	00021f25 	.word	0x00021f25

00021638 <GL_Drawing_Create_Init>:
   21638:	b40f      	push	{r0, r1, r2, r3}
   2163a:	4805      	ldr	r0, [pc, #20]	; (21650 <GL_Drawing_Create+0xc>)
   2163c:	2100      	movs	r1, #0
   2163e:	4a05      	ldr	r2, [pc, #20]	; (21654 <GL_Drawing_Create+0x10>)
   21640:	4b05      	ldr	r3, [pc, #20]	; (21658 <GL_Drawing_Create+0x14>)
   21642:	4718      	bx	r3

00021644 <GL_Drawing_Create>:
   21644:	b401      	push	{r0}
   21646:	4803      	ldr	r0, [pc, #12]	; (21654 <GL_Drawing_Create+0x10>)
   21648:	6800      	ldr	r0, [r0, #0]
   2164a:	4684      	mov	ip, r0
   2164c:	bc01      	pop	{r0}
   2164e:	4760      	bx	ip
   21650:	00002796 	.word	0x00002796
   21654:	0002fb20 	.word	0x0002fb20
   21658:	00021f25 	.word	0x00021f25

0002165c <GL_Drawing_DrawEllipse_Init>:
   2165c:	b40f      	push	{r0, r1, r2, r3}
   2165e:	4805      	ldr	r0, [pc, #20]	; (21674 <GL_Drawing_DrawEllipse+0xc>)
   21660:	2100      	movs	r1, #0
   21662:	4a05      	ldr	r2, [pc, #20]	; (21678 <GL_Drawing_DrawEllipse+0x10>)
   21664:	4b05      	ldr	r3, [pc, #20]	; (2167c <GL_Drawing_DrawEllipse+0x14>)
   21666:	4718      	bx	r3

00021668 <GL_Drawing_DrawEllipse>:
   21668:	b401      	push	{r0}
   2166a:	4803      	ldr	r0, [pc, #12]	; (21678 <GL_Drawing_DrawEllipse+0x10>)
   2166c:	6800      	ldr	r0, [r0, #0]
   2166e:	4684      	mov	ip, r0
   21670:	bc01      	pop	{r0}
   21672:	4760      	bx	ip
   21674:	0000279c 	.word	0x0000279c
   21678:	0002fb30 	.word	0x0002fb30
   2167c:	00021f25 	.word	0x00021f25

00021680 <GL_Drawing_DrawLine_Init>:
   21680:	b40f      	push	{r0, r1, r2, r3}
   21682:	4805      	ldr	r0, [pc, #20]	; (21698 <GL_Drawing_DrawLine+0xc>)
   21684:	2100      	movs	r1, #0
   21686:	4a05      	ldr	r2, [pc, #20]	; (2169c <GL_Drawing_DrawLine+0x10>)
   21688:	4b05      	ldr	r3, [pc, #20]	; (216a0 <GL_Drawing_DrawLine+0x14>)
   2168a:	4718      	bx	r3

0002168c <GL_Drawing_DrawLine>:
   2168c:	b401      	push	{r0}
   2168e:	4803      	ldr	r0, [pc, #12]	; (2169c <GL_Drawing_DrawLine+0x10>)
   21690:	6800      	ldr	r0, [r0, #0]
   21692:	4684      	mov	ip, r0
   21694:	bc01      	pop	{r0}
   21696:	4760      	bx	ip
   21698:	0000279a 	.word	0x0000279a
   2169c:	0002fb40 	.word	0x0002fb40
   216a0:	00021f25 	.word	0x00021f25

000216a4 <GL_Drawing_DrawRect_Init>:
   216a4:	b40f      	push	{r0, r1, r2, r3}
   216a6:	4805      	ldr	r0, [pc, #20]	; (216bc <GL_Drawing_DrawRect+0xc>)
   216a8:	2100      	movs	r1, #0
   216aa:	4a05      	ldr	r2, [pc, #20]	; (216c0 <GL_Drawing_DrawRect+0x10>)
   216ac:	4b05      	ldr	r3, [pc, #20]	; (216c4 <GL_Drawing_DrawRect+0x14>)
   216ae:	4718      	bx	r3

000216b0 <GL_Drawing_DrawRect>:
   216b0:	b401      	push	{r0}
   216b2:	4803      	ldr	r0, [pc, #12]	; (216c0 <GL_Drawing_DrawRect+0x10>)
   216b4:	6800      	ldr	r0, [r0, #0]
   216b6:	4684      	mov	ip, r0
   216b8:	bc01      	pop	{r0}
   216ba:	4760      	bx	ip
   216bc:	0000279b 	.word	0x0000279b
   216c0:	0002fb50 	.word	0x0002fb50
   216c4:	00021f25 	.word	0x00021f25

000216c8 <GL_Drawing_DrawText_Init>:
   216c8:	b40f      	push	{r0, r1, r2, r3}
   216ca:	4805      	ldr	r0, [pc, #20]	; (216e0 <GL_Drawing_DrawText+0xc>)
   216cc:	2100      	movs	r1, #0
   216ce:	4a05      	ldr	r2, [pc, #20]	; (216e4 <GL_Drawing_DrawText+0x10>)
   216d0:	4b05      	ldr	r3, [pc, #20]	; (216e8 <GL_Drawing_DrawText+0x14>)
   216d2:	4718      	bx	r3

000216d4 <GL_Drawing_DrawText>:
   216d4:	b401      	push	{r0}
   216d6:	4803      	ldr	r0, [pc, #12]	; (216e4 <GL_Drawing_DrawText+0x10>)
   216d8:	6800      	ldr	r0, [r0, #0]
   216da:	4684      	mov	ip, r0
   216dc:	bc01      	pop	{r0}
   216de:	4760      	bx	ip
   216e0:	0000279f 	.word	0x0000279f
   216e4:	0002fb60 	.word	0x0002fb60
   216e8:	00021f25 	.word	0x00021f25

000216ec <GL_Drawing_SetBrush_Init>:
   216ec:	b40f      	push	{r0, r1, r2, r3}
   216ee:	4805      	ldr	r0, [pc, #20]	; (21704 <GL_Drawing_SetBrush+0xc>)
   216f0:	2100      	movs	r1, #0
   216f2:	4a05      	ldr	r2, [pc, #20]	; (21708 <GL_Drawing_SetBrush+0x10>)
   216f4:	4b05      	ldr	r3, [pc, #20]	; (2170c <GL_Drawing_SetBrush+0x14>)
   216f6:	4718      	bx	r3

000216f8 <GL_Drawing_SetBrush>:
   216f8:	b401      	push	{r0}
   216fa:	4803      	ldr	r0, [pc, #12]	; (21708 <GL_Drawing_SetBrush+0x10>)
   216fc:	6800      	ldr	r0, [r0, #0]
   216fe:	4684      	mov	ip, r0
   21700:	bc01      	pop	{r0}
   21702:	4760      	bx	ip
   21704:	00002799 	.word	0x00002799
   21708:	0002fb70 	.word	0x0002fb70
   2170c:	00021f25 	.word	0x00021f25

00021710 <GL_Drawing_SetFont_Init>:
   21710:	b40f      	push	{r0, r1, r2, r3}
   21712:	4805      	ldr	r0, [pc, #20]	; (21728 <GL_Drawing_SetFont+0xc>)
   21714:	2100      	movs	r1, #0
   21716:	4a05      	ldr	r2, [pc, #20]	; (2172c <GL_Drawing_SetFont+0x10>)
   21718:	4b05      	ldr	r3, [pc, #20]	; (21730 <GL_Drawing_SetFont+0x14>)
   2171a:	4718      	bx	r3

0002171c <GL_Drawing_SetFont>:
   2171c:	b401      	push	{r0}
   2171e:	4803      	ldr	r0, [pc, #12]	; (2172c <GL_Drawing_SetFont+0x10>)
   21720:	6800      	ldr	r0, [r0, #0]
   21722:	4684      	mov	ip, r0
   21724:	bc01      	pop	{r0}
   21726:	4760      	bx	ip
   21728:	00002797 	.word	0x00002797
   2172c:	0002fb80 	.word	0x0002fb80
   21730:	00021f25 	.word	0x00021f25

00021734 <GL_Drawing_SetPen_Init>:
   21734:	b40f      	push	{r0, r1, r2, r3}
   21736:	4805      	ldr	r0, [pc, #20]	; (2174c <GL_Drawing_SetPen+0xc>)
   21738:	2100      	movs	r1, #0
   2173a:	4a05      	ldr	r2, [pc, #20]	; (21750 <GL_Drawing_SetPen+0x10>)
   2173c:	4b05      	ldr	r3, [pc, #20]	; (21754 <GL_Drawing_SetPen+0x14>)
   2173e:	4718      	bx	r3

00021740 <GL_Drawing_SetPen>:
   21740:	b401      	push	{r0}
   21742:	4803      	ldr	r0, [pc, #12]	; (21750 <GL_Drawing_SetPen+0x10>)
   21744:	6800      	ldr	r0, [r0, #0]
   21746:	4684      	mov	ip, r0
   21748:	bc01      	pop	{r0}
   2174a:	4760      	bx	ip
   2174c:	00002798 	.word	0x00002798
   21750:	0002fb90 	.word	0x0002fb90
   21754:	00021f25 	.word	0x00021f25

00021758 <GL_GraphicLib_BindSingleKey_Init>:
   21758:	b40f      	push	{r0, r1, r2, r3}
   2175a:	4805      	ldr	r0, [pc, #20]	; (21770 <GL_GraphicLib_BindSingleKey+0xc>)
   2175c:	2100      	movs	r1, #0
   2175e:	4a05      	ldr	r2, [pc, #20]	; (21774 <GL_GraphicLib_BindSingleKey+0x10>)
   21760:	4b05      	ldr	r3, [pc, #20]	; (21778 <GL_GraphicLib_BindSingleKey+0x14>)
   21762:	4718      	bx	r3

00021764 <GL_GraphicLib_BindSingleKey>:
   21764:	b401      	push	{r0}
   21766:	4803      	ldr	r0, [pc, #12]	; (21774 <GL_GraphicLib_BindSingleKey+0x10>)
   21768:	6800      	ldr	r0, [r0, #0]
   2176a:	4684      	mov	ip, r0
   2176c:	bc01      	pop	{r0}
   2176e:	4760      	bx	ip
   21770:	0000271b 	.word	0x0000271b
   21774:	0002fba0 	.word	0x0002fba0
   21778:	00021f25 	.word	0x00021f25

0002177c <GL_GraphicLib_Create>:
   2177c:	b538      	push	{r3, r4, r5, lr}
   2177e:	4b11      	ldr	r3, [pc, #68]	; (217c4 <GL_GraphicLib_Create+0x48>)
   21780:	4a11      	ldr	r2, [pc, #68]	; (217c8 <GL_GraphicLib_Create+0x4c>)
   21782:	447b      	add	r3, pc
   21784:	447a      	add	r2, pc
   21786:	6819      	ldr	r1, [r3, #0]
   21788:	b911      	cbnz	r1, 21790 <GL_GraphicLib_Create+0x14>
   2178a:	4910      	ldr	r1, [pc, #64]	; (217cc <GL_GraphicLib_Create+0x50>)
   2178c:	5852      	ldr	r2, [r2, r1]
   2178e:	601a      	str	r2, [r3, #0]
   21790:	4b0f      	ldr	r3, [pc, #60]	; (217d0 <GL_GraphicLib_Create+0x54>)
   21792:	447b      	add	r3, pc
   21794:	681c      	ldr	r4, [r3, #0]
   21796:	b19c      	cbz	r4, 217c0 <GL_GraphicLib_Create+0x44>
   21798:	4d0e      	ldr	r5, [pc, #56]	; (217d4 <GL_GraphicLib_Create+0x58>)
   2179a:	47a0      	blx	r4
   2179c:	447d      	add	r5, pc
   2179e:	4604      	mov	r4, r0
   217a0:	6829      	ldr	r1, [r5, #0]
   217a2:	b929      	cbnz	r1, 217b0 <GL_GraphicLib_Create+0x34>
   217a4:	f642 0082 	movw	r0, #10370	; 0x2882
   217a8:	460a      	mov	r2, r1
   217aa:	f000 fb75 	bl	21e98 <GL_GetProcAddressWithoutExit>
   217ae:	6028      	str	r0, [r5, #0]
   217b0:	4b09      	ldr	r3, [pc, #36]	; (217d8 <GL_GraphicLib_Create+0x5c>)
   217b2:	447b      	add	r3, pc
   217b4:	681b      	ldr	r3, [r3, #0]
   217b6:	b11b      	cbz	r3, 217c0 <GL_GraphicLib_Create+0x44>
   217b8:	4620      	mov	r0, r4
   217ba:	2106      	movs	r1, #6
   217bc:	220a      	movs	r2, #10
   217be:	4798      	blx	r3
   217c0:	4620      	mov	r0, r4
   217c2:	bd38      	pop	{r3, r4, r5, pc}
   217c4:	0000e42a 	.word	0x0000e42a
   217c8:	0000d990 	.word	0x0000d990
   217cc:	000000d8 	.word	0x000000d8
   217d0:	0000e41a 	.word	0x0000e41a
   217d4:	0000e8a4 	.word	0x0000e8a4
   217d8:	0000e88e 	.word	0x0000e88e

000217dc <GL_GraphicLib_Create_Init>:
   217dc:	2100      	movs	r1, #0
   217de:	b508      	push	{r3, lr}
   217e0:	460a      	mov	r2, r1
   217e2:	f242 7010 	movw	r0, #10000	; 0x2710
   217e6:	f000 fb57 	bl	21e98 <GL_GetProcAddressWithoutExit>
   217ea:	4b03      	ldr	r3, [pc, #12]	; (217f8 <GL_GraphicLib_Create_Init+0x1c>)
   217ec:	447b      	add	r3, pc
   217ee:	6018      	str	r0, [r3, #0]
   217f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   217f4:	f7ff bfc2 	b.w	2177c <GL_GraphicLib_Create>
   217f8:	0000e3c0 	.word	0x0000e3c0

000217fc <GL_GraphicLib_IsTouchPresent_Init>:
   217fc:	b40f      	push	{r0, r1, r2, r3}
   217fe:	4805      	ldr	r0, [pc, #20]	; (21814 <GL_GraphicLib_IsTouchPresent+0xc>)
   21800:	2100      	movs	r1, #0
   21802:	4a05      	ldr	r2, [pc, #20]	; (21818 <GL_GraphicLib_IsTouchPresent+0x10>)
   21804:	4b05      	ldr	r3, [pc, #20]	; (2181c <GL_GraphicLib_IsTouchPresent+0x14>)
   21806:	4718      	bx	r3

00021808 <GL_GraphicLib_IsTouchPresent>:
   21808:	b401      	push	{r0}
   2180a:	4803      	ldr	r0, [pc, #12]	; (21818 <GL_GraphicLib_IsTouchPresent+0x10>)
   2180c:	6800      	ldr	r0, [r0, #0]
   2180e:	4684      	mov	ip, r0
   21810:	bc01      	pop	{r0}
   21812:	4760      	bx	ip
   21814:	0000284d 	.word	0x0000284d
   21818:	0002fbc0 	.word	0x0002fbc0
   2181c:	00021f25 	.word	0x00021f25

00021820 <GL_GraphicLib_SetCharset_Init>:
   21820:	b40f      	push	{r0, r1, r2, r3}
   21822:	4805      	ldr	r0, [pc, #20]	; (21838 <GL_GraphicLib_SetCharset+0xc>)
   21824:	2100      	movs	r1, #0
   21826:	4a05      	ldr	r2, [pc, #20]	; (2183c <GL_GraphicLib_SetCharset+0x10>)
   21828:	4b05      	ldr	r3, [pc, #20]	; (21840 <GL_GraphicLib_SetCharset+0x14>)
   2182a:	4718      	bx	r3

0002182c <GL_GraphicLib_SetCharset>:
   2182c:	b401      	push	{r0}
   2182e:	4803      	ldr	r0, [pc, #12]	; (2183c <GL_GraphicLib_SetCharset+0x10>)
   21830:	6800      	ldr	r0, [r0, #0]
   21832:	4684      	mov	ip, r0
   21834:	bc01      	pop	{r0}
   21836:	4760      	bx	ip
   21838:	00002718 	.word	0x00002718
   2183c:	0002fbd0 	.word	0x0002fbd0
   21840:	00021f25 	.word	0x00021f25

00021844 <GL_GraphicLib_UnbindKey_Init>:
   21844:	b40f      	push	{r0, r1, r2, r3}
   21846:	4805      	ldr	r0, [pc, #20]	; (2185c <GL_GraphicLib_UnbindKey+0xc>)
   21848:	2100      	movs	r1, #0
   2184a:	4a05      	ldr	r2, [pc, #20]	; (21860 <GL_GraphicLib_UnbindKey+0x10>)
   2184c:	4b05      	ldr	r3, [pc, #20]	; (21864 <GL_GraphicLib_UnbindKey+0x14>)
   2184e:	4718      	bx	r3

00021850 <GL_GraphicLib_UnbindKey>:
   21850:	b401      	push	{r0}
   21852:	4803      	ldr	r0, [pc, #12]	; (21860 <GL_GraphicLib_UnbindKey+0x10>)
   21854:	6800      	ldr	r0, [r0, #0]
   21856:	4684      	mov	ip, r0
   21858:	bc01      	pop	{r0}
   2185a:	4760      	bx	ip
   2185c:	0000271c 	.word	0x0000271c
   21860:	0002fbe0 	.word	0x0002fbe0
   21864:	00021f25 	.word	0x00021f25

00021868 <GL_Label_Create_Init>:
   21868:	b40f      	push	{r0, r1, r2, r3}
   2186a:	4805      	ldr	r0, [pc, #20]	; (21880 <GL_Label_Create+0xc>)
   2186c:	2100      	movs	r1, #0
   2186e:	4a05      	ldr	r2, [pc, #20]	; (21884 <GL_Label_Create+0x10>)
   21870:	4b05      	ldr	r3, [pc, #20]	; (21888 <GL_Label_Create+0x14>)
   21872:	4718      	bx	r3

00021874 <GL_Label_Create>:
   21874:	b401      	push	{r0}
   21876:	4803      	ldr	r0, [pc, #12]	; (21884 <GL_Label_Create+0x10>)
   21878:	6800      	ldr	r0, [r0, #0]
   2187a:	4684      	mov	ip, r0
   2187c:	bc01      	pop	{r0}
   2187e:	4760      	bx	ip
   21880:	00002721 	.word	0x00002721
   21884:	0002fbf0 	.word	0x0002fbf0
   21888:	00021f25 	.word	0x00021f25

0002188c <GL_Layout_Create_Init>:
   2188c:	b40f      	push	{r0, r1, r2, r3}
   2188e:	4805      	ldr	r0, [pc, #20]	; (218a4 <GL_Layout_Create+0xc>)
   21890:	2100      	movs	r1, #0
   21892:	4a05      	ldr	r2, [pc, #20]	; (218a8 <GL_Layout_Create+0x10>)
   21894:	4b05      	ldr	r3, [pc, #20]	; (218ac <GL_Layout_Create+0x14>)
   21896:	4718      	bx	r3

00021898 <GL_Layout_Create>:
   21898:	b401      	push	{r0}
   2189a:	4803      	ldr	r0, [pc, #12]	; (218a8 <GL_Layout_Create+0x10>)
   2189c:	6800      	ldr	r0, [r0, #0]
   2189e:	4684      	mov	ip, r0
   218a0:	bc01      	pop	{r0}
   218a2:	4760      	bx	ip
   218a4:	00002722 	.word	0x00002722
   218a8:	0002fc00 	.word	0x0002fc00
   218ac:	00021f25 	.word	0x00021f25

000218b0 <GL_Message_GetKey_Init>:
   218b0:	b40f      	push	{r0, r1, r2, r3}
   218b2:	4805      	ldr	r0, [pc, #20]	; (218c8 <GL_Message_GetKey+0xc>)
   218b4:	2100      	movs	r1, #0
   218b6:	4a05      	ldr	r2, [pc, #20]	; (218cc <GL_Message_GetKey+0x10>)
   218b8:	4b05      	ldr	r3, [pc, #20]	; (218d0 <GL_Message_GetKey+0x14>)
   218ba:	4718      	bx	r3

000218bc <GL_Message_GetKey>:
   218bc:	b401      	push	{r0}
   218be:	4803      	ldr	r0, [pc, #12]	; (218cc <GL_Message_GetKey+0x10>)
   218c0:	6800      	ldr	r0, [r0, #0]
   218c2:	4684      	mov	ip, r0
   218c4:	bc01      	pop	{r0}
   218c6:	4760      	bx	ip
   218c8:	00002787 	.word	0x00002787
   218cc:	0002fc10 	.word	0x0002fc10
   218d0:	00021f25 	.word	0x00021f25

000218d4 <GL_Message_GetWidget_Init>:
   218d4:	b40f      	push	{r0, r1, r2, r3}
   218d6:	4805      	ldr	r0, [pc, #20]	; (218ec <GL_Message_GetWidget+0xc>)
   218d8:	2100      	movs	r1, #0
   218da:	4a05      	ldr	r2, [pc, #20]	; (218f0 <GL_Message_GetWidget+0x10>)
   218dc:	4b05      	ldr	r3, [pc, #20]	; (218f4 <GL_Message_GetWidget+0x14>)
   218de:	4718      	bx	r3

000218e0 <GL_Message_GetWidget>:
   218e0:	b401      	push	{r0}
   218e2:	4803      	ldr	r0, [pc, #12]	; (218f0 <GL_Message_GetWidget+0x10>)
   218e4:	6800      	ldr	r0, [r0, #0]
   218e6:	4684      	mov	ip, r0
   218e8:	bc01      	pop	{r0}
   218ea:	4760      	bx	ip
   218ec:	00002789 	.word	0x00002789
   218f0:	0002fc20 	.word	0x0002fc20
   218f4:	00021f25 	.word	0x00021f25

000218f8 <GL_Message_SetResult_Init>:
   218f8:	b40f      	push	{r0, r1, r2, r3}
   218fa:	4805      	ldr	r0, [pc, #20]	; (21910 <GL_Message_SetResult+0xc>)
   218fc:	2100      	movs	r1, #0
   218fe:	4a05      	ldr	r2, [pc, #20]	; (21914 <GL_Message_SetResult+0x10>)
   21900:	4b05      	ldr	r3, [pc, #20]	; (21918 <GL_Message_SetResult+0x14>)
   21902:	4718      	bx	r3

00021904 <GL_Message_SetResult>:
   21904:	b401      	push	{r0}
   21906:	4803      	ldr	r0, [pc, #12]	; (21914 <GL_Message_SetResult+0x10>)
   21908:	6800      	ldr	r0, [r0, #0]
   2190a:	4684      	mov	ip, r0
   2190c:	bc01      	pop	{r0}
   2190e:	4760      	bx	ip
   21910:	000027f5 	.word	0x000027f5
   21914:	0002fc30 	.word	0x0002fc30
   21918:	00021f25 	.word	0x00021f25

0002191c <GL_Message_SetUserData_Init>:
   2191c:	b40f      	push	{r0, r1, r2, r3}
   2191e:	4805      	ldr	r0, [pc, #20]	; (21934 <GL_Message_SetUserData+0xc>)
   21920:	2100      	movs	r1, #0
   21922:	4a05      	ldr	r2, [pc, #20]	; (21938 <GL_Message_SetUserData+0x10>)
   21924:	4b05      	ldr	r3, [pc, #20]	; (2193c <GL_Message_SetUserData+0x14>)
   21926:	4718      	bx	r3

00021928 <GL_Message_SetUserData>:
   21928:	b401      	push	{r0}
   2192a:	4803      	ldr	r0, [pc, #12]	; (21938 <GL_Message_SetUserData+0x10>)
   2192c:	6800      	ldr	r0, [r0, #0]
   2192e:	4684      	mov	ip, r0
   21930:	bc01      	pop	{r0}
   21932:	4760      	bx	ip
   21934:	000027f7 	.word	0x000027f7
   21938:	0002fc40 	.word	0x0002fc40
   2193c:	00021f25 	.word	0x00021f25

00021940 <GL_Picture_Create_Init>:
   21940:	b40f      	push	{r0, r1, r2, r3}
   21942:	4805      	ldr	r0, [pc, #20]	; (21958 <GL_Picture_Create+0xc>)
   21944:	2100      	movs	r1, #0
   21946:	4a05      	ldr	r2, [pc, #20]	; (2195c <GL_Picture_Create+0x10>)
   21948:	4b05      	ldr	r3, [pc, #20]	; (21960 <GL_Picture_Create+0x14>)
   2194a:	4718      	bx	r3

0002194c <GL_Picture_Create>:
   2194c:	b401      	push	{r0}
   2194e:	4803      	ldr	r0, [pc, #12]	; (2195c <GL_Picture_Create+0x10>)
   21950:	6800      	ldr	r0, [r0, #0]
   21952:	4684      	mov	ip, r0
   21954:	bc01      	pop	{r0}
   21956:	4760      	bx	ip
   21958:	00002723 	.word	0x00002723
   2195c:	0002fc50 	.word	0x0002fc50
   21960:	00021f25 	.word	0x00021f25

00021964 <GL_Print_Create_Init>:
   21964:	b40f      	push	{r0, r1, r2, r3}
   21966:	4805      	ldr	r0, [pc, #20]	; (2197c <GL_Print_Create+0xc>)
   21968:	2100      	movs	r1, #0
   2196a:	4a05      	ldr	r2, [pc, #20]	; (21980 <GL_Print_Create+0x10>)
   2196c:	4b05      	ldr	r3, [pc, #20]	; (21984 <GL_Print_Create+0x14>)
   2196e:	4718      	bx	r3

00021970 <GL_Print_Create>:
   21970:	b401      	push	{r0}
   21972:	4803      	ldr	r0, [pc, #12]	; (21980 <GL_Print_Create+0x10>)
   21974:	6800      	ldr	r0, [r0, #0]
   21976:	4684      	mov	ip, r0
   21978:	bc01      	pop	{r0}
   2197a:	4760      	bx	ip
   2197c:	00002812 	.word	0x00002812
   21980:	0002fc60 	.word	0x0002fc60
   21984:	00021f25 	.word	0x00021f25

00021988 <GL_Timer_Create_Init>:
   21988:	b40f      	push	{r0, r1, r2, r3}
   2198a:	4805      	ldr	r0, [pc, #20]	; (219a0 <GL_Timer_Create+0xc>)
   2198c:	2100      	movs	r1, #0
   2198e:	4a05      	ldr	r2, [pc, #20]	; (219a4 <GL_Timer_Create+0x10>)
   21990:	4b05      	ldr	r3, [pc, #20]	; (219a8 <GL_Timer_Create+0x14>)
   21992:	4718      	bx	r3

00021994 <GL_Timer_Create>:
   21994:	b401      	push	{r0}
   21996:	4803      	ldr	r0, [pc, #12]	; (219a4 <GL_Timer_Create+0x10>)
   21998:	6800      	ldr	r0, [r0, #0]
   2199a:	4684      	mov	ip, r0
   2199c:	bc01      	pop	{r0}
   2199e:	4760      	bx	ip
   219a0:	0000278d 	.word	0x0000278d
   219a4:	0002fc70 	.word	0x0002fc70
   219a8:	00021f25 	.word	0x00021f25

000219ac <GL_Timer_SetInterval_Init>:
   219ac:	b40f      	push	{r0, r1, r2, r3}
   219ae:	4805      	ldr	r0, [pc, #20]	; (219c4 <GL_Timer_SetInterval+0xc>)
   219b0:	2100      	movs	r1, #0
   219b2:	4a05      	ldr	r2, [pc, #20]	; (219c8 <GL_Timer_SetInterval+0x10>)
   219b4:	4b05      	ldr	r3, [pc, #20]	; (219cc <GL_Timer_SetInterval+0x14>)
   219b6:	4718      	bx	r3

000219b8 <GL_Timer_SetInterval>:
   219b8:	b401      	push	{r0}
   219ba:	4803      	ldr	r0, [pc, #12]	; (219c8 <GL_Timer_SetInterval+0x10>)
   219bc:	6800      	ldr	r0, [r0, #0]
   219be:	4684      	mov	ip, r0
   219c0:	bc01      	pop	{r0}
   219c2:	4760      	bx	ip
   219c4:	00002790 	.word	0x00002790
   219c8:	0002fc80 	.word	0x0002fc80
   219cc:	00021f25 	.word	0x00021f25

000219d0 <GL_Timer_Stop_Init>:
   219d0:	b40f      	push	{r0, r1, r2, r3}
   219d2:	4805      	ldr	r0, [pc, #20]	; (219e8 <GL_Timer_Stop+0xc>)
   219d4:	2100      	movs	r1, #0
   219d6:	4a05      	ldr	r2, [pc, #20]	; (219ec <GL_Timer_Stop+0x10>)
   219d8:	4b05      	ldr	r3, [pc, #20]	; (219f0 <GL_Timer_Stop+0x14>)
   219da:	4718      	bx	r3

000219dc <GL_Timer_Stop>:
   219dc:	b401      	push	{r0}
   219de:	4803      	ldr	r0, [pc, #12]	; (219ec <GL_Timer_Stop+0x10>)
   219e0:	6800      	ldr	r0, [r0, #0]
   219e2:	4684      	mov	ip, r0
   219e4:	bc01      	pop	{r0}
   219e6:	4760      	bx	ip
   219e8:	0000278f 	.word	0x0000278f
   219ec:	0002fc90 	.word	0x0002fc90
   219f0:	00021f25 	.word	0x00021f25

000219f4 <GL_Widget_Destroy_Init>:
   219f4:	b40f      	push	{r0, r1, r2, r3}
   219f6:	4805      	ldr	r0, [pc, #20]	; (21a0c <GL_Widget_Destroy+0xc>)
   219f8:	2100      	movs	r1, #0
   219fa:	4a05      	ldr	r2, [pc, #20]	; (21a10 <GL_Widget_Destroy+0x10>)
   219fc:	4b05      	ldr	r3, [pc, #20]	; (21a14 <GL_Widget_Destroy+0x14>)
   219fe:	4718      	bx	r3

00021a00 <GL_Widget_Destroy>:
   21a00:	b401      	push	{r0}
   21a02:	4803      	ldr	r0, [pc, #12]	; (21a10 <GL_Widget_Destroy+0x10>)
   21a04:	6800      	ldr	r0, [r0, #0]
   21a06:	4684      	mov	ip, r0
   21a08:	bc01      	pop	{r0}
   21a0a:	4760      	bx	ip
   21a0c:	00002739 	.word	0x00002739
   21a10:	0002fca0 	.word	0x0002fca0
   21a14:	00021f25 	.word	0x00021f25

00021a18 <GL_Widget_GetUserData_Init>:
   21a18:	b40f      	push	{r0, r1, r2, r3}
   21a1a:	4805      	ldr	r0, [pc, #20]	; (21a30 <GL_Widget_GetUserData+0xc>)
   21a1c:	2100      	movs	r1, #0
   21a1e:	4a05      	ldr	r2, [pc, #20]	; (21a34 <GL_Widget_GetUserData+0x10>)
   21a20:	4b05      	ldr	r3, [pc, #20]	; (21a38 <GL_Widget_GetUserData+0x14>)
   21a22:	4718      	bx	r3

00021a24 <GL_Widget_GetUserData>:
   21a24:	b401      	push	{r0}
   21a26:	4803      	ldr	r0, [pc, #12]	; (21a34 <GL_Widget_GetUserData+0x10>)
   21a28:	6800      	ldr	r0, [r0, #0]
   21a2a:	4684      	mov	ip, r0
   21a2c:	bc01      	pop	{r0}
   21a2e:	4760      	bx	ip
   21a30:	000027f0 	.word	0x000027f0
   21a34:	0002fcb0 	.word	0x0002fcb0
   21a38:	00021f25 	.word	0x00021f25

00021a3c <GL_Widget_RegisterCallback_Init>:
   21a3c:	b40f      	push	{r0, r1, r2, r3}
   21a3e:	4805      	ldr	r0, [pc, #20]	; (21a54 <GL_Widget_RegisterCallback+0xc>)
   21a40:	2100      	movs	r1, #0
   21a42:	4a05      	ldr	r2, [pc, #20]	; (21a58 <GL_Widget_RegisterCallback+0x10>)
   21a44:	4b05      	ldr	r3, [pc, #20]	; (21a5c <GL_Widget_RegisterCallback+0x14>)
   21a46:	4718      	bx	r3

00021a48 <GL_Widget_RegisterCallback>:
   21a48:	b401      	push	{r0}
   21a4a:	4803      	ldr	r0, [pc, #12]	; (21a58 <GL_Widget_RegisterCallback+0x10>)
   21a4c:	6800      	ldr	r0, [r0, #0]
   21a4e:	4684      	mov	ip, r0
   21a50:	bc01      	pop	{r0}
   21a52:	4760      	bx	ip
   21a54:	00002772 	.word	0x00002772
   21a58:	0002fcc0 	.word	0x0002fcc0
   21a5c:	00021f25 	.word	0x00021f25

00021a60 <GL_Widget_SearchId_Init>:
   21a60:	b40f      	push	{r0, r1, r2, r3}
   21a62:	4805      	ldr	r0, [pc, #20]	; (21a78 <GL_Widget_SearchId+0xc>)
   21a64:	2100      	movs	r1, #0
   21a66:	4a05      	ldr	r2, [pc, #20]	; (21a7c <GL_Widget_SearchId+0x10>)
   21a68:	4b05      	ldr	r3, [pc, #20]	; (21a80 <GL_Widget_SearchId+0x14>)
   21a6a:	4718      	bx	r3

00021a6c <GL_Widget_SearchId>:
   21a6c:	b401      	push	{r0}
   21a6e:	4803      	ldr	r0, [pc, #12]	; (21a7c <GL_Widget_SearchId+0x10>)
   21a70:	6800      	ldr	r0, [r0, #0]
   21a72:	4684      	mov	ip, r0
   21a74:	bc01      	pop	{r0}
   21a76:	4760      	bx	ip
   21a78:	0000275e 	.word	0x0000275e
   21a7c:	0002fcd0 	.word	0x0002fcd0
   21a80:	00021f25 	.word	0x00021f25

00021a84 <GL_Widget_SetBackAlign_Init>:
   21a84:	b40f      	push	{r0, r1, r2, r3}
   21a86:	4805      	ldr	r0, [pc, #20]	; (21a9c <GL_Widget_SetBackAlign+0xc>)
   21a88:	2100      	movs	r1, #0
   21a8a:	4a05      	ldr	r2, [pc, #20]	; (21aa0 <GL_Widget_SetBackAlign+0x10>)
   21a8c:	4b05      	ldr	r3, [pc, #20]	; (21aa4 <GL_Widget_SetBackAlign+0x14>)
   21a8e:	4718      	bx	r3

00021a90 <GL_Widget_SetBackAlign>:
   21a90:	b401      	push	{r0}
   21a92:	4803      	ldr	r0, [pc, #12]	; (21aa0 <GL_Widget_SetBackAlign+0x10>)
   21a94:	6800      	ldr	r0, [r0, #0]
   21a96:	4684      	mov	ip, r0
   21a98:	bc01      	pop	{r0}
   21a9a:	4760      	bx	ip
   21a9c:	00002749 	.word	0x00002749
   21aa0:	0002fce0 	.word	0x0002fce0
   21aa4:	00021f25 	.word	0x00021f25

00021aa8 <GL_Widget_SetBackColor_Init>:
   21aa8:	b40f      	push	{r0, r1, r2, r3}
   21aaa:	4805      	ldr	r0, [pc, #20]	; (21ac0 <GL_Widget_SetBackColor+0xc>)
   21aac:	2100      	movs	r1, #0
   21aae:	4a05      	ldr	r2, [pc, #20]	; (21ac4 <GL_Widget_SetBackColor+0x10>)
   21ab0:	4b05      	ldr	r3, [pc, #20]	; (21ac8 <GL_Widget_SetBackColor+0x14>)
   21ab2:	4718      	bx	r3

00021ab4 <GL_Widget_SetBackColor>:
   21ab4:	b401      	push	{r0}
   21ab6:	4803      	ldr	r0, [pc, #12]	; (21ac4 <GL_Widget_SetBackColor+0x10>)
   21ab8:	6800      	ldr	r0, [r0, #0]
   21aba:	4684      	mov	ip, r0
   21abc:	bc01      	pop	{r0}
   21abe:	4760      	bx	ip
   21ac0:	00002760 	.word	0x00002760
   21ac4:	0002fcf0 	.word	0x0002fcf0
   21ac8:	00021f25 	.word	0x00021f25

00021acc <GL_Widget_SetBorders_Init>:
   21acc:	b40f      	push	{r0, r1, r2, r3}
   21ace:	4805      	ldr	r0, [pc, #20]	; (21ae4 <GL_Widget_SetBorders+0xc>)
   21ad0:	2100      	movs	r1, #0
   21ad2:	4a05      	ldr	r2, [pc, #20]	; (21ae8 <GL_Widget_SetBorders+0x10>)
   21ad4:	4b05      	ldr	r3, [pc, #20]	; (21aec <GL_Widget_SetBorders+0x14>)
   21ad6:	4718      	bx	r3

00021ad8 <GL_Widget_SetBorders>:
   21ad8:	b401      	push	{r0}
   21ada:	4803      	ldr	r0, [pc, #12]	; (21ae8 <GL_Widget_SetBorders+0x10>)
   21adc:	6800      	ldr	r0, [r0, #0]
   21ade:	4684      	mov	ip, r0
   21ae0:	bc01      	pop	{r0}
   21ae2:	4760      	bx	ip
   21ae4:	0000280b 	.word	0x0000280b
   21ae8:	0002fd00 	.word	0x0002fd00
   21aec:	00021f25 	.word	0x00021f25

00021af0 <GL_Widget_SetExpand_Init>:
   21af0:	b40f      	push	{r0, r1, r2, r3}
   21af2:	4805      	ldr	r0, [pc, #20]	; (21b08 <GL_Widget_SetExpand+0xc>)
   21af4:	2100      	movs	r1, #0
   21af6:	4a05      	ldr	r2, [pc, #20]	; (21b0c <GL_Widget_SetExpand+0x10>)
   21af8:	4b05      	ldr	r3, [pc, #20]	; (21b10 <GL_Widget_SetExpand+0x14>)
   21afa:	4718      	bx	r3

00021afc <GL_Widget_SetExpand>:
   21afc:	b401      	push	{r0}
   21afe:	4803      	ldr	r0, [pc, #12]	; (21b0c <GL_Widget_SetExpand+0x10>)
   21b00:	6800      	ldr	r0, [r0, #0]
   21b02:	4684      	mov	ip, r0
   21b04:	bc01      	pop	{r0}
   21b06:	4760      	bx	ip
   21b08:	0000275a 	.word	0x0000275a
   21b0c:	0002fd10 	.word	0x0002fd10
   21b10:	00021f25 	.word	0x00021f25

00021b14 <GL_Widget_SetFocusable_Init>:
   21b14:	b40f      	push	{r0, r1, r2, r3}
   21b16:	4805      	ldr	r0, [pc, #20]	; (21b2c <GL_Widget_SetFocusable+0xc>)
   21b18:	2100      	movs	r1, #0
   21b1a:	4a05      	ldr	r2, [pc, #20]	; (21b30 <GL_Widget_SetFocusable+0x10>)
   21b1c:	4b05      	ldr	r3, [pc, #20]	; (21b34 <GL_Widget_SetFocusable+0x14>)
   21b1e:	4718      	bx	r3

00021b20 <GL_Widget_SetFocusable>:
   21b20:	b401      	push	{r0}
   21b22:	4803      	ldr	r0, [pc, #12]	; (21b30 <GL_Widget_SetFocusable+0x10>)
   21b24:	6800      	ldr	r0, [r0, #0]
   21b26:	4684      	mov	ip, r0
   21b28:	bc01      	pop	{r0}
   21b2a:	4760      	bx	ip
   21b2c:	00002814 	.word	0x00002814
   21b30:	0002fd20 	.word	0x0002fd20
   21b34:	00021f25 	.word	0x00021f25

00021b38 <GL_Widget_SetFontName_Init>:
   21b38:	b40f      	push	{r0, r1, r2, r3}
   21b3a:	4805      	ldr	r0, [pc, #20]	; (21b50 <GL_Widget_SetFontName+0xc>)
   21b3c:	2100      	movs	r1, #0
   21b3e:	4a05      	ldr	r2, [pc, #20]	; (21b54 <GL_Widget_SetFontName+0x10>)
   21b40:	4b05      	ldr	r3, [pc, #20]	; (21b58 <GL_Widget_SetFontName+0x14>)
   21b42:	4718      	bx	r3

00021b44 <GL_Widget_SetFontName>:
   21b44:	b401      	push	{r0}
   21b46:	4803      	ldr	r0, [pc, #12]	; (21b54 <GL_Widget_SetFontName+0x10>)
   21b48:	6800      	ldr	r0, [r0, #0]
   21b4a:	4684      	mov	ip, r0
   21b4c:	bc01      	pop	{r0}
   21b4e:	4760      	bx	ip
   21b50:	0000276a 	.word	0x0000276a
   21b54:	0002fd30 	.word	0x0002fd30
   21b58:	00021f25 	.word	0x00021f25

00021b5c <GL_Widget_SetFontScale_Init>:
   21b5c:	b40f      	push	{r0, r1, r2, r3}
   21b5e:	4805      	ldr	r0, [pc, #20]	; (21b74 <GL_Widget_SetFontScale+0xc>)
   21b60:	2100      	movs	r1, #0
   21b62:	4a05      	ldr	r2, [pc, #20]	; (21b78 <GL_Widget_SetFontScale+0x10>)
   21b64:	4b05      	ldr	r3, [pc, #20]	; (21b7c <GL_Widget_SetFontScale+0x14>)
   21b66:	4718      	bx	r3

00021b68 <GL_Widget_SetFontScale>:
   21b68:	b401      	push	{r0}
   21b6a:	4803      	ldr	r0, [pc, #12]	; (21b78 <GL_Widget_SetFontScale+0x10>)
   21b6c:	6800      	ldr	r0, [r0, #0]
   21b6e:	4684      	mov	ip, r0
   21b70:	bc01      	pop	{r0}
   21b72:	4760      	bx	ip
   21b74:	00002855 	.word	0x00002855
   21b78:	0002fd40 	.word	0x0002fd40
   21b7c:	00021f25 	.word	0x00021f25

00021b80 <GL_Widget_SetFontStyle_Init>:
   21b80:	b40f      	push	{r0, r1, r2, r3}
   21b82:	4805      	ldr	r0, [pc, #20]	; (21b98 <GL_Widget_SetFontStyle+0xc>)
   21b84:	2100      	movs	r1, #0
   21b86:	4a05      	ldr	r2, [pc, #20]	; (21b9c <GL_Widget_SetFontStyle+0x10>)
   21b88:	4b05      	ldr	r3, [pc, #20]	; (21ba0 <GL_Widget_SetFontStyle+0x14>)
   21b8a:	4718      	bx	r3

00021b8c <GL_Widget_SetFontStyle>:
   21b8c:	b401      	push	{r0}
   21b8e:	4803      	ldr	r0, [pc, #12]	; (21b9c <GL_Widget_SetFontStyle+0x10>)
   21b90:	6800      	ldr	r0, [r0, #0]
   21b92:	4684      	mov	ip, r0
   21b94:	bc01      	pop	{r0}
   21b96:	4760      	bx	ip
   21b98:	0000276e 	.word	0x0000276e
   21b9c:	0002fd50 	.word	0x0002fd50
   21ba0:	00021f25 	.word	0x00021f25

00021ba4 <GL_Widget_SetForeColor_Init>:
   21ba4:	b40f      	push	{r0, r1, r2, r3}
   21ba6:	4805      	ldr	r0, [pc, #20]	; (21bbc <GL_Widget_SetForeColor+0xc>)
   21ba8:	2100      	movs	r1, #0
   21baa:	4a05      	ldr	r2, [pc, #20]	; (21bc0 <GL_Widget_SetForeColor+0x10>)
   21bac:	4b05      	ldr	r3, [pc, #20]	; (21bc4 <GL_Widget_SetForeColor+0x14>)
   21bae:	4718      	bx	r3

00021bb0 <GL_Widget_SetForeColor>:
   21bb0:	b401      	push	{r0}
   21bb2:	4803      	ldr	r0, [pc, #12]	; (21bc0 <GL_Widget_SetForeColor+0x10>)
   21bb4:	6800      	ldr	r0, [r0, #0]
   21bb6:	4684      	mov	ip, r0
   21bb8:	bc01      	pop	{r0}
   21bba:	4760      	bx	ip
   21bbc:	00002762 	.word	0x00002762
   21bc0:	0002fd60 	.word	0x0002fd60
   21bc4:	00021f25 	.word	0x00021f25

00021bc8 <GL_Widget_SetGrow_Init>:
   21bc8:	b40f      	push	{r0, r1, r2, r3}
   21bca:	4805      	ldr	r0, [pc, #20]	; (21be0 <GL_Widget_SetGrow+0xc>)
   21bcc:	2100      	movs	r1, #0
   21bce:	4a05      	ldr	r2, [pc, #20]	; (21be4 <GL_Widget_SetGrow+0x10>)
   21bd0:	4b05      	ldr	r3, [pc, #20]	; (21be8 <GL_Widget_SetGrow+0x14>)
   21bd2:	4718      	bx	r3

00021bd4 <GL_Widget_SetGrow>:
   21bd4:	b401      	push	{r0}
   21bd6:	4803      	ldr	r0, [pc, #12]	; (21be4 <GL_Widget_SetGrow+0x10>)
   21bd8:	6800      	ldr	r0, [r0, #0]
   21bda:	4684      	mov	ip, r0
   21bdc:	bc01      	pop	{r0}
   21bde:	4760      	bx	ip
   21be0:	00002756 	.word	0x00002756
   21be4:	0002fd70 	.word	0x0002fd70
   21be8:	00021f25 	.word	0x00021f25

00021bec <GL_Widget_SetId_Init>:
   21bec:	b40f      	push	{r0, r1, r2, r3}
   21bee:	4805      	ldr	r0, [pc, #20]	; (21c04 <GL_Widget_SetId+0xc>)
   21bf0:	2100      	movs	r1, #0
   21bf2:	4a05      	ldr	r2, [pc, #20]	; (21c08 <GL_Widget_SetId+0x10>)
   21bf4:	4b05      	ldr	r3, [pc, #20]	; (21c0c <GL_Widget_SetId+0x14>)
   21bf6:	4718      	bx	r3

00021bf8 <GL_Widget_SetId>:
   21bf8:	b401      	push	{r0}
   21bfa:	4803      	ldr	r0, [pc, #12]	; (21c08 <GL_Widget_SetId+0x10>)
   21bfc:	6800      	ldr	r0, [r0, #0]
   21bfe:	4684      	mov	ip, r0
   21c00:	bc01      	pop	{r0}
   21c02:	4760      	bx	ip
   21c04:	0000275d 	.word	0x0000275d
   21c08:	0002fd80 	.word	0x0002fd80
   21c0c:	00021f25 	.word	0x00021f25

00021c10 <GL_Widget_SetItem_Init>:
   21c10:	b40f      	push	{r0, r1, r2, r3}
   21c12:	4805      	ldr	r0, [pc, #20]	; (21c28 <GL_Widget_SetItem+0xc>)
   21c14:	2100      	movs	r1, #0
   21c16:	4a05      	ldr	r2, [pc, #20]	; (21c2c <GL_Widget_SetItem+0x10>)
   21c18:	4b05      	ldr	r3, [pc, #20]	; (21c30 <GL_Widget_SetItem+0x14>)
   21c1a:	4718      	bx	r3

00021c1c <GL_Widget_SetItem>:
   21c1c:	b401      	push	{r0}
   21c1e:	4803      	ldr	r0, [pc, #12]	; (21c2c <GL_Widget_SetItem+0x10>)
   21c20:	6800      	ldr	r0, [r0, #0]
   21c22:	4684      	mov	ip, r0
   21c24:	bc01      	pop	{r0}
   21c26:	4760      	bx	ip
   21c28:	00002747 	.word	0x00002747
   21c2c:	0002fd90 	.word	0x0002fd90
   21c30:	00021f25 	.word	0x00021f25

00021c34 <GL_Widget_SetMargins_Init>:
   21c34:	b40f      	push	{r0, r1, r2, r3}
   21c36:	4805      	ldr	r0, [pc, #20]	; (21c4c <GL_Widget_SetMargins+0xc>)
   21c38:	2100      	movs	r1, #0
   21c3a:	4a05      	ldr	r2, [pc, #20]	; (21c50 <GL_Widget_SetMargins+0x10>)
   21c3c:	4b05      	ldr	r3, [pc, #20]	; (21c54 <GL_Widget_SetMargins+0x14>)
   21c3e:	4718      	bx	r3

00021c40 <GL_Widget_SetMargins>:
   21c40:	b401      	push	{r0}
   21c42:	4803      	ldr	r0, [pc, #12]	; (21c50 <GL_Widget_SetMargins+0x10>)
   21c44:	6800      	ldr	r0, [r0, #0]
   21c46:	4684      	mov	ip, r0
   21c48:	bc01      	pop	{r0}
   21c4a:	4760      	bx	ip
   21c4c:	0000274c 	.word	0x0000274c
   21c50:	0002fda0 	.word	0x0002fda0
   21c54:	00021f25 	.word	0x00021f25

00021c58 <GL_Widget_SetMinSize_Init>:
   21c58:	b40f      	push	{r0, r1, r2, r3}
   21c5a:	4805      	ldr	r0, [pc, #20]	; (21c70 <GL_Widget_SetMinSize+0xc>)
   21c5c:	2100      	movs	r1, #0
   21c5e:	4a05      	ldr	r2, [pc, #20]	; (21c74 <GL_Widget_SetMinSize+0x10>)
   21c60:	4b05      	ldr	r3, [pc, #20]	; (21c78 <GL_Widget_SetMinSize+0x14>)
   21c62:	4718      	bx	r3

00021c64 <GL_Widget_SetMinSize>:
   21c64:	b401      	push	{r0}
   21c66:	4803      	ldr	r0, [pc, #12]	; (21c74 <GL_Widget_SetMinSize+0x10>)
   21c68:	6800      	ldr	r0, [r0, #0]
   21c6a:	4684      	mov	ip, r0
   21c6c:	bc01      	pop	{r0}
   21c6e:	4760      	bx	ip
   21c70:	0000273f 	.word	0x0000273f
   21c74:	0002fdb0 	.word	0x0002fdb0
   21c78:	00021f25 	.word	0x00021f25

00021c7c <GL_Widget_SetShortcut_Init>:
   21c7c:	b40f      	push	{r0, r1, r2, r3}
   21c7e:	4805      	ldr	r0, [pc, #20]	; (21c94 <GL_Widget_SetShortcut+0xc>)
   21c80:	2100      	movs	r1, #0
   21c82:	4a05      	ldr	r2, [pc, #20]	; (21c98 <GL_Widget_SetShortcut+0x10>)
   21c84:	4b05      	ldr	r3, [pc, #20]	; (21c9c <GL_Widget_SetShortcut+0x14>)
   21c86:	4718      	bx	r3

00021c88 <GL_Widget_SetShortcut>:
   21c88:	b401      	push	{r0}
   21c8a:	4803      	ldr	r0, [pc, #12]	; (21c98 <GL_Widget_SetShortcut+0x10>)
   21c8c:	6800      	ldr	r0, [r0, #0]
   21c8e:	4684      	mov	ip, r0
   21c90:	bc01      	pop	{r0}
   21c92:	4760      	bx	ip
   21c94:	00002776 	.word	0x00002776
   21c98:	0002fdc0 	.word	0x0002fdc0
   21c9c:	00021f25 	.word	0x00021f25

00021ca0 <GL_Widget_SetShrink_Init>:
   21ca0:	b40f      	push	{r0, r1, r2, r3}
   21ca2:	4805      	ldr	r0, [pc, #20]	; (21cb8 <GL_Widget_SetShrink+0xc>)
   21ca4:	2100      	movs	r1, #0
   21ca6:	4a05      	ldr	r2, [pc, #20]	; (21cbc <GL_Widget_SetShrink+0x10>)
   21ca8:	4b05      	ldr	r3, [pc, #20]	; (21cc0 <GL_Widget_SetShrink+0x14>)
   21caa:	4718      	bx	r3

00021cac <GL_Widget_SetShrink>:
   21cac:	b401      	push	{r0}
   21cae:	4803      	ldr	r0, [pc, #12]	; (21cbc <GL_Widget_SetShrink+0x10>)
   21cb0:	6800      	ldr	r0, [r0, #0]
   21cb2:	4684      	mov	ip, r0
   21cb4:	bc01      	pop	{r0}
   21cb6:	4760      	bx	ip
   21cb8:	00002758 	.word	0x00002758
   21cbc:	0002fdd0 	.word	0x0002fdd0
   21cc0:	00021f25 	.word	0x00021f25

00021cc4 <GL_Widget_SetSize_Init>:
   21cc4:	b40f      	push	{r0, r1, r2, r3}
   21cc6:	4805      	ldr	r0, [pc, #20]	; (21cdc <GL_Widget_SetSize+0xc>)
   21cc8:	2100      	movs	r1, #0
   21cca:	4a05      	ldr	r2, [pc, #20]	; (21ce0 <GL_Widget_SetSize+0x10>)
   21ccc:	4b05      	ldr	r3, [pc, #20]	; (21ce4 <GL_Widget_SetSize+0x14>)
   21cce:	4718      	bx	r3

00021cd0 <GL_Widget_SetSize>:
   21cd0:	b401      	push	{r0}
   21cd2:	4803      	ldr	r0, [pc, #12]	; (21ce0 <GL_Widget_SetSize+0x10>)
   21cd4:	6800      	ldr	r0, [r0, #0]
   21cd6:	4684      	mov	ip, r0
   21cd8:	bc01      	pop	{r0}
   21cda:	4760      	bx	ip
   21cdc:	0000273d 	.word	0x0000273d
   21ce0:	0002fde0 	.word	0x0002fde0
   21ce4:	00021f25 	.word	0x00021f25

00021ce8 <GL_Widget_SetSource_Init>:
   21ce8:	b40f      	push	{r0, r1, r2, r3}
   21cea:	4805      	ldr	r0, [pc, #20]	; (21d00 <GL_Widget_SetSource+0xc>)
   21cec:	2100      	movs	r1, #0
   21cee:	4a05      	ldr	r2, [pc, #20]	; (21d04 <GL_Widget_SetSource+0x10>)
   21cf0:	4b05      	ldr	r3, [pc, #20]	; (21d08 <GL_Widget_SetSource+0x14>)
   21cf2:	4718      	bx	r3

00021cf4 <GL_Widget_SetSource>:
   21cf4:	b401      	push	{r0}
   21cf6:	4803      	ldr	r0, [pc, #12]	; (21d04 <GL_Widget_SetSource+0x10>)
   21cf8:	6800      	ldr	r0, [r0, #0]
   21cfa:	4684      	mov	ip, r0
   21cfc:	bc01      	pop	{r0}
   21cfe:	4760      	bx	ip
   21d00:	000027c0 	.word	0x000027c0
   21d04:	0002fdf0 	.word	0x0002fdf0
   21d08:	00021f25 	.word	0x00021f25

00021d0c <GL_Widget_SetText_Init>:
   21d0c:	b40f      	push	{r0, r1, r2, r3}
   21d0e:	4805      	ldr	r0, [pc, #20]	; (21d24 <GL_Widget_SetText+0xc>)
   21d10:	2100      	movs	r1, #0
   21d12:	4a05      	ldr	r2, [pc, #20]	; (21d28 <GL_Widget_SetText+0x10>)
   21d14:	4b05      	ldr	r3, [pc, #20]	; (21d2c <GL_Widget_SetText+0x14>)
   21d16:	4718      	bx	r3

00021d18 <GL_Widget_SetText>:
   21d18:	b401      	push	{r0}
   21d1a:	4803      	ldr	r0, [pc, #12]	; (21d28 <GL_Widget_SetText+0x10>)
   21d1c:	6800      	ldr	r0, [r0, #0]
   21d1e:	4684      	mov	ip, r0
   21d20:	bc01      	pop	{r0}
   21d22:	4760      	bx	ip
   21d24:	00002768 	.word	0x00002768
   21d28:	0002fe00 	.word	0x0002fe00
   21d2c:	00021f25 	.word	0x00021f25

00021d30 <GL_Widget_SetTextAlign_Init>:
   21d30:	b40f      	push	{r0, r1, r2, r3}
   21d32:	4805      	ldr	r0, [pc, #20]	; (21d48 <GL_Widget_SetTextAlign+0xc>)
   21d34:	2100      	movs	r1, #0
   21d36:	4a05      	ldr	r2, [pc, #20]	; (21d4c <GL_Widget_SetTextAlign+0x10>)
   21d38:	4b05      	ldr	r3, [pc, #20]	; (21d50 <GL_Widget_SetTextAlign+0x14>)
   21d3a:	4718      	bx	r3

00021d3c <GL_Widget_SetTextAlign>:
   21d3c:	b401      	push	{r0}
   21d3e:	4803      	ldr	r0, [pc, #12]	; (21d4c <GL_Widget_SetTextAlign+0x10>)
   21d40:	6800      	ldr	r0, [r0, #0]
   21d42:	4684      	mov	ip, r0
   21d44:	bc01      	pop	{r0}
   21d46:	4760      	bx	ip
   21d48:	00002774 	.word	0x00002774
   21d4c:	0002fe10 	.word	0x0002fe10
   21d50:	00021f25 	.word	0x00021f25

00021d54 <GL_Widget_SetTextPaddings_Init>:
   21d54:	b40f      	push	{r0, r1, r2, r3}
   21d56:	4805      	ldr	r0, [pc, #20]	; (21d6c <GL_Widget_SetTextPaddings+0xc>)
   21d58:	2100      	movs	r1, #0
   21d5a:	4a05      	ldr	r2, [pc, #20]	; (21d70 <GL_Widget_SetTextPaddings+0x10>)
   21d5c:	4b05      	ldr	r3, [pc, #20]	; (21d74 <GL_Widget_SetTextPaddings+0x14>)
   21d5e:	4718      	bx	r3

00021d60 <GL_Widget_SetTextPaddings>:
   21d60:	b401      	push	{r0}
   21d62:	4803      	ldr	r0, [pc, #12]	; (21d70 <GL_Widget_SetTextPaddings+0x10>)
   21d64:	6800      	ldr	r0, [r0, #0]
   21d66:	4684      	mov	ip, r0
   21d68:	bc01      	pop	{r0}
   21d6a:	4760      	bx	ip
   21d6c:	000027a8 	.word	0x000027a8
   21d70:	0002fe20 	.word	0x0002fe20
   21d74:	00021f25 	.word	0x00021f25

00021d78 <GL_Widget_SetTransformation_Init>:
   21d78:	b40f      	push	{r0, r1, r2, r3}
   21d7a:	4805      	ldr	r0, [pc, #20]	; (21d90 <GL_Widget_SetTransformation+0xc>)
   21d7c:	2100      	movs	r1, #0
   21d7e:	4a05      	ldr	r2, [pc, #20]	; (21d94 <GL_Widget_SetTransformation+0x10>)
   21d80:	4b05      	ldr	r3, [pc, #20]	; (21d98 <GL_Widget_SetTransformation+0x14>)
   21d82:	4718      	bx	r3

00021d84 <GL_Widget_SetTransformation>:
   21d84:	b401      	push	{r0}
   21d86:	4803      	ldr	r0, [pc, #12]	; (21d94 <GL_Widget_SetTransformation+0x10>)
   21d88:	6800      	ldr	r0, [r0, #0]
   21d8a:	4684      	mov	ip, r0
   21d8c:	bc01      	pop	{r0}
   21d8e:	4760      	bx	ip
   21d90:	00002862 	.word	0x00002862
   21d94:	0002fe30 	.word	0x0002fe30
   21d98:	00021f25 	.word	0x00021f25

00021d9c <GL_Widget_SetVisible_Init>:
   21d9c:	b40f      	push	{r0, r1, r2, r3}
   21d9e:	4805      	ldr	r0, [pc, #20]	; (21db4 <GL_Widget_SetVisible+0xc>)
   21da0:	2100      	movs	r1, #0
   21da2:	4a05      	ldr	r2, [pc, #20]	; (21db8 <GL_Widget_SetVisible+0x10>)
   21da4:	4b05      	ldr	r3, [pc, #20]	; (21dbc <GL_Widget_SetVisible+0x14>)
   21da6:	4718      	bx	r3

00021da8 <GL_Widget_SetVisible>:
   21da8:	b401      	push	{r0}
   21daa:	4803      	ldr	r0, [pc, #12]	; (21db8 <GL_Widget_SetVisible+0x10>)
   21dac:	6800      	ldr	r0, [r0, #0]
   21dae:	4684      	mov	ip, r0
   21db0:	bc01      	pop	{r0}
   21db2:	4760      	bx	ip
   21db4:	00002745 	.word	0x00002745
   21db8:	0002fe40 	.word	0x0002fe40
   21dbc:	00021f25 	.word	0x00021f25

00021dc0 <GL_Widget_SetWrap_Init>:
   21dc0:	b40f      	push	{r0, r1, r2, r3}
   21dc2:	4805      	ldr	r0, [pc, #20]	; (21dd8 <GL_Widget_SetWrap+0xc>)
   21dc4:	2100      	movs	r1, #0
   21dc6:	4a05      	ldr	r2, [pc, #20]	; (21ddc <GL_Widget_SetWrap+0x10>)
   21dc8:	4b05      	ldr	r3, [pc, #20]	; (21de0 <GL_Widget_SetWrap+0x14>)
   21dca:	4718      	bx	r3

00021dcc <GL_Widget_SetWrap>:
   21dcc:	b401      	push	{r0}
   21dce:	4803      	ldr	r0, [pc, #12]	; (21ddc <GL_Widget_SetWrap+0x10>)
   21dd0:	6800      	ldr	r0, [r0, #0]
   21dd2:	4684      	mov	ip, r0
   21dd4:	bc01      	pop	{r0}
   21dd6:	4760      	bx	ip
   21dd8:	00002876 	.word	0x00002876
   21ddc:	0002fe50 	.word	0x0002fe50
   21de0:	00021f25 	.word	0x00021f25

00021de4 <GL_Widget_UnregisterCallback_Init>:
   21de4:	b40f      	push	{r0, r1, r2, r3}
   21de6:	4805      	ldr	r0, [pc, #20]	; (21dfc <GL_Widget_UnregisterCallback+0xc>)
   21de8:	2100      	movs	r1, #0
   21dea:	4a05      	ldr	r2, [pc, #20]	; (21e00 <GL_Widget_UnregisterCallback+0x10>)
   21dec:	4b05      	ldr	r3, [pc, #20]	; (21e04 <GL_Widget_UnregisterCallback+0x14>)
   21dee:	4718      	bx	r3

00021df0 <GL_Widget_UnregisterCallback>:
   21df0:	b401      	push	{r0}
   21df2:	4803      	ldr	r0, [pc, #12]	; (21e00 <GL_Widget_UnregisterCallback+0x10>)
   21df4:	6800      	ldr	r0, [r0, #0]
   21df6:	4684      	mov	ip, r0
   21df8:	bc01      	pop	{r0}
   21dfa:	4760      	bx	ip
   21dfc:	00002773 	.word	0x00002773
   21e00:	0002fe60 	.word	0x0002fe60
   21e04:	00021f25 	.word	0x00021f25

00021e08 <GL_Window_Create_Init>:
   21e08:	b40f      	push	{r0, r1, r2, r3}
   21e0a:	4805      	ldr	r0, [pc, #20]	; (21e20 <GL_Window_Create+0xc>)
   21e0c:	2100      	movs	r1, #0
   21e0e:	4a05      	ldr	r2, [pc, #20]	; (21e24 <GL_Window_Create+0x10>)
   21e10:	4b05      	ldr	r3, [pc, #20]	; (21e28 <GL_Window_Create+0x14>)
   21e12:	4718      	bx	r3

00021e14 <GL_Window_Create>:
   21e14:	b401      	push	{r0}
   21e16:	4803      	ldr	r0, [pc, #12]	; (21e24 <GL_Window_Create+0x10>)
   21e18:	6800      	ldr	r0, [r0, #0]
   21e1a:	4684      	mov	ip, r0
   21e1c:	bc01      	pop	{r0}
   21e1e:	4760      	bx	ip
   21e20:	00002778 	.word	0x00002778
   21e24:	0002fe70 	.word	0x0002fe70
   21e28:	00021f25 	.word	0x00021f25

00021e2c <GL_Window_Dispatch_Init>:
   21e2c:	b40f      	push	{r0, r1, r2, r3}
   21e2e:	4805      	ldr	r0, [pc, #20]	; (21e44 <GL_Window_Dispatch+0xc>)
   21e30:	2100      	movs	r1, #0
   21e32:	4a05      	ldr	r2, [pc, #20]	; (21e48 <GL_Window_Dispatch+0x10>)
   21e34:	4b05      	ldr	r3, [pc, #20]	; (21e4c <GL_Window_Dispatch+0x14>)
   21e36:	4718      	bx	r3

00021e38 <GL_Window_Dispatch>:
   21e38:	b401      	push	{r0}
   21e3a:	4803      	ldr	r0, [pc, #12]	; (21e48 <GL_Window_Dispatch+0x10>)
   21e3c:	6800      	ldr	r0, [r0, #0]
   21e3e:	4684      	mov	ip, r0
   21e40:	bc01      	pop	{r0}
   21e42:	4760      	bx	ip
   21e44:	000027be 	.word	0x000027be
   21e48:	0002fe80 	.word	0x0002fe80
   21e4c:	00021f25 	.word	0x00021f25

00021e50 <GL_Window_GetResult_Init>:
   21e50:	b40f      	push	{r0, r1, r2, r3}
   21e52:	4805      	ldr	r0, [pc, #20]	; (21e68 <GL_Window_GetResult+0xc>)
   21e54:	2100      	movs	r1, #0
   21e56:	4a05      	ldr	r2, [pc, #20]	; (21e6c <GL_Window_GetResult+0x10>)
   21e58:	4b05      	ldr	r3, [pc, #20]	; (21e70 <GL_Window_GetResult+0x14>)
   21e5a:	4718      	bx	r3

00021e5c <GL_Window_GetResult>:
   21e5c:	b401      	push	{r0}
   21e5e:	4803      	ldr	r0, [pc, #12]	; (21e6c <GL_Window_GetResult+0x10>)
   21e60:	6800      	ldr	r0, [r0, #0]
   21e62:	4684      	mov	ip, r0
   21e64:	bc01      	pop	{r0}
   21e66:	4760      	bx	ip
   21e68:	000027f4 	.word	0x000027f4
   21e6c:	0002fe90 	.word	0x0002fe90
   21e70:	00021f25 	.word	0x00021f25

00021e74 <GL_Window_MainLoop_Init>:
   21e74:	b40f      	push	{r0, r1, r2, r3}
   21e76:	4805      	ldr	r0, [pc, #20]	; (21e8c <GL_Window_MainLoop+0xc>)
   21e78:	2100      	movs	r1, #0
   21e7a:	4a05      	ldr	r2, [pc, #20]	; (21e90 <GL_Window_MainLoop+0x10>)
   21e7c:	4b05      	ldr	r3, [pc, #20]	; (21e94 <GL_Window_MainLoop+0x14>)
   21e7e:	4718      	bx	r3

00021e80 <GL_Window_MainLoop>:
   21e80:	b401      	push	{r0}
   21e82:	4803      	ldr	r0, [pc, #12]	; (21e90 <GL_Window_MainLoop+0x10>)
   21e84:	6800      	ldr	r0, [r0, #0]
   21e86:	4684      	mov	ip, r0
   21e88:	bc01      	pop	{r0}
   21e8a:	4760      	bx	ip
   21e8c:	00002780 	.word	0x00002780
   21e90:	0002fea0 	.word	0x0002fea0
   21e94:	00021f25 	.word	0x00021f25

00021e98 <GL_GetProcAddressWithoutExit>:
   21e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21e9a:	4d12      	ldr	r5, [pc, #72]	; (21ee4 <GL_GetProcAddressWithoutExit+0x4c>)
   21e9c:	4607      	mov	r7, r0
   21e9e:	447d      	add	r5, pc
   21ea0:	460e      	mov	r6, r1
   21ea2:	682b      	ldr	r3, [r5, #0]
   21ea4:	4614      	mov	r4, r2
   21ea6:	b923      	cbnz	r3, 21eb2 <GL_GetProcAddressWithoutExit+0x1a>
   21ea8:	480f      	ldr	r0, [pc, #60]	; (21ee8 <GL_GetProcAddressWithoutExit+0x50>)
   21eaa:	4478      	add	r0, pc
   21eac:	f000 f885 	bl	21fba <OSL_Dll_Open>
   21eb0:	6028      	str	r0, [r5, #0]
   21eb2:	4d0e      	ldr	r5, [pc, #56]	; (21eec <GL_GetProcAddressWithoutExit+0x54>)
   21eb4:	447d      	add	r5, pc
   21eb6:	6828      	ldr	r0, [r5, #0]
   21eb8:	b920      	cbnz	r0, 21ec4 <GL_GetProcAddressWithoutExit+0x2c>
   21eba:	480d      	ldr	r0, [pc, #52]	; (21ef0 <GL_GetProcAddressWithoutExit+0x58>)
   21ebc:	4478      	add	r0, pc
   21ebe:	f7e6 ef00 	blx	8cc0 <_init+0x160>
   21ec2:	e005      	b.n	21ed0 <GL_GetProcAddressWithoutExit+0x38>
   21ec4:	4639      	mov	r1, r7
   21ec6:	f000 f858 	bl	21f7a <OSL_Dll_GetSymbolByName>
   21eca:	2301      	movs	r3, #1
   21ecc:	606b      	str	r3, [r5, #4]
   21ece:	b920      	cbnz	r0, 21eda <GL_GetProcAddressWithoutExit+0x42>
   21ed0:	4808      	ldr	r0, [pc, #32]	; (21ef4 <GL_GetProcAddressWithoutExit+0x5c>)
   21ed2:	4478      	add	r0, pc
   21ed4:	f7e6 eef4 	blx	8cc0 <_init+0x160>
   21ed8:	4630      	mov	r0, r6
   21eda:	b114      	cbz	r4, 21ee2 <GL_GetProcAddressWithoutExit+0x4a>
   21edc:	6823      	ldr	r3, [r4, #0]
   21ede:	b103      	cbz	r3, 21ee2 <GL_GetProcAddressWithoutExit+0x4a>
   21ee0:	6020      	str	r0, [r4, #0]
   21ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21ee4:	0000e1a6 	.word	0x0000e1a6
   21ee8:	00004475 	.word	0x00004475
   21eec:	0000e190 	.word	0x0000e190
   21ef0:	00004473 	.word	0x00004473
   21ef4:	0000447d 	.word	0x0000447d

00021ef8 <GL_GetProcAddress>:
   21ef8:	b510      	push	{r4, lr}
   21efa:	f7ff ffcd 	bl	21e98 <GL_GetProcAddressWithoutExit>
   21efe:	4604      	mov	r4, r0
   21f00:	b918      	cbnz	r0, 21f0a <GL_GetProcAddress+0x12>
   21f02:	4803      	ldr	r0, [pc, #12]	; (21f10 <GL_GetProcAddress+0x18>)
   21f04:	4478      	add	r0, pc
   21f06:	f7e6 eedc 	blx	8cc0 <_init+0x160>
   21f0a:	4620      	mov	r0, r4
   21f0c:	bd10      	pop	{r4, pc}
   21f0e:	bf00      	nop
   21f10:	0000445c 	.word	0x0000445c

00021f14 <GL_IsPresent>:
   21f14:	4802      	ldr	r0, [pc, #8]	; (21f20 <GL_IsPresent+0xc>)
   21f16:	b508      	push	{r3, lr}
   21f18:	4478      	add	r0, pc
   21f1a:	f000 f83e 	bl	21f9a <OSL_Dll_IsPresent>
   21f1e:	bd08      	pop	{r3, pc}
   21f20:	00004407 	.word	0x00004407

00021f24 <GL_InitFuncAndBranch>:
   21f24:	b500      	push	{lr}
   21f26:	f7ff ffe7 	bl	21ef8 <GL_GetProcAddress>
   21f2a:	bc08      	pop	{r3}
   21f2c:	469e      	mov	lr, r3
   21f2e:	4684      	mov	ip, r0
   21f30:	bc0f      	pop	{r0, r1, r2, r3}
   21f32:	4760      	bx	ip

00021f34 <GL_Swi_ObjectLoad>:
   21f34:	b580      	push	{r7, lr}
   21f36:	2749      	movs	r7, #73	; 0x49
   21f38:	46bc      	mov	ip, r7
   21f3a:	df13      	svc	19
   21f3c:	bc80      	pop	{r7}
   21f3e:	bc08      	pop	{r3}
   21f40:	4718      	bx	r3

00021f42 <GL_Swi_DllLink>:
   21f42:	b580      	push	{r7, lr}
   21f44:	2750      	movs	r7, #80	; 0x50
   21f46:	46bc      	mov	ip, r7
   21f48:	df13      	svc	19
   21f4a:	bc80      	pop	{r7}
   21f4c:	bc08      	pop	{r3}
   21f4e:	4718      	bx	r3

00021f50 <OSL_Dll_Close_Init>:
   21f50:	b40f      	push	{r0, r1, r2, r3}
   21f52:	2003      	movs	r0, #3
   21f54:	4904      	ldr	r1, [pc, #16]	; (21f68 <OSL_Dll_Close+0xe>)
   21f56:	4a05      	ldr	r2, [pc, #20]	; (21f6c <OSL_Dll_Close+0x12>)
   21f58:	4710      	bx	r2

00021f5a <OSL_Dll_Close>:
   21f5a:	b401      	push	{r0}
   21f5c:	4802      	ldr	r0, [pc, #8]	; (21f68 <OSL_Dll_Close+0xe>)
   21f5e:	6800      	ldr	r0, [r0, #0]
   21f60:	4684      	mov	ip, r0
   21f62:	bc01      	pop	{r0}
   21f64:	4760      	bx	ip
   21f66:	0000      	.short	0x0000
   21f68:	0002feb0 	.word	0x0002feb0
   21f6c:	00008ca8 	.word	0x00008ca8

00021f70 <OSL_Dll_GetSymbolByName_Init>:
   21f70:	b40f      	push	{r0, r1, r2, r3}
   21f72:	2002      	movs	r0, #2
   21f74:	4904      	ldr	r1, [pc, #16]	; (21f88 <OSL_Dll_GetSymbolByName+0xe>)
   21f76:	4a05      	ldr	r2, [pc, #20]	; (21f8c <OSL_Dll_GetSymbolByName+0x12>)
   21f78:	4710      	bx	r2

00021f7a <OSL_Dll_GetSymbolByName>:
   21f7a:	b401      	push	{r0}
   21f7c:	4802      	ldr	r0, [pc, #8]	; (21f88 <OSL_Dll_GetSymbolByName+0xe>)
   21f7e:	6800      	ldr	r0, [r0, #0]
   21f80:	4684      	mov	ip, r0
   21f82:	bc01      	pop	{r0}
   21f84:	4760      	bx	ip
   21f86:	0000      	.short	0x0000
   21f88:	0002feb4 	.word	0x0002feb4
   21f8c:	00008ca8 	.word	0x00008ca8

00021f90 <OSL_Dll_IsPresent_Init>:
   21f90:	b40f      	push	{r0, r1, r2, r3}
   21f92:	201c      	movs	r0, #28
   21f94:	4904      	ldr	r1, [pc, #16]	; (21fa8 <OSL_Dll_IsPresent+0xe>)
   21f96:	4a05      	ldr	r2, [pc, #20]	; (21fac <OSL_Dll_IsPresent+0x12>)
   21f98:	4710      	bx	r2

00021f9a <OSL_Dll_IsPresent>:
   21f9a:	b401      	push	{r0}
   21f9c:	4802      	ldr	r0, [pc, #8]	; (21fa8 <OSL_Dll_IsPresent+0xe>)
   21f9e:	6800      	ldr	r0, [r0, #0]
   21fa0:	4684      	mov	ip, r0
   21fa2:	bc01      	pop	{r0}
   21fa4:	4760      	bx	ip
   21fa6:	0000      	.short	0x0000
   21fa8:	0002feb8 	.word	0x0002feb8
   21fac:	00008ca8 	.word	0x00008ca8

00021fb0 <OSL_Dll_Open_Init>:
   21fb0:	b40f      	push	{r0, r1, r2, r3}
   21fb2:	2000      	movs	r0, #0
   21fb4:	4904      	ldr	r1, [pc, #16]	; (21fc8 <OSL_Dll_Open+0xe>)
   21fb6:	4a05      	ldr	r2, [pc, #20]	; (21fcc <OSL_Dll_Open+0x12>)
   21fb8:	4710      	bx	r2

00021fba <OSL_Dll_Open>:
   21fba:	b401      	push	{r0}
   21fbc:	4802      	ldr	r0, [pc, #8]	; (21fc8 <OSL_Dll_Open+0xe>)
   21fbe:	6800      	ldr	r0, [r0, #0]
   21fc0:	4684      	mov	ip, r0
   21fc2:	bc01      	pop	{r0}
   21fc4:	4760      	bx	ip
   21fc6:	0000      	.short	0x0000
   21fc8:	0002febc 	.word	0x0002febc
   21fcc:	00008ca8 	.word	0x00008ca8

00021fd0 <OSL_Dll_OpenByAppliType_Init>:
   21fd0:	b40f      	push	{r0, r1, r2, r3}
   21fd2:	201d      	movs	r0, #29
   21fd4:	4904      	ldr	r1, [pc, #16]	; (21fe8 <OSL_Dll_OpenByAppliType+0xe>)
   21fd6:	4a05      	ldr	r2, [pc, #20]	; (21fec <OSL_Dll_OpenByAppliType+0x12>)
   21fd8:	4710      	bx	r2

00021fda <OSL_Dll_OpenByAppliType>:
   21fda:	b401      	push	{r0}
   21fdc:	4802      	ldr	r0, [pc, #8]	; (21fe8 <OSL_Dll_OpenByAppliType+0xe>)
   21fde:	6800      	ldr	r0, [r0, #0]
   21fe0:	4684      	mov	ip, r0
   21fe2:	bc01      	pop	{r0}
   21fe4:	4760      	bx	ip
   21fe6:	0000      	.short	0x0000
   21fe8:	0002fec0 	.word	0x0002fec0
   21fec:	00008ca8 	.word	0x00008ca8

00021ff0 <OSL_TimeStp_ElapsedMs_Init>:
   21ff0:	b40f      	push	{r0, r1, r2, r3}
   21ff2:	201b      	movs	r0, #27
   21ff4:	4904      	ldr	r1, [pc, #16]	; (22008 <OSL_TimeStp_ElapsedMs+0xe>)
   21ff6:	4a05      	ldr	r2, [pc, #20]	; (2200c <OSL_TimeStp_ElapsedMs+0x12>)
   21ff8:	4710      	bx	r2

00021ffa <OSL_TimeStp_ElapsedMs>:
   21ffa:	b401      	push	{r0}
   21ffc:	4802      	ldr	r0, [pc, #8]	; (22008 <OSL_TimeStp_ElapsedMs+0xe>)
   21ffe:	6800      	ldr	r0, [r0, #0]
   22000:	4684      	mov	ip, r0
   22002:	bc01      	pop	{r0}
   22004:	4760      	bx	ip
   22006:	0000      	.short	0x0000
   22008:	0002fec4 	.word	0x0002fec4
   2200c:	00008ca8 	.word	0x00008ca8

00022010 <OSL_TimeStp_Now_Init>:
   22010:	b40f      	push	{r0, r1, r2, r3}
   22012:	2019      	movs	r0, #25
   22014:	4904      	ldr	r1, [pc, #16]	; (22028 <OSL_TimeStp_Now+0xe>)
   22016:	4a05      	ldr	r2, [pc, #20]	; (2202c <OSL_TimeStp_Now+0x12>)
   22018:	4710      	bx	r2

0002201a <OSL_TimeStp_Now>:
   2201a:	b401      	push	{r0}
   2201c:	4802      	ldr	r0, [pc, #8]	; (22028 <OSL_TimeStp_Now+0xe>)
   2201e:	6800      	ldr	r0, [r0, #0]
   22020:	4684      	mov	ip, r0
   22022:	bc01      	pop	{r0}
   22024:	4760      	bx	ip
   22026:	0000      	.short	0x0000
   22028:	0002fec8 	.word	0x0002fec8
   2202c:	00008ca8 	.word	0x00008ca8

00022030 <GTL_StdTimer_GetCurrent>:
   22030:	4b08      	ldr	r3, [pc, #32]	; (22054 <GTL_StdTimer_GetCurrent+0x24>)
   22032:	b507      	push	{r0, r1, r2, lr}
   22034:	4a08      	ldr	r2, [pc, #32]	; (22058 <GTL_StdTimer_GetCurrent+0x28>)
   22036:	447b      	add	r3, pc
   22038:	589b      	ldr	r3, [r3, r2]
   2203a:	681a      	ldr	r2, [r3, #0]
   2203c:	9201      	str	r2, [sp, #4]
   2203e:	9a01      	ldr	r2, [sp, #4]
   22040:	681b      	ldr	r3, [r3, #0]
   22042:	429a      	cmp	r2, r3
   22044:	d001      	beq.n	2204a <GTL_StdTimer_GetCurrent+0x1a>
   22046:	f7e6 ffad 	bl	8fa4 <__stack_chk_fail>
   2204a:	b003      	add	sp, #12
   2204c:	f85d eb04 	ldr.w	lr, [sp], #4
   22050:	f000 b98c 	b.w	2236c <TMT_Retrieve_Clock>
   22054:	0000d0de 	.word	0x0000d0de
   22058:	000000ac 	.word	0x000000ac

0002205c <GTL_StdTimer_GetElapsed>:
   2205c:	4b08      	ldr	r3, [pc, #32]	; (22080 <GTL_StdTimer_GetElapsed+0x24>)
   2205e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   22060:	4a08      	ldr	r2, [pc, #32]	; (22084 <GTL_StdTimer_GetElapsed+0x28>)
   22062:	447b      	add	r3, pc
   22064:	4605      	mov	r5, r0
   22066:	589c      	ldr	r4, [r3, r2]
   22068:	6823      	ldr	r3, [r4, #0]
   2206a:	9301      	str	r3, [sp, #4]
   2206c:	f000 f97e 	bl	2236c <TMT_Retrieve_Clock>
   22070:	9a01      	ldr	r2, [sp, #4]
   22072:	6823      	ldr	r3, [r4, #0]
   22074:	1b40      	subs	r0, r0, r5
   22076:	429a      	cmp	r2, r3
   22078:	d001      	beq.n	2207e <GTL_StdTimer_GetElapsed+0x22>
   2207a:	f7e6 ff93 	bl	8fa4 <__stack_chk_fail>
   2207e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   22080:	0000d0b2 	.word	0x0000d0b2
   22084:	000000ac 	.word	0x000000ac

00022088 <GTL_StdTimer_GetRemaining>:
   22088:	4b10      	ldr	r3, [pc, #64]	; (220cc <GTL_StdTimer_GetRemaining+0x44>)
   2208a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2208c:	4a10      	ldr	r2, [pc, #64]	; (220d0 <GTL_StdTimer_GetRemaining+0x48>)
   2208e:	447b      	add	r3, pc
   22090:	4606      	mov	r6, r0
   22092:	589b      	ldr	r3, [r3, r2]
   22094:	460c      	mov	r4, r1
   22096:	681a      	ldr	r2, [r3, #0]
   22098:	461d      	mov	r5, r3
   2209a:	9201      	str	r2, [sp, #4]
   2209c:	4a0a      	ldr	r2, [pc, #40]	; (220c8 <GTL_StdTimer_GetRemaining+0x40>)
   2209e:	4291      	cmp	r1, r2
   220a0:	d806      	bhi.n	220b0 <GTL_StdTimer_GetRemaining+0x28>
   220a2:	f000 f963 	bl	2236c <TMT_Retrieve_Clock>
   220a6:	1b80      	subs	r0, r0, r6
   220a8:	42a0      	cmp	r0, r4
   220aa:	d204      	bcs.n	220b6 <GTL_StdTimer_GetRemaining+0x2e>
   220ac:	1a20      	subs	r0, r4, r0
   220ae:	e003      	b.n	220b8 <GTL_StdTimer_GetRemaining+0x30>
   220b0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   220b4:	e000      	b.n	220b8 <GTL_StdTimer_GetRemaining+0x30>
   220b6:	2000      	movs	r0, #0
   220b8:	9a01      	ldr	r2, [sp, #4]
   220ba:	682b      	ldr	r3, [r5, #0]
   220bc:	429a      	cmp	r2, r3
   220be:	d001      	beq.n	220c4 <GTL_StdTimer_GetRemaining+0x3c>
   220c0:	f7e6 ff70 	bl	8fa4 <__stack_chk_fail>
   220c4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   220c6:	bf00      	nop
   220c8:	7ffffffe 	.word	0x7ffffffe
   220cc:	0000d086 	.word	0x0000d086
   220d0:	000000ac 	.word	0x000000ac

000220d4 <__libc_csu_init>:
   220d4:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, sl, lr}
   220d8:	e59f6050 	ldr	r6, [pc, #80]	; 22130 <__libc_csu_init+0x5c>
   220dc:	e59f5050 	ldr	r5, [pc, #80]	; 22134 <__libc_csu_init+0x60>
   220e0:	e08f6006 	add	r6, pc, r6
   220e4:	e08f5005 	add	r5, pc, r5
   220e8:	e0656006 	rsb	r6, r5, r6
   220ec:	e1a07000 	mov	r7, r0
   220f0:	e1a08001 	mov	r8, r1
   220f4:	e1a0a002 	mov	sl, r2
   220f8:	ebff9a98 	bl	8b60 <_init>
   220fc:	e1b06146 	asrs	r6, r6, #2
   22100:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, sl, pc}
   22104:	e2455004 	sub	r5, r5, #4
   22108:	e3a04000 	mov	r4, #0
   2210c:	e2844001 	add	r4, r4, #1
   22110:	e5b53004 	ldr	r3, [r5, #4]!
   22114:	e1a00007 	mov	r0, r7
   22118:	e1a01008 	mov	r1, r8
   2211c:	e1a0200a 	mov	r2, sl
   22120:	e12fff33 	blx	r3
   22124:	e1540006 	cmp	r4, r6
   22128:	1afffff7 	bne	2210c <__libc_csu_init+0x38>
   2212c:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, sl, pc}
   22130:	0000cf20 	.word	0x0000cf20
   22134:	0000cf14 	.word	0x0000cf14

00022138 <__libc_csu_fini>:
   22138:	e12fff1e 	bx	lr

0002213c <__aeabi_uidiv>:
   2213c:	e2512001 	subs	r2, r1, #1
   22140:	012fff1e 	bxeq	lr
   22144:	3a000074 	bcc	2231c <__aeabi_uidiv+0x1e0>
   22148:	e1500001 	cmp	r0, r1
   2214c:	9a00006b 	bls	22300 <__aeabi_uidiv+0x1c4>
   22150:	e1110002 	tst	r1, r2
   22154:	0a00006c 	beq	2230c <__aeabi_uidiv+0x1d0>
   22158:	e16f3f10 	clz	r3, r0
   2215c:	e16f2f11 	clz	r2, r1
   22160:	e0423003 	sub	r3, r2, r3
   22164:	e273301f 	rsbs	r3, r3, #31
   22168:	10833083 	addne	r3, r3, r3, lsl #1
   2216c:	e3a02000 	mov	r2, #0
   22170:	108ff103 	addne	pc, pc, r3, lsl #2
   22174:	e320f000 	nop	{0}
   22178:	e1500f81 	cmp	r0, r1, lsl #31
   2217c:	e0a22002 	adc	r2, r2, r2
   22180:	20400f81 	subcs	r0, r0, r1, lsl #31
   22184:	e1500f01 	cmp	r0, r1, lsl #30
   22188:	e0a22002 	adc	r2, r2, r2
   2218c:	20400f01 	subcs	r0, r0, r1, lsl #30
   22190:	e1500e81 	cmp	r0, r1, lsl #29
   22194:	e0a22002 	adc	r2, r2, r2
   22198:	20400e81 	subcs	r0, r0, r1, lsl #29
   2219c:	e1500e01 	cmp	r0, r1, lsl #28
   221a0:	e0a22002 	adc	r2, r2, r2
   221a4:	20400e01 	subcs	r0, r0, r1, lsl #28
   221a8:	e1500d81 	cmp	r0, r1, lsl #27
   221ac:	e0a22002 	adc	r2, r2, r2
   221b0:	20400d81 	subcs	r0, r0, r1, lsl #27
   221b4:	e1500d01 	cmp	r0, r1, lsl #26
   221b8:	e0a22002 	adc	r2, r2, r2
   221bc:	20400d01 	subcs	r0, r0, r1, lsl #26
   221c0:	e1500c81 	cmp	r0, r1, lsl #25
   221c4:	e0a22002 	adc	r2, r2, r2
   221c8:	20400c81 	subcs	r0, r0, r1, lsl #25
   221cc:	e1500c01 	cmp	r0, r1, lsl #24
   221d0:	e0a22002 	adc	r2, r2, r2
   221d4:	20400c01 	subcs	r0, r0, r1, lsl #24
   221d8:	e1500b81 	cmp	r0, r1, lsl #23
   221dc:	e0a22002 	adc	r2, r2, r2
   221e0:	20400b81 	subcs	r0, r0, r1, lsl #23
   221e4:	e1500b01 	cmp	r0, r1, lsl #22
   221e8:	e0a22002 	adc	r2, r2, r2
   221ec:	20400b01 	subcs	r0, r0, r1, lsl #22
   221f0:	e1500a81 	cmp	r0, r1, lsl #21
   221f4:	e0a22002 	adc	r2, r2, r2
   221f8:	20400a81 	subcs	r0, r0, r1, lsl #21
   221fc:	e1500a01 	cmp	r0, r1, lsl #20
   22200:	e0a22002 	adc	r2, r2, r2
   22204:	20400a01 	subcs	r0, r0, r1, lsl #20
   22208:	e1500981 	cmp	r0, r1, lsl #19
   2220c:	e0a22002 	adc	r2, r2, r2
   22210:	20400981 	subcs	r0, r0, r1, lsl #19
   22214:	e1500901 	cmp	r0, r1, lsl #18
   22218:	e0a22002 	adc	r2, r2, r2
   2221c:	20400901 	subcs	r0, r0, r1, lsl #18
   22220:	e1500881 	cmp	r0, r1, lsl #17
   22224:	e0a22002 	adc	r2, r2, r2
   22228:	20400881 	subcs	r0, r0, r1, lsl #17
   2222c:	e1500801 	cmp	r0, r1, lsl #16
   22230:	e0a22002 	adc	r2, r2, r2
   22234:	20400801 	subcs	r0, r0, r1, lsl #16
   22238:	e1500781 	cmp	r0, r1, lsl #15
   2223c:	e0a22002 	adc	r2, r2, r2
   22240:	20400781 	subcs	r0, r0, r1, lsl #15
   22244:	e1500701 	cmp	r0, r1, lsl #14
   22248:	e0a22002 	adc	r2, r2, r2
   2224c:	20400701 	subcs	r0, r0, r1, lsl #14
   22250:	e1500681 	cmp	r0, r1, lsl #13
   22254:	e0a22002 	adc	r2, r2, r2
   22258:	20400681 	subcs	r0, r0, r1, lsl #13
   2225c:	e1500601 	cmp	r0, r1, lsl #12
   22260:	e0a22002 	adc	r2, r2, r2
   22264:	20400601 	subcs	r0, r0, r1, lsl #12
   22268:	e1500581 	cmp	r0, r1, lsl #11
   2226c:	e0a22002 	adc	r2, r2, r2
   22270:	20400581 	subcs	r0, r0, r1, lsl #11
   22274:	e1500501 	cmp	r0, r1, lsl #10
   22278:	e0a22002 	adc	r2, r2, r2
   2227c:	20400501 	subcs	r0, r0, r1, lsl #10
   22280:	e1500481 	cmp	r0, r1, lsl #9
   22284:	e0a22002 	adc	r2, r2, r2
   22288:	20400481 	subcs	r0, r0, r1, lsl #9
   2228c:	e1500401 	cmp	r0, r1, lsl #8
   22290:	e0a22002 	adc	r2, r2, r2
   22294:	20400401 	subcs	r0, r0, r1, lsl #8
   22298:	e1500381 	cmp	r0, r1, lsl #7
   2229c:	e0a22002 	adc	r2, r2, r2
   222a0:	20400381 	subcs	r0, r0, r1, lsl #7
   222a4:	e1500301 	cmp	r0, r1, lsl #6
   222a8:	e0a22002 	adc	r2, r2, r2
   222ac:	20400301 	subcs	r0, r0, r1, lsl #6
   222b0:	e1500281 	cmp	r0, r1, lsl #5
   222b4:	e0a22002 	adc	r2, r2, r2
   222b8:	20400281 	subcs	r0, r0, r1, lsl #5
   222bc:	e1500201 	cmp	r0, r1, lsl #4
   222c0:	e0a22002 	adc	r2, r2, r2
   222c4:	20400201 	subcs	r0, r0, r1, lsl #4
   222c8:	e1500181 	cmp	r0, r1, lsl #3
   222cc:	e0a22002 	adc	r2, r2, r2
   222d0:	20400181 	subcs	r0, r0, r1, lsl #3
   222d4:	e1500101 	cmp	r0, r1, lsl #2
   222d8:	e0a22002 	adc	r2, r2, r2
   222dc:	20400101 	subcs	r0, r0, r1, lsl #2
   222e0:	e1500081 	cmp	r0, r1, lsl #1
   222e4:	e0a22002 	adc	r2, r2, r2
   222e8:	20400081 	subcs	r0, r0, r1, lsl #1
   222ec:	e1500001 	cmp	r0, r1
   222f0:	e0a22002 	adc	r2, r2, r2
   222f4:	20400001 	subcs	r0, r0, r1
   222f8:	e1a00002 	mov	r0, r2
   222fc:	e12fff1e 	bx	lr
   22300:	03a00001 	moveq	r0, #1
   22304:	13a00000 	movne	r0, #0
   22308:	e12fff1e 	bx	lr
   2230c:	e16f2f11 	clz	r2, r1
   22310:	e262201f 	rsb	r2, r2, #31
   22314:	e1a00230 	lsr	r0, r0, r2
   22318:	e12fff1e 	bx	lr
   2231c:	e3500000 	cmp	r0, #0
   22320:	13e00000 	mvnne	r0, #0
   22324:	ea000007 	b	22348 <__aeabi_idiv0>

00022328 <__aeabi_uidivmod>:
   22328:	e3510000 	cmp	r1, #0
   2232c:	0afffffa 	beq	2231c <__aeabi_uidiv+0x1e0>
   22330:	e92d4003 	push	{r0, r1, lr}
   22334:	ebffff80 	bl	2213c <__aeabi_uidiv>
   22338:	e8bd4006 	pop	{r1, r2, lr}
   2233c:	e0030092 	mul	r3, r2, r0
   22340:	e0411003 	sub	r1, r1, r3
   22344:	e12fff1e 	bx	lr

00022348 <__aeabi_idiv0>:
   22348:	e92d4002 	push	{r1, lr}
   2234c:	e3a00008 	mov	r0, #8
   22350:	ebff9a45 	bl	8c6c <_init+0x10c>
   22354:	e8bd8002 	pop	{r1, pc}

00022358 <function_name>:
   22358:	5f544d54 	.word	0x5f544d54
   2235c:	72746552 	.word	0x72746552
   22360:	65766569 	.word	0x65766569
   22364:	6f6c435f 	.word	0x6f6c435f
   22368:	6b63      	.short	0x6b63
	...

0002236c <TMT_Retrieve_Clock>:
   2236c:	b408      	push	{r3}
   2236e:	4b0f      	ldr	r3, [pc, #60]	; (223ac <.direct_call+0x6>)
   22370:	681b      	ldr	r3, [r3, #0]
   22372:	2b00      	cmp	r3, #0
   22374:	d117      	bne.n	223a6 <.direct_call>
   22376:	b507      	push	{r0, r1, r2, lr}
   22378:	f7fe ff2e 	bl	211d8 <wrapperlib_open>
   2237c:	2800      	cmp	r0, #0
   2237e:	d008      	beq.n	22392 <.bad_return>
   22380:	4684      	mov	ip, r0
   22382:	480b      	ldr	r0, [pc, #44]	; (223b0 <.direct_call+0xa>)
   22384:	f000 f80e 	bl	223a4 <.call_function>
   22388:	2800      	cmp	r0, #0
   2238a:	d002      	beq.n	22392 <.bad_return>
   2238c:	4907      	ldr	r1, [pc, #28]	; (223ac <.direct_call+0x6>)
   2238e:	6008      	str	r0, [r1, #0]
   22390:	e004      	b.n	2239c <.already_initialized>

00022392 <.bad_return>:
   22392:	bc0f      	pop	{r0, r1, r2, r3}
   22394:	4807      	ldr	r0, [pc, #28]	; (223b4 <.direct_call+0xe>)
   22396:	469e      	mov	lr, r3
   22398:	bc08      	pop	{r3}
   2239a:	4770      	bx	lr

0002239c <.already_initialized>:
   2239c:	4684      	mov	ip, r0
   2239e:	bc0f      	pop	{r0, r1, r2, r3}
   223a0:	469e      	mov	lr, r3
   223a2:	bc08      	pop	{r3}

000223a4 <.call_function>:
   223a4:	4760      	bx	ip

000223a6 <.direct_call>:
   223a6:	469c      	mov	ip, r3
   223a8:	bc08      	pop	{r3}
   223aa:	4760      	bx	ip
   223ac:	0002fecc 	.word	0x0002fecc
   223b0:	00022358 	.word	0x00022358
   223b4:	ffffffff 	.word	0xffffffff

Disassembly of section .fini:

000223b8 <_fini>:
   223b8:	e92d4008 	push	{r3, lr}
   223bc:	e8bd8008 	pop	{r3, pc}
